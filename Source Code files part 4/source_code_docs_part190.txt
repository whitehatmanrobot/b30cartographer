n \s50\sl-240\keepn \f0\fs21\lang1033 {\i pstream}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The stream to write to.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pevp}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The property bag to save.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i szPage}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 An HTML file (perhaps returned by a previous call  to {\b LoadFromHTML}) to use as a "template".  See {\b SaveToHTML}  for more information about this parameter.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Currently unused.  Must be set to 0.\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par \trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell I/O error.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par  \pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par  \pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 SetMRUListMaxEntries\par  \pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b SetMRUListMaxEntries(}{\b HMRULIST} {\i hMRUList}{\b , int} {\i cMaxEntries}{\b ) }\par \pard\plain \sa160\sl240 \fs21\lang1033 Sets the maximum number of entries in an MRU list, possibly  truncating the list.\par  \pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/MRU.CPP\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hMRUList}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] A handle to a previously opened MRU list.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i cMaxEntries}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] The maximum number of entries allowed in the list.  Must be  greater than 0 and less than 999.\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 If {\i cMaxEntries} is less than the number of entries currently  in the list, any excess entries will be removed from the list.  ---------------------------------------------------------------------------\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par \trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par  \pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par  \pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 SiteLW Object\par \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par  \pard\plain \sa160\sl240 \fs21\lang1033 Implements {\b ISiteLW}, which implements an ActiveX windowed control  that hosts an ActiveX lightweight windowless control.\par  \pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/ASLW.CPP\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Supported Interfaces\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b ISiteLW}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Provides functions to manipulate the site object.\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Use {\b AllocSiteLW} to create a {\b SiteLW} object.\par  \pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par  \pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 SiteWL Object\par \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par  \pard\plain \sa160\sl240 \fs21\lang1033 For each embedded control, the {\b Stage} control maintains a {\b SiteWL}  object ("Site WindowLess" that provides additional properties and  methods for the embedded control.  {\b SiteWL} is not directly  accessible. {\b SiteWL} should not be confused with {\b SiteLW}.\par  \pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/AUTODOC/SITEWL.D\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Properties\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b int Width}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Width of the control.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b int Height}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Height of the control.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b int Left}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 X offset of the top left corner of the control from the  top left corner of the {\b Stage}.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b int Top}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Y offset of the top left corner of the control from the  top left corner of the {\b Stage}.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b int Z}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Z order of the control.  Higher Zs are further toward the  back.  Z can be negative.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b BOOL Visible}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Whether the control is visible.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b LPSTR Name}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Name of the control.  New controls are automatically  assigned unique names.  The current limit on name length is 31  characters, not including a terminating NULL.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b BSTR Tag}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Control tag.  The tag can be used to store user data.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b int Cursor}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 ID of the cursor that is shown when the mouse is over  the object.  The ID can be any of the OCR_* values in winuser.h.\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\i For all users:} \par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab {\b SiteWL} currently supports many other animation-related  properties and methods for demonstration purposes only.  The functionality provided by these properties will eventually  be moved to a separate control.  If you wish to use these  properties before then, please see the demos in the mmctl\\demo  directory or contact MikeVK.\par  \pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par  \pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Sprite Object\par \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par  \pard\plain \sa160\sl240 \fs21\lang1033 A lightweight windowless ActiveX control which displays a  bitmap.  The bitmap may contain multiple "frames", in which  case the Sprite can "animate" by cycling between its frames.\par  The Sprite may be transparent, translucent, or entirely  opaque.  If translucent, the Sprite translucency can also  be made to cycle as the Sprite steps from frame to frame.\par  The Sprite can also be made to rotate.  If a Sprite is set to rotate,  only the first frame of its bitmap is displayed.\par  \pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/AUTODOC/SPRITE.D\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Properties\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Integer NumFrames}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The total number of frames in the bitmap.  Must be at least 1.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Integer FramesAcross}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The number of frames in each row of bitmap frames.  Must be at least 1.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Integer FramesDown}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The number of frames in each row of bitmap frames.  Must be at least 1.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b String BitmapPath}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The file system path to the bitmap file.  May be absolute or relative.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Boolean NotTransparent}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Whether or not the Sprite is transparent.\par  \pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 True\par  \pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The Sprite has no transparent sections.\par  \pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 False\par  \pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The Sprite is transparent in those areas where it is colored with  its 0th palette entry.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Integer InitTranslucency}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The initial translucency value.  Must be between  {\b SPRITE_MIN_TRANS}  (transparent) and  {\b SPRITE_MAX_TRANS}  (opaque), and between  {\b MinTranslucency}  and {\b MaxTranslucency} .\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Integer MinTranslucency}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The minimum translucency value.  Must be between  {\b SPRITE_MIN_TRANS}  (transparent) and  {\b SPRITE_MAX_TRANS}  (opaque).\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Integer MaxTranslucency}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The maximum translucency value.  Must be between  {\b SPRITE_MIN_TRANS}  (transparent) and  {\b SPRITE_MAX_TRANS}  (opaque).\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Integer TranslucencyStep}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The change in translucency which occurs with every call to the Sprite's  {\b IAnimate::Tick}  method.  Must be between  {\b SPRITE_MIN_TRANSSTEP}  (slowest) and  {\b SPRITE_MAX_TRANSSTEP}  (fastest).\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Integer TranslucencyBoundaryAction}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 What happens after the Sprite's translucency hits {\b MinTranslucency} {\b MaxTranslucency} .  See {\b SPRITE_BOUNDARYACTION} for possible values.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Integer InitTranslucencyDelay}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The delay in Sprite translucency stepping that occurs when the Sprite first appears.  Measured in terms of the number of calls to the Sprite's {\b IAnimate::Tick}  method.  Must be between  {\b SPRITE_MIN_TRANSDELAY}  (no delay) and  {\b SPRITE_MAX_TRANSDELAY}  (longest delay).\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Integer TranslucencyDelayAtMin}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The delay in Sprite translucency stepping that occurs when the Sprite hits its  minimum translucency.  Measured in terms of the number of calls to the  Sprite's {\b IAnimate::Tick}  method.  Must be between  {\b SPRITE_MIN_TRANSDELAY}  (no delay) and  {\b SPRITE_MAX_TRANSDELAY}  (longest delay).\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Integer TranslucencyDelayAtMax}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The delay in Sprite translucency stepping that occurs when the Sprite hits its  maximum translucency.  Measured in terms of the number of calls to the  Sprite's {\b IAnimate::Tick}  method.  Must be between  {\b SPRITE_MIN_TRANSDELAY}  (no delay) and  {\b SPRITE_MAX_TRANSDELAY}  (longest delay).\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Integer RotationType}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 How the Sprite will rotate when animated.  See {\b SPRITE_ROTATION_TYPE}  for possible values.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Integer InitRotation}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The Sprite's initial rotation.  Ignored if {\b RotationType} is  {\b SPRITE_ROT_NONE} .  Must be between  {\b SPRITE_MIN_ROT}  and {\b SPRITE_MAX_ROT} .\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Integer MinRotation}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The Sprite's minimum rotation.  Ignored if {\b RotationType} is  {\b SPRITE_ROT_NONE} .  Must be between  {\b SPRITE_MIN_ROT}  and {\b SPRITE_MAX_ROT} .\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Integer MaxRotation}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The Sprite's maximum rotation.  Ignored if {\b RotationType} is  {\b SPRITE_ROT_NONE} .  Must be between  {\b SPRITE_MIN_ROT}  and {\b SPRITE_MAX_ROT} .\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Integer RotationStep}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The change in rotation which occurs with every call to the Sprite's  {\b IAnimate::Tick}  method.  Must be between  {\b SPRITE_MIN_ROTSTEP}  (slowest) and  {\b SPRITE_MAX_ROTSTEP}  (fastest).\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Integer RotationBoundaryAction}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 What happens after the Sprite's rotation hits {\b MinRotation} {\b MaxRotation} .  See {\b SPRITE_BOUNDARYACTION} for possible values.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Integer InitRotationDelay}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The delay in Sprite rotation stepping that occurs when the Sprite first appears.  Measured in terms of the number of calls to the Sprite's {\b IAnimate::Tick}  method.  Must be between  {\b SPRITE_MIN_ROTDELAY}  (no delay) and  {\b SPRITE_MAX_ROTSDELAY}  (longest delay).\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Integer RotationDelayAtMin}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The delay in Sprite rotation stepping that occurs when the Sprite hits its  minimum rotation.  Measured in terms of the number of calls to the  Sprite's {\b IAnimate::Tick}  method.  Must be between  {\b SPRITE_MIN_ROTDELAY}  (no delay) and  {\b SPRITE_MAX_ROTSDELAY}  (longest delay).\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Integer RotationDelayAtMax}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The delay in Sprite rotation stepping that occurs when the Sprite hits its  maximum rotation.  Measured in terms of the number of calls to the  Sprite's {\b IAnimate::Tick}  method.  Must be between  {\b SPRITE_MIN_ROTDELAY}  (no delay) and  {\b SPRITE_MAX_ROTSDELAY}  (longest delay).\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Integer X1}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The x-coordinate of the first vertex of an arbitrary quadrangle  in which to draw the Sprite.  If any of the coordinates in the four  quadrangle vertices (X1,Y1), (X2,Y2), (X3,Y3), or (X4,Y4) is non-zero,  the Sprite will be drawn using quadrangle BLT-ing, ignoring any  translucency or rotation settings.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Integer Y1}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The y-coordinate of the first vertex of an arbitrary quadrangle  in which to draw the Sprite.  See {\b X1} for more information.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Integer X2}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The x-coordinate of the second vertex of an arbitrary quadrangle  in which to draw the Sprite.  See {\b X1} for more information.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Integer Y2}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The y-coordinate of the second vertex of an arbitrary quadrangle  in which to draw the Sprite.  See {\b X1} for more information.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Integer X3}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The x-coordinate of the third vertex of an arbitrary quadrangle  in which to draw the Sprite.  See {\b X1} for more information.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Integer Y3}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The y-coordinate of the third vertex of an arbitrary quadrangle  in which to draw the Sprite.  See {\b X1} for more information.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Integer X4}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The x-coordinate of the fourth vertex of an arbitrary quadrangle  in which to draw the Sprite.  See {\b X1} for more information.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Integer Y4}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The y-coordinate of the fourth vertex of an arbitrary quadrangle  in which to draw the Sprite.  See {\b X1} for more information.\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Methods\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b  SizeToContent}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Set the Sprite's bounding rectangle to the same size as any frame  in the Sprite's underlying bitmap.\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\i For all users:} \par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab This control cannot be directly embedded in IE3, since IE3 does  not support windowless controls.  Instead, embed the {\b HostLW}  control in IE3, and then embed this control into the {\b HostLW}  control.\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab This control is packaged in both design-time and run-time versions.  The design time version provides a property page for editing all  the control's properties.\par  \pard\plain \sa160\sl240 \fs21\lang1033 \li720 The run-time version eliminates the property pages (in order to reduce  code size).\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab The class ID of the design-time version of this control is  "40DA82E1-70FE-11CF-92F8-00AA00613BF1".\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab The class ID of the run-time version of this control is  "TBD (currently the same as the design-time version)".\par  \pard\plain \sa160\sl240 \fs21\lang1033 {\i For C++ users:} \par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab The class ID of this control is defined as CLSID_CSpriteControl in  "csprite.h".\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab The ProgID of this control is "Sprite.Sprite.3".\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab This control implements the following interfaces:\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IUnknown}: A delegating {\b IUnknown} that supports  aggregation\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b ISprite}: Provides low-level efficient access to the  properties of a {\b Sprite} control.  See that interface  for more information.\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IViewObjectEx} subset (based on {\b IViewObject} and  {\b IViewObject2}): Used to display the object.  DVASPECT_CONTENT is the only supported aspect.  {\b Freeze},  {\b Unfreeze}, {\b GetRect}, {\b GetViewStatus}, {\b QueryHitRect},  and {\b GetNaturalExtent} are not implemented.\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IOleObject} subset: Used to allow the container to provide  the client site pointer, invoke control verbs, and get control  state.  Only {\b SetClientSite}, {\b DoVerb}, {\b EnumVerbs}  (design time version only), and {\b GetMiscStatus} are  implemented.\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IOleInPlaceObjectWindowless} subset (based on {\b IOleWindow}  and {\b IOleInPlaceObject}): Used to change control state and  pass window messages to the control.  Only {\b UIDeactivate},  {\b SetObjectRects}, and {\b OnWindowMessage} are implemented.\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IOleControl} subset: Used to inform the control of  ambient property changes.  Only {\b OnAmbientPropertyChange}  is implemented.\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b ISpecifyPropertyPages}: Used to retrieve information about  the control's property page.  {\b GetPages} is implemented  only in the design time version.\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IPersistStreamInit} (based on {\b IPersistStream}):  Used to persist the control's data to/from an {\b IStream}.  The file format is compatible with past and future versions  of this control (i.e. adding and removing properties won't  break the control).\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IPersistPropertyBag}: Used to persist the control's data  to/from an {\b IPropertyBag}.\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IAnimate}: Used to control which frame of the bitmap is  displayed.\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b ISprite}: Provides a vtable mechanism for getting and setting  Sprite properties.\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IPersistVariantIO}: Used to persist Sprite properties and to  get and set persistable properties via OLE automation.\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IServiceProvider}: Used to pass service requests (via  {\b QueryService} to Sprite's client site.\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IOleCommandTarget}: Used to stop the Sprite if it is in the  middle of loading.\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IDispatch}: Used to implement non-persistable properties  and methods.\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab This control sources (calls) the following interfaces (if  available) on the container-provided site object:\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IOleClientSite}: The client site pointer provided by  the container.\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IOleInPlaceSiteWindowless}: Used to request that the  control's position be changed, acquire mouse capture,  invalidate and update the display of the control, and  (at design time only) draw XOR'd image of the control during  dragging.\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IDispatch}: Used to access ambient properties (currently  DISPID_AMBIENT_USERMODE).\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IAdviseSink} (provided via {\b IViewObject::SetAdvise} Used to advise the container that the palette of the  control changed.\par  \pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par  \pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Stage Object\par \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par  \pard\plain \sa160\sl240 \fs21\lang1033 A lightweight windowless ActiveX control which is itself a container  for lightweight windowless controls.\par  \pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/AUTODOC/STAGE.D\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Properties\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Boolean Transparent}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 True if the stage is transparent (i.e. you  can see through it to any controls or background underneath),  False if the stage is opaque (in which case the color is {\i BackColor}).  This doesn't affect the controls within the stage.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Long BorderColor}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The background color of the stage, expressed as a  standard 24-bit RGB value.  {\i BorderColor} is ignored if  {\i Transparent} is True.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Long Count}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The number of "Players" (controls) contained in the  {\b Stage}.  Read-only.\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\i For all users:} \par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab The controls contained within the {\b Stage} are accessible via  OLE Automation.  See the "For VBS Users" section for details.\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab Currently {\b Stage} provides animation functionality for  demonstration purposes only\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab This control cannot be directly embedded in IE3, since IE3 does  not support windowless controls.  Instead, embed the {\b HostLW}  control in IE3, and then embed this control into the {\b HostLW}  control.\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab {\b Stage} is packaged in both design-time and run-time versions.  The design time version allows controls to be embedded in  {\b Stage} using the right-click context menu.  Various property  pages are provided for editing most properties, including "site"  properties which are implemented by {\b Stage} but maintained  separately by {\b SiteWL} for each embedded control.\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab To change the background color while authoring, select  the control and press "c".\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab Stage fires an event to the container whenever a contained  control is clicked.  The event parameters include object-relative  X and Y coordinates of the click location.  See the notify.htm  sample in the mmctl\\demo directory for details.  Stage also  supports MouseEnter, MouseLeave, MouseUp, and MouseDown events.  See input.htm for examples.\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab Stage also supports Tick and EdgeAction events; see notify.htm,  and note that the way these events are supported may change.\par  \pard\plain \sa160\sl240 \fs21\lang1033 \li720 The run-time version drops editing features (most notably the  property page) in order to reduce code size.\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab The class ID of the design-time version of this control is  "2E0E7F00-6F81-11CF-AB13-00AA00A437B1".\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab The class ID of the run-time version of this control is  "TBD" (currently the same as the design-time version).\par  \pard\plain \sa160\sl240 \fs21\lang1033 {\i For VBS users:} \par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab Use the Players method to access a control by name; for example,  "Stage1.Players("Sprite 2").\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab Use the Count property with the PlayerNum method to loop through  all the controls in a Stage.  For an example, see vbstest.htm in  the MM Controls demo directory.  If you want to change the Z order of  all controls, use a variation on that method:  Loop through the  controls and assign each one to an object variable (probably in an  array), and then loop through the array and set Z.\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab The numerical arguments to the PlayerNum method refer to Stage's  own internal numbering of the controls.  This numbering may not  be the same as the numbering you see in the HTML file when Stage  writes out the properties of its embedded controls -- for example,  "Players(1).Name=Tiny".  In this example, do not expect that you  can use "PlayerNum(1)" to refer to the control named "Tiny".  When you want to refer to a particular control, use the Players  method with the control name, e.g. "Stage1.Players("Tiny").\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab You can use identical names at different levels of the containment  hierarchy and distinguish them by providing a complete "path" to  the name. For example, if you have one Stage nested inside another  inside another, and all are named "Stage1", you can access the  innermost one as "Stage1.Players("Stage 1").Players.("Stage 1").  If a name at a lower level of the hierarchy is unambiguous, you  can access it directly from the top level.  For example, if a  deeply nested control named "Banner Text" is uniquely named, you  can access it as Stage1.Players("Banner Text").\par  \pard\plain \sa160\sl240 \fs21\lang1033 {\i For C++ users:} \par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab The class ID of this control is defined as CLSID_CStageOC in  "Stage.h".\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab The ProgID of this control is "Stage.Stage.1".\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab This control implements the following interfaces:\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IUnknown}: A delegating {\b IUnknown} that supports  aggregation\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IStage}: Provides low-level efficient access to the  properties of a {\b Stage} control.  See that interface  for more information.  [TBD]\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IViewObjectEx} subset (based on {\b IViewObject} and  {\b IViewObject2}): Used to display the object.  DVASPECT_CONTENT is the only supported aspect.  {\b Freeze},  {\b Unfreeze}, {\b GetRect}, {\b GetViewStatus}, {\b QueryHitRect},  and {\b GetNaturalExtent} are not implemented.\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IOleObject} subset: Used to allow the container to provide  the client site pointer, invoke control verbs, and get control  state.  Only {\b SetClientSite}, {\b DoVerb}, {\b EnumVerbs}  (design time version only), and {\b GetMiscStatus} are  implemented.\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IOleInPlaceObjectWindowless} subset (based on {\b IOleWindow}  and {\b IOleInPlaceObject}): Used to change control state and  pass window messages to the control.  Only {\b UIDeactivate},  {\b SetObjectRects}, and {\b OnWindowmessage}, are implemented.\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IOleControl} subset: Used to inform the control of  ambient property changes.  Only {\b OnAmbientPropertyChange}  is implemented.\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b ISpecifyPropertyPages}: Used to retrieve information about  the control's property page.  {\b GetPages} is implemented  only in the design time version.\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IPersistStreamInit} (based on {\b IPersistStream}):  Used to persist the control's data to/from an {\b IStream}.  The file format is compatible with past and future versions  of this control (i.e. adding and removing properties won't  break the control).\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IPersistPropertyBag}: Used to persist the control's data  to/from an {\b IPropertyBag}.\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IDispatch}:  Provides access to the control's properties.  Does not provide type information.\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab This control sources (calls) the following interfaces (if  available) on the container-provided site object:\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IOleClientSite}: The client site pointer provided by  the container.\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IOleInPlaceSiteWindowless}: Used to request that the  control's position be changed, acquire mouse capture,  invalidate and update the display of the control, and  (at design time only) draw XOR'd image of the control during  dragging.\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IDispatch}: Used to access ambient properties (currently  DISPID_AMBIENT_USERMODE).\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IAdviseSink} (provided via {\b IViewObject::SetAdvise} Used to advise the container that the palette of the  control changed.\par  \pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par  \pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 TaskMemAlloc\par  \pard \plain \sa160\sl240 \fs21\lang1033 {\b LPVOID} {\b TaskMemAlloc(}{\b ULONG} {\i cb}{\b ) }\par \pard\plain \sa160\sl240 \fs21\lang1033 Allocates memory using the task memory allocator (see {\b CoGetMalloc}).  This is simply a macro that calls {\b HelpMemAlloc} with specific flags.\par  \pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/HELPMEM.CPP\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns a pointer to the allocated block of memory.  Returns NULL on  error.\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i cb}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The number of bytes of memory to allocate.\par  \pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par  \pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 TaskMemFree\par  \pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b TaskMemFree(}{\b LPVOID} {\i pv}{\b ) }\par \pard\plain \sa160\sl240 \fs21\lang1033 Frees a block of memory previously allocated using {\b TaskMemAlloc}.  This is simply a macro that calls {\b HelpMemFree} with specific flags.\par  \pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/HELPMEM.CPP\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pv}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 A pointer to the block of memory to allocate.\par  \pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par  \pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 TCHARFromGUID\par  \pard \plain \sa160\sl240 \fs21\lang1033 {\b TCHAR*} {\b TCHARFromGUID(}{\b REFGUID} {\i guid}{\b , TCHAR*} {\i pszGUID}{\b , int} {\i cchMaxGUIDLen}{\b ) }\par \pard\plain \sa160\sl240 \fs21\lang1033 Converts a GUID to a TCHAR-based string representation.\par  \pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/GUID2TCH.CPP\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns an alias to {\i pszGUID}.\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i guid}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] The GUID to convert.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pszGUID}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out] The string form of the {\i guid}.  Can't be NULL.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i cchMaxGUIDLen}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] {\i szGUID} is, on entry, assumed to point to a buffer of  at least {\i cchMaxGUIDLen} characters in length.  Must be  greater at least 39.\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Unlike {\b StringFromGUID2} which always returns an OLECHAR form  of the GUID string, this function returns a wide or single-byte  form of the string depending on the build environment.\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b CLSIDFromTCHAR}  ---------------------------------------------------------------------------\par  \pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par  \pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 TextFX Object\par \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par  \pard\plain \sa160\sl240 \fs21\lang1033 A lightweight windowless ActiveX control that displays and  animates text.\par  \pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/AUTODOC/TEXTFX.D\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Properties\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b LPSTR Text}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Text displayed by the control.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b COLORREF TextColor}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Text color.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b COLORREF BackColor}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Background color.  Ignored if BackTransparent  is TRUE.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b BOOL BackTransparent}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Whether background is transparent.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b int BorderWidth}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Border width.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b int Angle}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Angle (in degrees) at which the text is drawn.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b DWORD FXFlags}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Flags that determine what effects are used to  display the text.  The only flag currently supported is FX_USEGUIDES.  However, other effects such as rotation are available via other  properties such as Angle.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b (various) Font...}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 See Win32 doc for LOGFONT:  all LOGFONT fields  are available as properties where "lf" is replaced by "Font" (e.g.  FontHeight, FontFaceName, and so on).\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b int Guide...}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 (Guide[Top | Bot][X | Y][1 | 2 | 3 | 4]Now;  for example, GuideBotY2Now).  Control points for  Bezier guidelines that determine where text is drawn, if FX_USEGUIDES  is set in FXFlags.  For example, GuideTopX1Now is the X coordinate of  one endpoint of the top guideline.  The first and fourth points on each  guideline are endpoints, and the second and third points are control  points of the Bezier curve that defines the guideline.\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\i For all users:} \par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab To change the text color while authoring, select the  control and press "c" (or use the Font dialog available on  the context menu).  To change the background color, select the  control and press "C".\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab {\b TextFX} currently supports many other animation-related  properties for demonstration purposes only.  The functionality  provided by these properties will eventually be moved to a  separate control.  If you wish to use these  properties before then, please see the demos in the mmctl\\demo  directory or contact MikeVK.\par  \pard\plain \sa160\sl240 \fs21\lang1033 {\i For C++ users:} \par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab The class ID of this control is defined as CLSID_CTextFXOC in  "textfx.h".\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab The ProgID of this control is "TextFX.TextFX.1".\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab This control implements the following interfaces:\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IUnknown}: A delegating {\b IUnknown} that supports  aggregation\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b ITextFX}: Provides low-level efficient access to the  properties of a {\b TextFX} control.  See that interface  for more information.  [TBD]\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IViewObjectEx} subset (based on {\b IViewObject} and  {\b IViewObject2}): Used to display the object.  DVASPECT_CONTENT is the only supported aspect.  {\b Freeze},  {\b Unfreeze}, {\b GetRect}, {\b GetViewStatus}, {\b QueryHitRect},  and {\b GetNaturalExtent} are not implemented.\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IOleObject} subset: Used to allow the container to provide  the client site pointer, invoke control verbs, and get control  state.  Only {\b SetClientSite}, {\b DoVerb}, {\b EnumVerbs}  (design time version only), and {\b GetMiscStatus} are  implemented.\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IOleInPlaceObjectWindowless} subset (based on {\b IOleWindow}  and {\b IOleInPlaceObject}): Used to change control state and  pass window messages to the control.  Only {\b UIDeactivate},  {\b SetObjectRects}, and {\b OnWindowmessage}, are implemented.\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IOleControl} subset: Used to inform the control of  ambient property changes.  Only {\b OnAmbientPropertyChange}  is implemented.\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b ISpecifyPropertyPages}: Used to retrieve information about  the control's property page.  {\b GetPages} is implemented  only in the design time version.\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IPersistStreamInit} (based on {\b IPersistStream}):  Used to persist the control's data to/from an {\b IStream}.  The file format is compatible with past and future versions  of this control (i.e. adding and removing properties won't  break the control).\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IPersistPropertyBag}: Used to persist the control's data  to/from an {\b IPropertyBag}.\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IDispatch}:  Provides access to the control's properties.  Does not provide type information.\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab This control sources (calls) the following interfaces (if  available) on the container-provided site object:\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IOleClientSite}: The client site pointer provided by  the container.\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IOleInPlaceSiteWindowless}: Used to request that the  control's position be changed, acquire mouse capture,  invalidate and update the display of the control, and  (at design time only) draw XOR'd image of the control during  dragging.\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IDispatch}: Used to access ambient properties (currently  DISPID_AMBIENT_USERMODE).\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IAdviseSink} (provided via {\b IViewObject::SetAdvise} Used to advise the container that the palette of the  control changed.\par  \pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par  \pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 UNICODEConcat\par  \pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b UNICODEConcat(}{\b wchar_t *} {\i wpchDst}{\b , const wchar_t *} {\i wpchSrc}{\b , int} {\i wcchDstMax}{\b ) }\par \pard\plain \sa160\sl240 \fs21\lang1033 Concatenates one UNICODE string to another.\par  \pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/UCAT.CPP\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i wpchDst}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Where to copy {\i wpchSrc} to.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i wpchSrc}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 String to copy.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i wcchDstMax}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Capacity of {\i wpchDst} (in wide characters).  If {\i wcchDstMax} is less than or equal to zero, this function  does nothing.\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Provided {\i wcchDstMax} greater than zero, {\i wpchDst} is always  null-terminated.\par  \pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par  \pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 UNICODECopy\par  \pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b UNICODECopy(}{\b wchar_t *} {\i wpchDst}{\b , const wchar_t *} {\i wpchSrc}{\b , int} {\i wcchDstMax}{\b ) }\par \pard\plain \sa160\sl240 \fs21\lang1033 Copies one UNICODE string to another.\par  \pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/UCOPY.CPP\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i wpchDst}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Where to copy {\i wpchSrc} to.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i wpchSrc}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 String to copy.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i wcchDstMax}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Capacity of {\i wpchDst} (in wide characters).  If {\i wcchDstMax} is less than or equal to zero, this function  does nothing.\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Provided {\i wcchDstMax} greater than zero, {\i wpchDst} is always  null-terminated.\par  \pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par  \pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 UNICODEToANSI\par  \pard \plain \sa160\sl240 \fs21\lang1033 {\b int} {\b UNICODEToANSI(}{\b LPSTR} {\i pchDst}{\b , LPCWSTR} {\i pwchSrc}{\b , int} {\i cchDstMax}{\b ) }\par \pard\plain \sa160\sl240 \fs21\lang1033 Converts a UNICODE string to ANSI.\par  \pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/UNICODE.CPP\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pchDst}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The buffer that will hold the output ANSI string.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pwchSrc}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The input UNICODE string.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i cchDstMax}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The capacity of {\i pchDst} (in characters).\par  \pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par  \pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 UNICODEToPrintableANSI\par  \pard \plain \sa160\sl240 \fs21\lang1033 {\b int} {\b UNICODEToPrintableANSI(}{\b LPSTR} {\i pchDst}{\b , LPCWSTR} {\i pwchSrc}{\b , int} {\i cchDstMax}{\b , int} {\i cchSrc}{\b , DWORD} {\i dwFlags}{\b ) }\par \pard\plain \sa160\sl240 \fs21\lang1033 Converts a UNICODE string to a printable ANSI string.\par  \pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/UTPA.CPP\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 If the function succeeds, and {\i cchDstMax} is nonzero, the return  value is the number of characters (including the terminating null)  written to the buffer pointed to by {\i pchDst}.  If the function  succeeds, and {\i cchDstMax} is zero, the return value is the required  size, in bytes, for a buffer that can receive the translated string.  If the function fails, the return value is 0.\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pchDst}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The buffer that will hold the output ANSI string.  {\i pchDst} should be NULL if {\i cchDstMax} is zero.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pwchSrc}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The input UNICODE string.  If {\i cchSrc} is  specified (i.e. is not -1), then {\i pwchSrc} may contain embedded  null characters (which are each written out as "%00").\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i cchDstMax}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The capacity of {\i pchDst} (in characters).\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i cchSrc}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The length of {\i pwchSrc} (in wide characters).  If {\i cchSrc} is -1, then {\i pwchSrc} is assumed to be null-terminated  and the length is calculated automatically.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 May contain the following flags.  Only one of  PA_CSV or PA_HTML may be specified.\par  \pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 PA_CSV\par  \pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The string being written is a CSV (comma-separated  variable) token.\par  \pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 PA_HTML\par  \pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The string being written is an HTML token.\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The printable ANSI string stored in {\i pchDst} is compatible with  the CSV (Excel-readable comma-delimited) format, i.e. the output  string may be used as a field in a CSV file.  The output string  is the same as the input string (converted to ANSI), but with the  following processing applied:\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab If the string contains a double quotation mark '"',  then the string is surrounded in double quotation marks.  If PA_HTML is specified, then the string is quoted if it is empty  (i.e. "") or contains any characters other than a-z, A-Z, 0-9,  or dash "-" or underscore "_".  If PA_CSV is specified, then the  string is quoted if it contains a comma ",".\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab Any double quotation mark '"', percent '%', or pipe '|' characters  in the string are doubled (e.g. "%" becomes "%%").  Exception:  '%' or '|' characters at the end of the string are not doubled.\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab Any nonprintable ANSI characters (in the range 0-255) are  represented in hexadecimal with a percent character prefix  (e.g. %07 represents character 7).  The hexadecimal number must  contain exactly two digits.\par  \pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab Any nonprintable UNICODE characters (in the range 256-65535) are  represented in hexadecimal with a pipe character prefix  (e.g. |0123 represents character 0x123).  The hexadecimal number  must contain exactly four digits.\par  \pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par  \pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 UninitHelpAdvise\par  \pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b UninitHelpAdvise(}{\b HelpAdviseInfo *} {\i pha}{\b ) }\par \pard\plain \sa160\sl240 \fs21\lang1033 Peforms final cleanup of a {\b HelpAdviseInfo} structure, including  releasing the {\b IAdviseSink} pointer if necessary.\par  \pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/ADVISE.CPP\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pha}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Caller-allocated structure that was  previously initialized using {\b InitHelpAdvise}.\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 You must call {\b InitHelpAdvise} before calling {\b HelpSetAdvise}  and {\b HelpGetAdvise}, and {\b UninitHelpAdvise} when the object  that contains the {\b HelpAdviseInfo} structure is deleted.\par  \pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par  \pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VariantFromString\par  \pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b VariantFromString(}{\b VARIANT *} {\i pvarDst}{\b , LPCTSTR} {\i szSrc}{\b ) }\par \pard\plain \sa160\sl240 \fs21\lang1033 Initializes a VARIANT to contain the copy of an LPCTSTR string.\par  \pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/DISPHELP.CPP\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pvarDst}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 A caller-supplied VARIANT structure to  initialize.  The initial contents of {\i pvarDst} are ignored;  the caller does not need to call {\b VariantInit} before  calling {\b VariantFromString}.  Both {\i pvarDst}->{\i vt} and  {\i pvarDst}->{\i bstrVal} are initialized by this function.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i szSrc}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The string to copy.  Can't be NULL.\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par \trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Out of memory.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par  \pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par  \pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VariantIO Object\par \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par  \pard\plain \sa160\sl240 \fs21\lang1033 Provides a property bag implementation which supports {\b IPropertyBag}  as well as {\b IVariantIO}, {\b IManageVariantIO}, and  {\b IEnumVariantProperty}.\par  \pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/AVIO.CPP\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Supported Interfaces\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b {\b IPropertyBag}}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Allows properties to be read from and written to the  {\b VariantIO} object.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b {\b IVariantIO}}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 An alternative to {\b IPropertyBag} which allows the  caller to implement property-based persistence with less code.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b {\b IManageVariantIO}}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Based on {\b IVariantIO}.  Allows the caller to  control how the methods of {\b IVariantIO} operate (e.g. whether the  {\b IVariantIO} is in loading mode or saving mode).\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b {\b IEnumVariantProperty}}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Allows the caller to enumerate the  properties that are currently in the {\b VariantIO} object.  Note that  {\b VariantIO} does not implement {\b IEnumVariantProperty::Clone} .\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Use {\b AllocVariantIO} to create a {\b VariantIO} object.\par  \pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par  \pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VariantIOOnPropertyBag Object\par \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par  \pard\plain \sa160\sl240 \fs21\lang1033 Provides an implementation of {\b IVariantIO} (and {\b IManageVariantIO})  that operates on a given {\b IPropertyBag}.\par  \pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/AVIOOPB.CPP\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Supported Interfaces\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b {\b IVariantIO}}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 An alternative to {\b IPropertyBag} which allows the  caller to implement property-based persistence with less code.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b {\b IManageVariantIO}}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Based on {\b IVariantIO}.  Allows the caller to  control how the methods of {\b IVariantIO} operate (e.g. whether the  {\b IVariantIO} is in loading mode or saving mode).  Note that  {\b VariantIOOnPropertyBag} does not implement  {\b IManageVariantIO::DeleteAllProperties} .\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b {\b IPropertyBag}}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Provides access to the same {\b IPropertyBag}  object that was given to {\b AllocVariantIOOnPropertyBag} as  the {\b IPropertyBag} to operate on.\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Use {\b AllocVariantIOOnPropertyBag} to create a  {\b VariantIOOnPropertyBag} object.\par  \pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par  \pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VariantIOToMapDISPID Object\par \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par  \pard\plain \sa160\sl240 \fs21\lang1033 Provides an implementation of {\b IVariantIO} which is used to map a  property name to a DISPID (property number) or vice versa.  Can also  be used to get or set the value of that property.\par  \pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/AVIOTMD.CPP\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Supported Interfaces\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b {\b IVariantIO}}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Typically used as a parameter to  {\b IPersistVariantIO::DoPersist} .\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Use {\b AllocVariantIOToMapDISPID} to create a  {\b VariantIOToMapDISPID} object.\par  \pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par  \pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VariantPropertyClear\par  \pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b VariantPropertyClear(}{\b VariantProperty *} {\i pvp}{\b ) }\par \pard\plain \sa160\sl240 \fs21\lang1033 Frees data maintained in a {\b VariantProperty} structure.\par  \pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/VPC.CPP\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pvp}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The structure to clear.\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This function calls {\b SysFreeString} on {\i pvp}->{\i bstrPropName}  and {\b VariantClear} on {\i pvp}->{\i varValue}.\par  Unlike {\b VariantPropertyInit}, this function {\b does}  assume  that {\i pvp} was correctly initialized before this function  was called.\par  \pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par  \pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VariantPropertyInit\par  \pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b VariantPropertyInit(}{\b VariantProperty *} {\i pvp}{\b ) }\par \pard\plain \sa160\sl240 \fs21\lang1033 Initializes a {\b VariantProperty} structure.\par  \pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/VPI.CPP\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pvp}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The structure to initialize.\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Unlike {\b VariantPropertyClear}, this function does not assume  that {\i pvp} contained valid data on entry.\par  \pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par  \pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VariantTypeNameToNumber\par  \pard \plain \sa160\sl240 \fs21\lang1033 {\b VARTYPE} {\b VariantTypeNameToNumber(}{\b char *} {\i sz}{\b ) }\par \pard\plain \sa160\sl240 \fs21\lang1033 Converts a VARTYPE string name to a VARTYPE number.\par  \pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/VTNAME.CPP\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns the VARTYPE value identified by string name {\i sz}.  On error, 0 (VT_EMPTY) is returned.\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i sz}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The VARTYPE string name.  The case of {\i sz} doesn't  matter.\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\i sz} should contain the same string as the VT_ identifier name,  but without the "VT_" (e.g. "I2" should stored in {\i sz} to indicate  the type VT_I2).  If {\i sz} starts with a '#' character, then the  following number is interpreted as a VARTYPE value.\par  \pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par  \pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VariantTypeNumberToName\par  \pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b VariantTypeNumberToName(}{\b VARTYPE} {\i vt}{\b , char *} {\i pch}{\b ) }\par \pard\plain \sa160\sl240 \fs21\lang1033 Converts a VARTYPE value to a string name that can serve as the  name of the type.\par  \pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/VTNUM.CPP\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i vt}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The type number to convert.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pch}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 A buffer to store the string name in.  This buffer  should be large enough to hold _MAX_PATH characters.\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 If {\i vt} isn't a known type, then "#{\i vt}" (e.g "#42") is stored  in {\i pch}.  Otherwise, what's stored in {\i pch} is the same  as the VT_ identifier name, but without the "VT_" (e.g. "I2" is stored  in {\i pch} if {\i vt} is VT_I2).\par  \pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par  \pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 WriteHTMLTagFromVariantIO\par  \pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b WriteHTMLTagFromVariantIO(}{\b IStream *} {\i pstream}{\b , IEnumVariantProperty *} {\i pevp}{\b , DWORD} {\i dwFlags}{\b ) }\par \pard\plain \sa160\sl240 \fs21\lang1033 Writes an HTML tag whose attributes are stored in an {\b VariantIO}  object to an {\b IStream}.\par  \pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/WHTMLTAG.CPP\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pstream}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The stream to write to.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pevp}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 An interface on the {\b VariantIO}  object containing the attribute name/value pairs.  The tag name  should be stored in {\i pevp} as the "_tag" property.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Currently unused.  Must be set to 0.\par  \pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par  \pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 WriteHTMLToken\par  \pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b WriteHTMLToken(}{\b IStream *} {\i pstream}{\b , LPLOLESTR} {\i wsz}{\b ) }\par \pard\plain \sa160\sl240 \fs21\lang1033 Writes an HTML token (given as an LPOLESTR) to an {\b IStream}  in ANSI format.\par  \pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/WHTMLTOK.CPP\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pstream}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The stream to write to.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i wsz}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The token to write.\par  \pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par  \pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 WriteVariantProperty\par  \pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b WriteVariantProperty(}{\b IStream *} {\i pstream}{\b , VariantProperty *} {\i pvp}{\b , DWORD} {\i dwFlags}{\b ) }\par \pard\plain \sa160\sl240 \fs21\lang1033 Writes a {\b VariantProperty} to an {\b IStream} in a simple tagged  binary format.\par  \pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/WVP.CPP\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pstream}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The stream to write to.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pvp}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The property name/value pair to write.  If {\i pvp} is NULL, then this function writes a VariantPropertyHeader  containing {\i iType}==-1 and {\i cbData}==0 to mark the end of the  stream.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Currently unused.  Must be set to 0.\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 See {\b VariantPropertyHeader} for a description of the format of  the data written to {\i pstream} by this function.\par  \pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par  \pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 WriteVariantPropertyToCSV\par  \pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b WriteVariantPropertyToCSV(}{\b IStream *} {\i pstream}{\b , VariantProperty *} {\i pvp}{\b , DWORD} {\i dwFlags}{\b ) }\par \pard\plain \sa160\sl240 \fs21\lang1033 Writes a {\b VariantProperty} to an {\b IStream} in CSV (Excel-readable  comma-delimited) format.\par  \pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/WVPTCSV.CPP\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pstream}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The stream to write to.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pvp}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The property name/value pair to write.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Currently unused.  Must be set to 0.\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 *{\i pvp} is written as a single line of text in the following format:\par  \pard\plain \sa160\sl240 \fs21\lang1033 \li720 {\i name} ,{\i type} ,{\i value} \par  \pard\plain \sa160\sl240 \fs21\lang1033 ...where {\i name}  is the property name, {\i type}  is the type  (a string returned by {\b VariantTypeNumberToName}), and {\i value} is the value (coerced to a string by {\b VariantChangeType}).  Each of these three strings is processed by {\b UNICODEToPrintableANSI}  before being written out.\par  \pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par  \pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 WriteVariantPropertyToHTML\par  \pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b WriteVariantPropertyToHTML(}{\b IStream *} {\i pstream}{\b , VariantProperty *} {\i pvp}{\b , DWORD} {\i dwFlags}{\b ) }\par \pard\plain \sa160\sl240 \fs21\lang1033 Writes a {\b VariantProperty} to an {\b IStream} in HTML format  as a "<PARAM>" tag.\par  \pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/WVPTHTML.CPP\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pstream}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The stream to write to.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pvp}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The property name/value pair to write.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Currently unused.  Must be set to 0.\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 *{\i pvp} is written as a single line of text in the following format:\par  \pard\plain \sa160\sl240 \fs21\lang1033 \li720 <PARAM name={\i name}  value={\i value} >\par  \pard\plain \sa160\sl240 \fs21\lang1033 ...where {\i name}  is the property name and {\i value}  is the value  (coerced to a string by {\b VariantChangeType}).  Each of these three strings is processed by {\b UNICODEToPrintableANSI}  before being written out.\par  \pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par  \pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ControlInfo Structure\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 typedef struct \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab UINT cbSize;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab LPCTSTR tszProgID;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab LPCTSTR tszFriendlyName;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab const CLSID * pclsid;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab HMODULE hmodDLL;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab LPCTSTR tszVersion;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab int iToolboxBitmapID;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab DWORD dwMiscStatusDefault;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab DWORD dwMiscStatusContent;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab GUID * pguidTypeLib;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab DWORD dwTypeLibFlags;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab AllocOCProc * pallocproc;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab ULONG * pcLock;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab DWORD dwFlags;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab ControlInfo* pNext;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab UINT uiVerbStrID;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \} ControlInfo;\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par  \pard\plain \sa160\sl240 \fs21\lang1033 Contains information used by {\b RegisterControls} to register and  unregister a control.\par  \pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/REG.CPP\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b cbSize}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The size of this structure (used for version  control).  Must be set to sizeof(ControlInfo).\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b tszProgID}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The ProgID of the object, e.g.  "MYCTLLIB.TinyCtl.1".\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b tszFriendlyName}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The human-readable name of the object  (at most 40 characters or so), e.g. "My Control".\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b pclsid}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Points to the class ID of the object.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b hmodDLL}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The module handle of the DLL implementing the  object.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b tszVersion}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The version number of the object, e.g. "1.0".\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b iToolboxBitmapID}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The resource ID of the toolbox bitmap of  the object, if the object is a control.  The resource must be located  in the same DLL specified by {\i tszDLLPath} and/or {\i hmodDLL}.  If {\i iToolboxBitmapID} is -1, it is ignored.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b dwMiscStatusDefault}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The MiscStatus bits (OLEMISC_XXX)  to use for all display apsects except DVASPECT_CONTENT.  Typically 0.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b dwMiscStatusContent}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The MiscStatus bits (OLEMISC_XXX)  to use for display aspect DVASPECT_CONTENT.  See the example below.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b pguidTypeLib}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The object's type library GUID, or NULL if  the object doesn't have a type library.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b dwTypeLibFlags}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Type library flags.  I don't know what these  are yet (they're registered as TypeLib\\\{guid\}<version>\\Flags),  but 0 and 2 seem to be common values.  Ignored if {\i pguidTypeLib}  is NULL.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b pallocproc}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Function which can allocate an instance  of the OLE control and return an {\b AddRef}'d {\b IUnknown} pointer  to it.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b pcLock}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Points to a DLL lock count variable defined as a  global variable in your DLL.  This global variable maintains a count  of locks used by {\b IClassFactory::LockServer} .  To increment or  decrement this lock count, use {\b InterlockedIncrement} and  {\b InterlockedDecrement} instead of modifying it directly.  This will  ensure that access to the lock count is synchronized between your  control's server and the OCHelp-supplied class factory.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b dwFlags}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Zero or more of the following:\par  \pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 CI_INSERTABLE\par  \pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Marks the COM object as "Insertable".  Probably  should not be used for ActiveX controls.\par  \pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 CI_CONTROL\par  \pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Marks the COM object as a "Control".  Probably  should not be used for ActiveX controls.\par  \pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 CI_MMCONTROL\par  \pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Marks the COM object as a "Multimedia Control".\par  \pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 CI_SAFEFORSCRIPTING\par  \pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Marks the COM object as "safe-for-scripting"  meaning that the object promises that, no matter how malicious a  script is, the object's automation model does not allow any harm  to the user, either in the form of data corruption or security leaks.  If a control is not "safe-for-scripting", the user will receive a warning  dialog whenever the control is inserted on an untrusted page in  Internet Explorer (IE), asking whether the object should be visible from scripts.  (This is only at medium security level, at high security, the object  is never visible to scripts, and at low, always visible.)  If a  control, C1, can potentially contain another control, C2, which might  be unsafe, then C1 should probably not declare itself "safe-for-scripting".\par  \pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 CI_SAFEFORINITIALIZING\par  \pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Marks the COM object as "safe-for-initializing"  meaning that it guarantees to do nothing bad regardless of the data with  which it is initialized.  From IE, the user will be given a warning  dialog (described above) if an untrusted page attempts to initialize  a control that is not "safe-for-initializing".\par  \pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 CI_NOAPARTMENTTHREADING\par  \pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 By default, {\b RegisterControls} will register  a control as "apartment-aware".  If this flag is set, the control will  *not* be registered as apartment-aware.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b pNext}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 A pointer to a {\i ControlInfo} struct for the next  control that {\b RegisterControls} should register.  Use this field to  chain together a linked-list of all the controls that {\b RegisterControls}  should register.  {\i pNext} should set to NULL for the last {\i ControlInfo}  struct in the list.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b uiVerbStrID}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 A string resource ID.  The string is a definition  of an OLE verb applicable to the control.  The string is assumed to  have the following format:\par  <verb_number>=<name>, <menu_flags>, <verb_flags>\par  See help on {\b IOleObject::EnumVerbs}  for a description of each field.  {\b RegisterControls} will call {\b LoadString} to read all the  consecutively-numbered string resources beginning with {\i uiVerbStrID}  until either {\b LoadString} fails (i.e., the resource doesn't exist) or  an empty string is returned.  {\b RegisterControls} will  register/unregister each verb string it reads.\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This structure is used by {\b RegisterControls} and  {\b HelpCreateClassObject}.\par  {\i Important:}  The objects pointed to by pointer fields of  {\i ControlInfo} must be defined statically in the DLL, since functions  that use {\i ControlInfo} holds onto this pointer.  This can be  accomplished by making {\i ControlInfo} and all the data it points to  be global variables/literals in your DLL.\par  \pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par  \pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 HostLWOCInfo Structure\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 typedef struct \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab DWORD dwFlags;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \} HostLWOCInfo;\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par  \pard\plain \sa160\sl240 \fs21\lang1033 Contains information about a {\b HostLW} control.\par  \pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/AUTODOC/HOSTLW.D\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b dwFlags}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Flags that modify the behavior of the control.  These are the same SSWP_ flags specified in  {\b ISiteLW::SetSiteWindowParameters} .\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 See {\b IHostLWOC::GetInfo}  and {\b IHostLWOC::SetInfo}  for more  information.\par  This structure is defined in "HostLWOC.h".\par  \pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par  \pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 LineOCInfo Structure\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 typedef struct \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab int iWidth;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab COLORREF rgb;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab POINT2 pt2;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \} LineOCInfo;\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par  \pard\plain \sa160\sl240 \fs21\lang1033 Contains information about a {\b Line} control.\par  \pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/AUTODOC/LINE.D\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b iWidth}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The line's width (in pixels).\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b rgb}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The line's color.  This must be an RGB color,  created using the {\b RGB} macro.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b pt2}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The line's position.\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 See {\b ILineOC::GetInfo}  and {\b ILineOC::SetInfo}  for more  information.\par  This structure is defined in "LineOC.h".\par  \pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par  \pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 POINT2 Structure\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 typedef struct \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab POINT apt[2];\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \} POINT2;\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par  \pard\plain \sa160\sl240 \fs21\lang1033 An array of two POINT values, used to represent a geometrical element  such as a line segment.\par  \pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/AUTODOC/LINE.D\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b apt[2]}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The two endpoints.\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This structure is used by {\b LineOCInfo}, for example.\par  \pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par  \pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 PropPageHelperInfo Structure\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 typedef struct \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab int idDialog;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab int idTitle;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab HINSTANCE hinst;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab PropPageHelperProc pproc;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab IID iid;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab DWORD dwUser;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab IPropertyPageSite * psite;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab LPUNKNOWN * ppunk;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab int cpunk;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab HWND hwnd;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab BOOL fDirty;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab BOOL fLockDirty;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \} PropPageHelperInfo;\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par  \pard\plain \sa160\sl240 \fs21\lang1033 Maintains information describing a property page.  Used by  {\b PropPageHelper}, but allocated by the object that aggregates  {\b PropPageHelper}.\par  \pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/PROPHELP.CPP\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b idDialog}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 ID of propery page dialog resource.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b idTitle}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 ID of a string resource containing the page's title  (used on the page tab).\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b hinst}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The instance of the DLL that contains the  resources specified by {\i idDialog} and {\i idTitle}.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b pproc}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 A callback function that receives property  page window messages.  {\i pproc} is similar to a DLGPROC but has  extra parameters: a pointer to this structure, and a pointer to  an HRESULT to be used when responding to the following special  messages:\par  \pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 WM_PPH_APPLY\par  \pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 {\i pproc} should apply any property page  changes to the objects {\i ppunk} that the property page  is operating on.  This is the same as {\b IPropertyPage::Apply} .\par  \pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 WM_PPH_HELP\par  \pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Identical to {\b IPropertyPage::Help} The WPARAM parameter of {\i pproc} contains the  LPCOLESTR argument of {\b IPropertyPage::Help} .\par  \pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 WM_PPH_TRANSLATEACCELERATOR\par  \pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Identical to  {\b IPropertyPage::TranslateAccelerator} The WPARAM parameter of {\i pproc} contains the  LPMSG argument of {\b IPropertyPage::TranslateAccelerator} .\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b iid}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The interface that will be used to communicate with  objects that the property page will operate upon.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b dwUser}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Arbitrary information stored by the caller of  {\b AllocPropPageHelper}.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b psite}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The frame's page site object.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b ppunk}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 An array of {\i cpunk} pointers to the objects  that this property page will operate upon.  The interface ID of  each element of {\i ppunk} is actually {\i iid}.  If {\i cpunk}==0,  then presumably none of the objects that the property page was  requested to operate upon supports the interface {\i iid}.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b cpunk}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The number of elements in {\i ppunk}.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b hwnd}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The property page window.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b fDirty}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 TRUE if changes to the property page have not yet  been applied to the objects in {\i ppunk}, FALSE otherwise.  (If TRUE,  the Apply button should be visible.)\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b fLockDirty}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 If TRUE, {\i fDirty} should not be changed.  {\i fLockDirty} is TRUE during initialization of the property page  (during which time it's inappropriate to be telling the property  page that it's dirty).\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 See {\b AllocPropPageHelper} for more information.\par  \pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par  \pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 SPRITE_BOUNDARYACTION\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 enum SPRITE_BOUNDARYACTION \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_BOUNDARYACTION_BOUNCE,\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_BOUNDARYACTION_WRAP,\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_BOUNDARYACTION_STICK\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \};\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par  \pard\plain \sa160\sl240 \fs21\lang1033 What to do when a {\b Sprite}'s time-varying parameter (e.g., translucency  or rotation) hits a "boundary" (i.e., a minimum or maximum value).\par \pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/AUTODOC/SPRITE.D\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_BOUNDARYACTION_BOUNCE}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Reverse direction.  That is, if at the minimum value, begin stepping toward  the maximum; if at the maximum, begin stepping toward the minimum.  (ordinal 0)\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_BOUNDARYACTION_WRAP}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Wrap around.  That is, if at the minimum value, jump to the maximum; if at  the maximum, jump to the minimum.  (ordinal 1)\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_BOUNDARYACTION_STICK}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Don't change.  That is, if at the minimum or maximum value, remain stuck  at that value.  (ordinal 2)\par  \pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par  \pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 SPRITE_ROT_VALS\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 enum SPRITE_ROT_VALS \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_MIN_ROT,\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_MAX_ROT,\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_INIT_ROT,\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_MIN_ROTSTEP,\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_MAX_ROTSTEP,\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_INIT_ROTSTEP,\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_MIN_ROTDELAY,\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_MAX_ROTDELAY\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \};\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par  \pard\plain \sa160\sl240 \fs21\lang1033 Possible values for the fields of {\b SpriteRotationInfo} and the various  rotation-related properties of {\b Sprite}.  All rotation values are  measured in degrees.  For 2D rotation, rotation values increase in the  counter-clockwise direction from the positive x-axis.  For 3D rotation,  rotation values increase out of the plane of the display and decrease  into the plane of the display.\par \pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/AUTODOC/SPRITE.D\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_MIN_ROT}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The mimimum possible rotation (in degrees).  (value = -360)\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_MAX_ROT}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The maximum possible rotation (in degress).  (value = 360)\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_INIT_ROT}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The default initial rotation (in degrees).  (value = 0)\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_MIN_ROTSTEP}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The minimum possible rotation step (in degrees).  (value = -360)\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_MAX_ROTSTEP}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The maximum possible rotation step (in degrees).  (value = 360)\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_INIT_ROTSTEP}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The default initial rotation step (in degrees).  (value = 0)\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_MIN_ROTDELAY}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The minimum possible rotation step delay (in animation ticks).  (value = 0)\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_MAX_ROTDELAY}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The maximum possible rotation step delay (in animation ticks).  (value = 100)\par  \pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par  \pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 SPRITE_ROTATION_TYPE\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 enum SPRITE_ROTATION_TYPE \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_ROT_NONE,\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_ROT2D_CENTER,\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_ROT2D_TOPLEFT,\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_ROT2D_TOPRIGHT,\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_ROT2D_BOTTOMRIGHT,\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_ROT2D_BOTTOMLEFT,\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_ROT2D_TOPMIDPOINT,\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_ROT2D_RIGHTMIDPOINT,\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_ROT2D_BOTTOMMIDPOINT,\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_ROT2D_LEFTMIDPOINT,\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_ROT3D_TOPEDGE,\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_ROT3D_LEFTEDGE,\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_ROT3D_BOTTOMEDGE,\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_ROT3D_RIGHTEDGE,\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_ROT3D_VERTICALMIDLINE,\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_ROT3D_HORIZONTALMIDLINE,\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_ROT3D_DIAGONALDOWN,\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_ROT3D_DIAGONALUP\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \};\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par  \pard\plain \sa160\sl240 \fs21\lang1033 Possible types of {\b Sprite} rotation.  Possible values for  {\b Sprite::RotationType}  and {\b iType} .\par \pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/AUTODOC/SPRITE.D\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_ROT_NONE}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 No rotation.  (ordinal 0)\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_ROT2D_CENTER}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 2D rotation about the {\b Sprite}'s center.  (ordinal 1)\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_ROT2D_TOPLEFT}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 2D rotation about the {\b Sprite}'s top-left corner.  (ordinal 2)\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_ROT2D_TOPRIGHT}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 2D rotation about the {\b Sprite}'s top-right corner.  (ordinal 3)\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_ROT2D_BOTTOMRIGHT}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 2D rotation about the {\b Sprite}'s bottom-right corner.  (ordinal 4)\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_ROT2D_BOTTOMLEFT}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 2D rotation about the {\b Sprite}'s bottom-left corner.  (ordinal 5)\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_ROT2D_TOPMIDPOINT}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 2D rotation about the midpoint of the {\b Sprite}'s top edge.  (ordinal 6)\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_ROT2D_RIGHTMIDPOINT}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 2D rotation about the midpoint the {\b Sprite}'s right edge.  (ordinal 7)\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_ROT2D_BOTTOMMIDPOINT}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 2D rotation about the midpoint of the {\b Sprite}'s bottom edge.  (ordinal 8)\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_ROT2D_LEFTMIDPOINT}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 2D rotation about the midpoint of the {\b Sprite}'s left edge.  (ordinal 9)\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_ROT3D_TOPEDGE}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pseudo-3D rotation into or out of the plane of the display using  the {\b Sprite}'s top edge as the axis of rotation.  (ordinal 10)\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_ROT3D_LEFTEDGE}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pseudo-3D rotation into or out of the plane of the display using  the {\b Sprite}'s left edge as the axis of rotation.  (ordinal 11)\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_ROT3D_BOTTOMEDGE}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pseudo-3D rotation into or out of the plane of the display using  the {\b Sprite}'s bottom edge as the axis of rotation.  (ordinal 12)\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_ROT3D_RIGHTEDGE}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pseudo-3D rotation into or out of the plane of the display using  the {\b Sprite}'s right edge as the axis of rotation.  (ordinal 13)\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_ROT3D_VERTICALMIDLINE}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pseudo-3D rotation into or out of the plane of the display using  the {\b Sprite}'s vertical midline as the axis of rotation.  (ordinal 14)\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_ROT3D_HORIZONTALMIDLINE}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pseudo-3D rotation into or out of the plane of the display using  the {\b Sprite}'s horizontal midline as the axis of rotation.  (ordinal 15)\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_ROT3D_DIAGONALDOWN}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pseudo-3D rotation into or out of the plane of the display using  the diagonal from the {\b Sprite}'s top-left to bottom-right corners  as the axis of rotation.  Note: This rotation type is not currently  implemented.  (ordinal 16)\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_ROT3D_DIAGONALUP}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pseudo-3D rotation into or out of the plane of the display using  the diagonal from the {\b Sprite}'s bottom-left to top-right corners  as the axis of rotation.  Note: This rotation type is not currently  implemented.  (ordinal 17)\par  \pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par  \pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 SPRITE_TRANS_VALS\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 enum SPRITE_TRANS_VALS \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_MIN_TRANS,\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_MAX_TRANS,\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_MIN_TRANSSTEP,\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_MAX_TRANSSTEP,\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_MIN_TRANSDELAY,\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_MAX_TRANSDELAY\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \};\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par  \pard\plain \sa160\sl240 \fs21\lang1033 Possible values for the fields of {\b SpriteTranslucencyInfo} and the  various translucency-related properties of {\b Sprite}.\par \pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/AUTODOC/SPRITE.D\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_MIN_TRANS}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The minimum possible opacity (i.e., completely translucent).  (value = 0)\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_MAX_TRANS}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The maximum possible opacity (i.e., completely opaque).  (value = 255)\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_MIN_TRANSSTEP}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The minimum possible translucency step.  (value = -255)\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_MAX_TRANSSTEP}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The maximum possible translucency step.  (value = 255)\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_MIN_TRANSDELAY}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The minimum possible translucency step delay (in animation ticks).  (value = 0)\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_MAX_TRANSDELAY}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The maximum possible translucency step delay (in animation ticks).  (value = 100)\par  \pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par  \pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 SpriteBitmapInfo Structure\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 typedef struct \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab TCHAR[MAX_PATH + 1] szBitmapPath;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab int cFramesTotal;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab int cFramesAcross;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab int cFramesDown;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \} SpriteBitmapInfo;\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par  \pard\plain \sa160\sl240 \fs21\lang1033 Contains about the bitmap associated with a {\b Sprite} control.\par  \pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/AUTODOC/SPRITE.D\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b szBitmapPath}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The file system path to the Sprite's bitmap file; if  szBitmapPath[0] is '\\0', the Sprite isn't currently associated  with a bitmap.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b cFramesTotal}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The total number of frames in the bitmap; less than  {\b cFramesAcross}  * {\b cFramesDown}  if some frames in the last row are  unused.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b cFramesAcross}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The number of frames running across the bitmap (i.e., #columns);  less than {\b cFrames}  / {\b cFramesDown}  if some frames in the last  row are unused.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b cFramesDown}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The number of frames running down the bitmap (i.e., #rows); less  than {\b cFrames}  / {\b cFramesAcross}  if some frames in the last  row are unused.\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 See {\b ISprite::GetInfo}  and {\b ISprite::SetInfo}  for more  information.\par  This structure is defined in "isprite.h".\par  \pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par  \pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 SpriteQuadrangleInfo Structure\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 typedef struct \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab POINT vertex[4];\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab LONG coord[8];\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \} SpriteQuadrangleInfo;\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par  \pard\plain \sa160\sl240 \fs21\lang1033 Information about a {\b Sprite} control's BLT-ing quadrangle.  Note: this  data structure is implemented as a union.  Therefore, the coordinates of  the quadrangle may be accessed as four vertices or as eight individual  x- and y-coordinates, whichever is most convenient.\par  \pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/AUTODOC/SPRITE.D\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b vertex[4]}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The four vertices of the quadrangle in the order (x1,y1), (x2,y2),  (x3,y3), and (x4,y4).\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b coord[8]}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The eight coordinates of the vertex in the order x1, y1, x2, y2, x3,  y3, x4, y4.\par  \pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par  \pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 SpriteRotationInfo Structure\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 typedef struct \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab int iType;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab int iNow;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab int iMin;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab int iMax;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab int iSpeed;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab int iDelayNow;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab int iDelayAtMin;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab int iDelayAtMax;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab {\b SPRITE_BOUNDARYACTION} edgeAction;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \} SpriteRotationInfo;\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par  \pard\plain \sa160\sl240 \fs21\lang1033 Contains rotation information about a {\b Sprite} control.\par  \pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/AUTODOC/SPRITE.D\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b iType}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The rotation type.  See {\b SPRITE_ROTATION_TYPE} for possible values.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b iNow}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The initial rotation value.  Must be between  {\b SPRITE_MIN_ROT}  and  {\b SPRITE_MAX_ROT} , and between  {\b iMin}  and {\b iMax} .\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b iMin}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The minimum rotation value.  Must be between {\b SPRITE_MIN_ROT}  and  {\b SPRITE_MAX_ROT} .\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b iMax}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The minimum rotation value.  Must be between {\b SPRITE_MIN_ROT}  and  {\b SPRITE_MAX_ROT} .\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b iSpeed}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The change in rotation which occurs with every call to the Sprite's  {\b IAnimate::Tick}  method.  Must be between  {\b SPRITE_MIN_ROTSTEP}  (slowest) and  {\b SPRITE_MAX_ROTSTEP}  (fastest).\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b iDelayNow}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The delay in Sprite rotation stepping that occurs when the Sprite first appears.  Measured in terms of the number of calls to the Sprite's {\b IAnimate::Tick}  method.  Must be between {\b SPRITE_MIN_ROTDELAY}  (no delay) and  {\b SPRITE_MAX_ROTDELAY}  (longest delay).\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b iDelayAtMin}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The delay in Sprite rotation stepping that occurs when the Sprite hits its  minimum rotation.  Measured in terms of the number of calls to  the Sprite's {\b IAnimate::Tick}  method.  Must be between  {\b SPRITE_MIN_ROTDELAY}  (no delay) and  {\b SPRITE_MAX_ROTDELAY}  (longest delay).\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b iDelayAtMax}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The delay in Sprite rotation stepping that occurs when the Sprite hits its  maximum rotation.  Measured in terms of the number of calls to  the Sprite's {\b IAnimate::Tick}  method.  Must be between  {\b SPRITE_MIN_ROTDELAY}  (no delay) and  {\b SPRITE_MAX_ROTDELAY}  (longest delay).\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b edgeAction}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 What happens after the rotation hits {\b iMin}  or {\b iMax} .\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 See {\b ISprite::GetInfo}  and {\b ISprite::SetInfo}  for more  information.\par  This structure is defined in "isprite.h".\par  \pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par  \pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 SpriteTranslucencyInfo Structure\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 typedef struct \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab int iNow;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab int iMin;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab int iMax;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab int iSpeed;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab int iDelayNow;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab int iDelayAtMin;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab int iDelayAtMax;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab {\b SPRITE_BOUNDARYACTION} edgeAction;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \} SpriteTranslucencyInfo;\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par  \pard\plain \sa160\sl240 \fs21\lang1033 Contains translucency information about a {\b Sprite} control.\par  \pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/AUTODOC/SPRITE.D\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b iNow}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The initial translucency value.  Must be between  {\b SPRITE_MIN_TRANS}  (transparent) and  {\b SPRITE_MAX_TRANS}  (opaque), and must be between  {\b iMin}  and {\b iMax} .\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b iMin}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The minimum translucency value.  Must be between  {\b SPRITE_MIN_TRANS}  (transparent) and  {\b SPRITE_MAX_TRANS}  (opaque).\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b iMax}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The maximum translucency value.  Must be between  {\b SPRITE_MIN_TRANS}  (transparent) and  {\b SPRITE_MAX_TRANS}  (opaque).\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b iSpeed}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The change in translucency which occurs with every call to the Sprite's  {\b IAnimate::Tick}  method.  Must be between  {\b SPRITE_MIN_TRANSSTEP}  (slowest) and  {\b SPRITE_MAX_TRANSSTEP}  (fastest).\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b iDelayNow}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The delay in Sprite translucency stepping that occurs when the Sprite first appears.  Measured in terms of the number of calls to the Sprite's {\b IAnimate::Tick}  method.  Must be between  {\b SPRITE_MIN_TRANSDELAY}  (no delay) and  {\b SPRITE_MAX_TRANSDELAY}  (longest delay).\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b iDelayAtMin}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The delay in Sprite translucency stepping that occurs when the Sprite hits its  minimum translucency.  Measured in terms of the number of calls to  the Sprite's {\b IAnimate::Tick}  method.  Must be between  {\b SPRITE_MIN_TRANSDELAY}  (no delay) and  {\b SPRITE_MAX_TRANSDELAY}  (longest delay).\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b iDelayAtMax}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The delay in Sprite translucency stepping that occurs when the Sprite hits its  maximum translucency.  Measured in terms of the number of calls to  the Sprite's {\b IAnimate::Tick}  method.  Must be between  {\b SPRITE_MIN_TRANSDELAY}  (no delay) and  {\b SPRITE_MAX_TRANSDELAY}  (longest delay).\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b edgeAction}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 What happens after the translucency hits {\b iMin}  or {\b iMax} .\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 See {\b ISprite::GetInfo}  and {\b ISprite::SetInfo}  for more  information.\par  This structure is defined in "isprite.h".\par  \pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par  \pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VariantProperty Structure\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 typedef struct \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab BSTR bstrPropName;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab VARIANT varValue;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \} VariantProperty;\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par  \pard\plain \sa160\sl240 \fs21\lang1033 Contains the name and value of a property.\par  \pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/AVIO.CPP\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b bstrPropName}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The name of the property.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b varValue}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The value of the property.\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IEnumVariantProperty} uses this structure.\par  \pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par  \pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VariantPropertyHeader Structure\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 typedef struct \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab int iType;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab unsigned int cbData;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \} VariantPropertyHeader;\par  \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par  \pard\plain \sa160\sl240 \fs21\lang1033 The beginning part of a record (in a stream) that contains the  serialized data of a {\b VariantProperty}.\par  \pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/RVP.CPP\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b iType}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The type of the record.  If this value is greater than  or equal to zero, then it represents a VARTYPE, and the record  represents a property name/value pair, and the type of the value is  specified by the VARTYPE.  In this case, the data following the  {\b VariantPropertyHeader} consists of the property name followed by  the property value (coerced to a string value by {\b VariantChangeType});  each string is a non-null-terminated Unicode string preceded by an  unsigned 32-bit integer count of Unicode characters.  {\i iType} is  not a known VARTYPE value, then the record should be skipped when read  (by skipping the {\i cbData} bytes that follow the  {\b VariantPropertyHeader} rather than generating an error.\par  \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b cbData}\par  \pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The number of bytes of data that follow  this {\b VariantPropertyHeader}.  In other words, the total length  of the header is {\i cbData} + sizeof({\b VariantPropertyHeader}).\par  \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This structure helps define the file format used by  {\b WriteVariantProperty} and {\b ReadVariantProperty}.\par
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\danim\src\javacab\instructions.txt ===
Contacts in the Java team for this are

Mike Sliger
Patrick McCormick

They report to Mike D. Smith

Instructions:

Your dxmedia.cab drop failed the BVT tests because the files were packaged under ms\dxmedia instead of com\ms\dxmedia.  This is an easy mistake with dubuild; I've appended the following example of a session that builds a CAB and checks it to ensure it is packaged right.

--Pat

D:\>cd \projects\JPMBrowser

D:\projects\JPMBrowser>path
PATH=C:\WIN95;C:\WIN95\COMMAND;C:\SDK-JAVA.20\BIN;

D:\projects\JPMBrowser>dubuild JPM.cab . /d "JPM Browser" /I *.class

Microsoft (R) Distribution Unit Builder - Version 4.79.2220
Copyright (C) Microsoft Corporation 1997. All rights reserved.


D:\projects\JPMBrowser>extract /d jpm.cab
Microsoft (R) Diamond Extraction Tool - Version (16) 1.00.0530 (04/3/95)
Copyright (c) Microsoft Corp 1994-1995. All rights reserved.

 Cabinet jpm.cab

07-30-1997  5:50:32p ----           295 JPM Browser.osd
07-20-1997  6:38:42p A---         1,960 com\ms\JPMBrowser\JPMPanel.class
07-20-1997  6:38:42p A---           678 com\ms\JPMBrowser\BrowserFrame.class
07-20-1997  6:38:42p A---         1,289 com\ms\JPMBrowser\BrowserApplet.class
                 4 Files          4,222 bytes

The OSD file above is automatically generated by DUBUILD.  It contains a list of all Java packages found and sets the version number to be 1.0.0.0.

Make sure that your packages are in the com\ms subdirectory as seen above.

------------------------------------------------------------------------------------------
Since we need to call in COM, we have to be trusted classes, part of the system.

You need to add the parameters -S * to your command line to mark all packages as SYSTEM packages:

	C> dubuild dajava.cab dajava -S * ...
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\danim\src\javacab\faqjpm.doc ===
Microsoft Word Document MSWordDoc Word.Document.8FAQ for the Java Package Manager Title _PID_GUIDFAQ for the Java Package Manager Patrick McCormick Normal.dot Patrick McCormick Microsoft Word 8.0Developer FAQ for the Java Package Manager MICROSOFT CONFIDENTIAL Last Changed July 24, 1997  TOC \n \t "Heading 2,3"  Q1.  What is the Java Package Manager? Q2.  How do I use non-JPM aware Java development tools? Q3.  Can I extract individual packages from the Package Manager? Q4.  How can I list currently installed packages? Q5.  What is the order of a class search? Q6.  What is a Distribution Unit? Q7.  How do I make a Distribution Unit for my Java classes? Q8.  How do I provide updates for a Distribution Unit? Q9.  How do I install a distribution unit via IE4? Q10.  How do I install a distribution unit or Java ZIP from the command line?  AUTONUM    What is the Java Package Manager? The Package Manager for Java is used by the Microsoft Java Virtual Machine to organize Java packages.  A Java package is a set of Java classes that are related; often they form a toolkit or an application.  The current method of installing and using Java packages consists of placing all the class files into a ZIP, JAR, or CAB file and then placing this file at the end of the environment variable named CLASSPATH.  The CLASSPATH is a list of directories and archives that contain class files.  When a Java Virtual Machine needs a class, it searches through each entry of the class path to find it. After intensive Java usage, the CLASSPATH can become filled with references to packages that are old or unused.  It is difficult to know what packages are needed and which ones are not.  The CLASSPATH may even have references to different versions of the same package!  To address these and other concerns, the Package Manager can be used to organize Java packages, supplanting the CLASSPATH variable. Package Management offers: Version Control.  Package version numbers are tracked, allowing Java programs and installers to intelligently update the system. Improved Security.  Instead of having to fully trust all installed classes, the package manager stores the allowed capabilities of each package, as verified by Authenticode. Ease Of Use.  Java programs can now install packages without having to alter the CLASSPATH and require a reboot. Compatibility.  The JPM will accept ZIP, CAB, and uncompressed JAR formats for installation. Cross-Platform Flexibility.  Applications control the JPM through COM, DLL, and Java interfaces. Scalability.  JPM can quickly search a large number of libraries, unlike the CLASSPATH which fast becomes unwieldy and makes class-searching bugs hard to uncover. When a Java package is installed in the Package Manager, the original archive file is removed, and the classes are stored internally.  Thus, developers need to use the clspack command (described in Q3 below) to generate the ZIP files used by Java compilers.  All of the standard Java packages shipped with this version of Internet Explorer 4 are installed in the Package Manager, except for the AFC.  AFC will be in  the package manager in the final version.  AUTONUM    How do I use non-JPM aware Java development tools? You can create an old-style ZIP set of packages using the clspack tool, which is supplied with the VM. This tool allows you to take packages that are currently installed via the package manager, and write their contents into a ZIP file. The easiest way to use clspack is to type: clspack  auto.  This will create a single CLASSES.ZIP in your %WINDIR%\Java\Classes directory that contains all classes stored in the package manager.  The Microsoft Java compiler looks in this location by default for classes, so there is no need to set your CLASSPATH environment variable. For other compilers that do not check this location by default, set your CLASSPATH environment variable with: set CLASSPATH=%WINDIR%\Java\Classes\Classes.zip before running the compiler.  It s a good idea to place this command in a batch file for easy use.  AUTONUM    Can I extract individual packages from the Package Manager? The clspack tool can also be used to extract individual packages. The usage is: clspack myzipfile.zip listfile Here, listfile is the name of a text file containing the list of packages to write to the zip, say: java.io com.ms.util com.ms.util.cab com.ms.fx  AUTONUM    How can I list currently installed packages? The clspack tool can list all of the packages currently installed in the package manager with: clspack -dump  AUTONUM    What is the order of a class search? When a class is requested, the package manager searches for it in the following order: Check explicitly-specified path (generally supplied via the -classpath command-line option)  Check HKLM\Software\Microsoft\Java VM\DevClasspath registry entry Search installed classes Check HKLM\Software\Microsoft\Java VM\TrustedClasspath registry entry Check HKLM\Software\Microsoft\Java VM\TrustedLibsDirectory registry entry Check HKLM\Software\Microsoft\Java VM\Classpath registry entry Check HKLM\Software\Microsoft\Java VM\LibsDirectory registry entry Check CLASSPATH local environment variable Packages installed through the package manager will override classes sitting on any classpaths stored in the registry except for DevClasspath.  This is for both performance and compatibility.  However, there are still occasions when developers may want to temporarily override the package manager with a registry setting. To handle this, there is now a new class path that the VM supports, called the DevClasspath.  This works just like the old class path, but its priority in the search order is different.  Classes on the DevClasspath will be used before classes installed through the package manager, while classes on the old class path won't. To set your DevClasspath, make the following registry entry: HKLM\Software\Microsoft\Java VM\DevClasspath=<class path (string value)>  AUTONUM    What is a Distribution Unit? A Distribution Unit (DU) is a transport standard for applications, libraries, etc.  It is a CAB file that contains a Distribution Unit Profile (DUP) which contains details on what version the DU is, the versions of the contents of the DU, and how to install the contents of the DU.  DUs are handled by the Code Download feature of Internet Explorer 4.0.  Simply place your DU on an HTML page with the <EMBED> or <OBJECT> tags and Internet Explorer will automatically install it onto client systems. If a DU contains Java packages, it invokes the JPM to install them. More information on DUs is available in the DU specification.  AUTONUM    How do I make a Distribution Unit for my Java classes? To make a DU for a set of Java packages, use the dubuild tool from the JPM.  Given a tree of Java classes, it will bundle the tree into a CAB file and create an OSD that has an entry for each package in the tree. For example, given the directory tree: C:\tree  ---- tools +- image then: DUBuild first.cab tree /N MyProductBits will create c:\first.cab with the packages tree.tools and tree.image.  AUTONUM    How do I provide updates for a Distribution Unit? It is possible to create  delta  DUs that consists only of changed packages and have pointers to a secondary   DU that contains the other unchanged packages.  To do this, invoke DU this way: DUBuild second.cab tree first.cab This creates a cabinet named  second.cab  that has only the changed packages in the tree from the time first.cab was created.  The DUP in second.cab points to first.cab for all unchanged packages.  Note that a package is considered changed if any one of the files inside has been modified since the time first.cab was created.  AUTONUM    How do I install a distribution unit via IE4? In IE4, use the following HTML to install your distribution unit: <OBJECT   classid= clsid:00202ACD-ABCD-ABCD-ABCD-020202023423   codebase= myjava.cab#version=1,0,100,3 </OBJECT> where you replace the classid parameter with a GUID for your DU, and place your DU filename and version in the codebase parameter.  AUTONUM    How do I install a distribution unit or Java ZIP from the command line? To install a package into the JPM, first put it into a standard ZIP or CAB file with OSD.  Then use the JPM RUNDLL interface as follows: rundll32 c:\windows\system\msjava.dll,JavaPkgMgr_Install <filename>,<file type>,<hi version>,<lo version>,<build>,<package flags>,<install flags>,<namespace> File Type: 0=CAB 1=ZIP Package Flags: 0=System class 1=Non system class 2=Needs trusted source Install Flags: 1=No version check 2=No signer check 4=Autodetect packages 8=Delete input file A sample command line would be: rundll32 c:\windows\system\msjava.dll,JavaPkgMgr_Install myclasses.zip,1,4,79,2151,0,12 }urolfc`] |vspm
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\danim\tools\toolsrc\quadgrid\readme.txt ===
Description

    quadgrid is a tool that generates quadrilateral meshes at a given
    resolution.  This program generates a VRML1 file that goes to the standard
    ouptut stream.  Such meshes are useful for well-illuminated walls, since
    light sources such as spotlights or attenuated lights have enough vertices
    to show good, smooth dropoffs.

    Note that the generated panel is in the Z=0 plane, and both X and Y range
    from -1 to +1.

Exmaple Uses

    quadgrid 10    >panel10x10.wrl      // Generates a 10x10 panel
    quadgrid 10 20 >panel10x20.wrl      // Generates a 10x20 panel
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\danim\tools\x86\aactive\readme.txt ===
This directory contains files associated with the AudioActive engine.


./inc contains AudioActive header files

./lib contains AudioActive library files

./doc contains help and doc files

NOTE: I have mangled the official names of the files so they can be saved within slm.
      the dll, aactive.dll, should be installed on the target machine as: audioactive.dll
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\danim\tools\x86\aactive\doc\aacom20.doc ===
Microsoft Word Document MSWordDoc Word.Document.6Blue Ribbon Spec DocumentBlue Ribbon Spec Document Blue Ribbon Generic Document.dot Microsoft Word for Windows 95 VT$mF3 Microsoft Word 1LettrGoth12 BT 1LettrGoth12 BT AudioActive 2.0 COM API Specification Hartin2 Introduction and Overview Times New Roman The main goal of this API is to allow Microsoft developers to integrate AudioActive with their projects using a COM implementation. AudioActive (AA) is one component of the Blue Ribbon technology group s Interactive Music Architecture (IMA). This is a delta spec, so it will not cover the details of what AudioActive 1.0 is or does;< in the Other Resources section, you can learn where to look to find this information. Rather, this spec will cover all changes between the two.% Additional goals of this API include not extensively changing the feature set, so that developers will have an easy time migrating to the new COM implementation. A COM implementation also allows for more flexible ways to add new features in the future with a< minimum of effort and a maximum of compatibility. 1LettrGoth12 BT Brief Overview On AudioActive 1.0 Functionality AudioActive allows dynamic creation and playback of MIDI music. Music may be completely generated on the fly based on a predefined style and personality, or may be as concrete as a MIDI file, with the more typical option being somewhere in between - a predefined section including chord changes and embellishments that plays a certain style but allows enough randomness in the musical patterns to keep the% music fresh each time it is played. There are also methods for controlling the music playback in real-time, including being able to transition3 smoothly from one type of music to another. The AudioActive 1.0 DLL allows little access to the internals of the code and data structures used to create interactive music. Goals for this API? The primary goal of this API is to provide a COM interface to the functionality that currently exists.   The3 COM object will be designed with integration of other components (such as RenderActive) in mind and will be easily expandable according to the needs of the application.  The COM objects will also be easily adapted to an OCX interface.  OCX objects are important for AudioActive s use over the internet and require the use of COM. A secondary goal of this API is to expose the functionality and data that were previously hidden in the AudioActive 1.0 DLL version of the API.  This will allow the creation of music products, including< authoring tools, based on a single code base. New functionality will be put in place to support more advanced musical features than are allowed now.< Currently planned is support for continuous controller events (such as volume, panning, expression), pitch7 bend events, and polychords.  This new functionality only affects the underlying data types used by AudioActive and has no effect on the actual API.<AudioActive 2.0 COM API Specification Introduction and Overview The main goal of this API is to allow Microsoft developers to integrate AudioActive with their projects using a COM implementation. AudioActive (AA) is one component of the Blue Ribbon technology group s Interactive Music Architecture (IMA). This is a delta spec, so it will not cover the details of what AudioActive 1.0 is or does; in the Other Resources section, you can learn where to look to find this information. Rather, this spec will cover all changes between the two. Additional goals of this API include not extensively changing the feature set, so that developers will have an easy time migrating to the new COM implementation. A COM implementation also allows for more flexible ways to add new features in the future with a minimum of effort and a maximum of compatibility. Brief Overview On AudioActive 1.0 Functionality AudioActive allows dynamic creation and playback of MIDI music. Music may be completely generated on the fly based on a predefined style and personality, or may be as concrete as a MIDI file, with the more typical option being somewhere in between - a predefined section including chord changes and embellishments that plays a certain style but allows enough randomness in the musical patterns to keep the music fresh each time it is played. There are also methods for controlling the music playback in real-time, including being able to transition smoothly from one type of music to another. The AudioActive 1.0 DLL allows little access to the internals of the code and data structures used to create interactive music. Goals for this API The primary goal of this API is to provide a COM interface to the functionality that currently exists.   The COM object will be designed with integration of other components (such as RenderActive) in mind and will be easily expandable according to the needs of the application.  The COM objects will also be easily adapted to an OCX interface.  OCX objects are important for AudioActive s use over the internet and require the use of COM. A secondary goal of this API is to expose the functionality and data that were previously hidden in the AudioActive 1.0 DLL version of the API.  This will allow the creation of music products, including authoring tools, based on a single code base. New functionality will be put in place to support more advanced musical features than are allowed now.  Currently planned is support for continuous controller events (such as volume, panning, expression), pitch bend events, and polychords.  This new functionality only affects the underlying data types used by AudioActive and has no effect on the actual API. Other Available Resources The original AudioActive 1.0 Developers Kit, from which this delta spec is based, can be installed by running \\kgb2\bluerel\AudioActiveDevKit\Setup.Exe. After installing it, if you would like to see a technical reference document of the original version of AudioActive, look at the file AudioActive Help (AA.HLP). For a quick understanding of AudioActive 1.0, look at the AudioActive White Papers, located on  \\kgb2\bluerel\AudioActive Documentation\AudioActive White Paper.Doc The AudioActive Experimenter is a sample application, with associated code, to allow you to see AudioActive 1.0 in action. If you want to look for more up to date information, check out our web site at http://consweb/tech/blueribbon . If you have any questions, contact bthomas or meljgrey. The team members of the Blue Ribbon technology group include Brian Thomas (bthomas), Mark Burton (markburt), David Miller (davmil), Melissa Jordan Grey (meljgrey), Todor Fay (todorfay), Annette Crowley (annettec), Karen White (karenwhi), Tim Dehan (a-tdehan), Patrick Stratton (a-patst), and Eric Ledoux (ericle). Schedule and Delivery Plan For completion dates for the milestones listed below, go the internal web page  http://consweb/tech/blueribbon/IMASchedule.htm .  If you have problems accessing this page, contact bthomas. The final product will include two DLLs for NT and three DLLs plus an auxiliary file for Win95.  The difference is due to the thunking layer which is only compatible with Win95 and is used to circumvent the problems with the multimedia timer in Win95.  The primary DLL, AudioActive.DLL will contain all of the implementation of the COM objects except for IAARealTime, IAAMIDIOut, and IClock.  These will be implemented for NT in AART.DLL, and in AART32.DLL, AART16.DLL for Windows 95.  The windows 95 version will also require AATCK.TCK which aids it in emulating true multitasking. Milestone 1 This milestone includes a complete redesign of the API to conform with the COM model of programming. AudioActive COM API The AudioActive API will be redesigned to fit with the component object model.  No real new functionality will be added, although some functionality will change rather dramatically simply due to the new COM interface.  For example file i/o, previously done only on a file name basis, will be updated to use the standard IPersistStream interface.  A type library (AudioActive.tlb) will be built so that the AudioActive COM objects will be usable within Visual Basic as is. Milestone 2 This milestone involves no API changes, but does change a lot of how things work IAARealTime The implementation of the IAARealTime interface will be pulled out into a separate DLL so that later it may be replaced more easily.  The IAARealTime interface is the portion of AudioActive that handles all real-time timing issues.  Because of problems with current Win32 timing, this interface may need to be rewritten to handle thunking down to 16 bits.  This is also the least portable portion of AudioActive and it is possible to make the rest of AudioActive completely platform independent, simply writing a new IAARealTime interface for each new platform. Continuous Controller Support Support will be added within the engine to deal with continuous controller events such as pitch bend, volume, and panning.  No changes to the API will be made, but the engine will now support more complex styles generated with SuperJAM.  This change will most probably involve a change in one or more of the data structures used by AudioActive. Engine Cleanup This stage involves removing redundancies and anachronisms in the code which may lead to inefficiency and possibly misleading debug output.  This may involve some adjustments to the file formats and/or data structures. Milestone 3 This milestone also involves no API changes, but does change a lot of how things work PolyChords Support for PolyChords will be added to the engine.  This change will not require any API changes, although several data structure changes are expected. Thunked IAARealTime A version of IAARealTime will need to be created that thunks down to 16-bit code to circumvent timing problems in the current Win32 architecture. Key Concepts * This interface must be implemented by the application. The diagram above describes the functional arrangement of objects in AudioActive.  The IAAEngine interface is the primary method for applications to deal with AudioActive and is where all the actual data resides and the composition of new music takes place.  At the most basic level, data is created by the AAEngine and passed to the AARealTime object which makes sure everything is played on time and in the correct order and then finally to the AAMIDIOut object.  For complete descriptions of the interfaces mentioned above, see the Components and Implementation section below. This diagram describes the relationship of the data objects used by the AAEngine object.  The AAEngine object is the ultimate manager of all data objects, with some objects owning or referring to other objects. Components and Implementation Summary of Functions Helper Functions AudioActiveSimpleInitCS_301200550042 AllocAAClockCS_301200550040 AllocAAEngineCS_301200550039 AllocAAMIDIInCS_301200550038 AllocAAMIDIOutCS_301200550037 AllocAARealTimeCS_301200550033 Interfaces IAABandIAABand IClockIClock   IAAEngineIAAEngine IAAEventSinkIAAEventSink IAALoaderCS_301200550240 IAAMIDIInIAAMIDIIn IAAMIDIOutIAAMIDIOut IAAMIDISinkIAAMIDISink IAAMotifIAAMotif IAANotifySinkIAANotifySink IAAPatternIAAPattern IAAPersonalityIAAPersonality IAARealTimeIAARealTime IAASectionIAASection IAASongIAASong IAAStyleIAAStyle IAATemplateIAATemplate Structures AABAND AACHORD AACLICK AACOMMAND AAEVENT AAMOTIF AAPATTERN AAPERSONALITY AASECTION AASONG AASTYLE AATEMPLATE AudioActiveSimpleInit HRESULT AudioActiveSimpleInit( IAAEngine** ppEngine, IAANotifySink* pNotifySink, IAALoader* pLoader ) This function is the simplest way to initialize AudioActive for most applications.  This function goes through the following steps: AllocAAEngineCS_301200550039() is called. AllocAARealTimeCS_301200550033() is called. AllocAAClockCS_301200550040() is called. AllocAAMIDIOutCS_301200550037() is called. the IAARealTimeIAARealTime interface is registered with the IAAEngineIAAEngine interface. the IAAEventSinkIAAEventSink associated with the IAARealTime interface is also registered with the IAAEngine interface. the IAAMIDISinkIAAMIDISink interface associated with the IAAMIDIOutIAAMIDIOut interface is registered with the IAARealTime interface. if the IAALoaderCS_301200550240 pointer passed was NULL, a default loader is allocated.  The IAALoader is then registered with the IAAEngine interface. the user supplied IAANotifySinkIAANotifySink interface is registered with the IAARealTime interface. The IAAEngine interface allocated is returned via the ppEngine variable.  The other allocated interfaces may be determined by querying the links to them.  If pNotifySink is NULL no notification sink will be automatically registered. RETURN VALUES: Everything initialized correctly. E_OUTOFMEMORY One of the interfaces could not be allocated. E_INVALIDARG An invalid pointer was passed to this function. AllocAAClock HRESULT AllocAAClock( IClock** ppClock ) This function allocates the default implementation of the IClockIClock interface.  A pointer to the interface is returned in the address pointed to by ppClock. RETURN VALUES: The function succeeded. E_OUTOFMEMORY The interface could not be allocated. E_INVALIDARG An invalid pointer was passed to this function. AllocAAEngine HRESULT AllocAAEngine( IAAEngine** ppEngine ) This function allocates the default implementation of the IAAEngineIAAEngine interface.  A pointer to the interface is returned in the address pointed to by ppEngine. RETURN VALUES: The function succeeded. E_OUTOFMEMORY The interface could not be allocated. E_INVALIDARG An invalid pointer was passed to this function. AllocAAMIDIIn HRESULT AllocAAMIDIIn( IAAMIDIIn** ppMIDIIn ) This function allocates the default implementation of the IAAMIDIInIAAMIDIIn interface.  A pointer to the interface is returned in the address pointed to by ppMIDIIn. RETURN VALUES: The function succeeded. E_OUTOFMEMORY The interface could not be allocated. E_INVALIDARG An invalid pointer was passed to this function. AllocAAMIDIOut HRESULT AllocAAMIDIOut( IAAMIDIOut** ppMIDIOut ) This function allocates the default implementation of the IAAMIDIOutIAAMIDIOut interface.  Note that the default version of the IAAMIDIOut interface also supports the IAAMIDISinkIAAMIDISink interface.  A pointer to the interface is returned in the address pointed to by ppMIDIOut. RETURN VALUES: The function succeeded. E_OUTOFMEMORY The interface could not be allocated. E_INVALIDARG An invalid pointer was passed to this function. AllocAARealTime HRESULT AllocAARealTime( IAARealTime** ppRealTime ) This function allocates the default implementation of the IAARealTimeIAARealTime interface.  Note that the default implementation of the IAARealTime interface also supports the IAAEventSinkIAAEventSink and IAAMIDISinkIAAMIDISink interfaces.  A pointer to the interface is returned in the address pointed to by ppRealTime. RETURN VALUES: The function succeeded. E_OUTOFMEMORY The interface could not be allocated. E_INVALIDARG An invalid pointer was passed to this function. IAAEngine interface DECLARE_INTERFACE_(IAAEngine, IUnknown) /* IUnknown methods */ HRESULT QueryInterface( REFIID riid, LPVOID* ppvObj ); ULONG AddRef(); ULONG Release(); /* IAAEngine methods */ HRESULT PlaySectionCS_301200550053( IAASection* pSection, long fFlags, long lStartTime ); HRESULT PlaySongCS_301200550054( IAASong* pSong, long fFlags, long lStartTime ); HRESULT PlayMotifCS_301200550055( IAAMotif* pMotif, long fFlags ); HRESULT StopCS_301200550056( long fFlags ); HRESULT FlushSectionQueueCS_301200550057(); IAASection* GetCurrentSectionCS_301200550058(); HRESULT AutoTransitionCS_301200550059( IAASection* pToSection, long fCommand, long fFlags ); HRESULT AllocSectionCS_301200550060( IAASection** ppSection ); HRESULT ComposeSectionCS_301200550061( IAAStyle* pStyle, IAAPersonality* pPersonality, IAATemplate* pTemplate, short nActivity, IAASection** ppSection); HRESULT ComposeSectionFromShapeCS_301200550062( IAAStyle* pStyle, IAAPersonality* pPersonality, short nActivity, ComposeShape shape, short nNumMeasures, long lCommand, IAASection** ppSection); HRESULT ComposeTransitionCS_301200550261( IAASection* pFromSection, IAASection* pToSection, short nMeasureNum, long fCommand, long fFlags, IAASection** ppSection ); HRESULT AllocSongCS_301200550063( IAASong** ppSong ); HRESULT AllocMotifCS_301200550064( IAAMotif** ppMotif ); HRESULT AllocBandCS_301200550065( IAABand** ppBand ); HRESULT AllocTemplateCS_301200550066( IAATemplate** ppTemplate ); HRESULT ComposeTemplateFromShapeCS_301200550067( ComposeShape shape, short nNumMeasures, IAATemplate** pTemplate ); HRESULT AllocStyleCS_301200550068( IAAStyle** ppStyle ); HRESULT AllocPersonalityCS_301200550069( IAAPersonality** ppPersonality ); HRESULT AllocPatternCS_301200550070( IAAPattern** ppPattern ); HRESULT GetFirstStyleNameCS_301200550071( BSTR* ppszStyleName ); HRESULT GetNextStyleNameCS_301200550072( BSTR* ppszStyleName ); HRESULT SetPrepareTimeCS_301200550073( short nPrepareTime ); HRESULT SetDebugCS_301200550074( short nDebug ); IAAEventSink* GetEventSinkCS_301200550075(); HRESULT RegisterEventSinkCS_301200550078( IAAEventSink* pEventSink ); IAARealTime* GetRealTimeCS_301200550077(); HRESULT RegisterRealTimeCS_301200550078( IAARealTime* pRealTime ); IAALoader* GetLoaderCS_301200550260(); HRESULT RegisterLoaderCS_301200550259( IAALoader* pLoader ); HRESULT ReleaseStyleCS_301200550253( IAAStyle* pStyle); HRESULT ReleasePersonalityCS_301200550252( IAAPersonality* pPersonality); HRESULT ReleaseAllStylesCS_301200550245(); HRESULT ReleaseAllPersonalitiesCS_301200550244(); This interface represents the AudioActive composition engine.  The IAAEngine interface works with and knows intimately the data object interfaces: IAABandIAABand, IAAMotifIAAMotif, IAAPatternIAAPattern, IAAPersonalityIAAPersonality, IAASectionIAASection, IAASongIAASong, IAAStyleIAAStyle, and IAATemplateIAATemplate.  The IAAEngine is responsible for generating the music to be played based on these data interfaces and passes it on to the IAARealTimeIAARealTime interface for the actual playback. IAARealTime interface DECLARE_INTERFACE_(IAARealTime, IUnknown) /* IUnknown methods */ HRESULT QueryInterface( REFIID riid, LPVOID* ppvObj ); ULONG AddRef(); ULONG Release(); /* IAARealTime methods */ long get_TempoCS_301200550079(); HRESULT put_TempoCS_301200550080( long lTempo ); long get_TimeSignatureCS_301200550081(); HRESULT put_TimeSignatureCS_301200550082( long lTimeSignature ); short get_RelTempoCS_301200550083(); HRESULT put_RelTempoCS_301200550084( short nTempo ); short get_RelVolumeCS_301200550085(); HRESULT put_RelVolumeCS_301200550086( short nVolume ); short get_MutesCS_301200550087(); HRESULT put_MutesCS_301200550088( short nMutes ); short get_PPQNCS_301200550262(); long get_MusicTimeCS_301200550089(); HRESULT ResetMusicTimeCS_301200550090(); HRESULT FlushEventsAfterTimeCS_301200550238( long lTime ); IAANotifySink* GetNotifySinkCS_301200550091(); HRESULT RegisterNotifySinkCS_301200550092( IAANotifySink* pNotifySink ); IClock* GetClockCS_301200550093(); HRESULT RegisterClockCS_301200550094( IClock* pClock ); This interface represents the playback engine of AudioActive.  It also supports the IAAEventSinkIAAEventSink interface and the IAAMIDISinkIAAMIDIIn interface.  It is responsible for maintaining the queue of raw events to be played and playing them back on time by sending them out to a registered IAAMIDISink interface.  The interface retrieces its timing data solely from the registered IClockIClock interface.  An application can force synchronization by replacing the IClock implementation with one of its own. IAAEventSink interface DECLARE_INTERFACE_(IAAEventSink, IUnknown) /* IUnknown methods */ HRESULT QueryInterface( REFIID riid, LPVOID* ppvObj ); ULONG AddRef(); ULONG Release(); /* IAAEventSink methods */ IAAEventSink* GetEventSinkCS_301200550095(); HRESULT RegisterEventSinkCS_301200550096( IAAEventSink* pEventSink ); HRESULT QueueEventCS_301200550097( struct AAEvent* pEvent ); This interface is responsible for receiving  AAEVENTCS_301200550025s and optionally passing them on to the next IAAEventSink a chain that will ultimately lead to the IAARealTimeIAARealTime interface.  It is not required to sort the events in any way, nor can it expect events to arrive in a sorted order. IAAMIDISink interface DECLARE_INTERFACE_(IAAMIDISink, IUnknown) /* IUnknown methods */ HRESULT QueryInterface( REFIID riid, LPVOID* ppvObj ); ULONG AddRef(); ULONG Release(); /* IAAMIDISink methods */ IAAMIDISink* GetMIDISinkCS_301200550098(); HRESULT RegisterMIDISinkCS_301200550099( IAAMIDISink* pMIDISink ); HRESULT PlayMIDIEventCS_301200550100( long lMIDIEvent, long lTimeInMils ); This interface is responsible for receiving  MIDI events and optionally passing them on to the next IAAMIDISink a chain that will ultimately lead to some sort of output device, possibly the IAAMIDIOutIAAMIDIOut interface.  It is not required to pay any attention to the lTimeInMils field (i.e. it may play events immediately as they are received) but must preserve it. IAALoader DECLARE_INTERFACE_(IAALoader, IUnknown) /* IUnknown methods */ HRESULT QueryInterface( REFIID riid, LPVOID FAR* ppvObj ); ULONG AddRef(); ULONG Release(); /* IAALoader methods */ HRESULT LoadPersonalityCS_301200550242( LPSTR pszFileName, LPSTR pszPersonalityName, IAAPersonality FAR* FAR* ppPersonality ); HRESULT LoadStyleCS_301200550241( LPSTR pszFileName, LPSTR pszStyleName, IAAStyle FAR* FAR* ppStyle ); This function loads referenced data objects when loading sections or styles.  An application my override this interface o provide whatever processing is necessary to load the referenced files from whatever stream is necessary. IAANotifySink interface DECLARE_INTERFACE_(IAANotifySink, IUnknown) /* IUnknown methods */ HRESULT QueryInterface( REFIID riid, LPVOID* ppvObj ); ULONG AddRef(); ULONG Release(); /* IAANotifySink methods */ HRESULT OnSongStartedCS_301200550101( IAASong* pSong, long fFlags ); HRESULT OnSongEndedCS_301200550102( IAASong* pSong, long fFlags, long lEndTime ); HRESULT OnSectionStartedCS_301200550103( IAASection* pSection, long fFlags ); HRESULT OnSectionEndedCS_301200550104( IAASection* pSection, long fFlags, long lEndTime ); HRESULT OnSectionChangedCS_301200550105( IAASection* pSection, long fFlags ); HRESULT OnNextSectionCS_301200550106( IAASection* pSection, long fFlags ); HRESULT OnEmbellishmentCS_301200550107( long lEmbellishment, long fFlags ); HRESULT OnGrooveCS_301200550108( long lGroove, long fFlags ); HRESULT OnMetronomeCS_301200550109( short nMeasure, short nBeat ); HRESULT OnMIDIInputCS_301200550110( long lMIDIEvent, long lMusicTime ); HRESULT OnNotePlayedCS_301200550111( struct AAEvent* pEvent ); This interface is implemented by the application to receive notification events from the AudioActive playback engine.  These callbacks should take as little time as possible as long processing times may interfere with the timing of the music being played. IAAMIDIIn interface DECLARE_INTERFACE_(IAAMIDIIn, IUnknown) /* IUnknown methods */ HRESULT QueryInterface( REFIID riid, LPVOID* ppvObj ); ULONG AddRef(); ULONG Release(); /* IAAMIDIIn methods */ HRESULT ActivateCS_301200550112(); HRESULT DeactivateCS_301200550113(); HRESULT SetDeviceCS_301200550114( short nDeviceID ); IAAMIDISink* GetMIDISinkCS_301200550115(); HRESULT RegisterMIDISinkCS_301200550116( IAAMIDISink* pMIDISink ); This function implements MIDI input.  If MIDI input is not necessary for your application, it is recommended that this interface not be allocated. IAAMIDIOut interface DECLARE_INTERFACE_(IAAMIDIOut, IUnknown) /* IUnknown methods */ HRESULT QueryInterface( REFIID riid, LPVOID* ppvObj ); ULONG AddRef(); ULONG Release(); /* IAAMIDIOut methods */ HRESULT ActivateCS_301200550117(); HRESULT DeactivateCS_301200550118(); HRESULT SetDeviceCS_301200550119( short nDeviceID ); This interface implements MIDI output.  It must also implement the IAAMIDISinkIAAMIDISink interface to receive the actual MIDI events. IClock interface DECLARE_INTERFACE_(IClock, IUnknown) /* IUnknown methods */ HRESULT QueryInterface( REFIID riid, LPVOID* ppvObj ); ULONG AddRef(); ULONG Release(); /* IClock methods */ long GetTimeCS_301200550120(); This interface is responsible for keeping track of the current time in milliseconds for the IAARealTimeIAARealTime interface's use. IAASection interface DECLARE_INTERFACE_(IAASection, IUnknown) /* IUnknown methods */ HRESULT QueryInterface( REFIID riid, LPVOID* ppvObj ); ULONG AddRef(); ULONG Release(); /* IAASection methods */ LPSTR get_NameCS_301200550047(); HRESULT put_NameCS_301200550121( LPSTR pszName ); long get_TempoCS_301200550122(); HRESULT put_TempoCS_301200550123( long lTempo ); short get_LengthCS_301200550124(); HRESULT put_LengthCS_301200550125( short nLength ); long get_LengthInMilsCS_301200550126(); IAAStyle* get_StyleCS_301200550127(); HRESULT put_StyleCS_301200550128( IAAStyle* pStyle ); IAAPersonality* get_PersonalityCS_301200550129(); HRESULT put_PersonalityCS_301200550130( IAAPersonality* pPersonality ); IAABand* get_BandCS_301200550131(); HRESULT put_BandCS_301200550132( IAABand* pBand ); short get_KeyCS_301200550133(); HRESULT put_KeyCS_301200550134( short nKey ); short get_RepeatsCS_301200550135(); HRESULT put_RepeatsCS_301200550136( short nRepeats ); long get_UserDataCS_301200550137(); HRESULT put_UserDataCS_301200550138( long lUserData ); IAASection* CloneCS_301200550144(); HRESULT PlayCS_301200550139( long fFlags, long lStartTime ); HRESULT StopCS_301200550140( long fFlags ); HRESULT RemoveFromQueueCS_301200550145(); VARIANT_BOOL IsPlayingCS_301200550141(); HRESULT GetDataCS_301200550142( AASECTION* pSection ); HRESULT SetDataCS_301200550143( AASECTION* pSection ); This interface respresents a section of music.  It must also support the IPersistStream interface so that sections may be loaded and saved. IAASong interface DECLARE_INTERFACE_(IAASong, IUnknown) /* IUnknown methods */ HRESULT QueryInterface( REFIID riid, LPVOID* ppvObj ); ULONG AddRef(); ULONG Release(); /* IAASong methods */ LPSTR get_NameCS_301200550048(); HRESULT put_NameCS_301200550146( LPSTR pszName ); LPSTR get_AuthorCS_301200550147(); HRESULT put_AuthorCS_301200550148( LPSTR pszAuthor ); short get_LengthCS_301200550149(); long get_LengthInMilsCS_301200550150(); IAASection* GetFirstSectionCS_301200550151(); IAASection* GetNextSectionCS_301200550152( IAASection* pSection ); HRESULT InsertSectionCS_301200550153( IAASection* pPrevSection, IAASection* pSection ); HRESULT AppendSectionCS_301200550154( IAASection* pSection ); HRESULT ReleaseSectionCS_301200550155( IAASection* pSection ); IAASong* CloneCS_301200550156(); HRESULT SaveAsMIDI( LPSTREAM pStream ); HRESULT PlayCS_301200550157( long fFlags, long lStartTime ); HRESULT StopCS_301200550158( long fFlags ); VARIANT_BOOL IsPlayingCS_301200550159(); HRESULT GetDataCS_301200550160( AASONG* pSong ); HRESULT SetDataCS_301200550161( AASONG* pSong ); This interface respresents a song composed of a list of sections.  It must also support the IPersistStream interface so that songs may be loaded and saved. IAAMotif interface DECLARE_INTERFACE_(IAAMotif, IUnknown) /* IUnknown methods */ HRESULT QueryInterface( REFIID riid, LPVOID* ppvObj ); ULONG AddRef(); ULONG Release(); /* IAAMotif methods */ LPSTR get_NameCS_301200550044(); HRESULT put_NameCS_301200550162( LPSTR pszName ); short get_LengthCS_301200550163(); HRESULT put_LengthCS_301200550164( short nLength ); IAABand* get_BandCS_301200550165(); HRESULT put_BandCS_301200550166( IAABand* pBand ); short get_BeatsPerMeasureCS_301200550167(); short get_ClicksPerBeatCS_301200550168(); HRESULT PlayCS_301200550169( long fFlags ); HRESULT StopCS_301200550170( long fFlags ); VARIANT_BOOL IsPlayingCS_301200550171(); IAAMotif* CloneCS_301200550172(); HRESULT GetDataCS_301200550173( AAMOTIF* pMotif ); HRESULT SetDataCS_301200550174( AAMOTIF* pMotif ); This interface respresents a musical motif.  It must also support the IPersistStream interface so that motifs may be loaded and saved. IAAStyle interface DECLARE_INTERFACE_(IAAStyle, IUnknown) /* IUnknown methods */ HRESULT QueryInterface( REFIID riid, LPVOID* ppvObj ); ULONG AddRef(); ULONG Release(); /* IAAStyle methods */ LPSTR get_NameCS_301200550049(); HRESULT put_NameCS_301200550175( LPSTR pszName ); short get_BeatsPerMeasureCS_301200550176(); HRESULT put_BeatsPerMeasureCS_301200550177( short nBeatsPerMeasure ); short get_ClicksPerBeatCS_301200550178(); HRESULT put_ClicksPerBeatCS_301200550179( short nClicksPerBeat ); long get_DefaultTempoCS_301200550180(); HRESULT put_DefaultTempoCS_301200550181( long lTempo ); IAABand* GetFirstBandCS_301200550182(); IAABand* GetNextBandCS_301200550183( IAABand* pBand ); HRESULT AddBandCS_301200550184( IAABand* pBand ); HRESULT ReleaseBandCS_301200550185( IAABand* pBand ); IAABand* GetDefaultBandCS_301200550186(); HRESULT SetDefaultBandCS_301200550187( IAABand* pBand ); IAABand* get_BandCS_301200550188( LPSTR pszName ); IAAPersonality* GetFirstPersonalityCS_301200550189(); IAAPersonality* GetNextPersonalityCS_301200550190( IAAPersonality* pPersonality ); HRESULT AddPersonalityCS_301200550191( IAAPersonality* pPersonality ); HRESULT ReleasePersonalityCS_301200550192( IAAPersonality* pPersonality ); IAAPersonality* GetDefaultPersonalityCS_301200550193(); HRESULT SetDefaultPersonalityCS_301200550194( IAAPersonality* pPersonality ); IAAPersonality* get_PersonalityCS_301200550195( LPSTR pszName ); IAAMotif* GetFirstMotifCS_301200550196(); IAAMotif* GetNextMotifCS_301200550197( IAAMotif* pMotif ); HRESULT AddMotifCS_301200550198( IAAMotif* pMotif ); HRESULT ReleaseMotifCS_301200550199( IAAMotif* pMotif ); IAAMotif* get_MotifCS_301200550200( LPSTR pszName ); IAAPattern* GetFirstPatternCS_301200550201(); IAAPattern* GetNextPatternCS_301200550202( IAAPattern* pPattern ); HRESULT AddPatternCS_301200550203( IAAPattern* pPattern ); HRESULT ReleasePatternCS_301200550204( IAAPattern* pPattern ); IAAPattern* get_PatternCS_301200550205( LPSTR pszName ); IAAStyle* CloneCS_301200550206(); HRESULT GetDataCS_301200550207( AASTYLE* pStyle ); HRESULT SetDataCS_301200550208( AASTYLE* pStyle ); This interface respresents a style of music.  It must also support the IPersistStream interface so that styles may be loaded and saved. IAAPersonality interface DECLARE_INTERFACE_(IAAPersonality, IUnknown) /* IUnknown methods */ HRESULT QueryInterface( REFIID riid, LPVOID* ppvObj ); ULONG AddRef(); ULONG Release(); /* IAAPersonality methods */ LPSTR get_NameCS_301200550046(); HRESULT put_NameCS_301200550209( LPSTR pszName ); IAAPersonality* CloneCS_301200550210(); HRESULT GetDataCS_301200550211( AAPERSONALITY* pPersonality ); HRESULT SetDataCS_301200550212( AAPERSONALITY* pPersonality ); This interface respresents a musical personality.  It must also support the IPersistStream interface so that personalities may be loaded and saved. IAABand interface DECLARE_INTERFACE_(IAABand, IUnknown) /* IUnknown methods */ HRESULT QueryInterface( REFIID riid, LPVOID* ppvObj ); ULONG AddRef(); ULONG Release(); /* IAABand methods */ LPSTR get_NameIAABandMTget_NameHI(); HRESULT put_NameCS_301200550213( LPSTR pszName ); short get_VolumeCS_301200550214( short nInstrument ); HRESULT put_VolumeCS_301200550215( short nInstrument, short nVolume ); short get_PanCS_301200550216( short nInstrument ); HRESULT put_PanCS_301200550217( short nInstrument, short nPan ); short get_PatchCS_301200550218( short nInstrument ); HRESULT put_PatchCS_301200550219( short nInstrument, short nPan ); IAABand* CloneCS_301200550220(); HRESULT GetDataCS_301200550221( AABAND* pBand ); HRESULT SetDataCS_301200550222( AABAND* pBand ); This interface respresents a band.  It must also support the IPersistStream interface so that bands may be loaded and saved. IAATemplate interface DECLARE_INTERFACE_(IAATemplate, IUnknown) /* IUnknown methods */ HRESULT QueryInterface( REFIID riid, LPVOID* ppvObj ); ULONG AddRef(); ULONG Release(); /* IAATemplate methods */ LPSTR get_NameCS_301200550050(); HRESULT put_NameCS_301200550223( LPSTR pszName ); short get_LengthCS_301200550224(); HRESULT put_LengthCS_301200550225( short nLength ); IAATemplate* CloneCS_301200550226(); HRESULT GetDataCS_301200550227( AATEMPLATE* pTemplate ); HRESULT SetDataCS_301200550228( AATEMPLATE* pTemplate ); This interface respresents a template used for composing new sections.  It must also support the IPersistStream interface so that templates may be loaded and saved. IAAPattern interface DECLARE_INTERFACE_(IAAPattern, IUnknown) /* IUnknown methods */ HRESULT QueryInterface( REFIID riid, LPVOID* ppvObj ); ULONG AddRef(); ULONG Release(); /* IAAPattern methods */ LPSTR get_NameCS_301200550045(); HRESULT put_NameCS_301200550229( LPSTR pszName ); short get_LengthCS_301200550230(); HRESULT put_LengthCS_301200550231( short nLength ); short get_BeatsPerMeasureCS_301200550232(); short get_ClicksPerBeatCS_301200550233(); IAAPattern* CloneCS_301200550234(); HRESULT GetDataCS_301200550235( AAPATTERN* pPattern ); HRESULT SetDataCS_301200550236( AAPATTERN* pPattern ); This interface respresents a pattern, the basic building blocks of styles.  It must also support the IPersistStream interface so that patterns may be loaded and saved. IAALoaderCS_301200550240->LoadPersonality() HRESULT LoadPersonality( LPSTR pszFileName, LPSTR pszPersonalityName, IAAPersonality** ppPersonality ); This function takes the filename and/or personality name and loads a personality based on it.  This function is called during the loading of sections or styles and may be overridden by the application by defining their own implementation of IAALoader.  If the application overrides this interface it should be prepared for either the filename or personality name being NULL.  This function may return a pointer to an already loaded personality or may open a stream and load a new one. RETURN VALUES: The function succeeded. E_FAIL The function failed IAALoaderCS_301200550240->LoadStyle() HRESULT LoadStyle( LPSTR pszFileName, LPSTR pszStyleName, IAAStyle** ppStyle ); This function takes the filename and/or personality name and loads a style based on it.  This function is called during the loading of sections and may be overridden by the application by defining their own implementation of IAALoader.  If the application overrides this interface it should be prepared for either the filename or style name being NULL.  This function may return a pointer to an already loaded style or may open a stream and load a new one. RETURN VALUES: The function succeeded. E_FAIL The function failed IAARealTimeIAARealTime->get_PPQN() short get_PPQN(); This function returns the PPQN value - Pulses Per Quarter Note.  This is the number of musical clock ticks it takes to make up a single quarter note. IAAEngineIAAEngine->ComposeTransition() HRESULT ComposeTransition( IAASection* pFromSection, IAASection* pToSection, short nMeasureNum, long fCommand, long fFlags, IAASection** ppSection ); Composes a transition from the measure nMeasureNum in pFromSection to pToSection.  If pFromSection is NULL, the currently playing section is used.  pToSection may be NULL as long as AAF_MODULATE is not passed as one of the flags.  nMeasureNum may be 0 if pFromSection is NULL in which case the current measure of the current section is used. Any one of the following commands may be passed in the lCommand parameter: AAC_FILL Perform a musical Fill during the transition. AAC_BREAK Perform a musical Break during the transition. AAC_END Resolve the first section with an ending. AAC_INTRO Play an intro before the next section. AAC_GROOVE_A Perform in a very low activity groove. AAC_GROOVE_B Perform in a low activity groove. AAC_GROOVE_C Perform in a regular activity groove. AAC_GROOVE_D Perform in a high activity groove. These flags are valid for the fFlags parameter: AAF_MODULATE The music should modulate in key and personality from the first to the second section. Otherwise, it should stay in the key and personality of the starting section. AAF_LONG The transition should last two measures instead of one. RETURN VALUES: The function succeeded. AAE_NOCURRENTSECTION NULL was passed as pFromSection and there is no currently playing section. E_INVALIDARG An invalid measure number was passed IAAEngineIAAEngine->GetLoader() IAALoader* GetLoader(); This function returns the current registered IAALoaderCS_301200550240 interface.  If no IAALoader interface is registered, NULL is returned. IAAEngineIAAEngine->RegisterLoader() HRESULT RegisterLoader( IAALoader* pLoader ); This function registers an IAALoaderCS_301200550240 interface with the IAAEngine.  This interface is used when loading styles or sections that make reference to personalities or styles that may exist in different streams. RETURN VALUES: The function succeeded. E_INVALIDARG The pointer passed is invalid IAAEngine->ReleaseSection() HRESULT ReleaseSection( IAASection* pSection ); This function releases a specific section that the IAAEngine interface is keeping track of. RETURN VALUES: The function succeeded. E_INVALIDARG The pointer passed is unknown to the IAAEngine interface IAAEngine->ReleaseSong() HRESULT ReleaseSong( IAASong* pSong ); This function releases a specific song that the IAAEngine interface is keeping track of. RETURN VALUES: The function succeeded. E_INVALIDARG The pointer passed is unknown to the IAAEngine interface IAAEngine->ReleaseMotif() HRESULT ReleaseMotif( IAAMotif* pMotif ); This function releases a specific motif that the IAAEngine interface is keeping track of. RETURN VALUES: The function succeeded. E_INVALIDARG The pointer passed is unknown to the IAAEngine interface IAAEngine->ReleaseBand() HRESULT ReleaseBand( IAABand* pBand); This function releases a specific band that the IAAEngine interface is keeping track of. RETURN VALUES: The function succeeded. E_INVALIDARG The pointer passed is unknown to the IAAEngine interface IAAEngine->ReleaseTemplate() HRESULT ReleaseTemplate( IAATemplate* pTemplate); This function releases a specific template that the IAAEngine interface is keeping track of. RETURN VALUES: The function succeeded. E_INVALIDARG The pointer passed is unknown to the IAAEngine interface IAAEngine->ReleaseStyle() HRESULT ReleaseStyle( IAAStyle* pStyle); This function releases a specific style that the IAAEngine interface is keeping track of. RETURN VALUES: The function succeeded. E_INVALIDARG The pointer passed is unknown to the IAAEngine interface IAAEngine->ReleasePersonality() HRESULT ReleasePersonality( IAAPersonality* pPersonality); This function releases a specific personality that the IAAEngine interface is keeping track of. RETURN VALUES: The function succeeded. E_INVALIDARG The pointer passed is unknown to the IAAEngine interface IAAEngine->ReleaseAllSections() HRESULT ReleaseAllSections(); This function releases all sections that the IAAEngine interface keeps track of. RETURN VALUES: The function succeeded. IAAEngine->ReleaseAllSongs() HRESULT ReleaseAllSongs(); This function releases all songs that the IAAEngine interface keeps track of. RETURN VALUES: The function succeeded. IAAEngine->ReleaseAllMotifs() HRESULT ReleaseAllMotifs(); This function releases all motifs that the IAAEngine interface keeps track of. RETURN VALUES: The function succeeded. IAAEngine->ReleaseAllBands() HRESULT ReleaseAllBands(); This function releases all bands that the IAAEngine interface keeps track of. RETURN VALUES: The function succeeded. IAAEngine->ReleaseAllTemplates() HRESULT ReleaseAllTemplates(); This function releases all templates that the IAAEngine interface keeps track of. RETURN VALUES: The function succeeded. IAAEngine->ReleaseAllStyles() HRESULT ReleaseAllStyles(); This function releases all styles that the IAAEngine interface keeps track of. RETURN VALUES: The function succeeded. IAAEngine->ReleaseAllPersonalities() HRESULT ReleaseAllPersonalities(); This function releases all personalities that the IAAEngine interface keeps track of. RETURN VALUES: The function succeeded. IAABandIAABand->get_Name() LPSTR get_Name(); This function returns the name of the band.  If the band name has not been explicitly set (for a newly allocated band) the string returned will be "New".  In case of an error, NULL will be returned. IAAMotifIAAMotif->get_Name() LPSTR get_Name(); This function returns the name of the motif.  If the motif name has not been explicitly set (for a newly allocated motif) the string returned will be "New".  In case of an error, NULL will be returned. IAAPatternIAAPattern->get_Name() LPSTR get_Name(); This function returns the name of the pattern.  If the pattern name has not been explicitly set (for a newly allocated pattern) the string returned will be "New".  In case of an error, NULL will be returned. IAAPersonalityIAAPersonality->get_Name() LPSTR get_Name(); This function returns the name of the personality.  If the personality name has not been explicitly set (for a newly allocated personality) the string returned will be "New".  In case of an error, NULL will be returned. IAASectionIAASection->get_Name() LPSTR get_Name(); This function returns the name of the section.  If the section name has not been explicitly set (for a newly allocated section) the string returned will be "New".  In case of an error, NULL will be returned. IAASongIAASong->get_Name() LPSTR get_Name(); This function returns the name of the song.  If the song name has not been explicitly set (for a newly allocated song) the string returned will be "New".  In case of an error, NULL will be returned. IAAStyleIAAStyle->get_Name() LPSTR get_Name(); This function returns the name of the style.  If the style name has not been explicitly set (for a newly allocated style) the string returned will be "New".  In case of an error, NULL will be returned. IAATemplateIAATemplate->get_Name() LPSTR get_Name(); This function returns the name of the template.  If the template name has not been explicitly set (for a newly allocated template) the string returned will be "New".  In case of an error, NULL will be returned. IAAEngineIAAEngine->PlaySection() HRESULT PlaySection( IAASection* pSection, long fFlags, long lStartTime ) This function plays the section referred to by pSection.  Various flags sent via the fFlags parameter influence how the section is played.  Each of these flags is mutually exclusive - combining them may get unpredictable results.  In all cases if there is no currently playing section, the requested section begins playing immediately regardless of the fFlags parameter. AAF_NEXT_MEASURE (default) Usage of this flag stops the currently playing section (if any) at the next measure boundary to begin playing the requested section. AAF_NEXT_BEAT Usage of this flag stops the currently playing section (if any) at the next beat boundary to begin playing the requested section. AAF_NEXT_CLICK Usage of this flag stops the currently playing section (if any) at the next click boundary to begin playing the requested section. AAF_IMMEDIATE Usage of this flag stops the currently playing section (if any) immediately to begin playing the requested section. AAF_QUEUE Usage of this flag will queue the section to play when all currently pending sections have ended.  It is safe to queue the same section more than once. AAF_NEXT_SECTION Usage of this flag will flush all pending sections queued to play so that the requested section will play as soon as the current one is finished.  This does not affect any repeats that the current section has yet to play. AAF_FAIL_IF_PLAYING Usage of this flag will cause the function to fail (returning E_FAIL) if there is a section currently playing. RETURN VALUES: The function succeeded. E_POINTER An invalid IAASection was passed. E_INVALIDARG An invalid flag was passed. E_FAIL Failed because a section is already playing. IAAEngineIAAEngine->PlaySong() HRESULT PlaySong( IAASong* pSong, long fFlags, long lStartTime ) This function plays the song referred to by pSong.  A song is composed of a sequence of sections which are played in order until completion.  Various flags sent via the fFlags parameter influence how the song is played.  Each of these flags is mutually exclusive - combining them may get unpredictable results.  In all cases if there is no currently playing section, the requested song begins playing immediately regardless of the fFlags parameter. AAF_NEXT_MEASURE (default) Usage of this flag stops the currently playing section (if any) at the next measure boundary to begin playing the requested song. AAF_NEXT_BEAT Usage of this flag stops the currently playing section (if any) at the next beat boundary to begin playing the requested song. AAF_NEXT_CLICK Usage of this flag stops the currently playing section (if any) at the next click boundary to begin playing the requested song. AAF_IMMEDIATE Usage of this flag stops the currently playing section (if any) immediately to begin playing the requested song. AAF_NEXT_SECTION Usage of this flag will flush all pending sections queued to play so that the requested song will play as soon as the current section is finished.  This does not affect any repeats that the current section has yet to play. AAF_FAIL_IF_PLAYING Usage of this flag will cause the function to fail (returning E_FAIL) if there is a section currently playing. RETURN VALUES: The function succeeded. E_POINTER An invalid IAASong was passed. E_INVALIDARG An invalid flag was passed. E_FAIL Failed because a section is already playing. IAAEngineIAAEngine->PlayMotif() HRESULT PlayMotif( IAAMotif* pMotif, long fFlags ) This function plays the motif referred to by pMotif.  A motif will only play if music is already playing.  A motif is very similar to a pattern - it may have variations and it plays transposed to the current key and chord.  By default, a motif can not overlap itself.  A playing motif must come to an end before the same motif may be played again. The following flags are mutually exclusive.  Combining them may yield unpredictable results. AAF_NEXT_MEASURE (default) Usage of this flag plays the motif at the next measure boundary. AAF_NEXT_BEAT Usage of this flag plays the motif at the next beat boundary. AAF_NEXT_CLICK Usage of this flag plays the motif at the next click boundary. AAF_IMMEDIATE Usage of this flag plays the motif immediately. The following flags may be combined as necessary. AAF_ALLOW_OVERLAP Usage of this flag will allow the motif to overlap itself, i.e. multiple copies of the same motif may be playing at the same time. AAF_PLAY_WITH_STYLE Usage of this flag ignores the motif's band and plays the motif with the currently playing style's band.  Also, instead of dynamically allocating unused MIDI channels, the channels of the style are used as well. AAF_IGNORE_KEY Usage of this flag plays the motif in the key it was designed in rather than the current key.  The motif will still be transposed to fit the current chord in the motif's key. AAF_IGNORE_CHORD Usage of this flag plays the motif in the chord it was designed in rather changing to fit the current chord.  The motif will still be transposed to fit the current key. RETURN VALUES: The function succeeded. AAE_NOMUSICPLAYING The motif cannot play because there is no music playing. AAE_ALREADYPLAYING The motif is already playing and the AAF_ALLOW_OVERLAP flag has not been set. IAAEngineIAAEngine->Stop() HRESULT Stop( long fFlags ) This function stops whatever music AudioActive is currently playing.  Any sections queued to be played in the future are flushed from the queue. AAF_NEXT_MEASURE (default) Usage of this flag stops the currently playing section at the next measure boundary. AAF_NEXT_BEAT Usage of this flag stops the currently playing section at the next beat boundary. AAF_NEXT_CLICK Usage of this flag stops the currently playing section at the next click boundary. AAF_IMMEDIATE Usage of this flag stops the currently playing section immediately. AAF_NEXT_SECTION Usage of this flag will flush all pending sections queued to play.  This does not affect any repeats that the current section has yet to play.  This flag acts just like IAAEngine->FlushSectionQueue(). RETURN VALUES: The function succeeded. IAAEngineIAAEngine->FlushSectionQueue() HRESULT FlushSectionQueue() This function queues all pending sections that are queued but have not yet started.  If the currently playing section has a fixed number of repeats, this function does not affect pending repeats. RETURN VALUES: The function succeeded. IAAEngineIAAEngine->GetCurrentSection() IAASection* GetCurrentSection() This function returns a pointer to the interface describing the currently playing section.  If no section is currently playing, a NULL is returned. RETURN VALUES: No section is currently playing. non-NULL pointer to interface describing the currently playing section IAAEngineIAAEngine->AutoTransition() HRESULT AutoTransition( IAASection* pToSection, long lCommand, long fFlags ); This function automatically transitions from the current position in the playing section to the section provided.  Any pending sections will be flushed from the queue and the currently playing section (if any) will be set to stop at the next measure boundary. Any one of the following commands may be passed in the lCommand parameter: AAC_FILL Perform a musical Fill during the transition. AAC_BREAK Perform a musical Break during the transition. AAC_END Resolve the first section with an ending. AAC_INTRO Play an intro before the next section. AAC_GROOVE_A Perform in a very low activity groove. AAC_GROOVE_B Perform in a low activity groove. AAC_GROOVE_C Perform in a regular activity groove. AAC_GROOVE_D Perform in a high activity groove. These flags are valid for the fFlags parameter: TRANS_CHANGE The music should modulate in key and personality from the first to the second section. Otherwise, it should stay in the key and personality of the starting section. TRANS_LONG The transition should last two measures instead of one. RETURN VALUES: The function succeeded. IAAEngineIAAEngine->AllocSection() HRESULT AllocSection( IAASection** ppSection ) This function allocates a new blank section.   The section's data must be set with SetData() or via the Load() function exposed via the IPersistStream interface. RETURN VALUES: The function succeeded. E_OUTOFMEMORY The interface could not be allocated. E_INVALIDARG An invalid pointer was passed to this function. IAAEngineIAAEngine->ComposeSection() HRESULT ComposeSection( IAAStyle* pStyle, IAAPersonality* pPersonality, IAATemplate* pTemplate, short nActivity, IAASection** ppSection ) This function uses the style, personality, and template to create an original section.  The length of the section will correspond to the length of the template passed.  If pPersonality is NULL, the default personality for the style is used.  The nActivity parameter specifies amount of chord change activity; valid values are 0 through 3, where 0 represents many chord changes and 3 represents very little chord movement. RETURN VALUES: The function succeeded. E_OUTOFMEMORY The interface could not be allocated. E_INVALIDARG An invalid pointer was passed to this function or nActivity is out of range. IAAEngineIAAEngine->ComposeSectionFromShape() HRESULT ComposeSectionFromShape( IAAStyle* pStyle, IAAPersonality* pPersonality, short nActivity, ComposeShape shape, short nNumMeasures, long lCommand, IAASection** ppSection ) This function uses the style, personality, and shape to create an original section.  The length of the section will correspond to the length of the template passed.  If pPersonality is NULL, the default personality for the style is used.  The nActivity parameter specifies amount of chord change activity; valid values are 0 through 3, where 0 represents many chord changes and 3 represents very little chord movement. The shape parameter must be one of the following: SH_FALLING SH_LEVEL SH_LOOPABLE SH_LOUD SH_QUIET SH_PEAKING SH_RANDOM SH_RISING SH_SONG Note that for SH_SONG to work the section must be at least 32 measures in length.  If the section is less than 32 measures and SH_SONG is specified, SH_RISING will be used instead. Valid values for the lCommand parameter include any combination of the following: AAC_END Play an ending at the end of the section. AAC_INTRO Play an intro at the beginning of the section. RETURN VALUES: The function succeeded. E_OUTOFMEMORY The interface could not be allocated. E_INVALIDARG An invalid pointer was passed to this function. IAAEngineIAAEngine->AllocSong() HRESULT AllocSong( IAASong** ppSong ) This function allocates a new empty song.  The Load() function exposed via the IPersistStream interface may be used to further initialize the song. RETURN VALUES: The function succeeded. E_OUTOFMEMORY The interface could not be allocated. E_INVALIDARG An invalid pointer was passed to this function. IAAEngineIAAEngine->AllocMotif() HRESULT AllocMotif( IAAMotif** ppMotif ) This function allocates a new empty motif.  The motif's data must be set with SetData() or via the Load() function exposed via the IPersistStream interface. RETURN VALUES: The function succeeded. E_OUTOFMEMORY The interface could not be allocated. E_INVALIDARG An invalid pointer was passed to this function. IAAEngineIAAEngine->AllocBand() HRESULT AllocBand( IAABand** ppBand ) This function allocates a new band with default settings for all instruments.  The Load() function exposed via the IPersistStream interface may be used to further initialize the band. RETURN VALUES: The function succeeded. E_OUTOFMEMORY The interface could not be allocated. E_INVALIDARG An invalid pointer was passed to this function. IAAEngineIAAEngine->AllocTemplate() HRESULT AllocTemplate( IAATemplate** ppTemplate ) This function allocates a new empty template.  The template's data must be set with SetData() or via the Load() function exposed via the IPersistStream interface. RETURN VALUES: The function succeeded. E_OUTOFMEMORY The interface could not be allocated. E_INVALIDARG An invalid pointer was passed to this function. IAAEngineIAAEngine->ComposeTemplateFromShape() HRESULT ComposeTemplateFromShape( ComposeShape shape, short nNumMeasures, IAATemplate** ppTemplate ) This function composes a new template based on a predefined shape. The shape parameter must be one of the following: SH_FALLING SH_LEVEL SH_LOOPABLE SH_LOUD SH_QUIET SH_PEAKING SH_RANDOM SH_RISING SH_SONG Note that for SH_SONG to work the section must be at least 32 measures in length.  If the section is less than 32 measures and SH_SONG is specified, SH_RISING will be used instead. RETURN VALUES: The function succeeded. E_OUTOFMEMORY The interface could not be allocated. E_INVALIDARG An invalid pointer was passed to this function. IAAEngineIAAEngine->AllocStyle() HRESULT AllocStyle( IAAStyle** ppStyle ) This function allocates a new empty style.  The style's data must be set with SetData() or via the Load() function exposed via the IPersistStream interface. RETURN VALUES: The function succeeded. E_OUTOFMEMORY The interface could not be allocated. E_INVALIDARG An invalid pointer was passed to this function. IAAEngineIAAEngine->AllocPersonality() HRESULT AllocPersonality( IAAPersonality** ppPersonality ) This function allocates a new empty personality.  The personality's data must be set with SetData() or via the Load() function exposed via the IPersistStream interface. RETURN VALUES: The function succeeded. E_OUTOFMEMORY The interface could not be allocated. E_INVALIDARG An invalid pointer was passed to this function. IAAEngineIAAEngine->AllocPattern() HRESULT AllocPattern( IAAPattern** ppPattern ) This function allocates a new empty pattern.  The pattern's data must be set with SetData() or via the Load() function exposed via the IPersistStream interface. RETURN VALUES: The function succeeded. E_OUTOFMEMORY The interface could not be allocated. E_INVALIDARG An invalid pointer was passed to this function. IAAEngineIAAEngine->GetFirstStyleName() HRESULT GetFirstStyleName( BSTR*  ppszStyleName ) This function returns the first style name in the global style database. RETURN VALUES: The function succeeded. E_OUTOFMEMORY The string could not be allocated. E_INVALIDARG An invalid pointer was passed to this function. IAAEngineIAAEngine->GetNextStyleName() HRESULT GetNextStyleName( BSTR* ppszStyleName ) This function returns the next style name in the global style database after the name passed.  The pointer passed is freed and a new one allocated. RETURN VALUES: The function succeeded. E_OUTOFMEMORY The string could not be allocated. E_INVALIDARG An invalid pointer was passed to this function. IAAEngineIAAEngine->SetPrepareTime() HRESULT SetPrepareTime( short nPrepareTime ) This functions sets the amount of time ahead that notes are composed and sent to the registered IAAEventSinkIAAEventSink.  This time is in music time and defaults to the length of one measure. RETURN VALUES: The function succeeded. E_INVALIDARG The prepare time specified is out of range. IAAEngineIAAEngine->SetDebug() HRESULT SetDebug( short nDebug ) This function sets the debug level.  A value of 0 (the default) results in no debugging messages being printed.  A value of 1 (fatal error) through 5 (informational message) indicates messages of thast severity or lower should be printed.  Messages are displayed using OutputDebugString().  A debug value of greater than 0 also enforces very strict runtime data validation in all functions. RETURN VALUES: The function succeeded. IAAEngineIAAEngine->GetEventSink() IAAEventSink* GetEventSink() This function returns the IAAEventSinkIAAEventSink interface registered with this interface.  If this function returns NULL, no IAAEventSink interface has been registered. IAAEngineIAAEngine->RegisterEventSink() HRESULT RegisterEventSink( IAAEventSink* pEventSink ) This function registers a new IAAEventSinkIAAEventSink with the IAAEngine.  If there is already an IAAEvenSink interface registered, it is released and the new one assigned. This is where all composed events are funnelled to.  In the simplest case, this interface is one of the ones exported by the IAARealTimeIAARealTime interface, so events are directly given to it.  An application may choose to daisy chain IAAEventSink interfaces between IAAEngine and IAARealTime to perform whatever filter operations necessary. RETURN VALUES: The function succeeded. IAAEngineIAAEngine->GetRealTime() HRESULT IAARealTime* GetRealTime() This function returns the IAARealTmeIAARealTime interface registered with this interface.  If this function returns NULL, no IAARealTime interface has been registered. IAAEngineIAAEngine->RegisterRealTime() HRESULT RegisterRealTime( IAARealTime* pRealTime ) This function registers a new IAARealTimeIAARealTime with the IAAEngine.  If there is already an IAARealTime interface registered, it is released and the new one assigned. RETURN VALUES: The function succeeded. IAARealTimeIAARealTime->get_Tempo() long get_Tempo() This function returns the tempo in beats per minute as well as a fractional part of 0 to 65535 out of 65536.  In most cases the factional part of the tempo is not necessary or desired and in this case a simple cast to a short or the usage of the TEMPO_BPM( x ) macro will retrieve only the beats per minute portion of the tempo.  The fractional portion of the tempo is stored in the upper 16 bits and may be retrieved using the TEMPO_FRACT( x ) macro. IAARealTimeIAARealTime->put_Tempo() HRESULT put_Tempo( long lTempo ) This function sets the current tempo in beats per minute, including a fractional tempo that is a fraction from 0 to 65535 parts out of 65536.  The fractional part of the tempo is stored as the upper 16 bits, so merely passing 120 (for example) to this function will set the tempo to 120 beats per minute.  If a fractional tempo is desired there is a macro MAKE_TEMPO( bpm, fract ) that will arrange the information properly.  Note that the fractional tempo is optional and should only be required when a very high resolution is necessary. RETURN VALUES: The function succeeded. E_INVALIDARG The tempo was out of range. IAARealTimeIAARealTime->get_TimeSignature() long get_TimeSignature() This function returns both the numerator and denominator of the current time signature.  The individual pieces may be retrieved by the use of the TIMESIG_NUMERATOR( x ) and TIMESIG_DENOMINATOR( x ) macros. IAARealTimeIAARealTime->put_TimeSignature() HRESULT put_TimeSignature( long lTimeSignature ) This function sets the current time signature.  The time signature is built of two parts, a numerator (beats per measure) and a denominator (which note determines the beat ).  This value may be built using the macro MAKE_TIMESIG( numerator, denominator ), RETURN VALUES: The function succeeded. E_INVALIDARG The time signature is invalid. IAARealTimeIAARealTime->get_RelTempo() short get_RelTempo() This function returns the current relative tempo, from 0 (half speed) to 200 (double speed) with 100 being the normal speed. IAARealTimeIAARealTime->put_RelTempo() HRESULT put_RelTempo( short nRelTempo ) This function sets the relative tempo.  The relative tempo goes from 0 (half speed) to 200 (double speed) with 100 being normal speed.  The relative tempo is always in effect until reset, even when the actual tempo is changed. RETURN VALUES: The function succeeded. E_INVALIDARG The relative tempo passed was out of range. IAARealTimeIAARealTime->get_RelVolume() short get_RelVolume() This function retrieves the current relative volume, where 100 is normal, 0 is off/quiet, and 200 is double the normal volume. IAARealTimeIAARealTime->put_RelVolume() HRESULT put_RelVolume( short nRelVolume ) This function sets the current relative volume, where 100 is normal, 0 is off/quiet, and 200 is double the normal volume. RETURN VALUES: The function succeeded. E_INVALIDARG The parameter passed is out of range. IAARealTimeIAARealTime->get_Mutes() short get_Mutes() This function returns a short where each bit represents an instrument in the band, one for each of the sixteen band members where the low bit is instrument 1 and the high bit instrument 16.  If a bit is on, then that instrument is muted, otherwise it is not. IAARealTimeIAARealTime->put_Mutes() HRESULT put_Mutes( short nMutes ) This function sets the mutes for each of the sixteen instruments.  Each bit in nMutes represents an instrument in the band where the low bit is instrument 1 and the high bit instrument 16.  If a bit is on, then that instrument is muted, otherwise it is not. RETURN VALUES: The function succeeded. IAARealTimeIAARealTime->get_MusicTime() long get_MusicTime() This function returns the current music time, based on the PPQN.  If there is no music playing, this value will be whatever the last valid music time was, or 0 if music has never played. IAARealTimeIAARealTime->ResetMusicTime() HRESULT ResetMusicTime() This function resets the music time to be 0. RETURN VALUES: The function succeeded. IAARealTimeIAARealTime->GetNotifySink() IAANotifySink* GetNotifySink() This function returns a pointer to the registered IAANotifySinkIAANotifySink interface, or NULL if there is none registered. IAARealTimeIAARealTime->RegisterNotifySink() HRESULT RegisterNotifySink( IAANotifySink* pNotifySink ) This function registers an IAANotifySinkIAANotifySink interface with the IAARealTime interface.  This interface is implemented by an application to receive callbacks on key events. RETURN VALUES: The function succeeded. IAARealTimeIAARealTime->GetClock() IClock* GetClock() This function returns the pointer to the currently registered IClockIClock interface, or NULL if there is none. IAARealTimeIAARealTime->RegisterClock() HRESULT RegisterClock( IClock* pClock ) This function registers the IClockIClock interface with the IAARealTime interface.  This interface is used to determine the current system time and may be overridden if there is an alternate timing source that is necessary to sync to. RETURN VALUES: The function succeeded. IAAEventSinkIAAEventSink->GetEventSink() IAAEventSink* GetEventSink() This function returns the current IAAEventSink interface registered, or NULL if there is none. IAAEventSinkIAAEventSink->RegisterEventSink() HRESULT RegisterEventSink( IAAEventSink* pEventSink ) This function registers an IAAEventSink interface with this IAAEventSink.  In this manner it is possible to daisy-chain IAAEventSinks to perform filtering or any other operation until they reach their ultimate destination. RETURN VALUES: The function succeeded. IAAEventSinkIAAEventSink->QueueEvent() HRESULT QueueEvent( AAEVENT* pEvent ) This function queues an event to be played. RETURN VALUES: The function succeeded. IAAMIDISinkIAAMIDISink->GetMIDISink() IAAMIDISink* GetMIDISink() This function returns the currently regitered IAAMIDISink interface, or NULL if there is none. IAAMIDISinkIAAMIDISink->RegisterMIDISink() HRESULT RegisterMIDISink( IAAMIDISink* pMIDISink ) This function registers an IAAMIDISink interface with this IAAMIDISink interface.  In this way, these interfacesmay be daisy-chained to perform filtering or other effects needed. RETURN VALUES: The function succeeded. IAAMIDISinkIAAMIDISink->PlayMIDIEvent() HRESULT PlayMIDIEvent( long lMIDIEvent, long lTimeInMils ) This function plays a MIDI event.  The exact timestamp is passed when possible, although a 0 value in this field is valid and indicates that the event is coming in in realtime and should be played as soon as possible. RETURN VALUES: The function succeeded. IAANotifySinkIAANotifySink->OnSongStarted() HRESULT OnSongStarted( IAASong* pSong, long fFlags ) This function is called to notify an application whenever a song is started.  There are currently no valid flags defined for the fFlags field. RETURN VALUES: The function succeeded. IAANotifySinkIAANotifySink->OnSongEnded() HRESULT OnSongEnded( IAASong* pSong, long fFlags, long lEndTime ) This function is called to notify an application whenever a song has ended. Valid flags in the fFlags field are: AAF_ENDEDEARLY This song was stopped before it was complete. RETURN VALUES: The function succeeded. IAANotifySinkIAANotifySink->OnSectionStarted() HRESULT OnSectionStarted( IAASection* pSection, long fFlags ) This function is called to notify an application whenever a section has started. Valid flags in the fFlags field are: AAF_ISTRANSITION This section is a transition. RETURN VALUES: The function succeeded. IAANotifySinkIAANotifySink->OnSectionEnded() HRESULT OnSectionEnded( IAASection* pSection, long fFlags, long lEndTime ) This function is called to notify an application whenever a section has ended. Valid flags in the fFlags field are: AAF_ISTRANSITION This section is a transition. AAF_ENDEDEARLY This section was stopped before it was complete. RETURN VALUES: The function succeeded. IAANotifySinkIAANotifySink->OnSectionChanged() HRESULT OnSectionChanged( IAASection* pSection, long fFlags ) This function is called to notify an application whenever a section's data is changed in any way.  There are currently no valid flags defined for the fFlags field. RETURN VALUES: The function succeeded. IAANotifySinkIAANotifySink->OnNextSection() HRESULT OnNextSection( IAASection* pSection, long fFlags ) This function is called to notify an application that a section is nearing completion and there are no more sections left in the queue.  If the application wants to continue playing music, new sections should be composed and/or queued to play. There are currently no valid flags defined for the fFlags field. RETURN VALUES: The function succeeded. IAANotifySinkIAANotifySink->OnEmbellishment() HRESULT OnEmbellishment( long lEmbellishment, long fFlags ) This function notifies the application that an embellishment has begun to play.  The lEmbellishment parameter may be any ony of the following: AAC_FILL AAC_BREAK AAC_END AAC_INTRO There are currently no valid flags defined for the fFlags field. RETURN VALUES: The function succeeded. IAANotifySinkIAANotifySink->OnGroove() HRESULT OnGroove( long lGroove, long fFlags ) This function notifies the application when a new groove begins to play.  The lGroove parameter may be any one of the following: AAC_GROOVE_A AAC_GROOVE_B AAC_GROOVE_C AAC_GROOVE_D There are currently no valid flags defined for the fFlags field. RETURN VALUES: The function succeeded. IAANotifySinkIAANotifySink->OnMetronome() HRESULT OnMetronome( short nMeasure, short nBeat ) This function notifies the application on every beat while music is playing.  The nMeasure and nBeat parameters are relative to the current section only and start at 1. RETURN VALUES: The function succeeded. IAANotifySinkIAANotifySink->OnMIDIInput() HRESULT OnMIDIInput( long lMIDIEvent, long lMusicTime ) This function notifies the application every time an event is received by the IAAMIDISinkIAAMIDISink interface of IAARealTimeIAARealTime.  The most common cause for this is MIDI input, although an application may send data to this interface as it sees fit. RETURN VALUES: The function succeeded. IAANotifySinkIAANotifySink->OnNotePlayed() HRESULT OnNotePlayed( AAEVENT* pEvent ) This function notifies the application every time an event is processed and played by the IAARealTimeIAARealTime interface.  Only events that have been queued to the IAARealTime interface's IAAEventSinkIAAEventSink interface will cause this notification. RETURN VALUES: The function succeeded. IAAMIDIInIAAMIDIIn->Activate() HRESULT Activate() This function will claim the MIDI input resource for the use of the current application.  Typically, only one application may claim this resource at a time.  Depending on the driver being used, it may also not be possible to perform other tasks simultaneously with MIDI Input, for example WAVE audio output. RETURN VALUES: The function succeeded. E_FAIL The MIDI In resource is not available. IAAMIDIInIAAMIDIIn->Deactivate() HRESULT Deactivate() This function releases the MIDI input resource so that other applications may use it. RETURN VALUES: The function succeeded. IAAMIDIInIAAMIDIIn->SetDevice() HRESULT SetDevice( short nDeviceID ) This function sets the current device being used for MIDI input. RETURN VALUES: The function succeeded. E_INVALIDARG The nDeviceID is invalid. IAAMIDIInIAAMIDIIn->GetMIDISink() IAAMIDISink* GetMIDISink() This function returns the IAAMIDISinkIAAMIDISink interface that is the recipient of the data generated by the MIDI input device. RETURN VALUES: The function succeeded. IAAMIDIInIAAMIDIIn->RegisterMIDISink() HRESULT RegisterMIDISink( IAAMIDISink* pMIDISink ) This function registers the IAAMIDISinkIAAMIDISink interface that will be the recipient of the data generated by the MIDI input device. RETURN VALUES: The function succeeded. IAAMIDIOutIAAMIDIOut->Activate() HRESULT Activate() This function will claim the MIDI output resource for the use of the current application.  Typically, only one application may claim this resource at a time.  RETURN VALUES: The function succeeded. IAAMIDIOutIAAMIDIOut->Deactivate() HRESULT Deactivate() This function releases the MIDI output resource so that other applications may use it. RETURN VALUES: The function succeeded. IAAMIDIOutIAAMIDIOut->SetDevice() HRESULT SetDevice( short nDeviceID ) This function sets the current device being used for MIDI output. RETURN VALUES: The function succeeded. E_INVALIDARG The nDeviceID is invalid. IClockIClock->GetTime() long GetTime() This function returns the current system time in milliseconds. IAASectionIAASection->put_Name() HRESULT put_Name( LPSTR pszName ) This function sets the name of the pattern. RETURN VALUES: The function succeeded. E_INVALIDARG The name passed is NULL. IAASectionIAASection->get_Tempo() long get_Tempo() This function returns the section's tempo in beats per minute as well as a fractional part of 0 to 65535 out of 65536.  In most cases the factional part of the tempo is not necessary or desired and in this case a simple cast to a short or the usage of the TEMPO_BPM( x ) macro will retrieve only the beats per minute portion of the tempo.  The fractional portion of the tempo is stored in the upper 16 bits and may be retrieved using the TEMPO_FRACT( x ) macro. IAASectionIAASection->put_Tempo() HRESULT put_Tempo( long lTempo ) This function sets the section's tempo in beats per minute, including a fractional tempo that is a fraction from 0 to 65535 parts out of 65536.  The fractional part of the tempo is stored as the upper 16 bits, so merely passing 120 (for example) to this function will set the tempo to 120 beats per minute.  If a fractional tempo is desired there is a macro MAKE_TEMPO( bpm, fract ) that will arrange the information properly.  Note that the fractional tempo is optional and should only be required when a very high resolution is necessary. RETURN VALUES: The function succeeded. E_INVALIDARG The tempo was out of range. IAASectionIAASection->get_Length() short get_Length() This function returns the length of the pattern in measures.  If there is an error, 0 is returned. IAASectionIAASection->put_Length() HRESULT put_Length( short nLength ) This function sets the length in measures for this section. RETURN VALUES: The function succeeded. E_INVALIDARG The nLength parameter is out of acceptable range. IAASectionIAASection->get_LengthInMils() long get_LengthInMils() This function returns the length in milliseconds og the section.  Changes in the relative tempo via the IAARealTimeIAARealTime interface are not reflected. IAASectionIAASection->get_Style() IAAStyle* get_Style() This function returns a pointer to the style that the section is currently referencing. IAASectionIAASection->put_Style() HRESULT put_Style( IAAStyle* pStyle ) This function sets the section's style.  The pointer reference is maintained until explicitly changed or until the section is released. RETURN VALUES: The function succeeded. IAASectionIAASection->get_Personality() IAAPersonality* get_Personality() This function returns a pointer to the personality that the section is referencing. IAASectionIAASection->put_Personality() HRESULT put_Personality( IAAPersonality* pPersonality ) This function sets the section's personality.  The pointer reference is maintained until explicitly changed or until the section is released. RETURN VALUES: The function succeeded. IAASectionIAASection->get_Band() IAABand* get_Band() This function returns a pointer to the section's band.  This pointer is guaranteed to remain the same throughout the lifetime of the section. IAASectionIAASection->put_Band() HRESULT put_Band( IAABand* pBand ) This function sets the section's band to be equal to the pBand passed.  It will not maintain a reference to the passed pointer, so further operations on the passed band will not be reflected in the section's band. RETURN VALUES: The function succeeded. IAASectionIAASection->get_Key() short get_Key() IAASectionIAASection->put_Key() HRESULT put_Key( short nKey ) RETURN VALUES: The function succeeded. IAASectionIAASection->get_Repeats() short get_Repeats() IAASectionIAASection->put_Repeats() HRESULT put_Repeats( short nRepeats ) RETURN VALUES: The function succeeded. IAASectionIAASection->get_UserData() long get_UserData() IAASectionIAASection->put_UserData() HRESULT put_UserData( long lUserData ) RETURN VALUES: The function succeeded. IAASectionIAASection->Play() HRESULT Play( long fFlags, long lStartTime ) This function plays the section.  Various flags sent via the fFlags parameter influence how the section is played.  Each of these flags is mutually exclusive - combining them may get unpredictable results.  In all cases if there is no currently playing section, the requested section begins playing immediately regardless of the fFlags parameter. AAF_NEXT_MEASURE (default) Usage of this flag stops the currently playing section (if any) at the next measure boundary to begin playing the requested section. AAF_NEXT_BEAT Usage of this flag stops the currently playing section (if any) at the next beat boundary to begin playing the requested section. AAF_NEXT_CLICK Usage of this flag stops the currently playing section (if any) at the next click boundary to begin playing the requested section. AAF_IMMEDIATE Usage of this flag stops the currently playing section (if any) immediately to begin playing the requested section. AAF_QUEUE Usage of this flag will queue the section to play when all currently pending sections have ended.  It is safe to queue the same section more than once. AAF_NEXT_SECTION Usage of this flag will flush all pending sections queued to play so that the requested section will play as soon as the current one is finished.  This does not affect any repeats that the current section has yet to play. AAF_FAIL_IF_PLAYING Usage of this flag will cause the function to fail (returning E_FAIL) if there is a section currently playing. RETURN VALUES: The function succeeded. E_POINTER An invalid IAASection was passed. E_INVALIDARG An invalid flag was passed. E_FAIL Failed because a section is already playing. IAASectionIAASection->Stop() HRESULT Stop( long fFlags ) This function stops the section playing.  If the section is not currently playing, tis function has no effect.  This function does not affect any additional queued copies of this section but does prevent any repeats from occuring.  AAF_NEXT_MEASURE (default) Usage of this flag stops the section at the next measure boundary. AAF_NEXT_BEAT Usage of this flag stops the section at the next beat boundary. AAF_NEXT_CLICK Usage of this flag stops the section at the next click boundary. AAF_IMMEDIATE Usage of this flag stops the section immediately. RETURN VALUES: The function succeeded. AAW_NOT_PLAYING The section could not be stopped because it was not playing. IAASectionIAASection->IsPlaying() BOOL IsPlaying() This function returns TRUE if the section is currently playing, otherwise it returns FALSE. IAASectionIAASection->GetData() HRESULT GetData( AASECTION* pSection ) This function fills in the AASECTIONCS_301200550021 structure passed with data appropriate for this pattern.  Both the cbStructSize and the nSectionType fields must be filled in with valid values before this function is called. RETURN VALUES: The function succeeded. E_INVALIDARG The structure passed is NULL or is not initialized correctly. IAASectionIAASection->SetData() HRESULT SetData( AASECTION* pSection ) This function sets the data of the IAASection to conform with the AASECTIONCS_301200550021 structure passed. RETURN VALUES: The function succeeded. E_INVALIDARG The pointer passed is NULL or the structure has an invalid type or structure length. IAASectionIAASection->Clone() IAASection* Clone() This function returns a new interface that is a duplicate of the current interface.  If there is an error, NULL will be returned. IAASectionIAASection->RemoveFromQueue() HRESULT RemoveFromQueue() This function removes the section from the queue of pending sections to play.  If this section is queued multiple times, every reference to it in the queue is removed. RETURN VALUES: The function succeeded. AAW_NOTQUEUED The section is not queued to be played. IAASongIAASong->put_Name() HRESULT put_Name( LPSTR pszName ) This function sets the name of the song. RETURN VALUES: The function succeeded. E_INVALIDARG The name passed is NULL. IAASongIAASong->get_Author() LPSTR get_Author() This function retrieves the author of the song.  If no author has been defined, NULL will be returned. IAASongIAASong->put_Author() HRESULT put_Author( LPSTR pszAuthor ) This function sets the author of the song. RETURN VALUES: The function succeeded. IAASongIAASong->get_Length() short get_Length() This function returns the length in measures of all of the sections that it owns. IAASongIAASong->get_LengthInMils() long get_LengthInMils() This function retrieves the song's length in milliseconds.  If there are no sections in the song, 0 is returned.  This function does not take into account any relative tempo changes, only each section's base tempo and length. IAASongIAASong->GetFirstSection() IAASection* GetFirstSection() This function returns the first section in the list.  If the song contains no sections, NULL will be returned. IAASongIAASong->GetNextSection() IAASection* GetNextSection( IAASection* pSection ) This function returns the next section after pSection in the song's list of sections.  If there are no more sections or if pSection is not a valid section in the song, NULL is returned. IAASongIAASong->InsertSection() HRESULT InsertSection( IAASection* pPrevSection, IAASection* pSection ) This function inserts pSection into the song's list of sections.  If pPrevSection is NULL, then the section is inserted at the beginning of the list. RETURN VALUES: The function succeeded. E_INVALIDARG The section is already part of the song or pPrevSection is not part of the song. IAASongIAASong->AppendSection() HRESULT AppendSection( IAASection* pSection ) This function appends the passed section to the end of the song's list of sections. RETURN VALUES: The function succeeded. E_INVALIDARG The section is already part of the song. IAASongIAASong->RemoveSection() HRESULT ReleaseSection( IAASection* pSection ) This function releases the section from the song's list of sections. RETURN VALUES: The function succeeded. E_INVALIDARG The section was NULL or does not belong to the song. IAASongIAASong->Clone() IAASong* Clone() This function returns a new interface that is a duplicate of the current interface.  If there is an error, NULL will be returned. IAASongIAASong->Play() HRESULT Play( long fFlags, long lStartTime ) This function plays the song.  A song is composed of a sequence of sections which are played in order until completion.  Various flags sent via the fFlags parameter influence how the song is played.  Each of these flags is mutually exclusive - combining them may get unpredictable results.  In all cases if there is no currently playing section, the requested song begins playing immediately regardless of the fFlags parameter. AAF_NEXT_MEASURE (default) Usage of this flag stops the currently playing section (if any) at the next measure boundary to begin playing the requested song. AAF_NEXT_BEAT Usage of this flag stops the currently playing section (if any) at the next beat boundary to begin playing the requested song. AAF_NEXT_CLICK Usage of this flag stops the currently playing section (if any) at the next click boundary to begin playing the requested song. AAF_IMMEDIATE Usage of this flag stops the currently playing section (if any) immediately to begin playing the requested song.  AAF_NEXT_SECTION Usage of this flag will flush all pending sections queued to play so that the requested song will play as soon as the current section is finished.  This does not affect any repeats that the current section has yet to play. AAF_FAIL_IF_PLAYING Usage of this flag will cause the function to fail (returning E_FAIL) if there is a section currently playing. RETURN VALUES: The function succeeded. E_INVALIDARG An invalid flag was passed. E_FAIL Failed because a section is already playing. IAASongIAASong->Stop() HRESULT Stop( long fFlags ) This function stops the song if it is playing.  If the song is not playing, it has no effect.  AAF_NEXT_MEASURE (default) Usage of this flag stops the currently playing section at the next measure boundary. AAF_NEXT_BEAT Usage of this flag stops the currently playing section at the next beat boundary. AAF_NEXT_CLICK Usage of this flag stops the currently playing section at the next click boundary. AAF_IMMEDIATE Usage of this flag stops the currently playing section immediately. AAF_NEXT_SECTION Usage of this flag will flush all pending sections queued to play.  This does not affect any repeats that the current section has yet to play.  This flag acts just like IAAEngine->FlushSectionQueue(). RETURN VALUES: The function succeeded. AAW_NOT_PLAYING The motif could not be stopped because it was not playing. IAASongIAASong->IsPlaying() VARIANT_BOOL IsPlaying() This function returns TRUE if the song is currently playing, otherwise it returns FALSE. IAASongIAASong->GetData() HRESULT GetData( AASONG* pSong ) This function fills in the AASONGCS_301200550020 structure passed with data appropriate for this pattern.  Both the cbStructSize and the nSongType fields must be filled in with valid values before this function is called. RETURN VALUES: The function succeeded. E_INVALIDARG The structure passed is NULL or is not initialized correctly. IAASongIAASong->SetData() HRESULT SetData( AASONG* pSong ) This function sets the data of the IAASong to conform with the AASONGCS_301200550020 structure passed. RETURN VALUES: The function succeeded. E_INVALIDARG The pointer passed is NULL or the structure has an invalid type or structure length. IAAMotifIAAMotif->put_Name() HRESULT put_Name( LPSTR pszName ) This function sets the name of the pattern. RETURN VALUES: The function succeeded. E_INVALIDARG The name passed is NULL. IAAMotifIAAMotif->get_Length() short get_Length() This function returns the length of the motif in measures.  If there is an error, 0 is returned. IAAMotifIAAMotif->put_Length() HRESULT put_Length( short nLength ) This function sets the length in measures for this motif. RETURN VALUES: The function succeeded. E_INVALIDARG The nLength parameter is out of acceptable range. IAAMotifIAAMotif->get_Band() IAABand* get_Band() This function returns a pointer to the motif's band.  This pointer is guaranteed to remain the same throughout the lifetime of the motif. IAAMotifIAAMotif->put_Band() HRESULT put_Band( IAABand* pBand ) This function sets the motif's band to be equal to the pBand passed.  It will not maintain a reference to the passed pointer, so further operations on the passed band will not be reflected in the motif's band. RETURN VALUES: The function succeeded. IAAMotifIAAMotif->get_BeatsPerMeasure() short get_BeatsPerMeasure() This function returns the number of beats per measure for this motif.  This value is defined by the owning style and may not be changed directly. IAAMotifIAAMotif->get_ClicksPerBeat() short get_ClicksPerBeat() This function returns the number of clicks per beat for this pattern.  This value is defined by the owning style and may not be changed directly. IAAMotifIAAMotif->Play() HRESULT Play( long fFlags ) This function plays the motif.  A motif will only play if music is already playing.  A motif is very similar to a pattern - it may have variations and it plays transposed to the current key and chord.  By default, a motif can not overlap itself.  A playing motif must come to an end before the same motif may be played again. The following flags are mutually exclusive.  Combining them may yield unpredictable results. AAF_NEXT_MEASURE (default) Usage of this flag plays the motif at the next measure boundary. AAF_NEXT_BEAT Usage of this flag plays the motif at the next beat boundary. AAF_NEXT_CLICK Usage of this flag plays the motif at the next click boundary. AAF_IMMEDIATE Usage of this flag plays the motif immediately. The following flags may be combined as necessary. AAF_ALLOW_OVERLAP Usage of this flag will allow the motif to overlap itself, i.e. multiple copies of the same motif may be playing at the same time. AAF_PLAY_WITH_STYLE Usage of this flag ignores the motif's band and plays the motif with the currently playing style's band.  Also, instead of dynamically allocating unused MIDI channels, the channels of the style are used as well. AAF_IGNORE_KEY Usage of this flag plays the motif in the key it was designed in rather than the current key.  The motif will still be transposed to fit the current chord in the motif's key. AAF_IGNORE_CHORD Usage of this flag plays the motif in the chord it was designed in rather changing to fit the current chord.  The motif will still be transposed to fit the current key. RETURN VALUES: The function succeeded. AAE_NOMUSICPLAYING The motif cannot play because there is no music playing. AAE_ALREADYPLAYING The motif is already playing and the AAF_ALLOW_OVERLAP flag has not been set. IAAMotifIAAMotif->Stop() HRESULT Stop( long fFlags ) This function stops the playing the motif.  It has no effect on any other playing motifs or sections.  AAF_NEXT_MEASURE (default) Usage of this flag stops the motif at the next measure boundary. AAF_NEXT_BEAT Usage of this flag stops the motif at the next beat boundary. AAF_NEXT_CLICK Usage of this flag stops the motif at the next click boundary. AAF_IMMEDIATE Usage of this flag stops the motif section immediately. RETURN VALUES: The function succeeded. AAW_NOT_PLAYING The motif could not be stopped because it was not playing. IAAMotifIAAMotif->IsPlaying() VARIANT_BOOL IsPlaying() This function returns TRUE if the motif is currently playing, otherwise it returns FALSE. IAAMotifIAAMotif->Clone() IAAMotif* Clone() This function returns a new interface that is a duplicate of the current interface.  If there is an error, NULL will be returned. IAAMotifIAAMotif->GetData() HRESULT GetData( AAMOTIF* pMotif ) This function fills in the AAMOTIFCS_301200550024 structure passed with data appropriate for this pattern.  Both the cbStructSize and the nMotifType fields must be filled in with valid values before this function is called. RETURN VALUES: The function succeeded. E_INVALIDARG The structure passed is NULL or is not initialized correctly. IAAMotifIAAMotif->SetData() HRESULT SetData( AAMOTIF* pMotif ) This function sets the data of the IAAMotif to conform with the AAMOTIFCS_301200550024 structure passed. RETURN VALUES: The function succeeded. E_INVALIDARG The pointer passed is NULL or the structure has an invalid type or structure length. IAAStyleIAAStyle->put_Name() HRESULT put_Name( LPSTR pszName ) This function sets the name of the pattern. RETURN VALUES: The function succeeded. E_INVALIDARG The name passed is NULL. IAAStyleIAAStyle->get_BeatsPerMeasure() short get_BeatsPerMeasure() This function returns the number of beats per measure for this style. IAAStyleIAAStyle->put_BeatsPerMeasure() HRESULT put_BeatsPerMeasure( short nBeatsPerMeasure ) This function sets the number of beats per measure for this style. RETURN VALUES: The function succeeded. E_INVALIDARG The argument passed is out of range. IAAStyleIAAStyle->get_ClicksPerBeat() short get_ClicksPerBeat() This function returns the style's number of clicks per beat. IAAStyleIAAStyle->put_ClicksPerBeat() HRESULT put_ClicksPerBeat( short nClicksPerBeat ) This function sets the number of clicks per beat for this style.  This is equivalent to grid resolution in SuperJAM. RETURN VALUES: The function succeeded. E_INVALIDARG The argument passed is out of range. IAAStyleIAAStyle->get_DefaultTempo() long get_DefaultTempo() This function returns the default tempo for this style in beats per minute as well as a fractional part of 0 to 65535 out of 65536.  In most cases the factional part of the tempo is not necessary or desired and in this case a simple cast to a short or the usage of the TEMPO_BPM( x ) macro will retrieve only the beats per minute portion of the tempo.  The fractional portion of the tempo is stored in the upper 16 bits and may be retrieved using the TEMPO_FRACT( x ) macro. IAAStyleIAAStyle->put_DefaultTempo() HRESULT put_DefaultTempo( long lTempo ) This function sets the default tempo for this style in beats per minute, including a fractional tempo that is a fraction from 0 to 65535 parts out of 65536.  The fractional part of the tempo is stored as the upper 16 bits, so merely passing 120 (for example) to this function will set the tempo to 120 beats per minute.  If a fractional tempo is desired there is a macro MAKE_TEMPO( bpm, fract ) that will arrange the information properly.  Note that the fractional tempo is optional and should only be required when a very high resolution is necessary. RETURN VALUES: The function succeeded. E_INVALIDARG The tempo passed is out of range. IAAStyleIAAStyle->GetFirstBand() IAABand* GetFirstBand() This function returns the first band in the style's list of bands.  If the list is empty, NULL is returned. IAAStyleIAAStyle->GetNextBand() IAABand* GetNextBand( IAABand* pBand ) This function returns the next band in the list of bands that belong to the style after the one passed.  If the end of the list has been reached, NULL is returned. IAAStyleIAAStyle->AddBand() HRESULT AddBand( IAABand* pBand ) This function adds a band to a style.  This function will create a clone of the band passed to add to the styles list of bands. RETURN VALUES: The function succeeded. E_INVALIDARG The argument is NULL. E_OUTOFMEMORY The band could not be cloned. IAAStyleIAAStyle->ReleaseBand() HRESULT ReleaseBand( IAABand* pBand ) This function releases the band from the style, making it no longer associated with the style. RETURN VALUES: The function succeeded. E_INVALIDARG The band passed is invalid or does not belong to this style. IAAStyleIAAStyle->GetDefaultBand() IAABand* GetDefaultBand() This function returns the default band for the style.  If the style has no associated bands or if no band has been designated to be the default, NULL is returned. IAAStyleIAAStyle->SetDefaultBand() HRESULT SetDefaultBand( IAABand* pBand ) This function designates the passed band to be the default for this style. RETURN VALUES: The function succeeded. E_INVALIDARG The band passed is invalid or does not belong to this style. IAAStyleIAAStyle->get_Band() IAABand* get_Band( LPSTR pszName ) This function retrieves the band associated with this style with the requested name.  If an appropriate band could not be found, NULL is returned. IAAStyleIAAStyle->GetFirstPersonality() IAAPersonality* GetFirstPersonality() This function returns the first personality in the style's list of personalities.  If the list is empty, NULL is returned. IAAStyleIAAStyle->GetNextPersonality() IAAPersonality* GetNextPersonality( IAAPersonality* pPersonality ) This function returns the next personality in the list of personality that belong to the style after the one passed.  If the end of the list has been reached, NULL is returned. IAAStyleIAAStyle->AddPersonality() HRESULT AddPersonality( IAAPersonality* pPersonality ) This function adds a personality to a style. RETURN VALUES: The function succeeded. E_INVALIDARG The argument is NULL. IAAStyleIAAStyle->ReleasePersonality() HRESULT ReleasePersonality( IAAPersonality* pPersonality ) This function releases the personality from the style, making it no longer associated with the style. RETURN VALUES: The function succeeded. E_INVALIDARG The personality passed is invalid or does not belong to this style. IAAStyleIAAStyle->GetDefaultPersonality() IAAPersonality* GetDefaultPersonality() This function returns the default personality for the style.  If the style has no associated personalities or if no personality has been designated to be the default, NULL is returned. IAAStyleIAAStyle->SetDefaultPersonality() HRESULT SetDefaultPersonality( IAAPersonality* pPersonality ) This function designates the passed personality to be the default for this style. RETURN VALUES: The function succeeded. E_INVALIDARG The personality passed is invalid or does not belong to this style. IAAStyleIAAStyle->get_Personality() IAAPersonality* get_Personality( LPSTR pszName ) This function retrieves the personality associated with this style with the requested name.  If an appropriate personality could not be found, NULL is returned. IAAStyleIAAStyle->GetFirstMotif() IAAMotif* GetFirstMotif() This function returns the first motif in the style's list of motifs.  If the list is empty, NULL is returned. IAAStyleIAAStyle->GetNextMotif() IAAMotif* GetNextMotif( IAAMotif* pMotif ) This function returns the next motif in the list of motifs that belong to the style after the one passed.  If the end of the list has been reached, NULL is returned. IAAStyleIAAStyle->AddMotif() HRESULT AddMotif( IAAMotif* pMotif ) This function adds a motif to a style.  This function will fail if the motif passed already belongs to a style - it must be released from the original style before being added to a new style. RETURN VALUES: The function succeeded. E_INVALIDARG The argument is NULL or already belongs to a style. IAAStyleIAAStyle->ReleaseMotif() HRESULT ReleaseMotif( IAAMotif* pMotif ) This function releases the motif from the style, making it no longer associated with the style. RETURN VALUES: The function succeeded. E_INVALIDARG The motif passed is invalid or does not belong to this style. IAAStyleIAAStyle->get_Motif() IAAMotif* get_Motif( LPSTR pszName ) This function retrieves the motif associated with this style with the requested name.  If an appropriate motif could not be found, NULL is returned. IAAStyleIAAStyle->GetFirstPattern() IAAPattern* GetFirstPattern() This function returns the first pattern in the style's list of patterns.  If the list is empty, NULL is returned. IAAStyleIAAStyle->GetNextPattern() IAAPattern* GetNextPattern( IAAPattern* pPattern ) This function returns the next pattern in the list of patterns that belong to the style after the one passed.  If the end of the list has been reached, NULL is returned. IAAStyleIAAStyle->AddPattern() HRESULT AddPattern( IAAPattern* pPattern ) This function adds a pattern to a style.  This function will fail if the pattern passed already belongs to a style - it must be released from the original style before being added to a new style. RETURN VALUES: The function succeeded. E_INVALIDARG The argument is NULL or already belongs to a style. IAAStyleIAAStyle->ReleasePattern() HRESULT ReleasePattern( IAAPattern* pPattern ) This function releases the pattern from the style, making it no longer associated with the style. RETURN VALUES: The function succeeded. E_INVALIDARG The pattern passed is invalid or does not belong to this style. IAAStyleIAAStyle->get_Pattern() IAAPattern* get_Pattern( LPSTR pszName ) This function retrieves the pattern associated with this style with the requested name.  If an appropriate pattern could not be found, NULL is returned. IAAStyleIAAStyle->Clone() IAAStyle* Clone() This function returns a new interface that is a duplicate of the current interface.  If there is an error, NULL will be returned. IAAStyleIAAStyle->GetData() HRESULT GetData( AASTYLE* pStyle ) This function fills in the AASTYLECS_301200550019 structure passed with data appropriate for this pattern.  Both the cbStructSize and the nStyleType fields must be filled in with valid values before this function is called. RETURN VALUES: The function succeeded. E_INVALIDARG The structure passed is NULL or is not initialized correctly. IAAStyleIAAStyle->SetData() HRESULT SetData( AASTYLE* pStyle ) This function sets the data of the IAAStyle to conform with the AASTYLECS_301200550019 structure passed. RETURN VALUES: The function succeeded. E_INVALIDARG The pointer passed is NULL or the structure has an invalid type or structure length. IAAPersonalityIAAPersonality->put_Name() HRESULT put_Name( LPSTR pszName ) This function sets the name of the pattern. RETURN VALUES: The function succeeded. E_INVALIDARG The name passed is NULL. IAAPersonalityIAAPersonality->Clone() IAAPersonality* Clone() This function returns a new interface that is a duplicate of the current interface.  If there is an error, NULL will be returned. IAAPersonalityIAAPersonality->GetData() HRESULT GetData( AAPERSONALITY* pPersonality ) This function fills in the AAPERSONALITYCS_301200550022 structure passed with data appropriate for this pattern.  Both the cbStructSize and the nPersonalityType fields must be filled in with valid values before this function is called. RETURN VALUES: The function succeeded. E_INVALIDARG The structure passed is NULL or is not initialized correctly. IAAPersonalityIAAPersonality->SetData() HRESULT SetData( AAPERSONALITY* pPersonality ) This function sets the data of the IAAPersonality to conform with the AAPERSONALITYCS_301200550022 structure passed. RETURN VALUES: The function succeeded. E_INVALIDARG The pointer passed is NULL or the structure has an invalid type or structure length. IAABandIAABand->put_Name() HRESULT put_Name( LPSTR pszName ) This function sets the name of the pattern. RETURN VALUES: The function succeeded. E_INVALIDARG The name passed is NULL. IAABandIAABand->get_Volume() short get_Volume( short nInstrument ) This function retrieves the volume for the specified instrument.  Valid values for nInstrument are 0 - 15, representing each of the 16 instruments. RETURN VALUES: The function succeeded. E_INVALIDARG The instrument is out of range IAABandIAABand->put_Volume() HRESULT put_Volume( short nInstrument, short nVolume ) This function sets the volume for the specified instrument.  Valid values for nInstrument are 0 - 15, representing each of the 16 instruments.  Valid values for nVolume are 0 - 127. RETURN VALUES: The function succeeded. E_INVALIDARG The instrument or patch number is out of range IAABandIAABand->get_Pan() short get_Pan( short nInstrument ) This function retrieves the pan value for the specified instrument.  Valid values for nInstrument are 0 - 15, representing each of the 16 instruments. RETURN VALUES: The function succeeded. E_INVALIDARG The instrument is out of range IAABandIAABand->put_Pan() HRESULT put_Pan( short nInstrument, short nPan ) This function sets the pan number for the specified instrument.  Valid values for nInstrument are 0 - 15, representing each of the 16 instruments.  Valid values for nPan are -64 (hard left) - 63 (hard right). RETURN VALUES: The function succeeded. E_INVALIDARG The instrument or patch number is out of range IAABandIAABand->get_Patch() short get_Patch( short nInstrument ) This function retrieves the patch number for the specified instrument.  Valid values for nInstrument are 0 - 15, representing each of the 16 instruments. RETURN VALUES: The function succeeded. E_INVALIDARG The instrument is out of range IAABandIAABand->put_Patch() HRESULT put_Patch( short nInstrument, short nPatch ) This function sets the patch number for the specified instrument.  Valid values for nInstrument are 0 - 15, representing each of the 16 instruments.  Valid values for nPatch are 0 - 127. RETURN VALUES: The function succeeded. E_INVALIDARG The instrument or patch number is out of range IAABandIAABand->Clone() IAABand* Clone() This function returns a new interface that is a duplicate of the current interface.  If there is an error, NULL will be returned. IAABandIAABand->GetData() HRESULT GetData( AABAND* pBand ) This function fills in the AABANDCS_301200550028 structure passed with data appropriate for this pattern.  Both the cbStructSize and the nBandType fields must be filled in with valid values before this function is called. RETURN VALUES: The function succeeded. E_INVALIDARG The structure passed is NULL or is not initialized correctly. IAABandIAABand->SetData() HRESULT SetData( AABAND* pBand ) This function sets the data of the IAABand to conform with the AABANDCS_301200550028 structure passed. RETURN VALUES: The function succeeded. E_INVALIDARG The pointer passed is NULL or the structure has an invalid type or structure length. IAATemplateIAATemplate->put_Name() HRESULT put_Name( LPSTR pszName ) This function sets the name of the template. RETURN VALUES: The function succeeded. E_INVALIDARG The name passed is NULL. IAATemplateIAATemplate->get_Length() short get_Length() This function returns the length of the template in measures.  If there is an error, 0 is returned. IAATemplateIAATemplate->put_Length() HRESULT put_Length( short nLength ) This function sets the length in measures for this template. RETURN VALUES: The function succeeded. E_INVALIDARG The nLength parameter is out of acceptable range. IAATemplateIAATemplate->Clone() IAATemplate* Clone() This function returns a new interface that is a duplicate of the current interface.  If there is an error, NULL will be returned. IAATemplateIAATemplate->GetData() HRESULT GetData( AATEMPLATE* pTemplate ) This function fills in the AATEMPLATE structure passed with data appropriate for this pattern.  Both the cbStructSize and the nTemplateType fields must be filled in with valid values before this function is called. RETURN VALUES: The function succeeded. E_INVALIDARG The structure passed is NULL or is not initialized correctly. IAATemplateIAATemplate->SetData() HRESULT SetData( AATEMPLATE* pTemplate ) This function sets the data of the IAATemplate to conform with the AATEMPLATECS_301200550018 structure passed. RETURN VALUES: The function succeeded. E_INVALIDARG The pointer passed is NULL or the structure has an invalid type or structure length. IAAPatternIAAPattern->put_Name() HRESULT put_Name( LPSTR pszName ) This function sets the name of the pattern. RETURN VALUES: The function succeeded. E_INVALIDARG The name passed is NULL. IAAPatternIAAPattern->get_Length() short get_Length() This function returns the length of the pattern in measures.  If there is an error, 0 is returned. IAAPatternIAAPattern->put_Length() HRESULT put_Length( short nLength ) This function sets the length in measures for this pattern. RETURN VALUES: The function succeeded. E_INVALIDARG The nLength parameter is out of acceptable range. IAAPatternIAAPattern->get_BeatsPerMeasure() short get_BeatsPerMeasure() This function returns the number of beats per measure for this pattern.  This value is defined by the owning style and may not be changed directly. IAAPatternIAAPattern->get_ClicksPerBeat() short get_ClicksPerBeat() This function returns the number of clicks per beat for this pattern.  This value is defined by the owning style and may not be changed directly. IAAPatternIAAPattern->Clone() IAAPattern* Clone() This function returns a new interface that is a duplicate of the current interface.  If there is an error, NULL will be returned. IAAPatternIAAPattern->GetData() HRESULT GetData( AAPATTERN* pPattern ) This function fills in the AAPATTERNCS_301200550023 structure passed with data appropriate for this pattern.  Both the cbStructSize and the nPatternType fields must be filled in with valid values before this function is called. RETURN VALUES: The function succeeded. E_INVALIDARG The structure passed is NULL or is not initialized correctly. IAAPatternIAAPattern->SetData() HRESULT SetData( AAPATTERN* pPattern ) This function sets the data of the IAAPattern to conform with the AAPATTERNCS_301200550023 structure passed. RETURN VALUES: The function succeeded. E_INVALIDARG The pointer passed is NULL or the structure has an invalid type or structure length. IAARealTimeIAARealTime->FlushEventsAfterTime() HRESULT FlushEventsAfterTime( long lTime ) This function will flush all events in the queue that are timestamped later than lTime unless the event has the AAF_DONTFLUSH flag set. RETURN VALUES: The function succeeded. Data Structures AABAND typedef struct AABAND struct AABAND* pNext; short cbStructSize; short nBandType; *** TO BE DETERMINED } AABAND; AACHORD typedef struct AACHORD struct AACHORD* pNext; short cbStructSize; short nChordType; long lTime; *** TO BE DETERMINED } AACHORD; AACLICK typedef struct AACLICK struct AACLICK* pNext; short cbStructSize; short nClickType; *** TO BE DETERMINED } AACLICK; AACOMMAND typedef struct AACOMMAND struct AACOMMAND* pNext; short cbStructSize; short nCommandType; long lTime; *** TO BE DETERMINED } AACOMMAND; AAEVENT typedef struct AAEVENT struct AAEVENT* pNext; short cbStructSize; short nEventType; long lTime; *** TO BE DETERMINED } AAEVENT; AAMOTIF typedef struct AAMOTIF struct AAMOTIF* pNext; short cbSize; short nMotifType; *** TO BE DETERMINED } AAMOTIF; AAPATTERN typedef struct AAPATTERN struct AAPATTERN* pNext; short cbStructSize; short nPatternType; *** TO BE DETERMINED } AAPATTERN; AAPERSONALITY typedef struct AAPERSONALITY struct AAPERSONALITY* pNext; short cbStructSize; short nPersonalityType; *** TO BE DETERMINED } AAPERSONALITY; AASECTION typedef struct AASECTION struct AASECTION* pNext; short cbStructSize; short nSectionType; *** TO BE DETERMINED } AASECTION; AASONG typedef struct AASONG struct AASONG* pNext; short cbStructSize; short nSongType; *** TO BE DETERMINED } AASONG; AASTYLE typedef struct AASTYLE struct AASTYLE* pNext; short cbStructSize; short nStyleType; *** TO BE DETERMINED } AASTYLE; AATEMPLATE typedef struct AATEMPLATE struct AATEMPLATE* pNext; short cbStructSize; short nTemplateType; *** TO BE DETERMINED } AATEMPLATE; Recommendation Of Use For applications that need a strong recurring theme, pre-composed sections are usually best.  This is guaranteed to maintain the same pattern of chords and musical embellishments every time, while the style will still allow for some flexibility of the actual notes played. For applications where a recurring theme is desired but also more flexibility, the best option is to keep around a template and compose new sections using the template.  This allows for variations in the chords of a piece of music, but still maintains a definite shape to the overall piece of music. For applications that desire even more variety in the music played, the application can just compose sections from scratch using IAAEngine->ComposeSectionFromShape(). For the best musical results, transitions should be played whenever a section is aborted early.  Also, whenever possible, try to stop sections and play motifs on a beat or measure boundary.  Playing them immediately can be musically awkward. Sample Applications The AudioActive Experimenter, previously described in the AudioActive 1.0 documentation, will be updated to use the new COM API. Otherwise, there are no tutorial changes from the AudioActive 1.0 tutorial. Migration If migrating from the AudioActive 1.0 DLL it should take into account that all convienience dialogs have been removed.  It is now the responsibility of the application to perform such tasks as soundcard setup (if necessary). Another major change is the file I/O.  All file I/O is performed using IPersistStream interfaces and must be passed a pre-prepared Istream interface from which to read from.  Files that reference other files (for example Styles reference Personalities, Sections reference Styles and Personalities) use the IAALoader interface which is registered with the IAAEngine.  This interface may be overridden by an application that holds these files in special streams rather than the default behavior of loading from a file. Several capabilities are planned for future releases and need to integrate as seamlessly as possible.  Some of these include support for tempo change curves, enhanced transitions, and melody generation. Most of these changes will not affect the interfaces, but will definitely affect the data structures underlying them.   When retrieving data of any type via the GetData() interface function make sure that the nType field is a type that is recognized by the application. Glossary Digital Music Stream (DMS): This is the path of how simple API calls turn into realistic-sounding interactive music. The path goes from a calling application, to AudioActive, to RenderActive, to AudioMan, to the output jack of a soundcard. FM (Frequency Modulation): A very simple mathematical method of producing acoustic instruments. It never sounds convincing, and people associate the sound with that of the original Nintendos. FM is a technology patented by Yamaha very prevalent in many soundcards, including the original Sound Blasters. There are different complexity levels of FM, and soundcards contain the simplest implementation. Interactive Music Architecture (IMA): This is the Blue Ribbon technology group s interactive music delivery system. It covers all aspects including development tools for content creators (musicians), API s for developers, and convincing quality sound, much like audio CD s can. MIDI (Musical Instrument Digital Interface): A networking protocol developed to allow synthesizers and computers to talk together in a musical way. Many people think MIDI sounds bad. Actually, MIDI doesn t make any sound at all. This logic comes from the fact that people think MIDI and FM sound are the same, due to the fact that FM soundcards are in wide distribution, and that FM uses MIDI as a communication path to the computer. When MIDI is utilized by professionals with quality instruments, they have the ability to create professional CD quality soundtracks. RenderActive: This is a soon to be developed technology that allows AudioActive music to produce sound that rivals audio CD soundtracks quality, even on FM soundcards (which are currently dominant in the market). Other terms used to describe this would be software synthesis, and software wavetable. RenderActive will work exclusively with AudioActive to round out the Interactive Music Architecture. Sequencer: When referring to MIDI, a sequencer is a common tool to record musical passages and play them back. It is similar to a tape recorder, except a sequencer can let you change individual notes or sounds after the recording. Wavetable: A sound playback technology that allows MIDI music to sound convincing. Unlike FM which uses simple mathematical algorithms to produce sound, wavetable uses snippets (samples) of real instruments, and plays those back at different pitches. This technology usually requires a wavetable hardware card, but that will change with the release of RenderActive.  Summary / In Closing As stated in the beginning, the main goal of this API is to allow Microsoft developers to integrate AudioActive with their projects using a COM implementation. With AudioActive now as a COM implementation, other programmers will be able to incorporate interactive music into their applications in no time. Finally, since it is a COM implementation, it also allows for more flexible ways to add new features in the future with a minimum of effort and a maximum of compatibility, this includes an OCX interface, and future features like continuous controllers, and polychords. Special Thanks Special thanks to Laurie Clayton and the rest of the AudioMan team for letting us use their AudioMan 1.5 feature spec as a model. By davmil and bthomas Version 2.12 3/14/96 Microsoft Confidential  SAVEDATE  \* MERGEFORMAT  03/12/96 5:42 PM Page   PAGE  \* MERGEFORMAT   NUMPAGES  \* MERGEFORMAT  = data object A = list of data objects of type A = data object A owns an exclusive copy of data object B = data object A references a single element in the list of B objects = data object A references multiple elements in the list of B objects = A calls/uses B = data flows from A to B = object A implements interface IFoo AAEngine AARealTime IAAEventSink IAARealTime IAAMIDISink AAMIDIIn AAClock NotifySink* AAMIDIOut IAAMIDISink IAANotifySink IAAClock AALoader IAALoader IAAEngine IAAMIDIIn IAAMIDIOut AAEngine Style Personality Section Template Motif Section Motif Pattern Normal Heading 1 Heading 2 Heading 3 Heading 4 Heading 5 Heading 6 Heading 7 Heading 8 Heading 9 Default Paragraph Font Input Reviewer Header Annotation Reference Title List Bullet List Number Body Text Annotation Text Footer Table Heading Chapter Typewriter,TT Caption Endnote Text Footnote Text Endnote Reference Footnote Reference Topic Heading Brian Thomas+\\KGB2\blue\Specs\AA COM API Spec v2.04.doc Brian Thomas+\\KGB2\blue\Specs\AA COM API Spec v2.04.doc Brian Thomas+\\KGB2\blue\Specs\AA COM API Spec v2.04.doc Brian Thomas+\\KGB2\blue\Specs\AA COM API Spec v2.04.doc Brian Thomas+\\KGB2\blue\Specs\AA COM API Spec v2.06.doc .+\\KGB2\BLUE\Specs\AA COM API Spec v2.08.doc .*\\KGB2\BLUE\Specs\AA COM API Spec v2.0.doc Brian Thomas"C:\Temp\T\AA COM API Spec v2.0.doc Brian Thomas"C:\Temp\T\AA COM API Spec v2.0.doc .*\\KGB2\BLUE\Specs\AA COM API Spec v2.0.doc @HP LaserJet 4Si MX \\msprint38\corpB HPPCL5MS HP LaserJet 4Si MX HP LaserJet 4Si MX MSUDN HP LaserJet 4Si MX HP LaserJet 4Si MX MSUDN HP LaserJet 4Si MX Hartin2( Altsys Fontographer 3.5  Hartin2 Regular Hartin2 Regular OS/2zKeR NcmapE3 dcvt  Hfpgm dglyf } hdmx& 6hhea $hmtx  Tloca Xmaxp  name Harting 2   1992 by D. Rakowski. All Rights Reserved. .Hartin2 2Regular rAltsys Fontographer 3.5  Hartin2 Regular rHartin2 Regular rAltsys Fontographer 3.5  4/9/92 2Hartin2 Regular %E#ah #h`D-,E  %E#ah#h`D-,   68-,   Fv Gh #Fah X  6e8Y-@ +EhDEhDEhDEhDEhD 74&'> 54&'& &'27&# #"'&654#654'> #"'&#" #"&'> 7&546'65&54 35&#"7& 765&#" 32754#" 365&# 326'. 36'&# '2676' 4&547. 36547&# 32676& '&#"' 76545&#" 4654. #"&'. 54654' #"&#" #"&#. 547&# &547632 32632 #"&#" 76&5476&54676&'47 767&5467&54674&#> &5654&'&#" #"'&#" #654&547. &54654' 3267. 54&'> #"&#" '4654'& 32637 &'&'&6'267. 654&'46 #"#&54 #&#&543 #"&7654&'674' 327&54654&#" 32547& 65&'& 7654& 3267. 6'&#" 327654&# 654&547&#" 327&#" 76476#" 67&5& &654'6#" 765&#" &'654'&5632 32676&547. 267654'& 6'&#" 367654&5> 546753 674&'> 5654&# 5&5467&54654'6 #"'&'&'" #"&54654' #"&#" '&'47 676&7 327654&5'6745. #54&'& 6&5467&54654&#" 654&547> 54&'432 3654' 365&5" 36745. 365&5&#" 3267. 3636& 327654&5473. 3275&# 7676&#" 3647&% 36473# #"&#" S[7;;1B41BV1B"  `E@M@G3)1 PFv/7 ...10 #"&'654&547. '&6'. 72672632 {qnje`^[ZXRL?2/.' XFv/7 ...................10 #654&5476&'&'&654&'654'&'> 54&547' 67&54654'> 365&#" &65&54> 545&'&654'> 3636'&#" zkfcPME=<:741/ ..................10 &54654'4654'654&54> 7&'&5> 54&547. 6327& )4)[W l<IND7 `YPLch<-L 9Fv/7 ....10 54&547&#" #&5467 6'&#" '4&'& &654'& #&5654' #"&#&'72632 3236'& 325&#" 67&#"3 #"&'" &'&67'&65> vsdVQNA>:( b`[usK} (Fv/7 ..... ................10 3654& #"5467> '&54654'#> 5&54> #654'> 72632 &54654' #"&#" '654&547'7'4&5467> 32676 23274'> 54&'> 76'&'&676&'> 54&547. '&546'&#" 65&#" 365&#" 76476#" 7&76#" I=&Y16 32632 67632 #"&#" 32654&/ #"&#" #"&'" 76&547 32632 76&'> 54&'> 36365. #"&'. 54654'& 36547. 35&'" 27&#" 35&#" 76'&#" 232654#" 3274& 3765&5 #"&#" 2363> '4654/ 5&52632 5&5467 &5467. #&54654'& #54&#"&#" #&5654'& 74&'& "&45467654&547 3267&565 32632 6'&#" 3275&#" 765&7 32765&'6 32756 #"'&# #"&#" '654&547&767 32632 32672 7267&654&'> 54'&54654' #"'5632 #"&5474'& #&654' #"&#" 547&# #"&#" '4&54756 267654&'7 3267. 7654&#" 75&#" 67&#" 35&#" 32767 &'6'&'&#" #"&#" 32632 #"&'> 254'632 '"#"5654'& '654&7632 3654. 54654' #"'454' #"&'654'#> 654'#> 7&547 326'&54654' 3654&5465&54765> 36547 2367. 76547&#" 326'&! 32632 #"&#" 32632 &54674&' #"&76763 5472673 327654&'> 4654' #"'4676 276547. 5654&# 74&#" 54654'> 54&547 32632 32654& 2327&#" 63254654' 63276 3674'& 3275&#" 32754# 376547 6'&#" 674&#" 32654& 65&5& 3635&#" 27654 #"&#&654' 54&5474&# 32654&7> #&"#" #"547& 547'> '4&5467> 54'&67 276&547> 72632 3274& 7&'&#" 67654'. 47&#" #"&#" 3267654&'> 75&546' 654&5632 #"'654&5474&'654&5 327654#" 36'&'& 654'& 354#" 5654&'654&547654&547 7654&5474654' 767654&54763 267654&7> 54'&#" #"'7. 654&547 "'654&547&5467 32632 65&#" 674#" 76547&#" 3676#" 7674'" 365&5& 3276& 6'&#" #&'&' #"&#" '4654'& 32676&'#5 327&54654'467 '654'> 54'&65> 3654. &'&#" 3263> 54&5. 35&#" 767&#" 3275&#" 35&#" '"567. 54'632 7654&'> 32676&'7> 54'&546'&# 654'& '4&5467 32632 54&5> 54'&54654' &#654'. #"&#" '4327654&'& 76&5467. 5467> 567632 32632 3276&'6; 2674&'654&547#&54654'& &'76' '"5454&#" &'76&'& 32654 326545&#" 327654 765&#" 676#" 765&5&#" 275&#" 6545& 35&#" @iSL%% P6D;MM6DI6D !Fv/7 ...10 #"&#" 5&54767 #"&'" &'&67'&65> @cYIGB& &%tuO iFv/7 ......10 54'&#" 36365&#" 32632 54&547&#" #&5467 6'&#" 327656 32632 '#&'&' '4676&'> '&#"#> 7&5467 7'632 76&'3 #"&'. 547&#> 54&5467&5465> 32365&#" 6365&#" 36'&#" 65&#" 65&#" 67&#" 7676'&#" 32726'. #4'#654&5467. 7&5467 #"&#" 32367 #"&#67> 32654&' 3267&54654'632 54&'3 676'#> 32632 5&54672 54&'. 767654#" 54'&#" 7647&# 6'&#" 54'&#" 765&#" 325&5& 5'&#" 76547&#" 365&#" #54&'& 54&#"# 4&547. '654'&# 32632 23275 32672 32632 #"'72 #"&#" #"&#" #"&#5 74'&#" 54'&54674&# 54'&54654&#> 54'&54654&'> 5467> 32675 32632 2367&547 7654&'> 76&547654&' #"&'> #"&#" 327&5463267&54654&+ 327&'& 7265&#" 37&#" 3265&5& 76545& 76'&# 3276&#" 3275&#" 32632 #"'&654'"#"&'63 3256&'#5 #"&#654' #"&#" 6&'&#" 4&#&# 32763 3654&'4767&546754&' #"&#" 54&#" 54&'47' '6323> 454'#> 32654&' 67&54654'> 54&'> 3267' 32632 765&#" 76'&#" 32'&#"7 327654&#" 36'&#" 3647& 65&#" 327632 #"'5623 326754&# &5467 &54674&'4654. #"'&67"&#" #"&#" 676&'" #"&#" 327&5465 327654&547 327676'& &5467 #"'4654/ 32654'&5467. '654&547&54654&/ 3265654&'#> 54'&547654'"54654# 6454. 326765&# 365&#" 676&#" 327&#" 65&#" 67&#" 36547& 267&7& 327632 #"'654' #"&#" 327632 327&54654' 63267 32632 #"&'> #&54654' 32632 3267&54654'4&547632 #"&#" #"&#" #"&#" &54654'2632 3267. 5475&#" 76&547&'> 54&547'67654/ 67654'. 7654'&#" 326'&#" 3254& 67&#"3 76'&#" 35&#" 3276&#" 6'6#" 6'&#" %G)4" 32632 32632 32632 #"'&654'&#" #"'&67 326365&5&#" #"&#" #"&#" #654&' 7674'#4323 3267. 76&'467 "&'654' &'654' 32632 #"&'6'& #"&'65&5467632 3254/ 54'&'46'. 7&54654'26'6&'46454&'> 7654&547 #"&'> #"&'654&'> 765&#"7# 365&#" 35&#" 327&'& 267&#" 65&#" #"&'> 54&547. 32672 76&'> 54'&54654'654'&#" #'4&547632 3267> 54&'& #"&#" 7'654#"'7& 2676'&'& 54654&#" 54&5467&'> 654&547654&547 36365. 656#" 365&#" 3276&#" 6'&#" 67&#" 6'&#" 3276#" 23274#" 67&#" #"&#" 4&5467> 54'6; 2676&'#5 #"&'&54654' 32767'2654'&'4763 32676' 4&54674'#> '#654&547 323654&#" '6'&5654&' 32632 3267632 32632 32676&#&#" 3274654'&'" #6'&#" #"'5> 327654#"7 '6&#" 363267&# 36454 354#" 327&# 2767&#" 35&#" rnka65 8`U`M` v/SXMH0 ED3$X ............ ...................... #"&#" 54654' #"&#" #"&#&#" 3267&654/ 54654'#46/ 654&54> 74654'. #654&'&#" #"&'&'> 7676'&#" 32756#" 326'& #"&#6&5474'"'654&'4&54634> 3276&547 32632 654&547654&547&'> 54&7. '654/ 523276&'" #"'#"& 365&#" 6547& #"'&#" #"&'" #'654&547 32632 '&5465654&54674'& 676&547&#"' 6&547> 76&'# 32676&'654/ 54&547&54654'&654. 3265& #"&'. 32632 6545&#" 634654&' #"&'654'6327 765&56& 7674'& 3276'. 63276& 65&#" 267'& ~wtmX</) |zKIIU)GU)6. U%"B. [O;92 ..... .................................. 3267&#" #"547 3276&5476&'# 54'&67 54'"547> 76&'> 76&547232654&'&654'. 76'"&7> 76&547> 326'. #"&'632 327654& 354&7 54673 32676&54? 3267. 32672 7&5465> #&#"' 32632 54'%> 2745473 #"&#&54654&'4654'. '&54654#" &54654&' #"7654&5474'" #"&'. '67654'6 3276&' 3274&5467. 54763 654'"'&'56 276'&'&54654'> 76&'&54654&'632 3276&# 5654' 27&654&' 76'&#" 3276& 765&5" 32632 65&5. 32632 76&'> 54'654&'674'654&547654' #"&'6&5472632 "&'6&547 &5654'7 &5654&' #"&#" &'47. 57&#" #"&#" #"&#" 32675 &5467> 76&'> 54&547. '54&'. 32656 365&5& 32654& #"&'654&'654&5 "&'&#" 5&547 323654&7> '46'&54654'> 54&547&'&'& &547& &547. 765&5&# 327632 #"&#" #"&'4654' 32632 54&5276' #&54'> 3267&'&'72654&72676&'& &'47' 232632 3654&#" 76&5&#" 365&5 6&546; 27654'7654&5654&' #"&'654#" 63274#" #"'&654/ 654&5& "&'#454&'& 32632 325&5> 267&54654'&'> "&'6; 5&547 #"&547. #"&'> #"'654&' 5&54654&'654&547654&547&5467 676&'> 72632 765&#" 54'&#" 765&5 36545 3275. 326546 32632 254&5474654. 62327654#" #"&#" 654&' 65&52 #"&#" &5274'#&54654'65&547&54654&'6'. 54674'> 76'#52 7654&'> #"&#" "#"'654. #"&#" 4&5476&' #"'654&547 32632 32632 32632 '676&' 532674' #"&54654&'> 32674&'&6 765&54#" 746'&#" 765&#" 3275&#" 32632 #"&'654'4654'&# #"&#" #"&#" 54'&#" 32632 674&547 3654&5474654&'> #"&#6. #"'&#" "'4654/ 654&547. 32632 #"&#" 654&547&54&'. 67&54 6232747 36'6& 27&#" 76545&#" 32632 &54674&# "&'52 5&54763 32676' 5654&'> 54&54676'&'> 76&5476&' 7&54654&'> 54&5&#" #"'654&'" 54654'2676&'> 54'&54654&'> &54654'674&'654&'& &5654'654& 3654& 765&5&#" 3254'4& 3267456#" 32632 32632 54&547 32676&'&#" #654&57&54654&#" #"&'7632 '&654# #7&54654' 74&'654&547654&547267. 54654&'> 54&547&54654'654&5467654&'#> 3276'& 72545&#" 32754&#" 62327. 32654&#" 365&# 32654& #"&'&#" &654'654&547&54654&'> 7&5467. "&'&7 32632 5&547 #"&5654'"&'5 676&' #"&'654&547. '&654' #"&'654&547&'&'4&547&"547. 327654& 765&5&#" 36'4& 327&'& 76'&#" 32753 54&'6323 765&/ '654&5467> 5'2676&'7 #"&#" 32632 54&5432 76&'#&767 547&54654&'654&#" 565&5467 32765&5472 327&5473 32632 5465& #"#&54654'654&'67654&#" '654&'> 54654&#"' 74&'> &'&67. 5654'> 32632 #&6%# 36'&#" 3275&#" 3656#" 6327&7 32632 32632 #"&#" "&'632 7&54654&/ '654&'"&'" &54654'72674&'> 46365. #6&'&#" 32632 #"&#" &'&676 '&54654'> 74&5476 3&7&#" #"&#" 23274&'> 7&5465&#" #"'&676&#" 32674#" 327632 #654' "&'454'& #"'2654&#" 32632 '654&'654'&#"&7> '654' "&'&6'. 3267&545&# 54654' #"&#" &54654' &545> 32632 327632 654&54765&54676 54654&' "#"&#" 35&#" 6'6#" 65&#" :+-$* 32675 32674& &#"'> 7&54654&'&672 "#"&#" #"&#" &'47> 5&5463> 5'2632 676&'4676 3276&547> 3267. #"&#" 7676&' 32674&'"#"5&654' 32654 3276& 65&5&#"v7|;7 |yumTPOF@:5 mFv/7 ..... ................... #"&#" "&'&'> 54'&546'&'&'"&547&65> 3267> 365&# 43654&5. 367&#" 3267654&5467 3267654&'43 3275&5465& 6327. 3265&5. #"&#" 654&547. 54654&54654'654&5467. 765'7. '#632 #"'&5467> 23276& 6327&5654& 36&5&'"7 327654&73 767676 327654&'> 7&54654&'654&547&# 54&'&54654' #"&'" 365&#" 32632 3276&52 '&674654&' #&#&5654&' #"&#" 3265&> 563276' &54654'&546/ 65&#" 7265&#" 36347&#" 35&#" 32632 5467676&547 326365&5. 327654# #"547> 5654&547&#" #"&#" &654' 32632 654&#> '654'"&'> 54&547. 276&'&654'&7 654&5463 3267'632 654&5476 3276&7> #"&'654' #"&#" #"&#&654/ 3265&#" 2327&#" 76'&#" 6'&#" 7267. zwskjb`URD(&%" ................................................ #654&' 36323 3267&54676 327'> "&'654&' #"&'. '4654. "'654&547654&5467&54654'6767&546 32632 32676&'654&547. #&5465 6'&#" 6'&#" 7654'&#" #"'654. #"&#"# #"&#" #"&#" #"&#" 54'6; 26753 54'63 3267. 54654#" 5267. '#&654'" #"'4654' #"&'4&' 32654&54732674&5476 32654'&54654'> 7654& 63276 765&#" 63276& 327&# 365&#"7 3275&# 765&5. 6'&'" 35&#" 365&'63 35&#" 65&#" 367&# 76&#"7 63276& 32632 #"&'" 32632 #654&'& '&674' 654'6&54632 76&547 3267> 72676&' #"&#&#" 3265. 654&547. '263654&/ 3265&5&#" 3276&#"'> 76&'&#" #"'674'& &54654'5 67&5467 327654' 6'6'&' #"&'654&54674&546726 5&5472632 3276&'6 4654&'&#" &5465 3267' 365&5& 6'&#" 7"54% 276#" 32'&#" 326'. 3267& 32632 654&5'> 547&5467 5&#"&7 3267. '4654'. 7232> #"&'63 3254'. #"&#" #654&# 65'6327 &54576&'> '4654'. #"'&6'. '4654'&54654&'> 674'& #'35# 7267. 3275&#" 7&565& 35&#" 365&# 54654'632 32632 #&'4&'& '#6&547632 3276' #"&#" &654'4654. #"5476' #"&#" 32632 3275&'&#" 32756&#" 3265' 756&#" 27654&#" D@&-*l`/ &'&#" #454&'#654&547&45467 "&'654&'"&'> 32632 3254'> 54&547> #"'&654'> 76'#> 54&563 "#"5654'> #654' #"&#" 54'&5> 3235&#" 3267654& 765&#" 276#" 3265. 7674'& 76547&#" $Z0KE 32654&'#467 32632 2654. #"&'& #"&'> 56&57> &654'"#"'> 76&'"&= 32636'&#" &54673 7654' #6454'& #"&#" #"&#4654'654'. 547263632 32632 32632 #"&'> 5'2674& 6327654#" 36'4#" 36547&# #"'&67 36'&54654/ 52367 32632 3654' 7&54& 365&#" 2327654&#" 654'& 76545&#" 36545&%&565632 326765&547 67&54654. 654&547&54654&'6&'> &54654&"#" #"&'. 32632 #"&#" #"'%. 654'& 7&54> 37&5476323 3254'#654'&54654#" 4654/ 76&'&654'&# #"&5< #"'&654'> 3267. #"&5656454&' #"'&54654654&'. #"'&54767> 27632 36545& 765&5&#" 63274& 7654'&#"% 63654& 327654& 365&5 35&#" 6232> 32654& 32654'& 654'& #654'& #"&#" 3265> 74&'654&/ 54&5. '&654/ 5654'654'" #"&#" #"&'&547> 326'. 5473265&54654#" &654/ 65&5. 547&#" &5467632 54'&#" 2654&#" 765&5 65&547 2365. 765&#"3 63&54 &563276&' '654&547&546? 67&5467> 32765& 254'& '"&7# 327654# 76&'67&5467'> 54&'. 547#. 7265&#" 765&5&#" 2327654#" 36547&#" '654'#476 32632 #"57. 32654&5&# 676&' 3276' 654&547. &#753 3274&#" 36'&#" 6'&#" 654'#" 3647&#" 3275&#" 67654# 365&5. 35&#" 327&547 3263654&'> 54&5632 '&54654'> 54&5467. #"'7. /0>$4 32632 #"&#" 74&547 36365&5. 6'&#" #"&#&#" 54&#" &5467&54654' 67&54676&'#> 7&54654'2632 &'432 #&#"'7' &5&#" 654&5263654'632 3276# #"'463267&54654#7 #"'&674&'2326'. #"'65&5# #"'65&#" 3&547 35&'" 36'4#" 36365&5" 54'#57 "'&767 3267&54654&#" 5654&5. 32632 #"&'. #"&5&#" #"&'" #"&54674'6 3274654&'> 54&'47 &54672 327654&5&#" 4&54675&+ '6&5> 67654'& 3267654&'7654& 7654#" 636&#" 654&547&# 36545& 32763 #"&'&6'. #"'654' #"&#" 54&5467 7654&'> 54674547&#" '&674'&"#" '4654' #"'4&5467 676&'#> 36'&#" 676&#" 6'&#" 7674'& 65&56& 32676327 #5&#" '6'&' 3654'> #"'&6/ "'654&'> 327&546? 365&'& 765&#" 74654'& 36545 36&5& 32632 3654&5463 327'3 54&5. &'&76&' &54'" 54'&#"' '"#"&'654&547&5. '4&547 7454'& 7654&#" &54654' "'4673 7674&#" 72'&#" 3674'" '6545&#" 76'4#" 3276= 7&#"R #4654'. '&654. '6&54674&5467. '523276&'& 32632 2676&547 #"&#" 32632 327&547> 7&54654'632 7&54654' #467# 32654& 726'. 32632 54&547. 5'4654&#"'&654'. 7&'47 327654'. 32632 54&5476 32654&547> 4&'&7327% 32632 5&5&#" #"'52676&' #"'654&546 32632 #"&#&'6&'&#"&'6; 32725&#"! 36'&#"'# #"&'6'632 265&#" #"'674'. 65654&#&'" 76'&' 654&5. 32675 7654&5432 23274&'> 3267&54654'> 6&'&#" '&'"3 54'&#" 326'&#" 32632 654&'&#" &654'&#" 654&547'> 3267&54654'65&5'> 54&'"' 3272> 54&'& 54654&# #&'47. '&'7263 32632 327654#" #"&#" 32632 323467 327654&'2632 3276&'7632 2654'&# 5467&#" 3274&#" 327&#" 3265& 54'&#" 676'& 7647&#" 654&' 54&#676= #"&#. #&654'2> 54&5472 76&5473 67&54654'6765&54654'" #"'654&'632 32632 &54674&' 4&'654&5474&54 4654& 36'&7 3276#" #"&#" #"&#" 327'7 32654/ #"&5&# #6&547. '4&'> 54'&+ 7&'472674& 674&'> 54'&6 674&#" 54'&#" '6327> "'&546'. 54656 3276&547 32'4#" 3647. '2676' 4&547. 36547&# 32676& '&#"' 76545&#" 4654. '2676' 4&547. 36547&# 32676& '&#"' 76545&#" 4654. S[7;;1B41BV1B"  `E@M@G3)1 PFv/7 ...10 #"&'654&547. '&6'. 72672632 S[7;;1B41BV1B"  `E@M@G3)1 PFv/7 ...10 #"&'654&547. '&6'. 72672632  !"#$%&'()*+,-./012345 6789:;<=>?@ABCDEFGHIJKLMNO LettrGoth12 BT' Letter Gothic 12 Pitch, Fixed Pitch 850 LetterGothic12PitchBT-Roman `OS/2 NPCLTN 6cmap ^cvt  8fpgma 6hhea $hmtx  name Eposth Cprep aRomanLetterGothic12PitchBT-RomanCopyright 1990-1993 Bitstream Inc.  All rights reserved.LettrGoth12 BTLetter Gothic 12 Pitch, Fixed Pitch 850Letter Gothic 12 Pitch BTmfgpctt-v1.54 Friday, February 5, 1993 3:09:14 pm (EST) ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ Y!-,  -,KPX  EDY!-, %E`D-,KSX %EDY!!-,ED- R=<SR==R =RS<=SR #737#73 90%6654&'' &&546753 UdTe?BTI 4Z*c8 QK`8A ]@332! -}4014*23 #"&54632 32654&#" 32654&#" #"&54632 305^026^ 206`235^ 8>$;. 8741';-* 3267&& 6654&#" &&54632 6654&'7 #"&546 JC`[@t7O %D=712;)9EB &Q,R1J Eaf?@d FIQWI3 ]#D!+oR >v7I|=,F t"B#PP #"&54632 #"&'566 CN]J^z 0%4632 \_ED`^FF^ E__EF^^ ~zzz~zz 99073 !&&546767654&#" #"&'7 32654&#" "#532654&#" xc?l8 wuE^N wwdyAH #"&'7 32654&#" 3hJv|ilDk4u@ vvE_M 90%2654&#" mpriirnr:zH ;d2L%H& 2654&#" #"&5467&&54632 32654& #"&'7 kowkfqpx8zL ;_/J)E! b\BB\[CDZ\BB\[CDZ B\\BCZZ B\\BC[Z #"&54632 #"&'566 CN]J^z [BB\[CCZ PB\\BCZZ 90%4632 #54677654&#" #4632 FQ<<UT==P .ss=RT;=SR oO[_M #"&54632 6,/<V  90%32654&##532654&## yx~yn 99991 N@( " 32654&5!5! #"&54673 99991 32654&## 32654&## 32654&'&'$54632 #"&js/ Uezi| ItA}FSn` sVa|fV dgVRLhLEyi #"&'&&5 HYn1cn]S5 >/m;Qp 4&5467 29903# '6632 #"&54632 6654&#" bog[YY BEq*6,1@<DS uefuyw {*&$#.v 32654&#" >f4mnoq*gB ##"'&'&&#" @r:<g5mnnm4f 4&54632 Hu7b+J%W[ e@5$#' #"&'7 32655 #"&54632 Ek8j9sv7vB >i6popo5i :huOTZ>: 99990!# ?-/@@/.> /@A..@? #"&54673 ?-/@@/.> /@A..@? T@-'! Jf:5I!4o6fY ?.,4/1 99903 e<U#]c 32654&#" 9990% 32654&#" @r:>f4mnnm5gZ ;h6mllm5h<9t@ #54&#" 32654'&'&&54632 JX?v9G[ 96HBqe ::q00G8ca #"&55 GH5c%Z, bbD?VW] d@P"\b #"&'7 32677 </4J#4 66554633 #"&554&' W6<JH>5X ##5665 467&&55 4&'532 X6<GI:7W 99990 56632 #"&#" REy4D 95xEFy7< ..V33 32654&#" DmMLnlNNlZ7''76((6R mNnpLOllO(98)'77 @F&I)$ 3:!/C@07! L43/%& =&=<L 32654&#" '6632 #"&54632 6654&#" \cEEcaGGaT/#$23#!1 bog[YY BEq*6,1@<DS EccEGaaG$01#!32 uefuyw {*&$#.v 32654&#" {kKJhdNOg |JhhJOef k@<"(% 0*)("! #7&&54 ##"'&'&&' #a%Cp, 9076654&'#53&&54632 #&&#" 32654&'3 #"&#" (U1TY KUo^1 p@AA;:4. 7:;A4 7U#1*U #"&'7 32654&''&&5467&&54632 '6654&'' T>@W9P XVM[>; U=BW;N :G;[s<E=W 96l=r kh/GIT<1O4k: B8n<q ih-DIL;3T3m: n>9W:J!i=<Y7 `^BB^^BC] C_`BB^] #"&5463! 54676632 #"&'7 32654&##56654&#" =e39+J"Za \c)WY rhssu 32654&## 4676632 #"&'&& 32654& 815356l IYW7O IHNMGE B@ /!".8+2 ;/!5". 99990 32654& 4676632 #"&'&& #"&54632 bLqvslWh +'78:?%) IHNMGE #"&%4632 Z=*);9+,; =)*;9,+; )=<*.;<-)=<*.;< #537!5!7 m@<+)& '7&&5 @Z\u"  99991 32676632 #"&54632 32654&#" %Y;ALT=3YZ+xNp hPv(+xOn oEhx$\;@KUA-_ \Wj[Tok [Wi[Unq 9075! 90%!5! !5!'#53d +*$!  #"&54765 99991 '6632 #"&54 6654&#" E45?u6 32763 #"&5467 #"&'7 =f,V"9 >g*V!< 3265754&#" '6632 #"&54632 X_UMIM [Q*N*3=r>X +9=@H MGFOSQ 32654&#" odappabq 0353& !4654&#" #"&54632 345654&#" '6632 }NFDCZ+a9 ZU`)[:/L HI(P(-;n6>e gjV_dc ,1{30@E@E ur(({)'. k@<+, 32654& m)H%t ?n8HXR2. Kp3GZ %)m;{R 99990 #"&54632 32653 #"&5467676 S<<TS==R &Mq?^TSe =ST<<SR P`Dgo>OY^N #"&54632 R=<SR==R <ST;=SR }$#"!  #"&'7 #7376632 #"&#" 56632 #"&#" 56632 D3xBGw4D 86vFJw5= D3xBJu3D ;0,V22 .,V25 )0,V32 /-V24 220%4632 #"&%4632 #"&%4632 ?..?@-,A >./>@-,@ ?..?@-,AV.==.-@A,.==.-@A,.==.-@A %!4654&#" 32654&#" LS_*]90O @Ki+.g: Ed(-h< KNIHNNHIN -0{50;B?> =+)?>*+= <*)?>*,: ,=?**>= *>?)*?< 9907' 32654&#" '7&&5467'7 3wCBv6 6vBDu 6wA@u6 6u@Aw6 &&54632 '&&#" 79suQ &&54632 :^*= @#RL jW?>XW?AU ?YY??VU |@DK?J93I?H E}LJ* #"&54632 32654&#" #"&54632 32654&#" 32654&#" #"&54632 305^026^ 3/6^235\ ;3/6^226\ #"&#" #"&'&&54632 32632 L}M#n ,W-DM v-Lw1FDR ++;<^ //68-nDMv #"&''&&#" #6632 32677 ?..?@-,A .>>.-@A 32654&#" XcEEcaGGaR3##11#$2 EbbEGaaG$22$#00 32654&#" (26<= gnxw4~ \RLXX 99991 #"&5467 fE<'3RTklNe;_1( MM;pQ '7&&'3 32654&#" =6N0]E R1X6V 99991 ##532654&## 32654&#" @r:>f4mnnm4eZ 54632 !&&546767654&#" -\R6AF= #"&'7 32654&#" #532654&#" 1d&h?CSTV ]_F=,Y) ID|]Dj% QPY=>NAKH x?<9B51 !4&546767654&#" glv_P~: RR15<< #"&'7 32654&#" '32654&#" f1~Qg .k"S58CEG LK;3%H#t8 <9hL9V XEiyBCH31?5=: q11.4)( !&&'3 #54&#" <x<Ic e.+Og 39u<;r9yy 5!5!53 @r:<g5mnnm4f jW?>XW?AU ?YY??VU  !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`a bcdefghijklmnopqrstuvwxyz{|}~  & 0 :  "+"H"e%  0 9  "+"H"`% sfthyphen periodcentered "3"T" ' 'V' )!)8)O) -+-8- ._.t. /0/Q/z/ 0+080c0 111>1K1 2$2]2 6+686E6 LettrGoth12 515R00 LettrGoth12 BT, Letter Gothic 12 Pitch Bold, Fixed Pitch 850 LetterGothic12PitchBT-Bold `OS/2 NPCLT 6cmap ^cvt l fpgma tXhead 6hhea $hmtx locaoGS  name ]posth Cprep {BoldLetterGothic12PitchBT-BoldCopyright 1990-1993 Bitstream Inc.  All rights reserved.LettrGoth12 BTLetter Gothic 12 Pitch Bold, Fixed Pitch 850Letter Gothic 12 Pitch Bold BTmfgpctt-v1.54 Friday, February 5, 1993 3:14:42 pm (EST) +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ Y!-,  -,KPX  pEDY!-, %E`D-,KSX %EDY!!-,ED- bHGccGIa +GccGHdc #737#73 x@>$!  90%6654&' '&&546753 %7:5<T/:4 =V2\{^ M@4_7 ]@33'2! 4014*23 #"&54632 32654&#" 32654&#" #"&54632 @G8>5, &&54632 6654&'7 #"&546 3267&& 6654&#" 96\R.d-F <97*-9$ 9J}9JS'$S 6i:2AD5$^ #"&54632 #"&''26 GRgUex 0%4632 FlNNlkOOk NllNNkk ZJKYZLL 9035! 9034&546766767654&#" #&&54632 vGNqh 32654&#" 2654&#" '6632 aEP\jm ipSD5[1 LMKqbzx e^I[7>kj{ #"&'7 32654&#" $M9TZPK4N& wydG: yty3= 2654&#" <s8j#= FHICEJH &&54632 #"&546%2654&#" 2654&#" P>IJ==LK>[pp[\oo bTSacQRd V|gh||hg| 32654& #"&54 #"&'7 FHKCDIHZ&eA >t5^)F FkOMmmMPjlNMmlNOk NklMMmj NlmMOll #"&54632 #"&''26 FkOMmmMPj GRgUex NklMMmj 546767654&#" #&'&54632 dHFdcGIc 1y^<KKD GccGHdc [@0*)- #"&54632 mZzsps 90%32654&##532654&## wRZdqNPWQLVV HD`RWc:L 99991 32655#5! R<`TViMH #"&5467 H>CF; RR\[QQ[\R 32654&## B\^[_B R\[QQ[\R 32654&## CA\`]_A 32654&''&&54632 GMeD; 7b2AP;5 MM`J8n) >9H;.[% 99990 sDOKB %*yFhz 2990!# hP2]- h@61$.( #"&54632 6654&#" '6632 "'&#" OK)Q,T? INK:>A SMH\[W 32654&#" o/L&TRRT'M- ##"'&'&&#" G2ipej<f- #-M'TRRT&LX31 !&&#" UIJYL36 $'z~%) 54632 $D#DF g@6$#' #"&'7 32655 =e?eX7rC .M'TRRT&L 3dmgf W?=XW>?W) =VV=?WW #"&5467 !9<;1 W?=XW>?Wu/NLSv ~=VV=?WW CZ-<S 8`3gS `oF5@?C< 0%2654&#" P\\PNZZN 32654&#" o/L&TRRT'M- -M'TRRT&L/9t@ '&&#" -W-a\ 32654&''&&54632 K8<1X Bj;p:3@5F^ 44,*"4-D@{Y #"&5467 %+#H. s1=TF d%D$LM %iESh #"&'7 32677 'Z5`Q zk',*>9L 66554633 #"&554&' m9FE:s|) ##526555467&&554&##532 p9FF9kr 56632 #"&#" 44O9; 32654&#" -nlNMmlNNl5 OlnMNll 32654&#" #"&54632 6654&#" '6632 "'&#" -nlLNmlOMk OK)Q,T? INK:>A MmlNNlk SMH\[W 32654&#" [AA[ZBCY |@ZZ@C[Z Y@3%" ##"&' #7&&54 A%/0G<g. @C93:6 &# 53&&54632 #&&#" 32654&5 #"&#" '6654'4'^ !!J1jpe >=HE; 6654&' 32654'&''&&5467&&54632 *(8?o*(8? @//?| ESRV=5 =/08)5 jLVS=9 $B"(H'D$B!)H' ?:6*OP C5jCu mt:=07-%;&|HzSW 46mB{ `^BB^^BC] C_`BB^] #"&5463! #"&'7 32654&##56654&#" V`OECD k]OY[[ 32654&## 32654& 4676632 #"&'&& `k)+u HGO,*G B]S;Q IIPNGE AlyMIG 99990 #"&54632 32654& 4676632 #"&'&& YE_hf[O\ HGO,*G )*Z^_W% IIPNGE AlyMIG #"&%4632 FD,-B?0.B D--A>01@ ,DB.2AC0,DB.2AA #537!5!7 t@?"  32654'& '7&&5 99991 32654&#" #"&54632 8#%-3# <#%-3% >w5f@z t@n+5g=z D;PA<OT+A>PA<OT !5!'#53 ^:V,2]- $(I[7N '6632 #"&54 6654&#" #"&5467 #"&'7 #"&54632 54&#" '6632 <A8/:= <@GC&H'L9 :75?KH 2654&#" "&54632 ESRFEQQE ll}|mn~ 990353& !5665 uGBW_`XBG #"&54632 36654&#" '6632 7&&#" jHL&W5@; GIp.-sE >E H'L1yDMwV BH>34. 257:89 PJ=HMU 32654& 7&&54 Dl1@nK84  bJrL #"&54632 326553 #"&54676655 bHFdcGIa1$, GccGHba 1y^<KJC #"&54632 bHGedHIa GcdFGca #7376632 #"&'7 @o-m * #"&#" 56632 #"&#" 56632 711P45 54P11 11P45 54P11 5sC9nL 220%4632 #"&%4632 #"&%4632 ;--;=++= ;--;=++= =-,:;++?L,<<,+>>+,<<,+>>+,<;-,=> 6/0"! 32654& 7&&#" 3-%$..$% Ch.0k@ iFM&V8@? uS89TS:;P R99TS:;P 9RS89TR :QS89RP 9907' 32654&#" '7&&5467'7 /i==i- 0h;<h1 /i;:m. /k;;i/ 54632 #4&#" &,[]7 #5354632 FlNNlkOOk NllNNjj v@AI?H! LJ6$HL K$II6 32654&#" 32654&#" #"&54632 #"&54632 32654&#" #"&54632 <@ )# #"&#" #"&'&&54632 32632 L}M#n ,W-DM v-Lw1FDR ++;<^ //68-nDMv #"&''&&#" #6632 #"&553 "&54632 .@>*-;3 <+%;<,-2 32654&#" -plLNnmONj MmmMNlk 32654&#" (26<= gnxw4~ \RLXX 99991 #"&5467 fE<'3RTklNe;_1( MM;pQ &#yss 33&&' '7&&'! 2654&#" P\\PNZZ !?#Rm?9W! 32654&## B\^[_B 32654&#" q-L&TRSS'M+ &&546767654&#" #&&54632 zJ,2H? 32654&#" 32654&#" '6632 J2;DPO DR<1(F#{# 00H=LN C8/8$&FBMqdEd 4&546767654&#" '6632 f>*832 hk}dBtD 32654&#" '32654&#" '6632 L-0:<? @A3-"? H++7-54 ++'-#"K<9gM9P% YFhxB 7&&'3 #4&#" 5f8XZ :l5-X+a[ 5#5353 #-M'TRRT&LX31 FlNNlkOOk NllNNjj  !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`a bcdefghijklmnopqrstuvwxyz{|}~  & 0 :  "+"H"e%  0 9  "+"H"`% sfthyphen periodcentered ")"c" $/$Y$ ("(F( *O*O*\*i*v* +W+o+ 0'040 1Z1o1 272X2 3)363C3n3 4<4I4V4 9,999F9S9`9m9z9 LettrGoth12 Bd 515B00 LettrGoth12 BT. Letter Gothic 12 Pitch Italic, Fixed Pitch 850 LetterGothic12PitchBT-Italic `OS/2 NPCLT 6cmap ^cvt  qdhead 6hhea $hmtx locae  name uposth Cprepx ItalicLetterGothic12PitchBT-ItalicCopyright 1990-1993 Bitstream Inc.  All rights reserved.LettrGoth12 BTLetter Gothic 12 Pitch Italic, Fixed Pitch 850Letter Gothic 12 Pitch Italic BTmfgpctt-v1.54 Friday, February 5, 1993 3:12:10 pm (EST) ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ Y!-,  -,KPX  EDY!-, %E`D-,KSX %EDY!!-,ED- #"&54632 lJ.EmB3G FjF1BlC #737#73 7&&'7 '&&546773 6654&' \Bsf-4 %\$W{%h"U1cWCD )Bj{<C [PN?D 1\(yC MET7< Y@132! W'X!W- V-U4014*23 #"&54632 32654&#" 32654&#" #"&54632 304_0.9_ 3/5a2/9^ }@C60 F'OAED7:*63 6654&#" #"&54 7&&54632 6654&'7 rl/)Dd :_%tiPED &Y4!  ?5d(> LBOE"QO \(D%h #"&54632 5BkTRZ ?1Wpf_ #"&54632 /wK;MyR4K KxK8MvM 76632 32676 54&#" <AMZNL 90373 990#6 54&#" '6632 32654&#" 32654&#" '6632 #"&'y%]I RII}:iC R^MSRal #"&'7 32654&#" SM;{D ssATP A@"-* #"&54676676632 32654&#" &&54$32 #"&546 #"&54676632 54&#" w$G&| !(_;Y #"&54632 #"&54632 qH7JrM1J qG7JrM0J +HpG6HpJ >HqH5IpJ #"&54632 #"&54632 6AmSRZ qH7JrM1J ?1Wpf_ ?HpG6HpJ 76676654&#" #54632 #"&54632 XTDUn mJ.DlB3H K`Qf}D@QeS FjF1BlC _@143=7 @# #F,O@43:2/ #"&5463 67654&#" #"&54 76632 AERgU 32654&## 32654&## 6654&#" #"&54 76632 @ERncV 0732676 54&## V@/'($ (P*$x F-,*)(' #"&54 76632 6654&#" 32677!7! AM]fZc 20373 99990 #"&54677 _4\(% 76632 32676 54&#" AESg\W 32654&## #"&54 76632 32676 54&#" AESg\W 32654&## 32654&''&&54632 #"&'{, *}*oJ` uBp=w? tgTYU 99990 #"&5467 -T(+S4 2990# 2a.Gl,)3NK,rN 56SWS Ygl6: 32676654&#" 3_1Dn)(4OK,pO 84TTN ^fk5< 54&#" #"&54 76632 PNEw5<OdbC FGEHP kvxHF_XZ eXZ*. C@%#  2a.Gl,)3NK,rN 56SWS Ygl6: 32654&#" #"&54 76632 )oh9L 34m8; #"&'7 #736632 8;\&$cj d@6/ # #"&'7 2u#b:p ?f(Hl+)5OH( STP;= 20KPL Q]e17 999903 6654&#" #"&54632 #"&5467 P3'3O2(4 $]1B9 2O3&1P2 &)E@aOR^R!S4 #"&54673 #"&54632 O2(4N3(4 2O3&1P2 #"&5467 $"![0C; )+IB^YSdV R@1.%" /.(%$#" 66553 6654&#" 6674&#" Uq.3F Nx0EV I![906363SC 99903 6654&#" `/[-adna 76632 32676654&#" \T>o0=P^RE \kvCBW 32676654&#" 5_1Dl))5OJ,rN 84TVS Xfk7:P? 2a.Gl,)3NK,rN 56SWS Ygl6: 6654&'3 '6654&#" '&P(= ^<t9~wf] 32654&''&&54632 #"&'o9 F[q08 5m0j=Oi0S}ED 8;`J0F P+lF LCb86XA+=0J(lG #"&546 9-3l<F; *5IKXQce[ #5467 #"&5467 !H.acna #"&557 bUe{,07c\ 66554633 #"&554&' W6<JI=5X ##5665 467&&55 4&#532 W6=HI<6W 99990 56632 #"&#" REy4D 95xEFy7< ..V33 32654&#" lNMmlNNl\6((89''7 hOlnMNnnN'78&'88 32654&#" 2a.Gl,)3NK,rN 0$$24"#1TbFFbaGGa 56SWS Ygl6: o$01#"43#EabDGaa 32654&#" {kKKheNNh |JhgKNff m@=%." "j.-'&% 7&&54 ##54&' 5xFgfl0^6# FN_WY 4(.+,"(% 7#7376632 #4654&#" 326553 #"&#" /!29< 6654&' 32654&''&&5467&&54632 54&#" XbV`]bE yQBEc'' 78zv(" xPBFd&( 3;~v+% M7mA-xD7` ANcC%F {,o@a BObF(E {*u>b `^BB^^BC] C_`BB^] #"&5467663! #"&'7 32654&'76654&#" ;b(F$A g 32654&## 4676632 #"&'&& 32654& 815356l IYW7O IHNMGE B@ /!".8+2 ;/!5". 99990 32654& 4676632 #"&'&& #"&54632 bLqvslWh +'78:?%) IHNMGE #"&%4632 =**:9++< ;**:9++: *><*.;<++=<*.;; #537!5!7 7&&54 76632 99991 32676632 #"&54632 32654&#" %Y;ALT=3YZ+xNp hPv(+xOn oEhx$\;@KUA-_ \Wj[Tok [Wi[Unq 9075! 90%!5! '!7!'#73 +*$!  #"&54765 99991 '6632 #"&54 6654&#" E45?u6 32763 #"&5467 #"&'7 =f,V"9 >g*V!< #"&54 >u8oy @gcZ+M(9\)'/F=#i )'CGC 32654& 0353& E3$- 69 ?Z-* Z#' #"&546336654&#" '6632 32654&#" NM+tG!F 8}E\f 34"W5 Dq6De 1S#_^1/n47GBEDpe 64&'x*&A:;: 90'7&&54 76632 32676654& bAn,]Kj aCt1V K0=m1;P aX^''i@z3l; ^Y`,,b &(DEU R@*%$' F)$%!(' 32673 #"&54677677 jK/EkC3H VSCTm GgD1CkC LdNhzBBPcU iK/FkC4G GgD1CkC #7376632 #"'&37 t;]+T #"&#" 56632 #"&#" 56632 D3xBGw4D 86vFJw5= D3xBJu3D ;0,V22 .,V25 )0,V32 /-V24 #"&54632 #"&54632 #"&54632 JS6$5S7#5 S6$5S7#5 Q6$5S7#3m4P4%4Q6$4P4%4Q6$4P4%3R5 76632 Cy4I[UQ $!Z7Z( #"&54 76632 32654&#" 2676654&#" 4t9avbJ5yIId MN+tG E n/I*+34*/Q$*22f@E TpQMFCCF _^1/n47D LKYehx =+)?>*+= <*)?>*,: ,=?**>= *>?)*?< 9907' 32654&#" '7&&5467'7 3wCBv6 6vBDu 6wA@u6 6u@Aw6 %('&% #"&'7 #736632 #54&#" 9:\'%an ,4olX #&$#"!  #"&'7 #736632 Ai%L!9 8;\&$cj #"&54632 lE5HlE6G EkC3EkC v@AK?J93I?H 3W?X9WE- VLHLIJ*K #"&54632 32654&#" #"&54632 32654&#" 32654&#" #"&54632 404_1/9^ 3/5a2/9^ ;304_0.9_ #"&#" #"&'&&54632 32632 L}M#n ,W-DM v-Lw1FDR ++;<^ //68-nDMv #"&5467 $]1B9 &)E@aOR^R!S4 #"&#" #6632 32673 #"&5467 (%04`iTR !=++<<+*> ,<<,*=> 32654&#" 31##34"#1TbFEcaGFb %34$!31%FabEGaa 32654&#73 #"&=#Gg'9<Ks?J! kd}p3 \LRS_ #"&5467 wG<'5` ElkQ_=^0( MM<uK #"&5467 $"![0C; )+IB^YSdV 20732676 54&## '7&&'3 #"&54 76632 32676654& =6N7h3-P&X6V 32654&##! 32676654&#" 5_1Dl))5OJ,rNZ 84TVS Xfk7: !&&546767654&#" #54632 -\Q5BH; #"&'7 32654&#" #532654&#" '6632 1d&h?DRUW ]_F=+[(T6 QPY=>NAJI x?<9B51ZHE|]Dj !4&546767654&#" '6632 RR06=; glw`P|: @Y1,+ =-97/( .94920A7 #"&'7 32654&#" '32654&#" '6632 .k"S57DEG LK;3%H#X0~Rg XEiyBCH31@4=: q11.4)(I;:hL8X !&&'3 #54&#" <x<Ic e.+Og 39u<;r9yy ^@6'$ 2a.Gl,)3NK,rN 56SWS Ygl6: #"&54632 lE5HlE6G EkC3EkC  !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`a bcdefghijklmnopqrstuvwxyz{|}~  & 0 :  "+"H"e%  0 9  "+"H"`% sfthyphen periodcentered  / J  "'"V" %#%r& 'A']' )5)5)B)O)\) *a*|* +#+c+ ,P,n, / /-/:/G/T/ 040R0 1%1_1 2`2m2z2 4:4Q4 6t7&7 LettrGoth12 It 515I00 Times New Roman Symbol Arial System Hartin2 LettrGoth12 BT Wingdings Courier New I\\kgb2\blue\shared\blue ribbon templates\Blue Ribbon Generic Document.dot Blue Ribbon Spec Document
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\danim\tools\x86\icecap\faq.doc ===
Microsoft Word Document MSWordDoc Word.Document.6Internal Development Tools IceCAP Frequently Asked QuestionsIceCAP Frequently Asked Questions Normal.dot G. S. Rana Microsoft Word for Windows 95IceCAP Frequently Asked Questions Last updated:   SAVEDATE \@ "d MMMM, yyyy" \* MERGEFORMAT  24 May, 1996 When REPORT.EXE is run, it displays: ReadRecords unknown record type 0; skipping remaining records. This generally means that ICAP.DLL was unable to close the .MEA file properly at the end of the profile run. The resulting report should still be correct -- all that has happened is that REPORT has skipped the part of the .MEA file that did not contain real records. This can happen if you terminate your application externally, or if your application calls TerminateProcess or TerminateThread to exit. ICAP.DLL closes (and truncates) the .MEA file when it receives a DLL_PROCESS_DETACH notification. A telltale sign that this has occurred is if your .MEA file is exactly 33,554,432 bytes long (32M), since ICAP.DLL creates a memory mapped file of that size and truncates it at the end of the profile run. A separate utility TruncMEA can be used to truncate the unused records and fix this problem. Please see TruncMEA.DOC on the IceCAP share for more information on this utility. Can IceCAP read PDBs created with VC 4.1? Yes. Please note that IceCAP 3.1 no longer requires MSPDB4x.DLL.  Instead it requires IMAGEHLP.DLL v 1242 or higher.  IMAGEHLP.DLL understands both version 4.1 and 4.0 PDB files. When REPORT.EXE is run, it displays: WARNING: Context switch during time delta calculation  substituting 0 for delta. What does this warning mean? What is happening here is that a context switch occurred while the portion of the code (in VCYCLE.VxD), where thread times are calculated, was being executed. It is easy to identify the functions where such context switch occurred, the times reported for such functions are reported as 0. The amount of code where such conflict occurs is minimal and number of functions that are impacted should be low.  IceCAP 3.1 includes a fix for this problem. When I profile my application on NT 4.0, the number of page faults is sometimes higher than when the application is profiled on NT 3.51. Does IceCAP report more page fault information for NT 4.0 than NT 3.51? With NT 4.0, kernel faults in the context of the process are reported as working set changes along with the user-mode changes. These pages were probably being faulted on NT 3.51 as well, but not reported. It is simply a case of NT 4.0 providing more information than NT 3.51. Reporting of system calls can be suppressed by using the -NOSYSTEM option. What is the difference between Total time and Attributed time? The sum of time that is attributed to functions listed in the body of the report is known as Total attributed time. The time that is used to calculate % calculations is called Total time. Total time and Total attributed time are rarely equal. It is best to explain this difference by using the following scenario.  Assuming profile=0 in ICAP.INI, and application consists of the following code: main()    preA();    preB();    StartCAP();    .. other code    A();    B();    ... other code    C();    .. other code    StopCAP();    postA();    postB(); The body of the report will list functions A, B, and C (but not main). The time spent in A, B, and C is the total attributed time. The time spent from StartCAP() to StopCAP() is the total time. Just like total time is not same as total attributed time, total pages are not same as total attributed pages.  The total time and total code and data pages used to calculate the %s in the body of the report, and include all time and all page faults between the StartCAP and StopCAP calls.  Everything before or after these calls is neither counted towards total time or total pages nor reported. The trace output will include all time and all page faults between the StartCAP and StopCAP calls. The body of the report includes only the attributed time and page faults. The trace will not include anything before the StartCAP call or after the StopCAP call. The un-attributed time and page faults at the beginning are listed in the trace output under the first trace point, i.e. call to first profiled function (A() in this example). The un-attributed time and page faults in the middle of profile run (other code between B() and C(), for example) are reported at the first next trace point (entry to C() in this case). The un-attributed time and page faults at the end of the profile (other code after return from C() and before StopCAP in the example) are listed at the trace point for entry to StopCAP(). If profiling is always ON (profile=1) and IceCAP APIs were not used then all page faults before the first profile event (un-attributed page faults in the beginning) are reported at the first trace point (call to first function). The un-attributed page faults at the end of the application (page faults after return from last profiled function) are not reported. When I run REPORT.EXE with -SORTBY:EXCLCODE switch, the REPORT.EXE GPFs. There is a known bug in IceCAP 3.0 and 3.1 where using memory related switches (-INCLCODE, EXCLCODE, INCLDATA, etc.,) on a MEA file which does not have memory profiling data, can cause REPORT.EXE to crash. 25June1996 Normal Heading 1 Heading 3 Heading 4 Default Paragraph Font Question .#\\Gsrana1\c$\icap\docs\user\faq.doc .#\\GSRANA1\C$\icap\docs\user\faq.doc .#\\GSRANA1\C$\icap\docs\user\faq.doc G. S. Rana C:\icap\docs\user\faq2.doc G. S. Rana C:\icap\docs\user\faq.doc G. S. Rana C:\icap\docs\user\faq.doc G. S. Rana C:\icap\docs\user\faq.doc G. S. Rana C:\icap\docs\user\faq.doc G. S. Rana C:\icap\docs\user\faq.doc G. S. Rana C:\icap\docs\user\faq.doc @\\GSRANA\HP5L Ne00: winspool HP LaserJet 4L \\GSRANA\HP5L etter \\GSRANA\HP5L etter Times New Roman Symbol Arial Courier New !IceCAP Frequently Asked Questions G. S. Rana
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\danim\tools\x86\glu\readme.txt ===
To build libtess.lib:
1) Run expand from %AP_ROOT%\tools\x86\glu
1) tree copy the entire src directory to %AP_ROOT%\src\appel\libtess.
   (tc src %AP_ROOT%\src\appel\libtess)
2) nmake fresh from %AP_ROOT%\src\appel\libtess directory
3) libtess.lib will be built in %AP_ROOT%\build\win\debug(ship)\libtess.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\danim\tools\x86\icecap\_faq.doc ===
Microsoft Word Document MSWordDoc Word.Document.6Internal Development Tools IceCAP Frequently Asked QuestionsIceCAP Frequently Asked Questions Normal.dot G. S. Rana Microsoft Word for Windows 95IceCAP Frequently Asked Questions Last updated:   SAVEDATE \@ "d MMMM, yyyy" \* MERGEFORMAT  24 May, 1996 When REPORT.EXE is run, it displays: ReadRecords unknown record type 0; skipping remaining records. This generally means that ICAP.DLL was unable to close the .MEA file properly at the end of the profile run. The resulting report should still be correct -- all that has happened is that REPORT has skipped the part of the .MEA file that did not contain real records. This can happen if you terminate your application externally, or if your application calls TerminateProcess or TerminateThread to exit. ICAP.DLL closes (and truncates) the .MEA file when it receives a DLL_PROCESS_DETACH notification. A telltale sign that this has occurred is if your .MEA file is exactly 33,554,432 bytes long (32M), since ICAP.DLL creates a memory mapped file of that size and truncates it at the end of the profile run. A separate utility TruncMEA can be used to truncate the unused records and fix this problem. Please see TruncMEA.DOC on the IceCAP share for more information on this utility. Can IceCAP read PDBs created with VC 4.1? Yes. Please note that IceCAP 3.1 no longer requires MSPDB4x.DLL.  Instead it requires IMAGEHLP.DLL v 1242 or higher.  IMAGEHLP.DLL understands both version 4.1 and 4.0 PDB files. When REPORT.EXE is run, it displays: WARNING: Context switch during time delta calculation  substituting 0 for delta. What does this warning mean? What is happening here is that a context switch occurred while the portion of the code (in VCYCLE.VxD), where thread times are calculated, was being executed. It is easy to identify the functions where such context switch occurred, the times reported for such functions are reported as 0. The amount of code where such conflict occurs is minimal and number of functions that are impacted should be low.  IceCAP 3.1 includes a fix for this problem. When I profile my application on NT 4.0, the number of page faults is sometimes higher than when the application is profiled on NT 3.51. Does IceCAP report more page fault information for NT 4.0 than NT 3.51? With NT 4.0, kernel faults in the context of the process are reported as working set changes along with the user-mode changes. These pages were probably being faulted on NT 3.51 as well, but not reported. It is simply a case of NT 4.0 providing more information than NT 3.51. Reporting of system calls can be suppressed by using the -NOSYSTEM option. What is the difference between Total time and Attributed time? The sum of time that is attributed to functions listed in the body of the report is known as Total attributed time. The time that is used to calculate % calculations is called Total time. Total time and Total attributed time are rarely equal. It is best to explain this difference by using the following scenario.  Assuming profile=0 in ICAP.INI, and application consists of the following code: main()    preA();    preB();    StartCAP();    .. other code    A();    B();    ... other code    C();    .. other code    StopCAP();    postA();    postB(); The body of the report will list functions A, B, and C (but not main). The time spent in A, B, and C is the total attributed time. The time spent from StartCAP() to StopCAP() is the total time. Just like total time is not same as total attributed time, total pages are not same as total attributed pages.  The total time and total code and data pages used to calculate the %s in the body of the report, and include all time and all page faults between the StartCAP and StopCAP calls.  Everything before or after these calls is neither counted towards total time or total pages nor reported. The trace output will include all time and all page faults between the StartCAP and StopCAP calls. The body of the report includes only the attributed time and page faults. The trace will not include anything before the StartCAP call or after the StopCAP call. The un-attributed time and page faults at the beginning are listed in the trace output under the first trace point, i.e. call to first profiled function (A() in this example). The un-attributed time and page faults in the middle of profile run (other code between B() and C(), for example) are reported at the first next trace point (entry to C() in this case). The un-attributed time and page faults at the end of the profile (other code after return from C() and before StopCAP in the example) are listed at the trace point for entry to StopCAP(). If profiling is always ON (profile=1) and IceCAP APIs were not used then all page faults before the first profile event (un-attributed page faults in the beginning) are reported at the first trace point (call to first function). The un-attributed page faults at the end of the application (page faults after return from last profiled function) are not reported. When I run REPORT.EXE with -SORTBY:EXCLCODE switch, the REPORT.EXE GPFs. There is a known bug in IceCAP 3.0 and 3.1 where using memory related switches (-INCLCODE, EXCLCODE, INCLDATA, etc.,) on a MEA file which does not have memory profiling data, can cause REPORT.EXE to crash. 25June1996is is result of a. This crash is result of scontain . The memory profiling is off by default. Normal Heading 1 Heading 2 Heading 3 Heading 4 Default Paragraph Font Question List 2 Body Text Normal Heading 1 Heading 2 Heading 3 Heading 4 Default Paragraph Font Question List 2 Body Text .#\\GSRANA1\C$\icap\docs\user\faq.doc .#\\GSRANA1\C$\icap\docs\user\faq.doc G. S. Rana C:\icap\docs\user\faq2.doc G. S. Rana C:\icap\docs\user\faq.doc G. S. Rana C:\icap\docs\user\faq.doc G. S. Rana C:\icap\docs\user\faq.doc G. S. Rana C:\icap\docs\user\faq.doc G. S. Rana C:\icap\docs\user\faq.doc G. S. Rana C:\icap\docs\user\faq.doc G. S. Rana C:\icap\docs\user\faq.doc @\\GSRANA\HP5L Ne00: winspool HP LaserJet 4L \\GSRANA\HP5L etter \\GSRANA\HP5L etter Times New Roman Symbol Arial Courier New !IceCAP Frequently Asked Questions G. S. Rana
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\danim\tools\x86\icecap\readme.doc ===
Microsoft Word Document MSWordDoc Word.Document.6Internal Development Tools M ConfidentialM Confidential G. S. Rana Normal.dot G. S. Rana Microsoft Word for Windows 95M Confidential IceCAP 3.1, Release notes May 14, 1996 For questions about this document, please contact GSRana. What is IceCAP? IceCAP is a call-attributed execution and memory profiler. It is designed to profile Win32 applications running on Windows NT or Windows 95. IceCAP can be used to answer the question: "What time and memory resources did an application use as it went from point A to B?" IceCAP and IceCAP technology is currently Microsoft Confidential and is for internal use at Microsoft. Please do not discuss it outside of Microsoft. For detailed discussion on using IceCAP please read ICECAP31.DOC on IceCAP 3.1 share (\\toolsvr\tools\toolbox\icecap\). Requirements NT 3.5x, 4.0 or Win95 running on 486, Pentium, or Pentium Pro machines with 40 Mb free hard disk space. s new in IceCAP 3.1? Improved Win95 thread time support  - fewer  context switch during delta calculation  warnings. Make sure you pick up the new VCYCLE.VXD! Support for BBT (previously known as Lego) binaries (as long as they don t use PDB symbol files; this will be fixed soon). Make sure you pick up the new IMAGEHLP.DLL! In-process memory profiling! You no longer have to use ICECAP.EXE to profile your application for memory. ICECAP.EXE runs an application as a debugging process, which can slow down the execution times. To use this feature, do the following: Set Pages=All or Pages=New in the ICAP.INI file. Run your application as you normally would for execution profiling, i.e., without using ICECAP.EXE. Trace output now also includes: Pagelists (memory information) for every profiled event. Delta pages for every profiled event. Inclusive/Exclusive stats for both time and memory at every call return. A new option NOATTRIBTRACE has been added to suppress this output, if so desired. Pagelist output now shows data pages separated into STACK and DATA. For this feature to take effect, the MEA file must have been generated with IceCAP 3.1 ICAP.DLL. New APIs: StartCAPAll, StopCAPAll, SuspendCAPAll, ResumeCAPAll, These APIs can be used to start or suspend profiling for the whole process, i.e. all threads. (StartCAP/ StopCAP/ SuspendCAP/ ResumeCAP APIs are thread specific.) IceCAP 3.0 s SetJmp handling was inefficient. We have redesigned IceCAP s SetJmp handling to address this issue. ICAP.INI NOIMPORT option for disabling import patching of specific functions and modules. A new option NOFUNCLIST can be used to suppress the caller/called function list part of the report. IceCAP APIs (StartCAP, SuspendCAP, etc.,) now return start/suspend counts. This information can be used to detect unbalanced API (StopCAP/SuspendCAP, etc.,) calls. Support for NT 4.0 fibers.  All ICAP.INI options are now reported in the report header. -suppress:icap is no longer implicitly set when report run on memory profiles. ICAP.DLL now looks for ICAP.INI file in the current directory first. Fixes a problem where ICAP.DLL could fault after calling _chkstck or _alloca_probe. Known issues: Report.exe is not able to resolve symbol names for binaries whose debug information is in a .PDB file AND which have been run through the Basic Block Tools (BBT).  If the debug information was not put in a .PDB file or if the binary was not run through BBT, then Report.exe will resolve the symbol names correctly. Installation IceCAP 3.1 is available on \\toolsvr\tools\toolbox\icecap. To install IceCAP 3.1 on your machine: Copy X86\PENTER.LIB, X86\ICAP.LIB to your library directory. Copy ICAPEXP.H to your include directory (also copy PROLOGUE.INC if you use it). Copy X86\REPORT.EXE, X86\ICAPCTRL.EXE, X86\ICECAP.EXE, and X86\ICAP.DLL to a directory on your path. For Windows NT, also copy: PSAPI.DLL (from NT SDK or X86\NT directory) to a directory on your path. For Win95, also copy: X86\WIN95\VCYCLE.VXD to [windows path]\SYSTEM directory. X86\WIN95\VMM.VXD to [windows path]\SYSTEM\VMM32 directory. X86\WIN95\MEMMON.VXD to [windows path]\SYSTEM directory. X86\WIN95\PSAPI.DLL to a directory on your path. PSAPI.DLL for Win95 is different than, and a subset of the PSAPI.DLL that comes with NT SDK.  Make sure you copy the correct PSAPI.DLL from IceCAP share. Additional steps necessary on Windows 95: In [windows path]\SYSTEM.INI add the following entry to the [386Enh] section: device=[windows path]\system\memmon.vxd Restart the system (This is an important step!) Notes REPORT.EXE requires MSPDB41.DLL, MFC40.DLL, MSVCRT.DLL, and MSVCRT40.DLL. You will find copies of these in the X86\VC4 sub-directory if you don't already have them on your machine. REPORT.EXE requires IMAGEHLP.DLL. You will find an updated copy of this in the X86\NT and X86\WIN95 sub-directories. Please use this one if it is dated later than any IMAGEHLP.DLL you have. Though REPORT.EXE can be run against MEA files generated by earlier version ICAP.DLL, it is a good idea to regenerate your MEA files with ICAP.DLL included with this drop. Other documentation ICECAP31.DOC - IceCAP 3.1 users guide. TRUNCMEA.DOC   TruncMEA utility users guide. FAQ.DOC   Compile of frequently asked question about IceCAP. Aliases For general support questions, use ICAPSUP alias.  Send bugs and suggestion to ICAPBUG alias. Please include the usual fun details like operating system & version, processor type, ICAP.INI file (if any), steps to reproduce. Thanks Team IceCAP http://pdrserve/icecap/ Where did you spend your time today? Normal Heading 2 Default Paragraph Font Alexander G. Tilles \\gsrana1\mcplus\readme.doc G. S. Rana C:\mcplus\readme.doc G. S. Rana0\\toolsvr\tools\ToolBox\IceCap\mcplus\readme.doc .0\\TOOLSVR\TOOLS\ToolBox\IceCap\mcplus\ReadMe.doc .6\\TOOLSVR\TOOLS\ToolBox\IceCap\IceCAP31.rc1\ReadMe.doc .6\\TOOLSVR\TOOLS\ToolBox\IceCap\IceCAP31.rc1\ReadMe.doc G. S. Rana \\gsrana\bingo$\gsr\readme.doc G. S. Rana \\gsrana\bingo$\GSR\readme.doc C:\GSR\readme.doc G. S. Rana C:\icap\docs\user\readme.doc @\\GSRANA\HP5L Ne00: winspool HP LaserJet 4L \\GSRANA\HP5L etter \\GSRANA\HP5L etter Times New Roman Symbol Arial Microsoft Logo Courier New M Confidential G. S. Rana G. S. Rana
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\danim\tools\x86\icecap\sample\icap.ini ===
[settings]
; settings in this section apply to all apps, unless over-ridden in the individual
; sections below.

; Use the following to have profiling initially off
; profile = 0

; Use the following (or nothing) to have profiling initially on
; profile = 1

; Use the following to disable profiling
; profile = never

; Use the following to specify a different name for the .mea file
; output = other.mea

; Use the following to turn off import function patching (default is on)
; imports = 0

; MaxMeaSize setting specfies the maximum size allowed for the 
; .MEA file to be created.  Value is in megabytes.  Default is 32
MaxMeaSize=50

; CycleSpeed specifies clock cycle speed (in Mhz)
CycleSpeed=90

[word96]
;for Word96, only detect new pages touched.  Output file is 
; word96t.mea, and has a max size of 100 MB
Pages=new
output=word96t.mea
MaxMeaSize=100

[excel96]
; for excel96, profiling is initially on.  Report all pages touched (default).  
; Output file has a max size of 50 MB (from [settings] section).  Don't patch imports.
profile=1
Pages=All
imports=0
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\danim\tools\x86\icecap\truncmea.doc ===
Microsoft Word Document MSWordDoc Word.Document.6Internal Development Tools TruncMEA SpecificationTruncMEA Specification G. S. Rana Normal.dot G. S. Rana Microsoft Word for Windows 95TruncMEA If you have questions about this document, please e-mail ICAPSUP. What is TruncMEA? TruncMEA is a utility developed by IceCAP support team to truncate unused records from IceCAP MEA files. Background ICAP.DLL can sometimes fail to close the .MEA file properly. This leaves a large (usually 32M) file on the user s machine. If REPORT.EXE is run on such file, user gets a warning message: ReadRecords unknown record type 0; skipping remaining records.   This can happen if an application is terminated externally, or if application calls TerminateProcess or TerminateThread to exit. ICAP.DLL closes (and truncates) the .MEA file only when it receives a DLL_PROCESS_DETACH notification. A telltale sign that this has occurred is if the MEA file is exactly 33,554,432 bytes long (or MaxMeaSize setting in ICAP.INI), since ICAP.DLL creates a memory mapped file of that size at the beginning. Although the reports generated from such MEA files are generally correct, the resulting reports display the  Total number of pages  and  Total time  values as 0. Thus %age calculations are also reported as 0.  TruncMEA provides a work-around to this problem by truncating unused records from end of an IceCAP MEA file and thereby providing following benefits: The ReadRecords warning message is eliminated. The percentage for time and pages are reported correctly. Unnecessary disk space is freed. Using TruncMEA TruncMEA is a Win32 command line application running on both Windows 95 and NT. This application will take a MEA file as input and truncate the unused records at the end. The format for using this program is: TRUNCMEA [PATH]FileName[Extension] Where:  Parameters in [] are optional. Path, if not specified is assumed to be the current directory. Filename must be specified. Extension, if not specified, is assumed to be .MEA. TruncMEA will scan for unused records at the end of MEA file and truncate the unused records from the file. If the file is already truncated or has no unused records, TruncMEA leaves the MEA file unchanged. A good way to use TruncMEA is to place it in a CMD or BAT file to run it just before REPORT.EXE. After truncating the MEA file, TrunMEA reports a status consisting of following information:  MEA file name, size of original file, size of file after truncation, and amount of disk space freed. Last updated   DATE  02/19/96 m Confidential Totvalue is reported as 0percentagefor pages  02/20/96 the following  ning on both Windows 95 and NT.MEA  02/20/96 Normal Heading 1 Heading 2 Heading 3 Default Paragraph Font Header Footer Normal Heading 1 Heading 2 Heading 3 Default Paragraph Font Header Footer Unknown Alexander G. Tilles G. S. Rana tech setup $G. S. Rana Alexander G. Tilles $Alexander G. Tilles tech setup $Alexander G. Tilles G. S. Rana $Alexander G. Tilles tech setup tech setup Maureen O'Hara tech setup Maureen O'Hara Maureen O'Hara $Alexander G. Tilles tech setup tech setup Maureen O'Hara (Alexander G. Tilles Maureen O'Hara (Alexander G. Tilles Maureen O'Hara (Alexander G. Tilles Maureen O'Hara (Alexander G. Tilles Maureen O'Hara (Alexander G. Tilles Maureen O'Hara (Alexander G. Tilles Maureen O'Hara (Alexander G. Tilles Maureen O'Hara (Alexander G. Tilles Maureen O'Hara $Alexander G. Tilles tech setup (Alexander G. Tilles Maureen O'Hara (Alexander G. Tilles Maureen O'Hara (Alexander G. Tilles Maureen O'Hara $Alexander G. Tilles tech setup (Alexander G. Tilles Maureen O'Hara $Alexander G. Tilles tech setup $Alexander G. Tilles tech setup $Alexander G. Tilles tech setup (Alexander G. Tilles Maureen O'Hara $Alexander G. Tilles tech setup (Alexander G. Tilles Maureen O'Hara (Alexander G. Tilles Maureen O'Hara $Alexander G. Tilles tech setup (Alexander G. Tilles Maureen O'Hara (Alexander G. Tilles Maureen O'Hara tech setup Maureen O'Hara tech setup Maureen O'Hara $Alexander G. Tilles tech setup (Alexander G. Tilles Maureen O'Hara (Alexander G. Tilles Maureen O'Hara $Alexander G. Tilles tech setup tech setup Maureen O'Hara (Alexander G. Tilles Maureen O'Hara tech setup Maureen O'Hara (Alexander G. Tilles Maureen O'Hara (Alexander G. Tilles Maureen O'Hara (Alexander G. Tilles Maureen O'Hara (Alexander G. Tilles Maureen O'Hara $Alexander G. Tilles tech setup tech setup Maureen O'Hara (Alexander G. Tilles Maureen O'Hara $Alexander G. Tilles tech setup (Alexander G. Tilles Maureen O'Hara $Alexander G. Tilles tech setup (Alexander G. Tilles Maureen O'Hara (Alexander G. Tilles Maureen O'Hara $Alexander G. Tilles tech setup $Alexander G. Tilles tech setup $Alexander G. Tilles tech setup $Alexander G. Tilles tech setup $Alexander G. Tilles tech setup $Alexander G. Tilles tech setup $Alexander G. Tilles tech setup (Alexander G. Tilles Maureen O'Hara $Alexander G. Tilles tech setup (Alexander G. Tilles Maureen O'Hara (Alexander G. Tilles Maureen O'Hara $Alexander G. Tilles tech setup tech setup Maureen O'Hara (Alexander G. Tilles Maureen O'Hara (Alexander G. Tilles Maureen O'Hara $Alexander G. Tilles tech setup $Alexander G. Tilles tech setup $Alexander G. Tilles tech setup $Alexander G. Tilles tech setup $Alexander G. Tilles tech setup $Alexander G. Tilles tech setup $Alexander G. Tilles tech setup (Alexander G. Tilles Maureen O'Hara tech setup Maureen O'Hara tech setup Maureen O'Hara tech setup Maureen O'Hara (Alexander G. Tilles Maureen O'Hara (Alexander G. Tilles Maureen O'Hara $Alexander G. Tilles tech setup tech setup Maureen O'Hara Maureen O'Hara tech setup Lee GibbonZ Michael Sheridan[ Mary E S Tjarnberg\ #Mary E S Tjarnberg Lee Gibbon Diana Andonian Ackerley^ A Valued Microsoft Customer_ 9Diana Andonian Ackerley A Valued Microsoft Customer Susan Voellera Kemewb #Diana Andonian Ackerley Kemew #Diana Andonian Ackerley Kemew #Diana Andonian Ackerley Kemew #Diana Andonian Ackerley Kemew #Diana Andonian Ackerley Kemew #Diana Andonian Ackerley Kemew Susan Voeller Susan Voeller +Diana Andonian Ackerley Susan Voeller Diana Andonian Ackerley Susan Voeller Susan Voeller Susan Voeller Susan Voeller Diana Andonian Ackerley Diana Andonian Ackerley Gale Chocks Lisayt A Valued Microsoft Customer Anna Mackinnonv Jason Goldingw Jason Golding Jason Golding Jason Golding Jason Golding Jason Golding Jason Golding Jason Golding Hillarie Flood Diane Tibbott evaco TRIO Apsetup Technical Support Group leigh Anna Mackinnon "Anna Mackinnon Jason Golding Jason Golding evaco Jason Golding evaco Jason Golding evaco Jason Golding evaco Jason Golding evaco Jason Golding evaco Jason Golding evaco Janet Angell. Tracy Rooney. Tracy Rooney. Tracy Rooney. Tracy Rooney. Tracy Rooney. Tracy Rooney. Tracy Rooney. Tracy Rooney. Tracy Rooney. Tracy Rooney. Tracy Rooney. Tracy Rooney. Tracy Rooney. David Trowbridge Paul Shustak  Paul Shustak Janet Angell. Alfonso R. Luna Mauricio Gonzalez de la Fuente Word Development Lat Am HQ .Lat Am HQ Mauricio Gonzalez de la Fuente Andreasc Robert J. Bach Robert J. Bach Matt Mizerak Brendan May betsyd Jay Gibson Heidi Winterkorn Julie Chaloupka Julie Chaloupka Julie Chaloupka Shelby Barnes marianne allison monicah marianne allison monicah marianne allison monicah marianne allison monicah marianne allison monicah marianne allison monicah marianne allison monicah $Shelby Barnes marianne allison marianne allison monicah $Shelby Barnes marianne allison $Shelby Barnes marianne allison marianne allison monicah marianne allison monicah $Shelby Barnes marianne allison marianne allison monicah marianne allison monicah $Shelby Barnes marianne allison marianne allison monicah donnatr ,Heidi Winterkorn Ann Fenner Ann Fenner !Heidi Winterkorn Ann Fenner !Heidi Winterkorn Ann Fenner !Heidi Winterkorn Ann Fenner Heidi Winterkorn Heidi Winterkorn !Heidi Winterkorn Ann Fenner Ann Fenner Heidi Winterkorn Ann Fenner Heidi Winterkorn !Heidi Winterkorn Ann Fenner Ann Fenner !Heidi Winterkorn Ann Fenner Ann Fenner Heidi Winterkorn Heidi Winterkorn Heidi Winterkorn Ann Fenner Ann Fenner Ann Fenner Ann Fenner Ann Fenner Ann Fenner Ann Fenner Ann Fenner !Heidi Winterkorn Ann Fenner Heidi Winterkorn !Heidi Winterkorn Ann Fenner !Heidi Winterkorn Ann Fenner Heidi Winterkorn !Heidi Winterkorn Ann Fenner !Heidi Winterkorn Ann Fenner !Heidi Winterkorn Ann Fenner !Heidi Winterkorn Ann Fenner !Heidi Winterkorn Ann Fenner !Heidi Winterkorn Ann Fenner Heidi Winterkorn James H. Cox David Witus David Witus David Witus David Witus Teresa L. Falco Mike Schackwitz Ruthann Lorentzen Irene O'Riordan "Irene O'Riordan Markus Glunz Diarmuid Mulcahy Markus Glunz #Markus Glunz Diarmuid Mulcahy "Irene O'Riordan Markus Glunz "Markus Glunz Irene O'Riordan "Markus Glunz Irene O'Riordan Christopher R. Jones Cy Cedar #Cy Cedar Christopher R. Jones Markus Glunz Cy Cedar 'Markus Glunz Christopher R. Jones TRIO Apsetup Markus Glunz Mary Beth Maines CJ Liu !Mike Mathieu Todd G. Roshak #Julie Rowlands Charlie Kindel Tina Headley Mike Mathieu Tina Headley CJ Liu Julie Rowlands Allen D. Wilcox Mark Kroese !Mark Kroese Allen D. Wilcox 1Allen D. Wilcox A Valued Microsoft Customer !Mark Kroese Allen D. Wilcox Tina Headley Mark Kroese Libby Duzan Lorraine Nay John Coake Cory Van Arsdale #Tina Headley Cory Van Arsdale #Tina Headley Cory Van Arsdale Laura Jennings Laura Jennings Suzanne Dennehey Noah Tratt Bruce Jacobsen melissap melissap Bruce Jacobsen Bruce Jacobsen melissap Don Edmond  Diane Tibbott Beverly Jones" Chris Capossela# "Beverly Jones Chris Capossela #Beverly Jones Chris Capossela #Beverly Jones Chris Capossela #Beverly Jones Chris Capossela Stuart C. Jenner) Caribe A. Malo* %Caribe A. Malo Stuart C. Jenner %Caribe A. Malo Stuart C. Jenner $Caribe A. Malo Stuart C. Jenner %Caribe A. Malo Stuart C. Jenner %Caribe A. Malo Stuart C. Jenner %Caribe A. Malo Stuart C. Jenner %Caribe A. Malo Stuart C. Jenner Krista L. Weberg2 Kylie A. Hansen3 Jay Henningsen4 "Beverly Jones Jay Henningsen Cathy Licht6 !Cathy Licht Chris Capossela !Cathy Licht Chris Capossela !Cathy Licht Chris Capossela !Cathy Licht Chris Capossela !Cathy Licht Chris Capossela !Cathy Licht Chris Capossela !Cathy Licht Chris Capossela Cathy Licht Josh Herst? John Gable@ Peter LundstromA  Peter Lundstrom John Gable !Peter Lundstrom Cathy Licht !Peter Lundstrom Cathy Licht !Peter Lundstrom Cathy Licht !Peter Lundstrom Cathy Licht !Peter Lundstrom Cathy Licht !Peter Lundstrom Cathy Licht "Peter Lundstrom Cathy Licht !Peter Lundstrom Cathy Licht !Peter Lundstrom Cathy Licht Bridget BakkenL John Gable Patsy Riley Patsy RileyN !Word Development John Gable Wayne A. FeigP !Word Development John Gable !Word Development John Gable !Word Development John Gable !Word Development John Gable !Word Development John Gable &Peter Lundstrom Word Development Scott FallonW #Scott Fallon Krista L. Weberg "Peter Lundstrom Scott Fallon "Peter Lundstrom Scott Fallon "Peter Lundstrom Scott Fallon "Peter Lundstrom Scott Fallon "Peter Lundstrom Scott Fallon "Peter Lundstrom Scott Fallon "Peter Lundstrom Scott Fallon "Peter Lundstrom Scott Fallon "Peter Lundstrom Scott Fallon "Peter Lundstrom Scott Fallon "Peter Lundstrom Scott Fallon "Peter Lundstrom Scott Fallon "Peter Lundstrom Scott Fallon "Peter Lundstrom Scott Fallon "Peter Lundstrom Scott Fallon Peter Lundstrom Scott Fallonh "Peter Lundstrom Scott Fallon "Peter Lundstrom Scott Fallon "Peter Lundstrom Scott Fallon "Peter Lundstrom Scott Fallon "Peter Lundstrom Scott Fallon Zarahjmo John Gable Zarahjm Judy Chaseq !Word Development Judy Chase !Word Development John Gable #Word Development John Gable !Word Development John Gable Francine S. Margolisv +Francine S. Margolis Krista L. Weberg *Peter Lundstrom Francine S. Margolis &Peter Lundstrom Word Development  Cathy Licht Bridget Bakken "Francine S. Margolis Zarahjm Christopher D. Payne| &Cathy Licht Christopher D. Payne &Cathy Licht Christopher D. Payne &Christopher D. Payne Cathy Licht &Christopher D. Payne Cathy Licht &Cathy Licht Christopher D. Payne &Cathy Licht Christopher D. Payne &Cathy Licht Christopher D. Payne  Cathy Licht Bridget Bakken &Cathy Licht Christopher D. Payne &Cathy Licht Christopher D. Payne &Cathy Licht Christopher D. Payne &Cathy Licht Christopher D. Payne &Cathy Licht Christopher D. Payne &Christopher D. Payne Cathy Licht &Cathy Licht Christopher D. Payne &Cathy Licht Christopher D. Payne &Christopher D. Payne Cathy Licht &Cathy Licht Christopher D. Payne &Cathy Licht Christopher D. Payne &Christopher D. Payne Cathy Licht Gary Haarsager  Gary Haarsager Cathy Licht Karl F. Buhl Narendra Nath  Karl F. Buhl Narendra Nath  Karl F. Buhl Narendra Nath  Karl F. Buhl Narendra Nath  Karl F. Buhl Narendra Nath Madeline Kirbach Pierre de Vries David Armour !Gary Haarsager David Armour Peter V. Lundstrom David Williams Josh Davidson )Peter V. Lundstrom Word Development Judy Chase Tina Headley Alee Spencer Judy Chase Judy Chase #Peter V. Lundstrom Judy Chase #Peter V. Lundstrom Judy Chase #Peter V. Lundstrom Josh Herst Carlotta Boyd Dave Malcolm David Tuniman Michael T. Foley #Michael T. Foley Dave Malcolm #Michael T. Foley Dave Malcolm Phillip Gray  Beverly Jones Phillip Gray Francine S. Haman Paul West Paul West Diane Tibbott %Beverly Jones Chris Capossela 'Caribe A. Malo Stuart C. Jenner 'Peter Lundstrom 0Word Development #Word Development John Gable (Cathy Licht Christopher D. Payne (Christopher D. Payne Cathy Licht +Peter V. Lundstrom Word Development %Michael T. Foley Dave Malcolm Karen Hoiem Karen Hoiem Don Edmond Paul West Karen Hoiem Paul West evaco Paul West evaco John Porcaro Greg Weber John Porcaro Jean Cho Jean Cho Jean Cho Charlie Bermant Kerri Grubb Fred Brewflaught Homer Sunds "Fred Brewflaught Homer Sunds Kerri Grubb t-cchang t-cchang Fred Brewflaught t-cchang Fred Brewflaught Wes Rataushk Wes Rataushk Kerri Grubb Wes Rataushk Kerri Grubb Maria King Gregg Smith Maria King Gregg Smith Wes Rataushk Maria King Shari G. Smith Kelli Jerome ScottCA mikelar David Garber Kurt Smith Walter Myers III Bill Vaughn Jean Cho Unknown lisa Irwin Jean Cho melissap Jean Cho Jean Cho Jean Cho Jean Cho Jean Cho Jean Cho Jean Cho Jean Cho Jean Cho Jean Cho Jean Cho Jean Cho Jean Cho Jean Cho Jean Cho Jean Cho Jean Cho Jean Cho Jean Cho Jean Cho Jean Cho Jean Cho Jean Cho Jean Cho Jean Cho Jean Cho Jean Cho Jean Cho Jean Cho Jean Cho Jean Cho Jean Cho Jean Cho Jean Cho Karen Meredith Karen Meredith Unknown Steve Trautman Lewisl Greg Weber John Porcaro Trish May Laura Schildkraut Deborah Willingham Jeanne Chase Michael Harvey Charles Stevens Bev Auld Wynne Wolf Doug Martin Peter Bladin Trish May Peter Bladin "Trish May Deborah Willingham Microsoft Corporation 0TRIO Apsetup Bruce Jacobsen melissap Greg Weber melissap Bruce Jacobsen Kathleen Martin Fiander Joan Cummings matthew david peterson sue barnes Janet Angell. sue barnes Janet Angell. sue barnes Anna MacKinnon Brad Chase Gaby Adam  +A Valued Microsoft Customer Gaby Adam Joel P. Dehlin" Jim Oker# H. Steven Banfield$ Geraint Davies% 'Geraint Davies H. Steven Banfield 'H. Steven Banfield Geraint Davies 'H. Steven Banfield Geraint Davies 'H. Steven Banfield Geraint Davies 'H. Steven Banfield Geraint Davies Gerson Stumpf+ Gerson Stumpf Unknown BRIANMC- Gerson Stumpf BRIANMC BRIANMC Unknown Gerson Stumpf BRIANMC Gerson Stumpf BRIANMC Gerson Stumpf BRIANMC Gerson Stumpf BRIANMC TUVALM4 TUVALM Gerson Stumpf TUVALM Gerson Stumpf kavis7 kavis Craig S. Bartholomew9  Craig S. Bartholomew kavis Craig S. Bartholomew jodid< JayG= Deloitte6> Chris Anderson? Fred Magnota@ TonyChA Angie OngB Paul HiginbothamC Flanagan, Timothy R. R.D Adrian WebsterE Deanna HearnsF markG $G. S. Rana Alexander G. Tilles $G. S. Rana Alexander G. Tilles Emily BrooksJ Emily Brooks1K  Emily Brooks1 Emily Brooks  Emily Brooks1 Emily Brooks  Emily Brooks1 Emily Brooks  Emily Brooks1 Emily Brooks  Emily Brooks1 Emily Brooks  Emily Brooks1 Emily Brooks  Emily Brooks1 Emily Brooks  Emily Brooks1 Emily Brooks  Emily Brooks1 Emily Brooks  Emily Brooks1 Emily Brooks  Emily Brooks1 Emily Brooks  Emily Brooks1 Emily Brooks  Emily Brooks1 Emily Brooks  Emily Brooks1 Emily Brooks  Emily Brooks1 Emily Brooks  Emily Brooks1 Emily Brooks  Emily Brooks1 Emily Brooks  Emily Brooks1 Emily Brooks  Emily Brooks1 Emily Brooks  Emily Brooks1 Emily Brooks  Emily Brooks1 Emily Brooks  Emily Brooks1 Emily Brooks  Emily Brooks1 Emily Brooks  Emily Brooks1 Emily Brooks  Emily Brooks1 Emily Brooks  Emily Brooks1 Emily Brooks  Emily Brooks1 Emily Brooks  Emily Brooks1 Emily Brooks  Emily Brooks1 Emily Brooks  Emily Brooks1 Emily Brooks  Emily Brooks1 Emily Brooks  Emily Brooks1 Emily Brooks G. S. Rana susan voellern G. S. Rana"C:\GSR\icap\docs\user\truncmea.doc G. S. Rana"C:\GSR\icap\docs\user\truncmea.doc G. S. Rana"C:\GSR\icap\docs\user\truncmea.doc G. S. Rana"C:\GSR\icap\docs\user\truncmea.doc G. S. Rana"C:\GSR\icap\docs\user\truncmea.doc G. S. Rana"C:\GSR\icap\docs\user\truncmea.doc G. S. Rana"C:\GSR\icap\docs\user\truncmea.doc G. S. Rana"C:\GSR\icap\docs\user\truncmea.doc G. S. Rana"C:\GSR\icap\docs\user\truncmea.doc G. S. Rana"C:\GSR\icap\docs\user\truncmea.doc @\\MSPRINT3\21/2159 PRIVP 157.57.40.244 Ne01: winspool HP LaserJet 4Si/4Si MX PS \\MSPRINT3\21/2159 PRIVP 157.57 etter PRIV`  N N N \\MSPRINT3\21/2159 PRIVP 157.57 etter PRIV`  N N N Times New Roman Symbol Arial Microsoft Logo Tms Rmn TruncMEA Specification G. S. Rana G. S. Rana
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\ddk\ddk_multimedia.ini ===
; FORMAT : SourceDir, SourceFile, DestDir, DestFile, OPERATION
; All fields are required
; [subname]* is allowed for source, in which case * required for destination

; Whacked - sample is moving to the SDK...
;DirectX\dmusic\dmsynth                 , clist.cpp   , src\audio\dmusic\ddksynth                         , *           , COPY        
;DirectX\dmusic\dmsynth                 , clist.h     , src\audio\dmusic\ddksynth                         , *           , COPY        
;DirectX\dmusic\dmsynth                 , control.cpp , src\audio\dmusic\ddksynth                         , *           , COPY        
;DirectX\dmusic\dmsynth                 , csynth.cpp  , src\audio\dmusic\ddksynth                         , *           , COPY        
;DirectX\dmusic\dmsynth                 , csynth.h    , src\audio\dmusic\ddksynth                         , *           , COPY        
;DirectX\dmusic\dmsynth                 , ddksources  , src\audio\dmusic\ddksynth                         , sources     , COPY        
;DirectX\dmusic\dmsynth                 , ddksynth.htm, src\audio\dmusic\ddksynth                         , *           , COPY        
;DirectX\dmusic\dmsynth                 , debug.cpp   , src\audio\dmusic\ddksynth                         , *           , HSPLIT      
;DirectX\dmusic\dmsynth                 , debug.h     , src\audio\dmusic\ddksynth                         , *           , COPY        
;DirectX\dmusic\dmsynth                 , dmsynth.cpp , src\audio\dmusic\ddksynth                         , ddksynth.cpp, HSPLIT      
;DirectX\dmusic\dmsynth                 , dmsynth.def , src\audio\dmusic\ddksynth                         , ddksynth.def, HSPLIT      
;DirectX\dmusic\dmsynth                 , dmsynth.rc  , src\audio\dmusic\ddksynth                         , ddksynth.rc , HSPLIT      
;DirectX\dmusic\dmsynth                 , guids.cpp   , src\audio\dmusic\ddksynth                         , *           , HSPLIT      
;DirectX\dmusic\dmsynth                 , instr.cpp   , src\audio\dmusic\ddksynth                         , *           , HSPLIT      
;DirectX\dmusic\dmsynth                 , midi.cpp    , src\audio\dmusic\ddksynth                         , *           , COPY        
;DirectX\dmusic\dmsynth                 , misc.h      , src\audio\dmusic\ddksynth                         , *           , COPY        
;DirectX\dmusic\dmsynth                 , mix.cpp     , src\audio\dmusic\ddksynth                         , *           , COPY        
;DirectX\dmusic\dmsynth                 , mmx.cpp     , src\audio\dmusic\ddksynth                         , *           , COPY        
;DirectX\dmusic\dmsynth                 , oledll.cpp  , src\audio\dmusic\ddksynth                         , *           , COPY        
;DirectX\dmusic\dmsynth                 , oledll.h    , src\audio\dmusic\ddksynth                         , *           , COPY        
;DirectX\dmusic\dmsynth                 , plclock.cpp , src\audio\dmusic\ddksynth                         , *           , COPY        
;DirectX\dmusic\dmsynth                 , plclock.h   , src\audio\dmusic\ddksynth                         , *           , COPY        
;DirectX\dmusic\dmsynth                 , simple.h    , src\audio\dmusic\ddksynth                         , *           , COPY        
;DirectX\dmusic\dmsynth                 , synth.h     , src\audio\dmusic\ddksynth                         , *           , COPY        
;DirectX\dmusic\dmsynth                 , umsynth.cpp , src\audio\dmusic\ddksynth                         , *           , HSPLIT      
;DirectX\dmusic\dmsynth                 , umsynth.h   , src\audio\dmusic\ddksynth                         , *           , HSPLIT      
;DirectX\dmusic\dmsynth                 , voice.cpp   , src\audio\dmusic\ddksynth                         , *           , COPY        
;DirectX\dmusic\dmsynth\daytona         , makefile    , src\audio\dmusic\ddksynth                         , *           , COPY        
;DirectX\dmusic\shared                  , validate.h  , src\audio\dmusic\ddksynth                         , *           , COPY        

;CPLSVR1 sample
Directx\dxddk\dinput\samples\cplsvr1    , Cplsvr1.htm , src\input\dinput\cplsvr1                          , Cplsvr1.htm , COPY
Directx\dxddk\dinput\samples\cplsvr1    , BtnDwn.ico  , src\input\dinput\cplsvr1                          , BtnDwn.ico  , COPY
Directx\dxddk\dinput\samples\cplsvr1    , BtnUp.ico   , src\input\dinput\cplsvr1                          , BtnUp.ico   , COPY
Directx\dxddk\dinput\samples\cplsvr1    , Button.cpp  , src\input\dinput\cplsvr1                          , Button.cpp  , COPY
Directx\dxddk\dinput\samples\cplsvr1    , Config.ico  , src\input\dinput\cplsvr1                          , Config.ico  , COPY
Directx\dxddk\dinput\samples\cplsvr1    , Cplsvr1.cpp , src\input\dinput\cplsvr1                          , Cplsvr1.cpp , COPY
Directx\dxddk\dinput\samples\cplsvr1    , Cplsvr1.def , src\input\dinput\cplsvr1                          , Cplsvr1.def , COPY
Directx\dxddk\dinput\samples\cplsvr1    , Cplsvr1.h   , src\input\dinput\cplsvr1                          , Cplsvr1.h   , COPY
Directx\dxddk\dinput\samples\cplsvr1    , Cplsvr1.inf , src\input\dinput\cplsvr1                          , Cplsvr1.inf , COPY
Directx\dxddk\dinput\samples\cplsvr1    , Cplsvr1.mak , src\input\dinput\cplsvr1                          , Cplsvr1.mak , COPY
Directx\dxddk\dinput\samples\cplsvr1    , Cplsvr1.rc  , src\input\dinput\cplsvr1                          , Cplsvr1.rc  , COPY
Directx\dxddk\dinput\samples\cplsvr1    , CplsvrNT.inf, src\input\dinput\cplsvr1                          , CplsvrNT.inf, COPY
Directx\dxddk\dinput\samples\cplsvr1    , Dicpl.h     , src\input\dinput\cplsvr1                          , Dicpl.h     , COPY
Directx\dxddk\dinput\samples\cplsvr1    , Dicputil.h  , src\input\dinput\cplsvr1                          , Dicputil.h  , COPY
Directx\dxddk\dinput\samples\cplsvr1    , Pages.h     , src\input\dinput\cplsvr1                          , Pages.h     , COPY
Directx\dxddk\dinput\samples\cplsvr1    , Resource.h  , src\input\dinput\cplsvr1                          , Resource.h  , COPY
Directx\dxddk\dinput\samples\cplsvr1    , Resrc1.h    , src\input\dinput\cplsvr1                          , Resrc1.h    , COPY
Directx\dxddk\dinput\samples\cplsvr1    , Winflag.ico , src\input\dinput\cplsvr1                          , Winflag.ico , COPY
Directx\dxddk\dinput\samples\cplsvr1    , Makefile    , src\input\dinput\cplsvr1                          , Makefile    , COPY
Directx\dxddk\dinput\samples\cplsvr1    , Dicputil.cpp, src\input\dinput\cplsvr1                          , Dicputil.cpp, COPY
Directx\dxddk\dinput\samples\cplsvr1    , Pages.cpp   , src\input\dinput\cplsvr1                          , Pages.cpp   , COPY
Directx\dxddk\dinput\samples\cplsvr1    , Sources     , src\input\dinput\cplsvr1                          , Sources     , COPY
                                                                                                                           
;FFDRV1 sample                                                                                                             
Directx\dxddk\dinput\samples\ffdrv1     , clsfact.c   , src\input\dinput\ffdrv1                           , clsfact.c   , COPY
Directx\dxddk\dinput\samples\ffdrv1     , effdrv.c    , src\input\dinput\ffdrv1                           , effdrv.c    , COPY
Directx\dxddk\dinput\samples\ffdrv1     , effhw.c     , src\input\dinput\ffdrv1                           , effhw.c     , COPY
Directx\dxddk\dinput\samples\ffdrv1     , main.c      , src\input\dinput\ffdrv1                           , main.c      , COPY
Directx\dxddk\dinput\samples\ffdrv1     , effdrv.h    , src\input\dinput\ffdrv1                           , effdrv.h    , COPY
Directx\dxddk\dinput\samples\ffdrv1     , effpub.h    , src\input\dinput\ffdrv1                           , effpub.h    , COPY
Directx\dxddk\dinput\samples\ffdrv1     , ffdrv1.def  , src\input\dinput\ffdrv1                           , ffdrv1.def  , COPY
Directx\dxddk\dinput\samples\ffdrv1     , ffdrv1.inf  , src\input\dinput\ffdrv1                           , ffdrv1.inf  , COPY
Directx\dxddk\dinput\samples\ffdrv1     , ffdrv1.rc   , src\input\dinput\ffdrv1                           , ffdrv1.rc   , COPY
Directx\dxddk\dinput\samples\ffdrv1     , default.mk  , src\input\dinput\ffdrv1                           , default.mk  , COPY
Directx\dxddk\dinput\samples\ffdrv1     , watcom.mk   , src\input\dinput\ffdrv1                           , watcom.mk   , COPY
Directx\dxddk\dinput\samples\ffdrv1     , makefile.wat, src\input\dinput\ffdrv1                           , makefile.wat, COPY
Directx\dxddk\dinput\samples\ffdrv1     , readme.txt  , src\input\dinput\ffdrv1                           , readme.txt  , COPY
Directx\dxddk\dinput\samples\ffdrv1     , makefile    , src\input\dinput\ffdrv1                           , makefile    , COPY
Directx\dxddk\dinput\samples\ffdrv1     , makefile1   , src\input\dinput\ffdrv1                           , makefile1   , COPY
Directx\dxddk\dinput\samples\ffdrv1     , sources     , src\input\dinput\ffdrv1                           , sources     , COPY
                                                                                                                           
;DIMapCfg tool
Directx\dxddk\dinput\tools\dimapcfg     , DIMapCfg.chm, tools\dimapcfg                                    , dimapcfg.chm, COPY
Directx\dxddk\dinput\tools\dimapcfg\x86 , dimapcfg.exe, tools\dimapcfg\x86                                , dimapcfg.exe, COPYX86
Directx\dxddk\dinput\tools\dimapcfg\x86 , diactfrm.dll, tools\dimapcfg\x86                                , diactfrm.dll, COPYX86
Directx\dxddk\dinput\tools\dimapcfg\x86 , genre.ini   , tools\dimapcfg\x86                                , genre.ini   , COPYX86
Directx\dxddk\dinput\tools\dimapcfg\win9x,dimapcfg.exe, tools\dimapcfg\win9x                              , dimapcfg.exe, COPYX86
Directx\dxddk\dinput\tools\dimapcfg\win9x,diactfrm.dll, tools\dimapcfg\win9x                              , diactfrm.dll, COPYX86
Directx\dxddk\dinput\tools\dimapcfg\win9x,genre.ini   , tools\dimapcfg\win9x                              , genre.ini   , COPYX86
Directx\dxddk\dinput\tools\dimapcfg\ia64, dimapcfg.exe, tools\dimapcfg\ia64                               , dimapcfg.exe, COPYIA64
Directx\dxddk\dinput\tools\dimapcfg\ia64, diactfrm.dll, tools\dimapcfg\ia64                               , diactfrm.dll, COPYIA64
Directx\dxddk\dinput\tools\dimapcfg\ia64, genre.ini   , tools\dimapcfg\ia64                               , genre.ini   , COPYIA64

Media\msacm\gsm610                     , *           , src\mmedia\gsm610                                 , *           , HSPLIT      
; Moved to mmedia
;Media\msacm\gsm610                     , *           , src\audio\acm\gsm610                              , *           , HSPLIT      

Media\msacm\imaadpcm                   , *           , src\mmedia\imaadpcm                               , *           , HSPLIT      
; Moved to mmedia
;Media\msacm\imaadpcm                   , *           , src\audio\acm\imaadpcm                            , *           , HSPLIT      

Media\msacm\msfilter                   , *           , src\mmedia\msfilter                               , *           , HSPLIT      
; Moved to mmedia
;Media\msacm\msfilter                   , *           , src\audio\acm\msfilter                            , *           , HSPLIT      

DirectX\dxddk\video\3dlabs\perm3\disp\dx\win9x , makefile    , src\video\displays\3dlabs\perm3\disp\dx\win9x , *       , HSPLIT
DirectX\dxddk\video\3dlabs\perm3\disp\dx\win9x , *.def       , src\video\displays\3dlabs\perm3\disp\dx\win9x , *       , HSPLIT
DirectX\dxddk\video\3dlabs\perm3\disp\dx\win9x , *.rc        , src\video\displays\3dlabs\perm3\disp\dx\win9x , *       , HSPLIT
DirectX\dxddk\video\3dlabs\perm3\disp\dx\win9x , *.h         , src\video\displays\3dlabs\perm3\disp\dx\win9x , *       , HSPLIT
DirectX\dxddk\video\3dlabs\perm3\disp\dx\win9x , sources.wdk , src\video\displays\3dlabs\perm3\disp\dx\win9x , sources , HSPLIT
DirectX\dxddk\video\3dlabs\perm3\disp\dx\win9x , *.c         , src\video\displays\3dlabs\perm3\disp\dx\win9x , *       , HSPLIT
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\danim\tools\x86\icecap\icecap31.doc ===
Microsoft Word Document MSWordDoc Word.Document.6Internal Development Tools IceCAPIceCAP Internal Call Attributed Profiler For Windows 95 and Windows NT Normal.dot G. S. Rana Microsoft Word for Windows 95PBrush PBrush PBrush0 0 254 229 TITLE  \* MERGEFORMAT  IceCAP  SUBJECT  \* MERGEFORMAT  Internal Call Attributed Profiler  COMMENTS  \* MERGEFORMAT  For Windows 95 and Windows NT Version 3.1 s Guide Last updated:   SAVEDATE \@ "MMMM d, yyyy" \* MERGEFORMAT  May 12, 1996 Table of Contents  TOC \o "1-3"  Table of Contents  GOTOBUTTON _Toc356562721    PAGEREF _Toc356562721  Overview  GOTOBUTTON _Toc356562722    PAGEREF _Toc356562722  What is IceCAP?  GOTOBUTTON _Toc356562723    PAGEREF _Toc356562723  What is new in IceCAP 3.1?  GOTOBUTTON _Toc356562724    PAGEREF _Toc356562724  Restrictions  GOTOBUTTON _Toc356562725    PAGEREF _Toc356562725  Getting started  GOTOBUTTON _Toc356562726    PAGEREF _Toc356562726  Profiling an Application  GOTOBUTTON _Toc356562727    PAGEREF _Toc356562727  Preparing for Profiling  GOTOBUTTON _Toc356562728    PAGEREF _Toc356562728  Profiling Runs  GOTOBUTTON _Toc356562729    PAGEREF _Toc356562729  Diagnosing failures  GOTOBUTTON _Toc356562730    PAGEREF _Toc356562730  ICAP.INI option summary  GOTOBUTTON _Toc356562731    PAGEREF _Toc356562731  Report Generator  GOTOBUTTON _Toc356562732    PAGEREF _Toc356562732  Reading reports  GOTOBUTTON _Toc356562733    PAGEREF _Toc356562733  Report Headers.  GOTOBUTTON _Toc356562734    PAGEREF _Toc356562734  Summaries  GOTOBUTTON _Toc356562735    PAGEREF _Toc356562735  Caller/Callee function list  GOTOBUTTON _Toc356562736    PAGEREF _Toc356562736  Trace output  GOTOBUTTON _Toc356562737    PAGEREF _Toc356562737  Miscellaneous report topics  GOTOBUTTON _Toc356562738    PAGEREF _Toc356562738  Delimited reports  GOTOBUTTON _Toc356562739    PAGEREF _Toc356562739  Controlling data collection  GOTOBUTTON _Toc356562740    PAGEREF _Toc356562740  Thread specific APIs  GOTOBUTTON _Toc356562741    PAGEREF _Toc356562741  Process specific APIs  GOTOBUTTON _Toc356562742    PAGEREF _Toc356562742  Example  GOTOBUTTON _Toc356562743    PAGEREF _Toc356562743  ICAPCTRL Applet  GOTOBUTTON _Toc356562744    PAGEREF _Toc356562744  API counters  GOTOBUTTON _Toc356562745    PAGEREF _Toc356562745  Special Problems  GOTOBUTTON _Toc356562746    PAGEREF _Toc356562746  Assembly language  GOTOBUTTON _Toc356562747    PAGEREF _Toc356562747  Turning profiling off  GOTOBUTTON _Toc356562748    PAGEREF _Toc356562748  NT 4.0 Fibers  GOTOBUTTON _Toc356562749    PAGEREF _Toc356562749  Memory Profiling Notes  GOTOBUTTON _Toc356562750    PAGEREF _Toc356562750  Profiling for Memory  Out-of-process  GOTOBUTTON _Toc356562751    PAGEREF _Toc356562751  Summary of Restrictions  GOTOBUTTON _Toc356562752    PAGEREF _Toc356562752  IceCAP Support, Aliases, and Web sites  GOTOBUTTON _Toc356562753    PAGEREF _Toc356562753  FAQ.DOC  GOTOBUTTON _Toc356562754    PAGEREF _Toc356562754  icapsup  GOTOBUTTON _Toc356562755    PAGEREF _Toc356562755  icapbug  GOTOBUTTON _Toc356562756    PAGEREF _Toc356562756  icapuser  GOTOBUTTON _Toc356562757    PAGEREF _Toc356562757  IceCAP web site  GOTOBUTTON _Toc356562758    PAGEREF _Toc356562758  Toolbox  GOTOBUTTON _Toc356562759    PAGEREF _Toc356562759  About Internal Tools  GOTOBUTTON _Toc356562760    PAGEREF _Toc356562760  Overview What is IceCAP? The IceCAP profiler is designed to provide detailed call-attributed profiling with minimal overhead.  One uses IceCAP to answer the question, "What time and memory resources did an application use as it went from point A to B?"  IceCAP provides the following key features: Profiling for execution times and memory. Support for Win32 applications running on Windows 95 and Windows NT. Per-thread times on Windows 95 Pentium machines. Support for applications that use exceptions, multi-threading, setjmp, and recursive calls. Minimal steps for preparing an application for profiling. Low overhead while the application is running. Support for COFF and CV symbols. Support for BBT d (formerly Lego) binaries. Same binaries for both Windows 95 and x86 Windows NT. Documented time units and configuration. Summary, call-attributed list, trace, and delimited report formats. For every profiled function, IceCAP can report the following information: Number of calls. Minimum, maximum, average, inclusive, and exclusive times. All or new(page faults) memory pages touched for CODE, DATA, and STACK. IceCAP and IceCAP technology is currently Microsoft Confidential and is for internal use at Microsoft only. Please do not discuss it outside of Microsoft. What is new in IceCAP 3.1? In-process memory profiling. No need to use ICECAP.EXE -- which slows profiling by running your application as a debugee process. Improved TRACE output. Trace output now includes delta and attributed information for timing as well as memory. Symbol support for BBT d binaries.  No more MODULE+OFFSET messages for MFC40.DLL functions, correct symbol resolution for BBT (previously  known as LEGO) builds. IceCAP API enhancements.  Ability to start, stop, suspend, or resume profiling at thread or process (global) level. ICAP.DLL performance improvements. Faster data gathering for applications that use multiple threads or setjmp. More profiling and report options.  Exclude import patching by function or module, for example. Support for NT 4.0 Fibers, bug fixes, and more! Restrictions IceCAP will only run on 80486 and Pentium machines. IceCAP may not work properly on some multi-processor machines. We are unable to get reliable timer information on 486 multi-processor machines. If you need to profile an application on a multi-processor system, we suggest that you use a Pentium machine with UseCycleCounter set to 1 (which is the default for Pentium machines). This will make IceCAP use Pentium on-chip cycle counter instead of the NT timer APIs. When profiling multiple threads with elapsed time (as opposed to thread time), the elapsed time for a thread does not exclude profiling overhead of other threads. As a result, the elapsed time for a thread can be off significantly.  However, thread time reports (only available on Windows 95 Pentium machines) will be correct, since both profiling overhead and time spent in other threads is ignored. Elapsed time reports for multiple threads can still be useful for analyzing individual sections of consecutive calls by a single thread (see -THREAD, -START, and -STOP report options, below). Because page reference measurement APIs are process specific, IceCAP can not record memory reference data on per-thread basis. When profiling multiple threads for memory, IceCAP will record page reference data for the first thread that profiling was turned on. For all subsequent threads that profiling is turned on, only timing (execution) data is recorded and page reference data is ignored. Please see  Memory Profiling Notes  for more discussion on this topic. The maximum size of the data file generated by IceCAP is fixed and set at initialization time. (See MaxMeaSize in ICAP.INI settings, below). Getting started Please read README.DOC file, available on IceCAP share, for instructions on  installing IceCAP. Profiling an Application Preparing for Profiling VC NOTE: You may wish to create a new Target (e.g. Win32 Profile) so that you can choose between profile and non-profile builds. Include  icapexp.h  in any file that will call the profiling API. Compile all source files with these options in addition to whatever is required by the project: Generates  _penter  calls in all function prologs; _penter collects performance data during a test run. VC NOTE: You can specify this option on the Project Settings/ C/C++  tab by adding /Gh to the  Project Options  field. For VC 4.x this tab is accessible via the Build/Settings menu option. Generates debugging information. VC NOTE: You can specify this option on the Project Settings/ C/C++  tab by selecting Category=General and then under  Debug Info  selecting  Program Database For VC 4.x this tab is accessible via the Build/Settings menu option. Generates a demand for MSVCRT.LIB and, thence, for MSVCRTxx.DLL. That is, runtime library routines will be resolved to the runtime DLL. This option is required if the application calls  setjmp s useful in other cases so you can profile runtime library calls. VC NOTE: You can specify this option  on the Project Settings/ C/C++  tab by selecting Category=Code Generation and then under  Use Run-Time Library  selecting  Multithreaded DLL For VC 4.x this tab is accessible via the Build/Settings menu option. VC NOTE:  When using MFC,  specify  Use MFC in a shared DLL  (either when using the MFC app wizard or by accessing the Project Settings/General tab and under  Microsoft Foundation Classes  selecting  Use MFC in a shared DLL For VC 4.x this tab is accessible via the Build/Settings menu option. NOTE!  If you use  setjmp , make sure to link with the runtime DLL. If you are explicitly linking with a runtime library, choose msvcrt.lib and not libc.lib or libcmt.lib. Link with ICAP.LIB and the -DEBUG:MAPPED option. If you are profiling on Windows 95, do not link with the optidata linker option (this is a new option that puts the import table in the same section as the code). VC NOTE: You can specify ICAP.LIB on the Project Settings/Link tab by adding icap.lib to the  Object/Library Modules  field. This tab is accessible via the Build/Settings menu option of VC 4.x. VC NOTE: You can specify -DEBUG:MAPPED on the Project Settings/Link tab by adding -DEBUG:MAPPED to the  Project Options  field. This tab is accessible via the Build/Settings menu option of VC 4.x. IceCAP 3.1 does not require debug information to be in a .PDB file. If you want the debug information included in the binary instead, specify -PDB:NONE in the link options. VC NOTE: VC automatically inserts a pdb setting in the link options. You can edit it to  pdb:none  on the Project Settings/Link in the  Project Options  field. This tab is accessible via the Build/Settings menu option of VC 4.x. If you don t want profiling to start immediately, create or modify ICAP.INI in the Windows directory to have a section for your application (see ICAP.INI option summary, below). Ensure that the IceCAP files have been installed as described in the Setup Instructions (README.DOC), and the system has been rebooted. Profiling Runs Once an application has been built for profiling, it is ready for profiling. IceCAP allows you to profile an application for execution and memory. To profile an application for execution, i.e., no memory profiling: Use the Pages=Never (default) setting in the ICAP.INI file. See ICAP.INI option summary below for more information on this setting. To record execution and memory profiling data: Set Pages=New or the Pages=All setting in the ICAP.INI file. See ICAP.INI option summary below for more information on this setting. NOTE: Execution data gathered with memory profiling is not a reliable indicator of application s performance. See Memory Profiling Notes below for more information. Execute your application with ICAP.DLL in the path. As the application executes, the profiling data is recorded into a measurement  file. By default, this file is in the same directory as the application and has an MEA extension. You can override the default name in the INI file (see ICAP.INI option summary below). The default maximum size of the MEA file is 32M. If desired, you can alter this default by setting a value in the ICAP.INI file (see ICAP.INI option summary, below). NOTE! You must have free disk space equal to or greater than the maximum MEA size to profile your application, otherwise ICAP.DLL will fail to load. After the application has finished executing, the MEA file is ready for analysis. You can run the report generator as described in the next section to analyze the test run. Diagnosing failures _adjust_fdiv If you get a popup stating that the procedure entry point _adjust_fdiv could not be located in the dynamic link library MSVCRTxx.DLL, you need to get the MSVCRTxx.DLL from VC 2.x or VC 4.0. It has an extra entry point for the Pentium divide problem workaround. pop ups If ICAP.DLL encounters an error it will bring up a pop up window describing the error. You can disable this feature with a setting in ICAP.INI; see below. general failures If you get some failure which is not diagnosable, try running the application under the debugger. ICAP.DLL will send error messages to the debug port so you will see them there. ICAP.INI option summary You can use an optional ICAP.INI file to control various profiling options. This file can be placed in your Windows directory or the current directory. IceCAP looks for ICAP.INI file in the current directory first and then in the Windows directory. Each of the following options can appear in either the general [settings] section of ICAP.INI or in application specific sections named by the application base name (e.g. foo.exe options would appear in section [foo]).  The precedence of options is: application specific values, general settings values, defaults, i.e., the application specific settings override the settings in the [settings] section. A sample ICAP.INI file is available in the \sample directory of IceCAP share. Option Values Description Cache Per thread caching for recording timing data is not enabled (default). See Cache=1 setting for more explanation of this setting. Cache Per thread caching for recording timing data is enabled. This option is useful only if your application uses a high number of threads and an application is profiled on SMP machines. When this option is on, IceCAP caches the write requests to MEA file, thereby reducing contention for MEA (which is memory mapped) file memory. The drawback of using this option is that you lose the sequential information in the trace output. Trace output, in this case, is sorted by threads. CycleSpeed Specifies clock cycle speed (n is in Mhz). This setting is purely for documentation purposes. IceCAP does not use this value for any computational purposes. IcapCtrl Disables ICAPCTRL applet support, eliminating shared memory usage. IcapCtrl Enables ICAPCTRL support (default). Imports Turns off import patching  for all DLLs (time will be attributed to calling function instead).  See also NoImport setting. Imports Turns on import patching (default). See also NoImport setting. MaxMeaSize Maximum .MEA file size in megabytes (default is 32). You must have free disk space equal to or greater than n, otherwise ICAP.DLL will fail to load.  MaxCallDepth Maximum call stack depth (default is 256) MessageBoxErrors Prevents errors from bringing up a MessageBox MessageBoxErrors Allows errors to bring up a MessageBox (default) NoImport module[.DLL][:FunctionName] Allows suppression of import patching at module or function level. The values enclosed in parentheses    are optional. Module name is case insensitive, Function name is case sensitive. For example: NoImport=User32.DLL will suppress import patching for all functions in User32.DLL, and NoImport=User32.DLL:alloca will suppress import patching for alloca function in User32 module. The time and pages for suppressed functions are reported as part of their caller function. Multiple NoImport settings can be specified in both the application specific and the general [settings] sections. The settings from both sections are used. See also Imports setting. Output Overrides the path for MEA file (default is same as the application directory). Output [path]filename Overrides the path and/or name of the MEA file. Pages never Memory profiling is disabled (default). Pages Memory profiling is enabled. Data for all referenced pages is recorded. Pages Memory profiling is enabled. Data for new pages (faults) touched by each function is recorded.  This is configuration dependent setting, i.e., new pages list will be dependent on amount of available memory on your system.  This setting is useful when you want to profile an application on a specific configuration. Profile Sets profiling initially off.  Use this option in conjunction with StartCAP() and StopCAP() APIs to profile specific sections of code. Profile Sets profiling initially on (default). Profile never No profiling (no .MEA file generated). thread Timings will be per thread time (default for Windows 95). Thread times are available on Windows 95 Pentium machines and when memory profiling is not enabled. elapsed Timings will be elapsed time (default for Windows NT). UseCycleCounter Disables usage of Pentium on-chip clock cycle counter. UseCycleCounter Enables usage of Pentium on-chip clock cycle counter (default on Pentium machines). Report Generator The report generator has the following syntax: REPORT filename[.MEA] [options] [@response-file] Option Description -ADDRESS Display function addresses as well as function names. -DELIMITED Generate a tab-delimited report file suitable for use in a spreadsheet program like Excel. -EXCEL Synonym for -DELIMITED included for IceCAP 1.0 compatibility. -IGNORE:name Ignore time and pages used in and below the named function. This option lets you exclude uninteresting consumers of time like GetMessage. Calls to  ignored  functions show up in the report, but with zero time. The ICAP API functions (StartCAP, etc.) are automatically  ignored Also, see -SUPPRESS option. -MODULES Display module and function names. -NOATTRIBTRACE Ignore call attribution (inclusive/exclusive times, pages touched) information in the trace output. IceCAP 3.1 added this information. This option was added for backward compatibility. -NOFUNCLIST Ignore caller/callee lists from the output. This option is useful, if you are only interested  in summaries or trace output. -NOHEADERS Suppress the column headers in the report file. You don t get headers if you specify  DELIMITED. -NOINDENT Suppress function name indentation in trace output (-DELIMITED output is never indented) -NOSUMMARY Suppress the  top-10 functions  reports at the start of the output file. Use this if you want one list of functions and you re specifying the sort order. -NOSYSTEM Suppress reporting of system calls. This is like using the  SUPPRESS option to suppress calls to KERNEL32, USER32, and GDI32. The suppressed functions don t show up in the report, but the time they consumed is included in the exclusive (non-attributed) time of their callers as well as in the inclusive (fully attributed) time. -NOTIMES Timing information is not included in the report. However, function names and the number of calls information is included. This option is useful when you have recorded memory reference data and do not want to see execution (timing) columns in the report. -NOWARN If you have ignored or suppressed functions, the report normally contains a series of warnings aimed at avoiding surprises in the report. Use this option to suppress the warnings. This option will also suppress command line warnings about missing symbol files, etc. -OVERHEAD:n Specifies an additional overhead amount to be subtracted from each incoming time stamp. This is an escape valve to deal with incorrect calibration of the time stamp determination overhead. You can adjust this so that an empty function appears to consume just a few machine cycles. -PAGELIST[:Section] Includes detailed page list identifying each page as Code, Data, or Stack and if possible, resolving it s symbol. Default for this option is OFF, i.e. page lists are not printed. This list consists of exclusive pages referenced by the corresponding function. Inclusive list of pages is not printed. Possible values for [:Section] are: TRACE, i.e., -PAGELIST:TRACE. The page list information is included in the trace output, but not in the caller/callee list. BODY, i.e., -PAGELIST:BODY. The page list information is included for the caller/callee list, but not for the trace output. None, i.e., -PAGELIST. This is the default value. The page list information is printed for both caller/callee list and the trace output. This option is valid only if memory page information was recorded by ICAP.DLL and the DELIMITED option was not used. -PCVA Include extra detail for Program Counter and Virtual Address. This option works with  PAGELIST option to provide extra information for each listed page. Default for this options is ON when  PAGELIST option is used. Please see  Page Lists  section for details on these columns. If PAGELIST option is not specified, then this option turns the PAGELIST option ON. -REMOTE:drive Specifies a drive letter to use instead of whatever is recorded in the MEA file. For example, if your test run loaded modules from a C: drive but you are running the report from a networked computer where that drive is now the X: drive, say  -REMOTE:X: . (The last colon is optional.) -SORTBY:how Specifies how to sort the main section of the report. The choices are: EXCLCODE Sort by descending number of exclusive code pages. EXCLDATA Sort by descending number of exclusive data pages. EXCLTIME Sort by descending exclusive (non-attributed) time. Use this to identify functions that time consumers and may need to be re-coded. CALLS Sort by descending number of function calls. INCLCODE Sort by descending number of inclusive code pages. INCLDATA Sort by descending number of inclusive data pages. INCLTIME Sort by descending inclusive (fully attributed) time. Use this to identify algorithmic problems where the time spent in and below a function is of interest. Sort alphabetically by function name (the default). Leading underscores aren t used in the sort. -START:n Ignores all records whose cumulative time is less than n. Combining this option with  STOP option is a good way of reducing the size of report as well as identifying functions in a specific time frame.  Cumulative time for any function can be found in the trace output. -STOP:n Ignores all records whose cumulative time is greater than n. Combining this option with  START option is a good way of reducing the size of report as well as identifying functions in a specific time frame. -SUPPRESS:name Suppress calls to functions in a specified module. The time and pages referenced by suppressed functions do not show up in the report, but are included in the exclusive (non-attributed) time of their callers as well as in the inclusive (fully attributed) time. See also the -IGNORE option. -THREAD:n Only process records for thread n -TRACE Generates a call/return trace from each of the data records in the MEA file. See  Trace output  section for more information. You can mix options and the MEA filename in any order. You can place any or all of the command-line options in a response file, and you can nest response files. This functionality is mostly meaningless generality, but you might want long lists of -IGNORE or -SUPPRESS options that won t easily fit on a command line. The output file is an ASCII file named  filename.RPT  in the same directory as the MEA file. You can t currently change this. Use your favorite editor to view it, or specify -DELIMITED and use Excel. NOTE! When running report.exe, you may get error messages such as: ERROR: ReadRecords unknown record type 0 ERROR: CMEARecordEnum Unrecognized record type 0 . This message generally means that ICAP.DLL was unable to close the .MEA file properly at the end of the profile run.  ICAP.DLL closes the MEA file when it receives the DLL_PROCESS_DETACH message. The resulting report will still be correct - all that has happened is that REPORT has skipped the part of the .MEA file that did not contain real records. Reading reports IceCAP reports have four sections: Headers, Summaries, Caller/Callee lists, and the optional trace output. Report Headers. This section shows reference information useful for interpreting reports, e.g., the command line used to invoke report (handy for remembering which options were specified), configuration information about the machine used to generate the profile, and the profile options used. Key report header fields are explained below: Time type: The choices are Elapsed or Thread times. Thread times are only available on Windows 95 Pentium machines. Time method: The choices are Pentium cycle counter or the  QueryPerformanceCounter. Pentium cycle counts are more granular than units returned by the QueryPerformanceCounter API. Time frequency (units per millisecond): This value is taken from the CycleSpeed setting of the ICAP.INI file. IceCAP does not detect or use this value. This value could be helpful in interpreting the time units.  Time overhead: Default is 33. IceCAP excludes all the time that is spent in ICAP.DLL except for the minuscule portion where actual time stamp is taken. Report subtracts this value from each function to make this adjustment. You can change this value by using the -OVERHEAD option of Report. Summaries Following summaries are printed by default. Top 10 functions by number of calls. Top 10 functions by exclusive (non-attributed) time. Top 10 functions by inclusive (fully attributed) time. Top 10 functions by exclusive (non-attributed) CODE Pages. Top 10 functions by exclusive (non-attributed) DATA Pages. Top 10 functions by inclusive (fully attributed) CODE Pages. Top 10 functions by inclusive (fully attributed) DATA Pages. Summaries related to time can be suppressed by specifying -NOTIMES option, and summaries related to memory (pages) are printed only if memory profiling was enabled.  Summaries section can be suppressed by using -NOSUMMARIES option. Caller/Callee function list In general, the report is a series of blocks like this:    <Function that called Foo    >Function called by Foo Inclusive (fully attributed) time refers to time spent in Foo and in the functions which Foo may have called. Exclusive (non attributed) time refers to time spent in Foo excluding functions which Foo may have called.  For example, If the exclusive time for Foo is 5 cycles and Foo calls only Bar whose exclusive time is 10 cycles then the inclusive time for Foo will be 15 cycles. Similarly, inclusive pages refer to pages referenced by Foo and functions which Foo may have called. Exclusive pages refer to pages referenced by Foo excluding the pages referenced by functions which Foo may have called. This section of the report can be suppressed by using the -NOFUNCLIST option. Trace output This section of the report prints profile information for every profile event in an application. The profile event is defined as every function entry and exit in the profiled section of the application. The function entry point is signified by a plus   sign and an exit is signified by a minus   sign. The  Delta  columns represent time and/or pages since the last profile event. The  Cumulative  columns represent total time and/or pages. While the function list output can answer a question like:  How many times function foo was called? ,  the trace output is useful in answering the question:  How many timing and memory resources were used on the nth call to function Foo? NOTE: Generating trace output is an intensive process and therefore takes considerably longer than when normal reports are produced.  You must use the -TRACE option to print this section. Miscellaneous report topics Symbols If a function is listed as a module + offset, then IceCAP was unable to find the symbol name for that function. If the symbol information is in a PDB or DBG file, IceCAP uses the following algorithm to find the symbol file: First, IceCAP looks for symbol files at the location stored in the .EXE or .DLL Next, IceCAP looks for the symbol file in the same directory as the .EXE or .DLL. NOTE: IceCAP is unable to report symbol names for static functions. IceCAP will recognize (i.e. display module names and symbols for) DLLs that are either statically referenced or which are loaded with any flavor of LoadLibrary. Times IceCAP measures different times in different units based on the configuration used for profiling. You can control time types and units using ICAP.INI options (see   option and  UseCycleCounter  option. The defaults are: Configuration Units Pentium running Win95 thread CPU cycles 486 running Win95 elapsed QueryPerformanceCounter ticks Pentium running NT elapsed CPU cycles 486 running NT elapsed QueryPerformanceCounter ticks Page Lists When memory profiling is ON, IceCAP reports CODE and DATA pages referenced by each profiled function. You can use -Pagelist option to get extra detail for each page. CODE page list columns have the following  meanings: Column Description Address of the referenced code page Module +  Offset for the address in Column 1. This column is blank if the module for this address is not found. Program Counter, i.e., Address of the instruction on the Code page that first caused this code page to be referenced. Exact symbol, Nearest symbol + Offset, or Module + Offset for the address in Column 3. This column is blank, if the module for the address is not found. *These columns can be suppressed by using the -NOPCVA option. In the page list output, DATA pages are further broken down into STACK pages and DATA pages. DATA and STACK page list columns have the following meanings: Column Description Address of the data page which was referenced. Module +  Offset for the address in Column 1. This column is blank, if the module for this address is not found. Program Counter, i.e., Address of the instruction on the Code page which first caused this data page to be referenced. Exact symbol, Nearest symbol + Offset, or Module + Offset calculated for the address in Column 3. This column is blank if the module for this address is not found. Virtual Address, i.e., the address on the data page which first caused the data page to be referenced. Exact symbol, Nearest symbol + Offset, or Module + Offset for the address in Column 5. If the module for this address is not found then this column is blank.  NOTE: This column will mostly be blank because for dynamic data addresses, which is mostly the case, a symbol can not be found. *These columns can be suppressed by using the -NOPCVA option. Delimited reports The -DELIMITED option is used to generate a tab-delimited report file for use in a spreadsheet program like Excel. To facilitate sorting and analyzing of report data, the delimited output fields are organized differently than the text output report. Delimited output fields are ordered as follows: 0 = total root function data, 1 = callee data, 2 = caller data Function Either root, callee, or caller (based on type) Address Function  address (if -ADDRESS specified) Module Function module name (if -MODULES specified) #Calls Total number of root calls, root calls from function, or root calls to function (based on type) %Calls #Calls / total calls Excl Time Total time spent in function, when called by function, or in child function (based on type) Min Excl Minimum exclusive time for single call Max Excl Maximum exclusive time for single call Avg Excl Exclusive Time / # of Calls %Total Excl Exclusive Time / Total time Incl Time Total time spent in function and children, when called by function, or in child tree (based on type) Min Incl Minimum inclusive time for single call Max Incl Maximum inclusive time for single call Avg Incl Inclusive Time / # of Calls %Total Incl Exclusive Time / Total time Excl Code Pages Total number of exclusive code pages referenced by this function  Excl Data Pages Total number of exclusive data pages referenced by this function Incl Code Pages Total number of inclusive (function and children) code pages referenced by this function Incl Data Pages Total number of inclusive (function and children) data pages referenced by this function Root Function Root function Root Address Root function address (if -ADDRESS specified) Root Module  Root function module name (if -MODULES specified) Root #Calls Total number of root calls  Root Excl Time Total time spent in root function Root Incl Time Total time spent in root function and children Root Excl Code Pages Total number of exclusive code pages referenced by the root function Root Excl Data Pages Total number of exclusive data pages referenced by the root function Root Incl Code Pages Total number of code pages referenced by the root function and its children Root Incl Data Pages Total number of data pages referenced by the root function and its children Column 2 can be used as part of a sort sequence to relate lines together because it always contains the function name. For example, sorting on column 2 (function) and column 1 (type) gives an alphabetic sort, whereas sorting on column 24 (root #calls), column 2 (function), and column 1 (type) gives a by calls sort.  Controlling data collection ICAP exports two sets of APIs: Thread specific and Process specific. Both sets of the APIs can be used to control whether profiling data is collected or not. Thread specific APIs These APIs operate only on the thread in which they are called. For example, if you have two threads with profiling on and you call SuspendCAP in one thread, profiling is suspended only for that thread. Thread specific APIs are: StartCAP() Start profiling. StopCAP() Stop profiling SuspendCAP() Suspend profiling ResumeCAP() Resume profiling These API s manipulate two per thread counters within ICAP.DLL: Start/Stop counter and Suspend/Resume counter. Process specific APIs These APIs operate on all of the threads in an application, i.e., the profiling is started or suspended for all of the threads. StartCAPAll() Start profiling. StopCAPAll() Stop profiling SuspendCAPAll() Suspend profiling ResumeCAPAll() Resume profiling These APIs manipulate two per-process counters within ICAP.DLL: Start/Stop counter and Suspend/Resume counter. Example This example shows how to use IceCAP APIs to profile certain functions and suspend profiling around un-interesting functions. Consider the scenario as depicted in the following diagram:  Call to function1 is enclosed in a StartCAP/StopCAP pair. If profiling is initially set off by including profile=0 setting in ICAP.INI, this turns profiling for function1 ON. Function1 calls function2. In function2, call to function3 is enclosed in another StartCAP/StopCAP pair. Profiling continues, because the StartCounter is still greater than 0. In function3, calls to a function like  waiting for user input  are enclosed in SuspendCAP()/ResumeCAP pair. This skips profiling for the  waiting for user input  function.  In this example, SuspendCAP()/ResumeCAP() pair can not be replaced with StartCAP()/StopCAP(). This is because the StartCounter will still be greater than 0 and profiling will continue. ICAPCTRL Applet The ICAPCTRL applet provides additional profiling control with its Start, Stop, Suspend, and Resume buttons. These buttons control a global start and suspend counter and work in conjunction with the thread and process specific counters. See API Counters below for more information on this topic.   EMBED PBrush   If you are going to use the API or ICAPCTRL, you should have a  profile=0  entry in ICAP.INI. Otherwise, ICAP will start profiling the application from its very first function call anyway. If you have added a  profile=0  entry to ICAP.INI that you later want to undo, you can either remove the entry or change the value to a nonzero numeric value such as  . This will cause profiling to commence when the application starts. It is not necessary to run ICAPCTRL to profile applications. API counters IceCAP maintains three sets of Start/Stop and Suspend/Resume counters: Per-thread counters. These counters are manipulated by the thread specific APIs as described above. Per-process counters. These counters are manipulated by the process specific APIs as described above. Global counters. These counters are system-wide counters and can be manipulated by using ICAPCTRL applet as described above. The start/stop counter indicates the relative excess of StartCAP calls over StopCAP calls. This counter must be greater than zero for data to be collected. The suspend/resume counter indicates the relative excess of SuspendCAP calls over ResumeCAP calls. This counter must be less than or equal to zero for data to be collected. In tandem, these counters allow an application to temporarily suspend data collection by calling SuspendCAP even if someone should call StartCAP. An application can also call StartCAP and StopCAP in a naturally matching way without disabling profiling on behalf of a spawning application. IceCAP uses the following algorithm to determine if profiling for a given thread is ON or OFF: If ((thread-start-count + process-start-count + global-start-count) > 0 AND (thread-suspend-count + process-suspend-count + global-suspend-count) <= 0), then this thread is being profiled otherwise the profiling is suspended or OFF. The global counts never change per thread or per process counts and vice versa, but all are used to determine profiling state. Special Problems Assembly language The assembly language functions can be profiled by putting a _penter call into the function prologue. This can be automatically done with code like this: profile = 1 include prologue.inc myfcn proc far c public uses edi, ... Alternatively: include prologue.inc myfcn proc far c public <profile> uses edi, ... Turning profiling off There are three ways in which profiling can be disabled: By adding a section to ICAP.INI that includes a profile=never statement. Relinking the application with PENTER.LIB instead of ICAP.LIB. This stubs out all of the ICAP calls. The application can always be linked later with ICAP.LIB to restore the profiling capability. Recompiling everything without the -Gh option and with -DPROFILE=0.  This, of course, makes the application unprofilable. NT 4.0 Fibers NT 4.0 added support for a new execution context called fiber. Fiber is a lightweight execution context and has following characteristics: Each Fibers contain a separate stack Fibers run on top of native Win32 threads. Actually from the system's standpoint, a fiber assumes the identity of the Win32 thread it is running on.  Fiber shares the thread local storage of its parent thread. Fibers are non-preemptive with respect to the thread they are currently running on i.e., they are switched manually. IceCAP 3.1 supports applications which use fibers. As noted above, fibers are only available on NT 4.0. When an application uses fibers, the per-thread APIs (StartCAP, StopCAP, ResumeCAP, SuspendCAP) are treated as fiber specific. In fact, IceCAP assumes that each thread as at least one fiber. If an application does use Fibers and profile=0 in ICAP.INI then following will be true: StartCAP will start profiling for the Fiber from which the StartCAP API call was made. Subsequent Fibers for the same thread will continue to have the profiling off. The user will have to issue StartCAP for each Fiber. Similarly StopCAP will stop profiling for the Fiber from which the StopCAP was called. IceCAP trace output includes the fiber number after the thread ID. For example, if an application creates three fibers from thread number 3, the thread ID for the first fiber will be printed as 3, the second fiber will be printed as 3.1, the third fiber as 3.2, and so on. Note that the id for the first fiber is not printed. Memory Profiling Notes When profiling an application for memory references, keep the following in mind: Even though IceCAP allows you to profile an application for execution and memory at the same time,  the timing information in such case is heavily skewed and should not be relied upon for performance tuning purposes. We recommend profiling your application for execution and memory separately. Memory profiling will slow the execution of your application. Profiling for all pages (Pages=All setting) is slower than profiling for page faults (Pages=New setting). This is because, when Pages=All, ICAP.DLL will clear the working set for the application at every call entry and exit. Instead of gathering memory data for all of your application, we suggest that you start with profiling off (profile=0 in ICAP.INI) and use StartCAP(), StopCAP() APIs to record memory reference data for the critical portions of your application. When memory profiling is ON, the amount of data that ICAP.DLL needs to record to MEA file is considerably larger than the execution profiling data. When memory profiling data is recorded, allow MEA file size to be 2 to 3 times larger than when only execution data is recorded. When profiling multiple threads for memory, the IceCAP will record page reference data for the first thread that profiling was turned on. For all subsequent threads for which profiling is turned on, only timing (execution) data is recorded and page reference data is ignored. If an application has any background threads running while memory reference data is recorded, the page reference lists will be contaminated with pages belonging to background threads. Ideally, while doing memory profiling, all background threads should be turned off. However, if this is not possible we suggest that you minimize the number of background threads and be aware of such contamination. When an application is profiled under Windows 95, the system pages information is not process specific. Under Windows 95, system pages are shared by all processes. Furthermore, some of the system pages are always locked. Therefore, under Windows 95 system pages report could include pages that were brought in by another process and some system pages (that are always locked) may never show up in the page reference list. On Windows 95, when memory profiling is ON, IceCAP is not able to record thread times correctly. Therefore, on Windows 95, if memory profiling is ON,  IceCAP defaults to the  time=elapsed  setting. Profiling for Memory  Out-of-process When profiling for memory in-process, IceCAP excludes the pages used by ICAP.DLL. If the profiled application also uses any of the pages which are used by ICAP.DLL, then these pages will be incorrectly excluded from the report. Generally, this will only happen if your application was using the same working set or system APIs as ICAP.DLL   a rare case. If you are profiling for new pages (Pages=New setting), this is even a more trivial problem.  If you are concerned about this IceCAP behavior, you can profile for memory  out-of-process . This is where you run your application through ICECAP.EXE (provided on the IceCAP share). ICECAP.EXE then spawns the application as a debugee process and measures memory data out-of-process. To use ICECAP.EXE, enter the following as command line: ICECAP <your-app> <your-app-options> For example, to profile  Sample -X , you would run  ICECAP Sample -X NOTE: Recording page reference data out-of-process requires that at every profile event there is a context switch to the parent application (ICECAP.EXE), which records the data and switches control back to ICAP.DLL. This means that  gathering memory data  out-of-process  considerably slows your application. When memory profiling data is gathered using ICECAP.EXE, the differences in the following ICAP.INI settings should be noted: Setting In-process memory profiling Out-of-process memory profiling (ICECAP.EXE is used). Pages=All Memory profiling is enabled. All referenced pages for each function are recorded. Memory profiling is enabled (default). All referenced pages for each function are recorded. Pages=New Memory profiling is enabled. Only page faults for each function are recorded. Memory profiling is enabled. Only page faults for each function are recorded. Pages=Never Memory profiling is disabled (default). Pages=All setting is assumed, i.e., memory profiling is enabled and all referenced pages for each function are recorded. Summary of Restrictions Free disk space equal to MaxMeaSize (default 32M) is required. (icap.dll creates a large memory mapped file during the profile run). If an application calls setjmp, then the runtime library DLL must be used. Code which directly modifies return addresses on the stack can not be profiled. Do not use the optidata linker option when building for profiling on Windows 95 (as this prevents IceCAP from safely writing to the import table). If function depth exceeds MaxCallDepth (default 256) the profiling is suspended. Only public functions are listed in the reports. Functions called through a GetProcAddress pointer can not be profiled, unless they were compiled with -Gh and linked with ICAP.LIB Second instance of a profiled application can run but only the first one can be profiled. Memory reference data is only recorded for the first thread that profiling is ON. For subsequent threads only execution (timing) data is recorded. IceCAP Support, Aliases, and Web sites FAQ.DOC This file, available on the IceCAP share, includes answers to most frequently asked questions and is regularly updated. icapsup Use the icapsup alias for general support questions. icapbug Use the icapbug alias to send bug reports or suggestions. If reporting a bug, please include the usual fun details like operating system & version, processor type, ICAP.INI file (if any), steps to repro. icapuser Join the icapuser alias to receive information about subsequent releases and to share feedback with other IceCAP users. IceCAP web site The IceCAP home page can be accessed at http://pdrserve/IceCAP/ Toolbox This is an internal web site which has collection of tools which are available for sharing across Microsoft. If you have a macro, utility, or applet that enhances the usability of IceCAP, please add it to this web site. You can access the Toolbox web site at http://pdrserve/Toolbox/ About Internal Tools "Our mission is to provide Microsoft with a competitive advantage by providing the best development tools and processes If you have an idea for a development tool that can help us fulfill this mission, please contact GSRana. To view the current list of our projects visit our web site at http://pdrserve/Tooltown/  Import patching allows IceCAP to report time and memory used by functions in DLLs which are not compiled for profiling, e.g., system, user32, etc.,  See FAQ.DOC on the IceCAP share for more explanation on this topic.  Run Link -dump -headers command, and look at the debug directory information to see this location.  In this example, the  profile  option appears in the  macroarg  portion of the syntax specified in the MASM Programmer s Guide.  ICAPEXP.H assumes you mean PROFILE = 1 if you don t define the symbol explicitly. Why else would you have included the file? IceCAP 3.1 User s Guide m Confidential Page  void main ( ) StartCAP(); call to function1 StopCAP(); call function2 function1 StartCAP(); call to function3 StopCAP(); function2 SuspendCAP(); Wait for user input ResumeCAP(); function3 Normal Heading 1 Heading 2 Heading 3 Heading 4 Default Paragraph Font TOC 3 TOC 2 TOC 1 Footer Footnote Reference Footnote Text Normal Indent table text title subtitle byline Header sample TOC 4 TOC 5 TOC 6 TOC 7 TOC 8 TOC 9 Body Text future Question _Toc356562721 _Toc317804749 _Toc356562722 OLE_LINK1 _Toc356562723 _Toc356562724 _Toc356562725 _Toc356562726 _Toc356562727 _Toc317804750 _Toc356562728 _Toc317804751 _Toc356562729 _Toc356562730 _Toc356562731 _Toc356562732 _Toc317804752 _Toc356562733 _Toc356562734 _Toc356562735 _Toc356562736 _Toc356562737 _Toc356562738 _Toc356562739 _Toc356562740 _Toc356562741 _Toc356562742 _Toc356562743 _Toc356562744 _Toc356562745 _Toc317804753 _Toc356562746 _Toc317804754 _Toc356562747 _Toc317804755 _Toc356562748 _Toc356562749 _Toc356562750 _Toc317804764 _Toc356562751 _Toc356562752 _Toc317804756 _Toc356562753 _Toc356562754 _Toc356562755 _Toc356562756 _Toc356562757 _Toc356562758 _Toc356562759 _Toc356562760 C:\GSR\icecap31.doc C:\GSR\icecap31.doc C:\GSR\icecap31.doc C:\GSR\icecap31.doc C:\GSR\icecap31.doc C:\GSR\icecap31.doc C:\gsr\icecap31.doc C:\gsr\icecap31.doc G. S. Rana C:\icap\docs\user\icecap31.doc C:\GSR\icecap3A.doc @\\GSRANA\HP5L Ne00: winspool HP LaserJet 4L \\GSRANA\HP5L etter \\GSRANA\HP5L etter Times New Roman Symbol Arial Microsoft Logo Book Antiqua Courier New Wingdings Palatino IceCAP!Internal Call Attributed Profiler For Windows 95 and Windows NT G. S. Rana
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\tools\drmlist.txt ===
swenum.sys:1100
ks.sys:1100
acpi.sys:1000
usbccgp.sys:1000
sbemul.sys:1000
drmk.sys:1000
kmixer.sys:1000
portcls.sys:1000
usbaudio.sys:1000
ichaud.sys:1000
opl3sax.sys:1000
ctlsb16.sys:1000
ds1wdm.sys:1000
cwcwdm.sys:1000
cwcspud.sys:1000
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\whistler\eng\eng.txt ===
InstallPrompt=This will install Microsoft DirectX 8.0.  Do you wish to continue?
FinishMessage=Microsoft DirectX 8.0 Setup has completed.
FriendlyName=Microsoft DirectX 8.0 Setup
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\tools\includlist.txt ===
#
#	Catalog Building Include List
#
# put in all the files and/or extensions you want to
# include
.DLL
.EXE
.SYS
.AX
.CER
.COM
.DRV
.INF
.KBD
.VXD
.INI
.ICM
.RSC
.DLS
.ILF
.MPD
.ACV
.BIN
.CNT
.CPL
.CSP
.DAT
.HLP
.PCI
.PDR
.SBK
.TXT
.WAV
.MWS
.CAB
.TLB
.NLS
.OCX
.CPX
.MSC
.ACM
.MOD
.TSP
.RAT
.CHI
.3GR
.DTD
.WMF
.386
.XML
.CHM
.SF2
.ENU
.MMF
.MOF
.MFL
.LRC
.MFM
.MS
.OSP
.DOS
.DS
.DWN
.IDF
.CFG
.22
.V22
.V44
.SPD
MMTASK.TSK
I81XCFG.ICO
TESTCAM.ICO
TCAMLOGO.JPG
NETWARE.NW4
LT2.MSG
ENUIGFX.LRC
NETATKI.INF
NETIBM.INF
NETCPQ.INF
NETICARD.INF
WESTCODEC.INF
NETFL32.INF
USB8023.INF
NETCE2.INF
USBWAVE.INF
NETEL59X.INF
NETCABLE.INF
TIMES.TTF
TIMESBD.TTF
TIMESBI.TTF
TIMESI.TTF
COUR.TTF
COURBD.TTF
COURBI.TTF
COURI.TTF
ARIALUNI.TTF
ARIAL.TTF
ARIALBD.TTF
ARIALBI.TTF
ARIALI.TTF
MICROSS.TTF
TAHOMA.TTF
TAHOMABD.TTF
VGA850.FON
8514FIX.FON
8514OEM.FON
8514SYS.FON
COURF.FON
SERIFF.FON
SMALLF.FON
SSERIFF.FON
SYMBOLF.FON
COURE.FON
DOSAPP.FON
MODERN.FON
SERIFE.FON
SMALLE.FON
SSERIFE.FON
SYMBOLE.FON
VGAFIX.FON
VGAOEM.FON
VGASYS.FON
MARLETT.TTF
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\whistler\eng\sedeng.txt ===
This program is not designed for use on Win9X/WinME. Press OK to exit.
"DirectX Cabpack Setup"
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\whistler\eng\webeng.txt ===
SUPPLEMENTAL END USER LICENSE AGREEMENT FOR MICROSOFT SOFTWARE

IMPORTANT:  READ CAREFULLY - The Microsoft Corporation ("Microsoft") operating system components which you are about to install, including any "online" or electronic documentation ("OS COMPONENTS"), are subject to the terms and conditions of the agreement under which you have validly licensed the applicable Microsoft operating system product identified below (each an "End User License Agreement" or "EULA") and the terms and conditions of this Supplemental EULA.  BY INSTALLING, COPYING OR OTHERWISE USING THE OS COMPONENTS, YOU AGREE TO BE BOUND BY THE TERMS AND CONDITIONS OF THE EULA FOR THE APPLICABLE OPERATING SYSTEM PRODUCT IDENTIFIED BELOW AND THIS SUPPLEMENTAL EULA.  IF YOU DO NOT AGREE TO THESE TERMS AND CONDITIONS, DO NOT INSTALL, COPY OR USE THE OS COMPONENTS.  

NOTE:  IF YOU DO NOT HAVE A VALID EULA FOR EITHER MICROSOFT WINDOWS 95, WINDOWS 98, WINDOWS ME, OR WINDOWS 2000, (each an "OS Product"), YOU ARE NOT AUTHORIZED TO INSTALL, COPY OR OTHERWISE USE THE OS COMPONENTS AND YOU HAVE NO RIGHTS UNDER THIS SUPPLEMENTAL EULA.

Capitalized terms used in this Supplemental EULA and not otherwise defined herein shall have the meanings assigned to them in the applicable OS Product EULA.

General.  The OS COMPONENTS are provided to you by Microsoft to update, supplement, or replace existing functionality of the applicable OS Product. Microsoft grants you a license to use the OS COMPONENTS under the terms and conditions of the EULA for the applicable OS Product (which is hereby incorporated by reference) and the terms and conditions set forth in this Supplemental EULA, provided that you comply with all such terms and conditions.  To the extent that any terms in this Supplemental EULA conflict with terms in the applicable OS Product EULA, the terms of this Supplemental EULA control solely with respect to the OS COMPONENTS.  

Additional Rights and Limitations.  

*	If you have multiple validly licensed copies of the applicable OS Product(s), you may reproduce, install and use one copy of the OS COMPONENTS as part of such OS Product on each of your computers running validly licensed copies of such OS Product(s) provided that you use such additional copies of the OS COMPONENTS in accordance with the terms and conditions above.  For each validly licensed copy of an applicable OS Product, you also may reproduce one additional copy of the OS COMPONENTS solely for archival purposes or reinstallation of the OS COMPONENTS on the same computer as the OS COMPONENTS were previously installed.  Microsoft retains all right, title and interest in and to the OS COMPONENTS.  All rights not expressly granted are reserved by Microsoft.

IF THE OS PRODUCT WAS LICENSED TO YOU BY MICROSOFT OR ANY OF ITS WHOLLY OWNED SUBSIDIARIES, THE LIMITED WARRANTY (IF ANY) INCLUDED IN THE OS PRODUCT EULA APPLIES TO THE OS COMPONENTS PROVIDED THE OS COMPONENTS HAVE BEEN LICENSED BY YOU WITHIN THE TERM OF THE LIMITED WARRANTY IN THE OS PRODUCT EULA. HOWEVER, THIS SUPPLEMENTAL EULA DOES NOT EXTEND THE TIME PERIOD FOR WHICH THE LIMITED WARRANTY IS PROVIDED.

IF THE OS PRODUCT WAS LICENSED TO YOU BY AN ENTITY OTHER THAN MICROSOFT OR ANY OF ITS WHOLLY OWNED SUBSIDIARIES, MICROSOFT DISCLAIMS ALL WARRANTIES WITH RESPECT TO THE OS COMPONENTS AS FOLLOWS:

DISCLAIMER OF WARRANTIES.  TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, MICROSOFT AND ITS SUPPLIERS PROVIDE TO YOU THE OS COMPONENTS, AND ANY (IF ANY) SUPPORT SERVICES RELATED TO THE OS COMPONENTS ("SUPPORT SERVICES") AS IS AND WITH ALL FAULTS; AND MICROSOFT AND ITS SUPPLIERS HEREBY DISCLAIM WITH RESPECT TO THE OS COMPONENTS AND SUPPORT SERVICES ALL WARRANTIES AND CONDITIONS, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, ANY (IF ANY) WARRANTIES OR CONDITIONS OF OR RELATED TO:  TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES, ACCURACY OR COMPLETENESS OF RESPONSES, RESULTS, LACK OF NEGLIGENCE OR LACK OF WORKMANLIKE EFFORT, QUIET ENJOYMENT, QUIET POSSESSION, AND CORRESPONDENCE TO DESCRIPTION.  THE ENTIRE RISK ARISING OUT OF USE OR PERFORMANCE OF THE OS COMPONENTS AND ANY SUPPORT SERVICES REMAINS WITH YOU.

EXCLUSION OF INCIDENTAL, CONSEQUENTIAL AND CERTAIN OTHER DAMAGES.  TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, IN NO EVENT SHALL MICROSOFT OR ITS SUPPLIERS BE LIABLE FOR ANY SPECIAL, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL DAMAGES WHATSOEVER (INCLUDING, BUT NOT LIMITED TO, DAMAGES FOR:  LOSS OF PROFITS, LOSS OF CONFIDENTIAL OR OTHER INFORMATION, BUSINESS INTERRUPTION, PERSONAL INJURY, LOSS OF PRIVACY, FAILURE TO MEET ANY DUTY (INCLUDING OF GOOD FAITH OR OF REASONABLE CARE), NEGLIGENCE, AND ANY OTHER PECUNIARY OR OTHER LOSS WHATSOEVER) ARISING OUT OF OR IN ANY WAY RELATED TO THE USE OF OR INABILITY TO USE THE OS COMPONENTS OR THE SUPPORT SERVICES, OR THE PROVISION OF OR FAILURE TO PROVIDE SUPPORT SERVICES, OR OTHERWISE UNDER OR IN CONNECTION WITH ANY PROVISION OF THIS SUPPLEMENTAL EULA, EVEN IN THE EVENT OF THE FAULT, TORT (INCLUDING NEGLIGENCE), STRICT LIABILITY, BREACH OF CONTRACT OR BREACH OF WARRANTY OF MICROSOFT OR ANY SUPPLIER, AND EVEN IF MICROSOFT OR ANY SUPPLIER HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. 

LIMITATION OF LIABILITY AND REMEDIES. NOTWITHSTANDING ANY DAMAGES THAT YOU MIGHT INCUR FOR ANY REASON WHATSOEVER (INCLUDING, WITHOUT LIMITATION, ALL DAMAGES REFERENCED ABOVE AND ALL DIRECT OR GENERAL DAMAGES), THE ENTIRE LIABILITY OF MICROSOFT AND ANY OF ITS SUPPLIERS UNDER ANY PROVISION OF THIS SUPPLEMENTAL EULA AND YOUR EXCLUSIVE REMEDY FOR ALL OF THE FOREGOING SHALL BE LIMITED TO THE GREATER OF THE AMOUNT ACTUALLY PAID BY YOU FOR THE OS COMPONENTS OR U.S.$5.00.  THE FOREGOING LIMITATIONS, EXCLUSIONS AND DISCLAIMERS SHALL APPLY TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, EVEN IF ANY REMEDY FAILS ITS ESSENTIAL PURPOSE.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win2k\brz\brz.txt ===
InstallPrompt=Este procedimento instalar o Microsoft DirectX 8.0. Deseja continuar?
FinishMessage=A instalao do Microsoft DirectX 8.0 foi concluda.
FriendlyName=Programa de Instalao do Microsoft DirectX 8.0
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win2k\brz\sedbrz.txt ===
Este programa no foi projetado para uso no Windows9X/WindowsME. Pressione OK para sair.
"Configurao do DirectX Cabpack"

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win2k\brz\webbrz.txt ===
CONTRATO DE LICENA DE USURIO FINAL COMPLEMENTAR PARA SOFTWARE MICROSOFT

IMPORTANTE:  LEIA COM ATENO - Estes componentes do sistema operacional Microsoft Corporation ("Microsoft"), incluindo qualquer documentao on-line ou eletrnica ("Componentes do Sistema Operacional"), esto sujeitos aos termos e condies do contrato sob o qual voc licenciou o sistema operacional Microsoft aplicvel ("Sistema Operacional") descrito abaixo (cada contrato, um "Contrato Licena de Usurio Final" ou "EULA" ) e aos termos e condies deste EULA complementar.  AO INSTALAR, COPIAR OU DE QUALQUER OUTRA FORMA USAR OS COMPONENTES DO SISTEMA OPERACIONAL, VOC EST CONCORDANDO EM VINCULAR-SE AOS TERMOS E CONDIES DO EULA DO SISTEMA OPERACIONAL APLICVEL E DESTE EULA COMPLEMENTAR.  CASO NO CONCORDE COM ESTES TERMOS E CONDIES, NO INSTALE, COPIE OU USE OS COMPONENTES DO SISTEMA OPERACIONAL.

OBSERVAO:  CASO VOC NO POSSUA UM EULA VLIDO PARA QUALQUER "SISTEMA OPERACIONAL" (SISTEMA OPERACIONAL MICROSOFT WINDOWS 95, WINDOWS 98, WINDOWS ME E/OU WINDOWS 2000) VOC NO ESTAR AUTORIZADO A INSTALAR, COPIAR OU DE OUTRA FORMA USAR OS COMPONENTES DO SISTEMA OPERACIONAL E VOC NO TER DIREITOS SOB ESTE EULA COMPLEMENTAR.

Os termos em letras maisculas usados neste EULA complementar e no definidos no mesmo tero os significados que lhes foram atribudos no EULA do SISTEMA OPERACIONAL aplicvel.

Geral. Os Componentes do Sistema Operacional so fornecidos a voc pela Microsoft para atualizar, complementar ou substituir a funcionalidade existente do Sistema Operacional aplicvel. A Microsoft concede a voc uma licena para usar os Componentes do Sistema Operacional sob os termos e condies do EULA do Sistema Operacional aplicvel (aqui incorporados como referncia) e sob os termos e condies estabelecidos neste EULA complementar, contanto que voc cumpra todos estes termos e condies. Quando os termos deste EULA complementar  divergirem dos termos do EULA do Sistema Operacional aplicvel, os termos deste EULA complementar  prevalecero somente com relao aos Componentes do Sistema Operacional.

Direitos Adicionais e Limitaes. 

*	Caso voc possua vrias cpias validamente licenciadas do(s) Sistema Operacional(s) aplicveis, voc poder reproduzir, instalar e usar uma cpia dos Componentes do Sistema Operacional como parte desse(s) Sistema(s) Operacional(s) aplicveis em todos os seus computadores que executem cpias validamente licenciadas do(s) Sistema(s) Operacional(s), contanto que voc use essas cpias adicionais dos Componentes do Sistema Operacional de acordo com os termos e condies acima. Para cada cpia validamente licenciada do Sistema Operacional aplicvel, voc tambm poder reproduzir uma cpia adicional dos Componentes de Sistema Operacional somente para fins de arquivo ou reinstalao dos Componentes de Sistema Operacional no mesmo computador em que foram instalados anteriormente. A Microsoft retm todos os direitos, titularidade e interesses relacionados aos Componentes do Sistema Operacional. Todos os direitos que no estejam expressamente concedidos so reservados  Microsoft.


CASO O SISTEMA OPERACIONAL APLICVEL TENHA SIDO LICENCIADO A VOC PELA MICROSOFT OU POR QUALQUER UMA DE SUAS SUBSIDIRIAS, A GARANTIA LIMITADA (SE HOUVER) INCLUDA NO EULA DO SISTEMA OPERACIONAL APLICVEL APLICA-SE AOS COMPONENTES DO SISTEMA OPERACIONAL, CONTANTO QUE OS COMPONENTES DO SISTEMA OPERACIONAL TENHAM SIDO LICENCIADOS POR VOC DENTRO DO PERODO DA GARANTIA LIMITADA DO EULA DO SISTEMA OPERACIONAL APLICVEL. NO ENTANTO, ESTE EULA COMPLEMENTAR NO ESTENDE O PERODO DE VIGNCIA DA GARANTIA LIMITADA.

SE O SISTEMA OPERACIONAL APLICVEL TIVER SIDO LICENCIADO A VOC POR UMA ENTIDADE QUE NO SEJA A MICROSOFT OU QUALQUER UMA DE SUAS SUBSIDIRIAS, A MICROSOFT SE ISENTA DE TODAS AS GARANTIAS COM RELAO AO COMPONENTE DO SISTEMA OPERACIONAL, DA SEGUINTE FORMA:

ISENO DE GARANTIA. NA EXTENSO MXIMA PERMITIDA PELA LEGISLAO APLICVEL, A MICROSOFT E SEUS FORNECEDORES FORNECEM A VOC OS COMPONENTES DO SISTEMA OPERACIONAL E QUAISQUER SERVIOS DE SUPORTE (SE HOUVER) ("SERVIOS DE SUPORTE") RELATIVOS AOS COMPONENTES DO SISTEMA OPERACIONAL NO ESTADO EM QUE SE ENCONTRAM E COM TODAS AS FALHAS, E A MICROSOFT E SEUS FORNECEDORES SE ISENTAM DE TODAS AS CONDIES E GARANTIAS RELACIONADAS AOS COMPONENTES DO SISTEMA OPERACIONAL E SERVIOS DE SUPORTE, SEJAM EXPRESSAS, IMPLCITAS OU LEGAIS, INCLUINDO, MAS NO SE LIMITANDO A QUAISQUER GARANTIAS OU CONDIES (SE HOUVER) RELACIONADAS A: TITULARIDADE, NO-VIOLAO, COMERCIALIZAO, ADEQUAO A UMA FINALIDADE ESPECFICA, AUSNCIA DE VRUS, RESPOSTAS COMPLETAS E CORRETAS, RESULTADOS, AUSNCIA DE NEGLIGNCIA OU AUSNCIA DE  ESFORO DE APRIMORAMENTO, USO PACFICO, POSSE PACFICA E CORRESPONDNCIA  DESCRIO. VOC ASSUME TODOS OS RISCOS RESULTANTES DO USO OU DO DESEMPENHO DOS COMPONENTES DE SISTEMA OPERACIONAL E DE QUALQUER SERVIO DE SUPORTE.

EXCLUSO DE DANOS INCIDENTAIS, CONSEQENCIAIS E OUTROS. NA EXTENSO MXIMA PERMITIDA PELA LEGISLAO APLICVEL, EM HIPTESE ALGUMA A MICROSOFT OU SEUS FORNECEDORES SERO RESPONSVEIS POR QUALQUER DANO ESPECIAL, INCIDENTAL, INDIRETO OU CONSEQENCIAL (INCLUINDO, MAS NO SE LIMITANDO A DANOS POR LUCROS CESSANTES, PERDA DE INFORMAES CONFIDENCIAIS OU OUTRAS, INTERRUPO NOS NEGCIOS, DANOS PESSOAIS, PERDA DE PRIVACIDADE, FALHA NO CUMPRIMENTO DE QUALQUER OBRIGAO (INCLUSIVE DE BOA-F E COM CUIDADOS RAZOVEIS), NEGLIGNCIA E QUALQUER OUTRA PERDA FINANCEIRA OU DE QUALQUER NATUREZA) RESULTANTES DO OU DE QUALQUER FORMA RELACIONADOS COM O USO OU INABILIDADE NO USO DOS COMPONENTES DO SISTEMA OPERACIONAL OU DOS SERVIOS DE SUPORTE OU O FORNECIMENTO OU FALHA NO FORNECIMENTO DE SERVIOS DE SUPORTE OU DE OUTRO MODO SOB OU COM RELAO A QUALQUER DISPOSIO DESTE EULA COMPLEMENTAR, MESMO QUE A MICROSOFT OU QUALQUER FORNECEDOR TENHAM SIDO ALERTADOS SOBRE A POSSIBILIDADE DE TAIS DANOS. 

LIMITAO DE RESPONSABILIDADE E RECURSOS. NO OBSTANTE QUAISQUER DANOS QUE VOC VENHA A TER POR QUALQUER RAZO (INCLUINDO, SEM LIMITAES, TODOS OS DANOS MENCIONADOS ACIMA E TODOS OS DANOS DIRETOS OU GERAIS), A RESPONSABILIDADE TOTAL DA MICROSOFT E DE QUALQUER UM DE SEUS FORNECEDORES,  SOB QUALQUER DISPOSIO DESTE EULA COMPLEMENTAR, E O EXCLUSIVO RECURSO DE QUE VOC DISPE PARA TODAS AS HIPTESES ACIMA SERO LIMITADOS AO VALOR EFETIVAMENTE PAGO POR VOC PELOS COMPONENTES DO SISTEMA OPERACIONAL OU US$5,00 (CINCO DLARES AMERICANOS), O QUE FOR MAIOR. AS LIMITAES, EXCLUSES E ISENES DE RESPONSABILIDADE ACIMA SE APLICAM NA EXTENSO MXIMA PERMITIDA PELA LEGISLAO APLICVEL, MESMO QUE QUALQUER RECURSO NO CUMPRA O SEU PROPSITO ESSENCIAL.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win2k\chs\sedchs.txt ===
Windows9X/WindowsME ʹøó밴ȷ˳
"DirectX Cabpack װ"

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win2k\chs\chs.txt ===
InstallPrompt=װ Microsoft DirectX 8.0Ƿ?
FinishMessage=Microsoft DirectX 8.0 װϡ
FriendlyName=Microsoft DirectX 8.0 װ
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win2k\cht\cht.txt ===
InstallPrompt=o|w Microsoft DirectX 8.0Cn~H
FinishMessage=Microsoft DirectX 8.0 w˵{wC
FriendlyName=Microsoft DirectX 8.0 w˵{
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win2k\cht\sedcht.txt ===
oӵ{O]pΦb Windows9X/WindowsME WCЫ [Tw] {C
"w DirectX Cabpack"
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win2k\cze\cze.txt ===
InstallPrompt=Tato akce nainstaluje rozhran Microsoft DirectX 8.0. Chcete pokraovat?
FinishMessage=Instalace rozhran Microsoft DirectX 8.0 byla dokonena.
FriendlyName=Instalace rozhran Microsoft DirectX 8.0
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win2k\chs\webchs.txt ===
Microsoft ûЭ

Ҫ֪ĶMicrosoft CorporationMicrosoftЩϵͳκΡĻӵĵOS  Microsoft òϵͳƷOS ƷʹɵЭԼÿһΪһݡûЭ顷Э顷ܱЭ顷ԼһװƻʽʹáOS ʾͬáOS ƷЭ顷ͱЭ顷ԼͬЩ벻ҪװƻʹáOS 

˵ûκΡOS ƷMICROSOFT WINDOWS 95WINDOWS 98 WINDOWS ME,/ WINDOWS  2000һЧЭ顷ȨװƻʽʹáOS ڱЭ顷ûκȨ

ڱЭ顷ʹòδڴʽԶõġOS ƷЭ顷й涨ĺ塣

һ涨Microsoft OS ṩԸ¡ȡáOS ƷйܡMicrosoft һ֤áOS ƷġOS ƷЭ顷еӦڱЭ顷ἰش뱾Э顷УͱЭ顷еʹáOS Э顷еκáOS ƷЭ顷егͻֻԡOS £ԱЭ顷еΪ׼

Ȩ

* áOS ƷĶЧɸСOS ƷЧɸмϽ֮ΪáOS ƷһָơװʹáOS һʹáOS ฽ӸáOS ƷÿһЧɸԣԽΪ˴浵ǰװЩOS ͬһ̨°װЩOS ĿĶЩOS һݸӸMicrosoft ԡOS һȨȨ档Microsoft ڴδʾһȨ

õġOS Ʒ Microsoft κȫӹ˾ʹɣõġOS ƷЭ顷еġޱ֤УЩOS õġOS ƷЭ顷ޱ֤ڻЩOS ʹɡǣЭ顷ӳáޱ֤ı֤ޡ

áOS Ʒ Microsoft κȫӹ˾֮һʵʹɣMicrosoft ЩOS йصһб֤£

֤÷ΧڣMicrosoft 乩Ӧԡ״Ұд󡱵ʽṩOS 롰OS صκΣУַ֧񣨡ַ֧񡱣 Microsoft 乩Ӧڴ˾͡OS ַ֧͡񡱷ʾġʾĻı֤ȨȨԡԡ޲Ӧ׼ȷԻԡʹûԽ޹ʧ޹⡢ܸŵʹȨܸŵռȨ˵һµκΣУ֤صκΣУ֤ɡOS κַ֧ʹûȫе

⡢ӡĳЩ⳥ų÷Χڣʹ Microsoft κιӦѱ֪𺦷ĿԣMicrosoft 乩Ӧ̾OS ַ֧Ļʹûʹйصġṩδṩַ֧񡢻ݻ漰Э顷κĻйصκġġֱӵġӵ⳥ʧϢϢʧӪҵжϡ˺˽й©δаŻڵκΡʧκǮϵʧʧɵ⳥е⳥Ρ

κͲ۷⳥ʲôԭɣе⳥ԼֱӵĻһԵ⳥Microsoft κιӦڱЭ顷κµȫԼΪȫ⳥õΨһΪOS ʵ֧ĿԪU.S.$5.00еĽϸ߿ųͷ÷ΧЧʹδﵽĿˡ
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win2k\eng\eng.txt ===
InstallPrompt=This will install Microsoft DirectX 8.0.  Do you wish to continue?
FinishMessage=Microsoft DirectX 8.0 Setup has completed.
FriendlyName=Microsoft DirectX 8.0 Setup
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win2k\cze\sedcze.txt ===
Tento program nen uren pro systm Windows9X/WindowsME. Klepnutm na tlatko OK ukonete instalaci.
"DirectX Cabpack Setup"

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win2k\cht\webcht.txt ===
MICROSOFT nϥΪ̼WɱvX

`NнХJӾ\ŪG Microsoft q]HU١uMicrosoftv^@~tΤA]AuuWvιql]HU١uOS v^A̾AΡ@QΤgvUz Microsoft @~tγn鲣~]HU١uOS ~v^uϥΪ̱vXv]HUC٬uϥΪ̱vXvΡuvXv^BHΥuWɱvXvҳWwPڿzCuOS v@g@QΤwˡBΨϥΡAYܡ@QΤPNuOS ~vuvXvPuWɱvXvWw󤧬CY@QΤᤣPNӵAhowˡBΨϥΡuOS vC

`NGY@QΤåNuOS ~v]MICROSOFT WINDOWS 95BWINDOWS 98BWINDOWS ME Ρ WINDOWS 2000^oĤuvXvAh@QΤYLvwˡBΨϥΡuOS vA礣ɦuWɱvXvҳWwvQC

uWɱvXvҦHjg^rLꤧWAY󥻬t~[HwqAwqPuOS ~vuvXvҫwNqۦPC

@WwCuOS vY Microsoft qѵ@QΤAHsBɥRΨNuOS ~v{\धΡCMicrosoft qv@QΤɦ̷ӬuOS ~vuOS ~vXvҳWwڡ]ӵگCWɱvX@HѰѦҡ^BHΥuWɱvXvڨϥΡuOS vvQAH@QΤuҦӵWwڪ̬CuWɱvXvڭYPuOS ~vXvҽĬAhNuOSvӨMHuWɱvXvڬǡC

LvQPC

*	un@QΤ֦huOS ~vXkvAYo@QΤҦuOS ~vXkvqWƻsBw˨èϥΤAuOS vA@ӵuOS ~v@AH@QΤϥθӵuOS vLɡAuWzWw̬C@NuOS ~vCXkvA@QΤot~ƻsAuOS v@sɥγ~AΩewwˡuOS vP@xqWAצwˡuOS vΡCPuOS v@vQBҦvMQqOd Microsoft qҦCҦg¤vQOd Microsoft qҦC

YuOS ~vYg MICROSOFT qΥѨ䧹֦lqұv@QΤ̡AhuOS ~vXvY]t󦳭岫dOAAΩuOS vAuOS v@QΤuOS ~vXv岫dOWwAgvϥΪ̬CMӡAuWɱvXväNӦ岫dOҴѤC

YuOS ~vY MICROSOFT qH~ΥѨ䧹֦lqH~Lcұv@QΤ̡Ah MICROSOFT qNӡuOS vѦpUz岫dOG

ѷ岫dOCkߤ\̤jd򤺡AMICROSOFT qΨӦV@QΤҴѤuOS vAHΥi[uOS v䴩A ]HU١u䴩Aȡv^AY{Υi㦳岫ӸgѡFB MICROSOFTqΨӴNuOS vΤ䴩AȧѥܡBqܩΪkw岫dOαA䤤]AҦvBIvBAʡBŦXSwγ~BtfrB^ǽTʩΧʡBGBLLΫDʻsy޳NBzZϥΡBezABPrԭz۲šAλPWz󶵥ئ岫dOαC]ϥΩξާ@uOS vΥu䴩Aȡvҥͤ@IAѡ@QΤۦӾC

HBlͩʩMYǨLl`vdưCbkߩҤ\̤jd򤺡AMICROSOFT qΨӹ@QΤ]ϥΩΤϥΡuOS vΡu䴩AȡvBѩΤണѡu䴩AȡvB̾ڥuWɱvXvWwAΥѩWz󶵥ئ]ҵoͤSOBHBέlͤl`Atl`vdA䤤]AQlBKΨLTB~_BӤHˮ`BpvI`BLkid]]A󵽷NΦXz`NUd^BLBHΥLΨLlAWw] MICROSOFT qg@QΤƥiӷl`oͤiʦӦҤPC

l`vMvCס@QΤ]ӾDl`]]AAҦWzl`HΤ@Τ@l`^AMICROSOFT qΨӨ̥uWɱvXvکtl`v`BHΡ@QΤNWzةҾ֦ߤ@vAH@QΤNuOS vڤwIکά $5.00 ̤BCezBưWwHΤѳdOnAYkߩҤ\̤jd򤺾AΡAYϥvLkF򥻥تɥMC
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win2k\eng\webeng.txt ===
SUPPLEMENTAL END USER LICENSE AGREEMENT FOR MICROSOFT SOFTWARE

IMPORTANT:  READ CAREFULLY - The Microsoft Corporation ("Microsoft") operating system components which you are about to install, including any "online" or electronic documentation ("OS COMPONENTS"), are subject to the terms and conditions of the agreement under which you have validly licensed the applicable Microsoft operating system product identified below (each an "End User License Agreement" or "EULA") and the terms and conditions of this Supplemental EULA.  BY INSTALLING, COPYING OR OTHERWISE USING THE OS COMPONENTS, YOU AGREE TO BE BOUND BY THE TERMS AND CONDITIONS OF THE EULA FOR THE APPLICABLE OPERATING SYSTEM PRODUCT IDENTIFIED BELOW AND THIS SUPPLEMENTAL EULA.  IF YOU DO NOT AGREE TO THESE TERMS AND CONDITIONS, DO NOT INSTALL, COPY OR USE THE OS COMPONENTS.  

NOTE:  IF YOU DO NOT HAVE A VALID EULA FOR EITHER MICROSOFT WINDOWS 95, WINDOWS 98, WINDOWS ME, OR WINDOWS 2000, (each an "OS Product"), YOU ARE NOT AUTHORIZED TO INSTALL, COPY OR OTHERWISE USE THE OS COMPONENTS AND YOU HAVE NO RIGHTS UNDER THIS SUPPLEMENTAL EULA.

Capitalized terms used in this Supplemental EULA and not otherwise defined herein shall have the meanings assigned to them in the applicable OS Product EULA.

General.  The OS COMPONENTS are provided to you by Microsoft to update, supplement, or replace existing functionality of the applicable OS Product. Microsoft grants you a license to use the OS COMPONENTS under the terms and conditions of the EULA for the applicable OS Product (which is hereby incorporated by reference) and the terms and conditions set forth in this Supplemental EULA, provided that you comply with all such terms and conditions.  To the extent that any terms in this Supplemental EULA conflict with terms in the applicable OS Product EULA, the terms of this Supplemental EULA control solely with respect to the OS COMPONENTS.  

Additional Rights and Limitations.  

*	If you have multiple validly licensed copies of the applicable OS Product(s), you may reproduce, install and use one copy of the OS COMPONENTS as part of such OS Product on each of your computers running validly licensed copies of such OS Product(s) provided that you use such additional copies of the OS COMPONENTS in accordance with the terms and conditions above.  For each validly licensed copy of an applicable OS Product, you also may reproduce one additional copy of the OS COMPONENTS solely for archival purposes or reinstallation of the OS COMPONENTS on the same computer as the OS COMPONENTS were previously installed.  Microsoft retains all right, title and interest in and to the OS COMPONENTS.  All rights not expressly granted are reserved by Microsoft.

IF THE OS PRODUCT WAS LICENSED TO YOU BY MICROSOFT OR ANY OF ITS WHOLLY OWNED SUBSIDIARIES, THE LIMITED WARRANTY (IF ANY) INCLUDED IN THE OS PRODUCT EULA APPLIES TO THE OS COMPONENTS PROVIDED THE OS COMPONENTS HAVE BEEN LICENSED BY YOU WITHIN THE TERM OF THE LIMITED WARRANTY IN THE OS PRODUCT EULA. HOWEVER, THIS SUPPLEMENTAL EULA DOES NOT EXTEND THE TIME PERIOD FOR WHICH THE LIMITED WARRANTY IS PROVIDED.

IF THE OS PRODUCT WAS LICENSED TO YOU BY AN ENTITY OTHER THAN MICROSOFT OR ANY OF ITS WHOLLY OWNED SUBSIDIARIES, MICROSOFT DISCLAIMS ALL WARRANTIES WITH RESPECT TO THE OS COMPONENTS AS FOLLOWS:

DISCLAIMER OF WARRANTIES.  TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, MICROSOFT AND ITS SUPPLIERS PROVIDE TO YOU THE OS COMPONENTS, AND ANY (IF ANY) SUPPORT SERVICES RELATED TO THE OS COMPONENTS ("SUPPORT SERVICES") AS IS AND WITH ALL FAULTS; AND MICROSOFT AND ITS SUPPLIERS HEREBY DISCLAIM WITH RESPECT TO THE OS COMPONENTS AND SUPPORT SERVICES ALL WARRANTIES AND CONDITIONS, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, ANY (IF ANY) WARRANTIES OR CONDITIONS OF OR RELATED TO:  TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES, ACCURACY OR COMPLETENESS OF RESPONSES, RESULTS, LACK OF NEGLIGENCE OR LACK OF WORKMANLIKE EFFORT, QUIET ENJOYMENT, QUIET POSSESSION, AND CORRESPONDENCE TO DESCRIPTION.  THE ENTIRE RISK ARISING OUT OF USE OR PERFORMANCE OF THE OS COMPONENTS AND ANY SUPPORT SERVICES REMAINS WITH YOU.

EXCLUSION OF INCIDENTAL, CONSEQUENTIAL AND CERTAIN OTHER DAMAGES.  TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, IN NO EVENT SHALL MICROSOFT OR ITS SUPPLIERS BE LIABLE FOR ANY SPECIAL, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL DAMAGES WHATSOEVER (INCLUDING, BUT NOT LIMITED TO, DAMAGES FOR:  LOSS OF PROFITS, LOSS OF CONFIDENTIAL OR OTHER INFORMATION, BUSINESS INTERRUPTION, PERSONAL INJURY, LOSS OF PRIVACY, FAILURE TO MEET ANY DUTY (INCLUDING OF GOOD FAITH OR OF REASONABLE CARE), NEGLIGENCE, AND ANY OTHER PECUNIARY OR OTHER LOSS WHATSOEVER) ARISING OUT OF OR IN ANY WAY RELATED TO THE USE OF OR INABILITY TO USE THE OS COMPONENTS OR THE SUPPORT SERVICES, OR THE PROVISION OF OR FAILURE TO PROVIDE SUPPORT SERVICES, OR OTHERWISE UNDER OR IN CONNECTION WITH ANY PROVISION OF THIS SUPPLEMENTAL EULA, EVEN IN THE EVENT OF THE FAULT, TORT (INCLUDING NEGLIGENCE), STRICT LIABILITY, BREACH OF CONTRACT OR BREACH OF WARRANTY OF MICROSOFT OR ANY SUPPLIER, AND EVEN IF MICROSOFT OR ANY SUPPLIER HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. 

LIMITATION OF LIABILITY AND REMEDIES. NOTWITHSTANDING ANY DAMAGES THAT YOU MIGHT INCUR FOR ANY REASON WHATSOEVER (INCLUDING, WITHOUT LIMITATION, ALL DAMAGES REFERENCED ABOVE AND ALL DIRECT OR GENERAL DAMAGES), THE ENTIRE LIABILITY OF MICROSOFT AND ANY OF ITS SUPPLIERS UNDER ANY PROVISION OF THIS SUPPLEMENTAL EULA AND YOUR EXCLUSIVE REMEDY FOR ALL OF THE FOREGOING SHALL BE LIMITED TO THE GREATER OF THE AMOUNT ACTUALLY PAID BY YOU FOR THE OS COMPONENTS OR U.S.$5.00.  THE FOREGOING LIMITATIONS, EXCLUSIONS AND DISCLAIMERS SHALL APPLY TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, EVEN IF ANY REMEDY FAILS ITS ESSENTIAL PURPOSE.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win2k\cze\webcze.txt ===
DOPLKOV LICENN SMLOUVA S KONCOVM UIVATELEM NA SOFTWARE SPOLENOSTI MICROSOFT

DLEIT: TTE POZORN - Tyto sousti operanho systmu spolenosti Microsoft Corporation (Microsoft) vetn jakkoli dokumentace v tzv. online" neboli elektronick form (Sousti operanho systmu) jsou pedmtem podmnek smlouvy, kterou jste zskali licenci na pslun operan systm spolenosti Microsoft (Operan systm) popsan dle (kad Licenn smlouva s koncovm uivatelem neboli EULA), a dle podmnek tto doplkov smlouvy EULA. INSTALAC, KOPROVNM NEBO JINM POUITM SOUST OPERANHO SYSTMU POTVRZUJETE, E SOUHLASTE S PODMNKAMI TTO DOPLKOV SMLOUVY EULA, A JSTE JIMI VZNI. POKUD S TMITO PODMNKAMI NESOUHLASTE, SOUSTI OPERANHO SYSTMU NEINSTALUJTE, NEKOPRUJTE ANI JINAK NEPOUVEJTE.

POZNMKA: POKUD NEMTE PLATNOU SMLOUVU EULA PRO KTERKOLI OPERAN SYSTM (OPERAN SYSTM MICROSOFT WINDOWS 95, WINDOWS 98, WINDOWS ME nebo WINDOWS 2000), NEJSTE OPRVNNI SOUSTI OPERANHO SYSTMU INSTALOVAT, KOPROVAT ANI JINAK POUVAT A TATO DOPLKOV SMLOUVA EULA VM NEPOSKYTUJE DN PRVA.

Podmnky, kter jsou v tto doplkov smlouv EULA psny velkmi psmeny a nejsou zde dle jinak definovny, maj tent vznam jako podmnky v pslunch smlouvch EULA k Operanmu systmu.

Obecn. Sousti operanho systmu jsou vm poskytovny k aktualizaci, doplnn nebo vmn existujc funkce pslunho Operanho systmu. Spolenost Microsoft vm udluje licenci na pouvn Soust operanho systmu za podmnek smlouvy EULA na pslun Operan systm (tato smlouva je zde zahrnuta) a dalch podmnek danch touto doplkovou smlouvou EULA, za pedpokladu, e vechny tyto podmnky splnte. V ppad, e kterkoli podmnky tto doplkov smlouvy EULA jsou v konfliktu s podmnkami smlouvy EULA na pslun Operan systm, plat pro Sousti operanho systmu pouze podmnky tto doplkov smlouvy EULA.

Dodaten prva a omezen.

* Pokud vlastnte nkolik platn licencovanch kopi pslunho Operanho systmu (Operanch systm), smte reprodukovat, instalovat a pouvat jednu kopii Soust operanho systmu jako soust pslunho Operanho systmu na vech potach, na kterch je sputna kopie Operanho systmu s platnou licenc, za pedpokladu, e tyto dal kopie Soust operanho systmu budete pouvat ve shod s ve uvedenmi podmnkami. Pro kadou platn licencovanou kopii pslunho Operanho systmu mete tak vytvoit jednu dal kopii Soust operanho systmu, kter slou pouze pro ely archivovn nebo peinstalovn Soust operanho systmu na tomt potai, na kterm byly tyto Sousti operanho systmu dve instalovny. Spolenost Microsoft si ponechv vechna prva, vlastnictv a zjmy tkajc se Soust operanho systmu. Vechna prva, kter nejsou vslovn udlena, jsou vyhrazena spolenosti Microsoft.


POKUD VM LICENCE NA PSLUN OPERAN SYSTM BYLA UDLENA SPOLENOST MICROSOFT NEBO KTEROUKOLI Z JEJCH DCEINCH SPOLENOST, VZTAHUJE SE NA SOUSTI OPERANHO SYSTMU OMEZEN ZRUKA (POKUD EXISTUJE) ZAHRNUT VE SMLOUV EULA PSLUNHO OPERANHO SYSTMU, ZA PEDPOKLADU, E LICENCE NA SOUSTI OPERANHO SYSTMU VM BYLA UDLENA V DOB PLATNOSTI OMEZEN ZRUKY VE SMLOUV EULA PSLUNHO OPERANHO SYSTMU. TATO DOPLKOV SMLOUVA EULA VAK NEPRODLUUJE ASOV OBDOB, NA KTER JE POSKYTNUTA TATO OMEZEN ZRUKA.

POKUD VM LICENCE NA PSLUN OPERAN SYSTM BYLA UDLENA JINM SUBJEKTEM NE SPOLENOST MICROSOFT NEBO KTEROUKOLI JEJ DCEINOU SPOLENOST, NEUZNV SPOLENOST MICROSOFT DN ZRUKY VZTAHUJC SE K SOUSTEM OPERANHO SYSTMU, JAK JE UVEDENO DLE:

ZEKNUT SE ZRUK. V NEJVTM MONM ROZSAHU POVOLENM ROZHODNM PRVEM VM SPOLENOST MICROSOFT A JEJ DODAVATEL POSKYTUJ SOUSTI OPERANHO SYSTMU A VEKEROU (POKUD EXISTUJE) ODBORNOU POMOC VZTAHUJC SE K TMTO SOUSTEM (ODBORN POMOC) TAK, JAK STOJ A LE A SE VEMI CHYBAMI; SPOLENOST MICROSOFT A JEJ DODAVATEL SE TMTO ZKAJ VECH ZRUK A PODMNEK VZTAHUJCCH SE K SOUSTEM OPERANHO SYSTMU A K ODBORN POMOCI, A VSLOVNCH, PEDPOKLDANCH NEBO STATUTRNCH, VETN, ALE NIKOLI VHRADN, VEKERCH ZRUK A PODMNEK (POKUD EXISTUJ) VZTAHUJCCH SE K: VLASTNICKM PRVM, PRVNM VADM, OBCHODOVATELNOSTI, VHODNOSTI PRO URIT EL, NEPTOMNOSTI VIR, PESNOSTI NEBO PLNOSTI ODPOVD, VSLEDKM, ZANEDBN NEBO NEDOSTATENMU SIL PRACOVNK, NERUENMU UVN, NERUENMU VLASTNICTV A SHOD S POPISEM. VEKER RIZIKA VZNIKL UVNM NEBO VKONEM SOUST OPERANHO SYSTMU A JAKKOLI ODBORN POMOCI SPOVAJ NA VS.

VYLOUEN NHODNCH, NSLEDNCH A URITCH JINCH KOD. V NEJVTM MONM ROZSAHU POVOLENM ROZHODNM PRVEM NENESE SPOLENOST MICROSOFT ANI JEJ DODAVATEL V DNM PPAD ODPOVDNOST ZA JAKKOLI ZVLTN, NHODN, NEPM NEBO NSLEDN KODY (VETN, ALE NE VHRADN, KOD VZTAHUJCCH SE K: ZTRT ZISKU, ZTRT TAJNCH NEBO JINCH INFORMAC, PERUEN PODNIKN, UBL͎EN NA ZDRAV, ZTRT SOUKROM, NEMONOSTI SPLNIT POVINNOST (I PI DOBR VLI NEBO DOSTATEN PI), ZANEDBN NEBO JAKKOLI FINANN NEBO JIN ZTRTY) VZNIKL NEBO JAKMKOLI ZPSOBEM SE VZTAHUJC K POUIT NEBO NEMONOSTI POUIT SOUST OPERANHO SYSTMU NEBO ODBORNPOMOCI, POSKYTNUT NEBO NEPOSKYTNUT ODBORN POMOCI, NEBO JAKKOLI ZAHRNUT V PODMNKCH TTO DOPLKOV SMLOUVY EULA, A TO I V PPAD, E SPOLENOST MICROSOFT BYLA NA MONOST VZNIKU TAKOV KODY UPOZORNNA.

OMEZEN ODPOVDNOSTI A V݊E ODKODNHO. BEZ OHLEDU NA JAKKOLI KODY, KTER JSTE Z JAKHOKOLI DVODU UTRPLI (VETN, ALE NE VHRADN, VECH KOD ZMNNCH V݊E A VECH PMCH NEBO OBECNCH KOD), VEKER NHRADY SPOLENOSTI MICROSOFT A JEJCH DODAVATEL PODLE USTANOVEN TTO DOPLKOV SMLOUVY EULA A V݊E ODKODNHO ZA VECHNY ZMNN KODY NESMJ PESHNOUT SKUTEN ZAPLACENOU STKU ZA SOUSTI OPERANHO SYSTMU NEBO STKU 5 AMERICKCH DOLAR, PIEM URUJC JE VY Z OBOU STEK. V݊E UVEDEN OMEZEN, VYLOUEN A ZEKNUT SE PLAT V NEJVTM MONM ROZSAHU POVOLENM ROZHODNM PRVEM, A TO I V PPAD, E JAKKOLI NROKY BY NENAPLNILY SVJ ZKLADN EL.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win2k\dut\seddut.txt ===
Dit programma is niet bedoeld om te worden uitgevoerd onder Windows9X/WindowsME. Klik op OK om af te sluiten.
"DirectX Cabpack Setup"

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win2k\dut\dut.txt ===
InstallPrompt=Hiermee wordt Microsoft DirectX 8.0 genstalleerd.  Wilt u doorgaan?
FinishMessage=Microsoft DirectX 8.0 Setup is voltooid.
FriendlyName=Microsoft DirectX 8.0 Setup
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win2k\dut\webdut.txt ===
AANVULLENDE GEBRUIKSRECHTOVEREENKOMST VOOR MICROSOFT-SOFTWARE

BELANGRIJK: LEES DIT ZORGVULDIG DOOR - Deze onderdelen van het besturingssysteem van Microsoft Corporation ("Microsoft"), inclusief eventuele "on line" of elektronische documentatie ("Besturingssysteemonderdelen"), zijn onderworpen aan de bepalingen van de overeenkomst volgens welke u het toepasselijke Microsoft-besturingssysteemproduct ("Besturingssysteemproduct") dat hierna wordt beschreven, in licentie hebt gekregen ( "Gebruiksrechtovereenkomst" of "Overeenkomst") en aan de bepalingen van deze Aanvullende Overeenkomst. DOOR DE BESTURINGSSYSTEEMONDERDELEN TE INSTALLEREN, TE KOPIREN OF ANDERSZINS TE GEBRUIKEN, STEMT U ERMEE IN AAN DE BEPALINGEN VAN DE OVEREENKOMST AANGAANDE HET TOEPASSELIJKE BESTURINGSSYSTEEMPRODUCT EN VAN DEZE AANVULLENDE OVEREENKOMST GEBONDEN TE ZIJN. INDIEN U NIET INSTEMT MET DEZE BEPALINGEN, MAG U DE BESTURINGSSYSTEEMONDERDELEN NIET INSTALLEREN, KOPIREN OF GEBRUIKEN.

OPMERKING: INDIEN U NIET BESCHIKT OVER EEN GELDIGE OVEREENKOMST VOOR EEN "BESTURINGSSYSTEEMPRODUCT" (MICROSOFT WINDOWS 95, WINDOWS 98, WINDOWS ME, EN/OF WINDOWS 2000), BENT U NIET GERECHTIGD DE BESTURINGSSYSTEEMONDERDELEN TE INSTALLEREN, TE KOPIREN OF ANDERSZINS TE GEBRUIKEN EN KUNT U AAN DEZE AANVULLENDE OVEREENKOMST GEEN RECHTEN ONTLENEN.

Termen in hoofdletters in deze Aanvullende Overeenkomst die hier niet anderszins zijn gedefinieerd, hebben dezelfde betekenis als gedefinieerd in de Overeenkomst van het toepasselijke Besturingssysteemproduct.

Algemeen. De Besturingssysteemonderdelen worden door Microsoft aan u verstrekt om bestaande functionaliteit van het toepasselijke Besturingssysteemproduct bij te werken, aan te vullen of te vervangen. Microsoft verleent u een licentie voor het gebruiken van de Besturingssysteemonderdelen in overeenstemming met de bepalingen van de Overeenkomst voor het toepasselijke Besturingssysteemproduct (die hierdoor middels verwijzing hierin zijn opgenomen) en de bepalingen die in deze Aanvullende Overeenkomst worden uiteengezet, mits u al deze bepalingen nakomt. Voor zover enige bepalingen in deze Aanvullende Overeenkomst in tegenspraak zijn met bepalingen in de Overeenkomst voor het toepasselijke Besturingssysteemproduct, gaan de bepalingen van deze Aanvullende Overeenkomst voor, uitsluitend voorzover zij betrekking hebben op de Besturingssysteemonderdelen.

Aanvullende rechten en beperkingen.

*	Indien u beschikt over meerdere exemplaren met geldige licenties van het (de) toepasselijke Besturingssysteemproduct(en), mag u n exemplaar van de Besturingssysteemonderdelen als onderdeel van (een) dergelijk(e) toepasselijk(e) Besturingssysteemproduct(en) verveelvoudigen, installeren en gebruiken op al uw computers waarop exemplaren van het (de) Besturingssysteemproduct(en) met geldige licenties worden uitgevoerd, mits u dergelijke aanvullende exemplaren van de Besturingssysteemonderdelen gebruikt overeenkomstig de hierboven genoemde bepalingen. Voor ieder exemplaar van het toepasselijke Besturingssysteemproduct met een geldige licentie mag u tevens n extra kopie van de Besturingssysteemonderdelen maken, uitsluitend voor archiveringsdoeleinden of voor het opnieuw installeren van de Besturingssysteemonderdelen op dezelfde computer waarop de Besturingssysteemonderdelen eerder waren genstalleerd. Microsoft behoudt alle rechten op, de eigendom van en belangen in de Besturingssysteemonderdelen. Alle rechten die niet uitdrukkelijk zijn verleend, blijven voorbehouden aan Microsoft.


INDIEN HET TOEPASSELIJKE BESTURINGSSYSTEEMPRODUCT AAN U IN LICENTIE IS GEGEVEN DOOR MICROSOFT OF DOOR EEN VAN HAAR 100% DOCHTERONDERNEMINGEN, IS DE BEPERKTE GARANTIE (INDIEN AANWEZIG) DIE IN DE OVEREENKOMST VAN HET TOEPASSELIJKE BESTURINGSSYSTEEMPRODUCT IS OPGENOMEN, VAN TOEPASSING OP DE BESTURINGSSYSTEEMONDERDELEN MITS DE BESTURINGSSYSTEEMONDERDELEN AAN U IN LICENTIE ZIJN GEGEVEN BINNEN DE TERMIJN VAN DE BEPERKTE GARANTIE IN DE OVEREENKOMST VAN HET TOEPASSELIJKE BESTURINGSSYSTEEMPRODUCT. DEZE AANVULLENDE OVEREENKOMST VERLENGT ECHTER DE TERMIJN VAN DE BEPERKTE GARANTIE NIET.

INDIEN HET TOEPASSELIJKE BESTURINGSSYSTEEMPRODUCT AAN U IN LICENTIE IS GEGEVEN DOOR EEN ANDERE ENTITEIT DAN MICROSOFT OF EEN VAN HAAR 100% DOCHTERONDERNEMINGEN, WIJST MICROSOFT ALLE GARANTIES MET BETREKKING TOT HET BESTURINGSSYSTEEMONDERDEEL ALS VOLGT AF:

AFWIJZING VAN GARANTIES. VOOR ZOVER MAXIMAAL IS TOEGESTAAN OP GROND VAN TOEPASSELIJK RECHT, VERSTREKKEN MICROSOFT EN HAAR LEVERANCIERS AAN U DE BESTURINGSSYSTEEMONDERDELEN EN (INDIEN AANWEZIG) ALLE PRODUCTONDERSTEUNING DIE BETREKKING HEEFT OP DE BESTURINGSSYSTEEMONDERDELEN ("PRODUCTONDERSTEUNING") IN DE HUIDIGE STAAT EN MET ALLE AANWEZIGE FOUTEN; EN MICROSOFT EN HAAR LEVERANCIERS WIJZEN HIERDOOR ALLE GARANTIES EN VOORWAARDEN MET BETREKKING TOT DE BESTURINGSSYSTEEMONDERDELEN EN PRODUCTONDERSTEUNING VAN DE HAND, HETZIJ UITDRUKKELIJK, HETZIJ IMPLICIET, HETZIJ WETTELIJK, DAARONDER MEDE BEGREPEN MAAR NIET BEPERKT TOT ENIGE GARANTIES OF VOORWAARDEN (INDIEN AANWEZIG) BETREFFENDE: EIGENDOM, NIET-INBREUKMAKEND KARAKTER, VERKOOPBAARHEID, GESCHIKTHEID VOOR EEN BEPAALD DOEL, AFWEZIGHEID VAN VIRUSSEN, JUISTHEID OF VOLLEDIGHEID VAN REACTIES, RESULTATEN, AFWEZIGHEID VAN NALATIGHEID OF AFWEZIGHEID VAN GEBREK AAN VAKBEKWAME INSPANNING, ONGESTOORD GEBRUIK, ONGESTOORD BEZIT EN OVEREENSTEMMING MET BESCHRIJVING. VOOR ZOVER MAXIMAAL TOEGESTAAN ONDER TOEPASSELIJK RECHT, BERUST HET VOLLEDIGE RISICO VOORTKOMENDE UIT HET GEBRUIK OF DE WERKING VAN DE BESTURINGSSYSTEEMONDERDELEN EN EVENTUELE PRODUCTONDERSTEUNING BIJ U.

UITSLUITING VAN INCIDENTELE SCHADE, GEVOLGSCHADE OF BEPAALDE ANDERE SCHADE. VOOR ZOVER MAXIMAAL IS TOEGESTAAN OP GROND VAN TOEPASSELIJK RECHT, ZULLEN MICROSOFT OF HAAR LEVERANCIERS IN GEEN ENKEL GEVAL AANSPRAKELIJK ZIJN VOOR ENIGE SPECIALE, INCIDENTELE, INDIRECTE OF GEVOLGSCHADE HOE DAN OOK (DAARONDER MEDE BEGREPEN MAAR NIET BEPERKT TOT SCHADE ALS GEVOLG VAN: WINSTDERVING, VERLIES VAN VERTROUWELIJKE OF ANDERE INFORMATIE, BEDRIJFSONDERBREKING, LICHAMELIJK LETSEL, INBREUK OP PRIVACY, HET NIET VOLDOEN AAN ENIGE VERPLICHTING (DAARONDER MEDE BEGREPEN GOEDE TROUW OF REDELIJKE ZORG), NALATIGHEID EN ENIG ANDER FINANCIEEL VERLIES OF VERLIES VAN ENIGE ANDERE AARD, ALS GEVOLG VAN OF OP ENIGERLEI WIJZE BETREKKING HEBBEND OP HET GEBRUIK OF HET NIET KUNNEN GEBRUIKEN VAN DE BESTURINGSSYSTEEMONDERDELEN OF DE PRODUCTONDERSTEUNING, OF ALS GEVOLG VAN HET VERSTREKKEN OF NIET VERSTREKKEN VAN PRODUCTONDERSTEUNING, OF ANDERSZINS VOLGENS OF IN VERBAND MET ENIGE BEPALING VAN DEZE AANVULLENDE OVEREENKOMST, ZELFS INDIEN MICROSOFT OF EEN LEVERANCIERS OP DE HOOGTE IS GESTELD VAN DE MOGELIJKHEID VAN DIE SCHADE.

BEPERKING VAN AANSPRAKELIJKHEID EN VERHAALSMOGELIJKHEDEN. NIETTEGENSTAANDE ENIGE SCHADE DIE U MOGELIJK DOOR WELKE OORZAAK DAN OOK ZOU KUNNEN LIJDEN (INCLUSIEF, MAAR NIET BEPERKT TOT, ALLE SOORTEN SCHADE DIE HIERBOVEN ZIJN GENOEMD EN ALLE DIRECTE OF ALGEMENE SCHADE), ZAL DE GEHELE AANSPRAKELIJKHEID VAN MICROSOFT EN IEDER VAN HAAR LEVERANCIERS OP GROND VAN ENIGE BEPALING IN DEZE AANVULLENDE OVEREENKOMST EN UW ENIGE VERHAALSMOGELIJKHEID MET BETREKKING TOT AL HET VOORGAANDE ZIJN BEPERKT TOT HET FEITELIJK DOOR U VOOR DE BESTURINGSSYSTEEMONDERDELEN BETAALDE BEDRAG, MET EEN MINIMUM VAN VIJF DOLLAR (U.S. $5,00). DE VOORNOEMDE BEPERKINGEN, UITSLUITINGEN EN AFWIJZINGEN ZIJN VAN TOEPASSING VOOR ZOVER MAXIMAAL IS TOEGESTAAN OP GROND VAN TOEPASSELIJK RECHT, OOK ALS ENIGE VERHAALSMOGELIJKHEID HET ESSENTILE DOEL NIET HEEFT GEDIEND.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win2k\eng\sedeng.txt ===
This program is not designed for use on Windows9X/WindowsME. Press OK to exit.
"DirectX Cabpack Setup"
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win2k\frn\frn.txt ===
InstallPrompt=Ceci va installer Microsoft DirectX 8.0. Voulez-vous continuer ?
FinishMessage=L'installation de Microsoft DirectX 8.0 est termine.
FriendlyName=Installation de Microsoft DirectX 8.0
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win2k\frn\sedfrn.txt ===
Ce programme n'est pas conu pour tre utilis avec Windows9X/WindowsME. Cliquez sur OK pour quitter.
"Programme d'installation de Cabpack de DirectX"

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win2k\ger\webger.txt ===
ERGNZENDER ENDBENUTZER-LIZENZVERTRAG FR MICROSOFT-SOFTWARE

WICHTIG: BITTE SORGFLTIG LESEN - Diese Microsoft Corporation ("Microsoft")-Betriebssystemkomponenten unterliegen einschlielich Dokumentation im "Online"- oder elektronischen Format ("BS-Komponenten") den Bestimmungen des Vertrags, unter dem Sie das unten beschriebene anwendbare Microsoft-Betriebssystemprodukt ("BS-Produkt") lizenziert haben (jeder ein "Endbenutzer-Lizenzvertrag" oder "EULA") und den Bestimmungen dieses Ergnzenden EULAs. INDEM SIE DIE BS-KOMPONENTEN INSTALLIEREN, KOPIEREN ODER ANDERWEITIG VERWENDEN, ERKLREN SIE SICH EINVERSTANDEN, DURCH DIE BESTIMMUNGEN DES EULAS DES ANWENDBAREN BS-PRODUKTS UND DIESES ERGNZENDEN EULAS GEBUNDEN ZU SEIN. FALLS SIE DIESEN BESTIMMUNGEN NICHT ZUSTIMMEN, SIND SIE NICHT BERECHTIGT, DIE BS-KOMPONENTEN ZU INSTALLIEREN, ZU KOPIEREN ODER ZU VERWENDEN.

ANMERKUNG: WENN SIE KEIN GLTIGES EULA FR EIN "BS-PRODUKT" (MICROSOFT WINDOWS 95, WINDOWS 98, WINDOWS ME, UND/ODER WINDOWS 2000) BESITZEN, SIND SIE NICHT BERECHTIGT, DIE BS-KOMPONENTEN ZU INSTALLIEREN, ZU KOPIEREN ODER ANDERWEITIG ZU VERWENDEN. SIE HABEN AUSSERDEM KEINERLEI RECHTE UNTER DIESEM ERGNZENDEN EULA.

In diesem Ergnzenden EULA verwendete Begriffe, die hierin nicht definiert sind, haben die Bedeutung, die im EULA des anwendbaren BS-Produkts dafr festgelegt wurde.

Allgemeines. Die BS-Komponenten werden Ihnen von Microsoft zur Verfgung gestellt, um vorhandene Funktionen des anwendbaren BS-Produkts zu aktualisieren, zu ergnzen oder zu ersetzen. Microsoft erteilt Ihnen eine Lizenz zur Verwendung der BS-Komponenten gem den Bestimmungen des BS-Produkt-EULAs fr das anwendbare BS-Produkt (die hiermit durch Bezugnahme eingeschlossen sind) und den Bestimmungen dieses Ergnzenden EULAs, unter der Voraussetzung, dass Sie sich allen solchen Bestimmungen unterwerfen. Insoweit Bestimmungen in diesem Ergnzenden EULA Bestimmungen im EULA des anwendbaren BS-Produkts widersprechen, haben die Bestimmungen dieses Ergnzenden EULAs lediglich in Bezug auf die BS-Komponenten Vorrang.

Zustzliche Rechte und Einschrnkungen. 

*	Wenn Sie mehrere ordnungsgem lizenzierte Kopien des anwendbaren BS-Produkts oder der anwendbaren BS-Produkte haben, drfen Sie eine Kopie der BS-Komponenten als Teil des anwendbaren BS-Produkts oder der anwendbaren BS-Produkte auf allen Ihren Computern anfertigen, installieren und verwenden, die ordnungsgem lizenzierte Kopien des BS-Produkts oder der BS-Produkte ausfhren, vorausgesetzt, Sie verwenden solche zustzlichen Kopien der BS-Komponenten unter Einhaltung der oben genannten Bestimmungen. Fr jede ordnungsgem lizenzierte Kopie des anwendbaren BS-Produkts drfen Sie auch eine zustzliche Kopie der BS-Komponenten nur fr Archivierungszwecke oder zur Reinstallation der BS-Komponenten auf demselben Computer, auf dem die BS-Komponenten zuvor installiert waren, anfertigen. Microsoft behlt alle Rechte, Titel und Interessen an den BS-Komponenten. Microsoft behlt sich alle nicht ausdrcklich gewhrten Rechte vor.


WENN DAS ANWENDBARE BS-PRODUKT AN SIE VON MICROSOFT ODER EINER IHRER 100 %-IGEN TOCHTERFIRMEN LIZENZIERT WURDE, GILT DIE GEGEBENENFALLS IM EULA DES ANWENDBAREN BS-PRODUKTS ENTHALTENE BESCHRNKTE GEWHRLEISTUNG FR DIE BS-KOMPONENTEN, WENN DIE BS-KOMPONENTEN VON IHNEN INNERHALB DER LAUFZEIT DER BESCHRNKTEN GEWHRLEISTUNG IM EULA DES ANWENDBAREN BS-PRODUKTS LIZENZIERT WURDEN. DIESES ERGNZENDE EULA VERLNGERT JEDOCH NICHT DEN ZEITRAUM, BER DEN DIE BESCHRNKTE GEWHRLEISTUNG GILT.

WENN DAS ANWENDBARE BS-PRODUKT AN SIE VON EINER ANDEREN JURISTISCHEN PERSON ALS MICROSOFT ODER EINER IHRER 100 %-IGEN TOCHTERFIRMEN LIZENZIERT WURDE, SCHLIESST MICROSOFT ALLE GEWHRLEISTUNGEN IN BEZUG AUF DIE BS-KOMPONENTEN WIE FOLGT AUS:

AUSSCHLUSS DER GEWHRLEISTUNG. IM GRSSTMGLICHEN DURCH DAS ANWENDBARE RECHT GESTATTETEN UMFANG STELLEN IHNEN MICROSOFT UND DEREN LIEFERANTEN DIE BS-KOMPONENTEN UND GEGEBENENFALLS SUPPORTLEISTUNGEN IN VERBINDUNG MIT DEN BS-KOMPONENTEN ("SUPPORTLEISTUNGEN") WIE BESEHEN UND OHNE GARANTIE AUF FEHLERFREIHEIT ZUR VERFGUNG. SIE SCHLIESSEN HIERMIT ALLE GEWHRLEISTUNGEN UND BEDINGUNGEN IN BEZUG AUF DIE BS-KOMPONENTEN UND SUPPORTLEISTUNGEN AUS, GLEICH OB AUSDRCKLICH, KONKLUDENT ODER GESETZLICH, EINSCHLIESSLICH, ABER NICHT BESCHRNKT AUF (FALLS ZUTREFFEND) GEWHRLEISTUNGEN UND BEDINGUNGEN VON ODER IN BEZUG AUF: TITEL, NICHTVERLETZUNG DER RECHTE DRITTER, HANDELSBLICHKEIT, EIGNUNG FR EINEN BESTIMMTEN ZWECK, VIRENFREIHEIT, GENAUIGKEIT ODER VOLLSTNDIGKEIT VON ANTWORTEN, ERGEBNISSE, FAHRLSSIGKEIT ODER MANGELNDE FACHMNNISCHE BEMHUNGEN, UNGETRBTES VERGNGEN, STILLEN BESITZ SOWIE BEREINSTIMMUNG MIT DER BESCHREIBUNG. DAS GESAMTE RISIKO, DAS SICH AUS DER VERWENDUNG ODER DER LEISTUNG DER BS-KOMPONENTEN ODER SUPPORTLEISTUNGEN ERGIBT, VERBLEIBT BEI IHNEN.

AUSSCHLUSS VON FOLGE-, ZUFLLIGEN UND BESTIMMTEN ANDEREN SCHDEN. IM GRSSTMGLICHEN DURCH DAS ANWENDBARE RECHT GESTATTETEN UMFANG SIND MICROSOFT ODER DEREN LIEFERANTEN IN KEINEM FALL HAFTBAR FR IRGENDWELCHE SPEZIELLEN, ZUFLLIGEN, INDIREKTEN ODER FOLGESCHDEN WELCHER ART AUCH IMMER (EINSCHLIESSLICH, ABER NICHT BESCHRNKT AUF, SCHDEN AUS ENTGANGENEM GEWINN, VERLUST VON VERTRAULICHEN ODER ANDEREN INFORMATIONEN, GESCHFTSUNTERBRECHUNG, PERSONENSCHDEN, VERLUST VON PRIVATSPHRE, UNMGLICHKEIT, EINE PFLICHT ZU ERFLLEN (EINSCHLIELICH IN GUTEM GLAUBEN ODER BEI VERNNFTIGER SORGFALT), FAHRLSSIGKEIT SOWIE VERMGENS- ODER SONSTIGE SCHDEN), DIE AUS DER VERWENDUNG DER BS-KOMPONENTEN ODER DER SUPPORTLEISTUNGEN ODER DER TATSACHE, DASS SIE NICHT VERWENDET WERDEN KNNEN, ODER AUS DER BEREITSTELLUNG VON SUPPORTLEISTUNGEN ODER DER TATSACHE, DASS SIE NICHT ZUR VERFGUNG GESTELLT WORDEN SIND, ODER ANDERWEITIG AUS EINER BESTIMMUNG DIESES ERGNZENDEN EULAS RESULTIEREN ODER IN IRGENDEINEM ZUSAMMENHANG DAMIT STEHEN, SELBST WENN MICROSOFT ODER DER LIEFERANT AUF DIE MGLICHKEIT SOLCHER SCHDEN HINGEWIESEN WURDE. 

HAFTUNGSBESCHRNKUNG UND ANSPRCHE UNGEACHTET ALLER SCHDEN, DIE SIE AUS WELCHEN GRNDEN AUCH IMMER ERLEIDEN MGEN (EINSCHLIESSLICH, OHNE EINSCHRNKUNG, ALLE OBEN ANGESPROCHENEN SCHDEN SOWIE ALLE DIREKTEN ODER ALLGEMEINEN SCHDEN), IST DIE GESAMTE HAFTUNG VON MICROSOFT UND DEREN LIEFERANTEN UNTER ALLEN BESTIMMUNGEN DIESES ERGNZENDEN EULAS UND IHR AUSSCHLIESSLICHER ANSPRUCH FR ALLES OBEN GENANNTE AUF DEN HHEREN DIESER BEIDEN BETRGE BESCHRNKT: DEN TATSCHLICH FR DIE BS-KOMPONENTEN GEZAHLTEN BETRAG ODER US-$ 5,00. DIE VORSTEHENDEN BESCHRNKUNGEN UND AUSSCHLSSE GELTEN IM GRSSTMGLICHEN DURCH DAS ANWENDBARE RECHT GESTATTETEN UMFANG, AUCH WENN EIN ANSPRUCH SEINEN WESENTLICHEN ZWECK VERFEHLT.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win2k\ger\ger.txt ===
InstallPrompt=Microsoft DirectX 8.0 wird installiert. Soll der Vorgang fortgesetzt werden?
FinishMessage=Microsoft DirectX 8.0-Setup wurde erfolgreich abgeschlossen.
FriendlyName=Microsoft DirectX 8.0-Setup
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win2k\frn\webfrn.txt ===
CONTRAT DE LICENCE UTILISATEUR FINAL SUPPLMENTAIRE POUR LOGICIEL MICROSOFT

IMPORTANT -  LIRE ATTENTIVEMENT : Ces composants systme d'exploitation de Microsoft Corporation (" Microsoft "), y compris toute documentation " en ligne " ou sous forme lectronique (les " Composants SE "), sont soumis aux termes du contrat (un " Contrat de Licence Utilisateur Final " ou " CLUF ") par lequel vous avez acquis sous licence le produit systme d'exploitation Microsoft (un " Produit SE ") dcrit ci-dessous (chacun des contrats tant dnomm un " Contrat de Licence Utilisateur Final "), ainsi qu'aux termes et conditions du prsent CLUF supplmentaire et aux stipulations du prsent Contrat de Licence Utilisateur Final Supplmentaire. EN INSTALLANT, EN COPIANT OU EN UTILISANT DE TOUTE AUTRE MANIRE LES COMPOSANTS SE, VOUS RECONNAISSEZ TRE LI PAR LES TERMES DU CLUF RELATIF AU PRODUIT SE APPLICABLE ET PAR LES TERMES DU PRSENT CLUF SUPPLMENTAIRE. SI VOUS TES EN DSACCORD AVEC CES TERMES, VEUILLEZ NE PAS INSTALLER, COPIER, NI UTILISER LES COMPOSANTS SE.


REMARQUE : SI VOUS NE DISPOSEZ PAS D'UN CLUF VALABLE POUR UN QUELCONQUE PRODUIT SE (MICROSOFT WINDOWS 95, WINDOWS 98, WINDOWS ME ET/OU MICROSOFT WINDOWS 2000), VOUS N'TES PAS AUTORIS  INSTALLER,  COPIER OU  FAIRE AUTRE USAGE DES COMPOSANTS SE, ET VOUS N'AVEZ AUCUN DROIT EN VERTU DE CE CLUF SUPPLMENTAIRE.

Les termes utiliss dans le prsent CLUF supplmentaire qui commencent par une lettre majuscule et qui ne sont pas dfinis aux prsentes ont le sens qui leur a t attribu dans le CLUF relatif au Produit SE applicable.

Stipulations Gnrales. Les Composants SE vous sont fournis par Microsoft afin de mettre  jour, complter ou remplacer des fonctionnalits existantes du Produit SE applicable. Microsoft vous concde une licence d'utilisation de ces Composants SE en vertu des termes du CLUF relatif au Produit SE applicable (ce CLUF tant incorpor aux prsentes) et des termes de ce CLUF supplmentaire, sous rserve que vous respectiez l'ensemble de ces termes. Si des termes de ce CLUF supplmentaire sont contradictoires avec ceux du CLUF relatif au produit SE applicable, les termes de ce CLUF supplmentaire prvaudront, mais uniquement en ce qui concerne les Composants SE.

Droits et Limitations Supplmentaires

*	Si vous disposez de plusieurs exemplaires sous licence valable du/des Produit(s) SE applicable(s), vous tes autoriss  reproduire, installer et utiliser un exemplaire des Composants SE, en tant que partie de ce/ces Produit(s) SE, sur tous vos ordinateurs sur lesquels fonctionnent des exemplaires sous licence valable du/des Produit(s) SE, et ce  condition que vous utilisiez ces exemplaires supplmentaires des Composants SE conformment aux termes stipuls ci-dessus. Pour chaque exemplaire sous licence valable du produit SE applicable, vous tes galement autoris  reproduire un exemplaire supplmentaire des Composants SE, uniquement pour des besoins d'archivage ou de rinstallation de ces Composants SE sur l'ordinateur sur lequel ils taient prcdemment installs. Microsoft conserve tout droit, titre et intrt relatif aux Composants SE. Tous les droits non expressment concds sont rservs par Microsoft.


SI LE PRODUIT SE APPLICABLE VOUS A T CONCD SOUS LICENCE PAR MICROSOFT OU PAR L'UNE QUELCONQUE DE SES FILIALES  100%, LA GARANTIE LIMITE (SI ELLE EXISTE) DU CLUF RELATIF  CE PRODUIT SE S'APPLIQUE AUX COMPOSANTS SE,  CONDITION QUE CEUX-CI VOUS AIENT T CONCDS SOUS LICENCE PENDANT LA DURE DE GARANTIE LIMITE DU CLUF RELATIF AU PRODUIT SE APPLICABLE. LE PRSENT CLUF SUPPLMENTAIRE N'A PAS POUR EFFET DE PROROGER LA DURE DE CETTE GARANTIE LIMITE.

SI LE PRODUIT SE EN CAUSE VOUS A T CONCD SOUS LICENCE PAR UNE ENTIT AUTRE QUE MICROSOFT OU QUE L'UNE QUELCONQUE DE SES FILIALES  100%, MICROSOFT EXLUT TOUTE GARANTIE RELATIVE AUX COMPOSANTS SE COMME CELA EST STIPUL CI-APRS :

EXCLUSION DE GARANTIE. DANS TOUTE LA MESURE PERMISE PAR LA RGLEMENTATION APPLICABLE, MICROSOFT ET SES FOURNISSEURS VOUS FOURNISSENT LES COMPOSANTS SE, AINSI QUE, LE CAS CHANT, TOUT SERVICE D'ASSISTANCE RELATIF  CES COMPOSANTS (LES " SERVICES D'ASSISTANCE "), EN L'TAT ET AVEC TOUTES LEURS IMPERFECTIONS. EN OUTRE, MICROSOFT ET SES FOURNISSEURS EXCLUENT PAR LES PRSENTES TOUTE AUTRE GARANTIE LGALE, EXPRESSE OU IMPLICITE, RELATIVE AUX COMPOSANTS SE ET AUX SERVICES D'ASSISTANCE, Y COMPRIS, MAIS DE MANIRE NON LIMITATIVE (LE CAS CHANT), TOUTE GARANTIE : DE PROPRIT, D'ABSENCE DE CONTREFAON, DE QUALIT MARCHANDE, D'ADQUATION  UN USAGE PARTICULIER, D'ABSENCE DE VIRUS, DE PRCISION OU D'EXHAUSTIVIT DES RPONSES, DES RSULTATS OBTENUS, D'ABSENCE DE NGLIGENCE, OU DE DFAUT DE FABRICATION, DE JOUISSANCE PAISIBLE, D'ABSENCE DE TROUBLE DE POSSESSION ET DE CONFORMIT  LA DESCRIPTION. VOUS ASSUMEZ L'ENSEMBLE DES RISQUES DCOULANT DE L'UTILISATION OU DU FONCTIONNEMENT DES COMPOSANTS SE ET DES SERVICES D'ASSISTANCE.

EXCLUSION DE RESPONSABILIT POUR LES DOMMAGES ACCESSOIRES, INDIRECTS, ET CERTAINS AUTRES TYPES DE DOMMAGES. DANS TOUTE LA MESURE PERMISE PAR LA RGLEMENTATION APPLICABLE, MICROSOFT OU SES FOURNISSEURS NE POURRONT EN AUCUN CAS TRE TENUS POUR RESPONSABLES DE TOUT DOMMAGE SPCIAL, ACCESSOIRE, INCIDENT OU INDIRECT DE QUELQUE NATURE QUE CE SOIT, Y COMPRIS, MAIS DE MANIRE NON LIMITATIVE LES PERTES DE BNFICES, PERTES D'INFORMATIONS CONFIDENTIELLES OU AUTRES INFORMATIONS, INTERRUPTIONS D'ACTIVIT, PRJUDICES CORPORELS, ATTEINTES  LA VIE PRIVE, MANQUEMENT  TOUTE OBLIGATION (Y COMPRIS L'OBLIGATION DE BONNE FOI OU DE DILIGENCE) POUR DES ACTES DE NGLIGENCE, ET POUR TOUTE PERTE PCUNIAIRE OU AUTRE, RSULTANT DE, OU LI  L'UTILISATION OU  L'IMPOSSIBILIT D'UTILISER LES COMPOSANTS SE OU LES SERVICES D'ASSISTANCE, OU  LA FOURNITURE OU AU DFAUT DE FOURNITURE DES SERVICES D'ASSISTANCE, OU  LA FOURNITURE DE CE CLUF SUPPLMENTAIRE, MME SI LA SOCIT MICROSOFT OU UN QUELCONQUE FOURNISSEUR A T AVIS DE L'VENTUALIT DE TELS DOMMAGES.


LIMITATION DE RESPONSABILIT ET RECOURS. NONOBSTANT TOUT DOMMAGE QUE VOUS POURRIEZ SUBIR POUR QUELQUE MOTIF QUE CE SOIT (NOTAMMENT TOUS LES DOMMAGES ENUMRS CI-DESSUS ET TOUS LES DOMMAGES DIRECTS OU GNRAUX), L'ENTIRE RESPONSABILIT DE MICROSOFT ET DE L'UN QUELCONQUE DE SES FOURNISSEURS AU TITRE DE TOUTE STIPULATION DE CE CLUF SUPPLMENTAIRE ET VOTRE SEUL RECOURS EN CE QUI CONCERNE TOUS LES DOMMAGES PRCITS NE SAURAIENT EXCDER LE MONTANT QUE VOUS AVEZ EFFECTIVEMENT PAY POUR LES COMPOSANTS SE OU 5 DOLLARS US (US$ 5,00) SI CE MONTANT EST PLUS LEV. LES PRSENTES LIMITATIONS ET EXCLUSIONS DEMEURERONT APPLICABLES DANS TOUTE LA MESURE PERMISE PAR LA RGLEMENTATION EN VIGUEUR QUAND BIEN MME UN QUELCONQUE RECOURS EXERC A L'OCCASION DE TOUT MANQUEMENT QUELCONQUE NE PRODUIRAIT PAS D'EFFET.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win2k\ger\sedger.txt ===
Dieses Programm ist nicht fr die Verwendung unter Windows9X/WindowsME vorgesehen. Klicken Sie auf "OK", um den Vorgang zu beenden.
"DirectX Cabpack-Setup"

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win2k\itn\itn.txt ===
InstallPrompt=Installazione di Microsoft DirectX 8.0. Continuare?
FinishMessage=Installazione di Microsoft DirectX 8.0 completata.
FriendlyName=Installazione di Microsoft DirectX 8.0
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win2k\itn\seditn.txt ===
Impossibile utilizzare questo programma su Windows9X/WindowsME. Per uscire, scegliere OK.
"Programma di installazione di DirectX Cabpack"

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win2k\jpn\jpn.txt ===
InstallPrompt=Microsoft DirectX 8.0 CXg[܂B܂?
FinishMessage=Microsoft DirectX 8.0 ̃ZbgAbv܂B
FriendlyName=Microsoft DirectX 8.0 ZbgAbv
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win2k\jpn\sedjpn.txt ===
̃vO Windows9X/WindowsME ł͎gpł܂B[OK] NbNāAIĂB
"DirectX Cabpack ZbgAbv"

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win2k\itn\webitn.txt ===
CONTRATTO DI LICENZA SUPPLEMENTARE CON L'UTENTE FINALE PER IL SOFTWARE MICROSOFT

IMPORTANTE - LEGGERE CON ATTENZIONE: I presenti componenti del sistema operativo di Microsoft Corporation ("Microsoft") e l'eventuale documentazione "online" o elettronica ("Componenti del Sistema Operativo") sono soggetti ai termini e alle condizioni del contratto ai sensi del quale l'utente ha ricevuto in licenza il relativo prodotto Microsoft del sistema operativo ("Prodotto del Sistema Operativo") infra descritto (ognuno dei quali "Contratto di Licenza") e ai termini e alle condizioni del presente Contratto di Licenza Supplementare. INSTALLANDO, COPIANDO O ALTRIMENTI UTILIZZANDO I COMPONENTI DEL SISTEMA OPERATIVO, L'UTENTE ACCETTA DI ESSERE VINCOLATO DAI TERMINI E DALLE CONDIZIONI DELL'APPLICABILECONTRATTO DI LICENZA PER IL PRODOTTO DEL SISTEMA OPERATIVO E DEL PRESENTE CONTRATTO DI LICENZA SUPPLEMENTARE. QUALORA L'UTENTE NON ACCETTI TALI TERMINI E CONDIZIONI, NON SAR AUTORIZZATO A INSTALLARE, COPIARE O ALTRIMENTI UTILIZZARE I COMPONENTI DEL SISTEMA OPERATIVO.

NOTA: QUALORA L'UTENTE NON DISPONGA DI UN CONTRATTO DI LICENZA VALIDO PER OGNI PRODOTTO DEL SISTEMA OPERATIVO (MICROSOFT WINDOWS 95, WINDOWS 98, WINDOWS ME E/O WINDOWS 2000), NON SAR AUTORIZZATO A INSTALLARE, COPIARE O ALTRIMENTI UTILIZZARE ALCUNO DI TALI COMPONENTI E NON DISPORR DEI DIRITTI CONCESSI DAL PRESENTE CONTRATTO DI LICENZA SUPPLEMENTARE.

Tutti i termini in maiuscolo contenuti nel presente Contratto di Licenza Supplementare e non altrimenti definiti avranno il significato assegnato loro nell'applicabile Contratto di Licenza per il Prodotto del Sistema Operativo.

In Generale. I Componenti del Sistema Operativo sono forniti da Microsoft per aggiornare, integrare o sostituire la esistente funzionalit dell'applicabile Prodotto del Sistema Operativo. Microsoft concede all'utente una licenza di utilizzo dei Componenti del Sistema Operativo in base ai termini e alle condizioni previste dal Contratto di Licenza di quest'ultimo (da considerarsi parte integrante del presente Contratto di Licenza Supplementare in virt dell'espresso richiamo) e in base ai termini e alle condizioni del presente Contratto di Licenza Supplementare, a condizione che si attenga a tutti tali termini e condizioni. Nel caso in cui i termini del presente Contratto di Licenza Supplementare contrastino con i termini dell'applicabile Contratto di Licenza per il Prodotto del Sistema Operativo, i termini del presente Contratto di Licenza Supplementare sono applicabili esclusivamente in relazione ai Componenti del Sistema Operativo.

Diritti e Limitazioni aggiuntivi

*	Qualora l'utente disponga di pi copie validamente concesse in licenza del Prodotto o dei Prodotti del Sistema Operativo, potr riprodurre, installare e utilizzare una copia dei Componenti del Sistema Operativo in quanto parte del suddetto Prodotto o Prodotti del Sistema Operativo su tutti i suoi computer che eseguono copie validamente concesse in licenza del Prodotto o dei Prodotti del Sistema Operativo, a condizione che utilizzi tali copie aggiuntive dei Componenti del Sistema Operativo in conformit con i termini e le condizioni di cui sopra. Per ogni copia validamente concessa in licenza del Prodotto del Sistema Operativo, l'utente potr inoltre riprodurre una copia aggiuntiva dei Componenti del Sistema Operativo esclusivamente come copia di archivio o per un'eventuale reinstallazione dei Componenti del Sistema Operativo sul medesimo computer sul quale essi erano precedentemente installati. Microsoft mantiene la titolarit, i diritti e gli interessi relativi ai Componenti del Sistema Operativo. Microsoft si riserva inoltre tutti i diritti non espressamente concessi dal presente Contratto di Licenza Supplementare.


QUALORA IL PRODOTTO DEL SISTEMA OPERATIVO SIA STATO CONCESSO IN LICENZA ALL'UTENTE DA MICROSOFT O DA UNA DELLE SUE FILIALI, L'EVENTUALE GARANZIA LIMITATA INCLUSA NELL'APPLICABILE CONTRATTO DI LICENZA PER IL PRODOTTO DEL SISTEMA OPERATIVO SI APPLICA AI COMPONENTI DEL SISTEMA OPERATIVO, A CONDIZIONE CHE QUESTI SIANO STATI RICEVUTI IN LICENZA ENTRO IL PERIODO DI VALIDIT DELLA GARANZIA LIMITATA DELL'APPLICABILE CONTRATTO DI LICENZA PER IL PRODOTTO DEL SISTEMA OPERATIVO. TUTTAVIA, IL PRESENTE CONTRATTO DI LICENZA SUPPLEMENTARE NON ESTENDE IL PERIODO DI VALIDIT DELLA GARANZIA LIMITATA.

QUALORA IL PRODOTTO DEL SISTEMA OPERATIVO SIA STATO CONCESSO IN LICENZA DA UNA PERSONA FISICA O GIURIDICA DIVERSA DA MICROSOFT O DA UNA DELLE SUE FILIALI, MICROSOFT NON RICONOSCE ALCUNA GARANZIA RELATIVAMENTE AI COMPONENTI DEL SISTEMA OPERATIVO, COME INDICATO DI SEGUITO:

ESCLUSIONE DI GARANZIE. NELLA MISURA MASSIMA CONSENTITA DALLA LEGGE IN VIGORE, MICROSOFT E I SUOI FORNITORI FORNISCONO ALL'UTENTE I COMPONENTI DEL SISTEMA OPERATIVO ED EVENTUALI SERVIZI DI SUPPORTO RELATIVI AI COMPONENTI DEL SISTEMA OPERATIVO ("I SERVIZI DI SUPPORTO") "COS COME SONO" E CON I POSSIBILI DIFETTI. RELATIVAMENTE AI COMPONENTI DEL SISTEMA OPERATIVO E AI SERVIZI DI SUPPORTO, MICROSOFT E I SUOI FORNITORI NON FORNISCONO ALCUNA GARANZIA O DICHIARAZIONE, ESPRESSA, IMPLICITA O DI LEGGE, COMPRESE, IN VIA ESEMPLIFICATIVA, EVENTUALI GARANZIE O CONDIZIONI RELATIVE A: TITOLARIT, NON VIOLAZIONE DI DIRITTI ALTRUI, COMMERCIABILIT, IDONEIT PER UN FINE PARTICOLARE, ASSENZA DI VIRUS, ACCURATEZZA O ESAUSTIVIT, RISULTATI, MANCANZA DI NEGLIGENZA O DI PERIZIA, GODIMENTO O POSSESSO PACIFICO E CORRISPONDENZA A DESCRIZIONE. IL RISCHIO DERIVANTE DALL'UTILIZZO O DALLE PRESTAZIONI DEI COMPONENTI DEL SISTEMA OPERATIVO E DEI SERVIZI DI SUPPORTO  INTERAMENTE A CARICO DELL'UTENTE.

ESCLUSIONE DI RESPONSABILIT PER DANNI INCIDENTALI, INDIRETTI E DI ALTRO TIPO. NELLA MISURA MASSIMA CONSENTITA DALLA LEGGE IN VIGORE, IN NESSUN CASO MICROSOFT O I SUOI FORNITORI SARANNO RESPONSABILI PER DANNI SPECIALI, INCIDENTALI, INDIRETTI O CONSEQUENZIALI DI QUALSIASI TIPO (COMPRESI, IN VIA ESEMPLIFICATIVA, DANNI PER: MANCATO GUADAGNO, PERDITA DI INFORMAZIONI CONFIDENZIALI O DI ALTRO TIPO, INTERRUZIONE DELL'ATTIVIT, DANNI FISICI, PERDITA DI PRIVACY, OMISSIONE DI RISPETTO DI OBBLIGHI - INCLUSO QUELLO DI COMPORTARSI IN BUONA FEDE O CON RAGIONEVOLE DILIGENZA - NEGLIGENZA O ALTRE PERDITE ECONOMICHE) DERIVANTI DALL'UTILIZZO O DALL'INCAPACIT DI UTILIZZARE I COMPONENTI DEL SISTEMA OPERATIVO O I SERVIZI DI SUPPORTO O DALLA FORNITURA O DALLA MANCATA FORNITURA DEI SERVIZI DI SUPPORTO O, COMUNQUE, IN RELAZIONE AL PRESENTE CONTRATTO DI LICENZA SUPPLEMENTARE, ANCHE QUALORA MICROSOFT O I SUOI FORNITORI FOSSERO STATI AVVISATI DELLA POSSIBILIT DEL VERIFICARSI DI TALI DANNI.

LIMITAZIONE DI RESPONSABILIT E RIMEDI DELL'UTENTE. NONOSTANTE EVENTUALI DANNI IN CUI, PER QUALSIASI MOTIVO, POTR INCORRERE L'UTENTE (INCLUSI, IN VIA ESEMPLIFICATIVA, I DANNI DI CUI SOPRA E OGNI TIPO DI DANNO DIRETTO O GENERALE) LA RESPONSABILIT COMPLESSIVA DI MICROSOFT E DEI SUOI FORNITORI E L'UNICO RIMEDIO DELL'UTENTE, PER QUANTO ATTIENE UN EVENTUALE RISARCIMENTO IN BASE A QUESTO CONTRATTO DI LICENZA SUPPLEMENTARE, NON POTR COMUNQUE ECCEDERE IL MAGGIOR IMPORTO TRA QUELLO PAGATO DALL'UTENTE PER I COMPONENTI DEL SISTEMA OPERATIVO E LA SOMMA DI CINQUE DOLLARI (US$ 5). LE SUDDETTE LIMITAZIONI, ESCLUSIONI E DICHIARAZIONI DI NON RESPONSABILIT SONO APPLICABILI NELLA MISURA MASSIMA CONSENTITA DALLA LEGGE IN VIGORE, ANCHE QUALORA IL RIMEDIO NON RAGGIUNGA IL SUO SCOPO ESSENZIALE.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win2k\kor\kor.txt ===
InstallPrompt=Microsoft DirectX 8.0 ġմϴ. Ͻðڽϱ?
FinishMessage=Microsoft DirectX 8.0 ġ ϷǾϴ.
FriendlyName=Microsoft DirectX 8.0 ġ
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win2k\kor\sedkor.txt ===
α׷ Windows9X/WindowsME  ƴմϴ.  [Ȯ] ʽÿ.
"DirectX Cabpack Setup"

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win2k\jpn\webjpn.txt ===
ǉgp_
dv \ ȉ̃CZX_񏑂𒍈ӂĂǂ݂BMicrosoft Corporation (ȉu}CN\tgvƂ܂) ́uICv܂͓dq܂ރIy[eBO VXe R|[lg(ȉu{ OS R|[lgvƂ܂) ́ALɎꂽY}CN\tg Iy[eBO VXei (ȉuOS ivƂ܂) ̎gp_ (ȉeX̎gp_񏑂u_񏑁vƂ܂) ̏яȂтɂ̒ǉgp_ (ȉu{ǉ_񏑁vƂ܂) ̏яɏ܂B{ OS R|[lgCXg[AA܂͎gp邱ƂɂāAql͊Y OS ǐ_񏑂і{ǉ_񏑂̏яɍS邱Ƃɏꂽ̂Ƃ܂B̏яɓӂȂꍇA}CN\tǵAqlɖ{ OS R|[lg̃CXg[Agp܂͕̂ł܂B

: ql OS i (MICROSOFT WINDOWS 95AWINDOWS 98AWINDOWS MEA܂ WINDOWS 2000) ̐Ǩ_񏑂łȂꍇA{ OS R|[lg̃CXg[Agp܂͕̂łAql͖{ǉ_񏑂̌擾ł܂B

{ǉ_񏑂œɒ`ĂȂṕAY錴_񏑂̒`ƓӖ܂B


{ OS R|[lǵAY OS i̊̋@\Abvf[gA܂͂ɒǉႵ͑ւ邽߂ɒ񋟂Ă܂B}CN\tg͂qlɁAׂĂ̏я炷AY OS iɊւ OS ǐ_񏑂̏я (QƂɂgݍނ̂Ƃ܂) Ȃтɖ{ǉ_񏑂̏яɊÂ{ OS R|[lggp錠܂B{ǉ_񏑂̏AY OS iɊւ錴_񏑂̏ƈقȂꍇA{ OS R|[lgɂẮA{ǉ_񏑂̏Kp܂B

ǉ̌ѐ
* qlKɋꂽ OS ĩRs[𕡐̏ꍇÂ悤Ȋe OS ïꕔƂ OS ĩRs[ 1 ɂ{ OS R|[lg̃Rs[ 1 ACXg[Ďgp邱Ƃł܂BAqĺA{ OS R|[lg̒ǉRs[L̏яɏ]ĎgpȂ΂Ȃ܂BqĺARs[^̖{ OS R|[lg𕜌邽߂ɁA܂͖{ OS R|[lgŏɃCXg[ꂽRs[^ɍăCXg[ړIŁAKɋꂽ OS ĩRs[ 1 ɂ{ OS R|[lg̒ǉRs[ 1 쐬邱Ƃł܂B}CN\tǵA{ OS R|[lgɊւ邷ׂĂ̌AAїv𗯕ۂ܂B܂A{ǉ_񏑂ɓɖLĂȂׂĂ̌̓}CN\tgɋA܂B

Y OS i}CN\tg܂͂̑Szo̎qЂɂċĂꍇA{ OS R|[lgɂẮA OS ǐ_񏑂ɋLڂĂiۏ؋K肪Kp܂B̏ꍇAql OS ǐ_񏑂̕ۏ؊ԓɖ{ OS R|[lg̋擾ĂꍇɌ܂B{ǉ_񏑂͕ۏ؊Ԃ̂ł͂ȂA{ OS R|[lg̕ۏ؂ OS iɂĂ̌̕ۏ؊ԂɌ܂B

Y OS i}CN\tg܂͂̑Szo̎qЈȊO̖@lɂċĂꍇA}CN\tg͖{ OS R|[lgɊւۏ؂̐ӔCؕ̂ł͂܂B̏ꍇAȉ̖ƐӁAQɊւƐӁAӔC̐̊eKp܂B

Ɛ
@̐̌̎ނ킸A}CN\tgт̋҂́Aqlɖ{ OS R|[lgі{ OS R|[lgɊւT|[gT[rX (ȉuT|[gT[rXvƂ܂) ۏ؂ȂLp̂܂rȂŒ񋟂Ă܂B̂߁A{ OS R|[lg̎gpႵ͎gps\уT|[gT[rX̒񋟎Ⴕ͕s񋟂ɊւāAiѓ̖ړIɑ΂KAEBX̕s݁A̓ImAgpʁAߎ̕s݂܂ޕۏ؂AAَAႵ͖@̂̂łƂ킸؂܂BAA@ɔꍇ͂̌ł͂܂B{ OS R|[lggpႵ͋@\琶SĂ̊댯́AqlSȂ΂Ȃ܂B

QɊւƐ
@̐̌̎ނ킸A}CN\tgт̋҂́A{ OS R|[lg̎gpႵ͎gps\܂̓T|[gT[rX̒񋟎Ⴕ͒񋟕s\琶A܂͖{ǉ_񏑂̋KɊւĐ؂̑Q (편vA@Ⴕ͂̑̏̑rAƂ̒fAlgQAvCoV[̑rA܂͍IȒӋ`܂߂`̕ssAߎA܂͂̑̋KI܂݂܂Ɍ肳܂) ɊւĈؐӔC𕉂܂BƂA}CN\tĝ悤ȑQ̉\ɂĒm炳ĂꍇłlłB

ӔC̐
Ȃ闝RɂĐ鑹Q (L̑QђڑQ܂͒ʏ푹Q܂݂܂Ɍ肳܂) ɂւ炸A{ǉ_񏑂ɊÂ}CN\tg̐ӔĆA{ OS R|[lgɂĂqlۂɎxz܂ 700 ~̂ꂩzƂ܂B
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win2k\multi\core.txt ===
InstallPrompt="This will install Microsoft DirectX 8.0 Runtime.  Do you wish to continue?"
FinishMessage="Microsoft DirectX 8.0 Setup has completed."
FriendlyName=Microsoft DirectX 8.0 Setup
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win2k\kor\webkor.txt ===
MICROSOFT Ʈ    ༭ ߷

߿ ̹Ƿ ڼ ʽÿ.   "¶" Ǵ    Microsoft Corporation ("Microsoft")  ü  ("OS  ") Ʒ  Microsoft  ü ǰ("OS ǰ")  ༭( "   ༭" Ǵ " ༭")   ༭ ߷  ޽ϴ.  ϴ OS  Ҹ ġ,  Ǵ ν  OS ǰ  ༭   ༭ ߷ 뿡 ϰ ˴ϴ.  ̷  ༭ 뿡   쿡 OS  Ҹ ġ,  Ǵ  ʽÿ.

:   "OS ǰ"(MICROSOFT WINDOWS 95, WINDOWS 98, WINDOWS ME, ׸/Ǵ WINDOWS 2000)  ȿ  ༭  OS  Ҹ ġ,  Ǵ      ༭ ߷ϻ  Ǹ ϴ.

  ༭ ߷Ͽ ǰ  ⿡ ޸ ǵ     OS ǰ  ༭ ǵ 濡 ϴ.

Ϲ.  Microsoft شǴ OS ǰ   ,  Ǵ üϱ Ͽ Ͽ OS  Ҹ մϴ. Microsoft ش OS ǰ(ǰ  )  OS ǰ  ༭ ǰ   ༭ ߷Ͽ õ ǿ  ׸ ϰ ̷  ǵ ؼ   Ͽ Ͽ OS  Ҹ   ִ  㿩մϴ.    ༭ ߷ϰ  OS ǰ  ༭ ġ ʴ   쿡   ༭ ߷  OS  ҿ Ͽ 켱 ˴ϴ.

߰ Ǹ  .

*	ϰ شǴ  OS ǰ 纻     㿩   ϴ  شǴ OS ǰ  纻 Ǵ  ǻͿ  شǴ OS ǰ Ϻην  ü   纻 1 , ġ    ֽϴ.   ϴ ׷  ü   ߰ 纻  õ ǿ  ؾ մϴ.  ϰ   ش OS ǰ  纻 Ͽ ϴ  ̳   ü  Ұ ġ  ǻͿ  ü  Ҹ ٽ ġ  Ͽ  ü  Ҹ   ߰   ֽϴ.  Microsoft  ü  ҿ   Ǹ,    ̱ մϴ.   㿩   Ǹ Microsoft մϴ.

MICROSOFT MICROSOFT  ȸ簡 Ͽ ׷ شǴ OS ǰ  㿩 쿡 ش OS ǰ  ༭ Ե  (׷  ִ ) OS  ҿ ˴ϴ.   ش OS ǰ  ༭ Ե  Ⱓ  ϰ OS    Ͽ մϴ.   ༭ ߷   Ⱓ  ʽϴ.

MICROSOFT MICROSOFT  ȸ簡 ƴ ٸ ü ش OS ǰ   , MICROSOFT OS  ҿ Ͽ     մϴ.

 .  MICROSOFT   ڵ   ϴ ִ  ȿ OS    OS  ҿ õ   ( )(" ")   Ե ¿ ִ ״ ϸ, MICROSOFT  ڵ OS     񽺿 Ͽ , Ǹ ħؼ, ǰ, Ư  ռ, ̷ ,  Ȯ̳ , , , õ  ,  ,     ġ    Ǵ  Ͽ(̿ ѵ ) ,  Ǵ      մϴ.   ü       ̳ ɿ    ϰ δմϴ.

μ, Ļ  Ÿ Ư  .  MICROSOFT Ǵ  ڵ  쿡   ϴ ִ  ȿ OS  ҳ    Ǵ  , Ǵ    Ǵ ̸  , Ǵ   ༭ ߷ ׿  Ǵ װ Ͽ ߻ϴ  Ư, μ,  Ǵ Ļ ( ս,  Ǵ Ÿ  ս,  ߴ, , ̹ ս, ӹ  (  Ǵ ո  ǹ Ͽ),   Ÿ   Ǵ ٸ ظ ϵ ̿ ѵ ) Ͽ å  , ̴ MICROSOFT  ڰ ׷  ɼ  ˰ ִ 쿡 Դϴ.

å    .    Ͽ ߻  ִ  ( õ      Ǵ Ϲ ظ ϸ ̿ ѵ ) Ͽ,   ༭ ߷ϻ MICROSOFT  ڵ  åӰ   ؿ      ü  Ҹ ϱ Ͽ ϰ   ݾװ ȭ 5    ݾ ѵ˴ϴ.   ,            쿡   ϴ ִ  ˴ϴ.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win2k\multi\dbgcore.txt ===
InstallPrompt="This will install Microsoft DirectX 8.0 debug runtime.  Do you wish to continue?"
FinishMessage="Microsoft DirectX 8.0 Setup has completed."
FriendlyName=Microsoft DirectX 8.0 Setup (Debug)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win2k\rus\sedrus.txt ===
Windows9X/WindowsME.     "".
" DirectX Cabpack"

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win2k\rus\webrus.txt ===
MICROSOFT

   !     ,  Microsoft Corporation (  Microsoft),       (   ),      Microsoft,      (  ),       . ,        ,        ,    ,    .       ,  ,       .

!              (MICROSOFT WINDOWS 95, WINDOWS 98, WINDOWS ME  WINDOWS 2000),    ,        ,          .

,    ,    ,     ,         .

 .   ,    Microsoft,   ,      .  Microsoft          ,         (     ),           .               ,        .

   .

*         ,  ,                ,          ,  ,             .                                  ,       .             Microsoft.      Microsoft       .


        MICROSOFT,    ,  ,        ,       ,                .          .

        ,    MICROSOFT    ,  MICROSOFT    -       ,   .

   .   ,      ,  MICROSOFT                 (  )    ܻ,   ,           ,  ,   ,  (    )   , , ,    ,  ,      ,     ,  ,      .      ,               .

 ,     .  ,      ,  MICROSOFT        - , ,     (      ,     ,   ,  ,    ,    -         ,   , -      ),            ,       ,        ,     MICROSOFT           .

    .         (       ,      ),    MICROSOFT          ,    .  ,        ,      ,        .
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win2k\pol\pol.txt ===
InstallPrompt=Zostanie zainstalowany program Microsoft DirectX 8.0. Czy chcesz kontynuowac?
FinishMessage=Instalacja programu Microsoft DirectX 8.0 zostala ukonczona.
FriendlyName=Instalator programu Microsoft DirectX 8.0
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win2k\spa\sedspa.txt ===
Este programa no est diseado para usarse en Windows9X/WindowsME. Haga clic en Aceptar para salir.
"Instalacin de DirectX Cabpack"

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win2k\spa\spa.txt ===
InstallPrompt=Se instalar Microsoft DirectX 8.0. Desea continuar?
FinishMessage=Instalacin de Microsoft DirectX 8.0 finalizada.
FriendlyName=Instalacin de Microsoft DirectX 8.0
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win2k\rus\rus.txt ===
InstallPrompt=   Microsoft DirectX 8.0. ?
FinishMessage= Microsoft DirectX 8.0 .
FriendlyName= Microsoft DirectX 8.0
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win2k\pol\webpol.txt ===
UZUPENIAJCA UMOWA LICENCYJNA UYTKOWNIKA OPROGRAMOWANIA FIRMY MICROSOFT

WANE: PRZECZYTA DOKADNIE - Skadniki oprogramowania systemu operacyjnego firmy Microsoft Corporation (zwanej w skrcie "Microsoft"), cznie z dokumentacj "online" i dokumentacj elektroniczn (zwane wsplnie "Skadnikami SO"), podlegaj postanowieniom i warunkom umowy licencyjnej dotyczcej odpowiedniego systemu operacyjnego firmy Microsoft (zwanego "Produktem SO") opisanego poniej (umowa ta jest dalej zwana "Umow Licencyjn") oraz postanowieniom i warunkom niniejszej Uzupeniajcej Umowy Licencyjnej. POPRZEZ INSTALOWANIE, KOPIOWANIE LUB UYWANIE W INNY SPOSB SKADNIKW SO, LICENCJOBIORCA ZGADZA SI PRZESTRZEGA POSTANOWIE I WARUNKW ODPOWIEDNIEJ UMOWY LICENCYJNEJ PRODUKTU SO ORAZ NINIEJSZEJ UZUPENIAJCEJ UMOWY LICENCYJNEJ. JELI LICENCJOBIORCA NIE ZOBOWIZUJE SI PRZESTRZEGA TYCH POSTANOWIE I WARUNKW, NIE MA ON PRAWA DO INSTALOWANIA, KOPIOWANIA I UYWANIA SKADNIKW SO.

UWAGA: JELI LICENCJOBIORCA NIE POSIADA WANEJ UMOWY LICENCYJNEJ NA DOWOLNY "PRODUKT SO" (SYSTEM OPERACYJNY MICROSOFT WINDOWS 95, WINDOWS 98, WINDOWS ME, I/LUB WINDOWS 2000), NIE MOE INSTALOWA, KOPIOWA ANI UYWA W INNY SPOSB SKADNIKW SO, ANI TE NIE MA ADNYCH PRAW WYNIKAJCYCH Z NINIEJSZEJ UZUPENIAJCEJ UMOWY LICENCYJNEJ.

Terminy pisane duymi literami, uywane w niniejszej Uzupeniajcej Umowie Licencyjnej, a w niej w inny sposb nie okrelone, maj znaczenie nadane im w odpowiedniej Umowie Licencyjnej dotyczcej Produktu SO.

Postanowienia oglne. Skadniki SO s dostarczane Licencjobiorcy przez firm Microsoft, aby uaktualni, uzupeni lub zastpi istniejce funkcje odpowiedniego Produktu SO. Firma Microsoft udziela Licencjobiorcy prawa do uywania Skadnikw SO zgodnie z postanowieniami i warunkami Umowy Licencyjnej dotyczcej odpowiedniego Produktu SO (ktre s wczone do niniejszej Uzupeniajcej Umowy Licencyjnej przez ich przywoanie) oraz postanowieniami i warunkami niniejszej Uzupeniajcej Umowy Licencyjnej, pod warunkiem, e Licencjobiorca przestrzega tych wszystkich postanowie i warunkw. W zakresie, w ktrym adne z postanowie niniejszej Uzupeniajcej Umowy Licencyjnej nie stoi w sprzecznoci z postanowieniami Umowy Licencyjnej dotyczcej odpowiedniego Produktu SO, postanowienia niniejszej Uzupeniajcej Umowy Licencyjnej odnosz si wycznie do Skadnikw SO.

Dodatkowe prawa i ograniczenia. 

* Jeli Licencjobiorca posiada kilka wanie licencjonowanych kopii odpowiedniego Produktu(w) SO, Licencjobiorca moe kopiowa, instalowa i uywa jednej kopii Skadnikw Systemu Operacyjnego jako czci tego Produktu(w) SO na wszystkich swoich komputerach, na ktrych dziaaj wanie licencjonowane kopie Produktu SO, pod warunkiem, e Licencjobiorca uywa tych dodatkowych kopii Skadnikw Systemu Operacyjnego zgodnie z postanowieniami i warunkami okrelonymi powyej. Dla kadej wanie licencjonowanej kopii odpowiedniego Produktu SO, Licencjobiorca moe take sporzdzi jedn dodatkow kopi Skadnikw Systemu Operacyjnego wycznie w celach archiwalnych lub do ponownej instalacji tych skadnikw na tym samym komputerze, na ktrym byy one poprzednio zainstalowane. Firma Microsoft zachowuje wszelkie prawa, prawa wasnoci i dobra zwizane ze Skadnikami Systemu Operacyjnego. Wszelkie prawa nie udzielone wyranie s zastrzeone przez firm Microsoft.


JELI LICENCJA NA ODPOWIEDNI PRODUKT SO ZOSTAA UDZIELONA LICENCJOBIORCY PRZEZ FIRM MICROSOFT LUB JEDNEGO Z JEJ PENOPRAWNYCH PRZEDSTAWICIELI, TO OGRANICZONA GWARANCJA (JELI TAKA ISTNIEJE) ZNAJDUJCA SI W UMOWIE LICENCYJNEJ DOTYCZCEJ TEGO PRODUKTU OBEJMUJE RWNIE SKADNIKI SO, POD WARUNKIEM, E LICENCJA NA TE SKADNIKI OBEJMUJE POSTANOWIENIA OGRANICZONEJ GWARANCJI ZNAJDUJCE SI W UMOWIE LICENCYJNEJ ODPOWIEDNIEGO PRODUKTU SO. JEDNAKE NINIEJSZA UZUPENIAJCA UMOWA LICENCYJNA NIE PRZEDUA OKRESU CZASU, NA JAKI OGRANICZONA GWARANCJA ZOSTAA UDZIELONA.

JELI LICENCJA NA ODPOWIEDNI PRODUKT SO ZOSTAA UDZIELONA LICENCJOBIORCY PRZEZ JEDNOSTK INN NI FIRMA MICROSOFT LUB JEDEN Z JEJ PENOPRAWNYCH PRZEDSTAWICIELI, TO FIRMA MICROSOFT NA PONISZYCH ZASADACH WYCZA ODPOWIEDZIALNO Z TYTUU RKOJMI W ODNIESIENIU DO SKADNIKW SO.

WYCZENIE ODPOWIEDZIALNOCI Z TYTUU RKOJMI. W NAJSZERSZYM ZAKRESIE DOPUSZCZONYM PRZEZ PRAWO WACIWE FIRMA MICROSOFT I JEJ DOSTAWCY DOSTARCZAJ LICENCJOBIORCY SKADNIKI SO ORAZ POMOC TECHNICZN (JELI TAKA ISTNIEJE) Z NIMI ZWIZAN ("POMOC TECHNICZN") W TAKIM STANIE, W JAKIM S, WRAZ ZE WSZYSTKIMI WADAMI. FIRMA MICROSOFT ORAZ JEJ DOSTAWCY NINIEJSZYM WYCZAJ SWOJ ODPOWIEDZIALNO Z TYTUU RKOJMI W ODNIESIENIU DO SKADNIKW SO I POMOCY TECHNICZNEJ, WYRANEJ, DOMYLNEJ I STATUTOWEJ, ORAZ NIE UDZIELAJ ADNEJ GWARANCJI MIDZY INNYMI W ZAKRESIE: PRAW WASNOCI, WAD FIZYCZNYCH I PRAWNYCH, WARTOCI HANDLOWEJ, PRZYDATNOCI DO OKRELONEGO CELU, BRAKU WIRUSW, DOKADNOCI LUB KOMPLETNOCI ODPOWIEDZI, BRAKU STARANNOCI LUB FACHOWOCI, NIEZAKCONEGO UYWANIA, NIEZAKCONEGO POSIADANIA I ZGODNOCI Z OPISEM. CAE RYZYKO ZWIZANE Z UYWANIEM SKADNIKW SO I ICH FUNKCJONOWANIEM ORAZ Z POMOC TECHNICZN SPOCZYWA NA LICENCJOBIORCY.

WYCZENIE ODPOWIEDZIALNOCI ZA EWENTUALNE SZKODY. W NAJSZERSZYM ZAKRESIE DOZWOLONYM PRZEZ PRAWO WACIWE FIRMA MICROSOFT ANI JEJ DOSTAWCY NIE BD W ADNYM WYPADKU ODPOWIEDZIALNI ZA JAKIEKOLWIEK POWSTAE SZKODY (W TYM, BEZ OGRANICZE, ZA: STRATY W PROWADZONEJ DZIAALNOCI, UTRAT POUFNYCH LUB INNYCH INFORMACJI ZWIZANYCH Z PROWADZON DZIAALNOCI, PRZERWY W PROWADZENIU DZIAALNOCI, NARUSZENIE DBR OSOBISTYCH, NARUSZENIE PRYWATNOCI, NIEDOPENIENIE OBOWIZKW (ZARWNO W DOBREJ WIERZE, JAK I PRZY UZASADNIONYCH STARANIACH), BRAK STARANNOCI ORAZ INNE SZKODY FINANSOWE I JAKIEKOLWIEK STRATY) WYNIKE LUB W JAKIKOLWIEK SPOSB ZWIZANE Z UYWANIEM LUB NIEMONOCI UYWANIA SKADNIKW SO I POMOCY TECHNICZNEJ, WIADCZENIEM POMOCY TECHNICZNEJ LUB JEJ BRAKIEM, W ZWIZKU Z POSTANOWIENIAMI NINIEJSZEJ UZUPENIAJCEJ UMOWY LICENCYJNEJ, NAWET JELI FIRMA MICROSOFT LUB KTRYKOLWIEK Z JEJ DOSTAWCW ZOSTALI POWIADOMIENI O MOLIWOCI POWSTANIA TAKICH SZKD.

OGRANICZENIE ODPOWIEDZIALNOCI I ODSZKODOWANIE. BEZ WZGLDU NA JAKIEKOLWIEK SZKODY, KTRE LICENCJOBIORCA MOE PONIE Z JAKIEGOKOLWIEK POWODU (W TYM, BEZ OGRANICZE, WSZELKICH SZKD WYMIENIONYCH POWYEJ ORAZ WSZELKICH SZKD BEZPOREDNICH LUB BLIEJ NIEOKRELONYCH), CAKOWITA ODPOWIEDZIALNO FIRMY MICROSOFT I JEJ DOSTAWCW WYNIKAJCA Z POSTANOWIE NINIEJSZEJ UZUPENIAJCEJ UMOWY LICENCYJNEJ, A TAKE JEDYNE ODSZKODOWANIE DLA LICENCJOBIORCY ZA WSZELKIE WYMIENIONE POWYEJ STRATY, S OGRANICZONE DO WIKSZEJ Z KWOT: DO KWOTY ZAPACONEJ PRZEZ LICENCJOBIORC ZA SKADNIKI SYSTEMU OPERACYJNEGO LUB DO KWOTY 5,00 DOLARW AMERYKASKICH. POWYSZE OGRANICZENIA, WYCZENIA I ZRZECZENIA OBOWIZUJ W NAJSZERSZYM ZAKRESIE DOZWOLONYM PRZEZ PRAWO WACIWE, NAWET JELI ODSZKODOWANIE NIE STANOWI WYNAGRODZENIA PONIESIONEJ SZKODY.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win9x\brz\brz.txt ===
InstallPrompt=Este procedimento instalar o Microsoft DirectX 8.0. Deseja continuar?
FinishMessage=A instalao do Microsoft DirectX 8.0 foi concluda.
FriendlyName=Programa de Instalao do Microsoft DirectX 8.0
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win9x\brz\webbrz.txt ===
CONTRATO DE LICENA DE USURIO FINAL COMPLEMENTAR PARA SOFTWARE MICROSOFT

IMPORTANTE:  LEIA COM ATENO - Estes componentes do sistema operacional Microsoft Corporation ("Microsoft"), incluindo qualquer documentao on-line ou eletrnica ("Componentes do Sistema Operacional"), esto sujeitos aos termos e condies do contrato sob o qual voc licenciou o sistema operacional Microsoft aplicvel ("Sistema Operacional") descrito abaixo (cada contrato, um "Contrato Licena de Usurio Final" ou "EULA" ) e aos termos e condies deste EULA complementar.  AO INSTALAR, COPIAR OU DE QUALQUER OUTRA FORMA USAR OS COMPONENTES DO SISTEMA OPERACIONAL, VOC EST CONCORDANDO EM VINCULAR-SE AOS TERMOS E CONDIES DO EULA DO SISTEMA OPERACIONAL APLICVEL E DESTE EULA COMPLEMENTAR.  CASO NO CONCORDE COM ESTES TERMOS E CONDIES, NO INSTALE, COPIE OU USE OS COMPONENTES DO SISTEMA OPERACIONAL.

OBSERVAO:  CASO VOC NO POSSUA UM EULA VLIDO PARA QUALQUER "SISTEMA OPERACIONAL" (SISTEMA OPERACIONAL MICROSOFT WINDOWS 95, WINDOWS 98, WINDOWS ME E/OU WINDOWS 2000) VOC NO ESTAR AUTORIZADO A INSTALAR, COPIAR OU DE OUTRA FORMA USAR OS COMPONENTES DO SISTEMA OPERACIONAL E VOC NO TER DIREITOS SOB ESTE EULA COMPLEMENTAR.

Os termos em letras maisculas usados neste EULA complementar e no definidos no mesmo tero os significados que lhes foram atribudos no EULA do SISTEMA OPERACIONAL aplicvel.

Geral. Os Componentes do Sistema Operacional so fornecidos a voc pela Microsoft para atualizar, complementar ou substituir a funcionalidade existente do Sistema Operacional aplicvel. A Microsoft concede a voc uma licena para usar os Componentes do Sistema Operacional sob os termos e condies do EULA do Sistema Operacional aplicvel (aqui incorporados como referncia) e sob os termos e condies estabelecidos neste EULA complementar, contanto que voc cumpra todos estes termos e condies. Quando os termos deste EULA complementar  divergirem dos termos do EULA do Sistema Operacional aplicvel, os termos deste EULA complementar  prevalecero somente com relao aos Componentes do Sistema Operacional.

Direitos Adicionais e Limitaes. 

*	Caso voc possua vrias cpias validamente licenciadas do(s) Sistema Operacional(s) aplicveis, voc poder reproduzir, instalar e usar uma cpia dos Componentes do Sistema Operacional como parte desse(s) Sistema(s) Operacional(s) aplicveis em todos os seus computadores que executem cpias validamente licenciadas do(s) Sistema(s) Operacional(s), contanto que voc use essas cpias adicionais dos Componentes do Sistema Operacional de acordo com os termos e condies acima. Para cada cpia validamente licenciada do Sistema Operacional aplicvel, voc tambm poder reproduzir uma cpia adicional dos Componentes de Sistema Operacional somente para fins de arquivo ou reinstalao dos Componentes de Sistema Operacional no mesmo computador em que foram instalados anteriormente. A Microsoft retm todos os direitos, titularidade e interesses relacionados aos Componentes do Sistema Operacional. Todos os direitos que no estejam expressamente concedidos so reservados  Microsoft.


CASO O SISTEMA OPERACIONAL APLICVEL TENHA SIDO LICENCIADO A VOC PELA MICROSOFT OU POR QUALQUER UMA DE SUAS SUBSIDIRIAS, A GARANTIA LIMITADA (SE HOUVER) INCLUDA NO EULA DO SISTEMA OPERACIONAL APLICVEL APLICA-SE AOS COMPONENTES DO SISTEMA OPERACIONAL, CONTANTO QUE OS COMPONENTES DO SISTEMA OPERACIONAL TENHAM SIDO LICENCIADOS POR VOC DENTRO DO PERODO DA GARANTIA LIMITADA DO EULA DO SISTEMA OPERACIONAL APLICVEL. NO ENTANTO, ESTE EULA COMPLEMENTAR NO ESTENDE O PERODO DE VIGNCIA DA GARANTIA LIMITADA.

SE O SISTEMA OPERACIONAL APLICVEL TIVER SIDO LICENCIADO A VOC POR UMA ENTIDADE QUE NO SEJA A MICROSOFT OU QUALQUER UMA DE SUAS SUBSIDIRIAS, A MICROSOFT SE ISENTA DE TODAS AS GARANTIAS COM RELAO AO COMPONENTE DO SISTEMA OPERACIONAL, DA SEGUINTE FORMA:

ISENO DE GARANTIA. NA EXTENSO MXIMA PERMITIDA PELA LEGISLAO APLICVEL, A MICROSOFT E SEUS FORNECEDORES FORNECEM A VOC OS COMPONENTES DO SISTEMA OPERACIONAL E QUAISQUER SERVIOS DE SUPORTE (SE HOUVER) ("SERVIOS DE SUPORTE") RELATIVOS AOS COMPONENTES DO SISTEMA OPERACIONAL NO ESTADO EM QUE SE ENCONTRAM E COM TODAS AS FALHAS, E A MICROSOFT E SEUS FORNECEDORES SE ISENTAM DE TODAS AS CONDIES E GARANTIAS RELACIONADAS AOS COMPONENTES DO SISTEMA OPERACIONAL E SERVIOS DE SUPORTE, SEJAM EXPRESSAS, IMPLCITAS OU LEGAIS, INCLUINDO, MAS NO SE LIMITANDO A QUAISQUER GARANTIAS OU CONDIES (SE HOUVER) RELACIONADAS A: TITULARIDADE, NO-VIOLAO, COMERCIALIZAO, ADEQUAO A UMA FINALIDADE ESPECFICA, AUSNCIA DE VRUS, RESPOSTAS COMPLETAS E CORRETAS, RESULTADOS, AUSNCIA DE NEGLIGNCIA OU AUSNCIA DE  ESFORO DE APRIMORAMENTO, USO PACFICO, POSSE PACFICA E CORRESPONDNCIA  DESCRIO. VOC ASSUME TODOS OS RISCOS RESULTANTES DO USO OU DO DESEMPENHO DOS COMPONENTES DE SISTEMA OPERACIONAL E DE QUALQUER SERVIO DE SUPORTE.

EXCLUSO DE DANOS INCIDENTAIS, CONSEQENCIAIS E OUTROS. NA EXTENSO MXIMA PERMITIDA PELA LEGISLAO APLICVEL, EM HIPTESE ALGUMA A MICROSOFT OU SEUS FORNECEDORES SERO RESPONSVEIS POR QUALQUER DANO ESPECIAL, INCIDENTAL, INDIRETO OU CONSEQENCIAL (INCLUINDO, MAS NO SE LIMITANDO A DANOS POR LUCROS CESSANTES, PERDA DE INFORMAES CONFIDENCIAIS OU OUTRAS, INTERRUPO NOS NEGCIOS, DANOS PESSOAIS, PERDA DE PRIVACIDADE, FALHA NO CUMPRIMENTO DE QUALQUER OBRIGAO (INCLUSIVE DE BOA-F E COM CUIDADOS RAZOVEIS), NEGLIGNCIA E QUALQUER OUTRA PERDA FINANCEIRA OU DE QUALQUER NATUREZA) RESULTANTES DO OU DE QUALQUER FORMA RELACIONADOS COM O USO OU INABILIDADE NO USO DOS COMPONENTES DO SISTEMA OPERACIONAL OU DOS SERVIOS DE SUPORTE OU O FORNECIMENTO OU FALHA NO FORNECIMENTO DE SERVIOS DE SUPORTE OU DE OUTRO MODO SOB OU COM RELAO A QUALQUER DISPOSIO DESTE EULA COMPLEMENTAR, MESMO QUE A MICROSOFT OU QUALQUER FORNECEDOR TENHAM SIDO ALERTADOS SOBRE A POSSIBILIDADE DE TAIS DANOS. 

LIMITAO DE RESPONSABILIDADE E RECURSOS. NO OBSTANTE QUAISQUER DANOS QUE VOC VENHA A TER POR QUALQUER RAZO (INCLUINDO, SEM LIMITAES, TODOS OS DANOS MENCIONADOS ACIMA E TODOS OS DANOS DIRETOS OU GERAIS), A RESPONSABILIDADE TOTAL DA MICROSOFT E DE QUALQUER UM DE SEUS FORNECEDORES,  SOB QUALQUER DISPOSIO DESTE EULA COMPLEMENTAR, E O EXCLUSIVO RECURSO DE QUE VOC DISPE PARA TODAS AS HIPTESES ACIMA SERO LIMITADOS AO VALOR EFETIVAMENTE PAGO POR VOC PELOS COMPONENTES DO SISTEMA OPERACIONAL OU US$5,00 (CINCO DLARES AMERICANOS), O QUE FOR MAIOR. AS LIMITAES, EXCLUSES E ISENES DE RESPONSABILIDADE ACIMA SE APLICAM NA EXTENSO MXIMA PERMITIDA PELA LEGISLAO APLICVEL, MESMO QUE QUALQUER RECURSO NO CUMPRA O SEU PROPSITO ESSENCIAL.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win2k\spa\webspa.txt ===
CONTRATO COMPLEMENTARIO DE LICENCIA PARA EL USUARIO FINAL DE SOFTWARE DE MICROSOFT

IMPORTANTE: LEA ATENTAMENTE: estos componentes de sistema operativo de Microsoft Corporation ("Microsoft") incluida cualquier documentacin "en pantalla" o electrnica ("Componentes de SO") estn sujetos a los trminos y condiciones del contrato bajo el cual obtuvo la licencia para el producto de sistema operativo de Microsoft aplicable ("Producto de SO") descrito a continuacin (cada uno de ellos un "Contrato de licencia para el usuario final" o "CLUF") y a los trminos y condiciones de este CLUF complementario. AL INSTALAR, COPIAR O DE OTRA MANERA UTILIZAR LOS COMPONENTES DE SO, USTED ACEPTA QUEDAR OBLIGADO POR LOS TRMINOS Y CONDICIONES DEL CLUF DEL PRODUCTO DE SO APLICABLE Y DE ESTE CLUF COMPLEMENTARIO. SI NO ACEPTA ESTOS TRMINOS Y CONDICIONES, NO INSTALE, COPIE NI USE LOS COMPONENTES DE SO.

NOTA: SI NO TIENE UN CLUF VLIDO PARA CUALQUIER "PRODUCTO DE SO" (MICROSOFT WINDOWS 95, WINDOWS 98, WINDOWS ME Y/O WINDOWS 2000) NO EST AUTORIZADO A INSTALAR, COPIAR NI DE OTRA FORMA UTILIZAR LOS COMPONENTES DE SO Y NO TIENE DERECHOS BAJO ESTE CLUF COMPLEMENTARIO.

Los trminos en maysculas que se usan en este CLUF complementario y no se definen de otra forma en la presente tendrn los significados que se les asignan en el CLUF del Producto de SO aplicable.

General. Microsoft le proporciona los Componentes de SO para que actualice, complemente o reemplace la funcionalidad del Producto de SO aplicable. Microsoft le concede una licencia para utilizar los Componentes de SO bajo los trminos y condiciones del CLUF del Producto de SO para el Producto de SO aplicable (que se incorpora a la presente por referencia) y los trminos y condiciones establecidos en este CLUF complementario, siempre que cumpla todos dichos trminos y condiciones. En la medida en la que trminos de este CLUF complementario estn en conflicto con trminos en el CLUF del Producto de SO aplicable, los trminos de este CLUF complementario rigen nicamente en lo que respecta a los Componentes de SO.

Derechos y limitaciones adicionales. 

*	Si tiene mltiples copias con licencias vlidas del Producto o Productos de SO aplicables, puede reproducir, instalar y utilizar una copia de los Componentes de SO como parte de tales Productos de SO aplicables en todos los equipos que ejecuten copias con licencia vlida de los Productos de SO siempre que utilice dichas copias adicionales de los Componentes de SO de acuerdo con los trminos y condiciones anteriores. Por cada copia con licencia vlida del Producto de SO aplicable, puede reproducir tambin una copia adicional de los Componentes de SO nicamente con fines de archivo o para la reinstalacin de los Componentes de SO en el mismo equipo en el que se instalaron anteriormente los Componentes de SO. Microsoft retiene todos los derechos, titularidad e intereses de y sobre los Componentes de SO. Microsoft se reserva todos los derechos que no se conceden expresamente.


SI EL PRODUCTO APLICABLE LE FUE CONCEDIDO BAJO LICENCIA POR MICROSOFT O ALGUNA DE SUS SUBSIDIARIAS DE PROPIEDAD EXCLUSIVA, LA GARANTA LIMITADA (SI EXISTIERA) INCLUIDA EN EL CLUF DEL PRODUCTO DE SO APLICABLE, SE APLICA A LOS COMPONENTES DE SO SIEMPRE QUE LOS COMPONENTES DE SO LE HAYAN SIDO CONCEDIDOS BAJO LICENCIA DENTRO DEL PERODO DE LA GARANTA LIMITADA DEL CLUF DEL PRODUCTO DE SO APLICABLE. SIN EMBARGO, ESTE CLUF COMPLEMENTARIO NO AMPLA EL PERODO DE TIEMPO PARA EL QUE SE PROPORCIONA LA GARANTA LIMITADA.

SI EL PRODUCTO DE SO APLICABLE LE FUE CONCEDIDO BAJO LICENCIA POR UNA PERSONA JURDICA DISTINTA DE MICROSOFT O ALGUNA DE SUS SUBSIDIARIAS DE PROPIEDAD EXCLUSIVA, MICROSOFT RENUNCIA A DAR NINGUNA GARANTA CON RESPECTO A LOS COMPONENTES DE SO DE LA SIGUIENTE FORMA:

DENEGACIN DE GARANTAS. EN LA MEDIDA PERMITIDA POR LA LEY APLICABLE, MICROSOFT Y SUS PROVEEDORES LE PROPORCIONAN LOS COMPONENTES DE SO Y LOS SERVICIOS DE SOPORTE TCNICO (SI EXISTEN) RELACIONADOS CON LOS COMPONENTES DE SO ("SERVICIOS DE SOPORTE TCNICO") TAL CUAL Y CON TODOS LOS DEFECTOS; Y MICROSOFT Y SUS PROVEEDORES RENUNCIAN POR LA PRESENTE CON RESPECTO A LOS COMPONENTES DE SO Y LOS SERVICIOS DE SOPORTE TCNICO A TODA GARANTA Y CONDICIN YA SEA EXPRESA, IMPLCITA O PREVISTA POR LEY, INCLUIDAS PERO SIN LIMITARSE A (EN SU CASO) TODA GARANTA O CONDICIN DE O RELACIONADA CON: TITULARIDAD, AUSENCIA DE INFRACCIN, COMERCIABILIDAD, IDONEIDAD PARA UN DETERMINADO FIN, AUSENCIA DE VIRUS INFORMTICOS, EXACTITUD O INTEGRIDAD DE LAS RESPUESTAS, RESULTADOS, AUSENCIA DE NEGLIGENCIA O AUSENCIA DE ESFUERZO RAZONABLE, DE POSESIN Y DISFRUTE PLENOS Y DE CORRESPONDENCIA CON LA DESCRIPCIN. USTED ASUME TODO RIESGO QUE SURJA DE LA UTILIZACIN O DEL RENDIMIENTO DE LOS COMPONENTES DE SO Y, EN SU CASO, DE LOS SERVICIOS DE SOPORTE TCNICO.

EXCLUSIN DE RESPONSABILIDAD POR DAOS INCIDENTALES, INDIRECTOS Y OTROS. EN LA MEDIDA PERMITIDA POR LA LEY APLICABLE, EN NINGN CASO MICROSOFT O SUS PROVEEDORES SERN RESPONSABLES POR NINGN DAO, ESPECIAL, INCIDENTAL, INDIRECTO O CONSECUENCIAL CUALQUIERA QUE SEA (INCLUIDOS, PERO SIN LIMITARSE A, DAOS POR: PRDIDA DE BENEFICIOS, PRDIDA DE INFORMACIN CONFIDENCIAL O DE OTRO TIPO, INTERRUPCIN DE NEGOCIOS, DAOS A LAS PERSONAS, PRDIDA DE PRIVACIDAD, POR INCUMPLIMIENTO DE OBLIGACIONES (YA SEA DE BUENA FE O CON DILIGENCIA RAZONABLE), POR NEGLIGENCIA O POR CUALQUIER OTRA PRDIDA PECUNIARIA O DE OTRO TIPO) QUE PUDIERE SURGIR DEL USO O IMPOSIBILIDAD DE USO DE LOS COMPONENTES DE SO, O DE LOS SERVICIOS DE SOPORTE TCNICO O DE LA PROVISIN O AUSENCIA EN LA PROVISIN DE LOS SERVICIOS DE SOPORTE TCNICO, O DE CUALQUIER OTRA FORMA BAJO O EN CONEXIN CON CUALQUIER DISPOSICIN DE ESTE CLUF COMPLEMENTARIO, AUN EN EL CASO DE QUE SE HUBIERA INFORMADO A MICROSOFT DE LA POSIBILIDAD DE DICHOS DAOS. 

LIMITACIN DE RESPONSABILIDAD Y RECURSOS. NO OBSTANTE LOS DAOS EN LOS QUE PUEDA INCURRIR POR CUALQUIER RAZN (INCLUIDOS, PERO SIN LIMITARSE A, LOS DAOS A LOS QUE SE HIZO REFERENCIA ANTERIORMENTE, Y TODOS LOS DAOS DIRECTOS O GENERALES), LA NICA RESPONSABILIDAD DE MICROSOFT Y DE CUALQUIERA DE SUS PROVEEDORES BAJO CUALQUIER DISPOSICIN DE ESTE CLUF COMPLEMENTARIO Y EL NICO RECURSO QUE LE COMPETER A USTED POR TODO LO ANTEDICHO SE LIMITAR A LA CANTIDAD QUE USTED PAG POR LOS COMPONENTES DE SO O A CINCO DLARES ESTADOUNIDENSES, LO QUE RESULTE MAYOR. LAS ANTEDICHAS LIMITACIONES, EXCLUSIONES Y RENUNCIAS SE APLICARN EN LA MEDIDA PERMITIDA POR LA LEY APLICABLE, INCLUSO AUNQUE ALGN RECURSO TENGA ERRORES EN SU FIN ESENCIAL.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win9x\chs\chs.txt ===
InstallPrompt=װ Microsoft DirectX 8.0Ƿ?
FinishMessage=Microsoft DirectX 8.0 װϡ
FriendlyName=Microsoft DirectX 8.0 װ
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win9x\brz\sedbrz.txt ===
Este programa no foi projetado para uso no Windows NT. Pressione OK para sair.
"Configurao do DirectX Cabpack"

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win2k\swe\sedswe.txt ===
Det hr programmet r inte anpassat fr anvndning p Windows9X/WindowsME. Klicka p OK fr att avsluta.
"Installationsprogram med CAB-filer fr DirectX"
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win2k\swe\swe.txt ===
InstallPrompt=Microsoft DirectX 8.0 kommer att installeras. Vill du fortstta?
FinishMessage=Installationen av Microsoft DirectX 8.0 har slutfrts.
FriendlyName=Installationsprogram fr Microsoft DirectX 8.0
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win9x\chs\webchs.txt ===
Microsoft ûЭ

Ҫ֪ĶMicrosoft CorporationMicrosoftЩϵͳκΡĻӵĵOS  Microsoft òϵͳƷOS ƷʹɵЭԼÿһΪһݡûЭ顷Э顷ܱЭ顷ԼһװƻʽʹáOS ʾͬáOS ƷЭ顷ͱЭ顷ԼͬЩ벻ҪװƻʹáOS 

˵ûκΡOS ƷMICROSOFT WINDOWS 95WINDOWS 98 WINDOWS ME,/ WINDOWS  2000һЧЭ顷ȨװƻʽʹáOS ڱЭ顷ûκȨ

ڱЭ顷ʹòδڴʽԶõġOS ƷЭ顷й涨ĺ塣

һ涨Microsoft OS ṩԸ¡ȡáOS ƷйܡMicrosoft һ֤áOS ƷġOS ƷЭ顷еӦڱЭ顷ἰش뱾Э顷УͱЭ顷еʹáOS Э顷еκáOS ƷЭ顷егͻֻԡOS £ԱЭ顷еΪ׼

Ȩ

* áOS ƷĶЧɸСOS ƷЧɸмϽ֮ΪáOS ƷһָơװʹáOS һʹáOS ฽ӸáOS ƷÿһЧɸԣԽΪ˴浵ǰװЩOS ͬһ̨°װЩOS ĿĶЩOS һݸӸMicrosoft ԡOS һȨȨ档Microsoft ڴδʾһȨ

õġOS Ʒ Microsoft κȫӹ˾ʹɣõġOS ƷЭ顷еġޱ֤УЩOS õġOS ƷЭ顷ޱ֤ڻЩOS ʹɡǣЭ顷ӳáޱ֤ı֤ޡ

áOS Ʒ Microsoft κȫӹ˾֮һʵʹɣMicrosoft ЩOS йصһб֤£

֤÷ΧڣMicrosoft 乩Ӧԡ״Ұд󡱵ʽṩOS 롰OS صκΣУַ֧񣨡ַ֧񡱣 Microsoft 乩Ӧڴ˾͡OS ַ֧͡񡱷ʾġʾĻı֤ȨȨԡԡ޲Ӧ׼ȷԻԡʹûԽ޹ʧ޹⡢ܸŵʹȨܸŵռȨ˵һµκΣУ֤صκΣУ֤ɡOS κַ֧ʹûȫе

⡢ӡĳЩ⳥ų÷Χڣʹ Microsoft κιӦѱ֪𺦷ĿԣMicrosoft 乩Ӧ̾OS ַ֧Ļʹûʹйصġṩδṩַ֧񡢻ݻ漰Э顷κĻйصκġġֱӵġӵ⳥ʧϢϢʧӪҵжϡ˺˽й©δаŻڵκΡʧκǮϵʧʧɵ⳥е⳥Ρ

κͲ۷⳥ʲôԭɣе⳥ԼֱӵĻһԵ⳥Microsoft κιӦڱЭ顷κµȫԼΪȫ⳥õΨһΪOS ʵ֧ĿԪU.S.$5.00еĽϸ߿ųͷ÷ΧЧʹδﵽĿˡ
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win9x\cht\cht.txt ===
InstallPrompt=o|w Microsoft DirectX 8.0Cn~H
FinishMessage=Microsoft DirectX 8.0 w˵{wC
FriendlyName=Microsoft DirectX 8.0 w˵{
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win9x\chs\sedchs.txt ===
Windows NT ʹøó밴ȷ˳
"DirectX Cabpack װ"

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win9x\cht\webcht.txt ===
MICROSOFT nϥΪ̼WɱvX

`NнХJӾ\ŪG Microsoft q]HU١uMicrosoftv^@~tΤA]AuuWvιql]HU١uOS v^A̾AΡ@QΤgvUz Microsoft @~tγn鲣~]HU١uOS ~v^uϥΪ̱vXv]HUC٬uϥΪ̱vXvΡuvXv^BHΥuWɱvXvҳWwPڿzCuOS v@g@QΤwˡBΨϥΡAYܡ@QΤPNuOS ~vuvXvPuWɱvXvWw󤧬CY@QΤᤣPNӵAhowˡBΨϥΡuOS vC

`NGY@QΤåNuOS ~v]MICROSOFT WINDOWS 95BWINDOWS 98BWINDOWS ME Ρ WINDOWS 2000^oĤuvXvAh@QΤYLvwˡBΨϥΡuOS vA礣ɦuWɱvXvҳWwvQC

uWɱvXvҦHjg^rLꤧWAY󥻬t~[HwqAwqPuOS ~vuvXvҫwNqۦPC

@WwCuOS vY Microsoft qѵ@QΤAHsBɥRΨNuOS ~v{\धΡCMicrosoft qv@QΤɦ̷ӬuOS ~vuOS ~vXvҳWwڡ]ӵگCWɱvX@HѰѦҡ^BHΥuWɱvXvڨϥΡuOS vvQAH@QΤuҦӵWwڪ̬CuWɱvXvڭYPuOS ~vXvҽĬAhNuOSvӨMHuWɱvXvڬǡC

LvQPC

*	un@QΤ֦huOS ~vXkvAYo@QΤҦuOS ~vXkvqWƻsBw˨èϥΤAuOS vA@ӵuOS ~v@AH@QΤϥθӵuOS vLɡAuWzWw̬C@NuOS ~vCXkvA@QΤot~ƻsAuOS v@sɥγ~AΩewwˡuOS vP@xqWAצwˡuOS vΡCPuOS v@vQBҦvMQqOd Microsoft qҦCҦg¤vQOd Microsoft qҦC

YuOS ~vYg MICROSOFT qΥѨ䧹֦lqұv@QΤ̡AhuOS ~vXvY]t󦳭岫dOAAΩuOS vAuOS v@QΤuOS ~vXv岫dOWwAgvϥΪ̬CMӡAuWɱvXväNӦ岫dOҴѤC

YuOS ~vY MICROSOFT qH~ΥѨ䧹֦lqH~Lcұv@QΤ̡Ah MICROSOFT qNӡuOS vѦpUz岫dOG

ѷ岫dOCkߤ\̤jd򤺡AMICROSOFT qΨӦV@QΤҴѤuOS vAHΥi[uOS v䴩A ]HU١u䴩Aȡv^AY{Υi㦳岫ӸgѡFB MICROSOFTqΨӴNuOS vΤ䴩AȧѥܡBqܩΪkw岫dOαA䤤]AҦvBIvBAʡBŦXSwγ~BtfrB^ǽTʩΧʡBGBLLΫDʻsy޳NBzZϥΡBezABPrԭz۲šAλPWz󶵥ئ岫dOαC]ϥΩξާ@uOS vΥu䴩Aȡvҥͤ@IAѡ@QΤۦӾC

HBlͩʩMYǨLl`vdưCbkߩҤ\̤jd򤺡AMICROSOFT qΨӹ@QΤ]ϥΩΤϥΡuOS vΡu䴩AȡvBѩΤണѡu䴩AȡvB̾ڥuWɱvXvWwAΥѩWz󶵥ئ]ҵoͤSOBHBέlͤl`Atl`vdA䤤]AQlBKΨLTB~_BӤHˮ`BpvI`BLkid]]A󵽷NΦXz`NUd^BLBHΥLΨLlAWw] MICROSOFT qg@QΤƥiӷl`oͤiʦӦҤPC

l`vMvCס@QΤ]ӾDl`]]AAҦWzl`HΤ@Τ@l`^AMICROSOFT qΨӨ̥uWɱvXvکtl`v`BHΡ@QΤNWzةҾ֦ߤ@vAH@QΤNuOS vڤwIکά $5.00 ̤BCezBưWwHΤѳdOnAYkߩҤ\̤jd򤺾AΡAYϥvLkF򥻥تɥMC
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win9x\core\eng.txt ===
InstallPrompt=This will install Microsoft DirectX 8.0.  Do you wish to continue?
FinishMessage=Microsoft DirectX 8.0 Setup has completed.
FriendlyName=Microsoft DirectX 8.0 Setup
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win9x\cze\cze.txt ===
InstallPrompt=Tato akce nainstaluje rozhran Microsoft DirectX 8.0. Chcete pokraovat?
FinishMessage=Instalace rozhran Microsoft DirectX 8.0 byla dokonena.
FriendlyName=Instalace rozhran Microsoft DirectX 8.0
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win2k\swe\webswe.txt ===
KOMPLETTERANDE LICENSAVTAL FR MICROSOFTS PROGRAMVARA

VIKTIGT - LS NOGGRANT: Operativsystemkomponenterna av programvaran frn Microsoft Corporation ("Microsoft"), inklusive eventuell online- eller elektronisk dokumentation ("OS-komponenter"), omfattas av villkoren i avtalet ("Licensavtalet") under vilket Ni har licensierat den operativsystemprodukt frn Microsoft som anges nedan ("OS-produkt"), samt av villkoren i detta kompletterande licensavtal. GENOM ATT NI INSTALLERAR, FRAMSTLLER EXEMPLAR AV ELLER P ANNAT STT ANVNDER OS-KOMPONENTERNA, ACCEPTERAR NI VILLKOREN I LICENSAVTALET FR TILLMPLIG OS-PRODUKT, SAMT DETTA KOMPLETTERANDE LICENSAVTAL. OM NI INTE VILL ACCEPTERA DESSA VILLKOR, HAR NI INTE RTT ATT INSTALLERA, FRAMSTLLA EXEMPLAR AV ELLER ANVNDA OS-KOMPONENTERNA.

OBS! OM NI INTE HAR ETT GILTIGT LICENSAVTAL FR NGON "OS-PRODUKT" (MICROSOFT WINDOWS 95, WINDOWS 98, WINDOWS ME, OCH/ELLER WINDOWS 2000), HAR NI INTE RTT ATT INSTALLERA, FRAMSTLLA EXEMPLAR AV ELLER P ANNAT STT ANVNDA OS-KOMPONENTERNA OCH NI HAR INGA RTTIGHETER ENLIGT DETTA KOMPLETTERANDE LICENSAVTAL.

Termer med inledande versal som anvnds men som inte definieras i detta kompletterande licensavtal har den innebrd som anges i Licensavtalet fr tillmplig OS-produkt.

Allmnt. OS-komponenterna tillhandahlls Er av Microsoft som en uppdatering av, tillgg till eller utbyte av den befintliga funktionaliteten hos tillmplig OS-produkt. Microsoft beviljar Er en licens att anvnda OS-komponenterna enligt villkoren i Licensavtalet fr tillmplig OS-produkt (vilket hrmed ingr i detta kompletterande licensavtal genom denna hnvisning ) samt villkoren i detta kompletterande licensavtal, under frutsttning att Ni uppfyller samtliga sdana villkor. Om ngot villkor i detta kompletterande licensavtal strider mot villkoren i Licensavtalet fr tillmplig OS-produkt, skall villkoren i detta kompletterande licensavtal glla endast vad avser OS-komponenterna.

Ytterligare rttigheter och begrnsningar.

*	Om Ni har flera lagligen licensierade exemplar av tillmpliga OS-produkter, har Ni rtt att framstlla, installera och anvnda ett exemplar av OS-komponenterna som en del av sdana OS-produkter, p samtliga Era datorer som kr lagligen licensierade exemplar av OS-produkterna, under frutsttning att Ni anvnder sdana ytterligare exemplar av OS-komponenterna i enlighet med villkoren ovan. Fr varje lagligen licensierat exemplar av tillmplig OS-produkt, har Ni ven rtt att framstlla ytterligare ett exemplar av OS-komponenterna endast fr arkivering eller terinstallation av OS-komponenterna p samma dator som OS-komponenterna tidigare installerats. Microsoft behller samtliga rttigheter, gandertt till eller intressen i OS-komponenterna. Microsoft frbehller sig samtliga rttigheter som inte uttryckligen beviljas.


OM DEN TILLMPLIGA OS-PRODUKTEN LICENSIERADES TILL ER AV MICROSOFT ELLER NGOT AV DESS HELGDA DOTTERBOLAG, GLLER DEN EVENTUELLA BEGRNSADE GARANTIN SOM ANGES I LICENSAVTALET FR TILLMPLIG OS-PRODUKT FR OS-KOMPONENTERNA, UNDER FRUTSTTNING ATT OS-KOMPONENTERNA LICENSIERATS AV ER INOM DEN GARANTIPERIOD SOM ANGES I LICENSAVTALET FR TILLMPLIG OS-PRODUKT. DETTA KOMPLETTERANDE LICENSAVTAL INNEBR EMELLERTID INTE ATT GARANTIPERIODEN FR DEN BEGRNSADE GARANTIN FRLNGS.

OM DEN TILLMPLIGA OS-PRODUKTEN LICENSIERADES TILL ER AV NGON ANNAN N MICROSOFT ELLER NGOT AV DESS HELGDA DOTTERBOLAG, FRISKRIVER SIG MICROSOFT FRN ALLT GARANTIANSVAR AVSEENDE OS-KOMPONENTERNA I ENLIGHET MED FLJANDE:

INGA GARANTIER. MED UNDANTAG AV VAD SOM FLJER AV TVINGANDE LAG, TILLHANDAHLLER MICROSOFT OCH DESS LEVERANTRER OS-KOMPONENTER SAMT EVENTUELLA SUPPORTTJNSTER RELATERADE TILL OS-KOMPONENTER ("SUPPORTTJNSTER") I BEFINTLIGT SKICK. MICROSOFT OCH DESS LEVERANTRER FRISKRIVER SIG VIDARE FRN ALLT GARANTIANSVAR AVSEENDE OS-KOMPONENTER OCH SUPPORTTJNSTER, SVL UTTRYCKLIGEN SOM UNDERFRSTTT, INKLUSIVE GARANTIER AVSEENDE GANDERTTIGHETER, FRNVARO AV INTRNG I TREDJE MANS RTTIGHETER, PRODUKTENS ALLMNNA LMPLIGHET ELLER LMPLIGHET FR ETT SRSKILT NDAML, FRNVARO AV VIRUS, KORREKTA OCH FULLSTNDIGA SVAR, RESULTAT, FRNVARO AV VRDSLSHET, FACKMANNAMSSIGT UTFRANDE, BESITTNING SAMT VERENSSTMMELSE MED BESKRIVNING. NI STR ENSAM HELA RISKEN FR ANVNDNING AV OS-KOMPONENTER OCH SUPPORTJNSTER.

BEGRNSNING AV ANSVAR FR INDIREKTA SKADOR, FLJDSKADOR OCH ANDRA SKADOR. MED UNDANTAG AV VAD SOM FLJER AV TVINGANDE LAG, ANSVARAR MICROSOFT ELLER DESS LEVERANTRER UNDER INGA OMSTNDIGHETER FR INDIREKTA SKADOR, FLJDSKADOR ELLER NGRA SOM HELST ANDRA SKADOR (INKLUSIVE, UTEBLIVEN VINST, FRLUST AV KONFIDENTIELL ELLER ANNAN INFORMATION, DRIFTAVBROTT, PERSONSKADA, INTEGRITETSSKADA, SKADA ORSAKAD AV BRISTANDE UPPFYLLELSE AV EN FRPLIKTELSE (INKLUSIVE MED ANLEDNING AV GOD TRO ELLER SKLIG AKTSAMHET), SKADA ORSAKAD AV VRDSLSHET SAMT ALLA EKONOMISKA SKADOR) TILL FLJD AV ANVNDNING AV ELLER SVRIGHET ELLER OMJLIGHET ATT ANVNDA OS-KOMPONENTERNA ELLER SUPPORTJNSTERNA ELLER TILLHANDAHLLANDE AV ELLER UTEBLIVNA SUPPORTTJNSTER, ELLER ANNARS I SAMBAND MED DETTA KOMPLETTERANDE LICENSAVTAL, VEN OM MICROSOFT ELLER DESS LEVERANTRER UPPMRKSAMMATS P RISKEN FR SDANA SKADOR.

ANSVARSBEGRNSNING. OAVSETT VILKA SKADOR NI ORSAKAS OCH OAVSETT ORSAK (INKLUSIVE SAMTLIGA SKADOR SOM ANGES OVAN SAMT SAMTLIGA DIREKTA ELLER EKONOMISKA SKADOR), R MICROSOFTS OCH DESS LEVERANTRERS TOTALA ANSVAR UNDER VILLKOREN I DETTA KOMPLETTERANDE LICENSAVTAL, BEGRNSAD TILL DET STRRE AV ANTINGEN DET BELOPP SOM FAKTISKT ERLAGTS AV ER FR OS-KOMPONENTERNA ELLER USD 5,00. OVANSTENDE ANSVARSBEGRNSNINGAR OCH FRISKRIVNINGAR GLLER OM INTE ANNAT FLJER AV TVINGANDE LAG, VEN OM EN PFLJD INTE KAN GRAS GLLANDE.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win9x\cze\webcze.txt ===
DOPLKOV LICENN SMLOUVA S KONCOVM UIVATELEM NA SOFTWARE SPOLENOSTI MICROSOFT

DLEIT: TTE POZORN - Tyto sousti operanho systmu spolenosti Microsoft Corporation (Microsoft) vetn jakkoli dokumentace v tzv. online" neboli elektronick form (Sousti operanho systmu) jsou pedmtem podmnek smlouvy, kterou jste zskali licenci na pslun operan systm spolenosti Microsoft (Operan systm) popsan dle (kad Licenn smlouva s koncovm uivatelem neboli EULA), a dle podmnek tto doplkov smlouvy EULA. INSTALAC, KOPROVNM NEBO JINM POUITM SOUST OPERANHO SYSTMU POTVRZUJETE, E SOUHLASTE S PODMNKAMI TTO DOPLKOV SMLOUVY EULA, A JSTE JIMI VZNI. POKUD S TMITO PODMNKAMI NESOUHLASTE, SOUSTI OPERANHO SYSTMU NEINSTALUJTE, NEKOPRUJTE ANI JINAK NEPOUVEJTE.

POZNMKA: POKUD NEMTE PLATNOU SMLOUVU EULA PRO KTERKOLI OPERAN SYSTM (OPERAN SYSTM MICROSOFT WINDOWS 95, WINDOWS 98, WINDOWS ME nebo WINDOWS 2000), NEJSTE OPRVNNI SOUSTI OPERANHO SYSTMU INSTALOVAT, KOPROVAT ANI JINAK POUVAT A TATO DOPLKOV SMLOUVA EULA VM NEPOSKYTUJE DN PRVA.

Podmnky, kter jsou v tto doplkov smlouv EULA psny velkmi psmeny a nejsou zde dle jinak definovny, maj tent vznam jako podmnky v pslunch smlouvch EULA k Operanmu systmu.

Obecn. Sousti operanho systmu jsou vm poskytovny k aktualizaci, doplnn nebo vmn existujc funkce pslunho Operanho systmu. Spolenost Microsoft vm udluje licenci na pouvn Soust operanho systmu za podmnek smlouvy EULA na pslun Operan systm (tato smlouva je zde zahrnuta) a dalch podmnek danch touto doplkovou smlouvou EULA, za pedpokladu, e vechny tyto podmnky splnte. V ppad, e kterkoli podmnky tto doplkov smlouvy EULA jsou v konfliktu s podmnkami smlouvy EULA na pslun Operan systm, plat pro Sousti operanho systmu pouze podmnky tto doplkov smlouvy EULA.

Dodaten prva a omezen.

* Pokud vlastnte nkolik platn licencovanch kopi pslunho Operanho systmu (Operanch systm), smte reprodukovat, instalovat a pouvat jednu kopii Soust operanho systmu jako soust pslunho Operanho systmu na vech potach, na kterch je sputna kopie Operanho systmu s platnou licenc, za pedpokladu, e tyto dal kopie Soust operanho systmu budete pouvat ve shod s ve uvedenmi podmnkami. Pro kadou platn licencovanou kopii pslunho Operanho systmu mete tak vytvoit jednu dal kopii Soust operanho systmu, kter slou pouze pro ely archivovn nebo peinstalovn Soust operanho systmu na tomt potai, na kterm byly tyto Sousti operanho systmu dve instalovny. Spolenost Microsoft si ponechv vechna prva, vlastnictv a zjmy tkajc se Soust operanho systmu. Vechna prva, kter nejsou vslovn udlena, jsou vyhrazena spolenosti Microsoft.


POKUD VM LICENCE NA PSLUN OPERAN SYSTM BYLA UDLENA SPOLENOST MICROSOFT NEBO KTEROUKOLI Z JEJCH DCEINCH SPOLENOST, VZTAHUJE SE NA SOUSTI OPERANHO SYSTMU OMEZEN ZRUKA (POKUD EXISTUJE) ZAHRNUT VE SMLOUV EULA PSLUNHO OPERANHO SYSTMU, ZA PEDPOKLADU, E LICENCE NA SOUSTI OPERANHO SYSTMU VM BYLA UDLENA V DOB PLATNOSTI OMEZEN ZRUKY VE SMLOUV EULA PSLUNHO OPERANHO SYSTMU. TATO DOPLKOV SMLOUVA EULA VAK NEPRODLUUJE ASOV OBDOB, NA KTER JE POSKYTNUTA TATO OMEZEN ZRUKA.

POKUD VM LICENCE NA PSLUN OPERAN SYSTM BYLA UDLENA JINM SUBJEKTEM NE SPOLENOST MICROSOFT NEBO KTEROUKOLI JEJ DCEINOU SPOLENOST, NEUZNV SPOLENOST MICROSOFT DN ZRUKY VZTAHUJC SE K SOUSTEM OPERANHO SYSTMU, JAK JE UVEDENO DLE:

ZEKNUT SE ZRUK. V NEJVTM MONM ROZSAHU POVOLENM ROZHODNM PRVEM VM SPOLENOST MICROSOFT A JEJ DODAVATEL POSKYTUJ SOUSTI OPERANHO SYSTMU A VEKEROU (POKUD EXISTUJE) ODBORNOU POMOC VZTAHUJC SE K TMTO SOUSTEM (ODBORN POMOC) TAK, JAK STOJ A LE A SE VEMI CHYBAMI; SPOLENOST MICROSOFT A JEJ DODAVATEL SE TMTO ZKAJ VECH ZRUK A PODMNEK VZTAHUJCCH SE K SOUSTEM OPERANHO SYSTMU A K ODBORN POMOCI, A VSLOVNCH, PEDPOKLDANCH NEBO STATUTRNCH, VETN, ALE NIKOLI VHRADN, VEKERCH ZRUK A PODMNEK (POKUD EXISTUJ) VZTAHUJCCH SE K: VLASTNICKM PRVM, PRVNM VADM, OBCHODOVATELNOSTI, VHODNOSTI PRO URIT EL, NEPTOMNOSTI VIR, PESNOSTI NEBO PLNOSTI ODPOVD, VSLEDKM, ZANEDBN NEBO NEDOSTATENMU SIL PRACOVNK, NERUENMU UVN, NERUENMU VLASTNICTV A SHOD S POPISEM. VEKER RIZIKA VZNIKL UVNM NEBO VKONEM SOUST OPERANHO SYSTMU A JAKKOLI ODBORN POMOCI SPOVAJ NA VS.

VYLOUEN NHODNCH, NSLEDNCH A URITCH JINCH KOD. V NEJVTM MONM ROZSAHU POVOLENM ROZHODNM PRVEM NENESE SPOLENOST MICROSOFT ANI JEJ DODAVATEL V DNM PPAD ODPOVDNOST ZA JAKKOLI ZVLTN, NHODN, NEPM NEBO NSLEDN KODY (VETN, ALE NE VHRADN, KOD VZTAHUJCCH SE K: ZTRT ZISKU, ZTRT TAJNCH NEBO JINCH INFORMAC, PERUEN PODNIKN, UBL͎EN NA ZDRAV, ZTRT SOUKROM, NEMONOSTI SPLNIT POVINNOST (I PI DOBR VLI NEBO DOSTATEN PI), ZANEDBN NEBO JAKKOLI FINANN NEBO JIN ZTRTY) VZNIKL NEBO JAKMKOLI ZPSOBEM SE VZTAHUJC K POUIT NEBO NEMONOSTI POUIT SOUST OPERANHO SYSTMU NEBO ODBORNPOMOCI, POSKYTNUT NEBO NEPOSKYTNUT ODBORN POMOCI, NEBO JAKKOLI ZAHRNUT V PODMNKCH TTO DOPLKOV SMLOUVY EULA, A TO I V PPAD, E SPOLENOST MICROSOFT BYLA NA MONOST VZNIKU TAKOV KODY UPOZORNNA.

OMEZEN ODPOVDNOSTI A V݊E ODKODNHO. BEZ OHLEDU NA JAKKOLI KODY, KTER JSTE Z JAKHOKOLI DVODU UTRPLI (VETN, ALE NE VHRADN, VECH KOD ZMNNCH V݊E A VECH PMCH NEBO OBECNCH KOD), VEKER NHRADY SPOLENOSTI MICROSOFT A JEJCH DODAVATEL PODLE USTANOVEN TTO DOPLKOV SMLOUVY EULA A V݊E ODKODNHO ZA VECHNY ZMNN KODY NESMJ PESHNOUT SKUTEN ZAPLACENOU STKU ZA SOUSTI OPERANHO SYSTMU NEBO STKU 5 AMERICKCH DOLAR, PIEM URUJC JE VY Z OBOU STEK. V݊E UVEDEN OMEZEN, VYLOUEN A ZEKNUT SE PLAT V NEJVTM MONM ROZSAHU POVOLENM ROZHODNM PRVEM, A TO I V PPAD, E JAKKOLI NROKY BY NENAPLNILY SVJ ZKLADN EL.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win9x\dut\dut.txt ===
InstallPrompt=Hiermee wordt Microsoft DirectX 8.0 genstalleerd.  Wilt u doorgaan?
FinishMessage=Microsoft DirectX 8.0 Setup is voltooid.
FriendlyName=Microsoft DirectX 8.0 Setup
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win9x\cht\sedcht.txt ===
oӵ{O]pΦb Windows NT WCЫ [Tw] {C
"w DirectX Cabpack"
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win9x\dut\webdut.txt ===
AANVULLENDE GEBRUIKSRECHTOVEREENKOMST VOOR MICROSOFT-SOFTWARE

BELANGRIJK: LEES DIT ZORGVULDIG DOOR - Deze onderdelen van het besturingssysteem van Microsoft Corporation ("Microsoft"), inclusief eventuele "on line" of elektronische documentatie ("Besturingssysteemonderdelen"), zijn onderworpen aan de bepalingen van de overeenkomst volgens welke u het toepasselijke Microsoft-besturingssysteemproduct ("Besturingssysteemproduct") dat hierna wordt beschreven, in licentie hebt gekregen ( "Gebruiksrechtovereenkomst" of "Overeenkomst") en aan de bepalingen van deze Aanvullende Overeenkomst. DOOR DE BESTURINGSSYSTEEMONDERDELEN TE INSTALLEREN, TE KOPIREN OF ANDERSZINS TE GEBRUIKEN, STEMT U ERMEE IN AAN DE BEPALINGEN VAN DE OVEREENKOMST AANGAANDE HET TOEPASSELIJKE BESTURINGSSYSTEEMPRODUCT EN VAN DEZE AANVULLENDE OVEREENKOMST GEBONDEN TE ZIJN. INDIEN U NIET INSTEMT MET DEZE BEPALINGEN, MAG U DE BESTURINGSSYSTEEMONDERDELEN NIET INSTALLEREN, KOPIREN OF GEBRUIKEN.

OPMERKING: INDIEN U NIET BESCHIKT OVER EEN GELDIGE OVEREENKOMST VOOR EEN "BESTURINGSSYSTEEMPRODUCT" (MICROSOFT WINDOWS 95, WINDOWS 98, WINDOWS ME, EN/OF WINDOWS 2000), BENT U NIET GERECHTIGD DE BESTURINGSSYSTEEMONDERDELEN TE INSTALLEREN, TE KOPIREN OF ANDERSZINS TE GEBRUIKEN EN KUNT U AAN DEZE AANVULLENDE OVEREENKOMST GEEN RECHTEN ONTLENEN.

Termen in hoofdletters in deze Aanvullende Overeenkomst die hier niet anderszins zijn gedefinieerd, hebben dezelfde betekenis als gedefinieerd in de Overeenkomst van het toepasselijke Besturingssysteemproduct.

Algemeen. De Besturingssysteemonderdelen worden door Microsoft aan u verstrekt om bestaande functionaliteit van het toepasselijke Besturingssysteemproduct bij te werken, aan te vullen of te vervangen. Microsoft verleent u een licentie voor het gebruiken van de Besturingssysteemonderdelen in overeenstemming met de bepalingen van de Overeenkomst voor het toepasselijke Besturingssysteemproduct (die hierdoor middels verwijzing hierin zijn opgenomen) en de bepalingen die in deze Aanvullende Overeenkomst worden uiteengezet, mits u al deze bepalingen nakomt. Voor zover enige bepalingen in deze Aanvullende Overeenkomst in tegenspraak zijn met bepalingen in de Overeenkomst voor het toepasselijke Besturingssysteemproduct, gaan de bepalingen van deze Aanvullende Overeenkomst voor, uitsluitend voorzover zij betrekking hebben op de Besturingssysteemonderdelen.

Aanvullende rechten en beperkingen.

*	Indien u beschikt over meerdere exemplaren met geldige licenties van het (de) toepasselijke Besturingssysteemproduct(en), mag u n exemplaar van de Besturingssysteemonderdelen als onderdeel van (een) dergelijk(e) toepasselijk(e) Besturingssysteemproduct(en) verveelvoudigen, installeren en gebruiken op al uw computers waarop exemplaren van het (de) Besturingssysteemproduct(en) met geldige licenties worden uitgevoerd, mits u dergelijke aanvullende exemplaren van de Besturingssysteemonderdelen gebruikt overeenkomstig de hierboven genoemde bepalingen. Voor ieder exemplaar van het toepasselijke Besturingssysteemproduct met een geldige licentie mag u tevens n extra kopie van de Besturingssysteemonderdelen maken, uitsluitend voor archiveringsdoeleinden of voor het opnieuw installeren van de Besturingssysteemonderdelen op dezelfde computer waarop de Besturingssysteemonderdelen eerder waren genstalleerd. Microsoft behoudt alle rechten op, de eigendom van en belangen in de Besturingssysteemonderdelen. Alle rechten die niet uitdrukkelijk zijn verleend, blijven voorbehouden aan Microsoft.


INDIEN HET TOEPASSELIJKE BESTURINGSSYSTEEMPRODUCT AAN U IN LICENTIE IS GEGEVEN DOOR MICROSOFT OF DOOR EEN VAN HAAR 100% DOCHTERONDERNEMINGEN, IS DE BEPERKTE GARANTIE (INDIEN AANWEZIG) DIE IN DE OVEREENKOMST VAN HET TOEPASSELIJKE BESTURINGSSYSTEEMPRODUCT IS OPGENOMEN, VAN TOEPASSING OP DE BESTURINGSSYSTEEMONDERDELEN MITS DE BESTURINGSSYSTEEMONDERDELEN AAN U IN LICENTIE ZIJN GEGEVEN BINNEN DE TERMIJN VAN DE BEPERKTE GARANTIE IN DE OVEREENKOMST VAN HET TOEPASSELIJKE BESTURINGSSYSTEEMPRODUCT. DEZE AANVULLENDE OVEREENKOMST VERLENGT ECHTER DE TERMIJN VAN DE BEPERKTE GARANTIE NIET.

INDIEN HET TOEPASSELIJKE BESTURINGSSYSTEEMPRODUCT AAN U IN LICENTIE IS GEGEVEN DOOR EEN ANDERE ENTITEIT DAN MICROSOFT OF EEN VAN HAAR 100% DOCHTERONDERNEMINGEN, WIJST MICROSOFT ALLE GARANTIES MET BETREKKING TOT HET BESTURINGSSYSTEEMONDERDEEL ALS VOLGT AF:

AFWIJZING VAN GARANTIES. VOOR ZOVER MAXIMAAL IS TOEGESTAAN OP GROND VAN TOEPASSELIJK RECHT, VERSTREKKEN MICROSOFT EN HAAR LEVERANCIERS AAN U DE BESTURINGSSYSTEEMONDERDELEN EN (INDIEN AANWEZIG) ALLE PRODUCTONDERSTEUNING DIE BETREKKING HEEFT OP DE BESTURINGSSYSTEEMONDERDELEN ("PRODUCTONDERSTEUNING") IN DE HUIDIGE STAAT EN MET ALLE AANWEZIGE FOUTEN; EN MICROSOFT EN HAAR LEVERANCIERS WIJZEN HIERDOOR ALLE GARANTIES EN VOORWAARDEN MET BETREKKING TOT DE BESTURINGSSYSTEEMONDERDELEN EN PRODUCTONDERSTEUNING VAN DE HAND, HETZIJ UITDRUKKELIJK, HETZIJ IMPLICIET, HETZIJ WETTELIJK, DAARONDER MEDE BEGREPEN MAAR NIET BEPERKT TOT ENIGE GARANTIES OF VOORWAARDEN (INDIEN AANWEZIG) BETREFFENDE: EIGENDOM, NIET-INBREUKMAKEND KARAKTER, VERKOOPBAARHEID, GESCHIKTHEID VOOR EEN BEPAALD DOEL, AFWEZIGHEID VAN VIRUSSEN, JUISTHEID OF VOLLEDIGHEID VAN REACTIES, RESULTATEN, AFWEZIGHEID VAN NALATIGHEID OF AFWEZIGHEID VAN GEBREK AAN VAKBEKWAME INSPANNING, ONGESTOORD GEBRUIK, ONGESTOORD BEZIT EN OVEREENSTEMMING MET BESCHRIJVING. VOOR ZOVER MAXIMAAL TOEGESTAAN ONDER TOEPASSELIJK RECHT, BERUST HET VOLLEDIGE RISICO VOORTKOMENDE UIT HET GEBRUIK OF DE WERKING VAN DE BESTURINGSSYSTEEMONDERDELEN EN EVENTUELE PRODUCTONDERSTEUNING BIJ U.

UITSLUITING VAN INCIDENTELE SCHADE, GEVOLGSCHADE OF BEPAALDE ANDERE SCHADE. VOOR ZOVER MAXIMAAL IS TOEGESTAAN OP GROND VAN TOEPASSELIJK RECHT, ZULLEN MICROSOFT OF HAAR LEVERANCIERS IN GEEN ENKEL GEVAL AANSPRAKELIJK ZIJN VOOR ENIGE SPECIALE, INCIDENTELE, INDIRECTE OF GEVOLGSCHADE HOE DAN OOK (DAARONDER MEDE BEGREPEN MAAR NIET BEPERKT TOT SCHADE ALS GEVOLG VAN: WINSTDERVING, VERLIES VAN VERTROUWELIJKE OF ANDERE INFORMATIE, BEDRIJFSONDERBREKING, LICHAMELIJK LETSEL, INBREUK OP PRIVACY, HET NIET VOLDOEN AAN ENIGE VERPLICHTING (DAARONDER MEDE BEGREPEN GOEDE TROUW OF REDELIJKE ZORG), NALATIGHEID EN ENIG ANDER FINANCIEEL VERLIES OF VERLIES VAN ENIGE ANDERE AARD, ALS GEVOLG VAN OF OP ENIGERLEI WIJZE BETREKKING HEBBEND OP HET GEBRUIK OF HET NIET KUNNEN GEBRUIKEN VAN DE BESTURINGSSYSTEEMONDERDELEN OF DE PRODUCTONDERSTEUNING, OF ALS GEVOLG VAN HET VERSTREKKEN OF NIET VERSTREKKEN VAN PRODUCTONDERSTEUNING, OF ANDERSZINS VOLGENS OF IN VERBAND MET ENIGE BEPALING VAN DEZE AANVULLENDE OVEREENKOMST, ZELFS INDIEN MICROSOFT OF EEN LEVERANCIERS OP DE HOOGTE IS GESTELD VAN DE MOGELIJKHEID VAN DIE SCHADE.

BEPERKING VAN AANSPRAKELIJKHEID EN VERHAALSMOGELIJKHEDEN. NIETTEGENSTAANDE ENIGE SCHADE DIE U MOGELIJK DOOR WELKE OORZAAK DAN OOK ZOU KUNNEN LIJDEN (INCLUSIEF, MAAR NIET BEPERKT TOT, ALLE SOORTEN SCHADE DIE HIERBOVEN ZIJN GENOEMD EN ALLE DIRECTE OF ALGEMENE SCHADE), ZAL DE GEHELE AANSPRAKELIJKHEID VAN MICROSOFT EN IEDER VAN HAAR LEVERANCIERS OP GROND VAN ENIGE BEPALING IN DEZE AANVULLENDE OVEREENKOMST EN UW ENIGE VERHAALSMOGELIJKHEID MET BETREKKING TOT AL HET VOORGAANDE ZIJN BEPERKT TOT HET FEITELIJK DOOR U VOOR DE BESTURINGSSYSTEEMONDERDELEN BETAALDE BEDRAG, MET EEN MINIMUM VAN VIJF DOLLAR (U.S. $5,00). DE VOORNOEMDE BEPERKINGEN, UITSLUITINGEN EN AFWIJZINGEN ZIJN VAN TOEPASSING VOOR ZOVER MAXIMAAL IS TOEGESTAAN OP GROND VAN TOEPASSELIJK RECHT, OOK ALS ENIGE VERHAALSMOGELIJKHEID HET ESSENTILE DOEL NIET HEEFT GEDIEND.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win9x\eng\eng.txt ===
InstallPrompt=This will install Microsoft DirectX 8.0.  Do you wish to continue?
FinishMessage=Microsoft DirectX 8.0 Setup has completed.
FriendlyName=Microsoft DirectX 8.0 Setup
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win9x\eng\webeng.txt ===
SUPPLEMENTAL END USER LICENSE AGREEMENT FOR MICROSOFT SOFTWARE

IMPORTANT:  READ CAREFULLY - The Microsoft Corporation ("Microsoft") operating system components which you are about to install, including any "online" or electronic documentation ("OS COMPONENTS"), are subject to the terms and conditions of the agreement under which you have validly licensed the applicable Microsoft operating system product identified below (each an "End User License Agreement" or "EULA") and the terms and conditions of this Supplemental EULA.  BY INSTALLING, COPYING OR OTHERWISE USING THE OS COMPONENTS, YOU AGREE TO BE BOUND BY THE TERMS AND CONDITIONS OF THE EULA FOR THE APPLICABLE OPERATING SYSTEM PRODUCT IDENTIFIED BELOW AND THIS SUPPLEMENTAL EULA.  IF YOU DO NOT AGREE TO THESE TERMS AND CONDITIONS, DO NOT INSTALL, COPY OR USE THE OS COMPONENTS.  

NOTE:  IF YOU DO NOT HAVE A VALID EULA FOR EITHER MICROSOFT WINDOWS 95, WINDOWS 98, WINDOWS ME, OR WINDOWS 2000, (each an "OS Product"), YOU ARE NOT AUTHORIZED TO INSTALL, COPY OR OTHERWISE USE THE OS COMPONENTS AND YOU HAVE NO RIGHTS UNDER THIS SUPPLEMENTAL EULA.

Capitalized terms used in this Supplemental EULA and not otherwise defined herein shall have the meanings assigned to them in the applicable OS Product EULA.

General.  The OS COMPONENTS are provided to you by Microsoft to update, supplement, or replace existing functionality of the applicable OS Product. Microsoft grants you a license to use the OS COMPONENTS under the terms and conditions of the EULA for the applicable OS Product (which is hereby incorporated by reference) and the terms and conditions set forth in this Supplemental EULA, provided that you comply with all such terms and conditions.  To the extent that any terms in this Supplemental EULA conflict with terms in the applicable OS Product EULA, the terms of this Supplemental EULA control solely with respect to the OS COMPONENTS.  

Additional Rights and Limitations.  

*	If you have multiple validly licensed copies of the applicable OS Product(s), you may reproduce, install and use one copy of the OS COMPONENTS as part of such OS Product on each of your computers running validly licensed copies of such OS Product(s) provided that you use such additional copies of the OS COMPONENTS in accordance with the terms and conditions above.  For each validly licensed copy of an applicable OS Product, you also may reproduce one additional copy of the OS COMPONENTS solely for archival purposes or reinstallation of the OS COMPONENTS on the same computer as the OS COMPONENTS were previously installed.  Microsoft retains all right, title and interest in and to the OS COMPONENTS.  All rights not expressly granted are reserved by Microsoft.

IF THE OS PRODUCT WAS LICENSED TO YOU BY MICROSOFT OR ANY OF ITS WHOLLY OWNED SUBSIDIARIES, THE LIMITED WARRANTY (IF ANY) INCLUDED IN THE OS PRODUCT EULA APPLIES TO THE OS COMPONENTS PROVIDED THE OS COMPONENTS HAVE BEEN LICENSED BY YOU WITHIN THE TERM OF THE LIMITED WARRANTY IN THE OS PRODUCT EULA. HOWEVER, THIS SUPPLEMENTAL EULA DOES NOT EXTEND THE TIME PERIOD FOR WHICH THE LIMITED WARRANTY IS PROVIDED.

IF THE OS PRODUCT WAS LICENSED TO YOU BY AN ENTITY OTHER THAN MICROSOFT OR ANY OF ITS WHOLLY OWNED SUBSIDIARIES, MICROSOFT DISCLAIMS ALL WARRANTIES WITH RESPECT TO THE OS COMPONENTS AS FOLLOWS:

DISCLAIMER OF WARRANTIES.  TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, MICROSOFT AND ITS SUPPLIERS PROVIDE TO YOU THE OS COMPONENTS, AND ANY (IF ANY) SUPPORT SERVICES RELATED TO THE OS COMPONENTS ("SUPPORT SERVICES") AS IS AND WITH ALL FAULTS; AND MICROSOFT AND ITS SUPPLIERS HEREBY DISCLAIM WITH RESPECT TO THE OS COMPONENTS AND SUPPORT SERVICES ALL WARRANTIES AND CONDITIONS, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, ANY (IF ANY) WARRANTIES OR CONDITIONS OF OR RELATED TO:  TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES, ACCURACY OR COMPLETENESS OF RESPONSES, RESULTS, LACK OF NEGLIGENCE OR LACK OF WORKMANLIKE EFFORT, QUIET ENJOYMENT, QUIET POSSESSION, AND CORRESPONDENCE TO DESCRIPTION.  THE ENTIRE RISK ARISING OUT OF USE OR PERFORMANCE OF THE OS COMPONENTS AND ANY SUPPORT SERVICES REMAINS WITH YOU.

EXCLUSION OF INCIDENTAL, CONSEQUENTIAL AND CERTAIN OTHER DAMAGES.  TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, IN NO EVENT SHALL MICROSOFT OR ITS SUPPLIERS BE LIABLE FOR ANY SPECIAL, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL DAMAGES WHATSOEVER (INCLUDING, BUT NOT LIMITED TO, DAMAGES FOR:  LOSS OF PROFITS, LOSS OF CONFIDENTIAL OR OTHER INFORMATION, BUSINESS INTERRUPTION, PERSONAL INJURY, LOSS OF PRIVACY, FAILURE TO MEET ANY DUTY (INCLUDING OF GOOD FAITH OR OF REASONABLE CARE), NEGLIGENCE, AND ANY OTHER PECUNIARY OR OTHER LOSS WHATSOEVER) ARISING OUT OF OR IN ANY WAY RELATED TO THE USE OF OR INABILITY TO USE THE OS COMPONENTS OR THE SUPPORT SERVICES, OR THE PROVISION OF OR FAILURE TO PROVIDE SUPPORT SERVICES, OR OTHERWISE UNDER OR IN CONNECTION WITH ANY PROVISION OF THIS SUPPLEMENTAL EULA, EVEN IN THE EVENT OF THE FAULT, TORT (INCLUDING NEGLIGENCE), STRICT LIABILITY, BREACH OF CONTRACT OR BREACH OF WARRANTY OF MICROSOFT OR ANY SUPPLIER, AND EVEN IF MICROSOFT OR ANY SUPPLIER HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. 

LIMITATION OF LIABILITY AND REMEDIES. NOTWITHSTANDING ANY DAMAGES THAT YOU MIGHT INCUR FOR ANY REASON WHATSOEVER (INCLUDING, WITHOUT LIMITATION, ALL DAMAGES REFERENCED ABOVE AND ALL DIRECT OR GENERAL DAMAGES), THE ENTIRE LIABILITY OF MICROSOFT AND ANY OF ITS SUPPLIERS UNDER ANY PROVISION OF THIS SUPPLEMENTAL EULA AND YOUR EXCLUSIVE REMEDY FOR ALL OF THE FOREGOING SHALL BE LIMITED TO THE GREATER OF THE AMOUNT ACTUALLY PAID BY YOU FOR THE OS COMPONENTS OR U.S.$5.00.  THE FOREGOING LIMITATIONS, EXCLUSIONS AND DISCLAIMERS SHALL APPLY TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, EVEN IF ANY REMEDY FAILS ITS ESSENTIAL PURPOSE.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win9x\core\sedeng.txt ===
This program is not designed for use on Windows NT. Press OK to exit.
"DirectX Cabpack Setup"
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win9x\frn\frn.txt ===
InstallPrompt=Ceci va installer Microsoft DirectX 8.0. Voulez-vous continuer ?
FinishMessage=L'installation de Microsoft DirectX 8.0 est termine.
FriendlyName=Installation de Microsoft DirectX 8.0
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win9x\cze\sedcze.txt ===
Tento program nen uren pro systm Windows NT. Klepnutm na tlatko OK ukonete instalaci.
"DirectX Cabpack Setup"

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win9x\frn\webfrn.txt ===
CONTRAT DE LICENCE UTILISATEUR FINAL SUPPLMENTAIRE POUR LOGICIEL MICROSOFT

IMPORTANT -  LIRE ATTENTIVEMENT : Ces composants systme d'exploitation de Microsoft Corporation (" Microsoft "), y compris toute documentation " en ligne " ou sous forme lectronique (les " Composants SE "), sont soumis aux termes du contrat (un " Contrat de Licence Utilisateur Final " ou " CLUF ") par lequel vous avez acquis sous licence le produit systme d'exploitation Microsoft (un " Produit SE ") dcrit ci-dessous (chacun des contrats tant dnomm un " Contrat de Licence Utilisateur Final "), ainsi qu'aux termes et conditions du prsent CLUF supplmentaire et aux stipulations du prsent Contrat de Licence Utilisateur Final Supplmentaire. EN INSTALLANT, EN COPIANT OU EN UTILISANT DE TOUTE AUTRE MANIRE LES COMPOSANTS SE, VOUS RECONNAISSEZ TRE LI PAR LES TERMES DU CLUF RELATIF AU PRODUIT SE APPLICABLE ET PAR LES TERMES DU PRSENT CLUF SUPPLMENTAIRE. SI VOUS TES EN DSACCORD AVEC CES TERMES, VEUILLEZ NE PAS INSTALLER, COPIER, NI UTILISER LES COMPOSANTS SE.


REMARQUE : SI VOUS NE DISPOSEZ PAS D'UN CLUF VALABLE POUR UN QUELCONQUE PRODUIT SE (MICROSOFT WINDOWS 95, WINDOWS 98, WINDOWS ME ET/OU MICROSOFT WINDOWS 2000), VOUS N'TES PAS AUTORIS  INSTALLER,  COPIER OU  FAIRE AUTRE USAGE DES COMPOSANTS SE, ET VOUS N'AVEZ AUCUN DROIT EN VERTU DE CE CLUF SUPPLMENTAIRE.

Les termes utiliss dans le prsent CLUF supplmentaire qui commencent par une lettre majuscule et qui ne sont pas dfinis aux prsentes ont le sens qui leur a t attribu dans le CLUF relatif au Produit SE applicable.

Stipulations Gnrales. Les Composants SE vous sont fournis par Microsoft afin de mettre  jour, complter ou remplacer des fonctionnalits existantes du Produit SE applicable. Microsoft vous concde une licence d'utilisation de ces Composants SE en vertu des termes du CLUF relatif au Produit SE applicable (ce CLUF tant incorpor aux prsentes) et des termes de ce CLUF supplmentaire, sous rserve que vous respectiez l'ensemble de ces termes. Si des termes de ce CLUF supplmentaire sont contradictoires avec ceux du CLUF relatif au produit SE applicable, les termes de ce CLUF supplmentaire prvaudront, mais uniquement en ce qui concerne les Composants SE.

Droits et Limitations Supplmentaires

*	Si vous disposez de plusieurs exemplaires sous licence valable du/des Produit(s) SE applicable(s), vous tes autoriss  reproduire, installer et utiliser un exemplaire des Composants SE, en tant que partie de ce/ces Produit(s) SE, sur tous vos ordinateurs sur lesquels fonctionnent des exemplaires sous licence valable du/des Produit(s) SE, et ce  condition que vous utilisiez ces exemplaires supplmentaires des Composants SE conformment aux termes stipuls ci-dessus. Pour chaque exemplaire sous licence valable du produit SE applicable, vous tes galement autoris  reproduire un exemplaire supplmentaire des Composants SE, uniquement pour des besoins d'archivage ou de rinstallation de ces Composants SE sur l'ordinateur sur lequel ils taient prcdemment installs. Microsoft conserve tout droit, titre et intrt relatif aux Composants SE. Tous les droits non expressment concds sont rservs par Microsoft.


SI LE PRODUIT SE APPLICABLE VOUS A T CONCD SOUS LICENCE PAR MICROSOFT OU PAR L'UNE QUELCONQUE DE SES FILIALES  100%, LA GARANTIE LIMITE (SI ELLE EXISTE) DU CLUF RELATIF  CE PRODUIT SE S'APPLIQUE AUX COMPOSANTS SE,  CONDITION QUE CEUX-CI VOUS AIENT T CONCDS SOUS LICENCE PENDANT LA DURE DE GARANTIE LIMITE DU CLUF RELATIF AU PRODUIT SE APPLICABLE. LE PRSENT CLUF SUPPLMENTAIRE N'A PAS POUR EFFET DE PROROGER LA DURE DE CETTE GARANTIE LIMITE.

SI LE PRODUIT SE EN CAUSE VOUS A T CONCD SOUS LICENCE PAR UNE ENTIT AUTRE QUE MICROSOFT OU QUE L'UNE QUELCONQUE DE SES FILIALES  100%, MICROSOFT EXLUT TOUTE GARANTIE RELATIVE AUX COMPOSANTS SE COMME CELA EST STIPUL CI-APRS :

EXCLUSION DE GARANTIE. DANS TOUTE LA MESURE PERMISE PAR LA RGLEMENTATION APPLICABLE, MICROSOFT ET SES FOURNISSEURS VOUS FOURNISSENT LES COMPOSANTS SE, AINSI QUE, LE CAS CHANT, TOUT SERVICE D'ASSISTANCE RELATIF  CES COMPOSANTS (LES " SERVICES D'ASSISTANCE "), EN L'TAT ET AVEC TOUTES LEURS IMPERFECTIONS. EN OUTRE, MICROSOFT ET SES FOURNISSEURS EXCLUENT PAR LES PRSENTES TOUTE AUTRE GARANTIE LGALE, EXPRESSE OU IMPLICITE, RELATIVE AUX COMPOSANTS SE ET AUX SERVICES D'ASSISTANCE, Y COMPRIS, MAIS DE MANIRE NON LIMITATIVE (LE CAS CHANT), TOUTE GARANTIE : DE PROPRIT, D'ABSENCE DE CONTREFAON, DE QUALIT MARCHANDE, D'ADQUATION  UN USAGE PARTICULIER, D'ABSENCE DE VIRUS, DE PRCISION OU D'EXHAUSTIVIT DES RPONSES, DES RSULTATS OBTENUS, D'ABSENCE DE NGLIGENCE, OU DE DFAUT DE FABRICATION, DE JOUISSANCE PAISIBLE, D'ABSENCE DE TROUBLE DE POSSESSION ET DE CONFORMIT  LA DESCRIPTION. VOUS ASSUMEZ L'ENSEMBLE DES RISQUES DCOULANT DE L'UTILISATION OU DU FONCTIONNEMENT DES COMPOSANTS SE ET DES SERVICES D'ASSISTANCE.

EXCLUSION DE RESPONSABILIT POUR LES DOMMAGES ACCESSOIRES, INDIRECTS, ET CERTAINS AUTRES TYPES DE DOMMAGES. DANS TOUTE LA MESURE PERMISE PAR LA RGLEMENTATION APPLICABLE, MICROSOFT OU SES FOURNISSEURS NE POURRONT EN AUCUN CAS TRE TENUS POUR RESPONSABLES DE TOUT DOMMAGE SPCIAL, ACCESSOIRE, INCIDENT OU INDIRECT DE QUELQUE NATURE QUE CE SOIT, Y COMPRIS, MAIS DE MANIRE NON LIMITATIVE LES PERTES DE BNFICES, PERTES D'INFORMATIONS CONFIDENTIELLES OU AUTRES INFORMATIONS, INTERRUPTIONS D'ACTIVIT, PRJUDICES CORPORELS, ATTEINTES  LA VIE PRIVE, MANQUEMENT  TOUTE OBLIGATION (Y COMPRIS L'OBLIGATION DE BONNE FOI OU DE DILIGENCE) POUR DES ACTES DE NGLIGENCE, ET POUR TOUTE PERTE PCUNIAIRE OU AUTRE, RSULTANT DE, OU LI  L'UTILISATION OU  L'IMPOSSIBILIT D'UTILISER LES COMPOSANTS SE OU LES SERVICES D'ASSISTANCE, OU  LA FOURNITURE OU AU DFAUT DE FOURNITURE DES SERVICES D'ASSISTANCE, OU  LA FOURNITURE DE CE CLUF SUPPLMENTAIRE, MME SI LA SOCIT MICROSOFT OU UN QUELCONQUE FOURNISSEUR A T AVIS DE L'VENTUALIT DE TELS DOMMAGES.


LIMITATION DE RESPONSABILIT ET RECOURS. NONOBSTANT TOUT DOMMAGE QUE VOUS POURRIEZ SUBIR POUR QUELQUE MOTIF QUE CE SOIT (NOTAMMENT TOUS LES DOMMAGES ENUMRS CI-DESSUS ET TOUS LES DOMMAGES DIRECTS OU GNRAUX), L'ENTIRE RESPONSABILIT DE MICROSOFT ET DE L'UN QUELCONQUE DE SES FOURNISSEURS AU TITRE DE TOUTE STIPULATION DE CE CLUF SUPPLMENTAIRE ET VOTRE SEUL RECOURS EN CE QUI CONCERNE TOUS LES DOMMAGES PRCITS NE SAURAIENT EXCDER LE MONTANT QUE VOUS AVEZ EFFECTIVEMENT PAY POUR LES COMPOSANTS SE OU 5 DOLLARS US (US$ 5,00) SI CE MONTANT EST PLUS LEV. LES PRSENTES LIMITATIONS ET EXCLUSIONS DEMEURERONT APPLICABLES DANS TOUTE LA MESURE PERMISE PAR LA RGLEMENTATION EN VIGUEUR QUAND BIEN MME UN QUELCONQUE RECOURS EXERC A L'OCCASION DE TOUT MANQUEMENT QUELCONQUE NE PRODUIRAIT PAS D'EFFET.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win9x\ger\ger.txt ===
InstallPrompt=Microsoft DirectX 8.0 wird installiert. Soll der Vorgang fortgesetzt werden?
FinishMessage=Microsoft DirectX 8.0-Setup wurde erfolgreich abgeschlossen.
FriendlyName=Microsoft DirectX 8.0-Setup
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win9x\dut\seddut.txt ===
Dit programma is niet bedoeld om te worden uitgevoerd onder Windows NT. Klik op OK om af te sluiten.
"DirectX Cabpack Setup"

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win9x\ger\webger.txt ===
ERGNZENDER ENDBENUTZER-LIZENZVERTRAG FR MICROSOFT-SOFTWARE

WICHTIG: BITTE SORGFLTIG LESEN - Diese Microsoft Corporation ("Microsoft")-Betriebssystemkomponenten unterliegen einschlielich Dokumentation im "Online"- oder elektronischen Format ("BS-Komponenten") den Bestimmungen des Vertrags, unter dem Sie das unten beschriebene anwendbare Microsoft-Betriebssystemprodukt ("BS-Produkt") lizenziert haben (jeder ein "Endbenutzer-Lizenzvertrag" oder "EULA") und den Bestimmungen dieses Ergnzenden EULAs. INDEM SIE DIE BS-KOMPONENTEN INSTALLIEREN, KOPIEREN ODER ANDERWEITIG VERWENDEN, ERKLREN SIE SICH EINVERSTANDEN, DURCH DIE BESTIMMUNGEN DES EULAS DES ANWENDBAREN BS-PRODUKTS UND DIESES ERGNZENDEN EULAS GEBUNDEN ZU SEIN. FALLS SIE DIESEN BESTIMMUNGEN NICHT ZUSTIMMEN, SIND SIE NICHT BERECHTIGT, DIE BS-KOMPONENTEN ZU INSTALLIEREN, ZU KOPIEREN ODER ZU VERWENDEN.

ANMERKUNG: WENN SIE KEIN GLTIGES EULA FR EIN "BS-PRODUKT" (MICROSOFT WINDOWS 95, WINDOWS 98, WINDOWS ME, UND/ODER WINDOWS 2000) BESITZEN, SIND SIE NICHT BERECHTIGT, DIE BS-KOMPONENTEN ZU INSTALLIEREN, ZU KOPIEREN ODER ANDERWEITIG ZU VERWENDEN. SIE HABEN AUSSERDEM KEINERLEI RECHTE UNTER DIESEM ERGNZENDEN EULA.

In diesem Ergnzenden EULA verwendete Begriffe, die hierin nicht definiert sind, haben die Bedeutung, die im EULA des anwendbaren BS-Produkts dafr festgelegt wurde.

Allgemeines. Die BS-Komponenten werden Ihnen von Microsoft zur Verfgung gestellt, um vorhandene Funktionen des anwendbaren BS-Produkts zu aktualisieren, zu ergnzen oder zu ersetzen. Microsoft erteilt Ihnen eine Lizenz zur Verwendung der BS-Komponenten gem den Bestimmungen des BS-Produkt-EULAs fr das anwendbare BS-Produkt (die hiermit durch Bezugnahme eingeschlossen sind) und den Bestimmungen dieses Ergnzenden EULAs, unter der Voraussetzung, dass Sie sich allen solchen Bestimmungen unterwerfen. Insoweit Bestimmungen in diesem Ergnzenden EULA Bestimmungen im EULA des anwendbaren BS-Produkts widersprechen, haben die Bestimmungen dieses Ergnzenden EULAs lediglich in Bezug auf die BS-Komponenten Vorrang.

Zustzliche Rechte und Einschrnkungen. 

*	Wenn Sie mehrere ordnungsgem lizenzierte Kopien des anwendbaren BS-Produkts oder der anwendbaren BS-Produkte haben, drfen Sie eine Kopie der BS-Komponenten als Teil des anwendbaren BS-Produkts oder der anwendbaren BS-Produkte auf allen Ihren Computern anfertigen, installieren und verwenden, die ordnungsgem lizenzierte Kopien des BS-Produkts oder der BS-Produkte ausfhren, vorausgesetzt, Sie verwenden solche zustzlichen Kopien der BS-Komponenten unter Einhaltung der oben genannten Bestimmungen. Fr jede ordnungsgem lizenzierte Kopie des anwendbaren BS-Produkts drfen Sie auch eine zustzliche Kopie der BS-Komponenten nur fr Archivierungszwecke oder zur Reinstallation der BS-Komponenten auf demselben Computer, auf dem die BS-Komponenten zuvor installiert waren, anfertigen. Microsoft behlt alle Rechte, Titel und Interessen an den BS-Komponenten. Microsoft behlt sich alle nicht ausdrcklich gewhrten Rechte vor.


WENN DAS ANWENDBARE BS-PRODUKT AN SIE VON MICROSOFT ODER EINER IHRER 100 %-IGEN TOCHTERFIRMEN LIZENZIERT WURDE, GILT DIE GEGEBENENFALLS IM EULA DES ANWENDBAREN BS-PRODUKTS ENTHALTENE BESCHRNKTE GEWHRLEISTUNG FR DIE BS-KOMPONENTEN, WENN DIE BS-KOMPONENTEN VON IHNEN INNERHALB DER LAUFZEIT DER BESCHRNKTEN GEWHRLEISTUNG IM EULA DES ANWENDBAREN BS-PRODUKTS LIZENZIERT WURDEN. DIESES ERGNZENDE EULA VERLNGERT JEDOCH NICHT DEN ZEITRAUM, BER DEN DIE BESCHRNKTE GEWHRLEISTUNG GILT.

WENN DAS ANWENDBARE BS-PRODUKT AN SIE VON EINER ANDEREN JURISTISCHEN PERSON ALS MICROSOFT ODER EINER IHRER 100 %-IGEN TOCHTERFIRMEN LIZENZIERT WURDE, SCHLIESST MICROSOFT ALLE GEWHRLEISTUNGEN IN BEZUG AUF DIE BS-KOMPONENTEN WIE FOLGT AUS:

AUSSCHLUSS DER GEWHRLEISTUNG. IM GRSSTMGLICHEN DURCH DAS ANWENDBARE RECHT GESTATTETEN UMFANG STELLEN IHNEN MICROSOFT UND DEREN LIEFERANTEN DIE BS-KOMPONENTEN UND GEGEBENENFALLS SUPPORTLEISTUNGEN IN VERBINDUNG MIT DEN BS-KOMPONENTEN ("SUPPORTLEISTUNGEN") WIE BESEHEN UND OHNE GARANTIE AUF FEHLERFREIHEIT ZUR VERFGUNG. SIE SCHLIESSEN HIERMIT ALLE GEWHRLEISTUNGEN UND BEDINGUNGEN IN BEZUG AUF DIE BS-KOMPONENTEN UND SUPPORTLEISTUNGEN AUS, GLEICH OB AUSDRCKLICH, KONKLUDENT ODER GESETZLICH, EINSCHLIESSLICH, ABER NICHT BESCHRNKT AUF (FALLS ZUTREFFEND) GEWHRLEISTUNGEN UND BEDINGUNGEN VON ODER IN BEZUG AUF: TITEL, NICHTVERLETZUNG DER RECHTE DRITTER, HANDELSBLICHKEIT, EIGNUNG FR EINEN BESTIMMTEN ZWECK, VIRENFREIHEIT, GENAUIGKEIT ODER VOLLSTNDIGKEIT VON ANTWORTEN, ERGEBNISSE, FAHRLSSIGKEIT ODER MANGELNDE FACHMNNISCHE BEMHUNGEN, UNGETRBTES VERGNGEN, STILLEN BESITZ SOWIE BEREINSTIMMUNG MIT DER BESCHREIBUNG. DAS GESAMTE RISIKO, DAS SICH AUS DER VERWENDUNG ODER DER LEISTUNG DER BS-KOMPONENTEN ODER SUPPORTLEISTUNGEN ERGIBT, VERBLEIBT BEI IHNEN.

AUSSCHLUSS VON FOLGE-, ZUFLLIGEN UND BESTIMMTEN ANDEREN SCHDEN. IM GRSSTMGLICHEN DURCH DAS ANWENDBARE RECHT GESTATTETEN UMFANG SIND MICROSOFT ODER DEREN LIEFERANTEN IN KEINEM FALL HAFTBAR FR IRGENDWELCHE SPEZIELLEN, ZUFLLIGEN, INDIREKTEN ODER FOLGESCHDEN WELCHER ART AUCH IMMER (EINSCHLIESSLICH, ABER NICHT BESCHRNKT AUF, SCHDEN AUS ENTGANGENEM GEWINN, VERLUST VON VERTRAULICHEN ODER ANDEREN INFORMATIONEN, GESCHFTSUNTERBRECHUNG, PERSONENSCHDEN, VERLUST VON PRIVATSPHRE, UNMGLICHKEIT, EINE PFLICHT ZU ERFLLEN (EINSCHLIELICH IN GUTEM GLAUBEN ODER BEI VERNNFTIGER SORGFALT), FAHRLSSIGKEIT SOWIE VERMGENS- ODER SONSTIGE SCHDEN), DIE AUS DER VERWENDUNG DER BS-KOMPONENTEN ODER DER SUPPORTLEISTUNGEN ODER DER TATSACHE, DASS SIE NICHT VERWENDET WERDEN KNNEN, ODER AUS DER BEREITSTELLUNG VON SUPPORTLEISTUNGEN ODER DER TATSACHE, DASS SIE NICHT ZUR VERFGUNG GESTELLT WORDEN SIND, ODER ANDERWEITIG AUS EINER BESTIMMUNG DIESES ERGNZENDEN EULAS RESULTIEREN ODER IN IRGENDEINEM ZUSAMMENHANG DAMIT STEHEN, SELBST WENN MICROSOFT ODER DER LIEFERANT AUF DIE MGLICHKEIT SOLCHER SCHDEN HINGEWIESEN WURDE. 

HAFTUNGSBESCHRNKUNG UND ANSPRCHE UNGEACHTET ALLER SCHDEN, DIE SIE AUS WELCHEN GRNDEN AUCH IMMER ERLEIDEN MGEN (EINSCHLIESSLICH, OHNE EINSCHRNKUNG, ALLE OBEN ANGESPROCHENEN SCHDEN SOWIE ALLE DIREKTEN ODER ALLGEMEINEN SCHDEN), IST DIE GESAMTE HAFTUNG VON MICROSOFT UND DEREN LIEFERANTEN UNTER ALLEN BESTIMMUNGEN DIESES ERGNZENDEN EULAS UND IHR AUSSCHLIESSLICHER ANSPRUCH FR ALLES OBEN GENANNTE AUF DEN HHEREN DIESER BEIDEN BETRGE BESCHRNKT: DEN TATSCHLICH FR DIE BS-KOMPONENTEN GEZAHLTEN BETRAG ODER US-$ 5,00. DIE VORSTEHENDEN BESCHRNKUNGEN UND AUSSCHLSSE GELTEN IM GRSSTMGLICHEN DURCH DAS ANWENDBARE RECHT GESTATTETEN UMFANG, AUCH WENN EIN ANSPRUCH SEINEN WESENTLICHEN ZWECK VERFEHLT.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win9x\itn\itn.txt ===
InstallPrompt=Installazione di Microsoft DirectX 8.0. Continuare?
FinishMessage=Installazione di Microsoft DirectX 8.0 completata.
FriendlyName=Installazione di Microsoft DirectX 8.0
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win9x\core\webeng.txt ===
This software is subject to the terms and conditions of the Microsoft License and NonDisclosure Agreement for Microsoft DirectX 8.0 Pre-Release Code, a copy of which is provided below for your convenience. If you have not signed a Microsoft License and NonDisclosure Agreement for this software, you are not authorized to install, copy or otherwise use this software. 


MICROSOFT CORPORATION NON-DISCLOSURE AGREEMENT
(PRE-RELEASE VERSION OF DIRECTX 8.0)


This is a legal agreement between you, either an individual or an entity, ("Recipient"), and Microsoft Corporation ("Microsoft").  If you do not agree to the terms of this Agreement, promptly return this CD-ROM and the accompanying itms, including written materials and binders or other containers, (collectively the "Software") to Microsoft. 

1.	GRANT OF LICENSE.
	(a)	Microsoft grants Recipient a limited, non-exclusive, non-assignable nontransferable, royalty-free license to: install and use up to three (3) copies of the executable code of the Software on CPU(s) residing on Recipients premises of which Recipient has a valid licensed copy of Microsoft Windows 95 or 98, solely to test the compatibility of Recipients application or other product(s) which operate in conjunction with the Software and to evaluate the Software for the purpose of providing feedback thereon to Microsoft.  All other rights are reserved to Microsoft.  Recipient shall not rent, lease, sell, sublicense, assign, or otherwise transfer the Software, including any accompanying printed materials.  Recipient may not reverse engineer, decompile or disassemble the Software except to the extent that this restriction is expressly prohibited by applicable law.  Microsoft and its suppliers shall retain title and all ownership rights to the Software, and this Agreement shall not be construed in any manner as transferring any rights of ownership or license to the Software or to the features or information therein, except as specifically stated herein. 

	(b)	Recipient agrees to provide reasonable feedback to Microsoft as described in the materials provided by Microsoft, including but not limited to usability, bug reports and test results, with respect to the testing of the Software.  Recipient will use reasonable efforts to review and comment on all documentation supplied.  All bug reports, test results and other feedback made by Recipient shall be the property of Microsoft and may be used by Microsoft for any purpose it sees fit.  Due to the nature of the development work, Microsoft is not certain if errors or discrepancies in the Software may be corrected.

	(c)	Recipient may disclose the Software only to its employees who have a need to know and have access to the Software in order to assist in Recipients testing of the Software, provided that (1) such employees use of the Software takes place solely at Recipients site, and (2) Recipient has executed appropriate written agreements with such employees sufficient to enable it to comply with the terms of this Agreement. Upon Microsofts request, Recipient shall provide to Microsoft a list of all employees granted access to the Software hereunder. 

	(d)	Recipient may not disclose the results of any benchmark test of the Software to any third party without Microsofts prior written approval. Recipient may not use the Software in a live operating environment where it may be relied upon to perform in the same manner as commercially release software or with data that has not been sufficiently backed up.

2.	TERM OF AGREEMENT.  The term of this Agreement shall commence on Recipients installation of the Software and shall continue until terminated by Microsoft, with or without cause.  This Agreement will terminate without notice upon the commercial release of the Software.  Upon the termination of this Agreement, Recipient shall promptly return to Microsoft, or certify destruction of, all full or partial copies of the Software and related materials provided by Microsoft.  Section 5 shall survive termination or expiration of this Agreement with respect to any information that has not been made public by Microsoft as of the commercial release of the Software.

3.	COST OF TESTING.  There is no charge to Recipient for testing of the Software.  Microsoft shall bear all direct freight expenses relating to the shipment of the Software to Recipients place of business.  If Recipient returns the Software, Recipient will pay any return freight expenses.

4.	PRODUCT MAINTENANCE/UPDATES.  Microsoft is not obligated to provide maintenance, technical support or updates to Recipient for Software licensed pursuant to this Agreement.  However, Microsoft may, in its sole discretion, provide further pre-release versions, technical support, updates and/or supplements of any Software and/or related information ("Updates") to Recipient hereunder, in which case such Updates shall also be deemed to be included in the Software, and therefore governed by this Agreement, unless other terms of use are provided by Microsoft with such Updates. In no event shall Microsoft be obligated to provide Recipient, free of charge, a copy of the commercial release version of the Software in connection with Recipients participation in the testing program.  Microsoft is not obligated to make any Software commercially available. 

5.	CONFIDENTIALITY.  The Software, including its existence and features, and related information are proprietary and confidential information to Microsoft and its suppliers.  Recipient agrees not to disclose or provide the Software, documentation, or any information relating to the Software (including the Software features or the results of use or testing) to any third party , or to use the Software for any purpose other than as provided in this Agreement. However, Recipient may disclose Confidential Information in accordance with judicial or other governmental order, provided Recipient shall give Microsoft reasonable notice prior to such disclosure and shall comply with any applicable protective order or equivalent.  Recipient shall not be liable to Microsoft for such information which Recipient can prove (1) is already known to Recipient; (2) becomes publicly known through no wrongful act of Recipient; (3) is rightfully received from a third party without similar restriction and without breach of this Agreement; or (4) is independently developed by Recipient.  This provision shall survive the termination or expiration of this Agreement with respect to any information that has not been made public by Microsoft as of the commercial release of the Software.

6.	INTELLECTUAL PROPERTY RIGHTS.  All title and intellectual property rights in and to the Software (including but not limited to any images, photographs, animations, video, audio, music, text and "applets" incorporated into the Software), and any copies Recipient is permitted to make herein are owned by Microsoft or its suppliers. All title and intellectual property rights in and to the content which may be accessed through use of the Software are the property of the respective content owner and may be protected by applicable copyright or other intellectual property laws and treaties. This Agreement grants Recipient no rights to use such content. If this Software contains documentation which is provided only in electronic form, Recipient may print one copy of such electronic documentation. Recipient may not copy the printed materials accompanying the Software. All rights not expressly granted are reserved by Microsoft.

7.  	DISCLAIMER OF WARRANTIES.  The Software is deemed accepted by Recipient. The Software constitutes pre-release code and may be changed substantially before commercial release. To the maximum extent permitted by applicable law, Microsoft and its suppliers provide the Software and any (if any) support services related to the Software ("Support Services") AS IS AND WITH ALL FAULTS, and hereby disclaim all warranties and conditions, either express, implied or statutory, including, but not limited to, any (if any) implied warranties or conditions of merchantability, of fitness for a particular purpose, of lack of viruses, of accuracy or completeness of responses, of results, and of lack of negligence or lack of workmanlike effort, all with regard to the Software, and the provision of or failure to provide Support Services.  ALSO, THERE IS NO WARRANTY OR CONDITION OF TITLE, QUIET ENJOYMENT, QUIET POSSESSION, CORRESPONDENCE TO DESCRIPTION OR NON-INFRINGEMENT, WITH REGARD TO THE SOFTWARE.  The entire risk as to the quality of or arising out of use or performance of the Software and documentation remains with Recipient. 

8.	EXCLUSION OF INCIDENTAL, CONSEQUENTIAL, AND CERTAIN OTHER DAMAGES.  To the maximum extent permitted by applicable law, in no event shall Microsoft or its suppliers be liable for any special,incidental, indirect, or consequential damages whatsoever (including, but not limited to, damages for loss of profits or confidential or other information, for business interruption, for personal injury, for loss of privacy, for failure to meet any duty including of good faith or of reasonable care, for negligence, and for any other pecuniary or other loss whatsoever) arising out of or in any way related to the use of or inability to use the Software, the provision of or failure to provide Support Services, or otherwise under or in connection with any provision of Agreement, even in the event of the fault, tort (including negligence), strict liability, breach of contract or breach of warranty of Microsoft or any supplier, and even if Microsoft or any supplier has been advised of the possibility of such damages.  Because some states/jurisdictions do not allow the exclusion or limitation of liability for consequential or incidental damages, the above limitation may not apply to Recipient.

9.	LIMITATION OF LIABILITY AND REMEDIES.  Notwithstanding any damages that Recipient might incur for any reason whatsoever (including, without limitation, all damages referenced above and all direct or general damages), the entire liability of Microsoft and any of its suppliers under any provision of this Agreement and Recipients exclusive remedy for all of the foregoing shall be limited to the greater of the amount actually paid by Recipient for the Software or Five Dollars (US$5.00).  The foregoing limitations, exclusions and disclaimers (including Section 7 and 8 above) shall apply to the maximum extent permitted by applicable law, even if any remedy fails its essential purpose. 

10.	GOVERNING LAW/JURISDICTION/ATTORNEYS FEES.  This Agreement shall be construed and controlled by the laws of the State of Washington, and Recipient consents to exclusive jurisdiction and venue in the federal courts sitting in King County, Washington, unless no federal jurisdiction exists, in which case Recipient consents to exclusive jurisdiction and venue in the Superior Court of King County, Washington.  Recipient waives all defenses of lack of personal jurisdiction and forum non conveniens.  Process may be served on either party in the manner authorized by applicable law or court rule.  If either party employs attorneys to enforce any rights arising out of or relating to this Agreement, the prevailing party shall be entitled to recover its reasonable attorneys' fees, costs and other expenses.

11.	U.S. GOVERNMENT RESTRICTED RIGHTS.  This Software is provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by the Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of The Rights in Technical Data and Computer Software clause of DFARS 252.227-7013 or subparagraphs (c)(i) and (2) of the Commercial Computer Software - Restricted Rights at 48 CFR 52.227-19, as applicable.  Manufacturer is Microsoft Corporation, One Microsoft Way, Redmond, WA  98052-6399.   

12.	EXPORT RESTRICTIONS. Recipient acknowledges that Software is of U.S.-origin.  Recipient agrees to comply with all applicable international and national laws that apply to these products, including the U.S. Export Administration Regulations, as well as end-user, end-use and country destination restrictions issued by U.S. and other governments. For additional information on exporting Microsoft products, see http://www.microsoft.com/exporting/.

Should you have any questions concerning this Agreement, or if you desire to contact Microsoft for anyreason, please write: Microsoft Corporation, Attn: DirectX Team, One Microsoft Way, Redmond, WA  98052.6399.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win9x\jpn\jpn.txt ===
InstallPrompt=Microsoft DirectX 8.0 CXg[܂B܂?
FinishMessage=Microsoft DirectX 8.0 ̃ZbgAbv܂B
FriendlyName=Microsoft DirectX 8.0 ZbgAbv
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win9x\eng\sedeng.txt ===
This install package is designed to run on Windows 98 or Windows ME.  Please run the install package designed to run on Windows 2000. Press OK to exit.
"DirectX Cabpack Setup"
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win9x\itn\webitn.txt ===
CONTRATTO DI LICENZA SUPPLEMENTARE CON L'UTENTE FINALE PER IL SOFTWARE MICROSOFT

IMPORTANTE - LEGGERE CON ATTENZIONE: I presenti componenti del sistema operativo di Microsoft Corporation ("Microsoft") e l'eventuale documentazione "online" o elettronica ("Componenti del Sistema Operativo") sono soggetti ai termini e alle condizioni del contratto ai sensi del quale l'utente ha ricevuto in licenza il relativo prodotto Microsoft del sistema operativo ("Prodotto del Sistema Operativo") infra descritto (ognuno dei quali "Contratto di Licenza") e ai termini e alle condizioni del presente Contratto di Licenza Supplementare. INSTALLANDO, COPIANDO O ALTRIMENTI UTILIZZANDO I COMPONENTI DEL SISTEMA OPERATIVO, L'UTENTE ACCETTA DI ESSERE VINCOLATO DAI TERMINI E DALLE CONDIZIONI DELL'APPLICABILECONTRATTO DI LICENZA PER IL PRODOTTO DEL SISTEMA OPERATIVO E DEL PRESENTE CONTRATTO DI LICENZA SUPPLEMENTARE. QUALORA L'UTENTE NON ACCETTI TALI TERMINI E CONDIZIONI, NON SAR AUTORIZZATO A INSTALLARE, COPIARE O ALTRIMENTI UTILIZZARE I COMPONENTI DEL SISTEMA OPERATIVO.

NOTA: QUALORA L'UTENTE NON DISPONGA DI UN CONTRATTO DI LICENZA VALIDO PER OGNI PRODOTTO DEL SISTEMA OPERATIVO (MICROSOFT WINDOWS 95, WINDOWS 98, WINDOWS ME E/O WINDOWS 2000), NON SAR AUTORIZZATO A INSTALLARE, COPIARE O ALTRIMENTI UTILIZZARE ALCUNO DI TALI COMPONENTI E NON DISPORR DEI DIRITTI CONCESSI DAL PRESENTE CONTRATTO DI LICENZA SUPPLEMENTARE.

Tutti i termini in maiuscolo contenuti nel presente Contratto di Licenza Supplementare e non altrimenti definiti avranno il significato assegnato loro nell'applicabile Contratto di Licenza per il Prodotto del Sistema Operativo.

In Generale. I Componenti del Sistema Operativo sono forniti da Microsoft per aggiornare, integrare o sostituire la esistente funzionalit dell'applicabile Prodotto del Sistema Operativo. Microsoft concede all'utente una licenza di utilizzo dei Componenti del Sistema Operativo in base ai termini e alle condizioni previste dal Contratto di Licenza di quest'ultimo (da considerarsi parte integrante del presente Contratto di Licenza Supplementare in virt dell'espresso richiamo) e in base ai termini e alle condizioni del presente Contratto di Licenza Supplementare, a condizione che si attenga a tutti tali termini e condizioni. Nel caso in cui i termini del presente Contratto di Licenza Supplementare contrastino con i termini dell'applicabile Contratto di Licenza per il Prodotto del Sistema Operativo, i termini del presente Contratto di Licenza Supplementare sono applicabili esclusivamente in relazione ai Componenti del Sistema Operativo.

Diritti e Limitazioni aggiuntivi

*	Qualora l'utente disponga di pi copie validamente concesse in licenza del Prodotto o dei Prodotti del Sistema Operativo, potr riprodurre, installare e utilizzare una copia dei Componenti del Sistema Operativo in quanto parte del suddetto Prodotto o Prodotti del Sistema Operativo su tutti i suoi computer che eseguono copie validamente concesse in licenza del Prodotto o dei Prodotti del Sistema Operativo, a condizione che utilizzi tali copie aggiuntive dei Componenti del Sistema Operativo in conformit con i termini e le condizioni di cui sopra. Per ogni copia validamente concessa in licenza del Prodotto del Sistema Operativo, l'utente potr inoltre riprodurre una copia aggiuntiva dei Componenti del Sistema Operativo esclusivamente come copia di archivio o per un'eventuale reinstallazione dei Componenti del Sistema Operativo sul medesimo computer sul quale essi erano precedentemente installati. Microsoft mantiene la titolarit, i diritti e gli interessi relativi ai Componenti del Sistema Operativo. Microsoft si riserva inoltre tutti i diritti non espressamente concessi dal presente Contratto di Licenza Supplementare.


QUALORA IL PRODOTTO DEL SISTEMA OPERATIVO SIA STATO CONCESSO IN LICENZA ALL'UTENTE DA MICROSOFT O DA UNA DELLE SUE FILIALI, L'EVENTUALE GARANZIA LIMITATA INCLUSA NELL'APPLICABILE CONTRATTO DI LICENZA PER IL PRODOTTO DEL SISTEMA OPERATIVO SI APPLICA AI COMPONENTI DEL SISTEMA OPERATIVO, A CONDIZIONE CHE QUESTI SIANO STATI RICEVUTI IN LICENZA ENTRO IL PERIODO DI VALIDIT DELLA GARANZIA LIMITATA DELL'APPLICABILE CONTRATTO DI LICENZA PER IL PRODOTTO DEL SISTEMA OPERATIVO. TUTTAVIA, IL PRESENTE CONTRATTO DI LICENZA SUPPLEMENTARE NON ESTENDE IL PERIODO DI VALIDIT DELLA GARANZIA LIMITATA.

QUALORA IL PRODOTTO DEL SISTEMA OPERATIVO SIA STATO CONCESSO IN LICENZA DA UNA PERSONA FISICA O GIURIDICA DIVERSA DA MICROSOFT O DA UNA DELLE SUE FILIALI, MICROSOFT NON RICONOSCE ALCUNA GARANZIA RELATIVAMENTE AI COMPONENTI DEL SISTEMA OPERATIVO, COME INDICATO DI SEGUITO:

ESCLUSIONE DI GARANZIE. NELLA MISURA MASSIMA CONSENTITA DALLA LEGGE IN VIGORE, MICROSOFT E I SUOI FORNITORI FORNISCONO ALL'UTENTE I COMPONENTI DEL SISTEMA OPERATIVO ED EVENTUALI SERVIZI DI SUPPORTO RELATIVI AI COMPONENTI DEL SISTEMA OPERATIVO ("I SERVIZI DI SUPPORTO") "COS COME SONO" E CON I POSSIBILI DIFETTI. RELATIVAMENTE AI COMPONENTI DEL SISTEMA OPERATIVO E AI SERVIZI DI SUPPORTO, MICROSOFT E I SUOI FORNITORI NON FORNISCONO ALCUNA GARANZIA O DICHIARAZIONE, ESPRESSA, IMPLICITA O DI LEGGE, COMPRESE, IN VIA ESEMPLIFICATIVA, EVENTUALI GARANZIE O CONDIZIONI RELATIVE A: TITOLARIT, NON VIOLAZIONE DI DIRITTI ALTRUI, COMMERCIABILIT, IDONEIT PER UN FINE PARTICOLARE, ASSENZA DI VIRUS, ACCURATEZZA O ESAUSTIVIT, RISULTATI, MANCANZA DI NEGLIGENZA O DI PERIZIA, GODIMENTO O POSSESSO PACIFICO E CORRISPONDENZA A DESCRIZIONE. IL RISCHIO DERIVANTE DALL'UTILIZZO O DALLE PRESTAZIONI DEI COMPONENTI DEL SISTEMA OPERATIVO E DEI SERVIZI DI SUPPORTO  INTERAMENTE A CARICO DELL'UTENTE.

ESCLUSIONE DI RESPONSABILIT PER DANNI INCIDENTALI, INDIRETTI E DI ALTRO TIPO. NELLA MISURA MASSIMA CONSENTITA DALLA LEGGE IN VIGORE, IN NESSUN CASO MICROSOFT O I SUOI FORNITORI SARANNO RESPONSABILI PER DANNI SPECIALI, INCIDENTALI, INDIRETTI O CONSEQUENZIALI DI QUALSIASI TIPO (COMPRESI, IN VIA ESEMPLIFICATIVA, DANNI PER: MANCATO GUADAGNO, PERDITA DI INFORMAZIONI CONFIDENZIALI O DI ALTRO TIPO, INTERRUZIONE DELL'ATTIVIT, DANNI FISICI, PERDITA DI PRIVACY, OMISSIONE DI RISPETTO DI OBBLIGHI - INCLUSO QUELLO DI COMPORTARSI IN BUONA FEDE O CON RAGIONEVOLE DILIGENZA - NEGLIGENZA O ALTRE PERDITE ECONOMICHE) DERIVANTI DALL'UTILIZZO O DALL'INCAPACIT DI UTILIZZARE I COMPONENTI DEL SISTEMA OPERATIVO O I SERVIZI DI SUPPORTO O DALLA FORNITURA O DALLA MANCATA FORNITURA DEI SERVIZI DI SUPPORTO O, COMUNQUE, IN RELAZIONE AL PRESENTE CONTRATTO DI LICENZA SUPPLEMENTARE, ANCHE QUALORA MICROSOFT O I SUOI FORNITORI FOSSERO STATI AVVISATI DELLA POSSIBILIT DEL VERIFICARSI DI TALI DANNI.

LIMITAZIONE DI RESPONSABILIT E RIMEDI DELL'UTENTE. NONOSTANTE EVENTUALI DANNI IN CUI, PER QUALSIASI MOTIVO, POTR INCORRERE L'UTENTE (INCLUSI, IN VIA ESEMPLIFICATIVA, I DANNI DI CUI SOPRA E OGNI TIPO DI DANNO DIRETTO O GENERALE) LA RESPONSABILIT COMPLESSIVA DI MICROSOFT E DEI SUOI FORNITORI E L'UNICO RIMEDIO DELL'UTENTE, PER QUANTO ATTIENE UN EVENTUALE RISARCIMENTO IN BASE A QUESTO CONTRATTO DI LICENZA SUPPLEMENTARE, NON POTR COMUNQUE ECCEDERE IL MAGGIOR IMPORTO TRA QUELLO PAGATO DALL'UTENTE PER I COMPONENTI DEL SISTEMA OPERATIVO E LA SOMMA DI CINQUE DOLLARI (US$ 5). LE SUDDETTE LIMITAZIONI, ESCLUSIONI E DICHIARAZIONI DI NON RESPONSABILIT SONO APPLICABILI NELLA MISURA MASSIMA CONSENTITA DALLA LEGGE IN VIGORE, ANCHE QUALORA IL RIMEDIO NON RAGGIUNGA IL SUO SCOPO ESSENZIALE.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win9x\frn\sedfrn.txt ===
Ce programme n'est pas conu pour tre utilis avec Windows NT. Cliquez sur OK pour quitter.
"Programme d'installation de Cabpack de DirectX"

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win9x\kor\kor.txt ===
InstallPrompt=Microsoft DirectX 8.0 ġմϴ. Ͻðڽϱ?
FinishMessage=Microsoft DirectX 8.0 ġ ϷǾϴ.
FriendlyName=Microsoft DirectX 8.0 ġ
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win9x\jpn\webjpn.txt ===
ǉgp_
dv \ ȉ̃CZX_񏑂𒍈ӂĂǂ݂BMicrosoft Corporation (ȉu}CN\tgvƂ܂) ́uICv܂͓dq܂ރIy[eBO VXe R|[lg(ȉu{ OS R|[lgvƂ܂) ́ALɎꂽY}CN\tg Iy[eBO VXei (ȉuOS ivƂ܂) ̎gp_ (ȉeX̎gp_񏑂u_񏑁vƂ܂) ̏яȂтɂ̒ǉgp_ (ȉu{ǉ_񏑁vƂ܂) ̏яɏ܂B{ OS R|[lgCXg[AA܂͎gp邱ƂɂāAql͊Y OS ǐ_񏑂і{ǉ_񏑂̏яɍS邱Ƃɏꂽ̂Ƃ܂B̏яɓӂȂꍇA}CN\tǵAqlɖ{ OS R|[lg̃CXg[Agp܂͕̂ł܂B

: ql OS i (MICROSOFT WINDOWS 95AWINDOWS 98AWINDOWS MEA܂ WINDOWS 2000) ̐Ǩ_񏑂łȂꍇA{ OS R|[lg̃CXg[Agp܂͕̂łAql͖{ǉ_񏑂̌擾ł܂B

{ǉ_񏑂œɒ`ĂȂṕAY錴_񏑂̒`ƓӖ܂B


{ OS R|[lǵAY OS i̊̋@\Abvf[gA܂͂ɒǉႵ͑ւ邽߂ɒ񋟂Ă܂B}CN\tg͂qlɁAׂĂ̏я炷AY OS iɊւ OS ǐ_񏑂̏я (QƂɂgݍނ̂Ƃ܂) Ȃтɖ{ǉ_񏑂̏яɊÂ{ OS R|[lggp錠܂B{ǉ_񏑂̏AY OS iɊւ錴_񏑂̏ƈقȂꍇA{ OS R|[lgɂẮA{ǉ_񏑂̏Kp܂B

ǉ̌ѐ
* qlKɋꂽ OS ĩRs[𕡐̏ꍇÂ悤Ȋe OS ïꕔƂ OS ĩRs[ 1 ɂ{ OS R|[lg̃Rs[ 1 ACXg[Ďgp邱Ƃł܂BAqĺA{ OS R|[lg̒ǉRs[L̏яɏ]ĎgpȂ΂Ȃ܂BqĺARs[^̖{ OS R|[lg𕜌邽߂ɁA܂͖{ OS R|[lgŏɃCXg[ꂽRs[^ɍăCXg[ړIŁAKɋꂽ OS ĩRs[ 1 ɂ{ OS R|[lg̒ǉRs[ 1 쐬邱Ƃł܂B}CN\tǵA{ OS R|[lgɊւ邷ׂĂ̌AAїv𗯕ۂ܂B܂A{ǉ_񏑂ɓɖLĂȂׂĂ̌̓}CN\tgɋA܂B

Y OS i}CN\tg܂͂̑Szo̎qЂɂċĂꍇA{ OS R|[lgɂẮA OS ǐ_񏑂ɋLڂĂiۏ؋K肪Kp܂B̏ꍇAql OS ǐ_񏑂̕ۏ؊ԓɖ{ OS R|[lg̋擾ĂꍇɌ܂B{ǉ_񏑂͕ۏ؊Ԃ̂ł͂ȂA{ OS R|[lg̕ۏ؂ OS iɂĂ̌̕ۏ؊ԂɌ܂B

Y OS i}CN\tg܂͂̑Szo̎qЈȊO̖@lɂċĂꍇA}CN\tg͖{ OS R|[lgɊւۏ؂̐ӔCؕ̂ł͂܂B̏ꍇAȉ̖ƐӁAQɊւƐӁAӔC̐̊eKp܂B

Ɛ
@̐̌̎ނ킸A}CN\tgт̋҂́Aqlɖ{ OS R|[lgі{ OS R|[lgɊւT|[gT[rX (ȉuT|[gT[rXvƂ܂) ۏ؂ȂLp̂܂rȂŒ񋟂Ă܂B̂߁A{ OS R|[lg̎gpႵ͎gps\уT|[gT[rX̒񋟎Ⴕ͕s񋟂ɊւāAiѓ̖ړIɑ΂KAEBX̕s݁A̓ImAgpʁAߎ̕s݂܂ޕۏ؂AAَAႵ͖@̂̂łƂ킸؂܂BAA@ɔꍇ͂̌ł͂܂B{ OS R|[lggpႵ͋@\琶SĂ̊댯́AqlSȂ΂Ȃ܂B

QɊւƐ
@̐̌̎ނ킸A}CN\tgт̋҂́A{ OS R|[lg̎gpႵ͎gps\܂̓T|[gT[rX̒񋟎Ⴕ͒񋟕s\琶A܂͖{ǉ_񏑂̋KɊւĐ؂̑Q (편vA@Ⴕ͂̑̏̑rAƂ̒fAlgQAvCoV[̑rA܂͍IȒӋ`܂߂`̕ssAߎA܂͂̑̋KI܂݂܂Ɍ肳܂) ɊւĈؐӔC𕉂܂BƂA}CN\tĝ悤ȑQ̉\ɂĒm炳ĂꍇłlłB

ӔC̐
Ȃ闝RɂĐ鑹Q (L̑QђڑQ܂͒ʏ푹Q܂݂܂Ɍ肳܂) ɂւ炸A{ǉ_񏑂ɊÂ}CN\tg̐ӔĆA{ OS R|[lgɂĂqlۂɎxz܂ 700 ~̂ꂩzƂ܂B
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win9x\kor\webkor.txt ===
MICROSOFT Ʈ    ༭ ߷

߿ ̹Ƿ ڼ ʽÿ.   "¶" Ǵ    Microsoft Corporation ("Microsoft")  ü  ("OS  ") Ʒ  Microsoft  ü ǰ("OS ǰ")  ༭( "   ༭" Ǵ " ༭")   ༭ ߷  ޽ϴ.  ϴ OS  Ҹ ġ,  Ǵ ν  OS ǰ  ༭   ༭ ߷ 뿡 ϰ ˴ϴ.  ̷  ༭ 뿡   쿡 OS  Ҹ ġ,  Ǵ  ʽÿ.

:   "OS ǰ"(MICROSOFT WINDOWS 95, WINDOWS 98, WINDOWS ME, ׸/Ǵ WINDOWS 2000)  ȿ  ༭  OS  Ҹ ġ,  Ǵ      ༭ ߷ϻ  Ǹ ϴ.

  ༭ ߷Ͽ ǰ  ⿡ ޸ ǵ     OS ǰ  ༭ ǵ 濡 ϴ.

Ϲ.  Microsoft شǴ OS ǰ   ,  Ǵ üϱ Ͽ Ͽ OS  Ҹ մϴ. Microsoft ش OS ǰ(ǰ  )  OS ǰ  ༭ ǰ   ༭ ߷Ͽ õ ǿ  ׸ ϰ ̷  ǵ ؼ   Ͽ Ͽ OS  Ҹ   ִ  㿩մϴ.    ༭ ߷ϰ  OS ǰ  ༭ ġ ʴ   쿡   ༭ ߷  OS  ҿ Ͽ 켱 ˴ϴ.

߰ Ǹ  .

*	ϰ شǴ  OS ǰ 纻     㿩   ϴ  شǴ OS ǰ  纻 Ǵ  ǻͿ  شǴ OS ǰ Ϻην  ü   纻 1 , ġ    ֽϴ.   ϴ ׷  ü   ߰ 纻  õ ǿ  ؾ մϴ.  ϰ   ش OS ǰ  纻 Ͽ ϴ  ̳   ü  Ұ ġ  ǻͿ  ü  Ҹ ٽ ġ  Ͽ  ü  Ҹ   ߰   ֽϴ.  Microsoft  ü  ҿ   Ǹ,    ̱ մϴ.   㿩   Ǹ Microsoft մϴ.

MICROSOFT MICROSOFT  ȸ簡 Ͽ ׷ شǴ OS ǰ  㿩 쿡 ش OS ǰ  ༭ Ե  (׷  ִ ) OS  ҿ ˴ϴ.   ش OS ǰ  ༭ Ե  Ⱓ  ϰ OS    Ͽ մϴ.   ༭ ߷   Ⱓ  ʽϴ.

MICROSOFT MICROSOFT  ȸ簡 ƴ ٸ ü ش OS ǰ   , MICROSOFT OS  ҿ Ͽ     մϴ.

 .  MICROSOFT   ڵ   ϴ ִ  ȿ OS    OS  ҿ õ   ( )(" ")   Ե ¿ ִ ״ ϸ, MICROSOFT  ڵ OS     񽺿 Ͽ , Ǹ ħؼ, ǰ, Ư  ռ, ̷ ,  Ȯ̳ , , , õ  ,  ,     ġ    Ǵ  Ͽ(̿ ѵ ) ,  Ǵ      մϴ.   ü       ̳ ɿ    ϰ δմϴ.

μ, Ļ  Ÿ Ư  .  MICROSOFT Ǵ  ڵ  쿡   ϴ ִ  ȿ OS  ҳ    Ǵ  , Ǵ    Ǵ ̸  , Ǵ   ༭ ߷ ׿  Ǵ װ Ͽ ߻ϴ  Ư, μ,  Ǵ Ļ ( ս,  Ǵ Ÿ  ս,  ߴ, , ̹ ս, ӹ  (  Ǵ ո  ǹ Ͽ),   Ÿ   Ǵ ٸ ظ ϵ ̿ ѵ ) Ͽ å  , ̴ MICROSOFT  ڰ ׷  ɼ  ˰ ִ 쿡 Դϴ.

å    .    Ͽ ߻  ִ  ( õ      Ǵ Ϲ ظ ϸ ̿ ѵ ) Ͽ,   ༭ ߷ϻ MICROSOFT  ڵ  åӰ   ؿ      ü  Ҹ ϱ Ͽ ϰ   ݾװ ȭ 5    ݾ ѵ˴ϴ.   ,            쿡   ϴ ִ  ˴ϴ.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win9x\ger\sedger.txt ===
Dieses Programm ist nicht fr die Verwendung unter Windows NT vorgesehen. Klicken Sie auf "OK", um den Vorgang zu beenden.
"DirectX Cabpack-Setup"

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win9x\multi\core.txt ===
InstallPrompt="This will install Microsoft DirectX 8.0 Runtime.  Do you wish to continue?"
FinishMessage="Microsoft DirectX 8.0 Setup has completed."
FriendlyName=Microsoft DirectX 8.0 Setup
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win9x\multi\dbgcore.txt ===
InstallPrompt="This will install Microsoft DirectX 8.0 debug runtime.  Do you wish to continue?"
FinishMessage="Microsoft DirectX 8.0 Setup has completed."
FriendlyName=Microsoft DirectX 8.0 Setup (Debug)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win9x\pol\pol.txt ===
InstallPrompt=Zostanie zainstalowany program Microsoft DirectX 8.0. Czy chcesz kontynuowac?
FinishMessage=Instalacja programu Microsoft DirectX 8.0 zostala ukonczona.
FriendlyName=Instalator programu Microsoft DirectX 8.0
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win9x\pol\webpol.txt ===
UZUPENIAJCA UMOWA LICENCYJNA UYTKOWNIKA OPROGRAMOWANIA FIRMY MICROSOFT

WANE: PRZECZYTA DOKADNIE - Skadniki oprogramowania systemu operacyjnego firmy Microsoft Corporation (zwanej w skrcie "Microsoft"), cznie z dokumentacj "online" i dokumentacj elektroniczn (zwane wsplnie "Skadnikami SO"), podlegaj postanowieniom i warunkom umowy licencyjnej dotyczcej odpowiedniego systemu operacyjnego firmy Microsoft (zwanego "Produktem SO") opisanego poniej (umowa ta jest dalej zwana "Umow Licencyjn") oraz postanowieniom i warunkom niniejszej Uzupeniajcej Umowy Licencyjnej. POPRZEZ INSTALOWANIE, KOPIOWANIE LUB UYWANIE W INNY SPOSB SKADNIKW SO, LICENCJOBIORCA ZGADZA SI PRZESTRZEGA POSTANOWIE I WARUNKW ODPOWIEDNIEJ UMOWY LICENCYJNEJ PRODUKTU SO ORAZ NINIEJSZEJ UZUPENIAJCEJ UMOWY LICENCYJNEJ. JELI LICENCJOBIORCA NIE ZOBOWIZUJE SI PRZESTRZEGA TYCH POSTANOWIE I WARUNKW, NIE MA ON PRAWA DO INSTALOWANIA, KOPIOWANIA I UYWANIA SKADNIKW SO.

UWAGA: JELI LICENCJOBIORCA NIE POSIADA WANEJ UMOWY LICENCYJNEJ NA DOWOLNY "PRODUKT SO" (SYSTEM OPERACYJNY MICROSOFT WINDOWS 95, WINDOWS 98, WINDOWS ME, I/LUB WINDOWS 2000), NIE MOE INSTALOWA, KOPIOWA ANI UYWA W INNY SPOSB SKADNIKW SO, ANI TE NIE MA ADNYCH PRAW WYNIKAJCYCH Z NINIEJSZEJ UZUPENIAJCEJ UMOWY LICENCYJNEJ.

Terminy pisane duymi literami, uywane w niniejszej Uzupeniajcej Umowie Licencyjnej, a w niej w inny sposb nie okrelone, maj znaczenie nadane im w odpowiedniej Umowie Licencyjnej dotyczcej Produktu SO.

Postanowienia oglne. Skadniki SO s dostarczane Licencjobiorcy przez firm Microsoft, aby uaktualni, uzupeni lub zastpi istniejce funkcje odpowiedniego Produktu SO. Firma Microsoft udziela Licencjobiorcy prawa do uywania Skadnikw SO zgodnie z postanowieniami i warunkami Umowy Licencyjnej dotyczcej odpowiedniego Produktu SO (ktre s wczone do niniejszej Uzupeniajcej Umowy Licencyjnej przez ich przywoanie) oraz postanowieniami i warunkami niniejszej Uzupeniajcej Umowy Licencyjnej, pod warunkiem, e Licencjobiorca przestrzega tych wszystkich postanowie i warunkw. W zakresie, w ktrym adne z postanowie niniejszej Uzupeniajcej Umowy Licencyjnej nie stoi w sprzecznoci z postanowieniami Umowy Licencyjnej dotyczcej odpowiedniego Produktu SO, postanowienia niniejszej Uzupeniajcej Umowy Licencyjnej odnosz si wycznie do Skadnikw SO.

Dodatkowe prawa i ograniczenia. 

* Jeli Licencjobiorca posiada kilka wanie licencjonowanych kopii odpowiedniego Produktu(w) SO, Licencjobiorca moe kopiowa, instalowa i uywa jednej kopii Skadnikw Systemu Operacyjnego jako czci tego Produktu(w) SO na wszystkich swoich komputerach, na ktrych dziaaj wanie licencjonowane kopie Produktu SO, pod warunkiem, e Licencjobiorca uywa tych dodatkowych kopii Skadnikw Systemu Operacyjnego zgodnie z postanowieniami i warunkami okrelonymi powyej. Dla kadej wanie licencjonowanej kopii odpowiedniego Produktu SO, Licencjobiorca moe take sporzdzi jedn dodatkow kopi Skadnikw Systemu Operacyjnego wycznie w celach archiwalnych lub do ponownej instalacji tych skadnikw na tym samym komputerze, na ktrym byy one poprzednio zainstalowane. Firma Microsoft zachowuje wszelkie prawa, prawa wasnoci i dobra zwizane ze Skadnikami Systemu Operacyjnego. Wszelkie prawa nie udzielone wyranie s zastrzeone przez firm Microsoft.


JELI LICENCJA NA ODPOWIEDNI PRODUKT SO ZOSTAA UDZIELONA LICENCJOBIORCY PRZEZ FIRM MICROSOFT LUB JEDNEGO Z JEJ PENOPRAWNYCH PRZEDSTAWICIELI, TO OGRANICZONA GWARANCJA (JELI TAKA ISTNIEJE) ZNAJDUJCA SI W UMOWIE LICENCYJNEJ DOTYCZCEJ TEGO PRODUKTU OBEJMUJE RWNIE SKADNIKI SO, POD WARUNKIEM, E LICENCJA NA TE SKADNIKI OBEJMUJE POSTANOWIENIA OGRANICZONEJ GWARANCJI ZNAJDUJCE SI W UMOWIE LICENCYJNEJ ODPOWIEDNIEGO PRODUKTU SO. JEDNAKE NINIEJSZA UZUPENIAJCA UMOWA LICENCYJNA NIE PRZEDUA OKRESU CZASU, NA JAKI OGRANICZONA GWARANCJA ZOSTAA UDZIELONA.

JELI LICENCJA NA ODPOWIEDNI PRODUKT SO ZOSTAA UDZIELONA LICENCJOBIORCY PRZEZ JEDNOSTK INN NI FIRMA MICROSOFT LUB JEDEN Z JEJ PENOPRAWNYCH PRZEDSTAWICIELI, TO FIRMA MICROSOFT NA PONISZYCH ZASADACH WYCZA ODPOWIEDZIALNO Z TYTUU RKOJMI W ODNIESIENIU DO SKADNIKW SO.

WYCZENIE ODPOWIEDZIALNOCI Z TYTUU RKOJMI. W NAJSZERSZYM ZAKRESIE DOPUSZCZONYM PRZEZ PRAWO WACIWE FIRMA MICROSOFT I JEJ DOSTAWCY DOSTARCZAJ LICENCJOBIORCY SKADNIKI SO ORAZ POMOC TECHNICZN (JELI TAKA ISTNIEJE) Z NIMI ZWIZAN ("POMOC TECHNICZN") W TAKIM STANIE, W JAKIM S, WRAZ ZE WSZYSTKIMI WADAMI. FIRMA MICROSOFT ORAZ JEJ DOSTAWCY NINIEJSZYM WYCZAJ SWOJ ODPOWIEDZIALNO Z TYTUU RKOJMI W ODNIESIENIU DO SKADNIKW SO I POMOCY TECHNICZNEJ, WYRANEJ, DOMYLNEJ I STATUTOWEJ, ORAZ NIE UDZIELAJ ADNEJ GWARANCJI MIDZY INNYMI W ZAKRESIE: PRAW WASNOCI, WAD FIZYCZNYCH I PRAWNYCH, WARTOCI HANDLOWEJ, PRZYDATNOCI DO OKRELONEGO CELU, BRAKU WIRUSW, DOKADNOCI LUB KOMPLETNOCI ODPOWIEDZI, BRAKU STARANNOCI LUB FACHOWOCI, NIEZAKCONEGO UYWANIA, NIEZAKCONEGO POSIADANIA I ZGODNOCI Z OPISEM. CAE RYZYKO ZWIZANE Z UYWANIEM SKADNIKW SO I ICH FUNKCJONOWANIEM ORAZ Z POMOC TECHNICZN SPOCZYWA NA LICENCJOBIORCY.

WYCZENIE ODPOWIEDZIALNOCI ZA EWENTUALNE SZKODY. W NAJSZERSZYM ZAKRESIE DOZWOLONYM PRZEZ PRAWO WACIWE FIRMA MICROSOFT ANI JEJ DOSTAWCY NIE BD W ADNYM WYPADKU ODPOWIEDZIALNI ZA JAKIEKOLWIEK POWSTAE SZKODY (W TYM, BEZ OGRANICZE, ZA: STRATY W PROWADZONEJ DZIAALNOCI, UTRAT POUFNYCH LUB INNYCH INFORMACJI ZWIZANYCH Z PROWADZON DZIAALNOCI, PRZERWY W PROWADZENIU DZIAALNOCI, NARUSZENIE DBR OSOBISTYCH, NARUSZENIE PRYWATNOCI, NIEDOPENIENIE OBOWIZKW (ZARWNO W DOBREJ WIERZE, JAK I PRZY UZASADNIONYCH STARANIACH), BRAK STARANNOCI ORAZ INNE SZKODY FINANSOWE I JAKIEKOLWIEK STRATY) WYNIKE LUB W JAKIKOLWIEK SPOSB ZWIZANE Z UYWANIEM LUB NIEMONOCI UYWANIA SKADNIKW SO I POMOCY TECHNICZNEJ, WIADCZENIEM POMOCY TECHNICZNEJ LUB JEJ BRAKIEM, W ZWIZKU Z POSTANOWIENIAMI NINIEJSZEJ UZUPENIAJCEJ UMOWY LICENCYJNEJ, NAWET JELI FIRMA MICROSOFT LUB KTRYKOLWIEK Z JEJ DOSTAWCW ZOSTALI POWIADOMIENI O MOLIWOCI POWSTANIA TAKICH SZKD.

OGRANICZENIE ODPOWIEDZIALNOCI I ODSZKODOWANIE. BEZ WZGLDU NA JAKIEKOLWIEK SZKODY, KTRE LICENCJOBIORCA MOE PONIE Z JAKIEGOKOLWIEK POWODU (W TYM, BEZ OGRANICZE, WSZELKICH SZKD WYMIENIONYCH POWYEJ ORAZ WSZELKICH SZKD BEZPOREDNICH LUB BLIEJ NIEOKRELONYCH), CAKOWITA ODPOWIEDZIALNO FIRMY MICROSOFT I JEJ DOSTAWCW WYNIKAJCA Z POSTANOWIE NINIEJSZEJ UZUPENIAJCEJ UMOWY LICENCYJNEJ, A TAKE JEDYNE ODSZKODOWANIE DLA LICENCJOBIORCY ZA WSZELKIE WYMIENIONE POWYEJ STRATY, S OGRANICZONE DO WIKSZEJ Z KWOT: DO KWOTY ZAPACONEJ PRZEZ LICENCJOBIORC ZA SKADNIKI SYSTEMU OPERACYJNEGO LUB DO KWOTY 5,00 DOLARW AMERYKASKICH. POWYSZE OGRANICZENIA, WYCZENIA I ZRZECZENIA OBOWIZUJ W NAJSZERSZYM ZAKRESIE DOZWOLONYM PRZEZ PRAWO WACIWE, NAWET JELI ODSZKODOWANIE NIE STANOWI WYNAGRODZENIA PONIESIONEJ SZKODY.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win9x\rus\rus.txt ===
InstallPrompt=   Microsoft DirectX 8.0. ?
FinishMessage= Microsoft DirectX 8.0 .
FriendlyName= Microsoft DirectX 8.0
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win9x\rus\webrus.txt ===
MICROSOFT

   !     ,  Microsoft Corporation (  Microsoft),       (   ),      Microsoft,      (  ),       . ,        ,        ,    ,    .       ,  ,       .

!              (MICROSOFT WINDOWS 95, WINDOWS 98, WINDOWS ME  WINDOWS 2000),    ,        ,          .

,    ,    ,     ,         .

 .   ,    Microsoft,   ,      .  Microsoft          ,         (     ),           .               ,        .

   .

*         ,  ,                ,          ,  ,             .                                  ,       .             Microsoft.      Microsoft       .


        MICROSOFT,    ,  ,        ,       ,                .          .

        ,    MICROSOFT    ,  MICROSOFT    -       ,   .

   .   ,      ,  MICROSOFT                 (  )    ܻ,   ,           ,  ,   ,  (    )   , , ,    ,  ,      ,     ,  ,      .      ,               .

 ,     .  ,      ,  MICROSOFT        - , ,     (      ,     ,   ,  ,    ,    -         ,   , -      ),            ,       ,        ,     MICROSOFT           .

    .         (       ,      ),    MICROSOFT          ,    .  ,        ,      ,        .
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win9x\selfext\eng.txt ===
InstallPrompt=This will install Microsoft DirectX 8.0.  Do you wish to continue?
FinishMessage=Microsoft DirectX 8.0 Setup has completed.
FriendlyName=Microsoft DirectX 8.0 Setup
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win9x\selfext\sedeng.txt ===
This program is not designed for use on Windows NT. Press OK to exit.
"DirectX Cabpack Setup"
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win9x\itn\seditn.txt ===
Impossibile utilizzare questo programma su Windows NT. Per uscire, scegliere OK.
"Programma di installazione di DirectX Cabpack"

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win9x\jpn\sedjpn.txt ===
̃vO Windows NT ł͎gpł܂B[OK] NbNāAIĂB
"DirectX Cabpack ZbgAbv"

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win9x\spa\spa.txt ===
InstallPrompt=Se instalar Microsoft DirectX 8.0. Desea continuar?
FinishMessage=Instalacin de Microsoft DirectX 8.0 finalizada.
FriendlyName=Instalacin de Microsoft DirectX 8.0
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win9x\spa\webspa.txt ===
CONTRATO COMPLEMENTARIO DE LICENCIA PARA EL USUARIO FINAL DE SOFTWARE DE MICROSOFT

IMPORTANTE: LEA ATENTAMENTE: estos componentes de sistema operativo de Microsoft Corporation ("Microsoft") incluida cualquier documentacin "en pantalla" o electrnica ("Componentes de SO") estn sujetos a los trminos y condiciones del contrato bajo el cual obtuvo la licencia para el producto de sistema operativo de Microsoft aplicable ("Producto de SO") descrito a continuacin (cada uno de ellos un "Contrato de licencia para el usuario final" o "CLUF") y a los trminos y condiciones de este CLUF complementario. AL INSTALAR, COPIAR O DE OTRA MANERA UTILIZAR LOS COMPONENTES DE SO, USTED ACEPTA QUEDAR OBLIGADO POR LOS TRMINOS Y CONDICIONES DEL CLUF DEL PRODUCTO DE SO APLICABLE Y DE ESTE CLUF COMPLEMENTARIO. SI NO ACEPTA ESTOS TRMINOS Y CONDICIONES, NO INSTALE, COPIE NI USE LOS COMPONENTES DE SO.

NOTA: SI NO TIENE UN CLUF VLIDO PARA CUALQUIER "PRODUCTO DE SO" (MICROSOFT WINDOWS 95, WINDOWS 98, WINDOWS ME Y/O WINDOWS 2000) NO EST AUTORIZADO A INSTALAR, COPIAR NI DE OTRA FORMA UTILIZAR LOS COMPONENTES DE SO Y NO TIENE DERECHOS BAJO ESTE CLUF COMPLEMENTARIO.

Los trminos en maysculas que se usan en este CLUF complementario y no se definen de otra forma en la presente tendrn los significados que se les asignan en el CLUF del Producto de SO aplicable.

General. Microsoft le proporciona los Componentes de SO para que actualice, complemente o reemplace la funcionalidad del Producto de SO aplicable. Microsoft le concede una licencia para utilizar los Componentes de SO bajo los trminos y condiciones del CLUF del Producto de SO para el Producto de SO aplicable (que se incorpora a la presente por referencia) y los trminos y condiciones establecidos en este CLUF complementario, siempre que cumpla todos dichos trminos y condiciones. En la medida en la que trminos de este CLUF complementario estn en conflicto con trminos en el CLUF del Producto de SO aplicable, los trminos de este CLUF complementario rigen nicamente en lo que respecta a los Componentes de SO.

Derechos y limitaciones adicionales. 

*	Si tiene mltiples copias con licencias vlidas del Producto o Productos de SO aplicables, puede reproducir, instalar y utilizar una copia de los Componentes de SO como parte de tales Productos de SO aplicables en todos los equipos que ejecuten copias con licencia vlida de los Productos de SO siempre que utilice dichas copias adicionales de los Componentes de SO de acuerdo con los trminos y condiciones anteriores. Por cada copia con licencia vlida del Producto de SO aplicable, puede reproducir tambin una copia adicional de los Componentes de SO nicamente con fines de archivo o para la reinstalacin de los Componentes de SO en el mismo equipo en el que se instalaron anteriormente los Componentes de SO. Microsoft retiene todos los derechos, titularidad e intereses de y sobre los Componentes de SO. Microsoft se reserva todos los derechos que no se conceden expresamente.


SI EL PRODUCTO APLICABLE LE FUE CONCEDIDO BAJO LICENCIA POR MICROSOFT O ALGUNA DE SUS SUBSIDIARIAS DE PROPIEDAD EXCLUSIVA, LA GARANTA LIMITADA (SI EXISTIERA) INCLUIDA EN EL CLUF DEL PRODUCTO DE SO APLICABLE, SE APLICA A LOS COMPONENTES DE SO SIEMPRE QUE LOS COMPONENTES DE SO LE HAYAN SIDO CONCEDIDOS BAJO LICENCIA DENTRO DEL PERODO DE LA GARANTA LIMITADA DEL CLUF DEL PRODUCTO DE SO APLICABLE. SIN EMBARGO, ESTE CLUF COMPLEMENTARIO NO AMPLA EL PERODO DE TIEMPO PARA EL QUE SE PROPORCIONA LA GARANTA LIMITADA.

SI EL PRODUCTO DE SO APLICABLE LE FUE CONCEDIDO BAJO LICENCIA POR UNA PERSONA JURDICA DISTINTA DE MICROSOFT O ALGUNA DE SUS SUBSIDIARIAS DE PROPIEDAD EXCLUSIVA, MICROSOFT RENUNCIA A DAR NINGUNA GARANTA CON RESPECTO A LOS COMPONENTES DE SO DE LA SIGUIENTE FORMA:

DENEGACIN DE GARANTAS. EN LA MEDIDA PERMITIDA POR LA LEY APLICABLE, MICROSOFT Y SUS PROVEEDORES LE PROPORCIONAN LOS COMPONENTES DE SO Y LOS SERVICIOS DE SOPORTE TCNICO (SI EXISTEN) RELACIONADOS CON LOS COMPONENTES DE SO ("SERVICIOS DE SOPORTE TCNICO") TAL CUAL Y CON TODOS LOS DEFECTOS; Y MICROSOFT Y SUS PROVEEDORES RENUNCIAN POR LA PRESENTE CON RESPECTO A LOS COMPONENTES DE SO Y LOS SERVICIOS DE SOPORTE TCNICO A TODA GARANTA Y CONDICIN YA SEA EXPRESA, IMPLCITA O PREVISTA POR LEY, INCLUIDAS PERO SIN LIMITARSE A (EN SU CASO) TODA GARANTA O CONDICIN DE O RELACIONADA CON: TITULARIDAD, AUSENCIA DE INFRACCIN, COMERCIABILIDAD, IDONEIDAD PARA UN DETERMINADO FIN, AUSENCIA DE VIRUS INFORMTICOS, EXACTITUD O INTEGRIDAD DE LAS RESPUESTAS, RESULTADOS, AUSENCIA DE NEGLIGENCIA O AUSENCIA DE ESFUERZO RAZONABLE, DE POSESIN Y DISFRUTE PLENOS Y DE CORRESPONDENCIA CON LA DESCRIPCIN. USTED ASUME TODO RIESGO QUE SURJA DE LA UTILIZACIN O DEL RENDIMIENTO DE LOS COMPONENTES DE SO Y, EN SU CASO, DE LOS SERVICIOS DE SOPORTE TCNICO.

EXCLUSIN DE RESPONSABILIDAD POR DAOS INCIDENTALES, INDIRECTOS Y OTROS. EN LA MEDIDA PERMITIDA POR LA LEY APLICABLE, EN NINGN CASO MICROSOFT O SUS PROVEEDORES SERN RESPONSABLES POR NINGN DAO, ESPECIAL, INCIDENTAL, INDIRECTO O CONSECUENCIAL CUALQUIERA QUE SEA (INCLUIDOS, PERO SIN LIMITARSE A, DAOS POR: PRDIDA DE BENEFICIOS, PRDIDA DE INFORMACIN CONFIDENCIAL O DE OTRO TIPO, INTERRUPCIN DE NEGOCIOS, DAOS A LAS PERSONAS, PRDIDA DE PRIVACIDAD, POR INCUMPLIMIENTO DE OBLIGACIONES (YA SEA DE BUENA FE O CON DILIGENCIA RAZONABLE), POR NEGLIGENCIA O POR CUALQUIER OTRA PRDIDA PECUNIARIA O DE OTRO TIPO) QUE PUDIERE SURGIR DEL USO O IMPOSIBILIDAD DE USO DE LOS COMPONENTES DE SO, O DE LOS SERVICIOS DE SOPORTE TCNICO O DE LA PROVISIN O AUSENCIA EN LA PROVISIN DE LOS SERVICIOS DE SOPORTE TCNICO, O DE CUALQUIER OTRA FORMA BAJO O EN CONEXIN CON CUALQUIER DISPOSICIN DE ESTE CLUF COMPLEMENTARIO, AUN EN EL CASO DE QUE SE HUBIERA INFORMADO A MICROSOFT DE LA POSIBILIDAD DE DICHOS DAOS. 

LIMITACIN DE RESPONSABILIDAD Y RECURSOS. NO OBSTANTE LOS DAOS EN LOS QUE PUEDA INCURRIR POR CUALQUIER RAZN (INCLUIDOS, PERO SIN LIMITARSE A, LOS DAOS A LOS QUE SE HIZO REFERENCIA ANTERIORMENTE, Y TODOS LOS DAOS DIRECTOS O GENERALES), LA NICA RESPONSABILIDAD DE MICROSOFT Y DE CUALQUIERA DE SUS PROVEEDORES BAJO CUALQUIER DISPOSICIN DE ESTE CLUF COMPLEMENTARIO Y EL NICO RECURSO QUE LE COMPETER A USTED POR TODO LO ANTEDICHO SE LIMITAR A LA CANTIDAD QUE USTED PAG POR LOS COMPONENTES DE SO O A CINCO DLARES ESTADOUNIDENSES, LO QUE RESULTE MAYOR. LAS ANTEDICHAS LIMITACIONES, EXCLUSIONES Y RENUNCIAS SE APLICARN EN LA MEDIDA PERMITIDA POR LA LEY APLICABLE, INCLUSO AUNQUE ALGN RECURSO TENGA ERRORES EN SU FIN ESENCIAL.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win9x\kor\sedkor.txt ===
α׷ Windows NT ƴմϴ.  [Ȯ] ʽÿ.
"DirectX Cabpack Setup"

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win9x\swe\swe.txt ===
InstallPrompt=Microsoft DirectX 8.0 kommer att installeras. Vill du fortstta?
FinishMessage=Installationen av Microsoft DirectX 8.0 har slutfrts.
FriendlyName=Installationsprogram fr Microsoft DirectX 8.0
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win9x\swe\webswe.txt ===
KOMPLETTERANDE LICENSAVTAL FR MICROSOFTS PROGRAMVARA

VIKTIGT - LS NOGGRANT: Operativsystemkomponenterna av programvaran frn Microsoft Corporation ("Microsoft"), inklusive eventuell online- eller elektronisk dokumentation ("OS-komponenter"), omfattas av villkoren i avtalet ("Licensavtalet") under vilket Ni har licensierat den operativsystemprodukt frn Microsoft som anges nedan ("OS-produkt"), samt av villkoren i detta kompletterande licensavtal. GENOM ATT NI INSTALLERAR, FRAMSTLLER EXEMPLAR AV ELLER P ANNAT STT ANVNDER OS-KOMPONENTERNA, ACCEPTERAR NI VILLKOREN I LICENSAVTALET FR TILLMPLIG OS-PRODUKT, SAMT DETTA KOMPLETTERANDE LICENSAVTAL. OM NI INTE VILL ACCEPTERA DESSA VILLKOR, HAR NI INTE RTT ATT INSTALLERA, FRAMSTLLA EXEMPLAR AV ELLER ANVNDA OS-KOMPONENTERNA.

OBS! OM NI INTE HAR ETT GILTIGT LICENSAVTAL FR NGON "OS-PRODUKT" (MICROSOFT WINDOWS 95, WINDOWS 98, WINDOWS ME, OCH/ELLER WINDOWS 2000), HAR NI INTE RTT ATT INSTALLERA, FRAMSTLLA EXEMPLAR AV ELLER P ANNAT STT ANVNDA OS-KOMPONENTERNA OCH NI HAR INGA RTTIGHETER ENLIGT DETTA KOMPLETTERANDE LICENSAVTAL.

Termer med inledande versal som anvnds men som inte definieras i detta kompletterande licensavtal har den innebrd som anges i Licensavtalet fr tillmplig OS-produkt.

Allmnt. OS-komponenterna tillhandahlls Er av Microsoft som en uppdatering av, tillgg till eller utbyte av den befintliga funktionaliteten hos tillmplig OS-produkt. Microsoft beviljar Er en licens att anvnda OS-komponenterna enligt villkoren i Licensavtalet fr tillmplig OS-produkt (vilket hrmed ingr i detta kompletterande licensavtal genom denna hnvisning ) samt villkoren i detta kompletterande licensavtal, under frutsttning att Ni uppfyller samtliga sdana villkor. Om ngot villkor i detta kompletterande licensavtal strider mot villkoren i Licensavtalet fr tillmplig OS-produkt, skall villkoren i detta kompletterande licensavtal glla endast vad avser OS-komponenterna.

Ytterligare rttigheter och begrnsningar.

*	Om Ni har flera lagligen licensierade exemplar av tillmpliga OS-produkter, har Ni rtt att framstlla, installera och anvnda ett exemplar av OS-komponenterna som en del av sdana OS-produkter, p samtliga Era datorer som kr lagligen licensierade exemplar av OS-produkterna, under frutsttning att Ni anvnder sdana ytterligare exemplar av OS-komponenterna i enlighet med villkoren ovan. Fr varje lagligen licensierat exemplar av tillmplig OS-produkt, har Ni ven rtt att framstlla ytterligare ett exemplar av OS-komponenterna endast fr arkivering eller terinstallation av OS-komponenterna p samma dator som OS-komponenterna tidigare installerats. Microsoft behller samtliga rttigheter, gandertt till eller intressen i OS-komponenterna. Microsoft frbehller sig samtliga rttigheter som inte uttryckligen beviljas.


OM DEN TILLMPLIGA OS-PRODUKTEN LICENSIERADES TILL ER AV MICROSOFT ELLER NGOT AV DESS HELGDA DOTTERBOLAG, GLLER DEN EVENTUELLA BEGRNSADE GARANTIN SOM ANGES I LICENSAVTALET FR TILLMPLIG OS-PRODUKT FR OS-KOMPONENTERNA, UNDER FRUTSTTNING ATT OS-KOMPONENTERNA LICENSIERATS AV ER INOM DEN GARANTIPERIOD SOM ANGES I LICENSAVTALET FR TILLMPLIG OS-PRODUKT. DETTA KOMPLETTERANDE LICENSAVTAL INNEBR EMELLERTID INTE ATT GARANTIPERIODEN FR DEN BEGRNSADE GARANTIN FRLNGS.

OM DEN TILLMPLIGA OS-PRODUKTEN LICENSIERADES TILL ER AV NGON ANNAN N MICROSOFT ELLER NGOT AV DESS HELGDA DOTTERBOLAG, FRISKRIVER SIG MICROSOFT FRN ALLT GARANTIANSVAR AVSEENDE OS-KOMPONENTERNA I ENLIGHET MED FLJANDE:

INGA GARANTIER. MED UNDANTAG AV VAD SOM FLJER AV TVINGANDE LAG, TILLHANDAHLLER MICROSOFT OCH DESS LEVERANTRER OS-KOMPONENTER SAMT EVENTUELLA SUPPORTTJNSTER RELATERADE TILL OS-KOMPONENTER ("SUPPORTTJNSTER") I BEFINTLIGT SKICK. MICROSOFT OCH DESS LEVERANTRER FRISKRIVER SIG VIDARE FRN ALLT GARANTIANSVAR AVSEENDE OS-KOMPONENTER OCH SUPPORTTJNSTER, SVL UTTRYCKLIGEN SOM UNDERFRSTTT, INKLUSIVE GARANTIER AVSEENDE GANDERTTIGHETER, FRNVARO AV INTRNG I TREDJE MANS RTTIGHETER, PRODUKTENS ALLMNNA LMPLIGHET ELLER LMPLIGHET FR ETT SRSKILT NDAML, FRNVARO AV VIRUS, KORREKTA OCH FULLSTNDIGA SVAR, RESULTAT, FRNVARO AV VRDSLSHET, FACKMANNAMSSIGT UTFRANDE, BESITTNING SAMT VERENSSTMMELSE MED BESKRIVNING. NI STR ENSAM HELA RISKEN FR ANVNDNING AV OS-KOMPONENTER OCH SUPPORTJNSTER.

BEGRNSNING AV ANSVAR FR INDIREKTA SKADOR, FLJDSKADOR OCH ANDRA SKADOR. MED UNDANTAG AV VAD SOM FLJER AV TVINGANDE LAG, ANSVARAR MICROSOFT ELLER DESS LEVERANTRER UNDER INGA OMSTNDIGHETER FR INDIREKTA SKADOR, FLJDSKADOR ELLER NGRA SOM HELST ANDRA SKADOR (INKLUSIVE, UTEBLIVEN VINST, FRLUST AV KONFIDENTIELL ELLER ANNAN INFORMATION, DRIFTAVBROTT, PERSONSKADA, INTEGRITETSSKADA, SKADA ORSAKAD AV BRISTANDE UPPFYLLELSE AV EN FRPLIKTELSE (INKLUSIVE MED ANLEDNING AV GOD TRO ELLER SKLIG AKTSAMHET), SKADA ORSAKAD AV VRDSLSHET SAMT ALLA EKONOMISKA SKADOR) TILL FLJD AV ANVNDNING AV ELLER SVRIGHET ELLER OMJLIGHET ATT ANVNDA OS-KOMPONENTERNA ELLER SUPPORTJNSTERNA ELLER TILLHANDAHLLANDE AV ELLER UTEBLIVNA SUPPORTTJNSTER, ELLER ANNARS I SAMBAND MED DETTA KOMPLETTERANDE LICENSAVTAL, VEN OM MICROSOFT ELLER DESS LEVERANTRER UPPMRKSAMMATS P RISKEN FR SDANA SKADOR.

ANSVARSBEGRNSNING. OAVSETT VILKA SKADOR NI ORSAKAS OCH OAVSETT ORSAK (INKLUSIVE SAMTLIGA SKADOR SOM ANGES OVAN SAMT SAMTLIGA DIREKTA ELLER EKONOMISKA SKADOR), R MICROSOFTS OCH DESS LEVERANTRERS TOTALA ANSVAR UNDER VILLKOREN I DETTA KOMPLETTERANDE LICENSAVTAL, BEGRNSAD TILL DET STRRE AV ANTINGEN DET BELOPP SOM FAKTISKT ERLAGTS AV ER FR OS-KOMPONENTERNA ELLER USD 5,00. OVANSTENDE ANSVARSBEGRNSNINGAR OCH FRISKRIVNINGAR GLLER OM INTE ANNAT FLJER AV TVINGANDE LAG, VEN OM EN PFLJD INTE KAN GRAS GLLANDE.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win9x\rus\sedrus.txt ===
Windows NT.     "".
" DirectX Cabpack"

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win9x\spa\sedspa.txt ===
Este programa no est diseado para usarse en Windows NT. Haga clic en Aceptar para salir.
"Instalacin de DirectX Cabpack"

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win9x\selfext\webeng.txt ===
This software is subject to the terms and conditions of the Microsoft License and NonDisclosure Agreement for Microsoft DirectX 8.0 Pre-Release Code, a copy of which is provided below for your convenience. If you have not signed a Microsoft License and NonDisclosure Agreement for this software, you are not authorized to install, copy or otherwise use this software. 


MICROSOFT CORPORATION NON-DISCLOSURE AGREEMENT
(PRE-RELEASE VERSION OF DIRECTX 8.0)


This is a legal agreement between you, either an individual or an entity, ("Recipient"), and Microsoft Corporation ("Microsoft").  If you do not agree to the terms of this Agreement, promptly return this CD-ROM and the accompanying itms, including written materials and binders or other containers, (collectively the "Software") to Microsoft. 

1.	GRANT OF LICENSE.
	(a)	Microsoft grants Recipient a limited, non-exclusive, non-assignable nontransferable, royalty-free license to: install and use up to three (3) copies of the executable code of the Software on CPU(s) residing on Recipients premises of which Recipient has a valid licensed copy of Microsoft Windows 95 or 98, solely to test the compatibility of Recipients application or other product(s) which operate in conjunction with the Software and to evaluate the Software for the purpose of providing feedback thereon to Microsoft.  All other rights are reserved to Microsoft.  Recipient shall not rent, lease, sell, sublicense, assign, or otherwise transfer the Software, including any accompanying printed materials.  Recipient may not reverse engineer, decompile or disassemble the Software except to the extent that this restriction is expressly prohibited by applicable law.  Microsoft and its suppliers shall retain title and all ownership rights to the Software, and this Agreement shall not be construed in any manner as transferring any rights of ownership or license to the Software or to the features or information therein, except as specifically stated herein. 

	(b)	Recipient agrees to provide reasonable feedback to Microsoft as described in the materials provided by Microsoft, including but not limited to usability, bug reports and test results, with respect to the testing of the Software.  Recipient will use reasonable efforts to review and comment on all documentation supplied.  All bug reports, test results and other feedback made by Recipient shall be the property of Microsoft and may be used by Microsoft for any purpose it sees fit.  Due to the nature of the development work, Microsoft is not certain if errors or discrepancies in the Software may be corrected.

	(c)	Recipient may disclose the Software only to its employees who have a need to know and have access to the Software in order to assist in Recipients testing of the Software, provided that (1) such employees use of the Software takes place solely at Recipients site, and (2) Recipient has executed appropriate written agreements with such employees sufficient to enable it to comply with the terms of this Agreement. Upon Microsofts request, Recipient shall provide to Microsoft a list of all employees granted access to the Software hereunder. 

	(d)	Recipient may not disclose the results of any benchmark test of the Software to any third party without Microsofts prior written approval. Recipient may not use the Software in a live operating environment where it may be relied upon to perform in the same manner as commercially release software or with data that has not been sufficiently backed up.

2.	TERM OF AGREEMENT.  The term of this Agreement shall commence on Recipients installation of the Software and shall continue until terminated by Microsoft, with or without cause.  This Agreement will terminate without notice upon the commercial release of the Software.  Upon the termination of this Agreement, Recipient shall promptly return to Microsoft, or certify destruction of, all full or partial copies of the Software and related materials provided by Microsoft.  Section 5 shall survive termination or expiration of this Agreement with respect to any information that has not been made public by Microsoft as of the commercial release of the Software.

3.	COST OF TESTING.  There is no charge to Recipient for testing of the Software.  Microsoft shall bear all direct freight expenses relating to the shipment of the Software to Recipients place of business.  If Recipient returns the Software, Recipient will pay any return freight expenses.

4.	PRODUCT MAINTENANCE/UPDATES.  Microsoft is not obligated to provide maintenance, technical support or updates to Recipient for Software licensed pursuant to this Agreement.  However, Microsoft may, in its sole discretion, provide further pre-release versions, technical support, updates and/or supplements of any Software and/or related information ("Updates") to Recipient hereunder, in which case such Updates shall also be deemed to be included in the Software, and therefore governed by this Agreement, unless other terms of use are provided by Microsoft with such Updates. In no event shall Microsoft be obligated to provide Recipient, free of charge, a copy of the commercial release version of the Software in connection with Recipients participation in the testing program.  Microsoft is not obligated to make any Software commercially available. 

5.	CONFIDENTIALITY.  The Software, including its existence and features, and related information are proprietary and confidential information to Microsoft and its suppliers.  Recipient agrees not to disclose or provide the Software, documentation, or any information relating to the Software (including the Software features or the results of use or testing) to any third party , or to use the Software for any purpose other than as provided in this Agreement. However, Recipient may disclose Confidential Information in accordance with judicial or other governmental order, provided Recipient shall give Microsoft reasonable notice prior to such disclosure and shall comply with any applicable protective order or equivalent.  Recipient shall not be liable to Microsoft for such information which Recipient can prove (1) is already known to Recipient; (2) becomes publicly known through no wrongful act of Recipient; (3) is rightfully received from a third party without similar restriction and without breach of this Agreement; or (4) is independently developed by Recipient.  This provision shall survive the termination or expiration of this Agreement with respect to any information that has not been made public by Microsoft as of the commercial release of the Software.

6.	INTELLECTUAL PROPERTY RIGHTS.  All title and intellectual property rights in and to the Software (including but not limited to any images, photographs, animations, video, audio, music, text and "applets" incorporated into the Software), and any copies Recipient is permitted to make herein are owned by Microsoft or its suppliers. All title and intellectual property rights in and to the content which may be accessed through use of the Software are the property of the respective content owner and may be protected by applicable copyright or other intellectual property laws and treaties. This Agreement grants Recipient no rights to use such content. If this Software contains documentation which is provided only in electronic form, Recipient may print one copy of such electronic documentation. Recipient may not copy the printed materials accompanying the Software. All rights not expressly granted are reserved by Microsoft.

7.  	DISCLAIMER OF WARRANTIES.  The Software is deemed accepted by Recipient. The Software constitutes pre-release code and may be changed substantially before commercial release. To the maximum extent permitted by applicable law, Microsoft and its suppliers provide the Software and any (if any) support services related to the Software ("Support Services") AS IS AND WITH ALL FAULTS, and hereby disclaim all warranties and conditions, either express, implied or statutory, including, but not limited to, any (if any) implied warranties or conditions of merchantability, of fitness for a particular purpose, of lack of viruses, of accuracy or completeness of responses, of results, and of lack of negligence or lack of workmanlike effort, all with regard to the Software, and the provision of or failure to provide Support Services.  ALSO, THERE IS NO WARRANTY OR CONDITION OF TITLE, QUIET ENJOYMENT, QUIET POSSESSION, CORRESPONDENCE TO DESCRIPTION OR NON-INFRINGEMENT, WITH REGARD TO THE SOFTWARE.  The entire risk as to the quality of or arising out of use or performance of the Software and documentation remains with Recipient. 

8.	EXCLUSION OF INCIDENTAL, CONSEQUENTIAL, AND CERTAIN OTHER DAMAGES.  To the maximum extent permitted by applicable law, in no event shall Microsoft or its suppliers be liable for any special,incidental, indirect, or consequential damages whatsoever (including, but not limited to, damages for loss of profits or confidential or other information, for business interruption, for personal injury, for loss of privacy, for failure to meet any duty including of good faith or of reasonable care, for negligence, and for any other pecuniary or other loss whatsoever) arising out of or in any way related to the use of or inability to use the Software, the provision of or failure to provide Support Services, or otherwise under or in connection with any provision of Agreement, even in the event of the fault, tort (including negligence), strict liability, breach of contract or breach of warranty of Microsoft or any supplier, and even if Microsoft or any supplier has been advised of the possibility of such damages.  Because some states/jurisdictions do not allow the exclusion or limitation of liability for consequential or incidental damages, the above limitation may not apply to Recipient.

9.	LIMITATION OF LIABILITY AND REMEDIES.  Notwithstanding any damages that Recipient might incur for any reason whatsoever (including, without limitation, all damages referenced above and all direct or general damages), the entire liability of Microsoft and any of its suppliers under any provision of this Agreement and Recipients exclusive remedy for all of the foregoing shall be limited to the greater of the amount actually paid by Recipient for the Software or Five Dollars (US$5.00).  The foregoing limitations, exclusions and disclaimers (including Section 7 and 8 above) shall apply to the maximum extent permitted by applicable law, even if any remedy fails its essential purpose. 

10.	GOVERNING LAW/JURISDICTION/ATTORNEYS FEES.  This Agreement shall be construed and controlled by the laws of the State of Washington, and Recipient consents to exclusive jurisdiction and venue in the federal courts sitting in King County, Washington, unless no federal jurisdiction exists, in which case Recipient consents to exclusive jurisdiction and venue in the Superior Court of King County, Washington.  Recipient waives all defenses of lack of personal jurisdiction and forum non conveniens.  Process may be served on either party in the manner authorized by applicable law or court rule.  If either party employs attorneys to enforce any rights arising out of or relating to this Agreement, the prevailing party shall be entitled to recover its reasonable attorneys' fees, costs and other expenses.

11.	U.S. GOVERNMENT RESTRICTED RIGHTS.  This Software is provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by the Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of The Rights in Technical Data and Computer Software clause of DFARS 252.227-7013 or subparagraphs (c)(i) and (2) of the Commercial Computer Software - Restricted Rights at 48 CFR 52.227-19, as applicable.  Manufacturer is Microsoft Corporation, One Microsoft Way, Redmond, WA  98052-6399.   

12.	EXPORT RESTRICTIONS. Recipient acknowledges that Software is of U.S.-origin.  Recipient agrees to comply with all applicable international and national laws that apply to these products, including the U.S. Export Administration Regulations, as well as end-user, end-use and country destination restrictions issued by U.S. and other governments. For additional information on exporting Microsoft products, see http://www.microsoft.com/exporting/.

Should you have any questions concerning this Agreement, or if you desire to contact Microsoft for anyreason, please write: Microsoft Corporation, Attn: DirectX Team, One Microsoft Way, Redmond, WA  98052.6399.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\cabpacks\win9x\swe\sedswe.txt ===
Det hr programmet r inte anpassat fr anvndning p Windows NT. Klicka p OK fr att avsluta.
"Installationsprogram med CAB-filer fr DirectX"
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\deliveryimages\localize\partial\locinfo.txt ===
brz,22,1,1252
chs,4,2,936
cht,4,1,950
cze,5,1,1250
dut,19,1,1252
frn,12,1,1252
ger,7,1,1252
itn,16,1,1252
jpn,17,1,932
kor,18,1,949
pol,21,1,1250
rus,25,1,1251
spa,10,1,1252
spm,10,2,1252
spx,10,3,1252
swe,29,1,1252
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dinput\readme.txt ===
The DirectInput headers are generated from the following location
%_NTDRIVE%%_NTROOT%\MultiMedia\Published\DirectX\Dinput

The Directory structure of this tree is as follows:

Dinput - 
	- DiConfig		Mapper UI
	- Diquick		Test application for Dinput functionality
	- Dx7
		- Dll		Dinput7A DLL code
	- Dx8
		- Dll		Dinput8 DLL code
		- DiMap		Device configuration ini parser
	* DxFF			Force Editing tool ( SDK team will be taking over)
	- IhvMap		Image and configuration files for selected devices
	- mmDrv			Win9x components
		- JoyHid	VjoyD mini driver to enable HID devices to talk to winMM
		- MsAnalog	Default driver for analog gameport devices
		- MsJstick	
		- VjoyD		Win9x joystick class driver
	- PID			USB/HID Force Feedback class driver
	- VxD			Dinput VxD
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dinput\dimapcfg\dimapcfg.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Using DIMapCfg to create DirectInput device map files Title _PID_HLINKSUsing DIMapCfg to create DirectInput device map files David Kline Normal.dot Shane Evans Microsoft Word 9.0^C(NL , #&')*) -0-(0%()( (((((((((((((((((((((((((((((((((((((((((((((((((( %&'()*456789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz &'()*56789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz >(xDy %rFG'  Oo:,EF vvq[jsG kj3Iy|  n/!r Upp:P CpCgx Wybibs ].9.5 WiUvd IeV(J YU]Q# =wNIo# xcT/4l Zd]Iw ?%gh[ E9nEn} 8`[*C 6w"Y& 6Cdc> 9;UFO` (<Ias .n|ie k;\$o bLy`mR~ KMF[ym e;ZFP_* go0Q" gPK7{ Moiwr :TW6Ww 1kjZ@ m{P+uk o/Zed 1 IP: ]RkyPI Peu#! HRYuDy u@.cS$L TYu8cl E_1 +# oa+Cp K31bY XYB+H HeVxU )$+*($''-2@7-0=0''8L9=CEHIH+6OUNFT@GHE !E.'.EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE %&'()*456789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz &'()*56789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz yl/%y +[y$b UU[hB %9T`Gs, l2@c` pZ&YeF 7+.FG dCt'f Ersiz ,bxl- rF;*(  (9%p 1ZtQ@ YuK%0 u]FFV gp~e&# ++[BU QH$6N ~tX.z  , #&')*) -0-(0%()( (((((((((((((((((((((((((((((((((((((((((((((((((( %&'()*456789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz &'()*56789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz 8U<r?: k?$Yy o^/_F i;wG< #Y5I# >fO3i?* .R[,} VW2I2: YF=$q =OTYm$  iGIMJ W&|co} GIUeH qu<q: _^MgP qpx.+x f;]@e jm>,m< ySH%h zUy|= kd1#s sejm& S]/O[w #~]UN 8;w1&Gl;2 V-hmYx X_X]4 )$+*($''-2@7-0=0''8L9=CEHIH+6OUNFT@GHE !E.'.EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE %&'()*456789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz &'()*56789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz yl/%y +[y$b UU[hB %9T`Gs, l2@c` pZ&YeF 7+.FG dCt'f Ersiz ,bxl- rF;*(  (9%p 1ZtQ@ YuK%0 u]FFV gp~e&# ++[BU QH$6N ~tX.z  , #&')*) -0-(0%()( (((((((((((((((((((((((((((((((((((((((((((((((((( %&'()*456789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz &'()*56789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz 9_FCa X'+:~ &fgbILJ _!7St zh{(e PIQc} e2m^Lqmf >'Aom '%b'8 7_DQG 'o#j9u* K}*Kkk{Y -$`,Q<"D- Kvu[; h~!h'Tt E|57S @o/`9aE 9,cbTI9 -hdK}` (cm&-h n=YFI#= #9fga &@&R@ "Im"; 7sy>o "DcVm "*2+CI Cugo/ an")n nlRH<G b+-WR n|Wco k3E,glxea TBcKy  , #&')*) -0-(0%()( (((((((((((((((((((((((((((((((((((((((((((((((((( %&'()*456789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz &'()*56789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz 8U<r?: k?$Yy o^/_F i;wG< #Y5I# >fO3i?* .R[,} VW2I2: YF=$q =OTYm$  iGIMJ W&|co} GIUeH qu<q: _^MgP qpx.+x f;]@e jm>,m< ySH%h zUy|= kd1#s sejm& S]/O[w #~]UN 8;w1&Gl;2 V-hmYx X_X]4  , #&')*) -0-(0%()( (((((((((((((((((((((((((((((((((((((((((((((((((( %&'()*456789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz &'()*56789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz ]nmsO m48|a _Mp|[a5 <Eg}am} u;mSR m|Gqp }7KXc lCi;uN xrHu[{m*+ wsjx.Z j:yv1 b`mog oo5U" SZ[Oyu m<XEj ))b6d ffb@UU 9J+CR .-"iH. +[Kksg) [muz, tF/$q |(|M3R O}!.,$ ZKy}"I"A Z[Kw4 9x~vT&@ L6rHt .r4WUs rW3]7 .IKhu -3YKO yw/ gp*5_ zi_A7b "y u5V uY%32 rW3]7 S]^M, {q[AY\ mu[o"e xjMAm 3Bw[]F moL6lG z"M<oh <2G,L2 1bw37% .I',}MV ?7QF2 MB[hA S_A|? rW3]7 7\W)]_ j=R+& lI{zGV nf?:$ :K7B~ ?:Mo< lv?h* W`?.) kFBiW []r;V QRPWW 7Whe, !(Jo` b8=3D  POV= $SLgWoq yEe9B Igul@&5P ^[kzD zc\Owm UXacE 1PHS" $r.@ 2: TP#W998 ,4=]t 6.c`c`\ Y6RWg 5[=KO 8 pF+W #20d%YNA h%dpA Xt8e  +]]Ck rR69^DN m_O[;yfp -kNi4KPc 6$eb$ /<;{w cm+<j $V ne Gdut8e9 Cf9ch ]j($h G=s4` gMyq{q 2'[X~ G=s4` G=s4` \HQ,#] JUei4 rUaeF.^X ^\C,2A$R[ k+qsex ]Y'8IbjbjU The DIMapCfg Tool  TOC \o "1-3" \h \z   HYPERLINK \l "_Toc483761200"  The DIMapCfg Tool  PAGEREF _Toc483761200 \h   HYPERLINK \l "_Toc483761201"  About DIMapCfg  PAGEREF _Toc483761201 \h   HYPERLINK \l "_Toc483761202"  User Interface tour  PAGEREF _Toc483761202 \h   HYPERLINK \l "_Toc483761203"  Main application window  PAGEREF _Toc483761203 \h   HYPERLINK \l "_Toc483761204"  Layout Mode  PAGEREF _Toc483761204 \h   HYPERLINK \l "_Toc483761205"  Importing Image Files  PAGEREF _Toc483761205 \h   HYPERLINK \l "_Toc483761206"  Creating and Modifying Callouts  PAGEREF _Toc483761206 \h   HYPERLINK \l "_Toc483761207"  Modifying Callouts  PAGEREF _Toc483761207 \h   HYPERLINK \l "_Toc483761208"  Assigning Actions  PAGEREF _Toc483761208 \h   HYPERLINK \l "_Toc483761209"  Saving  PAGEREF _Toc483761209 \h   HYPERLINK \l "_Toc483761210"  Testing device mappings  PAGEREF _Toc483761210 \h   HYPERLINK \l "_Toc483761211"  Known issues  PAGEREF _Toc483761211 \h  About DIMapCfg The DirectInput Mapper Configuration tool (DIMapCfg) is an tool designed to simplify the process of generating custom device mappings.  DIMapCfg provides a graphical interface for placing callout lines and text, and for choosing default mappings for the genres supported in DirectX 8.0. Note: This tool is a work in progress. Please refer to the   HYPERLINK  \l "_Known_issues"  Known Issues  section for more information. User Interface tour The DIMapCfg user interface consists of two windows: the main application window and the configuration dialog. Main application window The main DIMapCfg window provides controls for enumerating and configuring devices.  The window is divided into two sections:  Genre and device selection Edit Graphic (also for assigning mappings) The main DIMapCfg window Use the  Genre group  list to specify the type of genre (arcade, sports, flight, etc) you are interested in configuring, then select the desired genre from the Genre list. When the tool starts, it automatically enumerates installed devices and fills the Devices dropdown list to contain all of the joystick/gaming devices connected to your system, sorted alphabetically. To import the images (views Graphic), callouts, and overlays for a device, select it in the Devices list, then click the Edit button. Clicking this button invokes the graphic and configuration window, where you can import device images and overlays, as well as create callout lines and text boxes. All actions are performed through a context-sensitive popup menu that is displayed when you right click within the layout section of the interface.  Clicking in the area bounded by the red dashed line opens the popup menu used to import/remove images for the device and to create/remove callouts, as shown below.  Clicking in the area bounded by the white dashed line for a callout opens the popup menu used to manipulate the callout, as shown here. Both of these menus are described in more detail later in this document. Layout Mode Click the Edit Graphic button to invoke DirectInput Mapper Default UI in Layout Mode. Layout mode is a special mode of the default UI in which you import images, create callouts and attach overlays, as well as provide default mapping for your device. Note the Layout button that appears at the botomm of the UI when in Layout Mode. Clicking this button toggles the red dashed line that marks the image area, and the white dashed lines around each callout rectangle. Importing Image Files Click the Edit Graphic button on the main application window to open the UI in Layout Mode. The first task you need to perform is to import a device image file for your device. All graphic and callout editing in the DirectInput Mapper is initiated via the right mouse button.   A right-click within the red outline displays the following menu: Choose the Select Image(s) menu item to invoke a standard Open File common dialog, then navigate to the desired image and click the Open button to import it. Note the following restrictions for image files: Dimensions: 384x320 Format: BMP supported in tool, BMP and PNG to be supported in DirectX 8. Attributes: 24-bit color, alpha channel. Image should show device over transparent background with antialiased edges. Creating and Modifying Callouts Follow these steps to create a callout: Click within the red dashed line that denotes the image area of the UI to bring up the main context menu (pictured in the preceding section).  Choose the New Callout menu item to begin creating a callout. As soon as you choose the New Callout item, the UI changes input modes (silently).  Left click within the image area to set the top left corner of the text rectangle in which games will display an action name. Drag the rectangle to the desired size and left click again to enter Alignment Mode. Alignment Mode sets the recommended text alignment within the text rectangle. In this mode, an alignment box follows the cursor. You can set center, left, right, top, bottom, or any combination of top/bottom left/right. When the alignment box is properly placed, Left Click to enter Line Mode. While in Line Mode, each Left Click generates a point for a series of segments in a line. Lines can be drawn with up to four segments (5 points). Lines are drawn originating from the text box, so make sure you create the first point in the line near the text rectangle. Exit line mode by right clicking anywhere within the image area. Line mode completes automatically when five points have been created. After the line is drawn, the device object assignment dialog appears, as shown below. Select the device object to which the callout corresponds and click OK.  When the device object is selected, an Open File dialog appears for overlay image selection. Select the desired overlay image, and click Open. If you do not wish to include an overlay for this control, click Cancel. Modifying Callouts Right clicking within the white dashed rectangle for a callout displayed the context menu for modifying that callout.  Use this menu to change the attributes of any existing callout. Choosing any of these options takes you back to corresponding step from Creating Callouts, though subsequent steps are not automatically invoked. Assigning Actions Click the Layout button at the bottom of the UI to hide the layout lines. Assigning actions is simple. Select a device control by clicking on the callout rectangle for a control, then selecting an action from the action list at the right side of the UI. In this mode, you are setting the defaults users will receive when playing a game of this genre. Choose defaults to be intuitive for each device, for each genre. Saving To save callout data, and any action mappings for the currently selected genre, right click within the image area (but outside the boundary for any callouts) to bring up the main context menu. Choose the Save/Export item to save the settings into an ini file for your device and create a registry entry which DirectInput uses to access the ini and image files. (The registry entry can be changed later within regedit, if the files are not located in the desired directory at the time the content is authored.) Note: Clicking OK within the UI does not save your settings. The button serves no purpose within the context of this tool. Testing device mappings The Developer Preview release of DIMapCfg uses the DirectInput Mapper user interface to test (view) the current mappings for your device.   By using the mapper interface to display the current settings for your device, DIMapCfg provides the opportunity to see what your customers are going to see when using your device in a DirectX 8 title. To test your device using the mapper user interface: Launch DIMapCfg (if not currently running) Select the desired genre via the  Genre group  and  Genre  lists Click the View Mappings button Examine the image, callout positions, etc Click   to close the mapper interface This test option allows you to view your device s image, callouts and mappings for the currently selected genre.  This is the same view of the device that your customers will have when using a DirectInput Mapper enabled application. DirectInput Mapper user interface Known issues Below is a list of the known issues with the developer preview release of the DirectInput Mapper Configuration tool. Once you have saved a mapping ini file on your machine, there is no way to specify a different filename for that device unless you clear the OEMMapFile registry entry in the type key Launching the application takes quite a bit of time due the the fact that no performance optimizations have been implemented for loading genre.ini Regardless of whether or not you changed / saved changes in the configure mappings dialog, you will be prompted to save on close. You are prompted to save once per tab that you visit when closing the configure mappings dialog The tool does not yet support importing multiple device views. This will be supported in a subsequent build. Please report any issues you encounter with this tool to directx@microsoft.com.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dinput\dimapcfg\readme.txt ===
DDK tool to enable IHVs to generate device configuration ini files.
This tool uses the genre.ini file generated in the directory ..\inc\genre.ini
The tool uses the configure mode of the dimapcfg UI
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dinput\dx7\dll\dinput.txt ===
DirectInput 5.0 Beta 2 release notes

What's new in DirectInput for this release
==========================================
-New game controller control panel.  This new control panel replaces joy.cpl.
It allows hardware manufacturers to create property sheets for testing and
calibrating their devices.  The default property sheet allows calibration
and testing for a devices with up to 6 axes, 1 POV control, and up to 32 buttons.

-DirectInput now supports joysticks and other gaming devices using the same IDirectInput 
and IDirectInputDevice interfaces.  Take a look at the DirectInput documentation as well 
as the Space Donuts sample to see samples of using DirectInput to read joystick data.

-Force feedback support.  Support for force feedback controllers is new for DX 5.  
In order to support force feedback, a new interface called IDirectEffect was created 
as well as IDirectInputDevice2.  IDirectInputDevice2 contains the functionality of 
IDirectInputDevice as well as changes needed specifically to support force feedback devices.

-Driver support for force feedback devices.  DirectInput supports force feedback devices 
with either user or kernel mode drivers.

-VJOYD enhancements and bug fixes.
The analog polling part of VJOYD has now been placed in a new mini-driver called 
msanalog.vxd.  Therefore, VJOYD no longer requires any I/O resources.

Mini-drivers using configuration manager resources are now informed of its resources 
through a CM_START message when selected as the current driver in control panel.  
Restart no longer required.

msanalog can do standard analog polling at addresses other than the standard range 
of 200h to 20Fh.  Also, if two port ranges are given, the second one is no longer 
required to be a one byte length.

A reboot is no longer required if the first four joystick IDs were previously assigned 
to devices using mini-drivers but were changed to be assigned to analog devices.

VJOYD will no longer continue polling a mini-driver on a particular joystick id 
after the mini-driver has failed the JoyId callback for that id.

VJOYD will only call the mini-driver configuration manager callbacks for one driver 
for a particular set of resources so the resources a mini-driver is given can be assumed 
to private.

-Improved documentation.  The documentation contains all of the DirectInput API, 
method, and structure information as well as examples of using DirectInput to communicate 
with keyboards, mice and gaming devices.  Please report any problems with the documentation 
as bugs against DirectInput.  

Force Feedback
==============
As mentioned above, this release is the first containing support for force feedback 
devices.  We have created a new interface called IDirectInputEffect that represents a 
force feedback effect.  We have also created a new interface called IDirectInputDevice2.  
This interface contains all of the methods and functionality of IDirectInputDevice, as well 
as new methods and functionality added to support force feedback devices.


INITGUID vs. DXGUID.LIB
=======================
You can generate the DirectInput GUIDs yourself by defining INITGUID.  However, 
if you want to avoid generating all of the DirectInput GUIDs (including the ones you 
don't use), link to DXGUID.LIB instead of defining INITGUID.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dinput\dx8\dll\dinput.txt ===
DirectInput 5.0 Beta 2 release notes

What's new in DirectInput for this release
==========================================
-New game controller control panel.  This new control panel replaces joy.cpl.
It allows hardware manufacturers to create property sheets for testing and
calibrating their devices.  The default property sheet allows calibration
and testing for a devices with up to 6 axes, 1 POV control, and up to 32 buttons.

-DirectInput now supports joysticks and other gaming devices using the same IDirectInput 
and IDirectInputDevice interfaces.  Take a look at the DirectInput documentation as well 
as the Space Donuts sample to see samples of using DirectInput to read joystick data.

-Force feedback support.  Support for force feedback controllers is new for DX 5.  
In order to support force feedback, a new interface called IDirectEffect was created 
as well as IDirectInputDevice2.  IDirectInputDevice2 contains the functionality of 
IDirectInputDevice as well as changes needed specifically to support force feedback devices.

-Driver support for force feedback devices.  DirectInput supports force feedback devices 
with either user or kernel mode drivers.

-VJOYD enhancements and bug fixes.
The analog polling part of VJOYD has now been placed in a new mini-driver called 
msanalog.vxd.  Therefore, VJOYD no longer requires any I/O resources.

Mini-drivers using configuration manager resources are now informed of its resources 
through a CM_START message when selected as the current driver in control panel.  
Restart no longer required.

msanalog can do standard analog polling at addresses other than the standard range 
of 200h to 20Fh.  Also, if two port ranges are given, the second one is no longer 
required to be a one byte length.

A reboot is no longer required if the first four joystick IDs were previously assigned 
to devices using mini-drivers but were changed to be assigned to analog devices.

VJOYD will no longer continue polling a mini-driver on a particular joystick id 
after the mini-driver has failed the JoyId callback for that id.

VJOYD will only call the mini-driver configuration manager callbacks for one driver 
for a particular set of resources so the resources a mini-driver is given can be assumed 
to private.

-Improved documentation.  The documentation contains all of the DirectInput API, 
method, and structure information as well as examples of using DirectInput to communicate 
with keyboards, mice and gaming devices.  Please report any problems with the documentation 
as bugs against DirectInput.  

Force Feedback
==============
As mentioned above, this release is the first containing support for force feedback 
devices.  We have created a new interface called IDirectInputEffect that represents a 
force feedback effect.  We have also created a new interface called IDirectInputDevice2.  
This interface contains all of the methods and functionality of IDirectInputDevice, as well 
as new methods and functionality added to support force feedback devices.


INITGUID vs. DXGUID.LIB
=======================
You can generate the DirectInput GUIDs yourself by defining INITGUID.  However, 
if you want to avoid generating all of the DirectInput GUIDs (including the ones you 
don't use), link to DXGUID.LIB instead of defining INITGUID.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dinput\ihvmap\act_rs.ini ===
[DirectInput]
DirectXVersion=0x800
Devices=ACT LABS RS
[ACT LABS RS]
Name=ACT LABS RS
Controls=X Axis,Y Axis,PointofViewHat,Button 0,Button 1,Button 2,Button 3,Button 4,Button 5,Button 6,Button 7,Button 8
ImageFileName.0=ACT_RS.PNG
[X Axis]
Type=0x2
Name=X-axis
Linedata.0=(212,18),(129,11),(33,11)
Align.0=L
CalloutMax.0=(0,0),(111,20)
[Y Axis]
Type=0x102
Name=Y-axis
Linedata.0=(304,173),(377,266),(377,295)
Align.0=C
CalloutMax.0=(327,286),(429,309)
[PointofViewHat]
Type=0x10
Name=POV 0
Linedata.0=(217,95),(309,156),(350,156)
Align.0=L
CalloutMax.0=(323,145),(430,168)
[Button 0]
Type=0x4
Name=Button 0
Linedata.0=(180,108),(122,164),(29,161)
Align.0=L
CalloutMax.0=(0,152),(111,175)
[Button 1]
Type=0x104
Name=Button 1
Linedata.0=(236,87),(284,114),(334,114)
Align.0=L
CalloutMax.0=(323,103),(430,126)
[Button 2]
Type=0x204
Name=Button 2
Linedata.0=(180,77),(117,85),(22,85)
Align.0=L
CalloutMax.0=(0,74),(109,96)
[Button 3]
Type=0x304
Name=Button 3
Linedata.0=(234,59),(304,41),(345,41)
Align.0=L
CalloutMax.0=(319,30),(430,51)
[Button 4]
Type=0x404
Name=Button 4
Linedata.0=(177,69),(119,54),(54,54)
Align.0=L
CalloutMax.0=(0,43),(110,65)
[Button 5]
Type=0x504
Name=Button 5
Linedata.0=(184,85),(120,118),(8,118)
Align.0=L
CalloutMax.0=(0,106),(110,130)
[Button 6]
Type=0x604
Name=Button 6
Linedata.0=(231,69),(350,69)
Align.0=L
CalloutMax.0=(320,59),(430,82)
[Button 7]
Type=0x704
Name=Button 7
Linedata.0=(241,49),(301,11),(327,11)
Align.0=L
CalloutMax.0=(317,0),(430,22)
[Button 8]
Type=0x804
Name=Button 8
Linedata.0=(222,142),(121,210),(40,210)
Align.0=L
CalloutMax.0=(0,198),(111,221)
[ACT LABS RS.Genre.2]
X Axis=1
Y Axis=2
PointofViewHat=1
Button 0=5
Button 1=4
Button 2=2
Button 3=3
Button 4=8
Button 5=6
Button 6=254
Button 7=1
Button 8=253
[ACT LABS RS.Genre.3]
Button 0=5
Button 1=4
Button 2=2
Button 3=1
Button 4=6
Button 6=254
Button 7=3
Button 8=253
X Axis=1
Y Axis=3
PointofViewHat=1
[ACT LABS RS.Genre.1]
X Axis=1
PointofViewHat=1
Button 0=2
Button 1=1
Button 2=3
Button 3=5
Button 4=4
Button 5=8
Button 6=9
Button 7=7
Button 8=253
Y Axis=2
[ACT LABS RS.Genre.41]
X Axis=1
Y Axis=4
PointofViewHat=1
Button 0=4
Button 1=6
Button 2=2
Button 3=1
Button 4=5
Button 5=7
Button 6=8
Button 7=3
Button 8=253
[ACT LABS RS.Genre.33]
X Axis=1
Y Axis=2
PointofViewHat=1
Button 0=1
Button 1=2
Button 2=3
Button 3=4
Button 4=5
Button 7=253
Button 8=254
[ACT LABS RS.Genre.34]
X Axis=1
Y Axis=2
PointofViewHat=1
Button 0=1
Button 1=2
Button 2=3
Button 3=4
Button 4=5
Button 7=253
Button 8=254
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dinput\ihvmap\glmdgp_g.ini ===
;gameport file
[DirectInput]
DirectXVersion=0x800
Devices=Guillemot Digital GamePad
[Guillemot Digital GamePad]
VID=1784
PID=41729
Name=Guillemot Digital GamePad
Controls=BUTTON 0,BUTTON 1,BUTTON 2,BUTTON 3,BUTTON 4,BUTTON 5,BUTTON 6,BUTTON 7,BUTTON 8,BUTTON 9,BUTTON 10,BUTTON 11,BUTTON 12,Y AXIS,X AXIS
ImageFileName.0=GlmDigGP.PNG
ImageFormat.0=BMP
[Button 0]
UsagePage=0x9
Usage=0x1
Linedata.0=(423,209),(294,209),(245,186)
Align.0=L
CalloutMax.0=(299,186),(426,210)
Type=0x4
Name=BUTTON 0
[Button 1]
UsagePage=0x9
Usage=0x2
Linedata.0=(422,259),(293,259),(250,195)
Align.0=L
CalloutMax.0=(298,237),(424,259)
Type=0x104
Name=BUTTON 1
[Button 2]
UsagePage=0x9
Usage=0x3
Linedata.0=(421,181),(290,181),(195,177),(191,186),(190,186)
Align.0=L
CalloutMax.0=(299,158),(423,182)
Type=0x204
Name=BUTTON 2
[Button 3]
UsagePage=0x9
Usage=0x4
Linedata.0=(423,233),(295,233),(184,195)
Align.0=L
CalloutMax.0=(299,211),(424,233)
Type=0x304
Name=BUTTON 3
[Button 4]
UsagePage=0x9
Usage=0x5
Linedata.0=(281,25),(157,26),(157,64),(181,79)
Align.0=L
CalloutMax.0=(160,5),(283,27)
Type=0x404
Name=BUTTON 4
[Button 5]
UsagePage=0x9
Usage=0x6
Linedata.0=(343,50),(213,50),(182,64)
Align.0=L
CalloutMax.0=(219,29),(343,51)
Type=0x504
Name=BUTTON 5
[Button 6]
UsagePage=0x9
Usage=0x7
Linedata.0=(399,74),(271,74),(201,62)
Align.0=L
CalloutMax.0=(275,52),(401,75)
Type=0x604
Name=BUTTON 6
[Button 7]
UsagePage=0x9
Usage=0x8
Linedata.0=(422,101),(298,101),(201,78)
Align.0=L
CalloutMax.0=(301,79),(428,102)
Type=0x704
Name=BUTTON 7
[Button 8]
UsagePage=0x9
Usage=0x9
Linedata.0=(423,153),(300,153),(181,98)
Align.0=L
CalloutMax.0=(301,131),(429,153)
Type=0x804
Name=BUTTON 8
[Button 9]
UsagePage=0x9
Usage=0xA
Linedata.0=(422,126),(301,126),(201,95)
Align.0=C
CalloutMax.0=(304,107),(430,127)
Type=0x904
Name=BUTTON 9
[Button 10]
UsagePage=0x9
Usage=0xB
Linedata.0=(360,305),(257,305),(233,223)
Align.0=C
CalloutMax.0=(261,284),(361,304)
Type=0xA04
Name=BUTTON 10
[Button 11]
UsagePage=0x9
Usage=0xC
Linedata.0=(53,302),(185,302),(202,224)
Align.0=C
CalloutMax.0=(53,283),(180,303)
Type=0xB04
Name=BUTTON 11
[Button 12]
UsagePage=0x9
Usage=0xD
Linedata.0=(291,172),(193,172),(181,128)
Align.0=C
CalloutMax.0=(193,152),(293,172)
Type=0xC04
Name=BUTTON 12
[Y Axis]
UsagePage=0x1
Usage=0x31
Linedata.0=(26,60),(105,60),(105,131)
Align.0=L
CalloutMax.0=(26,38),(152,60)
Type=0x102
Name=Y AXIS
[X Axis]
UsagePage=0x1
Usage=0x30
Linedata.0=(105,35),(6,35),(6,142),(99,142),(102,142)
Align.0=L
CalloutMax.0=(7,11),(133,36)
Type=0x2
Name=X AXIS
[Guillemot Digital GamePad.Genre.34]
Button 2=1
Button 3=3
Button 9=2
Y Axis=2
X Axis=1
Button 0=4
Button 1=5
Button 5=254
Button 12=253
[Guillemot Digital GamePad.Genre.33]
Button 0=2
Button 1=5
Button 2=1
Button 3=4
Button 5=254
Button 9=3
Button 12=253
Y Axis=2
X Axis=1
[Guillemot Digital GamePad.Genre.24]
Button 0=2
Button 1=5
Button 2=6
Button 3=9
Button 4=8
Button 5=254
Button 6=7
Button 9=1
Button 10=4
Button 11=3
Button 12=253
Y Axis=2
X Axis=1
[Guillemot Digital GamePad.Genre.26]
Button 0=3
Button 1=7
Button 2=1
Button 3=5
Button 5=254
Button 6=6
Button 8=4
Button 9=2
Button 10=8
Button 11=9
Button 12=253
Y Axis=2
X Axis=1
[Guillemot Digital GamePad.Genre.27]
Button 0=4
Button 1=2
Button 2=1
Button 3=6
Button 5=254
Button 7=5
Button 9=3
Button 10=7
Button 11=8
Button 12=253
Y Axis=2
X Axis=1
[Guillemot Digital GamePad.Genre.25]
Button 0=4
Button 1=3
Button 2=2
Button 3=5
Button 5=254
Button 7=7
Button 8=6
Button 9=1
Button 10=8
Button 11=9
Button 12=253
Y Axis=2
X Axis=1
[Guillemot Digital GamePad.Genre.28]
Button 0=4
Button 1=6
Button 2=1
Button 3=2
Button 5=254
Button 8=5
Button 9=3
Button 12=253
Y Axis=2
X Axis=1
[Guillemot Digital GamePad.Genre.32]
Button 0=3
Button 1=5
Button 2=1
Button 4=6
Button 5=254
Button 8=2
Button 9=4
Button 11=7
Button 12=253
Y Axis=2
X Axis=1
[Guillemot Digital GamePad.Genre.31]
Button 0=2
Button 1=3
Button 2=7
Button 3=1
Button 4=12
Button 5=254
Button 6=8
Button 7=10
Button 8=9
Button 9=5
Button 10=6
Button 11=4
Button 12=253
Y Axis=2
X Axis=1
[Guillemot Digital GamePad.Genre.30]
Button 0=1
Button 1=6
Button 2=2
Button 3=10
Button 4=7
Button 5=254
Button 6=12
Button 7=11
Button 8=3
Button 9=5
Button 10=13
Button 11=4
Button 12=253
Y Axis=2
X Axis=1
[Guillemot Digital GamePad.Genre.29]
Button 0=6
Button 1=3
Button 2=4
Button 4=7
Button 5=254
Button 8=5
Button 9=1
Button 10=2
Button 12=253
Y Axis=2
X Axis=1
[Guillemot Digital GamePad.Genre.9]
Button 0=4
Button 1=2
Button 2=3
Button 3=8
Button 5=254
Button 7=7
Button 9=1
Button 10=5
Button 11=6
Button 12=253
Y Axis=2
X Axis=1
[Guillemot Digital GamePad.Genre.7]
Button 0=4
Button 1=5
Button 2=7
Button 3=6
Button 4=8
Button 5=254
Button 9=1
Button 10=3
Button 11=2
Button 12=253
Y Axis=4
X Axis=1
[Guillemot Digital GamePad.Genre.41]
Button 0=6
Button 1=3
Button 2=2
Button 3=4
Button 5=254
Button 6=8
Button 9=1
Button 10=7
Button 11=5
Button 12=253
Y Axis=2
X Axis=1
[Guillemot Digital GamePad.Genre.1]
Button 0=3
Button 1=9
Button 2=7
Button 3=6
Button 4=1
Button 5=254
Button 7=2
Button 9=4
Button 10=5
Button 11=8
Button 12=253
Y Axis=2
X Axis=1
[Guillemot Digital GamePad.Genre.3]
Button 0=4
Button 2=5
Button 5=254
Button 8=6
Button 9=1
Button 10=3
Button 11=2
Button 12=253
Y Axis=2
X Axis=1
[]
ImageFileName.0=DIGITAL GAMEPAD.PNG
[Guillemot Digital GamePad.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.8]
MapExists=1
[Guillemot Digital GamePad.Genre.8]
MapExists=1
Y AXIS=0x2
BUTTON 1=0x1
BUTTON 0=0x2
BUTTON 2=0x3
BUTTON 10=0x4
BUTTON 11=0x5
BUTTON 9=0x6
BUTTON 8=0x7
BUTTON 12=0xFD
BUTTON 7=0x8
BUTTON 6=0x9
X AXIS=0x3
BUTTON 3=0xA
BUTTON 5=0xFE
[Guillemot Digital GamePad.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.10]
MapExists=1
[Guillemot Digital GamePad.Genre.10]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 7=0x1
BUTTON 9=0x2
BUTTON 3=0x3
BUTTON 2=0x4
BUTTON 8=0x5
BUTTON 12=0xFD
BUTTON 6=0x6
BUTTON 10=0x7
BUTTON 11=0x8
BUTTON 0=0x9
BUTTON 1=0xA
BUTTON 5=0xFE
[Guillemot Digital GamePad.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.11]
MapExists=1
[Guillemot Digital GamePad.Genre.11]
MapExists=1
Y AXIS=0x2
BUTTON 2=0x1
BUTTON 0=0x2
BUTTON 1=0x3
BUTTON 9=0x4
BUTTON 3=0x5
BUTTON 10=0x6
BUTTON 11=0x7
BUTTON 12=0xFD
BUTTON 4=0x8
BUTTON 7=0x9
X AXIS=0x3
BUTTON 5=0xFE
[Guillemot Digital GamePad.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.12]
MapExists=1
[Guillemot Digital GamePad.Genre.12]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 8=0x2
BUTTON 9=0x3
BUTTON 11=0x4
BUTTON 7=0x5
BUTTON 12=0xFD
BUTTON 4=0x6
BUTTON 1=0x7
BUTTON 3=0x8
BUTTON 2=0xFE
[Guillemot Digital GamePad.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.13]
MapExists=1
[Guillemot Digital GamePad.Genre.13]
MapExists=1
Y AXIS=0x2
BUTTON 9=0x1
BUTTON 0=0x2
BUTTON 2=0x3
BUTTON 8=0x4
BUTTON 1=0x5
BUTTON 4=0x6
BUTTON 3=0x7
BUTTON 12=0xFD
BUTTON 7=0x8
X AXIS=0x3
BUTTON 10=0x9
BUTTON 11=0xA
BUTTON 5=0xFE
[Guillemot Digital GamePad.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.14]
MapExists=1
[Guillemot Digital GamePad.Genre.14]
MapExists=1
Y AXIS=0x2
BUTTON 9=0x1
BUTTON 0=0x2
BUTTON 8=0x3
BUTTON 1=0x4
BUTTON 2=0x5
BUTTON 12=0xFD
BUTTON 3=0x6
X AXIS=0x3
BUTTON 10=0x7
BUTTON 11=0x8
BUTTON 5=0xFE
[Guillemot Digital GamePad.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.15]
MapExists=1
[Guillemot Digital GamePad.Genre.15]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 11=0x1
BUTTON 0=0x2
BUTTON 10=0x3
BUTTON 2=0x4
BUTTON 9=0x5
BUTTON 8=0x6
BUTTON 7=0x7
BUTTON 1=0x8
BUTTON 12=0xFD
BUTTON 3=0x9
BUTTON 4=0xA
BUTTON 5=0xFE
[Guillemot Digital GamePad.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.16]
MapExists=1
[Guillemot Digital GamePad.Genre.16]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 2=0x1
BUTTON 1=0x2
BUTTON 0=0x3
BUTTON 9=0x4
BUTTON 3=0x5
BUTTON 12=0xFD
BUTTON 11=0x6
BUTTON 7=0x7
BUTTON 5=0xFE
[Guillemot Digital GamePad.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.17]
MapExists=1
[Guillemot Digital GamePad.Genre.17]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 1=0x1
BUTTON 3=0x2
BUTTON 2=0x3
BUTTON 8=0x4
BUTTON 0=0x5
BUTTON 9=0x6
BUTTON 12=0xFD
BUTTON 11=0x7
BUTTON 10=0x8
BUTTON 5=0xFE
[Guillemot Digital GamePad.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.18]
MapExists=1
[Guillemot Digital GamePad.Genre.18]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 8=0x1
BUTTON 3=0x2
BUTTON 9=0x3
BUTTON 2=0x4
BUTTON 1=0x5
BUTTON 10=0x6
BUTTON 0=0x7
BUTTON 11=0x8
BUTTON 12=0xFD
BUTTON 4=0x9
BUTTON 7=0xA
BUTTON 6=0xC
BUTTON 5=0xFE
[Guillemot Digital GamePad.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.19]
MapExists=1
[Guillemot Digital GamePad.Genre.19]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 9=0x4
BUTTON 10=0x5
BUTTON 1=0x6
BUTTON 11=0x7
BUTTON 12=0xFD
BUTTON 4=0x8
BUTTON 6=0x9
BUTTON 5=0xFE
[Guillemot Digital GamePad.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.20]
MapExists=1
[Guillemot Digital GamePad.Genre.20]
MapExists=1
BUTTON 0=0x1
BUTTON 9=0x2
BUTTON 8=0x3
BUTTON 12=0xFD
BUTTON 5=0xFE
[Guillemot Digital GamePad.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.21]
MapExists=1
[Guillemot Digital GamePad.Genre.21]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 7=0x1
BUTTON 2=0x2
BUTTON 1=0x3
BUTTON 0=0x4
BUTTON 9=0x5
BUTTON 11=0x6
BUTTON 12=0xFD
BUTTON 10=0x7
BUTTON 3=0x8
BUTTON 8=0x9
BUTTON 5=0xFE
[Guillemot Digital GamePad.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.22]
MapExists=1
[Guillemot Digital GamePad.Genre.22]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 8=0x1
BUTTON 10=0x2
BUTTON 11=0x3
BUTTON 9=0x4
BUTTON 2=0x5
BUTTON 12=0xFD
BUTTON 1=0x6
BUTTON 6=0x7
BUTTON 7=0x8
BUTTON 3=0x9
BUTTON 4=0xA
BUTTON 0=0xB
BUTTON 5=0xFE
[Guillemot Digital GamePad.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.23]
MapExists=1
[Guillemot Digital GamePad.Genre.23]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 11=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 9=0x4
BUTTON 3=0x5
BUTTON 0=0x6
BUTTON 12=0xFD
BUTTON 8=0x7
BUTTON 10=0x9
BUTTON 7=0xA
BUTTON 6=0xB
BUTTON 4=0xD
BUTTON 5=0xFE
[Guillemot Digital GamePad.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.2]
MapExists=1
[Guillemot Digital GamePad.Genre.2]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 2=0x1
BUTTON 11=0x2
BUTTON 10=0x3
BUTTON 12=0xFD
BUTTON 4=0x4
BUTTON 7=0x5
BUTTON 1=0x6
BUTTON 0=0x7
BUTTON 9=0x8
BUTTON 5=0xFE
[Guillemot Digital GamePad.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.4]
MapExists=1
[Guillemot Digital GamePad.Genre.4]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 2=0x1
BUTTON 9=0x2
BUTTON 0=0x3
BUTTON 12=0xFD
BUTTON 11=0x4
BUTTON 10=0x5
BUTTON 5=0xFE
[Guillemot Digital GamePad.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.5]
MapExists=1
[Guillemot Digital GamePad.Genre.5]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 9=0x1
BUTTON 11=0x2
BUTTON 10=0x3
BUTTON 12=0xFD
BUTTON 4=0x4
BUTTON 1=0x5
BUTTON 8=0x6
BUTTON 2=0x7
BUTTON 3=0x8
BUTTON 0=0x9
BUTTON 5=0xFE
[Guillemot Digital GamePad.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.6]
MapExists=1
[Guillemot Digital GamePad.Genre.6]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 9=0x1
BUTTON 11=0x2
BUTTON 10=0x3
BUTTON 12=0xFD
BUTTON 8=0x4
BUTTON 2=0x5
BUTTON 7=0x6
BUTTON 0=0x7
BUTTON 5=0xFE
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dinput\ihvmap\glmda_g.ini ===
[DirectInput]
DirectXVersion=0x800
Devices=USB Human Interface Device
[USB Human Interface Device]
VID=1784
PID=41728
Name=GUILLEMOT DUAL ANALOG GAMEPAD
Controls=BUTTON 0,BUTTON 1,BUTTON 2,BUTTON 3,BUTTON 4,BUTTON 5,BUTTON 6,BUTTON 7,BUTTON 8,BUTTON 9,BUTTON 10,BUTTON 11,BUTTON 12,HAT SWITCH,Y AXIS,X AXIS,SLIDER,Z ROTATION
ImageFileName.0=GLMDA.PNG
ImageFormat.0=BMP
[Button 0]
UsagePage=0x9
Usage=0x1
Linedata.0=(423,198),(301,198),(244,186)
Align.0=C
CalloutMax.0=(306,176),(425,198)
Type=0x4
Name=BUTTON 0
[Button 1]
UsagePage=0x9
Usage=0x2
Linedata.0=(422,226),(302,226),(250,196)
Align.0=C
CalloutMax.0=(305,204),(424,227)
Type=0x104
Name=BUTTON 1
[Button 2]
UsagePage=0x9
Usage=0x3
Linedata.0=(423,169),(301,169),(189,186)
Align.0=C
CalloutMax.0=(305,146),(425,168)
Type=0x204
Name=BUTTON 2
[Button 3]
UsagePage=0x9
Usage=0x4
Linedata.0=(421,257),(301,257),(183,196)
Align.0=C
CalloutMax.0=(304,234),(424,257)
Type=0x304
Name=BUTTON 3
[Button 4]
UsagePage=0x9
Usage=0x5
Linedata.0=(421,128),(299,128),(180,80)
Align.0=C
CalloutMax.0=(302,105),(423,128)
Type=0x404
Name=BUTTON 4
[Button 5]
UsagePage=0x9
Usage=0x6
Linedata.0=(421,69),(296,69),(250,76),(182,66)
Align.0=C
CalloutMax.0=(302,46),(423,69)
Type=0x504
Name=BUTTON 5
[Button 6]
UsagePage=0x9
Usage=0x7
Linedata.0=(421,39),(296,39),(202,63)
Align.0=C
CalloutMax.0=(301,16),(424,39)
Type=0x604
Name=BUTTON 6
[Button 7]
UsagePage=0x9
Usage=0x8
Linedata.0=(422,96),(298,96),(202,78)
Align.0=C
CalloutMax.0=(301,74),(425,96)
Type=0x704
Name=BUTTON 7
[Button 8]
UsagePage=0x9
Usage=0x9
Linedata.0=(7,211),(101,210),(149,128)
Align.0=C
CalloutMax.0=(7,190),(98,211)
Type=0x804
Name=BUTTON 8
[Button 9]
UsagePage=0x9
Usage=0xA
Linedata.0=(164,26),(262,26),(187,26),(187,94)
Align.0=C
CalloutMax.0=(164,6),(264,26)
Type=0x904
Name=BUTTON 9
[Button 10]
UsagePage=0x9
Usage=0xB
Linedata.0=(360,301),(259,301),(231,226),(232,226)
Align.0=C
CalloutMax.0=(262,281),(362,301)
Type=0xA04
Name=BUTTON 10
[Button 11]
UsagePage=0x9
Usage=0xC
Linedata.0=(77,299),(183,299),(202,224)
Align.0=C
CalloutMax.0=(78,279),(178,299)
Type=0xB04
Name=BUTTON 11
[Button 12]
UsagePage=0x9
Usage=0xD
Linedata.0=(269,169),(205,169),(180,129)
Align.0=C
CalloutMax.0=(210,150),(270,170)
Type=0xC04
Name=BUTTON 12
[Hat Switch]
UsagePage=0x1
Usage=0x39
Linedata.0=(9,96),(106,96),(109,137),(109,138)
Align.0=C
CalloutMax.0=(10,77),(110,97)
Type=0x10
Name=HAT SWITCH
[Y Axis]
UsagePage=0x1
Usage=0x31
Linedata.0=(7,272),(124,272),(156,142)
Align.0=C
CalloutMax.0=(7,251),(117,273)
Type=0x102
Name=Y AXIS
[X Axis]
UsagePage=0x1
Usage=0x30
Linedata.0=(8,244),(111,244),(139,141)
Align.0=C
CalloutMax.0=(8,222),(108,245)
Type=0x2
Name=X AXIS
[Slider]
UsagePage=0x1
Usage=0x36
Linedata.0=(9,56),(140,56),(178,109)
Align.0=C
CalloutMax.0=(10,33),(130,56)
Type=0x202
Name=SLIDER
[Z Rotation]
UsagePage=0x1
Usage=0x35
Linedata.0=(11,28),(138,28),(178,89)
Align.0=C
CalloutMax.0=(10,6),(130,29)
Type=0x502
Name=Z ROTATION
[USB Human Interface Device.Genre.34]
Button 0=1
Button 1=2
Button 2=3
Button 3=4
Button 4=5
Button 11=253
Button 12=254
Hat Switch=1
Y Axis=2
X Axis=1
[USB Human Interface Device.Genre.33]
Button 3=1
Button 4=4
Button 5=2
Button 6=5
Button 7=3
Button 9=254
Button 12=253
Hat Switch=1
Y Axis=2
X Axis=1
[USB Human Interface Device.Genre.24]
Button 0=7
Button 2=4
Button 3=3
Button 4=5
Button 5=6
Button 6=1
Button 7=2
Button 9=254
Button 10=8
Button 11=9
Button 12=253
Hat Switch=1
Y Axis=2
X Axis=1
[USB Human Interface Device.Genre.26]
Button 0=7
Button 2=8
Button 3=3
Button 4=4
Button 5=1
Button 6=5
Button 7=2
Button 9=254
Button 10=9
Button 11=6
Button 12=253
Hat Switch=1
Y Axis=2
X Axis=1
[USB Human Interface Device.Genre.27]
Button 0=6
Button 1=7
Button 2=5
Button 3=8
Button 4=4
Button 5=1
Button 6=2
Button 7=3
Button 9=254
Button 12=253
Hat Switch=1
Y Axis=2
X Axis=1
[USB Human Interface Device.Genre.25]
Button 0=7
Button 2=8
Button 3=3
Button 4=2
Button 5=4
Button 6=5
Button 7=1
Button 9=254
Button 10=6
Button 11=9
Button 12=253
Hat Switch=1
Y Axis=2
X Axis=1
[USB Human Interface Device.Genre.13]
Button 0=6
Button 1=8
Button 2=7
Button 3=3
Button 4=4
Button 5=5
Button 6=2
Button 7=1
Button 9=254
Button 10=9
Button 11=10
Button 12=253
Hat Switch=1
Y Axis=2
X Axis=3
Z Rotation=1
[USB Human Interface Device.Genre.28]
Button 0=6
Button 1=2
Button 4=3
Button 5=5
Button 6=4
Button 7=1
Button 9=254
Button 12=253
Hat Switch=1
Y Axis=2
X Axis=1
[USB Human Interface Device.Genre.32]
Button 0=7
Button 3=1
Button 4=4
Button 5=5
Button 6=2
Button 7=3
Button 10=6
Button 11=254
Button 12=253
Hat Switch=1
Y Axis=2
X Axis=1
[USB Human Interface Device.Genre.31]
Button 0=9
Button 1=10
Button 2=8
Button 3=3
Button 4=7
Button 5=1
Button 6=2
Button 7=5
Button 8=12
Button 9=254
Button 10=6
Button 11=4
Button 12=253
Hat Switch=1
Y Axis=2
X Axis=1
[USB Human Interface Device.Genre.30]
Button 0=10
Button 1=13
Button 2=5
Button 3=6
Button 4=3
Button 5=4
Button 6=2
Button 7=1
Button 8=11
Button 9=254
Button 10=8
Button 11=9
Button 12=253
Hat Switch=1
Y Axis=2
X Axis=1
Slider=3
[USB Human Interface Device.Genre.29]
Button 0=3
Button 1=7
Button 3=5
Button 4=2
Button 5=4
Button 6=6
Button 7=1
Button 9=254
Button 12=253
Y Axis=2
X Axis=1
[USB Human Interface Device.Genre.9]
Button 0=4
Button 1=3
Button 2=8
Button 3=2
Button 6=7
Button 7=1
Button 9=254
Button 10=5
Button 11=6
Button 12=253
Hat Switch=1
Y Axis=2
X Axis=1
Z Rotation=3
[USB Human Interface Device.Genre.41]
Button 0=3
Button 1=2
Button 2=6
Button 3=1
Button 6=8
Button 7=7
Button 9=254
Button 10=5
Button 11=4
Button 12=253
Hat Switch=1
Y Axis=2
X Axis=1
Slider=4
Z Rotation=3
[USB Human Interface Device.Genre.1]
Button 0=3
Button 2=4
Button 4=5
Button 5=6
Button 6=9
Button 7=7
Button 8=8
Button 9=254
Button 10=2
Button 11=1
Button 12=253
Hat Switch=1
Y Axis=3
X Axis=1
Slider=2
[USB Human Interface Device.Genre.3]
Button 0=6
Button 1=4
Button 2=5
Button 3=1
Button 9=254
Button 10=3
Button 11=2
Button 12=253
Hat Switch=1
Y Axis=2
X Axis=1
Slider=3
Z Rotation=4
[USB Human Interface Device.Genre.39]
Button 0=3
Button 1=7
Button 2=12
Button 3=1
Button 4=4
Button 5=2
Button 6=6
Button 7=5
Button 8=10
Button 9=254
Button 10=13
Button 11=14
Button 12=253
Y Axis=2
Slider=1
[USB Human Interface Device.Genre.40]
Button 0=3
Button 1=9
Button 3=10
Button 4=4
Button 5=2
Button 6=6
Button 7=5
Button 8=1
Button 9=254
Button 10=8
Button 11=7
Button 12=253
Y Axis=1
X Axis=2
Slider=3
Z Rotation=4
[]
ImageFileName.0=DUAL ANALOG.PNG
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.8]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Genre.8]
MapExists=1
Z ROTATION=0x1
Y AXIS=0x2
BUTTON 4=0x1
BUTTON 7=0x2
BUTTON 5=0x3
BUTTON 10=0x4
BUTTON 11=0x5
BUTTON 0=0x6
BUTTON 1=0x7
BUTTON 12=0xFD
BUTTON 3=0x8
HAT SWITCH=0x1
BUTTON 2=0x9
X AXIS=0x3
BUTTON 6=0xA
BUTTON 9=0xFE
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.10]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Genre.10]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 3=0x2
BUTTON 2=0x3
BUTTON 10=0x4
BUTTON 11=0x5
BUTTON 12=0xFD
HAT SWITCH=0x1
BUTTON 6=0x6
BUTTON 4=0x7
BUTTON 5=0x8
Z ROTATION=0x3
BUTTON 1=0x9
BUTTON 7=0xA
BUTTON 9=0xFE
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.11]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Genre.11]
MapExists=1
Z ROTATION=0x1
Y AXIS=0x2
BUTTON 4=0x1
BUTTON 1=0x2
BUTTON 0=0x3
BUTTON 7=0x4
BUTTON 3=0x5
BUTTON 5=0x6
BUTTON 6=0x7
BUTTON 12=0xFD
HAT SWITCH=0x1
BUTTON 2=0x8
BUTTON 11=0x9
X AXIS=0x3
BUTTON 9=0xFE
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.12]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Genre.12]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 3=0x1
BUTTON 4=0x2
BUTTON 7=0x3
BUTTON 6=0x4
BUTTON 5=0x5
BUTTON 12=0xFD
BUTTON 0=0x6
BUTTON 2=0x7
BUTTON 11=0x8
BUTTON 9=0xFE
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.14]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Genre.14]
MapExists=1
Z ROTATION=0x1
Y AXIS=0x2
BUTTON 7=0x1
BUTTON 5=0x2
BUTTON 4=0x3
BUTTON 6=0x4
BUTTON 8=0x5
BUTTON 12=0xFD
HAT SWITCH=0x1
BUTTON 11=0x6
X AXIS=0x3
BUTTON 2=0x7
BUTTON 3=0x8
BUTTON 9=0xFE
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.15]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Genre.15]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 2=0x1
BUTTON 0=0x2
BUTTON 1=0x3
BUTTON 6=0x4
BUTTON 7=0x5
BUTTON 4=0x6
BUTTON 5=0x7
BUTTON 3=0x8
BUTTON 12=0xFD
BUTTON 10=0x9
BUTTON 11=0xA
BUTTON 9=0xFE
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.16]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Genre.16]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 7=0x1
BUTTON 6=0x2
BUTTON 5=0x3
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 12=0xFD
BUTTON 0=0x6
BUTTON 2=0x7
BUTTON 9=0xFE
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.17]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Genre.17]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 2=0x1
BUTTON 3=0x2
BUTTON 6=0x3
BUTTON 4=0x4
BUTTON 5=0x5
BUTTON 7=0x6
BUTTON 12=0xFD
BUTTON 0=0x7
BUTTON 1=0x8
BUTTON 9=0xFE
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.18]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Genre.18]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 2=0x1
BUTTON 5=0x2
BUTTON 0=0x3
BUTTON 6=0x4
BUTTON 7=0x5
BUTTON 11=0x6
BUTTON 3=0x7
BUTTON 4=0x8
BUTTON 12=0xFD
HAT SWITCH=0x1
BUTTON 1=0x9
BUTTON 10=0xA
BUTTON 8=0xB
BUTTON 9=0xFE
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.19]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Genre.19]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 2=0x1
BUTTON 4=0x2
BUTTON 6=0x3
BUTTON 7=0x4
BUTTON 0=0x5
BUTTON 3=0x6
BUTTON 5=0x7
BUTTON 12=0xFD
HAT SWITCH=0x1
BUTTON 8=0x8
BUTTON 1=0x9
BUTTON 9=0xFE
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.20]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Genre.20]
MapExists=1
BUTTON 4=0x1
BUTTON 6=0x2
BUTTON 7=0x3
BUTTON 12=0xFD
BUTTON 9=0xFE
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.21]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Genre.21]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 3=0x2
BUTTON 4=0x3
BUTTON 7=0x4
BUTTON 6=0x5
BUTTON 5=0x6
BUTTON 12=0xFD
BUTTON 1=0x7
BUTTON 11=0x8
BUTTON 2=0x9
BUTTON 9=0xFE
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.22]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Genre.22]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 5=0x1
BUTTON 7=0x2
BUTTON 4=0x3
BUTTON 6=0x4
BUTTON 3=0x5
BUTTON 12=0xFD
BUTTON 2=0x6
BUTTON 1=0x7
BUTTON 10=0x8
BUTTON 0=0x9
BUTTON 8=0xA
BUTTON 11=0xB
BUTTON 9=0xFE
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.23]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Genre.23]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 7=0x1
BUTTON 3=0x2
BUTTON 6=0x3
BUTTON 2=0x4
BUTTON 4=0x5
BUTTON 5=0x6
BUTTON 12=0xFD
BUTTON 11=0x7
BUTTON 0=0x9
BUTTON 10=0xA
BUTTON 1=0xB
BUTTON 8=0xD
BUTTON 9=0xFE
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.2]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Genre.2]
MapExists=1
X AXIS=0x1
SLIDER=0x2
Y AXIS=0x3
BUTTON 3=0x1
BUTTON 10=0x2
BUTTON 11=0x3
BUTTON 12=0xFD
HAT SWITCH=0x1
BUTTON 5=0x4
BUTTON 6=0x5
BUTTON 4=0x6
BUTTON 7=0x7
BUTTON 2=0x8
BUTTON 9=0xFE
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.4]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Genre.4]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
SLIDER=0x3
BUTTON 10=0x1
BUTTON 11=0x2
BUTTON 7=0x3
BUTTON 12=0xFD
HAT SWITCH=0x1
Z ROTATION=0x5
BUTTON 0=0x4
BUTTON 1=0x5
BUTTON 9=0xFE
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.5]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Genre.5]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 11=0xFD
HAT SWITCH=0x1
BUTTON 3=0x4
Z ROTATION=0x4
BUTTON 4=0x5
BUTTON 5=0x6
BUTTON 6=0x7
BUTTON 7=0x8
BUTTON 8=0x9
BUTTON 12=0xFE
BUTTON 10=0xFC
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.6]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.7]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Genre.7]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
SLIDER=0x3
BUTTON 3=0x1
BUTTON 5=0x2
BUTTON 6=0x3
BUTTON 12=0xFD
HAT SWITCH=0x1
Z ROTATION=0x5
BUTTON 4=0x4
BUTTON 11=0x5
BUTTON 1=0x6
BUTTON 0=0x7
BUTTON 8=0x8
BUTTON 9=0xFE
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.35]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Genre.35]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
SLIDER=0x3
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 11=0xFD
HAT SWITCH=0x1
Z ROTATION=0x4
BUTTON 4=0x5
BUTTON 12=0xFE
BUTTON 10=0xFC
[USB HUMAN INTERFACE DEVICE.Genre.6]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 11=0xFD
HAT SWITCH=0x1
Z ROTATION=0x4
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 5=0x6
BUTTON 6=0x7
BUTTON 12=0xFE
BUTTON 10=0xFC
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dinput\ihvmap\glmda.ini ===
[DirectInput]
DirectXVersion=0x800
Devices=USB Human Interface Device
[USB Human Interface Device]
VID=1784
PID=41728
Name=DUALANALOGLEADERUSB
Controls=BUTTON 0,BUTTON 1,BUTTON 2,BUTTON 3,BUTTON 4,BUTTON 5,BUTTON 6,BUTTON 7,BUTTON 8,BUTTON 9,BUTTON 10,BUTTON 11,BUTTON 12,HAT SWITCH,Y AXIS,X AXIS,SLIDER,Z ROTATION
ImageFileName.0=GLMDA.PNG
ImageFormat.0=BMP
[Button 0]
UsagePage=0x9
Usage=0x1
Linedata.0=(423,198),(301,198),(244,186)
Align.0=C
CalloutMax.0=(306,176),(425,198)
Type=0x4
Name=BUTTON 0
[Button 1]
UsagePage=0x9
Usage=0x2
Linedata.0=(422,226),(302,226),(250,196)
Align.0=C
CalloutMax.0=(305,204),(424,227)
Type=0x104
Name=BUTTON 1
[Button 2]
UsagePage=0x9
Usage=0x3
Linedata.0=(423,169),(301,169),(189,186)
Align.0=C
CalloutMax.0=(305,146),(425,168)
Type=0x204
Name=BUTTON 2
[Button 3]
UsagePage=0x9
Usage=0x4
Linedata.0=(421,257),(301,257),(183,196)
Align.0=C
CalloutMax.0=(304,234),(424,257)
Type=0x304
Name=BUTTON 3
[Button 4]
UsagePage=0x9
Usage=0x5
Linedata.0=(421,128),(299,128),(180,80)
Align.0=C
CalloutMax.0=(302,105),(423,128)
Type=0x404
Name=BUTTON 4
[Button 5]
UsagePage=0x9
Usage=0x6
Linedata.0=(421,69),(296,69),(250,76),(182,66)
Align.0=C
CalloutMax.0=(302,46),(423,69)
Type=0x504
Name=BUTTON 5
[Button 6]
UsagePage=0x9
Usage=0x7
Linedata.0=(421,39),(296,39),(202,63)
Align.0=C
CalloutMax.0=(301,16),(424,39)
Type=0x604
Name=BUTTON 6
[Button 7]
UsagePage=0x9
Usage=0x8
Linedata.0=(422,96),(298,96),(202,78)
Align.0=C
CalloutMax.0=(301,74),(425,96)
Type=0x704
Name=BUTTON 7
[Button 8]
UsagePage=0x9
Usage=0x9
Linedata.0=(7,211),(101,210),(149,128)
Align.0=C
CalloutMax.0=(7,190),(98,211)
Type=0x804
Name=BUTTON 8
[Button 9]
UsagePage=0x9
Usage=0xA
Linedata.0=(164,26),(262,26),(187,26),(187,94)
Align.0=C
CalloutMax.0=(164,6),(264,26)
Type=0x904
Name=BUTTON 9
[Button 10]
UsagePage=0x9
Usage=0xB
Linedata.0=(360,301),(259,301),(231,226),(232,226)
Align.0=C
CalloutMax.0=(262,281),(362,301)
Type=0xA04
Name=BUTTON 10
[Button 11]
UsagePage=0x9
Usage=0xC
Linedata.0=(77,299),(183,299),(202,224)
Align.0=C
CalloutMax.0=(78,279),(178,299)
Type=0xB04
Name=BUTTON 11
[Button 12]
UsagePage=0x9
Usage=0xD
Linedata.0=(269,169),(205,169),(180,129)
Align.0=C
CalloutMax.0=(210,150),(270,170)
Type=0xC04
Name=BUTTON 12
[Hat Switch]
UsagePage=0x1
Usage=0x39
Linedata.0=(9,96),(106,96),(109,137),(109,138)
Align.0=C
CalloutMax.0=(10,77),(110,97)
Type=0x10
Name=HAT SWITCH
[Y Axis]
UsagePage=0x1
Usage=0x31
Linedata.0=(7,272),(124,272),(156,142)
Align.0=C
CalloutMax.0=(7,251),(117,273)
Type=0x102
Name=Y AXIS
[X Axis]
UsagePage=0x1
Usage=0x30
Linedata.0=(8,244),(111,244),(139,141)
Align.0=C
CalloutMax.0=(8,222),(108,245)
Type=0x2
Name=X AXIS
[Slider]
UsagePage=0x1
Usage=0x36
Linedata.0=(9,56),(140,56),(178,109)
Align.0=C
CalloutMax.0=(10,33),(130,56)
Type=0x202
Name=SLIDER
[Z Rotation]
UsagePage=0x1
Usage=0x35
Linedata.0=(11,28),(138,28),(178,89)
Align.0=C
CalloutMax.0=(10,6),(130,29)
Type=0x502
Name=Z ROTATION
[USB Human Interface Device.Genre.34]
Button 0=1
Button 1=2
Button 2=3
Button 3=4
Button 4=5
Button 11=253
Button 12=254
Hat Switch=1
Y Axis=2
X Axis=1
[USB Human Interface Device.Genre.33]
Button 3=1
Button 4=4
Button 5=2
Button 6=5
Button 7=3
Button 9=254
Button 12=253
Hat Switch=1
Y Axis=2
X Axis=1
[USB Human Interface Device.Genre.24]
Button 0=7
Button 2=4
Button 3=3
Button 4=5
Button 5=6
Button 6=1
Button 7=2
Button 9=254
Button 10=8
Button 11=9
Button 12=253
Hat Switch=1
Y Axis=2
X Axis=1
[USB Human Interface Device.Genre.26]
Button 0=7
Button 2=8
Button 3=3
Button 4=4
Button 5=1
Button 6=5
Button 7=2
Button 9=254
Button 10=9
Button 11=6
Button 12=253
Hat Switch=1
Y Axis=2
X Axis=1
[USB Human Interface Device.Genre.27]
Button 0=6
Button 1=7
Button 2=5
Button 3=8
Button 4=4
Button 5=1
Button 6=2
Button 7=3
Button 9=254
Button 12=253
Hat Switch=1
Y Axis=2
X Axis=1
[USB Human Interface Device.Genre.25]
Button 0=7
Button 2=8
Button 3=3
Button 4=2
Button 5=4
Button 6=5
Button 7=1
Button 9=254
Button 10=6
Button 11=9
Button 12=253
Hat Switch=1
Y Axis=2
X Axis=1
[USB Human Interface Device.Genre.13]
Button 0=6
Button 1=8
Button 2=7
Button 3=3
Button 4=4
Button 5=5
Button 6=2
Button 7=1
Button 9=254
Button 10=9
Button 11=10
Button 12=253
Hat Switch=1
Y Axis=2
X Axis=3
Z Rotation=1
[USB Human Interface Device.Genre.28]
Button 0=6
Button 1=2
Button 4=3
Button 5=5
Button 6=4
Button 7=1
Button 9=254
Button 12=253
Hat Switch=1
Y Axis=2
X Axis=1
[USB Human Interface Device.Genre.32]
Button 0=7
Button 3=1
Button 4=4
Button 5=5
Button 6=2
Button 7=3
Button 10=6
Button 11=254
Button 12=253
Hat Switch=1
Y Axis=2
X Axis=1
[USB Human Interface Device.Genre.31]
Button 0=9
Button 1=10
Button 2=8
Button 3=3
Button 4=7
Button 5=1
Button 6=2
Button 7=5
Button 8=12
Button 9=254
Button 10=6
Button 11=4
Button 12=253
Hat Switch=1
Y Axis=2
X Axis=1
[USB Human Interface Device.Genre.30]
Button 0=10
Button 1=13
Button 2=5
Button 3=6
Button 4=3
Button 5=4
Button 6=2
Button 7=1
Button 8=11
Button 9=254
Button 10=8
Button 11=9
Button 12=253
Hat Switch=1
Y Axis=2
X Axis=1
Slider=3
[USB Human Interface Device.Genre.29]
Button 0=3
Button 1=7
Button 3=5
Button 4=2
Button 5=4
Button 6=6
Button 7=1
Button 9=254
Button 12=253
Y Axis=2
X Axis=1
[USB Human Interface Device.Genre.9]
Button 0=4
Button 1=3
Button 2=8
Button 3=2
Button 6=7
Button 7=1
Button 9=254
Button 10=5
Button 11=6
Button 12=253
Hat Switch=1
Y Axis=2
X Axis=1
Z Rotation=3
[USB Human Interface Device.Genre.41]
Button 0=3
Button 1=2
Button 2=6
Button 3=1
Button 6=8
Button 7=7
Button 9=254
Button 10=5
Button 11=4
Button 12=253
Hat Switch=1
Y Axis=2
X Axis=1
Slider=4
Z Rotation=3
[USB Human Interface Device.Genre.1]
Button 0=3
Button 2=4
Button 4=5
Button 5=6
Button 6=9
Button 7=7
Button 8=8
Button 9=254
Button 10=2
Button 11=1
Button 12=253
Hat Switch=1
Y Axis=3
X Axis=1
Slider=2
[USB Human Interface Device.Genre.3]
Button 0=6
Button 1=4
Button 2=5
Button 3=1
Button 9=254
Button 10=3
Button 11=2
Button 12=253
Hat Switch=1
Y Axis=2
X Axis=1
Slider=3
Z Rotation=4
[USB Human Interface Device.Genre.39]
Button 0=3
Button 1=7
Button 2=12
Button 3=1
Button 4=4
Button 5=2
Button 6=6
Button 7=5
Button 8=10
Button 9=254
Button 10=13
Button 11=14
Button 12=253
Y Axis=2
Slider=1
[USB Human Interface Device.Genre.40]
Button 0=3
Button 1=9
Button 3=10
Button 4=4
Button 5=2
Button 6=6
Button 7=5
Button 8=1
Button 9=254
Button 10=8
Button 11=7
Button 12=253
Y Axis=1
X Axis=2
Slider=3
Z Rotation=4
[]
ImageFileName.0=DUAL ANALOG.PNG
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.8]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Genre.8]
MapExists=1
Z ROTATION=0x1
Y AXIS=0x2
BUTTON 4=0x1
BUTTON 7=0x2
BUTTON 5=0x3
BUTTON 10=0x4
BUTTON 11=0x5
BUTTON 0=0x6
BUTTON 1=0x7
BUTTON 12=0xFD
BUTTON 3=0x8
HAT SWITCH=0x1
BUTTON 2=0x9
X AXIS=0x3
BUTTON 6=0xA
BUTTON 9=0xFE
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.10]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Genre.10]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 3=0x2
BUTTON 2=0x3
BUTTON 10=0x4
BUTTON 11=0x5
BUTTON 12=0xFD
HAT SWITCH=0x1
BUTTON 6=0x6
BUTTON 4=0x7
BUTTON 5=0x8
Z ROTATION=0x3
BUTTON 1=0x9
BUTTON 7=0xA
BUTTON 9=0xFE
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.11]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Genre.11]
MapExists=1
Z ROTATION=0x1
Y AXIS=0x2
BUTTON 4=0x1
BUTTON 1=0x2
BUTTON 0=0x3
BUTTON 7=0x4
BUTTON 3=0x5
BUTTON 5=0x6
BUTTON 6=0x7
BUTTON 12=0xFD
HAT SWITCH=0x1
BUTTON 2=0x8
BUTTON 11=0x9
X AXIS=0x3
BUTTON 9=0xFE
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.12]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Genre.12]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 3=0x1
BUTTON 4=0x2
BUTTON 7=0x3
BUTTON 6=0x4
BUTTON 5=0x5
BUTTON 12=0xFD
BUTTON 0=0x6
BUTTON 2=0x7
BUTTON 11=0x8
BUTTON 9=0xFE
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.14]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Genre.14]
MapExists=1
Z ROTATION=0x1
Y AXIS=0x2
BUTTON 7=0x1
BUTTON 5=0x2
BUTTON 4=0x3
BUTTON 6=0x4
BUTTON 8=0x5
BUTTON 12=0xFD
HAT SWITCH=0x1
BUTTON 11=0x6
X AXIS=0x3
BUTTON 2=0x7
BUTTON 3=0x8
BUTTON 9=0xFE
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.15]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Genre.15]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 2=0x1
BUTTON 0=0x2
BUTTON 1=0x3
BUTTON 6=0x4
BUTTON 7=0x5
BUTTON 4=0x6
BUTTON 5=0x7
BUTTON 3=0x8
BUTTON 12=0xFD
BUTTON 10=0x9
BUTTON 11=0xA
BUTTON 9=0xFE
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.16]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Genre.16]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 7=0x1
BUTTON 6=0x2
BUTTON 5=0x3
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 12=0xFD
BUTTON 0=0x6
BUTTON 2=0x7
BUTTON 9=0xFE
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.17]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Genre.17]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 2=0x1
BUTTON 3=0x2
BUTTON 6=0x3
BUTTON 4=0x4
BUTTON 5=0x5
BUTTON 7=0x6
BUTTON 12=0xFD
BUTTON 0=0x7
BUTTON 1=0x8
BUTTON 9=0xFE
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.18]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Genre.18]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 2=0x1
BUTTON 5=0x2
BUTTON 0=0x3
BUTTON 6=0x4
BUTTON 7=0x5
BUTTON 11=0x6
BUTTON 3=0x7
BUTTON 4=0x8
BUTTON 12=0xFD
HAT SWITCH=0x1
BUTTON 1=0x9
BUTTON 10=0xA
BUTTON 8=0xB
BUTTON 9=0xFE
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.19]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Genre.19]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 2=0x1
BUTTON 4=0x2
BUTTON 6=0x3
BUTTON 7=0x4
BUTTON 0=0x5
BUTTON 3=0x6
BUTTON 5=0x7
BUTTON 12=0xFD
HAT SWITCH=0x1
BUTTON 8=0x8
BUTTON 1=0x9
BUTTON 9=0xFE
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.20]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Genre.20]
MapExists=1
BUTTON 4=0x1
BUTTON 6=0x2
BUTTON 7=0x3
BUTTON 12=0xFD
BUTTON 9=0xFE
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.21]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Genre.21]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 3=0x2
BUTTON 4=0x3
BUTTON 7=0x4
BUTTON 6=0x5
BUTTON 5=0x6
BUTTON 12=0xFD
BUTTON 1=0x7
BUTTON 11=0x8
BUTTON 2=0x9
BUTTON 9=0xFE
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.22]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Genre.22]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 5=0x1
BUTTON 7=0x2
BUTTON 4=0x3
BUTTON 6=0x4
BUTTON 3=0x5
BUTTON 12=0xFD
BUTTON 2=0x6
BUTTON 1=0x7
BUTTON 10=0x8
BUTTON 0=0x9
BUTTON 8=0xA
BUTTON 11=0xB
BUTTON 9=0xFE
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.23]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Genre.23]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 7=0x1
BUTTON 3=0x2
BUTTON 6=0x3
BUTTON 2=0x4
BUTTON 4=0x5
BUTTON 5=0x6
BUTTON 12=0xFD
BUTTON 11=0x7
BUTTON 0=0x9
BUTTON 10=0xA
BUTTON 1=0xB
BUTTON 8=0xD
BUTTON 9=0xFE
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.2]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Genre.2]
MapExists=1
X AXIS=0x1
SLIDER=0x2
Y AXIS=0x3
BUTTON 3=0x1
BUTTON 10=0x2
BUTTON 11=0x3
BUTTON 12=0xFD
HAT SWITCH=0x1
BUTTON 5=0x4
BUTTON 6=0x5
BUTTON 4=0x6
BUTTON 7=0x7
BUTTON 2=0x8
BUTTON 9=0xFE
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.4]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Genre.4]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
SLIDER=0x3
BUTTON 10=0x1
BUTTON 11=0x2
BUTTON 7=0x3
BUTTON 12=0xFD
HAT SWITCH=0x1
Z ROTATION=0x5
BUTTON 0=0x4
BUTTON 1=0x5
BUTTON 9=0xFE
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.5]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Genre.5]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 11=0xFD
HAT SWITCH=0x1
BUTTON 3=0x4
Z ROTATION=0x4
BUTTON 4=0x5
BUTTON 5=0x6
BUTTON 6=0x7
BUTTON 7=0x8
BUTTON 8=0x9
BUTTON 12=0xFE
BUTTON 10=0xFC
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.6]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.7]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Genre.7]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
SLIDER=0x3
BUTTON 3=0x1
BUTTON 5=0x2
BUTTON 6=0x3
BUTTON 12=0xFD
HAT SWITCH=0x1
Z ROTATION=0x5
BUTTON 4=0x4
BUTTON 11=0x5
BUTTON 1=0x6
BUTTON 0=0x7
BUTTON 8=0x8
BUTTON 9=0xFE
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.35]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Genre.35]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
SLIDER=0x3
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 11=0xFD
HAT SWITCH=0x1
Z ROTATION=0x4
BUTTON 4=0x5
BUTTON 12=0xFE
BUTTON 10=0xFC
[USB HUMAN INTERFACE DEVICE.Genre.6]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 11=0xFD
HAT SWITCH=0x1
Z ROTATION=0x4
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 5=0x6
BUTTON 6=0x7
BUTTON 12=0xFE
BUTTON 10=0xFC
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dinput\ihvmap\glmdiggp.ini ===
[DirectInput]
DirectXVersion=0x800
Devices=USB Human Interface Device
[USB Human Interface Device]
VID=1784
PID=41729
Name=DigitalGamePadUSB
Controls=BUTTON 0,BUTTON 1,BUTTON 2,BUTTON 3,BUTTON 4,BUTTON 5,BUTTON 6,BUTTON 7,BUTTON 8,BUTTON 9,BUTTON 10,BUTTON 11,BUTTON 12,Y AXIS,X AXIS
ImageFileName.0=GlmDigGP.PNG
ImageFormat.0=BMP
[Button 0]
UsagePage=0x9
Usage=0x1
Linedata.0=(423,209),(294,209),(245,186)
Align.0=L
CalloutMax.0=(299,186),(426,210)
Type=0x4
Name=BUTTON 0
[Button 1]
UsagePage=0x9
Usage=0x2
Linedata.0=(422,259),(293,259),(250,195)
Align.0=L
CalloutMax.0=(298,237),(424,259)
Type=0x104
Name=BUTTON 1
[Button 2]
UsagePage=0x9
Usage=0x3
Linedata.0=(421,181),(290,181),(195,177),(191,186),(190,186)
Align.0=L
CalloutMax.0=(299,158),(423,182)
Type=0x204
Name=BUTTON 2
[Button 3]
UsagePage=0x9
Usage=0x4
Linedata.0=(423,233),(295,233),(184,195)
Align.0=L
CalloutMax.0=(299,211),(424,233)
Type=0x304
Name=BUTTON 3
[Button 4]
UsagePage=0x9
Usage=0x5
Linedata.0=(281,25),(157,26),(157,64),(181,79)
Align.0=L
CalloutMax.0=(160,5),(283,27)
Type=0x404
Name=BUTTON 4
[Button 5]
UsagePage=0x9
Usage=0x6
Linedata.0=(343,50),(213,50),(182,64)
Align.0=L
CalloutMax.0=(219,29),(343,51)
Type=0x504
Name=BUTTON 5
[Button 6]
UsagePage=0x9
Usage=0x7
Linedata.0=(399,74),(271,74),(201,62)
Align.0=L
CalloutMax.0=(275,52),(401,75)
Type=0x604
Name=BUTTON 6
[Button 7]
UsagePage=0x9
Usage=0x8
Linedata.0=(422,101),(298,101),(201,78)
Align.0=L
CalloutMax.0=(301,79),(428,102)
Type=0x704
Name=BUTTON 7
[Button 8]
UsagePage=0x9
Usage=0x9
Linedata.0=(423,153),(300,153),(181,98)
Align.0=L
CalloutMax.0=(301,131),(429,153)
Type=0x804
Name=BUTTON 8
[Button 9]
UsagePage=0x9
Usage=0xA
Linedata.0=(422,126),(301,126),(201,95)
Align.0=C
CalloutMax.0=(304,107),(430,127)
Type=0x904
Name=BUTTON 9
[Button 10]
UsagePage=0x9
Usage=0xB
Linedata.0=(360,305),(257,305),(233,223)
Align.0=C
CalloutMax.0=(261,284),(361,304)
Type=0xA04
Name=BUTTON 10
[Button 11]
UsagePage=0x9
Usage=0xC
Linedata.0=(53,302),(185,302),(202,224)
Align.0=C
CalloutMax.0=(53,283),(180,303)
Type=0xB04
Name=BUTTON 11
[Button 12]
UsagePage=0x9
Usage=0xD
Linedata.0=(291,172),(193,172),(181,128)
Align.0=C
CalloutMax.0=(193,152),(293,172)
Type=0xC04
Name=BUTTON 12
[Y Axis]
UsagePage=0x1
Usage=0x31
Linedata.0=(26,60),(105,60),(105,131)
Align.0=L
CalloutMax.0=(26,38),(152,60)
Type=0x102
Name=Y AXIS
[X Axis]
UsagePage=0x1
Usage=0x30
Linedata.0=(105,35),(6,35),(6,142),(99,142),(102,142)
Align.0=L
CalloutMax.0=(7,11),(133,36)
Type=0x2
Name=X AXIS
[USB Human Interface Device.Genre.34]
Button 2=1
Button 3=3
Button 9=2
Y Axis=2
X Axis=1
Button 0=4
Button 1=5
Button 5=254
Button 12=253
[USB Human Interface Device.Genre.33]
Button 0=2
Button 1=5
Button 2=1
Button 3=4
Button 5=254
Button 9=3
Button 12=253
Y Axis=2
X Axis=1
[USB Human Interface Device.Genre.24]
Button 0=2
Button 1=5
Button 2=6
Button 3=9
Button 4=8
Button 5=254
Button 6=7
Button 9=1
Button 10=4
Button 11=3
Button 12=253
Y Axis=2
X Axis=1
[USB Human Interface Device.Genre.26]
Button 0=3
Button 1=7
Button 2=1
Button 3=5
Button 5=254
Button 6=6
Button 8=4
Button 9=2
Button 10=8
Button 11=9
Button 12=253
Y Axis=2
X Axis=1
[USB Human Interface Device.Genre.27]
Button 0=4
Button 1=2
Button 2=1
Button 3=6
Button 5=254
Button 7=5
Button 9=3
Button 10=7
Button 11=8
Button 12=253
Y Axis=2
X Axis=1
[USB Human Interface Device.Genre.25]
Button 0=4
Button 1=3
Button 2=2
Button 3=5
Button 5=254
Button 7=7
Button 8=6
Button 9=1
Button 10=8
Button 11=9
Button 12=253
Y Axis=2
X Axis=1
[USB Human Interface Device.Genre.28]
Button 0=4
Button 1=6
Button 2=1
Button 3=2
Button 5=254
Button 8=5
Button 9=3
Button 12=253
Y Axis=2
X Axis=1
[USB Human Interface Device.Genre.32]
Button 0=3
Button 1=5
Button 2=1
Button 4=6
Button 5=254
Button 8=2
Button 9=4
Button 11=7
Button 12=253
Y Axis=2
X Axis=1
[USB Human Interface Device.Genre.31]
Button 0=2
Button 1=3
Button 2=7
Button 3=1
Button 4=12
Button 5=254
Button 6=8
Button 7=10
Button 8=9
Button 9=5
Button 10=6
Button 11=4
Button 12=253
Y Axis=2
X Axis=1
[USB Human Interface Device.Genre.30]
Button 0=1
Button 1=6
Button 2=2
Button 3=10
Button 4=7
Button 5=254
Button 6=12
Button 7=11
Button 8=3
Button 9=5
Button 10=13
Button 11=4
Button 12=253
Y Axis=2
X Axis=1
[USB Human Interface Device.Genre.29]
Button 0=6
Button 1=3
Button 2=4
Button 4=7
Button 5=254
Button 8=5
Button 9=1
Button 10=2
Button 12=253
Y Axis=2
X Axis=1
[USB Human Interface Device.Genre.9]
Button 0=4
Button 1=2
Button 2=3
Button 3=8
Button 5=254
Button 7=7
Button 9=1
Button 10=5
Button 11=6
Button 12=253
Y Axis=2
X Axis=1
[USB Human Interface Device.Genre.7]
Button 0=4
Button 1=5
Button 2=7
Button 3=6
Button 4=8
Button 5=254
Button 9=1
Button 10=3
Button 11=2
Button 12=253
Y Axis=4
X Axis=1
[USB Human Interface Device.Genre.41]
Button 0=6
Button 1=3
Button 2=2
Button 3=4
Button 5=254
Button 6=8
Button 9=1
Button 10=7
Button 11=5
Button 12=253
Y Axis=2
X Axis=1
[USB Human Interface Device.Genre.1]
Button 0=3
Button 1=9
Button 2=7
Button 3=6
Button 4=1
Button 5=254
Button 7=2
Button 9=4
Button 10=5
Button 11=8
Button 12=253
Y Axis=2
X Axis=1
[USB Human Interface Device.Genre.3]
Button 0=4
Button 2=5
Button 5=254
Button 8=6
Button 9=1
Button 10=3
Button 11=2
Button 12=253
Y Axis=2
X Axis=1
[]
ImageFileName.0=DIGITAL GAMEPAD.PNG
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.8]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Genre.8]
MapExists=1
Y AXIS=0x2
BUTTON 1=0x1
BUTTON 0=0x2
BUTTON 2=0x3
BUTTON 10=0x4
BUTTON 11=0x5
BUTTON 9=0x6
BUTTON 8=0x7
BUTTON 12=0xFD
BUTTON 7=0x8
BUTTON 6=0x9
X AXIS=0x3
BUTTON 3=0xA
BUTTON 5=0xFE
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.10]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Genre.10]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 7=0x1
BUTTON 9=0x2
BUTTON 3=0x3
BUTTON 2=0x4
BUTTON 8=0x5
BUTTON 12=0xFD
BUTTON 6=0x6
BUTTON 10=0x7
BUTTON 11=0x8
BUTTON 0=0x9
BUTTON 1=0xA
BUTTON 5=0xFE
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.11]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Genre.11]
MapExists=1
Y AXIS=0x2
BUTTON 2=0x1
BUTTON 0=0x2
BUTTON 1=0x3
BUTTON 9=0x4
BUTTON 3=0x5
BUTTON 10=0x6
BUTTON 11=0x7
BUTTON 12=0xFD
BUTTON 4=0x8
BUTTON 7=0x9
X AXIS=0x3
BUTTON 5=0xFE
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.12]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Genre.12]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 8=0x2
BUTTON 9=0x3
BUTTON 11=0x4
BUTTON 7=0x5
BUTTON 12=0xFD
BUTTON 4=0x6
BUTTON 1=0x7
BUTTON 3=0x8
BUTTON 2=0xFE
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.13]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Genre.13]
MapExists=1
Y AXIS=0x2
BUTTON 9=0x1
BUTTON 0=0x2
BUTTON 2=0x3
BUTTON 8=0x4
BUTTON 1=0x5
BUTTON 4=0x6
BUTTON 3=0x7
BUTTON 12=0xFD
BUTTON 7=0x8
X AXIS=0x3
BUTTON 10=0x9
BUTTON 11=0xA
BUTTON 5=0xFE
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.14]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Genre.14]
MapExists=1
Y AXIS=0x2
BUTTON 9=0x1
BUTTON 0=0x2
BUTTON 8=0x3
BUTTON 1=0x4
BUTTON 2=0x5
BUTTON 12=0xFD
BUTTON 3=0x6
X AXIS=0x3
BUTTON 10=0x7
BUTTON 11=0x8
BUTTON 5=0xFE
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.15]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Genre.15]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 11=0x1
BUTTON 0=0x2
BUTTON 10=0x3
BUTTON 2=0x4
BUTTON 9=0x5
BUTTON 8=0x6
BUTTON 7=0x7
BUTTON 1=0x8
BUTTON 12=0xFD
BUTTON 3=0x9
BUTTON 4=0xA
BUTTON 5=0xFE
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.16]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Genre.16]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 2=0x1
BUTTON 1=0x2
BUTTON 0=0x3
BUTTON 9=0x4
BUTTON 3=0x5
BUTTON 12=0xFD
BUTTON 11=0x6
BUTTON 7=0x7
BUTTON 5=0xFE
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.17]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Genre.17]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 1=0x1
BUTTON 3=0x2
BUTTON 2=0x3
BUTTON 8=0x4
BUTTON 0=0x5
BUTTON 9=0x6
BUTTON 12=0xFD
BUTTON 11=0x7
BUTTON 10=0x8
BUTTON 5=0xFE
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.18]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Genre.18]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 8=0x1
BUTTON 3=0x2
BUTTON 9=0x3
BUTTON 2=0x4
BUTTON 1=0x5
BUTTON 10=0x6
BUTTON 0=0x7
BUTTON 11=0x8
BUTTON 12=0xFD
BUTTON 4=0x9
BUTTON 7=0xA
BUTTON 6=0xC
BUTTON 5=0xFE
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.19]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Genre.19]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 9=0x4
BUTTON 10=0x5
BUTTON 1=0x6
BUTTON 11=0x7
BUTTON 12=0xFD
BUTTON 4=0x8
BUTTON 6=0x9
BUTTON 5=0xFE
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.20]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Genre.20]
MapExists=1
BUTTON 0=0x1
BUTTON 9=0x2
BUTTON 8=0x3
BUTTON 12=0xFD
BUTTON 5=0xFE
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.21]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Genre.21]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 7=0x1
BUTTON 2=0x2
BUTTON 1=0x3
BUTTON 0=0x4
BUTTON 9=0x5
BUTTON 11=0x6
BUTTON 12=0xFD
BUTTON 10=0x7
BUTTON 3=0x8
BUTTON 8=0x9
BUTTON 5=0xFE
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.22]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Genre.22]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 8=0x1
BUTTON 10=0x2
BUTTON 11=0x3
BUTTON 9=0x4
BUTTON 2=0x5
BUTTON 12=0xFD
BUTTON 1=0x6
BUTTON 6=0x7
BUTTON 7=0x8
BUTTON 3=0x9
BUTTON 4=0xA
BUTTON 0=0xB
BUTTON 5=0xFE
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.23]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Genre.23]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 11=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 9=0x4
BUTTON 3=0x5
BUTTON 0=0x6
BUTTON 12=0xFD
BUTTON 8=0x7
BUTTON 10=0x9
BUTTON 7=0xA
BUTTON 6=0xB
BUTTON 4=0xD
BUTTON 5=0xFE
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.2]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Genre.2]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 2=0x1
BUTTON 11=0x2
BUTTON 10=0x3
BUTTON 12=0xFD
BUTTON 4=0x4
BUTTON 7=0x5
BUTTON 1=0x6
BUTTON 0=0x7
BUTTON 9=0x8
BUTTON 5=0xFE
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.4]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Genre.4]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 2=0x1
BUTTON 9=0x2
BUTTON 0=0x3
BUTTON 12=0xFD
BUTTON 11=0x4
BUTTON 10=0x5
BUTTON 5=0xFE
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.5]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Genre.5]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 9=0x1
BUTTON 11=0x2
BUTTON 10=0x3
BUTTON 12=0xFD
BUTTON 4=0x4
BUTTON 1=0x5
BUTTON 8=0x6
BUTTON 2=0x7
BUTTON 3=0x8
BUTTON 0=0x9
BUTTON 5=0xFE
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.6]
MapExists=1
[USB HUMAN INTERFACE DEVICE.Genre.6]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 9=0x1
BUTTON 11=0x2
BUTTON 10=0x3
BUTTON 12=0xFD
BUTTON 8=0x4
BUTTON 2=0x5
BUTTON 7=0x6
BUTTON 0=0x7
BUTTON 5=0xFE
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dinput\ihvmap\gr3001_g.ini ===
[DirectInput]
DirectXVersion=0x800
Devices=USB Human Interface Device

[USB Human Interface Device]
VID=0x47D
PID=0x3901
Name=GRAVIS XXTERMINATOR DUAL CONTROL
Controls=Y AXIS,X AXIS,Z ROTATION,DIAL,Z AXIS,HAT SWITCH,BUTTON 0,BUTTON 1,BUTTON 2,BUTTON 3,BUTTON 4,BUTTON 5,BUTTON 6,BUTTON 7,BUTTON 8
ImageFileName.0=GR3001.PNG

[Y Axis]
Type=0x102
UsagePage=0x1
Usage=0x31
Linedata.0=(279,175),(279,133)
Align.0=C
CalloutMax.0=(235,142),(321,231)
Name=Y-AXIS
[X Axis]
Type=0x2
UsagePage=0x1
Usage=0x30
Linedata.0=(187,87),(187,125),(253,125)
Align.0=C
CalloutMax.0=(139,51),(235,103)
Name=X-AXIS
[Z Rotation]
Type=0x502
UsagePage=0x1
Usage=0x35
Name=RZ-AXIS
[Dial]
Type=0x202
UsagePage=0x1
Usage=0x37
Name=Z-AXIS
Align.0=C
CallOutMax.0=(0,262),(157,297)
LineData.0=(81,278),(81,262),(150,262),(150,128)
[Z Axis]
Type=0x602
UsagePage=0x1
Usage=0x32
Name=U-AXIS
[Hat Switch]
Type=0x10
UsagePage=0x1
Usage=0x39
Linedata.0=(368,215)
Align.0=C
CalloutMax.0=(321,0),(430,35)
Name=POV 0
[Button 0]
Type=0x4
UsagePage=0x9
Usage=0x1
Linedata.0=(199,33),(199,44),(266,44)
Align.0=C
CalloutMax.0=(144,0),(257,48)
Name=BUTTON 0
[Button 1]
Type=0x104
UsagePage=0x9
Usage=0x2
Linedata.0=(357,195),(330,195),(330,98),(289,57)
Align.0=C
CalloutMax.0=(322,175),(429,217)
Name=BUTTON 1
[Button 2]
Type=0x204
UsagePage=0x9
Usage=0x3
Linedata.0=(360,124),(337,124),(337,79),(309,56)
Align.0=C
CalloutMax.0=(333,87),(429,164)
Name=BUTTON 2
[Button 3]
Type=0x304
UsagePage=0x9
Usage=0x4
Linedata.0=(359,60),(331,60),(312,47)
Align.0=C
CalloutMax.0=(328,36),(429,86)
Name=BUTTON 3
[Button 4]
Type=0x404
UsagePage=0x9
Usage=0x5
Linedata.0=(129,21),(134,21),(134,122)
Align.0=R
CalloutMax.0=(0,0),(130,45)
Name=BUTTON 4
[Button 5]
Type=0x504
UsagePage=0x9
Usage=0x6
Linedata.0=(83,65),(105,65),(105,125)
Align.0=C
CalloutMax.0=(0,45),(129,88)
Name=BUTTON 5
[Button 6]
Type=0x604
UsagePage=0x9
Usage=0x7
Linedata.0=(56,97),(86,97),(86,134)
Align.0=T
CalloutMax.0=(0,89),(73,191)
Name=BUTTON 6
[Button 7]
Type=0x704
UsagePage=0x9
Usage=0x8
Linedata.0=(136,231),(136,139)
Align.0=R
CalloutMax.0=(0,225),(146,258)
Name=BUTTON 7
[Button 8]
Type=0x804
UsagePage=0x9
Usage=0x9
Linedata.0=(119,198),(119,143)
Align.0=R
CalloutMax.0=(0,193),(131,223)
Name=BUTTON 8
[USB Human Interface Device.Genre.34]
Y Axis=2
X Axis=1
Hat Switch=1
Button 0=1
Button 1=2
Button 2=3
Button 3=4
Button 4=5
Button 7=253
Button 8=254
[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.2]
MapExists=1

[USB HUMAN INTERFACE DEVICE.Genre.2]
MapExists=1
X AXIS=0x1
DIAL=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 7=0xFD
Y AXIS=0x4
HAT SWITCH=0x1
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 5=0x6
BUTTON 6=0x7
BUTTON 8=0x9

[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.3]
MapExists=1

[USB HUMAN INTERFACE DEVICE.Genre.3]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
DIAL=0x3
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 7=0xFD
HAT SWITCH=0x1
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 5=0x6
BUTTON 6=0x7
BUTTON 8=0xFE

[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.5]
MapExists=1

[USB HUMAN INTERFACE DEVICE.Genre.5]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 7=0xFD
HAT SWITCH=0x1
BUTTON 3=0x4
Z ROTATION=0x4
BUTTON 4=0x5
BUTTON 5=0x6
DIAL=0x6
BUTTON 6=0x7
BUTTON 8=0x9

[USB HUMAN INTERFACE DEVICE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.1]
MapExists=1

[USB HUMAN INTERFACE DEVICE.Genre.1]
MapExists=1
X AXIS=0x1
DIAL=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 7=0xFD
Y AXIS=0x4
HAT SWITCH=0x1
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 5=0x6
BUTTON 6=0x7
BUTTON 8=0x9
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dinput\ihvmap\gr3001.ini ===
[DirectInput]
DirectXVersion=0x800
Devices=USB HUMAN INTERFACE DEVICE,Gravis Xterminator Dual Control

[USB Human Interface Device]
VID=0x47D
PID=0x3001
Name=Gravis XXterminator Dual Control
Controls=Y AXIS,X AXIS,Z ROTATION,DIAL,Z AXIS,HAT SWITCH,BUTTON 0,BUTTON 1,BUTTON 2,BUTTON 3,BUTTON 4,BUTTON 5,BUTTON 6,BUTTON 7,BUTTON 8
ImageFileName.0=GR3001.PNG

[Y Axis]
Type=0x102
UsagePage=0x1
Usage=0x31
Linedata.0=(279,175),(279,133)
Align.0=C
CalloutMax.0=(235,142),(321,231)
Name=Y AXIS
[X Axis]
Type=0x2
UsagePage=0x1
Usage=0x30
Linedata.0=(187,87),(187,125),(253,125)
Align.0=C
CalloutMax.0=(139,51),(235,103)
Name=X AXIS
[Z Rotation]
Type=0x502
UsagePage=0x1
Usage=0x35
Align.0=C
Linedata.0=(281,251),(199,251),(199,162),(195,162)
CalloutMax.0=(209,231),(368,272)
Name=Z ROTATION
[Z ROTATION (GP)]
Type=0x602
UsagePage=0x1
Usage=0x37
Name=Z ROTATION
Align.0=C
Linedata.0=(281,251),(199,251),(199,162),(195,162)
CalloutMax.0=(209,231),(368,272)
[Dial]
Type=0x202
UsagePage=0x1
Usage=0x37
Name=DIAL
Align.0=TL
CallOutMax.0=(183,276),(361,309)
LineData.0=(189,278),(189,173)
[DIAL (GP)]
Type=0x302
UsagePage=0x1
Usage=0x33
Name=DIAL
Align.0=TL
CallOutMax.0=(183,276),(361,309)
LineData.0=(189,278),(189,173)
[Z Axis]
Type=0x602
UsagePage=0x1
Usage=0x32
Name=Z AXIS
Align.0=TR
CallOutMax.0=(3,265),(159,309)
LineData.0=(153,266),(153,128)
[THROTTLE]
Type=0x202
UsagePage=0x2
Usage=0xBB
Name=THROTTLE
Align.0=TR
CallOutMax.0=(2,264),(164,309)
LineData.0=(155,265),(155,128)
[Hat Switch]
Type=0x10
UsagePage=0x1
Usage=0x39
Linedata.0=(354,17),(321,17),(321,41)
Align.0=C
CalloutMax.0=(321,0),(430,35)
Name=HAT SWITCH
[Button 0]
Type=0x4
UsagePage=0x9
Usage=0x1
Linedata.0=(199,33),(199,44),(266,44)
Align.0=C
CalloutMax.0=(144,0),(257,48)
Name=BUTTON 0
[Button 1]
Type=0x104
UsagePage=0x9
Usage=0x2
Linedata.0=(357,195),(330,195),(330,98),(289,57)
Align.0=C
CalloutMax.0=(322,175),(429,217)
Name=BUTTON 1
[Button 2]
Type=0x204
UsagePage=0x9
Usage=0x3
Linedata.0=(360,124),(337,124),(337,79),(309,56)
Align.0=C
CalloutMax.0=(333,87),(429,164)
Name=BUTTON 2
[Button 3]
Type=0x304
UsagePage=0x9
Usage=0x4
Linedata.0=(359,60),(331,60),(312,47)
Align.0=C
CalloutMax.0=(328,36),(429,86)
Name=BUTTON 3
[Button 4]
Type=0x404
UsagePage=0x9
Usage=0x5
Linedata.0=(129,21),(134,21),(134,122)
Align.0=R
CalloutMax.0=(0,0),(130,45)
Name=BUTTON 4
[Button 5]
Type=0x504
UsagePage=0x9
Usage=0x6
Linedata.0=(83,65),(105,65),(105,125)
Align.0=C
CalloutMax.0=(0,45),(129,88)
Name=BUTTON 5
[Button 6]
Type=0x604
UsagePage=0x9
Usage=0x7
Linedata.0=(56,97),(86,97),(86,134)
Align.0=T
CalloutMax.0=(0,89),(73,191)
Name=BUTTON 6
[Button 7]
Type=0x704
UsagePage=0x9
Usage=0x8
Linedata.0=(136,231),(136,139)
Align.0=R
CalloutMax.0=(0,225),(146,258)
Name=BUTTON 7
[Button 8]
Type=0x804
UsagePage=0x9
Usage=0x9
Linedata.0=(119,198),(119,143)
Align.0=R
CalloutMax.0=(0,193),(131,223)
Name=BUTTON 8

[USB Human Interface Device.Genre.34]
Y Axis=2
X Axis=1
Hat Switch=1
Button 0=1
Button 1=2
Button 2=3
Button 3=4
Button 4=5
Button 7=253
Button 8=254

[Gravis XTerminator Dual Control]
VID=0x47D
PID=0x3901
Name=Gravis XXterminator Dual Control
ImageFileName.0=GR3001.PNG
Controls=Y AXIS,X AXIS,Z ROTATION (GP),DIAL (GP),THROTTLE,HAT SWITCH,BUTTON 0,BUTTON 1,BUTTON 2,BUTTON 3,BUTTON 4,BUTTON 5,BUTTON 6,BUTTON 7,BUTTON 8

[Gravis XTerminator Dual Control.Genre.34]
Y Axis=2
X Axis=1
Hat Switch=1
Button 0=1
Button 1=2
Button 2=3
Button 3=4
Button 4=5
Button 7=253
Button 8=254
[Gravis XTerminator Dual Control.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.2]
MapExists=1

[Gravis XTerminator Dual Control.Genre.2]
MapExists=1
X AXIS=0x1
DIAL=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 7=0xFD
Y AXIS=0x4
HAT SWITCH=0x1
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 5=0x6
BUTTON 6=0x7
BUTTON 8=0x9

[Gravis XTerminator Dual Control.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.3]
MapExists=1

[Gravis XTerminator Dual Control.Genre.3]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
DIAL=0x3
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 7=0xFD
HAT SWITCH=0x1
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 5=0x6
BUTTON 6=0x7
BUTTON 8=0xFE

[Gravis XTerminator Dual Control.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.5]
MapExists=1

[Gravis XTerminator Dual Control.Genre.5]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 7=0xFD
HAT SWITCH=0x1
BUTTON 3=0x4
Z ROTATION=0x4
BUTTON 4=0x5
BUTTON 5=0x6
DIAL=0x6
BUTTON 6=0x7
BUTTON 8=0x9


[GRAVIS XTERMINATOR DUAL CONTROL.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.1]
MapExists=1
[GRAVIS XTERMINATOR DUAL CONTROL.Genre.1]
MapExists=1
X AXIS=0x1
THROTTLE=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
HAT SWITCH=0x1
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 5=0x6
BUTTON 6=0x7
BUTTON 8=0x9
BUTTON 7=0xFD
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dinput\ihvmap\gr4001.ini ===
[DirectInput]
DirectXVersion=0x800
Devices=GAMEPAD PRO USB,Gravis GamePad Pro (GamePort)

[GamePad Pro USB]
VID=1064
PID=16385
Name=GRAVIS GAMEPAD PRO
Controls=Y AXIS,X AXIS,BUTTON 0,BUTTON 1,BUTTON 2,BUTTON 3,BUTTON 4,BUTTON 5,BUTTON 6,BUTTON 7,BUTTON 8,BUTTON 9
ImageFileName.0=GR4001.PNG

[Y Axis]
UsagePage=0x1
Usage=0x31
Linedata.0=(15,120),(15,146),(118,146)
Align.0=TL
CalloutMax.0=(0,103),(125,172)
Type=0x102
Name=Y AXIS

[X Axis]
UsagePage=0x1
Usage=0x30
Linedata.0=(15,239),(15,170),(102,170)
Align.0=L
CalloutMax.0=(0,218),(103,299)
Type=0x2
Name=X AXIS

[BUTTON 0]
UsagePage=0x9
Usage=0x1
Linedata.0=(231,129),(255,129)
Align.0=R
CalloutMax.0=(125,106),(233,156)
Type=0x4
Name=BUTTON 0

[BUTTON 1]
UsagePage=0x9
Usage=0x2
Linedata.0=(287,188),(287,149)
Align.0=C
CalloutMax.0=(238,167),(375,233)
Type=0x104
Name=BUTTON 1

[BUTTON 2]
UsagePage=0x9
Usage=0x3
Linedata.0=(343,116),(307,116)
Align.0=L
CalloutMax.0=(344,99),(429,167)
Type=0x204
Name=BUTTON 2

[BUTTON 3]
UsagePage=0x9
Usage=0x4
Linedata.0=(406,80),(406,95),(275,95)
Align.0=R
CalloutMax.0=(249,45),(429,99)
Type=0x304
Name=BUTTON 3

[BUTTON 4]
UsagePage=0x9
Usage=0x5
Linedata.0=(155,56),(155,89),(109,89)
Align.0=T
CalloutMax.0=(105,39),(216,97)
Type=0x404
Name=BUTTON 4

[BUTTON 5]
UsagePage=0x9
Usage=0x6
Linedata.0=(363,14),(363,41),(263,41),(263,53)
Align.0=T
CalloutMax.0=(307,0),(429,45)
Type=0x504
Name=BUTTON 5

[BUTTON 6]
UsagePage=0x9
Usage=0x7
Linedata.0=(15,41),(15,96),(77,96)
Align.0=L
CalloutMax.0=(0,0),(98,69)
Type=0x604
Name=BUTTON 6

[BUTTON 7]
UsagePage=0x9
Usage=0x8
Linedata.0=(191,21),(191,32),(234,32),(234,62)
Align.0=C
CalloutMax.0=(103,0),(297,28)
Type=0x704
Name=BUTTON 7

[BUTTON 8]
UsagePage=0x9
Usage=0x9
Linedata.0=(163,254),(163,165),(188,165)
Align.0=R
CalloutMax.0=(102,232),(201,310)
Type=0x804
Name=BUTTON 8

[BUTTON 9]
UsagePage=0x9
Usage=0xA
Linedata.0=(217,260),(217,159)
Align.0=L
CalloutMax.0=(209,233),(338,310)
Type=0x904
Name=BUTTON 9

[GAMEPAD PRO USB.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.1]
MapExists=1

[GAMEPAD PRO USB.Genre.1]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x8
BUTTON 1=0x4
BUTTON 2=0x5
BUTTON 3=0x6
BUTTON 4=0x3
BUTTON 5=0x7
BUTTON 6=0x2
BUTTON 7=0x1
BUTTON 8=0x9
BUTTON 9=0xFC

[GAMEPAD PRO USB.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.2]
MapExists=1

[GAMEPAD PRO USB.Genre.2]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x8
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 4=0x7
BUTTON 5=0x6
BUTTON 6=0x5
BUTTON 7=0x4
BUTTON 8=0xFD
BUTTON 9=0xFC

[GAMEPAD PRO USB.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.3]
MapExists=1

[GAMEPAD PRO USB.Genre.3]
MapExists=1
X AXIS=0x1
Y AXIS=0x3
BUTTON 0=0x1
BUTTON 1=0x6
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 4=0x4
BUTTON 5=0x5
BUTTON 6=0xFE
BUTTON 8=0xFD
BUTTON 9=0xFC

[GAMEPAD PRO USB.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.4]
MapExists=1

[GAMEPAD PRO USB.Genre.4]
MapExists=1
X AXIS=0x1
Y AXIS=0x3
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0xFE
BUTTON 4=0x4
BUTTON 6=0x5
BUTTON 8=0xFD
BUTTON 9=0xFC

[GAMEPAD PRO USB.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.5]
MapExists=1

[GAMEPAD PRO USB.Genre.5]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x5
BUTTON 4=0x7
BUTTON 5=0x4
BUTTON 6=0x8
BUTTON 7=0x6
BUTTON 8=0xFD
BUTTON 9=0xFC

[GAMEPAD PRO USB.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.6]
MapExists=1

[GAMEPAD PRO USB.Genre.6]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x5
BUTTON 4=0x6
BUTTON 5=0x4
BUTTON 6=0xFE
BUTTON 8=0xFD
BUTTON 9=0xFC

[GAMEPAD PRO USB.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.7]
MapExists=1

[GAMEPAD PRO USB.Genre.7]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 4=0x6
BUTTON 5=0xFE
BUTTON 6=0x7
BUTTON 7=0x5
BUTTON 8=0xFD
BUTTON 9=0xFC

[GAMEPAD PRO USB.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.8]
MapExists=1

[GAMEPAD PRO USB.Genre.8]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 4=0x6
BUTTON 5=0x5
BUTTON 6=0x7
BUTTON 7=0xA
BUTTON 8=0x8
BUTTON 9=0xFC

[GAMEPAD PRO USB.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.9]
MapExists=1

[GAMEPAD PRO USB.Genre.9]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x3
BUTTON 2=0x2
BUTTON 3=0x4
BUTTON 4=0x8
BUTTON 5=0x6
BUTTON 6=0x7
BUTTON 7=0x5
BUTTON 8=0xFD
BUTTON 9=0xFC

[GAMEPAD PRO USB.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.10]
MapExists=1

[GAMEPAD PRO USB.Genre.10]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x2
BUTTON 1=0x4
BUTTON 2=0x3
BUTTON 3=0x1
BUTTON 4=0x9
BUTTON 5=0x5
BUTTON 6=0x7
BUTTON 7=0x8
BUTTON 8=0xA
BUTTON 9=0xFC
[GAMEPAD PRO USB.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.11]
MapExists=1

[GAMEPAD PRO USB.Genre.11]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x6
BUTTON 2=0x2
BUTTON 3=0x7
BUTTON 4=0x5
BUTTON 5=0x4
BUTTON 6=0x8
BUTTON 7=0x3
BUTTON 8=0x9
BUTTON 9=0xFC

[GAMEPAD PRO USB.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.12]
MapExists=1

[GamePad Pro USB.Genre.12]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 5=0x6
BUTTON 6=0x7
BUTTON 7=0x8
BUTTON 8=0xFD
BUTTON 9=0xFC

[GAMEPAD PRO USB.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.13]
MapExists=1

[GAMEPAD PRO USB.Genre.13]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 5=0x6
BUTTON 6=0x9
BUTTON 7=0xA
BUTTON 8=0x7
BUTTON 9=0xFC

[GAMEPAD PRO USB.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.14]
MapExists=1

[GAMEPAD PRO USB.Genre.14]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x4
BUTTON 3=0x3
BUTTON 4=0x8
BUTTON 5=0x5
BUTTON 6=0x7
BUTTON 7=0x6
BUTTON 8=0xFD
BUTTON 9=0xFC

[GAMEPAD PRO USB.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.15]
MapExists=1

[GAMEPAD PRO USB.Genre.15]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x2
BUTTON 1=0x1
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 4=0x6
BUTTON 5=0x8
BUTTON 6=0x7
BUTTON 7=0x5
BUTTON 8=0x9
BUTTON 9=0xFC

[GAMEPAD PRO USB.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.16]
MapExists=1

[GamePad Pro USB.Genre.16]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 5=0x6
BUTTON 6=0x7
BUTTON 7=0xFE
BUTTON 8=0xFD
BUTTON 9=0xFC

[GAMEPAD PRO USB.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.17]
MapExists=1

[GamePad Pro USB.Genre.17]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x2
BUTTON 1=0x6
BUTTON 2=0x3
BUTTON 3=0x5
BUTTON 4=0x1
BUTTON 5=0x4
BUTTON 6=0x7
BUTTON 7=0x8
BUTTON 8=0xFD
BUTTON 9=0xFC

[GAMEPAD PRO USB.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.18]
MapExists=1

[GAMEPAD PRO USB.Genre.18]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 5=0x6
BUTTON 6=0x7
BUTTON 7=0x8
BUTTON 8=0xD
BUTTON 9=0xFC

[GAMEPAD PRO USB.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.19]
MapExists=1

[GamePad Pro USB.Genre.19]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 5=0x6
BUTTON 6=0x7
BUTTON 7=0x8
BUTTON 8=0x9
BUTTON 9=0xFC

[GAMEPAD PRO USB.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.20]
MapExists=1

[GamePad Pro USB.Genre.20]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0xFE
BUTTON 8=0xFD
BUTTON 9=0xFC

[GAMEPAD PRO USB.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.21]
MapExists=1

[GamePad Pro USB.Genre.21]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x4
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 4=0x5
BUTTON 5=0x6
BUTTON 6=0x7
BUTTON 7=0x8
BUTTON 8=0x9
BUTTON 9=0xFC

[GAMEPAD PRO USB.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.22]
MapExists=1

[GamePad Pro USB.Genre.22]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x2
BUTTON 1=0x4
BUTTON 2=0x3
BUTTON 3=0x1
BUTTON 4=0x5
BUTTON 5=0x6
BUTTON 6=0x7
BUTTON 7=0x8
BUTTON 8=0x9
BUTTON 9=0xFC

[GAMEPAD PRO USB.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.23]
MapExists=1

[GamePad Pro USB.Genre.23]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 4=0x6
BUTTON 5=0x5
BUTTON 6=0x7
BUTTON 7=0x8
BUTTON 8=0x9
BUTTON 9=0xFC

[GAMEPAD PRO USB.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.24]
MapExists=1

[GAMEPAD PRO USB.Genre.24]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x5
BUTTON 3=0x6
BUTTON 4=0x8
BUTTON 5=0x3
BUTTON 6=0x7
BUTTON 7=0x4
BUTTON 8=0xFD
BUTTON 9=0xFC

[GAMEPAD PRO USB.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.25]
MapExists=1

[GAMEPAD PRO USB.Genre.25]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 4=0x6
BUTTON 5=0x5
BUTTON 6=0x7
BUTTON 7=0x8
BUTTON 8=0x9
BUTTON 9=0xFC

[GAMEPAD PRO USB.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.26]
MapExists=1

[GAMEPAD PRO USB.Genre.26]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 4=0x6
BUTTON 5=0x5
BUTTON 6=0x7
BUTTON 7=0x8
BUTTON 8=0x9
BUTTON 9=0xFC

[GAMEPAD PRO USB.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.27]
MapExists=1

[GAMEPAD PRO USB.Genre.27]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 5=0xFD
BUTTON 6=0x6
BUTTON 7=0x7
BUTTON 8=0x8
BUTTON 9=0xFC

[GAMEPAD PRO USB.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.28]
MapExists=1

[GAMEPAD PRO USB.Genre.28]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x3
BUTTON 2=0x5
BUTTON 3=0x4
BUTTON 4=0xFE
BUTTON 5=0x6
BUTTON 7=0x2
BUTTON 8=0xFD
BUTTON 9=0xFC

[GAMEPAD PRO USB.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.29]
MapExists=1

[GAMEPAD PRO USB.Genre.29]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x2
BUTTON 1=0x4
BUTTON 2=0x6
BUTTON 3=0x1
BUTTON 4=0xFE
BUTTON 5=0x5
BUTTON 6=0x7
BUTTON 7=0x3
BUTTON 8=0xFD
BUTTON 9=0xFC

[GAMEPAD PRO USB.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.30]
MapExists=1

[GamePad Pro USB.Genre.30]
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 4=0x9
BUTTON 5=0x6
BUTTON 6=0xA
BUTTON 7=0x7
BUTTON 8=0x5
BUTTON 9=0xFC

[GAMEPAD PRO USB.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.31]
MapExists=1

[GAMEPAD PRO USB.Genre.31]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x9
BUTTON 4=0x8
BUTTON 5=0x5
BUTTON 6=0x7
BUTTON 7=0x6
BUTTON 8=0x4
BUTTON 9=0xFC

[GAMEPAD PRO USB.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.32]
MapExists=1

[GAMEPAD PRO USB.Genre.32]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 4=0x7
BUTTON 5=0x5
BUTTON 6=0x6
BUTTON 7=0xFE
BUTTON 8=0xFD
BUTTON 9=0xFC

[GAMEPAD PRO USB.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.33]
MapExists=1

[GamePad Pro USB.Genre.33]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 5=0x6
BUTTON 7=0xFE
BUTTON 8=0xFD
BUTTON 9=0xFC

[GAMEPAD PRO USB.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.34]
MapExists=1

[GAMEPAD PRO USB.Genre.34]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x2
BUTTON 1=0x1
BUTTON 2=0x5
BUTTON 3=0x4
BUTTON 4=0xFE
BUTTON 5=0x3
BUTTON 8=0xFD
BUTTON 9=0xFC

[GAMEPAD PRO USB.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.35]
MapExists=1

[GAMEPAD PRO USB.Genre.35]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x2
BUTTON 1=0x3
BUTTON 2=0x4
BUTTON 3=0xFD
BUTTON 4=0x5
BUTTON 5=0xFE
BUTTON 8=0x1
BUTTON 9=0xFC

[GAMEPAD PRO USB.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.36]
MapExists=1

[GAMEPAD PRO USB.Genre.36]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x2
BUTTON 1=0x3
BUTTON 2=0x4
BUTTON 3=0xFD
BUTTON 4=0x5
BUTTON 5=0xFE
BUTTON 8=0x1
BUTTON 9=0xFC

[GAMEPAD PRO USB.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.37]
MapExists=1

[GAMEPAD PRO USB.Genre.37]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x2
BUTTON 1=0x3
BUTTON 2=0x4
BUTTON 3=0xFD
BUTTON 4=0x5
BUTTON 5=0xFE
BUTTON 8=0x1
BUTTON 9=0xFC

[GAMEPAD PRO USB.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.38]
MapExists=1

[GAMEPAD PRO USB.Genre.38]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x2
BUTTON 1=0x3
BUTTON 2=0x4
BUTTON 3=0xFD
BUTTON 4=0x5
BUTTON 5=0xFE
BUTTON 8=0x1
BUTTON 9=0xFC

[GAMEPAD PRO USB.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.39]
MapExists=1

[GAMEPAD PRO USB.Genre.39]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x6
BUTTON 1=0x4
BUTTON 2=0x2
BUTTON 3=0xFD
BUTTON 4=0x8
BUTTON 5=0xB
BUTTON 6=0xA
BUTTON 7=0xD
BUTTON 8=0x1
BUTTON 9=0x3
[GAMEPAD PRO USB.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.40]
MapExists=1

[GAMEPAD PRO USB.Genre.40]
MapExists=1
X AXIS=0x1
Y AXIS=0x3
BUTTON 0=0x8
BUTTON 1=0x4
BUTTON 2=0x7
BUTTON 3=0x2
BUTTON 4=0x5
BUTTON 5=0x6
BUTTON 6=0xFD
BUTTON 7=0x3
BUTTON 8=0x1
BUTTON 9=0xFC

[GAMEPAD PRO USB.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.41]
MapExists=1

[GAMEPAD PRO USB.Genre.41]
MapExists=1
X AXIS=0x1
Y AXIS=0x4
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x6
BUTTON 4=0x4
BUTTON 5=0x5
BUTTON 6=0x7
BUTTON 7=0x8
BUTTON 8=0xFD
BUTTON 9=0xFC

[Gravis GamePad Pro (GamePort)]
VID=0x428
PID=0x4901
Name=Gravis GamePad Pro (GamePort)
ImageFileName.0=GR4001_G.PNG
Controls=Y AXIS GP,X AXIS GP,BUTTON 0 GP,BUTTON 1 GP,BUTTON 2 GP,BUTTON 3 GP,BUTTON 4 GP,BUTTON 5 GP,BUTTON 6 GP,BUTTON 7 GP,BUTTON 8 GP,BUTTON 9 GP

[Y Axis GP]
UsagePage=0x1
Usage=0x31
Linedata.0=(28,119),(28,159),(116,159)
Align.0=TL
CalloutMax.0=(0,103),(125,172)
Type=0x102
Name=Y AXIS

[X Axis GP]
UsagePage=0x1
Usage=0x30
Linedata.0=(40,246),(40,186),(107,186)
Align.0=L
CalloutMax.0=(0,218),(103,299)
Type=0x2
Name=X AXIS

[BUTTON 0 GP]
UsagePage=0x9
Usage=0x1
Linedata.0=(227,116),(252,116)
Align.0=TR
CalloutMax.0=(125,106),(233,156)
Type=0x4
Name=BUTTON 0

[BUTTON 1 GP]
UsagePage=0x9
Usage=0x2
Linedata.0=(287,175),(287,131)
Align.0=T
CalloutMax.0=(238,167),(375,233)
Type=0x104
Name=BUTTON 1

[BUTTON 2 GP]
UsagePage=0x9
Usage=0x3
Linedata.0=(346,108),(297,108),(297,96)
Align.0=TL
CalloutMax.0=(344,99),(429,167)
Type=0x204
Name=BUTTON 2

[BUTTON 3 GP]
UsagePage=0x9
Usage=0x4
Linedata.0=(387,74),(263,74)
Align.0=R
CalloutMax.0=(249,45),(429,99)
Type=0x304
Name=BUTTON 3

[BUTTON 4 GP]
UsagePage=0x9
Usage=0x5
Linedata.0=(122,82),(90,82),(90,101)
Align.0=B
CalloutMax.0=(105,39),(216,97)
Type=0x404
Name=BUTTON 4

[BUTTON 5 GP]
UsagePage=0x9
Usage=0x6
Linedata.0=(310,36),(244,36)
Align.0=BL
CalloutMax.0=(307,0),(429,45)
Type=0x504
Name=BUTTON 5

[BUTTON 6 GP]
UsagePage=0x9
Usage=0x7
Linedata.0=(65,60),(65,117)
Align.0=BR
CalloutMax.0=(0,0),(98,69)
Type=0x604
Name=BUTTON 6

[BUTTON 7 GP]
UsagePage=0x9
Usage=0x8
Linedata.0=(210,19),(210,53)
Align.0=B
CalloutMax.0=(103,0),(297,28)
Type=0x704
Name=BUTTON 7

[BUTTON 8 GP]
UsagePage=0x9
Usage=0x9
Linedata.0=(163,254),(163,165),(188,165)
Align.0=R
CalloutMax.0=(102,232),(201,310)
Type=0x804
Name=BUTTON 8

[BUTTON 9 GP]
UsagePage=0x9
Usage=0xA
Linedata.0=(224,255),(224,150)
Align.0=L
CalloutMax.0=(209,233),(338,310)
Type=0x904
Name=BUTTON 9
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dinput\ihvmap\gr4001_g.ini ===
[DirectInput]
DirectXVersion=0x800
Devices=Gravis GamePad Pro

[Gravis GamePad Pro]
Name=Gravis GamePad Pro
Controls=Y AXIS,X AXIS,BUTTON 0,BUTTON 1,BUTTON 2,BUTTON 3,BUTTON 4,BUTTON 5,BUTTON 6,BUTTON 7,BUTTON 8,BUTTON 9
ImageFileName.0=GR4001_G.png

[Y Axis]
UsagePage=0x1
Usage=0x31
Linedata.0=(13,136),(13,158),(114,158)
Align.0=TL
CalloutMax.0=(0,125),(104,187)
Type=0x102
Name=Y AXIS

[X Axis]
UsagePage=0x1
Usage=0x30
Linedata.0=(22,258),(22,188),(104,188)
Align.0=L
CalloutMax.0=(0,229),(103,310)
Type=0x2
Name=X AXIS

[BUTTON 0]
UsagePage=0x9
Usage=0x1
Linedata.0=(232,130),(251,130),(251,114)
Align.0=R
CalloutMax.0=(125,106),(233,156)
Type=0x4
Name=BUTTON 0

[BUTTON 1]
UsagePage=0x9
Usage=0x2
Linedata.0=(287,191),(287,128)
Align.0=C
CalloutMax.0=(238,167),(375,233)
Type=0x104
Name=BUTTON 1

[BUTTON 2]
UsagePage=0x9
Usage=0x3
Linedata.0=(343,132),(318,132),(318,95),(299,95)
Align.0=L
CalloutMax.0=(344,99),(429,167)
Type=0x204
Name=BUTTON 2

[BUTTON 3]
UsagePage=0x9
Usage=0x4
Linedata.0=(304,70),(266,70),(266,78)
Align.0=R
CalloutMax.0=(249,45),(429,99)
Type=0x304
Name=BUTTON 3

[BUTTON 4]
UsagePage=0x9
Usage=0x5
Linedata.0=(150,92),(150,102),(92,102)
Align.0=B
CalloutMax.0=(98,37),(209,95)
Type=0x404
Name=BUTTON 4

[BUTTON 5]
UsagePage=0x9
Usage=0x6
Linedata.0=(364,16),(364,37),(242,37)
Align.0=T
CalloutMax.0=(307,0),(429,45)
Type=0x504
Name=BUTTON 5

[BUTTON 6]
UsagePage=0x9
Usage=0x7
Linedata.0=(15,50),(15,118),(62,118)
Align.0=L
CalloutMax.0=(0,0),(98,69)
Type=0x604
Name=BUTTON 6

[BUTTON 7]
UsagePage=0x9
Usage=0x8
Linedata.0=(190,23),(190,34),(209,34),(209,57)
Align.0=C
CalloutMax.0=(103,0),(297,28)
Type=0x704
Name=BUTTON 7

[BUTTON 8]
UsagePage=0x9
Usage=0x9
Linedata.0=(163,254),(163,165),(188,165)
Align.0=R
CalloutMax.0=(102,232),(201,310)
Type=0x804
Name=BUTTON 8

[BUTTON 9]
UsagePage=0x9
Usage=0xA
Linedata.0=(219,252),(219,151)
Align.0=L
CalloutMax.0=(209,233),(338,310)
Type=0x904
Name=BUTTON 9

[Gravis GamePad Pro.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.2]
MapExists=1

[Gravis GamePad Pro.Genre.2]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x8
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 4=0x7
BUTTON 5=0x6
BUTTON 6=0x5
BUTTON 7=0x4
BUTTON 8=0xFD
BUTTON 9=0xFC

[Gravis GamePad Pro.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.3]
MapExists=1

[Gravis GamePad Pro.Genre.3]
MapExists=1
X AXIS=0x1
Y AXIS=0x3
BUTTON 0=0x1
BUTTON 1=0x6
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 4=0x4
BUTTON 5=0x5
BUTTON 6=0xFE
BUTTON 8=0xFD
BUTTON 9=0xFC

[Gravis GamePad Pro.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.4]
MapExists=1

[Gravis GamePad Pro.Genre.4]
MapExists=1
X AXIS=0x1
Y AXIS=0x3
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0xFE
BUTTON 4=0x4
BUTTON 6=0x5
BUTTON 8=0xFD
BUTTON 9=0xFC

[Gravis GamePad Pro.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.5]
MapExists=1

[Gravis GamePad Pro.Genre.5]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x5
BUTTON 4=0x7
BUTTON 5=0x4
BUTTON 6=0x8
BUTTON 7=0x6
BUTTON 8=0xFD
BUTTON 9=0xFC

[Gravis GamePad Pro.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.6]
MapExists=1

[Gravis GamePad Pro.Genre.6]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x5
BUTTON 4=0x6
BUTTON 5=0x4
BUTTON 6=0xFE
BUTTON 8=0xFD
BUTTON 9=0xFC

[Gravis GamePad Pro.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.7]
MapExists=1

[Gravis GamePad Pro.Genre.7]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 4=0x6
BUTTON 5=0xFE
BUTTON 6=0x7
BUTTON 7=0x5
BUTTON 8=0xFD
BUTTON 9=0xFC

[Gravis GamePad Pro.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.8]
MapExists=1

[Gravis GamePad Pro.Genre.8]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 4=0x6
BUTTON 5=0x5
BUTTON 6=0x7
BUTTON 7=0xA
BUTTON 8=0x8
BUTTON 9=0xFC

[Gravis GamePad Pro.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.9]
MapExists=1

[Gravis GamePad Pro.Genre.9]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x3
BUTTON 2=0x2
BUTTON 3=0x4
BUTTON 4=0x8
BUTTON 5=0x6
BUTTON 6=0x7
BUTTON 7=0x5
BUTTON 8=0xFD
BUTTON 9=0xFC

[Gravis GamePad Pro.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.10]
MapExists=1

[Gravis GamePad Pro.Genre.10]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x2
BUTTON 1=0x4
BUTTON 2=0x3
BUTTON 3=0x1
BUTTON 4=0x9
BUTTON 5=0x5
BUTTON 6=0x7
BUTTON 7=0x8
BUTTON 8=0xA
BUTTON 9=0xFC

[Gravis GamePad Pro.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.11]
MapExists=1

[Gravis GamePad Pro.Genre.11]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x6
BUTTON 2=0x2
BUTTON 3=0x7
BUTTON 4=0x5
BUTTON 5=0x4
BUTTON 6=0x8
BUTTON 7=0x3
BUTTON 8=0x9
BUTTON 9=0xFC

[Gravis GamePad Pro.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.12]
MapExists=1

[Gravis GamePad Pro.Genre.12]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 5=0x6
BUTTON 6=0x7
BUTTON 7=0x8
BUTTON 8=0xFD
BUTTON 9=0xFC

[Gravis GamePad Pro.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.13]
MapExists=1

[Gravis GamePad Pro.Genre.13]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 5=0x6
BUTTON 6=0x9
BUTTON 7=0xA
BUTTON 8=0x7
BUTTON 9=0xFC

[Gravis GamePad Pro.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.14]
MapExists=1

[Gravis GamePad Pro.Genre.14]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x4
BUTTON 3=0x3
BUTTON 4=0x8
BUTTON 5=0x5
BUTTON 6=0x7
BUTTON 7=0x6
BUTTON 8=0xFD
BUTTON 9=0xFC

[Gravis GamePad Pro.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.15]
MapExists=1

[Gravis GamePad Pro.Genre.15]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x2
BUTTON 1=0x1
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 4=0x6
BUTTON 5=0x8
BUTTON 6=0x7
BUTTON 7=0x5
BUTTON 8=0x9
BUTTON 9=0xFC

[Gravis GamePad Pro.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.16]
MapExists=1

[Gravis GamePad Pro.Genre.16]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 5=0x6
BUTTON 6=0x7
BUTTON 7=0xFE
BUTTON 8=0xFD
BUTTON 9=0xFC

[Gravis GamePad Pro.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.17]
MapExists=1

[Gravis GamePad Pro.Genre.17]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x2
BUTTON 1=0x6
BUTTON 2=0x3
BUTTON 3=0x5
BUTTON 4=0x1
BUTTON 5=0x4
BUTTON 6=0x7
BUTTON 7=0x8
BUTTON 8=0xFD
BUTTON 9=0xFC

[Gravis GamePad Pro.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.18]
MapExists=1

[Gravis GamePad Pro.Genre.18]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 5=0x6
BUTTON 6=0x7
BUTTON 7=0x8
BUTTON 8=0xD
BUTTON 9=0xFC

[Gravis GamePad Pro.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.19]
MapExists=1

[Gravis GamePad Pro.Genre.19]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 5=0x6
BUTTON 6=0x7
BUTTON 7=0x8
BUTTON 8=0x9
BUTTON 9=0xFC

[Gravis GamePad Pro.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.20]
MapExists=1

[Gravis GamePad Pro.Genre.20]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0xFE
BUTTON 8=0xFD
BUTTON 9=0xFC

[Gravis GamePad Pro.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.21]
MapExists=1

[Gravis GamePad Pro.Genre.21]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x4
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 4=0x5
BUTTON 5=0x6
BUTTON 6=0x7
BUTTON 7=0x8
BUTTON 8=0x9
BUTTON 9=0xFC

[Gravis GamePad Pro.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.22]
MapExists=1

[Gravis GamePad Pro.Genre.22]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x2
BUTTON 1=0x4
BUTTON 2=0x3
BUTTON 3=0x1
BUTTON 4=0x5
BUTTON 5=0x6
BUTTON 6=0x7
BUTTON 7=0x8
BUTTON 8=0x9
BUTTON 9=0xFC

[Gravis GamePad Pro.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.23]
MapExists=1

[Gravis GamePad Pro.Genre.23]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 4=0x6
BUTTON 5=0x5
BUTTON 6=0x7
BUTTON 7=0x8
BUTTON 8=0x9
BUTTON 9=0xFC

[Gravis GamePad Pro.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.24]
MapExists=1

[Gravis GamePad Pro.Genre.24]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x5
BUTTON 3=0x6
BUTTON 4=0x8
BUTTON 5=0x3
BUTTON 6=0x7
BUTTON 7=0x4
BUTTON 8=0xFD
BUTTON 9=0xFC

[Gravis GamePad Pro.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.25]
MapExists=1

[Gravis GamePad Pro.Genre.25]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 4=0x6
BUTTON 5=0x5
BUTTON 6=0x7
BUTTON 7=0x8
BUTTON 8=0x9
BUTTON 9=0xFC

[Gravis GamePad Pro.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.26]
MapExists=1

[Gravis GamePad Pro.Genre.26]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 4=0x6
BUTTON 5=0x5
BUTTON 6=0x7
BUTTON 7=0x8
BUTTON 8=0x9
BUTTON 9=0xFC

[Gravis GamePad Pro.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.27]
MapExists=1

[Gravis GamePad Pro.Genre.27]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 5=0xFD
BUTTON 6=0x6
BUTTON 7=0x7
BUTTON 8=0x8
BUTTON 9=0xFC

[Gravis GamePad Pro.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.28]
MapExists=1

[Gravis GamePad Pro.Genre.28]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x3
BUTTON 2=0x5
BUTTON 3=0x4
BUTTON 4=0xFE
BUTTON 5=0x6
BUTTON 7=0x2
BUTTON 8=0xFD
BUTTON 9=0xFC

[Gravis GamePad Pro.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.29]
MapExists=1

[Gravis GamePad Pro.Genre.29]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x2
BUTTON 1=0x4
BUTTON 2=0x6
BUTTON 3=0x1
BUTTON 4=0xFE
BUTTON 5=0x5
BUTTON 6=0x7
BUTTON 7=0x3
BUTTON 8=0xFD
BUTTON 9=0xFC

[Gravis GamePad Pro.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.30]
MapExists=1

[Gravis GamePad Pro.Genre.30]
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 4=0x9
BUTTON 5=0x6
BUTTON 6=0xA
BUTTON 7=0x7
BUTTON 8=0x5
BUTTON 9=0xFC

[Gravis GamePad Pro.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.31]
MapExists=1

[Gravis GamePad Pro.Genre.31]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x9
BUTTON 4=0x8
BUTTON 5=0x5
BUTTON 6=0x7
BUTTON 7=0x6
BUTTON 8=0x4
BUTTON 9=0xFC

[Gravis GamePad Pro.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.32]
MapExists=1

[Gravis GamePad Pro.Genre.32]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 4=0x7
BUTTON 5=0x5
BUTTON 6=0x6
BUTTON 7=0xFE
BUTTON 8=0xFD
BUTTON 9=0xFC

[Gravis GamePad Pro.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.33]
MapExists=1

[Gravis GamePad Pro.Genre.33]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 5=0x6
BUTTON 7=0xFE
BUTTON 8=0xFD
BUTTON 9=0xFC

[Gravis GamePad Pro.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.34]
MapExists=1

[Gravis GamePad Pro.Genre.34]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x2
BUTTON 1=0x1
BUTTON 2=0x5
BUTTON 3=0x4
BUTTON 4=0xFE
BUTTON 5=0x3
BUTTON 8=0xFD
BUTTON 9=0xFC

[Gravis GamePad Pro.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.35]
MapExists=1

[Gravis GamePad Pro.Genre.35]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x2
BUTTON 1=0x3
BUTTON 2=0x4
BUTTON 3=0xFD
BUTTON 4=0x5
BUTTON 5=0xFE
BUTTON 8=0x1
BUTTON 9=0xFC

[Gravis GamePad Pro.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.36]
MapExists=1

[Gravis GamePad Pro.Genre.36]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x2
BUTTON 1=0x3
BUTTON 2=0x4
BUTTON 3=0xFD
BUTTON 4=0x5
BUTTON 5=0xFE
BUTTON 8=0x1
BUTTON 9=0xFC

[Gravis GamePad Pro.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.37]
MapExists=1

[Gravis GamePad Pro.Genre.37]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x2
BUTTON 1=0x3
BUTTON 2=0x4
BUTTON 3=0xFD
BUTTON 4=0x5
BUTTON 5=0xFE
BUTTON 8=0x1
BUTTON 9=0xFC

[Gravis GamePad Pro.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.38]
MapExists=1

[Gravis GamePad Pro.Genre.38]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x2
BUTTON 1=0x3
BUTTON 2=0x4
BUTTON 3=0xFD
BUTTON 4=0x5
BUTTON 5=0xFE
BUTTON 8=0x1
BUTTON 9=0xFC

[Gravis GamePad Pro.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.39]
MapExists=1

[Gravis GamePad Pro.Genre.39]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x6
BUTTON 1=0x4
BUTTON 2=0x2
BUTTON 3=0xFD
BUTTON 4=0x8
BUTTON 5=0xB
BUTTON 6=0xA
BUTTON 7=0xD
BUTTON 8=0x1
BUTTON 9=0x3
[Gravis GamePad Pro.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.40]
MapExists=1

[Gravis GamePad Pro.Genre.40]
MapExists=1
X AXIS=0x1
Y AXIS=0x3
BUTTON 0=0x8
BUTTON 1=0x4
BUTTON 2=0x7
BUTTON 3=0x2
BUTTON 4=0x5
BUTTON 5=0x6
BUTTON 6=0xFD
BUTTON 7=0x3
BUTTON 8=0x1
BUTTON 9=0xFC

[Gravis GamePad Pro.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.41]
MapExists=1

[Gravis GamePad Pro.Genre.41]
MapExists=1
X AXIS=0x1
Y AXIS=0x4
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x6
BUTTON 4=0x4
BUTTON 5=0x5
BUTTON 6=0x7
BUTTON 7=0x8
BUTTON 8=0xFD
BUTTON 9=0xFC

[Gravis GamePad Pro.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.1]
MapExists=1

[Gravis GamePad Pro.Genre.1]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 7=0x1
BUTTON 6=0x2
BUTTON 4=0x3
BUTTON 1=0x4
BUTTON 2=0x5
BUTTON 3=0x6
BUTTON 5=0x7
BUTTON 0=0x8
BUTTON 8=0x9
BUTTON 9=0xFC
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dinput\ihvmap\gr4005.ini ===
[DirectInput]
DirectXVersion=0x800
Devices=Gravis Eliminator GamePad Pro

[Gravis Eliminator GamePad Pro]
VID=1149
PID=16389
Name=Gravis Eliminator GamePad Pro
Controls=Y AXIS,X AXIS,BUTTON 0,BUTTON 1,BUTTON 2,BUTTON 3,BUTTON 4,BUTTON 5,BUTTON 6,BUTTON 7,BUTTON 8,BUTTON 9
ImageFileName.0=GR4005.PNG

[Y Axis]
UsagePage=0x1
Usage=0x31
Linedata.0=(110,185),(110,95)
Align.0=TR
CalloutMax.0=(0,186),(119,250)
Type=0x102
Name=Y AXIS

[X Axis]
UsagePage=0x1
Usage=0x30
Linedata.0=(52,116),(52,86),(89,86)
Align.0=T
CalloutMax.0=(0,117),(97,184)
Type=0x2
Name=X AXIS

[Button 0]
UsagePage=0x9
Usage=0x1
Linedata.0=(206,248),(206,95),(195,84)
Align.0=T
CalloutMax.0=(145,250),(271,305)
Type=0x4
Name=BUTTON 0

[Button 1]
UsagePage=0x9
Usage=0x2
Linedata.0=(302,194),(248,194),(248,116),(222,90)
Align.0=TL
CalloutMax.0=(303,185),(429,231)
Type=0x104
Name=BUTTON 1

[Button 2]
UsagePage=0x9
Usage=0x3
Linedata.0=(303,158),(260,158),(260,95),(233,68)
Align.0=L
CalloutMax.0=(303,132),(429,186)
Type=0x204
Name=BUTTON 2

[Button 3]
UsagePage=0x9
Usage=0x4
Linedata.0=(303,239),(218,239),(218,99),(204,69)
Align.0=TL
CalloutMax.0=(303,230),(429,304)
Type=0x304
Name=BUTTON 3

[Button 4]
UsagePage=0x9
Usage=0x5
Linedata.0=(127,23),(127,56),(62,56),(62,74)
Align.0=L
CalloutMax.0=(112,0),(298,33)
Type=0x404
Name=BUTTON 4

[Button 5]
UsagePage=0x9
Usage=0x6
Linedata.0=(310,5),(302,5),(302,50),(236,50),(236,56)
Align.0=TL
CalloutMax.0=(311,0),(429,57)
Type=0x504
Name=BUTTON 5

[Button 6]
UsagePage=0x9
Usage=0x7
Linedata.0=(16,32),(16,101),(42,101)
Align.0=L
CalloutMax.0=(0,0),(112,48)
Type=0x604
Name=BUTTON 6

[Button 7]
UsagePage=0x9
Usage=0x8
Linedata.0=(366,80),(366,71),(269,71)
Align.0=T
CalloutMax.0=(303,82),(429,134)
Type=0x704
Name=BUTTON 7

[Button 8]
UsagePage=0x9
Usage=0x9
Linedata.0=(122,260),(122,113),(162,113)
Align.0=TR
CalloutMax.0=(0,262),(135,309)
Type=0x804
Name=BUTTON 8

[Button 9]
UsagePage=0x9
Usage=0xA
Linedata.0=(190,140),(190,108)
Align.0=TR
CalloutMax.0=(128,141),(203,243)
Type=0x904
Name=BUTTON 9
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dinput\ihvmap\gr4003.ini ===
[DirectInput]
DirectXVersion=0x800
Devices=Xterminator Digital Gamepad,Xterminator Digital Gamepad (Game Port)

[Xterminator Digital GamePad]
VID=1149
PID=16387
Name=Gravis XXterminator Digital Gamepad
Controls=Y AXIS,X AXIS,Z AXIS,Z ROTATION,DIAL,X ROTATION,HAT SWITCH,BUTTON 0,BUTTON 1,BUTTON 2,BUTTON 3,BUTTON 4,BUTTON 5,BUTTON 6,BUTTON 7,BUTTON 8,BUTTON 9,BUTTON 10
ImageFileName.0=GR4003.PNG

[Y Axis]
UsagePage=0x1
Usage=0x31
Linedata.0=(82,89),(142,89),(156,83)
Align.0=C
CalloutMax.0=(0,74),(127,107)
Type=0x102
Name=Y AXIS

[X Axis]
UsagePage=0x1
Usage=0x30
Linedata.0=(83,57),(145,57),(151,75)
Align.0=C
CalloutMax.0=(0,45),(128,74)
Type=0x2
Name=X AXIS

[Z Axis]
UsagePage=0x1
Usage=0x32
Linedata.0=(247,237),(247,83)
Align.0=R
CalloutMax.0=(122,229),(269,268)
Type=0x202
Name=Z AXIS

[Z Rotation]
UsagePage=0x1
Usage=0x35
Linedata.0=(249,24),(197,71),(247,26),(266,80)
Align.0=L
CalloutMax.0=(237,0),(429,35)
Type=0x502
Name=Z ROTATION

[Dial]
UsagePage=0x1
Usage=0x37
Linedata.0=(85,114),(135,114),(135,101),(155,101)
Align.0=TR
CalloutMax.0=(0,106),(95,187)
Type=0x602
Name=DIAL

[X Rotation]
UsagePage=0x1
Usage=0x33
Linedata.0=(170,144),(154,144),(154,116)
Align.0=C
CalloutMax.0=(154,116),(226,173)
Type=0x702
Name=X ROTATION

[Hat Switch]
UsagePage=0x1
Usage=0x39
Linedata.0=(175,201),(226,201),(226,119),(215,119)
Align.0=C
CalloutMax.0=(113,175),(202,229)
Type=0x10
Name=HAT SWITCH

[Button 0]
UsagePage=0x9
Usage=0x1
Linedata.0=(294,291),(282,291),(282,140),(255,113)
Align.0=L
CalloutMax.0=(295,274),(430,310)
Type=0x4
Name=BUTTON 0

[Button 1]
UsagePage=0x9
Usage=0x2
Linedata.0=(348,254),(288,254),(288,126),(269,110)
Align.0=C
CalloutMax.0=(307,241),(430,273)
Type=0x104
Name=BUTTON 1

[Button 2]
UsagePage=0x9
Usage=0x3
Linedata.0=(314,215),(303,215),(303,117),(288,110)
Align.0=L
CalloutMax.0=(314,200),(429,235)
Type=0x204
Name=BUTTON 2

[Button 3]
UsagePage=0x9
Usage=0x4
Linedata.0=(390,51),(283,51),(237,78),(239,104)
Align.0=R
CalloutMax.0=(287,36),(430,72)
Type=0x304
Name=BUTTON 3

[Button 4]
UsagePage=0x9
Usage=0x5
Linedata.0=(351,80),(280,80),(261,99)
Align.0=TL
CalloutMax.0=(337,72),(430,131)
Type=0x404
Name=BUTTON 4

[Button 5]
UsagePage=0x9
Usage=0x6
Linedata.0=(356,164),(326,164),(326,102),(290,102)
Align.0=C
CalloutMax.0=(323,132),(430,199)
Type=0x504
Name=BUTTON 5

[Button 6]
UsagePage=0x9
Usage=0x7
Linedata.0=(96,186),(96,143),(135,143)
Align.0=TR
CalloutMax.0=(0,187),(104,248)
Type=0x604
Name=BUTTON 6

[Button 7]
UsagePage=0x9
Usage=0x8
Linedata.0=(268,287),(275,287),(275,168),(253,168)
Align.0=R
CalloutMax.0=(122,268),(269,310)
Type=0x704
Name=BUTTON 7

[Button 8]
UsagePage=0x9
Usage=0x9
Linedata.0=(130,8),(230,8),(230,71)
Align.0=C
CalloutMax.0=(0,0),(223,21)
Type=0x804
Name=BUTTON 8

[Button 9]
UsagePage=0x9
Usage=0xA
Linedata.0=(109,246),(109,228),(235,228),(235,132)
Align.0=TR
CalloutMax.0=(0,248),(121,310)
Type=0x904
Name=BUTTON 9

[Button 10]
UsagePage=0x9
Usage=0xB
Linedata.0=(115,32),(223,32),(223,75)
Align.0=C
CalloutMax.0=(0,20),(195,44)
Type=0xA04
Name=BUTTON 10

[Xterminator Digital Gamepad (Game Port)]
VID=0x47D
PID=0x4903
Name=Gravis XXterminator Digital Gamepad (Game Port)
ImageFileName.0=GR4003.png
Controls=Y AXIS,X AXIS,Z AXIS,Z ROTATION,DIAL,X ROTATION,HAT SWITCH,BUTTON 0,BUTTON 1,BUTTON 2,BUTTON 3,BUTTON 4,BUTTON 5,BUTTON 6,BUTTON 7,BUTTON 8,BUTTON 9,BUTTON 10
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dinput\ihvmap\hammer.ini ===
[DirectInput]
DirectXVersion=0x800
Devices=INTERACT/3DFX SV-262A HAMMERHEAD FX,INTERACT/3DFX SV-262 HAMMERHEAD FX

[InterAct/3dfx SV-262A HammerHead Fx]
Name=InterAct/3dfxx SV-262A HammerHead Fxx
Controls=X AXIS,Y AXIS,Z AXIS,Z ROTATION,BUTTON 0,BUTTON 1,BUTTON 2,BUTTON 3,BUTTON 4,BUTTON 5,BUTTON 6,BUTTON 7,BUTTON 8,BUTTON 9,BUTTON 10,BUTTON 11,HAT SWITCH,CTRL514
VID=0x5FD
PID=0x262A
ImageFileName.0=SV-262E1.PNG
ImageFileName.1=SV-262E3.PNG
ImageFileName.2=SV-262E4.PNG

[X Axis]
Type=0x2
UsagePage=0x1
Usage=0x30
Name=X AXIS
Align.1=BL
CallOutMax.1=(296,17),(386,59)
LineData.1=(310,60),(310,76),(268,76)

[Y AXIS]
Type=0x102
UsagePage=0x1
Usage=0x31
Name=Y AXIS
Align.1=B
CallOutMax.1=(197,0),(290,37)
LineData.1=(242,37),(242,64)

[Z AXIS]
Type=0x202
UsagePage=0x1
Usage=0x32
Name=Z AXIS
Align.1=BR
CallOutMax.1=(5,20),(90,61)
LineData.1=(77,58),(77,74),(124,74)

[Z ROTATION]
Type=0x502
UsagePage=0x1
Usage=0x35
Name=Z ROTATION
Align.1=B
CallOutMax.1=(103,0),(196,37)
LineData.1=(144,37),(144,64)

[Button 0]
Type=0x4
UsagePage=0x9
Usage=0x1
Name=BUTTON 0
Align.0=T
CallOutMax.0=(165,211),(236,289)
LineData.0=(223,207),(223,87)

[Button 1]
Type=0x104
UsagePage=0x9
Usage=0x2
Name=BUTTON 1
Align.0=TR
CallOutMax.0=(0,184),(63,298)
LineData.0=(40,183),(40,59),(218,59)

[Button 2]
Type=0x204
UsagePage=0x9
Usage=0x3
Name=BUTTON 2
Align.0=R
CallOutMax.0=(10,5),(211,40)
LineData.0=(211,19),(246,19),(246,38)

[Button 11]
Type=0xB04
UsagePage=0x9
Usage=0xC
Name=BUTTON 11
Align.0=TR
CallOutMax.0=(75,199),(160,247)
LineData.0=(157,203),(194,203),(194,98)

[Hat Switch]
Type=0x10
UsagePage=0x1
Usage=0x39
Name=HAT SWITCH
Align.1=T
CallOutMax.1=(379,80),(422,267)
LineData.1=(374,104),(328,104)

[Button 3]
Type=0x304
UsagePage=0x9
Usage=0x4
Name=BUTTON 3
Align.0=L
CallOutMax.0=(298,227),(419,291)
LineData.0=(295,259),(248,259),(248,97)

[Button 4]
Type=0x404
UsagePage=0x9
Usage=0x5
Name=BUTTON 4
Align.0=L
CallOutMax.0=(344,67),(422,139)
LineData.0=(341,101),(258,101),(258,77)

[Button 5]
Type=0x504
UsagePage=0x9
Usage=0x6
Name=BUTTON 5
Align.0=C
CallOutMax.0=(332,19),(423,55)
LineData.0=(331,36),(264,36),(264,47)

[Button 6]
Type=0x604
UsagePage=0x9
Usage=0x7
Name=BUTTON 6
Align.1=T
CallOutMax.1=(240,250),(367,297)
LineData.1=(305,244),(305,212)

[Button 7]
Type=0x704
UsagePage=0x9
Usage=0x8
Name=BUTTON 7
Align.1=T
CallOutMax.1=(11,247),(159,301)
LineData.1=(83,242),(83,213)

[Button 8]
Type=0x804
UsagePage=0x9
Usage=0x9
Name=BUTTON 8
Align.2=T
CallOutMax.2=(200,215),(291,302)
LineData.2=(252,213),(252,102),(293,102)

[Button 10]
Type=0xA04
UsagePage=0x9
Usage=0xB
Name=BUTTON 10
Align.0=T
CallOutMax.0=(81,154),(159,199)
LineData.0=(134,155),(134,89),(174,89)

[Button 9]
Type=0x904
UsagePage=0x9
Usage=0xA
Name=BUTTON 9
Align.2=T
CallOutMax.2=(92,217),(189,301)
LineData.2=(132,212),(132,100),(93,100)

[INTERACT/3DFX SV-262 HAMMERHEAD FX]
Name=INTERACT SV-262 HAMMERHEAD FXX
Controls=CTRL16777218,CTRL33556228,CTRL33555972,CTRL33556740,CTRL33554692,CTRL16777730,CTRL16,CTRL33556484,CTRL33555204,CTRL33554948,CTRL33555716,CTRL33554436,CTRL33555460,CTRL16777474,CTRL1282
ImageFileName.0=SV-262E1.PNG
ImageFormat.0=BMP
ImageFileName.1=SV-262E3.PNG
ImageFormat.1=BMP
ImageFileName.2=SV-262E4.PNG
ImageFormat.2=BMP

[CTRL16777218]
Type=0x1000002
Name=X AXIS
Align.1=BL
CallOutMax.1=(296,17),(386,59)
LineData.1=(310,60),(310,76),(268,76)

[CTRL33556228]
Type=0x2000704
Name=R
Align.1=T
CallOutMax.1=(11,247),(159,301)
LineData.1=(83,242),(83,213)

[CTRL33555972]
Type=0x2000604
Name=L
Align.1=T
CallOutMax.1=(240,250),(367,297)
LineData.1=(305,244),(305,212)

[CTRL33556740]
Type=0x2000904
Name=R1
Align.2=T
CallOutMax.2=(92,217),(189,301)
LineData.2=(132,212),(132,100),(93,100)

[CTRL33554692]
Type=0x2000104
Name=BUTTON B
Align.0=TR
CallOutMax.0=(0,184),(63,298)
LineData.0=(40,183),(40,59),(218,59)

[CTRL16777730]
Type=0x1000202
Name=I AXIS
Align.1=B
CallOutMax.1=(1,27),(79,70)
LineData.1=(35,72),(35,76),(120,76)

[CTRL16]
Type=0x10
Name=POV 0
Align.1=T
CallOutMax.1=(379,80),(422,267)
LineData.1=(374,104),(328,104)

[CTRL33556484]
Type=0x2000804
Name=L1
Align.2=T
CallOutMax.2=(200,215),(291,302)
LineData.2=(252,213),(252,102),(293,102)

[CTRL33555204]
Type=0x2000304
Name=BUTTON D
Align.0=L
CallOutMax.0=(298,227),(419,291)
LineData.0=(295,259),(248,259),(248,97)

[CTRL33554948]
Type=0x2000204
Name=BUTTON C
Align.0=R
CallOutMax.0=(10,5),(211,40)
LineData.0=(211,19),(246,19),(246,38)

[CTRL33555716]
Type=0x2000504
Name=F
Align.0=C
CallOutMax.0=(332,19),(423,55)
LineData.0=(331,36),(264,36),(264,47)

[CTRL33554436]
Type=0x2000004
Name=BUTTON A
Align.0=T
CallOutMax.0=(165,211),(236,289)
LineData.0=(223,207),(223,87)

[CTRL33555460]
Type=0x2000404
Name=E
Align.0=L
CallOutMax.0=(344,67),(422,139)
LineData.0=(341,101),(258,101),(258,77)

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.2]
MapExists=1

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Genre.2]
MapExists=1
CTRL16777218=0x1
CTRL33556740=0x1
CTRL33556484=0x2
CTRL33554436=0x3
CTRL16777730=0x4
CTRL33556228=0x4
CTRL33555972=0x5
CTRL33555204=0x6
CTRL33554692=0x7
CTRL33555460=0x8
CTRL33554948=0xFE
CTRL33555716=0xFC

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.3]
MapExists=1

[CTRL16777474]
Type=0x1000102
Name=Y AXIS
Align.1=B
CallOutMax.1=(197,0),(290,37)
LineData.1=(242,37),(242,64)

[CTRL1282]
Type=0x502
Name=RZ-AXIS
Align.1=B
CallOutMax.1=(103,0),(196,37)
LineData.1=(144,37),(144,64)

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Genre.3]
MapExists=1
CTRL16777218=0x1
CTRL16777474=0x2
CTRL33556228=0x1
CTRL33555972=0x2
CTRL33556740=0x3
CTRL33554436=0xFD
CTRL16=0x1
CTRL16777730=0x5
CTRL33555204=0x4
CTRL33554692=0x5
CTRL33556484=0x6
CTRL33554948=0xFE
CTRL33555716=0xFC

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.41]
MapExists=1

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Genre.41]
MapExists=1
CTRL16777218=0x1
CTRL16777730=0x2
CTRL16777474=0x3
CTRL33556228=0x1
CTRL33555972=0x2
CTRL33556740=0x3
CTRL33556484=0x4
CTRL33554436=0x5
CTRL33555204=0x6
CTRL33554692=0xFD
CTRL33554948=0x7
CTRL33555716=0x8
CTRL33555460=0xFC

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.7]
MapExists=1

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.8]
MapExists=1

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.9]
MapExists=1

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Genre.9]
MapExists=1
CTRL16777218=0x1
CTRL16777474=0x2
CTRL33556228=0x1
CTRL33555972=0x2
CTRL33554436=0x3
CTRL33555204=0x4
CTRL33556740=0x5
CTRL33556484=0x6
CTRL33554692=0xFD
CTRL16=0x1
CTRL33555460=0x7
CTRL1282=0x3
CTRL33555716=0x8
CTRL33554948=0xFE

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.10]
MapExists=1

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.11]
MapExists=1

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Genre.11]
MapExists=1
CTRL1282=0x1
CTRL16777474=0x2
CTRL33554436=0x1
CTRL33555204=0x2
CTRL33554692=0x3
CTRL33556228=0x4
CTRL33555972=0x5
CTRL33556740=0x6
CTRL33556484=0x7
CTRL33554948=0xFD
CTRL33555716=0x8
CTRL16777218=0x3
CTRL33555460=0xFC

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.12]
MapExists=1

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Genre.12]
MapExists=1
CTRL16777218=0x1
CTRL16777474=0x2
CTRL33556228=0x1
CTRL33555972=0x2
CTRL33556740=0x3
CTRL33556484=0x4
CTRL33554436=0x5
CTRL33555204=0xFD
CTRL33554692=0x6
CTRL33554948=0x7
CTRL33555716=0x8
CTRL33555460=0xFC

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.13]
MapExists=1

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Genre.13]
MapExists=1
CTRL1282=0x1
CTRL16777474=0x2
CTRL33556228=0x1
CTRL33554436=0x2
CTRL33555972=0x3
CTRL33555204=0x4
CTRL33556740=0x5
CTRL33556484=0x6
CTRL33555716=0xFD
CTRL16=0x1
CTRL33554948=0x8
CTRL16777218=0x3
CTRL33555460=0x9
CTRL33554692=0xA

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.14]
MapExists=1

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Genre.14]
MapExists=1
CTRL1282=0x1
CTRL16777474=0x2
CTRL33556228=0x1
CTRL33555972=0x2
CTRL33556740=0x3
CTRL33556484=0x4
CTRL33555204=0x5
CTRL33554436=0xFD
CTRL16=0x1
CTRL33555716=0x6
CTRL16777218=0x3
CTRL33555460=0x7
CTRL33554692=0x8
CTRL33554948=0xFE

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.15]
MapExists=1

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Genre.15]
MapExists=1
CTRL16777474=0x1
CTRL16777218=0x2
CTRL33555972=0x1
CTRL33556228=0x2
CTRL33556740=0x3
CTRL33556484=0x4
CTRL33554436=0x5
CTRL33555204=0x6
CTRL33554692=0x7
CTRL33555460=0x8
CTRL33555716=0xFD
CTRL33554948=0x9

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.16]
MapExists=1

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Genre.16]
MapExists=1
CTRL16777474=0x1
CTRL16777218=0x2
CTRL33555972=0x1
CTRL33556228=0x2
CTRL33556484=0x3
CTRL33556740=0x4
CTRL33554436=0x5
CTRL33555716=0xFD
CTRL33555204=0x6
CTRL33554692=0x7
CTRL33555460=0xFE
CTRL33554948=0xFC

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.17]
MapExists=1

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Genre.17]
MapExists=1
CTRL16777218=0x1
CTRL16777474=0x2
CTRL33556228=0x1
CTRL33555972=0x2
CTRL33554436=0x3
CTRL33555204=0x4
CTRL33554692=0x5
CTRL33555460=0x6
CTRL33554948=0x7
CTRL33555716=0x8

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.28]
MapExists=1

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.25]
MapExists=1

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.26]
MapExists=1

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.27]
MapExists=1

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Genre.27]
MapExists=1
CTRL16777474=0x1
CTRL16777218=0x2
CTRL33555204=0x1
CTRL33555460=0x2
CTRL33554436=0x3
CTRL33554692=0x4
CTRL16=0x1
CTRL33556484=0x5
CTRL33556228=0x6
CTRL33556740=0x7
CTRL33555972=0x8
CTRL33554948=0xFE
CTRL33555716=0xFC

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.24]
MapExists=1

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Genre.24]
MapExists=1
CTRL16777474=0x1
CTRL16777218=0x2
CTRL33556228=0x1
CTRL33555972=0x2
CTRL33554436=0x3
CTRL33555204=0x4
CTRL33555460=0x5
CTRL33554948=0x6
CTRL33555716=0xFD
CTRL16=0x1
CTRL33554692=0x7
CTRL33556740=0x8
CTRL33556484=0x9

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.29]
MapExists=1

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Genre.29]
MapExists=1
CTRL16777474=0x1
CTRL1282=0x2
CTRL33556228=0x1
CTRL33555972=0x2
CTRL33556740=0x3
CTRL33554436=0x4
CTRL33556484=0x5
CTRL33555204=0x6
CTRL33555460=0xFD
CTRL16=0x1
CTRL33554692=0x7
CTRL33554948=0xFE
CTRL33555716=0xFC

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.32]
MapExists=1

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.33]
MapExists=1

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.34]
MapExists=1

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Genre.34]
MapExists=1
CTRL16777474=0x1
CTRL16777218=0x2
CTRL33555204=0x1
CTRL33554436=0x2
CTRL33556740=0x3
CTRL33556228=0x4
CTRL33555972=0x5
CTRL33555716=0xFD
CTRL33554948=0xFE
CTRL33556484=0xFC

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.35]
MapExists=1

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Genre.35]
MapExists=1

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Genre.26]
MapExists=1
CTRL16777474=0x1
CTRL16777218=0x2
CTRL33555460=0x1
CTRL33554436=0x2
CTRL33555204=0x3
CTRL33554692=0x4
CTRL16=0x1
CTRL33556484=0x6
CTRL33556228=0x7
CTRL33556740=0x8
CTRL33555972=0x9
CTRL33554948=0xFE
CTRL33555716=0xFC

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Genre.25]
MapExists=1
CTRL16777474=0x1
CTRL16777218=0x2
CTRL33554436=0x1
CTRL33555460=0x2
CTRL33555204=0x3
CTRL33554692=0x4
CTRL16=0x1
CTRL33556484=0x6
CTRL33556228=0x7
CTRL33556740=0x8
CTRL33555972=0x9
CTRL33554948=0xFE
CTRL33555716=0xFC

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.30]
MapExists=1

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.31]
MapExists=1

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Genre.31]
MapExists=1
CTRL16777474=0x1
CTRL16777218=0x2
CTRL33554436=0x1
CTRL33555204=0x2
CTRL33556228=0x3
CTRL33555972=0x4
CTRL33554692=0x5
CTRL33556484=0x7
CTRL16=0x1
CTRL33555460=0x8
CTRL33555716=0x9
CTRL33554948=0xA
CTRL33556740=0xB

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.18]
MapExists=1

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Genre.18]
MapExists=1
CTRL16777474=0x1
CTRL16777218=0x2
CTRL33554948=0x1
CTRL33554436=0x2
CTRL33554692=0x3
CTRL33555460=0x4
CTRL33555716=0x5
CTRL33556228=0x6
CTRL33555204=0x7
CTRL33555972=0x8
CTRL16=0x1
CTRL33556740=0xB
CTRL33556484=0xC

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.19]
MapExists=1

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Genre.32]
MapExists=1
CTRL16777474=0x1
CTRL16777218=0x2
CTRL33556228=0x1
CTRL33555972=0x2
CTRL33554436=0x3
CTRL33555204=0x4
CTRL33555460=0x5
CTRL33555716=0xFD
CTRL16=0x1
CTRL33556740=0x6
CTRL33554692=0x7
CTRL33554948=0xFE
CTRL33556484=0xFC

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.20]
MapExists=1

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.21]
MapExists=1

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Genre.21]
MapExists=1
CTRL16777474=0x1
CTRL16777218=0x2
CTRL33556740=0x1
CTRL33554692=0x2
CTRL33554436=0x3
CTRL33555716=0x4
CTRL33554948=0x5
CTRL33555460=0x6
CTRL33556484=0xFD
CTRL33555204=0x7
CTRL33556228=0x8
CTRL33555972=0x9

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.23]
MapExists=1

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Genre.20]
MapExists=1
CTRL33556228=0x1
CTRL33555972=0x2
CTRL33554436=0x3
CTRL33554692=0xFD
CTRL33554948=0xFE
CTRL33555204=0xFC

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Genre.8]
MapExists=1
CTRL1282=0x1
CTRL16777474=0x2
CTRL33554436=0x1
CTRL33555204=0x2
CTRL33556228=0x3
CTRL33555972=0x4
CTRL33555460=0x5
CTRL33554692=0x6
CTRL33554948=0x7
CTRL33556740=0xFD
CTRL33556484=0x8
CTRL16=0x1
CTRL16777218=0x3
CTRL33555716=0xA

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Genre.10]
MapExists=1
CTRL16777218=0x1
CTRL16777474=0x2
CTRL33556740=0x1
CTRL33555716=0x2
CTRL33554948=0x3
CTRL33556484=0x4
CTRL33554436=0x5
CTRL33555460=0xFD
CTRL16=0x1
CTRL33555204=0x6
CTRL33555972=0x7
CTRL33556228=0x8
CTRL1282=0x3
CTRL33554692=0x9

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Genre.19]
MapExists=1
CTRL16777218=0x1
CTRL16777474=0x2
CTRL33554436=0x1
CTRL33555204=0x2
CTRL33555460=0x3
CTRL33554692=0x4
CTRL33554948=0x5
CTRL33555716=0x6
CTRL33556228=0x7
CTRL33556740=0xFD
CTRL33555972=0x8
CTRL33556484=0x9

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.22]
MapExists=1

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Genre.22]
MapExists=1
CTRL16777218=0x1
CTRL16777474=0x2
CTRL33554436=0x1
CTRL33555972=0x2
CTRL33556228=0x3
CTRL33554692=0x4
CTRL33554948=0x5
CTRL33556484=0xFD
CTRL33555204=0x6
CTRL33556740=0x7
CTRL33555460=0x8
CTRL33555716=0x9

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Genre.23]
MapExists=1
CTRL16777474=0x1
CTRL16777218=0x2
CTRL33556484=0x1
CTRL33556740=0x2
CTRL33554436=0x3
CTRL33554692=0x4
CTRL33555460=0x5
CTRL33555204=0x6
CTRL33554948=0x7
CTRL33555716=0x8
CTRL33556228=0x9
CTRL33555972=0xA

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Genre.28]
MapExists=1
CTRL16777218=0x1
CTRL1282=0x2
CTRL33556228=0x1
CTRL33555204=0x2
CTRL33555972=0x3
CTRL33555460=0x4
CTRL33554436=0x5
CTRL33554948=0xFD
CTRL16=0x1
CTRL33556740=0x6
CTRL33554692=0xFE
CTRL33555716=0xFC

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Genre.30]
MapExists=1
CTRL16777218=0x1
CTRL16777474=0x2
CTRL1282=0x3
CTRL33554436=0x1
CTRL33555460=0x2
CTRL33556228=0x3
CTRL33555972=0x4
CTRL33554692=0x5
CTRL16=0x1
CTRL33556740=0x8
CTRL33556484=0x9
CTRL33555204=0xB
CTRL33554948=0xC
CTRL33555716=0xD

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Genre.33]
MapExists=1
CTRL16777474=0x1
CTRL16777218=0x2
CTRL33555204=0x1
CTRL33555460=0x2
CTRL33554436=0x3
CTRL33556228=0x4
CTRL33555972=0x5
CTRL33555716=0xFD
CTRL16=0x1
CTRL33554948=0xFE
CTRL33556484=0xFC

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.39]
MapExists=1

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Genre.39]
MapExists=1

[AXISPAD]
VID=0x5FD
PID=0x3002
Name=AXISPAD

[AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.39]
MapExists=1

[AXISPAD.Genre.39]
MapExists=1

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Genre.7]
MapExists=1
CTRL16777218=0x1
CTRL16777474=0x2
CTRL33556228=0x1
CTRL33555972=0x2
CTRL33554436=0x3
CTRL33555204=0xFD
CTRL16=0x1
CTRL16777730=0x4
CTRL1282=0x5
CTRL33554692=0x4
CTRL33554948=0x5
CTRL33556740=0x6
CTRL33556484=0x7
CTRL33555460=0x8
CTRL33555716=0xFC

[AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.7]
MapExists=1

[AXISPAD.Genre.7]
MapExists=1

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.1]
MapExists=1

[INTERACT/3DFX SV-262 HAMMERHEAD FX.Genre.1]
MapExists=1
CTRL16777218=0x1
CTRL33556228=0x1
CTRL33555972=0x2
CTRL33556740=0x3
CTRL33554692=0xFD
CTRL16777730=0x4
CTRL16=0x1
CTRL33556484=0x4
CTRL33555204=0x5
CTRL33554948=0x6
CTRL33555716=0x7
CTRL33554436=0x8
CTRL33555460=0x9
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dinput\ihvmap\ia3002.ini ===
[DirectInput]
DirectXVersion=0x800
Devices=INTERACT AXISPAD

[INTERACT AXISPAD]
Name=InterAct AxxisPad
ImageFileName.0=IA3002_1.PNG
ImageFileName.1=IA3002_2.PNG
VID=1533
PID=12290
Controls=CTRL16,CTRL516,CTRL1028,CTRL772,CTRL1540,CTRL2052,CTRL1796,CTRL1284,CTRL1282,CTRL258,CTRL2,CTRL514,CTRL4,CTRL2052_1,CTRL2308

[CTRL16]
UsagePage=0x1
Usage=0x39
Type=0x10
Name=HAT SWITCH
Align.0=B
CallOutMax.0=(6,4),(127,56)
LineData.0=(52,55),(52,120),(67,120),(68,120)

[CTRL516]
UsagePage=0x9
Usage=0x2
Type=0x104
Name=BUTTON 1
Align.0=L
CallOutMax.0=(328,61),(427,121)
LineData.0=(326,92),(296,92)

[CTRL1028]
UsagePage=0x9
Usage=0x4
Type=0x304
Name=BUTTON 3
Align.0=TL
CallOutMax.0=(361,153),(429,238)
LineData.0=(358,158),(304,158),(304,134)

[CTRL772]
UsagePage=0x9
Usage=0x3
Type=0x204
Name=BUTTON 2
Align.0=TL
CallOutMax.0=(360,239),(429,309)
LineData.0=(367,246),(283,246),(283,158)

[CTRL1540]
UsagePage=0x9
Usage=0x6
Type=0x504
Name=BUTTON 5
Align.1=T
CallOutMax.1=(6,244),(95,308)
LineData.1=(45,240),(45,183),(56,183)

[CTRL2052]
UsagePage=0x9
Usage=0x8
Type=0x704
Name=BUTTON 7
Align.1=T
CallOutMax.1=(100,237),(204,306)
LineData.1=(149,234),(149,219),(117,219)

[CTRL1796]
UsagePage=0x9
Usage=0x7
Type=0x604
Name=BUTTON 6
Align.1=T
CallOutMax.1=(210,236),(312,305)
LineData.1=(259,234),(259,223),(276,223)

[CTRL1284]
UsagePage=0x9
Usage=0x5
Type=0x404
Name=BUTTON 4
Align.1=TL
CallOutMax.1=(354,201),(423,303)
LineData.1=(353,206),(340,206),(340,187),(333,187)

[CTRL1282]
UsagePage=0x1
Usage=0x35
Type=0x502
Name=Z ROTATION
Align.1=B
CallOutMax.1=(0,37),(92,70)
LineData.1=(44,69),(44,89),(123,89)

[CTRL258]
UsagePage=0x1
Usage=0x31
Type=0x102
Name=Y AXIS
Align.1=B
CallOutMax.1=(178,42),(264,73)
LineData.1=(216,71),(216,89),(221,89)

[CTRL2]
UsagePage=0x1
Usage=0x30
Type=0x2
Name=X AXIS
Align.1=BL
CallOutMax.1=(283,5),(403,74)
LineData.1=(302,78),(302,88),(268,88)

[CTRL514]
Type=0x202
UsagePage=0x1
Usage=0x32
Name=Z AXIS
Align.1=B
CallOutMax.1=(125,0),(228,42)
LineData.1=(174,43),(174,89),(170,89)


[CTRL4]
Type=0x4
Name=BUTTON 0
Align.0=B
CallOutMax.0=(222,0),(299,37)
LineData.0=(261,39),(261,106)
UsagePage=0x9
Usage=0x1

[CTRL260]
Type=0x104
Name=BUTTON 1
Align.0=TR
CallOutMax.0=(104,220),(196,305)
LineData.0=(184,218),(184,211),(257,211),(257,134)

[CTRL2052_1]
Type=0x804
UsagePage=0x9
Usage=0x9
Name=BUTTON 8
Align.0=T
CallOutMax.0=(105,262),(184,310)
LineData.0=(142,268),(142,180)

[CTRL2308]
Type=0x904
Name=BUTTON 9
Align.0=T
CallOutMax.0=(201,262),(280,310)
LineData.0=(238,268),(238,180)
UsagePage=0x9
Usage=0xA

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.2]
MapExists=1

[INTERACT AXISPAD.Genre.2]
MapExists=1
CTRL2=0x1
CTRL2052=0x1
CTRL1796=0x2
CTRL260=0x3
CTRL4=0xFD
CTRL1282=0x4
CTRL16=0x1
CTRL1540=0x4
CTRL1284=0x5
CTRL772=0x6
CTRL516=0x7
CTRL1028=0x8
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.3]
MapExists=1

[INTERACT AXISPAD.Genre.3]
MapExists=1
CTRL2=0x1
CTRL258=0x2
CTRL1540=0x1
CTRL1284=0x2
CTRL2052=0x3
CTRL260=0xFD
CTRL16=0x1
CTRL1282=0x5
CTRL772=0x4
CTRL516=0x5
CTRL1796=0x6
CTRL4=0xFE
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.41]
MapExists=1

[INTERACT AXISPAD.Genre.41]
MapExists=1
CTRL2=0x1
CTRL258=0x2
CTRL1282=0x4
CTRL1540=0x1
CTRL1284=0x2
CTRL2052=0x3
CTRL1796=0x4
CTRL772=0x5
CTRL516=0x6
CTRL4=0xFD
CTRL260=0x7
CTRL16=0x1
CTRL1028=0x8
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.7]
MapExists=1

[INTERACT AXISPAD.Genre.7]
MapExists=1
CTRL2=0x1
CTRL258=0x2
CTRL1540=0x1
CTRL1284=0x2
CTRL260=0x3
CTRL4=0xFD
CTRL16=0x1
CTRL1282=0x5
CTRL516=0x4
CTRL1028=0x5
CTRL2052=0x6
CTRL1796=0x7
CTRL772=0x8
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.9]
MapExists=1

[INTERACT AXISPAD.Genre.9]
MapExists=1
CTRL2=0x1
CTRL258=0x2
CTRL1540=0x1
CTRL1284=0x2
CTRL260=0x3
CTRL772=0x4
CTRL2052=0x5
CTRL1796=0x6
CTRL4=0xFD
CTRL16=0x1
CTRL1282=0x3
CTRL1028=0x8
CTRL516=0xFE
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.10]
MapExists=1

[INTERACT AXISPAD.Genre.10]
MapExists=1
CTRL2=0x1
CTRL258=0x2
CTRL2052=0x1
CTRL1028=0x2
CTRL1796=0x4
CTRL260=0x5
CTRL4=0xFD
CTRL16=0x1
CTRL772=0x6
CTRL1284=0x7
CTRL1540=0x8
CTRL1282=0x3
CTRL516=0x9
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.11]
MapExists=1

[INTERACT AXISPAD.Genre.11]
MapExists=1
CTRL1282=0x1
CTRL258=0x2
CTRL260=0x1
CTRL772=0x2
CTRL516=0x3
CTRL1540=0x4
CTRL1284=0x5
CTRL2052=0x6
CTRL1796=0x7
CTRL4=0xFD
CTRL16=0x1
CTRL1028=0x8
CTRL2=0x3
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.12]
MapExists=1

[INTERACT AXISPAD.Genre.12]
MapExists=1
CTRL2=0x1
CTRL258=0x2
CTRL1540=0x1
CTRL1284=0x2
CTRL2052=0x3
CTRL1796=0x4
CTRL260=0x5
CTRL4=0xFD
CTRL772=0x6
CTRL516=0x7
CTRL1028=0x8
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.13]
MapExists=1

[INTERACT AXISPAD.Genre.13]
MapExists=1
CTRL1282=0x1
CTRL258=0x2
CTRL1540=0x1
CTRL260=0x2
CTRL1284=0x3
CTRL772=0x4
CTRL2052=0x5
CTRL1796=0x6
CTRL4=0xFD
CTRL16=0x1
CTRL2=0x3
CTRL1028=0x9
CTRL516=0xA
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.14]
MapExists=1

[INTERACT AXISPAD.Genre.14]
MapExists=1
CTRL1282=0x1
CTRL258=0x2
CTRL1540=0x1
CTRL1284=0x2
CTRL2052=0x3
CTRL1796=0x4
CTRL772=0x5
CTRL4=0xFD
CTRL16=0x1
CTRL260=0x6
CTRL2=0x3
CTRL1028=0x7
CTRL516=0x8
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.15]
MapExists=1

[INTERACT AXISPAD.Genre.15]
MapExists=1
CTRL2=0x1
CTRL258=0x2
CTRL1284=0x1
CTRL1540=0x2
CTRL2052=0x3
CTRL1796=0x4
CTRL260=0x5
CTRL772=0x6
CTRL516=0x7
CTRL1028=0x8
CTRL4=0xFD
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.16]
MapExists=1

[INTERACT AXISPAD.Genre.16]
MapExists=1
CTRL2=0x1
CTRL258=0x2
CTRL1284=0x1
CTRL1540=0x2
CTRL1796=0x3
CTRL2052=0x4
CTRL260=0x5
CTRL4=0xFD
CTRL772=0x6
CTRL516=0x7
CTRL1028=0xFE
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.17]
MapExists=1

[INTERACT AXISPAD.Genre.17]
MapExists=1
CTRL2=0x1
CTRL258=0x2
CTRL1540=0x1
CTRL1284=0x2
CTRL260=0x3
CTRL772=0x4
CTRL516=0x5
CTRL1028=0x6
CTRL4=0xFD
CTRL2052=0x7
CTRL1796=0x8
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.18]
MapExists=1

[INTERACT AXISPAD.Genre.18]
MapExists=1
CTRL2=0x1
CTRL258=0x2
CTRL260=0x2
CTRL516=0x3
CTRL1028=0x4
CTRL1540=0x6
CTRL772=0x7
CTRL1284=0x8
CTRL4=0xFD
CTRL16=0x1
CTRL2052=0xB
CTRL1796=0xC
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.20]
MapExists=1

[INTERACT AXISPAD.Genre.20]
MapExists=1
CTRL1540=0x1
CTRL1284=0x2
CTRL772=0x3
CTRL4=0xFD
CTRL516=0xFE
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.21]
MapExists=1

[INTERACT AXISPAD.Genre.21]
MapExists=1
CTRL2=0x1
CTRL258=0x2
CTRL516=0x2
CTRL260=0x3
CTRL2052=0x4
CTRL1796=0x5
CTRL1028=0x6
CTRL4=0xFD
CTRL772=0x7
CTRL1540=0x8
CTRL1284=0x9
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.22]
MapExists=1

[INTERACT AXISPAD.Genre.22]
MapExists=1
CTRL2=0x1
CTRL258=0x2
CTRL260=0x1
CTRL1284=0x2
CTRL1540=0x3
CTRL516=0x4
CTRL2052=0x5
CTRL4=0xFD
CTRL772=0x6
CTRL1028=0x8
CTRL1796=0x9
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.23]
MapExists=1

[INTERACT AXISPAD.Genre.23]
MapExists=1
CTRL260=0x3
CTRL516=0x4
CTRL1028=0x5
CTRL772=0x6
CTRL4=0xFD
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.24]
MapExists=1

[INTERACT AXISPAD.Genre.24]
MapExists=1
CTRL2=0x1
CTRL258=0x2
CTRL1540=0x1
CTRL1284=0x2
CTRL260=0x3
CTRL772=0x4
CTRL1028=0x5
CTRL4=0xFD
CTRL16=0x1
CTRL516=0x7
CTRL2052=0x8
CTRL1796=0x9
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.25]
MapExists=1

[INTERACT AXISPAD.Genre.25]
MapExists=1
CTRL2=0x1
CTRL258=0x2
CTRL260=0x1
CTRL1028=0x2
CTRL772=0x3
CTRL516=0x4
CTRL4=0xFD
CTRL16=0x1
CTRL1796=0x6
CTRL1540=0x7
CTRL2052=0x8
CTRL1284=0x9
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.26]
MapExists=1

[INTERACT AXISPAD.Genre.26]
MapExists=1
CTRL2=0x1
CTRL258=0x2
CTRL1028=0x1
CTRL260=0x2
CTRL772=0x3
CTRL516=0x4
CTRL4=0xFD
CTRL16=0x1
CTRL1796=0x6
CTRL1540=0x7
CTRL2052=0x8
CTRL1284=0x9
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.27]
MapExists=1

[INTERACT AXISPAD.Genre.27]
MapExists=1
CTRL2=0x1
CTRL258=0x2
CTRL772=0x1
CTRL1028=0x2
CTRL260=0x3
CTRL516=0x4
CTRL4=0xFD
CTRL16=0x1
CTRL1796=0x5
CTRL1540=0x6
CTRL2052=0x7
CTRL1284=0x8
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.28]
MapExists=1

[INTERACT AXISPAD.Genre.28]
MapExists=1
CTRL2=0x1
CTRL1282=0x2
CTRL772=0x2
CTRL1028=0x4
CTRL260=0x5
CTRL4=0xFD
CTRL16=0x1
CTRL2052=0x6
CTRL516=0xFE
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.29]
MapExists=1

[INTERACT AXISPAD.Genre.29]
MapExists=1
CTRL2=0x1
CTRL1282=0x2
CTRL1540=0x1
CTRL1284=0x2
CTRL2052=0x3
CTRL260=0x4
CTRL1796=0x5
CTRL772=0x6
CTRL4=0xFD
CTRL16=0x1
CTRL516=0x7
CTRL1028=0xFE
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.30]
MapExists=1

[INTERACT AXISPAD.Genre.30]
MapExists=1
CTRL2=0x1
CTRL258=0x2
CTRL1282=0x3
CTRL260=0x1
CTRL1028=0x2
CTRL1540=0x3
CTRL1284=0x4
CTRL516=0x5
CTRL4=0xFD
CTRL16=0x1
CTRL2052=0x8
CTRL1796=0x9
CTRL772=0xB
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.31]
MapExists=1

[INTERACT AXISPAD.Genre.31]
MapExists=1
CTRL2=0x1
CTRL258=0x2
CTRL260=0x1
CTRL772=0x2
CTRL1540=0x3
CTRL1284=0x4
CTRL516=0x5
CTRL1796=0x7
CTRL4=0xFD
CTRL16=0x1
CTRL1028=0x8
CTRL2052=0xB
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.32]
MapExists=1

[INTERACT AXISPAD.Genre.32]
MapExists=1
CTRL2=0x1
CTRL258=0x2
CTRL1540=0x1
CTRL1284=0x2
CTRL260=0x3
CTRL772=0x4
CTRL1028=0x5
CTRL4=0xFD
CTRL16=0x1
CTRL2052=0x6
CTRL516=0x7
CTRL1796=0xFE
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.34]
MapExists=1

[INTERACT AXISPAD.Genre.34]
MapExists=1
CTRL2=0x1
CTRL258=0x2
CTRL772=0x1
CTRL260=0x2
CTRL2052=0x3
CTRL1540=0x4
CTRL1284=0x5
CTRL4=0xFD
CTRL1796=0xFE
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.8]
MapExists=1

[INTERACT AXISPAD.Genre.8]
MapExists=1
CTRL1282=0x1
CTRL258=0x2
CTRL260=0x1
CTRL772=0x2
CTRL1540=0x3
CTRL1284=0x4
CTRL1028=0x5
CTRL516=0x6
CTRL2052=0xFD
CTRL1796=0x8
CTRL16=0x1
CTRL2=0x3
CTRL4=0xFE
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.1]
MapExists=1

[INTERACT AXISPAD.Genre.1]
MapExists=1
CTRL2=0x1
CTRL1540=0x1
CTRL1284=0x2
CTRL2052=0x3
CTRL4612=0xFD
CTRL1282=0x4
CTRL16=0x1
CTRL1796=0x4
CTRL772=0x5
CTRL516=0x6
CTRL2052_1=0x7
CTRL4=0x8
CTRL1028=0x9
CTRL2308=0xE0
CTRL4868=0xFE
CTRL4356=0xFC
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dinput\ihvmap\ia3002_g.ini ===
[DirectInput]
DirectXVersion=0x800
Devices=INTERACT AXISPAD

[INTERACT AXISPAD]
Name=INTERACT I-73002 DUAL IMPACT PC
ImageFileName.0=IA3002_1.PNG
ImageFileName.1=IA3002_2.PNG
Controls=CTRL16,CTRL516,CTRL1028,CTRL772,CTRL1540,CTRL1796,CTRL1284,CTRL258,CTRL2,CTRL4,CTRL260,CTRL2308,CTRL2052

[CTRL16]
Type=0x10
Name=POV 0
Align.0=B
CallOutMax.0=(6,4),(127,56)
LineData.0=(52,55),(52,120),(67,120),(68,120)

[CTRL4]
Type=0x4
Name=BUTTON 0
Align.0=B
CallOutMax.0=(205,0),(312,34)
LineData.0=(260,26),(260,108)

[CTRL260]
Type=0x104
Name=BUTTON 1
Align.0=L
CallOutMax.0=(328,61),(427,121)
LineData.0=(326,92),(296,92)

[CTRL516]
Type=0x204
Name=BUTTON 2
Align.0=TL
CallOutMax.0=(360,239),(429,309)
LineData.0=(367,246),(283,246),(283,158)

[CTRL1028]
Type=0x404
Name=BUTTON 4
Align.1=TL
CallOutMax.1=(354,201),(423,303)
LineData.1=(353,206),(340,206),(340,187),(333,187)

[CTRL772]
Type=0x304
Name=BUTTON 3
Align.0=TL
CallOutMax.0=(361,153),(429,238)
LineData.0=(358,158),(304,158),(304,134)

[CTRL1540]
Type=0x604
Name=BUTTON 6
Align.1=T
CallOutMax.1=(210,241),(294,309)
LineData.1=(250,238),(250,224),(276,224)

[CTRL1796]
Type=0x704
Name=BUTTON 7
Align.1=T
CallOutMax.1=(106,242),(192,309)
LineData.1=(148,237),(148,224),(121,224)

[CTRL1284]
Type=0x504
Name=BUTTON 5
Align.1=T
CallOutMax.1=(6,244),(95,308)
LineData.1=(45,240),(45,183),(56,183)

[CTRL258]
Type=0x102
Name=Y-AXIS
Align.1=B
CallOutMax.1=(8,0),(111,58)
LineData.1=(55,45),(55,87),(124,87)

[CTRL2]
Type=0x2
Name=X-AXIS
Align.1=BL
CallOutMax.1=(283,5),(403,74)
LineData.1=(304,74),(304,86),(267,86)


[CTRL2052]
Type=0x804
Name=BUTTON 8
Align.0=T
CallOutMax.0=(105,262),(184,310)
LineData.0=(142,268),(142,180)

[CTRL2308]
Type=0x904
Name=BUTTON 9
Align.0=T
CallOutMax.0=(201,262),(280,310)
LineData.0=(238,268),(238,180)

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.2]
MapExists=1

[INTERACT AXISPAD.Genre.2]
MapExists=1
CTRL2=0x1
CTRL2052=0x1
CTRL1796=0x2
CTRL260=0x3
CTRL4=0xFD
CTRL1282=0x4
CTRL16=0x1
CTRL1540=0x4
CTRL1284=0x5
CTRL772=0x6
CTRL516=0x7
CTRL1028=0x8
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.3]
MapExists=1

[INTERACT AXISPAD.Genre.3]
MapExists=1
CTRL2=0x1
CTRL258=0x2
CTRL1540=0x1
CTRL1284=0x2
CTRL2052=0x3
CTRL260=0xFD
CTRL16=0x1
CTRL1282=0x5
CTRL772=0x4
CTRL516=0x5
CTRL1796=0x6
CTRL4=0xFE
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.41]
MapExists=1

[INTERACT AXISPAD.Genre.41]
MapExists=1
CTRL2=0x1
CTRL258=0x2
CTRL1282=0x4
CTRL1540=0x1
CTRL1284=0x2
CTRL2052=0x3
CTRL1796=0x4
CTRL772=0x5
CTRL516=0x6
CTRL4=0xFD
CTRL260=0x7
CTRL16=0x1
CTRL1028=0x8
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.7]
MapExists=1

[INTERACT AXISPAD.Genre.7]
MapExists=1
CTRL2=0x1
CTRL258=0x2
CTRL1540=0x1
CTRL1284=0x2
CTRL260=0x3
CTRL4=0xFD
CTRL16=0x1
CTRL1282=0x5
CTRL516=0x4
CTRL1028=0x5
CTRL2052=0x6
CTRL1796=0x7
CTRL772=0x8
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.9]
MapExists=1

[INTERACT AXISPAD.Genre.9]
MapExists=1
CTRL2=0x1
CTRL258=0x2
CTRL1540=0x1
CTRL1284=0x2
CTRL260=0x3
CTRL772=0x4
CTRL2052=0x5
CTRL1796=0x6
CTRL4=0xFD
CTRL16=0x1
CTRL1282=0x3
CTRL1028=0x8
CTRL516=0xFE
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.10]
MapExists=1

[INTERACT AXISPAD.Genre.10]
MapExists=1
CTRL2=0x1
CTRL258=0x2
CTRL2052=0x1
CTRL1028=0x2
CTRL1796=0x4
CTRL260=0x5
CTRL4=0xFD
CTRL16=0x1
CTRL772=0x6
CTRL1284=0x7
CTRL1540=0x8
CTRL1282=0x3
CTRL516=0x9
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.11]
MapExists=1

[INTERACT AXISPAD.Genre.11]
MapExists=1
CTRL1282=0x1
CTRL258=0x2
CTRL260=0x1
CTRL772=0x2
CTRL516=0x3
CTRL1540=0x4
CTRL1284=0x5
CTRL2052=0x6
CTRL1796=0x7
CTRL4=0xFD
CTRL16=0x1
CTRL1028=0x8
CTRL2=0x3
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.12]
MapExists=1

[INTERACT AXISPAD.Genre.12]
MapExists=1
CTRL2=0x1
CTRL258=0x2
CTRL1540=0x1
CTRL1284=0x2
CTRL2052=0x3
CTRL1796=0x4
CTRL260=0x5
CTRL4=0xFD
CTRL772=0x6
CTRL516=0x7
CTRL1028=0x8
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.13]
MapExists=1

[INTERACT AXISPAD.Genre.13]
MapExists=1
CTRL1282=0x1
CTRL258=0x2
CTRL1540=0x1
CTRL260=0x2
CTRL1284=0x3
CTRL772=0x4
CTRL2052=0x5
CTRL1796=0x6
CTRL4=0xFD
CTRL16=0x1
CTRL2=0x3
CTRL1028=0x9
CTRL516=0xA
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.14]
MapExists=1

[INTERACT AXISPAD.Genre.14]
MapExists=1
CTRL1282=0x1
CTRL258=0x2
CTRL1540=0x1
CTRL1284=0x2
CTRL2052=0x3
CTRL1796=0x4
CTRL772=0x5
CTRL4=0xFD
CTRL16=0x1
CTRL260=0x6
CTRL2=0x3
CTRL1028=0x7
CTRL516=0x8
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.15]
MapExists=1

[INTERACT AXISPAD.Genre.15]
MapExists=1
CTRL2=0x1
CTRL258=0x2
CTRL1284=0x1
CTRL1540=0x2
CTRL2052=0x3
CTRL1796=0x4
CTRL260=0x5
CTRL772=0x6
CTRL516=0x7
CTRL1028=0x8
CTRL4=0xFD
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.16]
MapExists=1

[INTERACT AXISPAD.Genre.16]
MapExists=1
CTRL2=0x1
CTRL258=0x2
CTRL1284=0x1
CTRL1540=0x2
CTRL1796=0x3
CTRL2052=0x4
CTRL260=0x5
CTRL4=0xFD
CTRL772=0x6
CTRL516=0x7
CTRL1028=0xFE
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.17]
MapExists=1

[INTERACT AXISPAD.Genre.17]
MapExists=1
CTRL2=0x1
CTRL258=0x2
CTRL1540=0x1
CTRL1284=0x2
CTRL260=0x3
CTRL772=0x4
CTRL516=0x5
CTRL1028=0x6
CTRL4=0xFD
CTRL2052=0x7
CTRL1796=0x8
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.18]
MapExists=1

[INTERACT AXISPAD.Genre.18]
MapExists=1
CTRL2=0x1
CTRL258=0x2
CTRL260=0x2
CTRL516=0x3
CTRL1028=0x4
CTRL1540=0x6
CTRL772=0x7
CTRL1284=0x8
CTRL4=0xFD
CTRL16=0x1
CTRL2052=0xB
CTRL1796=0xC
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.20]
MapExists=1

[INTERACT AXISPAD.Genre.20]
MapExists=1
CTRL1540=0x1
CTRL1284=0x2
CTRL772=0x3
CTRL4=0xFD
CTRL516=0xFE
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.21]
MapExists=1

[INTERACT AXISPAD.Genre.21]
MapExists=1
CTRL2=0x1
CTRL258=0x2
CTRL516=0x2
CTRL260=0x3
CTRL2052=0x4
CTRL1796=0x5
CTRL1028=0x6
CTRL4=0xFD
CTRL772=0x7
CTRL1540=0x8
CTRL1284=0x9
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.22]
MapExists=1

[INTERACT AXISPAD.Genre.22]
MapExists=1
CTRL2=0x1
CTRL258=0x2
CTRL260=0x1
CTRL1284=0x2
CTRL1540=0x3
CTRL516=0x4
CTRL2052=0x5
CTRL4=0xFD
CTRL772=0x6
CTRL1028=0x8
CTRL1796=0x9
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.23]
MapExists=1

[INTERACT AXISPAD.Genre.23]
MapExists=1
CTRL260=0x3
CTRL516=0x4
CTRL1028=0x5
CTRL772=0x6
CTRL4=0xFD
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.24]
MapExists=1

[INTERACT AXISPAD.Genre.24]
MapExists=1
CTRL2=0x1
CTRL258=0x2
CTRL1540=0x1
CTRL1284=0x2
CTRL260=0x3
CTRL772=0x4
CTRL1028=0x5
CTRL4=0xFD
CTRL16=0x1
CTRL516=0x7
CTRL2052=0x8
CTRL1796=0x9
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.25]
MapExists=1

[INTERACT AXISPAD.Genre.25]
MapExists=1
CTRL2=0x1
CTRL258=0x2
CTRL260=0x1
CTRL1028=0x2
CTRL772=0x3
CTRL516=0x4
CTRL4=0xFD
CTRL16=0x1
CTRL1796=0x6
CTRL1540=0x7
CTRL2052=0x8
CTRL1284=0x9
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.26]
MapExists=1

[INTERACT AXISPAD.Genre.26]
MapExists=1
CTRL2=0x1
CTRL258=0x2
CTRL1028=0x1
CTRL260=0x2
CTRL772=0x3
CTRL516=0x4
CTRL4=0xFD
CTRL16=0x1
CTRL1796=0x6
CTRL1540=0x7
CTRL2052=0x8
CTRL1284=0x9
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.27]
MapExists=1

[INTERACT AXISPAD.Genre.27]
MapExists=1
CTRL2=0x1
CTRL258=0x2
CTRL772=0x1
CTRL1028=0x2
CTRL260=0x3
CTRL516=0x4
CTRL4=0xFD
CTRL16=0x1
CTRL1796=0x5
CTRL1540=0x6
CTRL2052=0x7
CTRL1284=0x8
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.28]
MapExists=1

[INTERACT AXISPAD.Genre.28]
MapExists=1
CTRL2=0x1
CTRL1282=0x2
CTRL772=0x2
CTRL1028=0x4
CTRL260=0x5
CTRL4=0xFD
CTRL16=0x1
CTRL2052=0x6
CTRL516=0xFE
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.29]
MapExists=1

[INTERACT AXISPAD.Genre.29]
MapExists=1
CTRL2=0x1
CTRL1282=0x2
CTRL1540=0x1
CTRL1284=0x2
CTRL2052=0x3
CTRL260=0x4
CTRL1796=0x5
CTRL772=0x6
CTRL4=0xFD
CTRL16=0x1
CTRL516=0x7
CTRL1028=0xFE
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.30]
MapExists=1

[INTERACT AXISPAD.Genre.30]
MapExists=1
CTRL2=0x1
CTRL258=0x2
CTRL1282=0x3
CTRL260=0x1
CTRL1028=0x2
CTRL1540=0x3
CTRL1284=0x4
CTRL516=0x5
CTRL4=0xFD
CTRL16=0x1
CTRL2052=0x8
CTRL1796=0x9
CTRL772=0xB
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.31]
MapExists=1

[INTERACT AXISPAD.Genre.31]
MapExists=1
CTRL2=0x1
CTRL258=0x2
CTRL260=0x1
CTRL772=0x2
CTRL1540=0x3
CTRL1284=0x4
CTRL516=0x5
CTRL1796=0x7
CTRL4=0xFD
CTRL16=0x1
CTRL1028=0x8
CTRL2052=0xB
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.32]
MapExists=1

[INTERACT AXISPAD.Genre.32]
MapExists=1
CTRL2=0x1
CTRL258=0x2
CTRL1540=0x1
CTRL1284=0x2
CTRL260=0x3
CTRL772=0x4
CTRL1028=0x5
CTRL4=0xFD
CTRL16=0x1
CTRL2052=0x6
CTRL516=0x7
CTRL1796=0xFE
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.34]
MapExists=1

[INTERACT AXISPAD.Genre.34]
MapExists=1
CTRL2=0x1
CTRL258=0x2
CTRL772=0x1
CTRL260=0x2
CTRL2052=0x3
CTRL1540=0x4
CTRL1284=0x5
CTRL4=0xFD
CTRL1796=0xFE
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.8]
MapExists=1

[INTERACT AXISPAD.Genre.8]
MapExists=1
CTRL1282=0x1
CTRL258=0x2
CTRL260=0x1
CTRL772=0x2
CTRL1540=0x3
CTRL1284=0x4
CTRL1028=0x5
CTRL516=0x6
CTRL2052=0xFD
CTRL1796=0x8
CTRL16=0x1
CTRL2=0x3
CTRL4=0xFE
CTRL2308=0xFC

[INTERACT AXISPAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.1]
MapExists=1

[INTERACT AXISPAD.Genre.1]
MapExists=1
CTRL2=0x1
CTRL1540=0x1
CTRL1284=0x2
CTRL2052=0x3
CTRL4=0xFD
CTRL258=0x4
CTRL16=0x1
CTRL1796=0x4
CTRL772=0x5
CTRL516=0x6
CTRL260=0x8
CTRL1028=0x9
CTRL2308=0xFE
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dinput\ihvmap\lgc202.ini ===
[DirectInput]
DirectXVersion=0x800
Devices=Logitech WingMan Formula (Yellow)(USB),Logitech WingMan Formula (Yellow)

[Logitech WingMan Formula (Yellow)]
VID=1133
PID=49192
Name=LOGITECHWINGMANRALLY2
Controls=X Axis,Button 0,Button 1,Button 2,Button 3,Button 4,Button 5,Y Axis
ImageFileName.0=LGC202.PNG

[Logitech WingMan Formula (Yellow)(USB)]
VID=1133
PID=49666
Name=VID_046D&PID_C202
Controls=X AXIS,BUTTON 0,BUTTON 1,BUTTON 2,BUTTON 3,BUTTON 4,BUTTON 5,Y AXIS
ImageFileName.0=LGC202.PNG



[X Axis]
UsagePage=0x1
Usage=0x30
Type=0x2
Name=X AXIS
Align.0=R
CallOutMax.0=(2,233),(97,254)
LineData.0=(200,197),(124,243),(89,243)


[Button 0]
UsagePage=0x9
Usage=0x1
Type=0x4
Name=BUTTON 0
Align.0=R
CallOutMax.0=(2,10),(110,31)
LineData.0=(196,117),(128,21),(82,20)


[Button 1]
UsagePage=0x9
Usage=0x2
Type=0x104
Name=BUTTON 1
Align.0=L
CallOutMax.0=(317,11),(426,32)
LineData.0=(243,119),(293,21),(327,21)


[Button 2]
UsagePage=0x9
Usage=0x3
Type=0x204
Name=BUTTON 2
Align.0=R
CallOutMax.0=(2,36),(111,57)
LineData.0=(196,126),(124,46),(86,46)


[Button 3]
UsagePage=0x9
Usage=0x4
Type=0x304
Name=BUTTON 3
Align.0=L
CallOutMax.0=(316,38),(425,60)
LineData.0=(244,131),(300,49),(329,49)


[Button 4]
UsagePage=0x9
Usage=0x5
Type=0x404
Name=BUTTON 4
Align.0=R
CallOutMax.0=(2,63),(111,84)
LineData.0=(191,141),(124,74),(102,74)


[Button 5]
UsagePage=0x9
Usage=0x6
Type=0x504
Name=BUTTON 5
Align.0=L
CallOutMax.0=(316,66),(425,88)
LineData.0=(243,147),(301,78),(330,77)


[Y Axis]
UsagePage=0x1
Usage=0x31
Type=0x102
Name=Y AXIS
Align.0=TR
CallOutMax.0=(2,191),(97,213)
LineData.0=(123,152),(89,201)


[Logitech WingMan Formula (Yellow)(USB).Genre.2]
X Axis=1
Button 0=5
Button 1=4
Button 2=8
Button 3=1
Button 4=3
Button 5=2
Y Axis=2
[Logitech WingMan Formula (Yellow)(USB).Genre.3]
X Axis=1
Button 0=3
Button 1=2
Button 2=6
Button 3=1
Button 4=253
Button 5=4
Y Axis=3
[Logitech WingMan Formula (Yellow)(USB).Genre.41]
X Axis=1
Button 0=3
Button 1=2
Button 2=6
Button 3=1
Button 4=4
Button 5=5
Y Axis=4
[Logitech WingMan Formula (Yellow)(USB).Genre.4]
X Axis=1
Button 0=3
Button 1=1
Button 2=2
Button 3=4
Button 4=253
Button 5=5
Y Axis=3
[Logitech WingMan Formula (Yellow)(USB).Genre.5]
X Axis=1
Button 0=9
Button 1=2
Button 2=5
Button 3=1
Button 4=253
Button 5=3
Y Axis=3
[Logitech WingMan Formula (Yellow)(USB).Genre.6]
X Axis=1
Button 0=7
Button 1=2
Button 2=6
Button 3=1
Button 4=253
Button 5=3
Y Axis=5
[Logitech WingMan Formula (Yellow)(USB).Genre.7]
X Axis=1
Button 0=8
Button 1=2
Button 2=4
Button 3=1
Button 4=253
Button 5=3
Y Axis=2
[Logitech WingMan Formula (Yellow)(USB).Genre.35]
X Axis=1
Button 0=1
Button 1=2
Button 2=3
Button 3=4
Button 4=253
Button 5=254
Y Axis=2
[Logitech WingMan Formula (Yellow)(USB).Genre.36]
X Axis=1
Button 0=1
Button 1=2
Button 2=3
Button 3=4
Button 4=253
Button 5=254
Y Axis=2
[Logitech WingMan Formula (Yellow)(USB).Genre.37]
X Axis=1
Button 0=1
Button 1=2
Button 2=3
Button 3=4
Button 4=253
Button 5=254
Y Axis=2
[Logitech WingMan Formula (Yellow)(USB).Genre.38]
X Axis=1
Button 0=1
Button 1=2
Button 2=3
Button 3=4
Button 4=253
Button 5=254
Y Axis=2
[Logitech WingMan Formula (Yellow)(USB).Genre.39]
Button 0=1
Button 1=2
Button 2=3
Button 3=4
Button 4=5
Button 5=6
[Logitech WingMan Formula (Yellow)(USB).Genre.40]
X Axis=1
Button 0=1
Button 1=2
Button 2=3
Button 3=4
Button 4=253
Button 5=6
Y Axis=2

;;==Gameport version
[Logitech WingMan Formula (Yellow).Genre.1]
X Axis=1
Button 0=2
Button 1=1
Button 2=4
Button 3=3
Button 4=8
Button 5=253
Y Axis=2
[Logitech WingMan Formula (Yellow).Genre.2]
X Axis=1
Button 0=5
Button 1=4
Button 2=8
Button 3=1
Button 4=3
Button 5=2
Y Axis=2
[Logitech WingMan Formula (Yellow).Genre.3]
X Axis=1
Button 0=3
Button 1=2
Button 2=6
Button 3=1
Button 4=253
Button 5=4
Y Axis=3
[Logitech WingMan Formula (Yellow).Genre.41]
X Axis=1
Button 0=3
Button 1=2
Button 2=6
Button 3=1
Button 4=4
Button 5=5
Y Axis=4
[Logitech WingMan Formula (Yellow).Genre.4]
X Axis=1
Button 0=3
Button 1=1
Button 2=2
Button 3=4
Button 4=253
Button 5=5
Y Axis=3
[Logitech WingMan Formula (Yellow).Genre.5]
X Axis=1
Button 0=9
Button 1=2
Button 2=5
Button 3=1
Button 4=253
Button 5=3
Y Axis=3
[Logitech WingMan Formula (Yellow).Genre.6]
X Axis=1
Button 0=7
Button 1=2
Button 2=6
Button 3=1
Button 4=253
Button 5=3
Y Axis=5
[Logitech WingMan Formula (Yellow).Genre.7]
X Axis=1
Button 0=8
Button 1=2
Button 2=4
Button 3=1
Button 4=253
Button 5=3
Y Axis=2
[Logitech WingMan Formula (Yellow).Genre.35]
X Axis=1
Button 0=1
Button 1=2
Button 2=3
Button 3=4
Button 4=253
Button 5=254
Y Axis=2
[Logitech WingMan Formula (Yellow).Genre.36]
X Axis=1
Button 0=1
Button 1=2
Button 2=3
Button 3=4
Button 4=253
Button 5=254
Y Axis=2
[Logitech WingMan Formula (Yellow).Genre.37]
X Axis=1
Button 0=1
Button 1=2
Button 2=3
Button 3=4
Button 4=253
Button 5=254
Y Axis=2
[Logitech WingMan Formula (Yellow).Genre.38]
X Axis=1
Button 0=1
Button 1=2
Button 2=3
Button 3=4
Button 4=253
Button 5=254
Y Axis=2
[Logitech WingMan Formula (Yellow).Genre.39]
Button 0=1
Button 1=2
Button 2=3
Button 3=4
Button 4=5
Button 5=6
[Logitech WingMan Formula (Yellow).Genre.40]
X Axis=1
Button 0=1
Button 1=2
Button 2=3
Button 3=4
Button 4=253
Button 5=6
Y Axis=2
[LOGITECH WINGMAN FORMULA (YELLOW)(USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.1]
MapExists=1
[LOGITECH WINGMAN FORMULA (YELLOW)(USB).Genre.1]
MapExists=1
X AXIS=0x1
BUTTON 1=0x1
BUTTON 0=0x2
BUTTON 3=0x3
BUTTON 5=0xFD
Y AXIS=0x4
BUTTON 2=0x5
BUTTON 4=0x8
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dinput\ihvmap\lgc207.ini ===
[DirectInput]
DirectXVersion=0x800
Devices=Logitech WingMan Extreme Digital 3D (USB),Logitech WingMan Extreme Digital 3D (Gameport)
[Logitech WingMan Extreme Digital 3D (USB)]
VID=1133
PID=49671
Name=VID_046D&PID_C207
Controls=Y AXIS,X AXIS,HAT SWITCH,Z ROTATION U,BUTTON 0,BUTTON 1,BUTTON 2,BUTTON 3,BUTTON 4,BUTTON 5,BUTTON 6,SLIDER U
ImageFileName.0=LGC207.PNG
ImageFormat.0=BMP
[Logitech WingMan Extreme Digital 3D (Gameport)]
VID=1133
PID=49193
Name=LOGITECHWINGMANEXXTREMEDIGITAL3D
Controls=Y AXIS,X AXIS,HAT SWITCH,Z ROTATION,BUTTON 0,BUTTON 1,BUTTON 2,BUTTON 3,BUTTON 4,BUTTON 5,BUTTON 6,SLIDER
ImageFileName.0=LGC207.PNG
ImageFormat.0=BMP
[Y Axis]
UsagePage=0x1
Usage=0x31
Type=0x102
Name=Y AXIS
Align.0=L
CallOutMax.0=(306,205),(412,224)
LineData.0=(203,184),(259,218),(320,218)
[X Axis]
UsagePage=0x1
Usage=0x30
Type=0x2
Name=X AXIS
Align.0=R
CallOutMax.0=(13,249),(120,271)
LineData.0=(178,184),(135,213),(135,257),(111,257)
[Hat Switch]
UsagePage=0x1
Usage=0x39
Type=0x10
Name=HAT SWITCH
Align.0=L
CallOutMax.0=(297,25),(410,46)
LineData.0=(161,62),(192,37),(319,37)
[Z Rotation]
UsagePage=2
Usage=186
Type=0x502
Name=Z ROTATION
Align.0=L
CallOutMax.0=(301,156),(418,176)
LineData.0=(216,153),(237,138),(307,167)
[Z Rotation U]
UsagePage=1
Usage=53
Type=0x502
Name=Z ROTATION
Align.0=L
CallOutMax.0=(301,156),(418,176)
LineData.0=(216,153),(237,138),(307,167)
[Button 0]
UsagePage=0x9
Usage=0x1
Type=0x4
Name=BUTTON 0
Align.0=R
CallOutMax.0=(23,71),(124,91)
LineData.0=(150,87),(135,87),(113,79)
[Button 1]
UsagePage=0x9
Usage=0x2
Type=0x104
Name=BUTTON 1
Align.0=R
CallOutMax.0=(12,19),(120,39)
LineData.0=(152,78),(140,29),(106,29)
[Button 2]
UsagePage=0x9
Usage=0x3
Type=0x204
Name=BUTTON 2
Align.0=R
CallOutMax.0=(23,116),(122,134)
LineData.0=(163,83),(156,127),(113,127)
[Button 3]
UsagePage=0x9
Usage=0x4
Type=0x304
Name=BUTTON 3
Align.0=L
CallOutMax.0=(297,65),(410,85)
LineData.0=(178,59),(245,76),(316,76)
[Button 4]
UsagePage=0x9
Usage=0x5
Type=0x404
Name=BUTTON 4
Align.0=L
CallOutMax.0=(299,101),(413,119)
LineData.0=(181,70),(244,110),(316,110)
[Button 5]
UsagePage=0x9
Usage=0x6
Type=0x504
Name=BUTTON 5
Align.0=R
CallOutMax.0=(14,185),(88,208)
LineData.0=(120,189),(101,199),(66,200)
[Button 6]
UsagePage=0x9
Usage=0x7
Type=0x604
Name=BUTTON 6
Align.0=R
CallOutMax.0=(13,151),(109,172)
LineData.0=(141,187),(136,160),(86,160)
[Slider]
UsagePage=2
Usage=187
Type=0x202
Name=SLIDER
Align.0=L
CallOutMax.0=(307,260),(417,282)
LineData.0=(171,203),(261,270),(318,270)
[Slider U]
UsagePage=1
Usage=54
Type=0x202
Name=SLIDER
Align.0=L
CallOutMax.0=(307,260),(417,282)
LineData.0=(171,203),(261,270),(318,270)
[LOGITECH WINGMAN EXTREME DIGITAL 3D (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.1]
MapExists=1
[LOGITECH WINGMAN EXTREME DIGITAL 3D (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.2]
MapExists=1
[LOGITECH WINGMAN EXTREME DIGITAL 3D (USB).Genre.2]
MapExists=1
X AXIS=0x1
BUTTON 0=0x1
BUTTON 2=0x2
BUTTON 1=0x3
Y AXIS=0x4
HAT SWITCH=0x1
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 6=0x6
BUTTON 5=0x8
[LOGITECH WINGMAN EXTREME DIGITAL 3D (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.3]
MapExists=1
[LOGITECH WINGMAN EXTREME DIGITAL 3D (USB).Genre.3]
MapExists=1
X AXIS=0x1
SLIDER U=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
HAT SWITCH=0x1
Y AXIS=0x5
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 5=0x6
BUTTON 6=0xFE
[LOGITECH WINGMAN EXTREME DIGITAL 3D (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.41]
MapExists=1
[LOGITECH WINGMAN EXTREME DIGITAL 3D (USB).Genre.41]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
Z ROTATION U=0x3
SLIDER U=0x4
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 5=0x6
BUTTON 6=0x7
HAT SWITCH=0x1
[LOGITECH WINGMAN EXTREME DIGITAL 3D (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.4]
MapExists=1
[LOGITECH WINGMAN EXTREME DIGITAL 3D (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.5]
MapExists=1
[LOGITECH WINGMAN EXTREME DIGITAL 3D (USB).Genre.5]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
SLIDER U=0x3
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
HAT SWITCH=0x1
BUTTON 3=0x4
Z ROTATION U=0x4
BUTTON 4=0x5
BUTTON 6=0x7
BUTTON 5=0x9
[LOGITECH WINGMAN EXTREME DIGITAL 3D (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.6]
MapExists=1
[LOGITECH WINGMAN EXTREME DIGITAL 3D (USB).Genre.6]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
HAT SWITCH=0x1
Z ROTATION U=0x4
SLIDER U=0x5
BUTTON 3=0x4
BUTTON 5=0x5
BUTTON 6=0x6
BUTTON 4=0x7
[LOGITECH WINGMAN EXTREME DIGITAL 3D (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.7]
MapExists=1
[LOGITECH WINGMAN EXTREME DIGITAL 3D (USB).Genre.7]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
SLIDER U=0x3
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
HAT SWITCH=0x1
Z ROTATION U=0x5
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 6=0x6
BUTTON 5=0x7
[LOGITECH WINGMAN EXTREME DIGITAL 3D (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.8]
MapExists=1
[LOGITECH WINGMAN EXTREME DIGITAL 3D (USB).Genre.8]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 4=0x4
BUTTON 3=0x5
BUTTON 5=0x6
BUTTON 6=0x7
HAT SWITCH=0x1
Z ROTATION U=0x3
[LOGITECH WINGMAN EXTREME DIGITAL 3D (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.9]
MapExists=1
[LOGITECH WINGMAN EXTREME DIGITAL 3D (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.10]
MapExists=1
[LOGITECH WINGMAN EXTREME DIGITAL 3D (USB).Genre.10]
MapExists=1
Z ROTATION U=0x1
Y AXIS=0x2
BUTTON 6=0x1
BUTTON 0=0x2
BUTTON 5=0x3
BUTTON 4=0x4
BUTTON 1=0x5
HAT SWITCH=0x1
X AXIS=0x3
BUTTON 2=0x9
BUTTON 3=0xA
[LOGITECH WINGMAN EXTREME DIGITAL 3D (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.11]
MapExists=1
[LOGITECH WINGMAN EXTREME DIGITAL 3D (USB).Genre.11]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 5=0x1
BUTTON 4=0x2
BUTTON 3=0x3
BUTTON 0=0x4
BUTTON 6=0x5
BUTTON 2=0x6
BUTTON 1=0x7
HAT SWITCH=0x1
Z ROTATION U=0x3
[LOGITECH WINGMAN EXTREME DIGITAL 3D (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.12]
MapExists=1
[LOGITECH WINGMAN EXTREME DIGITAL 3D (USB).Genre.12]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 5=0xFD
BUTTON 6=0x7
[LOGITECH WINGMAN EXTREME DIGITAL 3D (USB).Genre.9]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 5=0x5
BUTTON 6=0x6
HAT SWITCH=0x1
Z ROTATION U=0x3
BUTTON 4=0x8
[LOGITECH WINGMAN EXTREME DIGITAL 3D (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.14]
MapExists=1
[LOGITECH WINGMAN EXTREME DIGITAL 3D (USB).Genre.14]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 5=0xFD
HAT SWITCH=0x1
Z ROTATION U=0x3
BUTTON 6=0x7
[LOGITECH WINGMAN EXTREME DIGITAL 3D (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.40]
MapExists=1
[LOGITECH WINGMAN EXTREME DIGITAL 3D (USB).Genre.40]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 5=0xFD
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 6=0x7
[LOGITECH WINGMAN EXTREME DIGITAL 3D (USB).Genre.1]
MapExists=1
X AXIS=0x1
BUTTON 3=0x1
BUTTON 4=0x2
BUTTON 1=0x3
Y AXIS=0x4
HAT SWITCH=0x1
BUTTON 0=0x4
BUTTON 6=0x5
BUTTON 2=0x7
BUTTON 5=0x8
[LOGITECH WINGMAN EXTREME DIGITAL 3D (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.39]
MapExists=1
[LOGITECH WINGMAN EXTREME DIGITAL 3D (USB).Genre.39]
MapExists=1
SLIDER U=0x1
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 5=0x6
BUTTON 6=0x7
[LOGITECH WINGMAN EXTREME DIGITAL 3D (USB).Genre.4]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
SLIDER U=0x3
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 5=0xFD
HAT SWITCH=0x1
Z ROTATION U=0x5
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 6=0xFE
[LOGITECH WINGMAN EXTREME DIGITAL 3D (Gameport).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.1]
MapExists=1
[LOGITECH WINGMAN EXTREME DIGITAL 3D (Gameport).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.2]
MapExists=1
[LOGITECH WINGMAN EXTREME DIGITAL 3D (Gameport).Genre.2]
MapExists=1
X AXIS=0x1
BUTTON 0=0x1
BUTTON 2=0x2
BUTTON 1=0x3
Y AXIS=0x4
HAT SWITCH=0x1
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 6=0x6
BUTTON 5=0x8
[LOGITECH WINGMAN EXTREME DIGITAL 3D (Gameport).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.3]
MapExists=1
[LOGITECH WINGMAN EXTREME DIGITAL 3D (Gameport).Genre.3]
MapExists=1
X AXIS=0x1
SLIDER=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
HAT SWITCH=0x1
Y AXIS=0x5
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 5=0x6
BUTTON 6=0xFE
[LOGITECH WINGMAN EXTREME DIGITAL 3D (Gameport).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.41]
MapExists=1
[LOGITECH WINGMAN EXTREME DIGITAL 3D (Gameport).Genre.41]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
Z ROTATION=0x3
SLIDER=0x4
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 5=0x6
BUTTON 6=0x7
HAT SWITCH=0x1
[LOGITECH WINGMAN EXTREME DIGITAL 3D (Gameport).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.4]
MapExists=1
[LOGITECH WINGMAN EXTREME DIGITAL 3D (Gameport).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.5]
MapExists=1
[LOGITECH WINGMAN EXTREME DIGITAL 3D (Gameport).Genre.5]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
SLIDER=0x3
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
HAT SWITCH=0x1
BUTTON 3=0x4
Z ROTATION=0x4
BUTTON 4=0x5
BUTTON 6=0x7
BUTTON 5=0x9
[LOGITECH WINGMAN EXTREME DIGITAL 3D (Gameport).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.6]
MapExists=1
[LOGITECH WINGMAN EXTREME DIGITAL 3D (Gameport).Genre.6]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
HAT SWITCH=0x1
Z ROTATION=0x4
SLIDER=0x5
BUTTON 3=0x4
BUTTON 5=0x5
BUTTON 6=0x6
BUTTON 4=0x7
[LOGITECH WINGMAN EXTREME DIGITAL 3D (Gameport).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.7]
MapExists=1
[LOGITECH WINGMAN EXTREME DIGITAL 3D (Gameport).Genre.7]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
SLIDER=0x3
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
HAT SWITCH=0x1
Z ROTATION=0x5
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 6=0x6
BUTTON 5=0x7
[LOGITECH WINGMAN EXTREME DIGITAL 3D (Gameport).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.8]
MapExists=1
[LOGITECH WINGMAN EXTREME DIGITAL 3D (Gameport).Genre.8]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 4=0x4
BUTTON 3=0x5
BUTTON 5=0x6
BUTTON 6=0x7
HAT SWITCH=0x1
Z ROTATION=0x3
[LOGITECH WINGMAN EXTREME DIGITAL 3D (Gameport).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.9]
MapExists=1
[LOGITECH WINGMAN EXTREME DIGITAL 3D (Gameport).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.10]
MapExists=1
[LOGITECH WINGMAN EXTREME DIGITAL 3D (Gameport).Genre.10]
MapExists=1
Z ROTATION=0x1
Y AXIS=0x2
BUTTON 6=0x1
BUTTON 0=0x2
BUTTON 5=0x3
BUTTON 4=0x4
BUTTON 1=0x5
HAT SWITCH=0x1
X AXIS=0x3
BUTTON 2=0x9
BUTTON 3=0xA
[LOGITECH WINGMAN EXTREME DIGITAL 3D (Gameport).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.11]
MapExists=1
[LOGITECH WINGMAN EXTREME DIGITAL 3D (Gameport).Genre.11]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 5=0x1
BUTTON 4=0x2
BUTTON 3=0x3
BUTTON 0=0x4
BUTTON 6=0x5
BUTTON 2=0x6
BUTTON 1=0x7
HAT SWITCH=0x1
Z ROTATION=0x3
[LOGITECH WINGMAN EXTREME DIGITAL 3D (Gameport).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.12]
MapExists=1
[LOGITECH WINGMAN EXTREME DIGITAL 3D (Gameport).Genre.12]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 5=0xFD
BUTTON 6=0x7
[LOGITECH WINGMAN EXTREME DIGITAL 3D (Gameport).Genre.9]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 5=0x5
BUTTON 6=0x6
HAT SWITCH=0x1
Z ROTATION=0x3
BUTTON 4=0x8
[LOGITECH WINGMAN EXTREME DIGITAL 3D (Gameport).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.14]
MapExists=1
[LOGITECH WINGMAN EXTREME DIGITAL 3D (Gameport).Genre.14]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 5=0xFD
HAT SWITCH=0x1
Z ROTATION=0x3
BUTTON 6=0x7
[LOGITECH WINGMAN EXTREME DIGITAL 3D (Gameport).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.40]
MapExists=1
[LOGITECH WINGMAN EXTREME DIGITAL 3D (Gameport).Genre.40]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 5=0xFD
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 6=0x7
[LOGITECH WINGMAN EXTREME DIGITAL 3D (Gameport).Genre.1]
MapExists=1
X AXIS=0x1
BUTTON 3=0x1
BUTTON 4=0x2
BUTTON 1=0x3
Y AXIS=0x4
HAT SWITCH=0x1
BUTTON 0=0x4
BUTTON 6=0x5
BUTTON 2=0x7
BUTTON 5=0x8
[LOGITECH WINGMAN EXTREME DIGITAL 3D (Gameport).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.39]
MapExists=1
[LOGITECH WINGMAN EXTREME DIGITAL 3D (Gameport).Genre.39]
MapExists=1
SLIDER=0x1
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 5=0x6
BUTTON 6=0x7
[LOGITECH WINGMAN EXTREME DIGITAL 3D (Gameport).Genre.4]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
SLIDER=0x3
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 5=0xFD
HAT SWITCH=0x1
Z ROTATION=0x5
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 6=0xFE
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dinput\ihvmap\lgc209.ini ===
[DirectInput]
DirectXVersion=0x800
Devices=Logitech WingMan Gamepad Black (USB),Logitech WingMan Gamepad Black (Gameport)
[Logitech WingMan Gamepad Black (USB)]
VID=1133
PID=49673
Name=VID_046D&PID_C209
Controls=BUTTON 0,BUTTON 1,BUTTON 2,BUTTON 3,Y AXIS,X AXIS,BUTTON 4,BUTTON 5,BUTTON 6,BUTTON 7,BUTTON 8,BUTTON 9,BUTTON 10
ImageFileName.0=LGC209.PNG
ImageFormat.0=BMP
[Logitech WingMan Gamepad Black (Gameport)]
VID=1133
PID=49190
Name=LOGITECHWINGMANGAMEPAD2
Controls=BUTTON 0,BUTTON 1,BUTTON 2,BUTTON 3,Y AXIS,X AXIS,BUTTON 4,BUTTON 5,BUTTON 6,BUTTON 7,BUTTON 8,BUTTON 9,BUTTON 10
ImageFileName.0=LGC209.PNG
ImageFormat.0=BMP
[Button 0]
UsagePage=0x9
Usage=0x1
Type=0x4
Name=BUTTON 0
Align.0=L
CallOutMax.0=(158,209),(242,227)
LineData.0=(220,131),(205,186),(198,213)
[Button 1]
UsagePage=0x9
Usage=0x2
Type=0x104
Name=BUTTON 1
Align.0=L
CallOutMax.0=(327,187),(411,207)
LineData.0=(236,122),(297,197),(342,197)
[Button 2]
UsagePage=0x9
Usage=0x3
Type=0x204
Name=BUTTON 2
Align.0=L
CallOutMax.0=(328,125),(410,145)
LineData.0=(255,117),(300,133),(339,133)
[Button 3]
UsagePage=0x9
Usage=0x4
Type=0x304
Name=BUTTON 3
Align.0=BL
CallOutMax.0=(8,136),(77,156)
LineData.0=(216,111),(141,148),(46,148)
[Y Axis]
UsagePage=0x1
Usage=0x31
Type=0x102
Name=Y AXIS
Align.0=L
CallOutMax.0=(15,8),(124,30)
LineData.0=(170,96),(153,19),(114,19)
[X Axis]
UsagePage=0x1
Usage=0x30
Type=0x2
Name=X AXIS
Align.0=BL
CallOutMax.0=(15,39),(124,61)
LineData.0=(148,104),(135,50),(91,49)
[Button 4]
UsagePage=0x9
Usage=0x5
Type=0x404
Name=BUTTON 4
Align.0=L
CallOutMax.0=(329,94),(409,115)
LineData.0=(230,104),(304,104),(347,104)
[Button 5]
UsagePage=0x9
Usage=0x6
Type=0x504
Name=BUTTON 5
Align.0=L
CallOutMax.0=(328,65),(409,85)
LineData.0=(250,97),(303,74),(348,74)
[Button 6]
UsagePage=0x9
Usage=0x7
Type=0x604
Name=BUTTON 6
Align.0=L
CallOutMax.0=(299,7),(409,27)
LineData.0=(177,78),(251,17),(331,17)
[Button 7]
UsagePage=0x9
Usage=0x8
Type=0x704
Name=BUTTON 7
Align.0=L
CallOutMax.0=(299,37),(410,56)
LineData.0=(231,78),(268,49),(310,49)
[Button 8]
UsagePage=0x9
Usage=0x9
Type=0x804
Name=BUTTON 8
Align.0=L
CallOutMax.0=(328,156),(412,175)
LineData.0=(261,136),(294,165),(340,165)
[Button 9]
UsagePage=0x9
Usage=0xA
Type=0x904
Name=BUTTON 9
Align.0=BL
CallOutMax.0=(7,171),(76,191)
LineData.0=(199,140),(135,183),(53,183)
[Button 10]
UsagePage=0x9
Usage=0xB
Type=0xA04
Name=BUTTON 10
Align.0=L
CallOutMax.0=(159,249),(242,266)
LineData.0=(240,140),(286,259),(183,259)
[LOGITECH WINGMAN GAMEPAD BLACK (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.1]
MapExists=1
[LOGITECH WINGMAN GAMEPAD BLACK (USB).Genre.1]
MapExists=1
X AXIS=0x1
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 9=0xFD
Y AXIS=0x4
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 5=0x6
BUTTON 6=0x7
BUTTON 7=0x8
BUTTON 8=0x9
BUTTON 10=0xFE
[LOGITECH WINGMAN GAMEPAD BLACK (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.39]
MapExists=1
[LOGITECH WINGMAN GAMEPAD BLACK (USB).Genre.39]
MapExists=1
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 5=0x6
BUTTON 6=0x7
BUTTON 9=0xFD
BUTTON 7=0x8
BUTTON 8=0x9
BUTTON 10=0xB
[LOGITECH WINGMAN GAMEPAD BLACK (Gameport).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.1]
MapExists=1
[LOGITECH WINGMAN GAMEPAD BLACK (Gameport).Genre.1]
MapExists=1
X AXIS=0x1
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 9=0xFD
Y AXIS=0x4
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 5=0x6
BUTTON 6=0x7
BUTTON 7=0x8
BUTTON 8=0x9
BUTTON 10=0xFE
[LOGITECH WINGMAN GAMEPAD BLACK (Gameport).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.39]
MapExists=1
[LOGITECH WINGMAN GAMEPAD BLACK (Gameport).Genre.39]
MapExists=1
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 5=0x6
BUTTON 6=0x7
BUTTON 9=0xFD
BUTTON 7=0x8
BUTTON 8=0x9
BUTTON 10=0xB
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dinput\ihvmap\ms1b.ini ===
[DirectInput]
DirectXVersion=0x800
Devices=SideWinder Force Feedback 2 Joystick

[SideWinder Force Feedback 2 Joystick]
VID=1118
PID=27
Name=SideWinder Force Feedback 2 Joystick
Controls=X AXIS,Y AXIS,Z ROTATION,SLIDER,HAT SWITCH,BUTTON 0,BUTTON 1,BUTTON 2,BUTTON 3,BUTTON 4,BUTTON 5,BUTTON 6,BUTTON 7
ImageFileName.0=MS1B.PNG

[X Axis]
UsagePage=0x1
Usage=0x30
Type=0x1000002
Name=X AXIS
Align.0=L
CallOutMax.0=(252,131),(426,151)
LineData.0=(250,143),(214,143)

[Y Axis]
UsagePage=0x1
Usage=0x31
Type=0x1000102
Name=Y AXIS
Align.0=R
CallOutMax.0=(1,108),(160,128)
LineData.0=(162,121),(188,121)

[Z Rotation]
UsagePage=0x1
Usage=0x35
Type=0x502
Name=Z ROTATION
Align.0=R
CallOutMax.0=(0,141),(153,161)
LineData.0=(153,153),(190,153)

[Slider]
UsagePage=0x1
Usage=0x36
Type=0x202
Name=SLIDER
OverlayFileName.0=MS1B_01.PNG
OverlayRect.0=(183,206),(695,718)
Align.0=TL
CallOutMax.0=(293,205),(427,253)
LineData.0=(290,216),(199,216)

[Hat Switch]
UsagePage=0x1
Usage=0x39
Type=0x10
Name=HAT SWITCH
OverlayFileName.0=MS1B_02.PNG
OverlayRect.0=(188,66),(700,578)
Align.0=BL
CallOutMax.0=(45,22),(241,43)
LineData.0=(69,41),(69,71),(192,71)

[Button 0]
UsagePage=0x9
Usage=0x1
Type=0x2000004
Name=BUTTON 0
OverlayFileName.0=MS1B_03.PNG
OverlayRect.0=(171,80),(683,592)
Align.0=R
CallOutMax.0=(1,78),(156,98)
LineData.0=(157,89),(175,89)

[Button 1]
UsagePage=0x9
Usage=0x2
Type=0x2000104
Name=BUTTON 1
OverlayFileName.0=MS1B_04.PNG
OverlayRect.0=(200,85),(712,597)
Align.0=TL
CallOutMax.0=(231,101),(410,122)
LineData.0=(244,109),(244,94),(209,94)

[Button 2]
UsagePage=0x9
Usage=0x3
Type=0x2000204
Name=BUTTON 2
OverlayFileName.0=MS1B_05.PNG
OverlayRect.0=(191,83),(703,595)
Align.0=L
CallOutMax.0=(250,75),(427,95)
LineData.0=(248,86),(198,86)

[Button 3]
UsagePage=0x9
Usage=0x4
Type=0x2000304
Name=BUTTON 3
OverlayFileName.0=MS1B_06.PNG
OverlayRect.0=(202,75),(714,587)
Align.0=BL
CallOutMax.0=(214,50),(402,69)
LineData.0=(234,68),(234,78),(208,78)

[Button 4]
UsagePage=0x9
Usage=0x5
Type=0x2000404
Name=BUTTON 4
OverlayFileName.0=MS1B_07.PNG
OverlayRect.0=(146,199),(658,711)
Align.0=R
CallOutMax.0=(0,165),(143,188)
LineData.0=(144,178),(152,178),(152,201)

[Button 5]
UsagePage=0x9
Usage=0x6
Type=0x2000504
Name=BUTTON 5
OverlayFileName.0=MS1B_08.PNG
OverlayRect.0=(129,203),(641,715)
Align.0=TR
CallOutMax.0=(0,191),(104,230)
LineData.0=(104,200),(135,200),(135,207)

[Button 6]
UsagePage=0x9
Usage=0x7
Type=0x2000604
Name=BUTTON 6
OverlayFileName.0=MS1B_09.PNG
OverlayRect.0=(125,216),(637,728)
Align.0=TR
CallOutMax.0=(1,237),(114,274)
LineData.0=(114,248),(131,248),(131,222)

[Button 7]
UsagePage=0x9
Usage=0x8
Type=0x2000704
Name=BUTTON 7
OverlayFileName.0=MS1B_10.PNG
OverlayRect.0=(141,211),(653,723)
Align.0=TR
CallOutMax.0=(2,276),(159,299)
LineData.0=(147,273),(147,218)

[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.1]
MapExists=1

[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Genre.1]
MapExists=1
X AXIS=0x1
BUTTON 3=0x1
BUTTON 2=0x2
BUTTON 1=0x3
BUTTON 5=0xFD
Y AXIS=0x4
HAT SWITCH=0x1
BUTTON 6=0x5
BUTTON 4=0x6
BUTTON 7=0x7
BUTTON 0=0x8

[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.2]
MapExists=1

[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Genre.2]
MapExists=1
X AXIS=0x1
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 4=0x3
BUTTON 5=0xFD
Y AXIS=0x4
HAT SWITCH=0x1
BUTTON 3=0x4
BUTTON 2=0x5
BUTTON 6=0x6
BUTTON 7=0x7

[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.3]
MapExists=1

[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Genre.3]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 5=0xFD
HAT SWITCH=0x1
SLIDER=0x5
BUTTON 1=0x4
BUTTON 6=0x5

[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.41]
MapExists=1

[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Genre.41]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
Z ROTATION=0x3
SLIDER=0x4
BUTTON 0=0x1
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 4=0x4
BUTTON 5=0x5
BUTTON 1=0x6
BUTTON 6=0xFD
HAT SWITCH=0x1
BUTTON 7=0x8

[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.4]
MapExists=1

[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Genre.4]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
SLIDER=0x3
BUTTON 1=0x1
BUTTON 4=0x2
BUTTON 5=0x3
BUTTON 6=0xFD
HAT SWITCH=0x1
Z ROTATION=0x5
BUTTON 3=0x4
BUTTON 2=0x5

[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.5]
MapExists=1

[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Genre.5]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
SLIDER=0x3
BUTTON 0=0x1
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 4=0xFD
HAT SWITCH=0x1
BUTTON 5=0x4
Z ROTATION=0x4
BUTTON 1=0x5
BUTTON 6=0x8
BUTTON 7=0x9

[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.6]
MapExists=1

[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Genre.6]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 4=0xFD
HAT SWITCH=0x1
Z ROTATION=0x4
SLIDER=0x5
BUTTON 5=0x4
BUTTON 1=0x5
BUTTON 6=0x6
BUTTON 7=0x7

[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.7]
MapExists=1

[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Genre.7]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
SLIDER=0x3
BUTTON 0=0x1
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 4=0xFD
HAT SWITCH=0x1
Z ROTATION=0x5
BUTTON 1=0x4
BUTTON 5=0x5
BUTTON 6=0x6
BUTTON 7=0x7



[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.9]
MapExists=1

[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Genre.9]
MapExists=1
Z ROTATION=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 4=0x2
BUTTON 5=0x3
BUTTON 6=0x4
BUTTON 2=0x5
BUTTON 3=0x6
HAT SWITCH=0x1
BUTTON 1=0x7
X AXIS=0x3
BUTTON 7=0x8

[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.10]
MapExists=1

[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Genre.10]
MapExists=1
Z ROTATION=0x1
Y AXIS=0x2
BUTTON 4=0x1
BUTTON 0=0x2
BUTTON 5=0x3
BUTTON 6=0x4
BUTTON 3=0x5
HAT SWITCH=0x1
BUTTON 1=0x6
X AXIS=0x3
BUTTON 2=0x9
BUTTON 7=0xA

[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.11]
MapExists=1

[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Genre.11]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 4=0x1
BUTTON 5=0x2
BUTTON 6=0x3
BUTTON 0=0x4
BUTTON 1=0x5
BUTTON 2=0x6
BUTTON 3=0x7
HAT SWITCH=0x1
BUTTON 7=0x8
Z ROTATION=0x3

[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.12]
MapExists=1

[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Genre.12]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 1=0x4
BUTTON 4=0x5
BUTTON 5=0xFD
BUTTON 6=0x6
BUTTON 7=0x7

[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.13]
MapExists=1

[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Genre.13]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 4=0x3
BUTTON 5=0x4
BUTTON 6=0x5
BUTTON 7=0x6
HAT SWITCH=0x1
Z ROTATION=0x3
BUTTON 2=0x9
BUTTON 3=0xA

[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.14]
MapExists=1

[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Genre.14]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 4=0x3
BUTTON 5=0x4
BUTTON 6=0x5
BUTTON 7=0xFD
HAT SWITCH=0x1
Z ROTATION=0x3
BUTTON 2=0x7
BUTTON 3=0x8

[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.15]
MapExists=1

[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Genre.15]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 1=0x1
BUTTON 0=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 5=0x6
BUTTON 6=0x7
BUTTON 7=0x8

[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.16]
MapExists=1

[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Genre.16]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 1=0x1
BUTTON 0=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 5=0xFD
BUTTON 6=0x6
BUTTON 7=0x7

[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.17]
MapExists=1

[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Genre.17]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 1=0x1
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 0=0x4
BUTTON 4=0x5
BUTTON 5=0x6
BUTTON 6=0x7
BUTTON 7=0x8

[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.18]
MapExists=1

[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Genre.18]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 5=0x6
BUTTON 6=0x7
BUTTON 7=0x8
HAT SWITCH=0x1

[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.19]
MapExists=1

[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Genre.19]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 5=0x6
BUTTON 6=0x7
BUTTON 7=0xFD
HAT SWITCH=0x1



[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.21]
MapExists=1

[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Genre.21]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 1=0x1
BUTTON 4=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 0=0x5
BUTTON 5=0x6
BUTTON 6=0xFD
BUTTON 7=0x8





[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.24]
MapExists=1

[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Genre.24]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 3=0x3
BUTTON 2=0x4
BUTTON 4=0x5
BUTTON 5=0x6
BUTTON 6=0xFD
HAT SWITCH=0x1
BUTTON 7=0x7

[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.25]
MapExists=1

[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Genre.25]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 5=0xFD
HAT SWITCH=0x1
BUTTON 6=0x6
BUTTON 7=0x7

[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.26]
MapExists=1

[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Genre.26]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 5=0xFD
HAT SWITCH=0x1
BUTTON 6=0x6
BUTTON 7=0x7

[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.27]
MapExists=1

[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Genre.27]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 4=0xFD
HAT SWITCH=0x1
BUTTON 5=0x5
BUTTON 6=0x6

[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.28]
MapExists=1

[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Genre.28]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 5=0xFD
HAT SWITCH=0x1
BUTTON 6=0x6





[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.32]
MapExists=1

[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Genre.32]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 1=0x4
BUTTON 4=0x5
BUTTON 5=0xFD
HAT SWITCH=0x1

[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.33]
MapExists=1

[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Genre.33]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 1=0x4
BUTTON 4=0x5
BUTTON 5=0xFD
HAT SWITCH=0x1

[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.34]
MapExists=1

[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Genre.34]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 3=0x1
BUTTON 0=0x2
BUTTON 2=0x3
BUTTON 4=0x4
BUTTON 5=0x5
BUTTON 6=0xFD
HAT SWITCH=0x1
[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.8]
MapExists=1
[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Genre.8]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 4=0x3
BUTTON 2=0x4
BUTTON 3=0x5
BUTTON 5=0x6
BUTTON 6=0x7
BUTTON 7=0xFD
HAT SWITCH=0x1
Z ROTATION=0x3
[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.20]
MapExists=1
[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Genre.20]
MapExists=1
BUTTON 1=0x1
BUTTON 0=0x2
BUTTON 4=0x3
BUTTON 5=0xFD
BUTTON 6=0xFE
BUTTON 7=0xFC
[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.22]
MapExists=1
[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Genre.22]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 1=0x4
BUTTON 4=0x5
BUTTON 6=0x6
BUTTON 7=0x7
BUTTON 5=0x8
[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.23]
MapExists=1
[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Genre.23]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 1=0x1
BUTTON 0=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 5=0x6
BUTTON 7=0x7
BUTTON 6=0x8
[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.30]
MapExists=1
[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Genre.30]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
Z ROTATION=0x3
BUTTON 0=0x1
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 1=0x4
BUTTON 4=0x5
BUTTON 5=0x6
HAT SWITCH=0x1
BUTTON 6=0xA
BUTTON 7=0xD
[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.31]
MapExists=1
[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Genre.31]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 1=0x4
BUTTON 4=0x5
BUTTON 5=0x6
BUTTON 6=0x7
HAT SWITCH=0x1
BUTTON 7=0xB
[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.40]
MapExists=1
[SIDEWINDER FORCE FEEDBACK 2 JOYSTICK.Genre.40]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
Z ROTATION=0x3
BUTTON 1=0x2
SLIDER=0x4
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 5=0x6
BUTTON 6=0x7
BUTTON 7=0x8
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dinput\ihvmap\lgc20a.ini ===
[DirectInput]
DirectXVersion=0x800
Devices=VID_046D&PID_C20A,VID_046D&PID_C20A_1

[VID_046D&PID_C20A]
Name=VID_046D&PID_C20A
Controls=CTRL33556228,CTRL514,CTRL33554948,CTRL33555716,CTRL33555460,CTRL33555972,CTRL16,CTRL16777474,CTRL16777218,CTRL33555204,CTRL33554692,CTRL33554436,CTRL33556484,CTRL1538,CTRL1282_1
ImageFileName.0=LGC20A.png

[CTRL514]
Type=0x202
UsagePage=0x1
Usage=0x32
Name=THROTTLE
Align.0=L
CallOutMax.0=(321,23),(427,45)
LineData.0=(262,73),(297,35),(332,35)

[CTRL16777474]
Type=0x1000102
UsagePage=0x1
Usage=0x31
Name=Y AXIS
Align.0=R
CallOutMax.0=(2,206),(85,224)
LineData.0=(156,165),(119,213),(75,213)

[CTRL16777218]
Type=0x1000002
UsagePage=0x1
Usage=0x30
Name=X AXIS
Align.0=R
CallOutMax.0=(2,180),(85,198)
LineData.0=(145,150),(99,187),(67,187)

[CTRL1538]
Type=0x602
UsagePage=0x1
Usage=0x36
Name=SLIDER
Align.0=L
CallOutMax.0=(244,227),(329,249)
LineData.0=(224,167),(224,202),(244,238)

[CTRL1282_1]
Type=0x502
UsagePage=0x1
Usage=0x35
Name=RUDDER
Align.0=T
CallOutMax.0=(143,254),(228,276)
LineData.0=(211,152),(184,222),(184,258)

[CTRL33556228]
Type=0x2000704
UsagePage=0x9
Usage=0x8
Name=BUTTON 7
Align.0=B
CallOutMax.0=(209,0),(303,22)
LineData.0=(255,67),(255,9)

[CTRL33554948]
Type=0x2000204
UsagePage=0x9
Usage=0x3
Name=BUTTON 2
Align.0=L
CallOutMax.0=(321,97),(429,119)
LineData.0=(282,101),(307,108),(336,107)

[CTRL33555716]
Type=0x2000504
UsagePage=0x9
Usage=0x6
Name=BUTTON 5
Align.0=L
CallOutMax.0=(321,71),(429,92)
LineData.0=(267,87),(297,82),(343,82)

[CTRL33555460]
Type=0x2000404
UsagePage=0x9
Usage=0x5
Name=BUTTON 4
Align.0=L
CallOutMax.0=(321,48),(427,68)
LineData.0=(248,91),(289,59),(334,59)

[CTRL33555972]
Type=0x2000604
UsagePage=0x9
Usage=0x7
Name=BUTTON 6
Align.0=B
CallOutMax.0=(85,1),(184,22)
LineData.0=(134,66),(134,8)

[CTRL16]
Type=0x10
UsagePage=0x1
Usage=0x39
Name=POV 0
Align.0=BR
CallOutMax.0=(3,26),(85,47)
LineData.0=(119,97),(75,35)

[CTRL33555204]
Type=0x2000304
UsagePage=0x9
Usage=0x4
Name=BUTTON 3
Align.0=L
CallOutMax.0=(319,176),(429,196)
LineData.0=(232,107),(264,185),(332,185)

[CTRL33554692]
Type=0x2000104
UsagePage=0x9
Usage=0x2
Name=BUTTON 1
Align.0=L
CallOutMax.0=(321,125),(428,145)
LineData.0=(259,110),(297,135),(338,135)

[CTRL33554436]
Type=0x2000004
UsagePage=0x9
Usage=0x1
Name=BUTTON 0
Align.0=L
CallOutMax.0=(320,149),(429,171)
LineData.0=(242,122),(292,156),(336,156)

[CTRL33556484]
Type=0x2000804
UsagePage=0x9
Usage=0x9
Name=BUTTON 8
Align.0=R
CallOutMax.0=(3,151),(86,173)
LineData.0=(139,126),(106,163),(68,163)

[VID_046D&PID_C20A.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.1]
MapExists=1

[VID_046D&PID_C20A.Genre.1]
MapExists=1

[VID_046D&PID_C20A.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.34]
MapExists=1

[VID_046D&PID_C20A.Genre.34]
MapExists=1
CTRL16777218=0x1
CTRL16777474=0x2
CTRL33554692=0x1
CTRL33554436=0x2
CTRL33555460=0x3
CTRL33556228=0x4
CTRL33555972=0x5
CTRL33554948=0xFD
CTRL16=0x1
CTRL33555716=0xFE
CTRL33556484=0xFC


[VID_046D&PID_C20A_1]
VID=0x46D
PID=0xC20A
Name=VID_046D&PID_C20A
Controls=CTRL16777730_1,CTRL16777218_1,CTRL33554436_1,CTRL33554692_1,CTRL33554948_1,CTRL33556228_1,CTRL16777474_1,CTRL16_1,CTRL33555204_1,CTRL33555460_1,CTRL33555716_1,CTRL33555972_1,CTRL33556484_1,CTRL514_1,CTRL1282,CTRL1538_1
ImageFileName.0=LGC20A.PNG

[CTRL16777730_1]
Type=0x1000202
UsagePage=0x1
Usage=0x36
Name=SLIDER
Align.0=L
CallOutMax.0=(244,227),(329,249)
LineData.0=(224,167),(224,202),(244,238)

[CTRL16777218_1]
Type=0x1000002
UsagePage=0x1
Usage=0x30
Name=X AXIS
Align.0=R
CallOutMax.0=(2,180),(85,198)
LineData.0=(145,150),(99,187),(67,187)

[CTRL16777474_1]
Type=0x1000102
UsagePage=0x1
Usage=0x31
Name=Y AXIS
Align.0=R
CallOutMax.0=(2,206),(85,224)
LineData.0=(156,165),(119,213),(75,213)

[CTRL514_1]
Type=0x202
UsagePage=0x1
Usage=0x32
Name=THROTTLE
Align.0=L
CallOutMax.0=(321,23),(427,45)
LineData.0=(262,73),(297,35),(332,35)

[CTRL1282]
Type=0x502
UsagePage=0x1
Usage=0x35
Name=RUDDER
Align.0=T
CallOutMax.0=(143,254),(228,276)
LineData.0=(211,152),(184,222),(184,258)

[CTRL33554436_1]
Type=0x2000004
UsagePage=0x9
Usage=0x1
Name=TRIGGER
Align.0=L
CallOutMax.0=(320,149),(429,171)
LineData.0=(242,122),(292,156),(336,156)

[CTRL33554692_1]
Type=0x2000104
UsagePage=0x9
Usage=0x2
Name=BUTTON 2
Align.0=L
CallOutMax.0=(321,125),(428,145)
LineData.0=(259,110),(297,135),(338,135)

[CTRL33554948_1]
Type=0x2000204
UsagePage=0x9
Usage=0x3
Name=BUTTON 3
Align.0=L
CallOutMax.0=(321,97),(429,119)
LineData.0=(282,101),(307,108),(336,107)

[CTRL33556228_1]
Type=0x2000704
UsagePage=0x9
Usage=0x8
Name=BUTTON 8
Align.0=B
CallOutMax.0=(209,0),(303,22)
LineData.0=(255,67),(255,9)

[CTRL16_1]
Type=0x10
UsagePage=0x1
Usage=0x39
Name=HAT SWITCH
Align.0=BR
CallOutMax.0=(3,26),(85,47)
LineData.0=(119,97),(75,35)

[CTRL33555204_1]
Type=0x2000304
UsagePage=0x9
Usage=0x4
Name=BUTTON 4
Align.0=L
CallOutMax.0=(319,176),(429,196)
LineData.0=(232,107),(264,185),(332,185)

[CTRL33555460_1]
Type=0x2000404
UsagePage=0x9
Usage=0x5
Name=BUTTON 5
Align.0=L
CallOutMax.0=(321,48),(427,68)
LineData.0=(248,91),(289,59),(334,59)

[CTRL33555716_1]
Type=0x2000504
UsagePage=0x9
Usage=0x6
Name=BUTTON 6
Align.0=L
CallOutMax.0=(321,71),(429,92)
LineData.0=(267,87),(297,82),(343,82)

[CTRL33555972_1]
Type=0x2000604
UsagePage=0x9
Usage=0x7
Name=BUTTON 7
Align.0=B
CallOutMax.0=(85,1),(184,22)
LineData.0=(134,66),(134,8)

[CTRL33556484_1]
Type=0x2000804
UsagePage=0x9
Usage=0x9
Name=BUTTON 9
Align.0=R
CallOutMax.0=(3,151),(86,173)
LineData.0=(139,126),(106,163),(68,163)

[CTRL1538_1]
Type=0x602
UsagePage=0x1
Usage=0x32
Name=EXTRA
Align.0=TR
CallOutMax.0=(143,32),(227,87)
LineData.0=(226,40),(238,40),(238,70)




[VID_046D&PID_C20A_1.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.1]
MapExists=1
[VID_046D&PID_C20A_1.Genre.1]
MapExists=1
CTRL16777218_1=0x1
CTRL33554436_1=0x1
CTRL33554692_1=0x2
CTRL33554948_1=0x3
CTRL33556228_1=0xFD
CTRL16777474_1=0x4
CTRL16_1=0x1
CTRL33555204_1=0x4
CTRL33555460_1=0x5
CTRL33555716_1=0x6
CTRL33555972_1=0x7
CTRL33556484_1=0x9
[VID_046D&PID_C20A_1.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.8]
MapExists=1
[VID_046D&PID_C20A_1.Genre.8]
MapExists=1
CTRL16777218_1=0x1
CTRL16777474_1=0x2
CTRL33554436_1=0x1
CTRL33554692_1=0x2
CTRL33554948_1=0x3
CTRL33555204_1=0x4
CTRL33555460_1=0x5
CTRL33555716_1=0x6
CTRL33555972_1=0x7
CTRL33556228_1=0xFD
CTRL16_1=0x1
CTRL33556484_1=0x9
CTRL1282=0x3
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dinput\ihvmap\ms27.ini ===
[DirectInput]
DirectXVersion=0x800
Devices=Microsoft SideWinder Plug & Play Game Pad

[Microsoft SideWinder Plug & Play Game Pad]
VID=1118
PID=39
Name=Microsoft SideWinder Plug & Play Game Pad
Controls=Y AXIS,X AXIS,BUTTON 0,BUTTON 1,BUTTON 2,BUTTON 3,BUTTON 4,BUTTON 5
ImageFileName.0=MS27.PNG

[Y Axis]
UsagePage=0x1
Usage=0x31
Type=0x102
Name=Y AXIS
OverlayFileName.0=MS27_1.PNG
OverlayRect.0=(102,112),(614,624)
Align.0=TR
CallOutMax.0=(1,224),(142,273)
LineData.0=(116,220),(116,139)

[X Axis]
UsagePage=0x1
Usage=0x30
Type=0x2
Name=X AXIS
OverlayFileName.0=MS27_1.PNG
OverlayRect.0=(102,112),(614,624)
Align.0=BL
CallOutMax.0=(0,61),(136,99)
LineData.0=(21,99),(21,119),(111,119)

[Button 0]
UsagePage=0x9
Usage=0x1
Type=0x4
Name=BUTTON 0
OverlayFileName.0=MS27_2.PNG
OverlayRect.0=(197,145),(709,657)
Align.0=L
CallOutMax.0=(268,200),(429,221)
LineData.0=(264,212),(212,212),(212,159)

[Button 1]
UsagePage=0x9
Usage=0x2
Type=0x104
Name=BUTTON 1
OverlayFileName.0=MS27_3.PNG
OverlayRect.0=(220,147),(732,659)
Align.0=L
CallOutMax.0=(274,167),(429,189)
LineData.0=(270,181),(234,181),(234,163)

[Button 2]
UsagePage=0x9
Usage=0x3
Type=0x204
Name=BUTTON 2
OverlayFileName.0=MS27_4.PNG
OverlayRect.0=(198,129),(710,641)
Align.0=L
CallOutMax.0=(253,42),(427,63)
LineData.0=(249,55),(210,55),(210,135)

[Button 3]
UsagePage=0x9
Usage=0x4
Type=0x304
Name=BUTTON 3
OverlayFileName.0=MS27_5.PNG
OverlayRect.0=(221,131),(733,643)
Align.0=L
CallOutMax.0=(265,69),(428,89)
LineData.0=(262,81),(231,81),(231,136)

[Button 4]
UsagePage=0x9
Usage=0x5
Type=0x404
Name=BUTTON 4
Align.0=BR
CallOutMax.0=(9,10),(163,55)
LineData.0=(150,55),(150,100)

[Button 5]
UsagePage=0x9
Usage=0x6
Type=0x504
Name=BUTTON 5
Align.0=L
CallOutMax.0=(258,108),(429,130)
LineData.0=(254,122),(244,122),(244,133)


[MICROSOFT SIDEWINDER PLUG & PLAY GAME PAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.2]
MapExists=1
[MICROSOFT SIDEWINDER PLUG & PLAY GAME PAD.Genre.2]
MapExists=1
X AXIS=0x1
BUTTON 2=0x1
BUTTON 1=0x2
BUTTON 0=0x3
Y AXIS=0x4
BUTTON 5=0x4
BUTTON 4=0x5
BUTTON 3=0x9
[MICROSOFT SIDEWINDER PLUG & PLAY GAME PAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.3]
MapExists=1
[MICROSOFT SIDEWINDER PLUG & PLAY GAME PAD.Genre.3]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 2=0x1
BUTTON 1=0x2
BUTTON 0=0x3
BUTTON 4=0x4
BUTTON 5=0x6
BUTTON 3=0x7
[MICROSOFT SIDEWINDER PLUG & PLAY GAME PAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.41]
MapExists=1
[MICROSOFT SIDEWINDER PLUG & PLAY GAME PAD.Genre.41]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 2=0x1
BUTTON 1=0x2
BUTTON 0=0x3
BUTTON 3=0x9
BUTTON 5=0xE4
BUTTON 4=0xEC
[MICROSOFT SIDEWINDER PLUG & PLAY GAME PAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.4]
MapExists=1
[MICROSOFT SIDEWINDER PLUG & PLAY GAME PAD.Genre.4]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 3=0x2
BUTTON 2=0x3
BUTTON 5=0x4
BUTTON 4=0x5
BUTTON 1=0xFC
[MICROSOFT SIDEWINDER PLUG & PLAY GAME PAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.5]
MapExists=1
[MICROSOFT SIDEWINDER PLUG & PLAY GAME PAD.Genre.5]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 2=0x1
BUTTON 1=0x2
BUTTON 0=0x3
BUTTON 4=0x4
BUTTON 5=0x6
BUTTON 3=0x9
[MICROSOFT SIDEWINDER PLUG & PLAY GAME PAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.6]
MapExists=1
[MICROSOFT SIDEWINDER PLUG & PLAY GAME PAD.Genre.6]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 2=0x1
BUTTON 1=0x2
BUTTON 0=0x3
BUTTON 4=0x4
BUTTON 5=0x5
BUTTON 3=0x7
[MICROSOFT SIDEWINDER PLUG & PLAY GAME PAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.7]
MapExists=1
[MICROSOFT SIDEWINDER PLUG & PLAY GAME PAD.Genre.7]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 2=0x1
BUTTON 1=0x2
BUTTON 0=0x3
BUTTON 5=0x4
BUTTON 4=0x5
BUTTON 3=0x9
[MICROSOFT SIDEWINDER PLUG & PLAY GAME PAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.33]
MapExists=1
[MICROSOFT SIDEWINDER PLUG & PLAY GAME PAD.Genre.33]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 5=0xFE
[MICROSOFT SIDEWINDER PLUG & PLAY GAME PAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.1]
MapExists=1
[MICROSOFT SIDEWINDER PLUG & PLAY GAME PAD.Genre.1]
MapExists=1
X AXIS=0x1
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 4=0xFD
Y AXIS=0x4
BUTTON 3=0x4
BUTTON 5=0x6
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dinput\ihvmap\ms26.ini ===
[DirectInput]
DirectXVersion=0x800
Devices=USB HUMAN INTERFACE DEVICE

[USB Human Interface Device]
Name=USB Human Interface Device
Controls=Y AXIS,X AXIS,BUTTON 0,BUTTON 1,BUTTON 2,BUTTON 3,BUTTON 4,BUTTON 5,BUTTON 6,BUTTON 7,BUTTON 8
ImageFileName.0=MS26.PNG
VID=1118
PID=38


[Y Axis]
UsagePage=0x1
Usage=0x31
Type=0x102
Name=Y AXIS
OverlayFileName.0=MS26_01.PNG
OverlayRect.0=(110,108),(622,620)
Align.0=TR
CallOutMax.0=(4,48),(113,90)
LineData.0=(114,56),(126,56),(126,110)

[X Axis]
UsagePage=0x1
Usage=0x30
Type=0x2
Name=X AXIS
OverlayFileName.0=MS26_01.PNG
OverlayRect.0=(110,108),(622,620)
Align.0=R
CallOutMax.0=(1,98),(91,142)
LineData.0=(93,119),(117,119)

[Button 8]
UsagePage=0x9
Usage=0x9
Type=0x804
Name=BUTTON 8
OverlayFileName.0=MS26_02.PNG
OverlayRect.0=(121,136),(633,648)
Align.0=TL
CallOutMax.0=(27,249),(181,288)
LineData.0=(49,244),(49,230),(129,230),(129,148)


[Button 6]
UsagePage=0x9
Usage=0x7
Type=0x604
Name=BUTTON 6
Align.0=R
CallOutMax.0=(15,21),(140,39)
LineData.0=(141,28),(151,28),(151,103)


[Button 7]
UsagePage=0x9
Usage=0x8
Type=0x704
Name=BUTTON 7
Align.0=L
CallOutMax.0=(278,124),(426,143)
LineData.0=(274,135),(254,135),(254,148)


[Button 3]
UsagePage=0x9
Usage=0x4
Type=0x304
Name=BUTTON 3
OverlayFileName.0=MS26_03.PNG
OverlayRect.0=(190,150),(702,662)
Align.0=L
CallOutMax.0=(243,22),(392,40)
LineData.0=(238,32),(201,32),(201,156)


[Button 4]
UsagePage=0x9
Usage=0x5
Type=0x404
Name=BUTTON 4
OverlayFileName.0=MS26_04.PNG
OverlayRect.0=(212,149),(724,661)
Align.0=L
CallOutMax.0=(263,46),(413,65)
LineData.0=(260,57),(221,57),(221,154)


[Button 5]
UsagePage=0x9
Usage=0x6
Type=0x504
Name=BUTTON 5
OverlayFileName.0=MS26_05.PNG
OverlayRect.0=(234,153),(746,665)
Align.0=L
CallOutMax.0=(276,75),(427,93)
LineData.0=(271,85),(243,85),(243,156)


[Button 0]
UsagePage=0x9
Usage=0x1
Type=0x4
Name=BUTTON 0
OverlayFileName.0=MS26_06.PNG
OverlayRect.0=(195,169),(707,681)
Align.0=L
CallOutMax.0=(270,240),(414,258)
LineData.0=(265,251),(204,251),(204,181)


[Button 1]
UsagePage=0x9
Usage=0x2
Type=0x104
Name=BUTTON 1
OverlayFileName.0=MS26_07.PNG
OverlayRect.0=(216,167),(728,679)
Align.0=L
CallOutMax.0=(276,214),(420,231)
LineData.0=(272,223),(223,223),(223,180)


[Button 2]
UsagePage=0x9
Usage=0x3
Type=0x204
Name=BUTTON 2
OverlayFileName.0=MS26_08.PNG
OverlayRect.0=(236,170),(748,682)
Align.0=L
CallOutMax.0=(284,187),(422,205)
LineData.0=(279,198),(244,198),(244,183)


[USBHID.Genre.9]
Y Axis=1
X Axis=2
Button 0=2
Button 1=4
Button 2=5
Button 3=6
Button 4=7
Button 5=8
Button 6=9
Button 7=3
Button 8=1

[USB Human Interface Device.Genre.9]
Y Axis=1
X Axis=2
Button 0=6
Button 1=3
Button 2=7
Button 3=1
Button 4=5
Button 5=8
Button 6=2
Button 7=4
Button 8=253

[USB Human Interface Device.Genre.33]
Y Axis=2
X Axis=1
Button 0=1
Button 1=2
Button 2=254
Button 3=3
Button 4=4
Button 7=254
Button 8=253
Button 6=5
[USB Human Interface Device.Genre.34]
Y Axis=2
X Axis=1
Button 0=1
Button 2=254
Button 3=2
Button 4=4
Button 6=5
Button 7=3
Button 8=253

[USB Human Interface Device.Genre.2]
Y Axis=2
X Axis=1
Button 0=8
Button 1=2
Button 2=7
Button 3=1
Button 4=3
Button 5=6
Button 6=5
Button 7=4
Button 8=253
[USB Human Interface Device.Genre.3]
Y Axis=3
X Axis=1
Button 0=6
Button 1=5
Button 2=3
Button 3=1
Button 4=4
Button 5=254
Button 7=3
Button 8=253
Button 6=2
[USB Human Interface Device.Genre.41]
Y Axis=4
X Axis=1
Button 0=6
Button 1=5
Button 2=4
Button 3=1
Button 4=7
Button 5=8
Button 6=3
Button 7=2
Button 8=253
[USB Human Interface Device.Genre.8]
Y Axis=2
X Axis=1
Button 0=2
Button 1=7
Button 2=8
Button 3=1
Button 4=6
Button 5=3
Button 6=5
Button 7=4
Button 8=253
[USB Human Interface Device.Genre.10]
Y Axis=1
X Axis=2
Button 0=5
Button 1=4
Button 2=1
Button 3=2
Button 4=9
Button 5=6
Button 6=3
Button 7=10
Button 8=253
[USB Human Interface Device.Genre.4]
Y Axis=3
X Axis=1
Button 0=5
Button 1=254
Button 3=4
Button 4=2
Button 6=3
Button 7=1
Button 8=253
[USB Human Interface Device.Genre.5]
Y Axis=3
X Axis=1
Button 0=5
Button 1=4
Button 2=8
Button 3=1
Button 4=3
Button 5=7
Button 6=9
Button 7=2
Button 8=253
[USB Human Interface Device.Genre.6]
Y Axis=2
X Axis=1
Button 0=6
Button 1=4
Button 2=5
Button 3=1
Button 4=3
Button 5=254
Button 6=7
Button 7=2
Button 8=253
[USB Human Interface Device.Genre.7]
Y Axis=2
X Axis=1
Button 0=3
Button 1=5
Button 2=7
Button 3=1
Button 4=4
Button 5=6
Button 6=8
Button 7=2
Button 8=253
[USB Human Interface Device.Genre.13]
Y Axis=2
X Axis=1
Button 0=5
Button 1=2
Button 2=254
Button 3=1
Button 4=6
Button 5=4
Button 6=3
Button 7=7
Button 8=253
[USB Human Interface Device.Genre.14]
Y Axis=2
X Axis=1
Button 0=3
Button 1=254
Button 2=7
Button 3=1
Button 4=5
Button 5=8
Button 6=4
Button 7=2
Button 8=253
[USB Human Interface Device.Genre.15]
Y Axis=2
X Axis=1
Button 0=8
Button 1=6
Button 2=7
Button 3=3
Button 4=2
Button 5=4
Button 6=1
Button 7=5
Button 8=253
[USB Human Interface Device.Genre.16]
Y Axis=2
X Axis=1
Button 0=4
Button 1=6
Button 2=254
Button 3=2
Button 4=5
Button 5=7
Button 6=3
Button 7=1
Button 8=253
[USB Human Interface Device.Genre.17]
Y Axis=2
X Axis=1
Button 0=1
Button 1=4
Button 2=6
Button 3=3
Button 4=2
Button 5=5
Button 6=7
Button 7=8
Button 8=253
[USB Human Interface Device.Genre.18]
Y Axis=2
X Axis=1
Button 0=3
Button 1=4
Button 2=2
Button 3=1
Button 4=5
Button 5=8
Button 6=6
Button 7=7
Button 8=253
[USB Human Interface Device.Genre.19]
Y Axis=2
X Axis=1
Button 0=1
Button 1=3
Button 2=7
Button 3=2
Button 4=4
Button 5=8
Button 6=5
Button 7=6
Button 8=253
[USB Human Interface Device.Genre.20]
Button 0=3
Button 1=2
Button 2=3
Button 7=253
Button 8=253
Button 3=2
Button 5=254
Button 6=1
[USB Human Interface Device.Genre.21]
Y Axis=2
X Axis=1
Button 0=6
Button 1=4
Button 2=7
Button 3=5
Button 4=3
Button 5=2
Button 6=1
Button 7=9
Button 8=253
[USB Human Interface Device.Genre.22]
Y Axis=2
X Axis=1
Button 0=1
Button 1=4
Button 2=3
Button 3=8
Button 4=9
Button 5=2
Button 6=5
Button 7=7
Button 8=253
[USB Human Interface Device.Genre.23]
Y Axis=2
X Axis=1
Button 0=3
Button 1=5
Button 2=7
Button 3=4
Button 4=6
Button 5=9
Button 6=2
Button 7=1
Button 8=253
[USB Human Interface Device.Genre.24]
Y Axis=2
X Axis=1
Button 0=6
Button 1=5
Button 2=4
Button 3=1
Button 4=8
Button 5=3
Button 6=7
Button 7=2
Button 8=253
[USB Human Interface Device.Genre.25]
Y Axis=2
X Axis=1
Button 0=2
Button 1=8
Button 2=7
Button 3=1
Button 4=5
Button 5=9
Button 6=4
Button 7=3
Button 8=253
[USB Human Interface Device.Genre.26]
Y Axis=2
X Axis=1
Button 0=4
Button 1=8
Button 2=7
Button 3=2
Button 4=5
Button 5=9
Button 6=1
Button 7=3
Button 8=253
[USB Human Interface Device.Genre.27]
Y Axis=2
X Axis=1
Button 0=4
Button 1=7
Button 2=6
Button 3=3
Button 4=1
Button 5=8
Button 6=5
Button 7=2
Button 8=253
[USB Human Interface Device.Genre.28]
Y Axis=2
X Axis=1
Button 0=5
Button 1=4
Button 2=2
Button 3=3
Button 4=1
Button 5=6
Button 7=254
Button 8=253
Button 6=6
[USB Human Interface Device.Genre.29]
Y Axis=2
X Axis=1
Button 0=2
Button 1=6
Button 2=254
Button 3=1
Button 4=4
Button 5=3
Button 6=7
Button 7=5
Button 8=253
[USB Human Interface Device.Genre.30]
Y Axis=2
X Axis=1
Button 0=2
Button 1=3
Button 2=12
Button 3=1
Button 4=5
Button 5=11
Button 6=6
Button 7=4
Button 8=253
[USB Human Interface Device.Genre.31]
Y Axis=2
X Axis=1
Button 0=1
Button 1=3
Button 2=8
Button 3=2
Button 4=5
Button 5=7
Button 6=6
Button 7=4
Button 8=253
[USB Human Interface Device.Genre.32]
Y Axis=2
X Axis=1
Button 0=2
Button 1=4
Button 2=6
Button 3=1
Button 4=3
Button 5=7
Button 6=5
Button 7=254
Button 8=253
[USB Human Interface Device.Genre.11]
Y Axis=2
X Axis=1
Button 0=5
Button 1=6
Button 2=1
Button 3=4
Button 4=7
Button 5=2
Button 6=8
Button 7=3
Button 8=253
[USB Human Interface Device.Genre.12]
Y Axis=2
X Axis=1
Button 0=5
Button 1=7
Button 2=8
Button 3=1
Button 4=3
Button 5=6
Button 6=2
Button 7=4
Button 8=253
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dinput\ihvmap\ms28.ini ===
[DirectInput]
DirectXVersion=0x800
Devices=Dual Strike

[Dual Strike]
VID=1118
PID=40
Name=Dual Strike
Controls=Y AXIS,X AXIS,BUTTON 0,BUTTON 1,BUTTON 2,BUTTON 3,BUTTON 4,BUTTON 5,BUTTON 6,BUTTON 7,BUTTON 8,HAT SWITCH
ImageFileName.0=MS28.PNG

[Y Axis]
UsagePage=0x1
Usage=0x31
Type=0x102
Name=Y AXIS
Align.0=TR
CallOutMax.0=(12,258),(164,297)
LineData.0=(164,266),(199,266),(199,200)

[X Axis]
UsagePage=0x1
Usage=0x30
Type=0x2
Name=X AXIS
Align.0=T
CallOutMax.0=(2,206),(152,245)
LineData.0=(76,218),(76,188),(183,188)

[Button 0]
UsagePage=0x9
Usage=0x1
Type=0x4
Name=BUTTON 0
OverlayFileName.0=MS28_1.PNG
OverlayRect.0=(239,153),(251,167)
Align.0=L
CallOutMax.0=(298,143),(430,170)
LineData.0=(308,156),(253,156)

[Button 1]
UsagePage=0x9
Usage=0x2
Type=0x104
Name=BUTTON 1
OverlayFileName.0=MS28_2.PNG
OverlayRect.0=(223,159),(241,171)
Align.0=L
CallOutMax.0=(260,236),(429,255)
LineData.0=(258,247),(229,247),(229,166)

[Button 2]
UsagePage=0x9
Usage=0x3
Type=0x204
Name=BUTTON 2
OverlayFileName.0=MS28_3.PNG
OverlayRect.0=(246,168),(260,182)
Align.0=L
CallOutMax.0=(285,181),(429,204)
LineData.0=(283,193),(253,193),(253,178)

[Button 3]
UsagePage=0x9
Usage=0x4
Type=0x304
Name=BUTTON 3
OverlayFileName.0=MS28_4.PNG
OverlayRect.0=(233,171),(246,188)
Align.0=L
CallOutMax.0=(267,210),(429,229)
LineData.0=(267,219),(239,219),(239,184)

[Button 4]
UsagePage=0x9
Usage=0x5
Type=0x404
Name=BUTTON 4
OverlayFileName.0=MS28_5.PNG
OverlayRect.0=(118,149),(137,164)
Align.0=L
CallOutMax.0=(180,28),(380,49)
LineData.0=(177,40),(167,40),(167,157),(131,157)

[Button 5]
UsagePage=0x9
Usage=0x6
Type=0x504
Name=BUTTON 5
OverlayFileName.0=MS28_6.PNG
OverlayRect.0=(110,162),(129,178)
Align.0=L
CallOutMax.0=(197,56),(392,76)
LineData.0=(196,68),(178,68),(178,172),(123,172)

[Button 6]
UsagePage=0x9
Usage=0x7
Type=0x604
Name=BUTTON 6
Align.0=BL
CallOutMax.0=(2,25),(140,63)
LineData.0=(28,62),(28,74),(131,74),(131,82)

[Button 7]
UsagePage=0x9
Usage=0x8
Type=0x704
Name=BUTTON 7
Align.0=TL
CallOutMax.0=(283,92),(429,135)
LineData.0=(281,103),(254,103),(254,136)

[Button 8]
UsagePage=0x9
Usage=0x9
Type=0x804
Name=BUTTON 8
OverlayFileName.0=MS28_7.PNG
OverlayRect.0=(129,134),(146,153)
Align.0=L
CallOutMax.0=(168,2),(375,24)
LineData.0=(165,17),(157,17),(157,144),(140,144)

[Hat Switch]
UsagePage=0x1
Usage=0x39
Type=0x10
Name=HAT SWITCH
OverlayFileName.0=MS28_8.PNG
OverlayRect.0=(97,97),(137,137)
Align.0=TL
CallOutMax.0=(2,131),(109,171)
LineData.0=(21,130),(21,114),(105,114)


[DUAL STRIKE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.1]
MapExists=1
[DUAL STRIKE.Genre.1]
MapExists=1
X AXIS=0x1
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 7=0xFD
Y AXIS=0x4
HAT SWITCH=0x1
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 5=0x6
BUTTON 6=0x7
BUTTON 8=0x9

[DUAL STRIKE.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.9]
MapExists=1
[DUAL STRIKE.Genre.9]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 7=0x1
BUTTON 8=0x2
BUTTON 5=0x3
BUTTON 4=0x4
BUTTON 6=0x7
HAT SWITCH=0x1
BUTTON 0=0xE0
BUTTON 3=0xE8
BUTTON 1=0xE4
BUTTON 2=0xEC
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dinput\ihvmap\lgc291.ini ===
[DirectInput]
DirectXVersion=0x800
Devices=LOGITECHWINGMANRALLYFORCEUSB,LOGITECHWINGMANRALLYFORCESERIAL

[LOGITECHWINGMANRALLYFORCESERIAL]
VID=0
PID=0
Name=LOGITECHWINGMANRALLYFORCESERIAL
ImageFileName.0=LGC291.png
Controls=CTRL16777218,CTRL33554436,CTRL33554692,CTRL33554948,CTRL33555460,CTRL16777474,CTRL33555204,CTRL33555716

[LOGITECHWINGMANRALLYFORCEUSB]
VID=0x46D
PID=0xC291
Name=LOGITECHWINGMANRALLYFORCEUSB
ImageFileName.0=LGC291.png
Controls=CTRL16777218,CTRL33554436,CTRL33554692,CTRL33554948,CTRL33555460,CTRL16777474,CTRL33555204,CTRL33555716

[CTRL16777218]
Type=0x1000002
UsagePage=0x1
Usage=0x30
Name=X AXIS
Align.0=R
CallOutMax.0=(2,236),(115,257)
LineData.0=(204,201),(143,247),(95,247)

[CTRL33554436]
Type=0x4
UsagePage=0x9
Usage=0x1
Name=BUTTON 0
Align.0=R
CallOutMax.0=(3,25),(112,47)
LineData.0=(198,121),(132,35),(91,35)

[CTRL33554692]
Type=0x104
UsagePage=0x9
Usage=0x2
Name=BUTTON 1
Align.0=L
CallOutMax.0=(326,27),(429,49)
LineData.0=(246,122),(296,37),(345,37)

[CTRL33554948]
Type=0x204
UsagePage=0x9
Usage=0x3
Name=BUTTON 2
Align.0=R
CallOutMax.0=(4,53),(112,73)
LineData.0=(198,134),(131,66),(98,66)

[CTRL33555460]
Type=0x404
UsagePage=0x9
Usage=0x5
Name=BUTTON 4
Align.0=R
CallOutMax.0=(2,82),(112,102)
LineData.0=(193,148),(125,94),(94,94)

[CTRL16777474]
Type=0x1000102
UsagePage=0x1
Usage=0x31
Name=Y AXIS
Align.0=TR
CallOutMax.0=(1,187),(114,209)
LineData.0=(130,159),(109,192)

[CTRL33555204]
Type=0x304
UsagePage=0x9
Usage=0x4
Name=BUTTON 3
Align.0=L
CallOutMax.0=(326,54),(430,76)
LineData.0=(243,138),(307,66),(350,67)

[CTRL33555716]
Type=0x504
UsagePage=0x9
Usage=0x6
Name=BUTTON 5
Align.0=L
CallOutMax.0=(325,81),(429,102)
LineData.0=(242,153),(307,94),(336,94)

[LOGITECHWINGMANRALLYFORCESERIAL.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.1]
MapExists=1
[LOGITECHWINGMANRALLYFORCESERIAL.Genre.1]
MapExists=1
CTRL16777218=0x1
CTRL33554436=0x1
CTRL33554692=0x2
CTRL33554948=0x3
CTRL33555460=0xFD
CTRL16777474=0x4
CTRL33555204=0x4
CTRL33555716=0x6

[LOGITECHWINGMANRALLYFORCEUSB.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.1]
MapExists=1
[LOGITECHWINGMANRALLYFORCEUSB.Genre.1]
MapExists=1
CTRL16777218=0x1
CTRL33554436=0x1
CTRL33554692=0x2
CTRL33554948=0x3
CTRL33555460=0xFD
CTRL16777474=0x4
CTRL33555204=0x4
CTRL33555716=0x6
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dinput\ihvmap\ms3b.ini ===
[DirectInput]
DirectXVersion=0x800
Devices=Microsoft SideWinder Game Voice 
[Microsoft SideWinder Game Voice]
VID=1118
PID=59
Name=Microsoft SideWinder Game Voice
Controls=BUTTON 1,BUTTON 2,BUTTON 3,BUTTON 4,All,Team,CnC,Mute
ImageFileName.0=ms3b.png

[Button 1]
UsagePage=9
Usage=19
Offset=0x1204
Name=BUTTON 1
OverlayFileName.0=ms3b_1.png
OverlayRect.0=(125,159),(637,671)
Align.0=R
CallOutMax.0=(1,159),(76,203)
LineData.0=(60,179),(127,179)

[Button 2]
UsagePage=9
Usage=20
Offset=0x1304
Name=BUTTON 2
OverlayFileName.0=ms3b_2.png
OverlayRect.0=(125,131),(637,643)
Align.0=R
CallOutMax.0=(0,111),(75,152)
LineData.0=(59,129),(103,129),(130,141)

[Button 3]
UsagePage=9
Usage=21
Offset=0x1404
Name=BUTTON 3
OverlayFileName.0=ms3b_3.png
OverlayRect.0=(144,117),(656,629)
Align.0=R
CallOutMax.0=(0,55),(73,99)
LineData.0=(55,76),(102,76),(159,121)

[Button 4]
UsagePage=9
Usage=22
Offset=0x1504
Name=BUTTON 4
OverlayFileName.0=ms3b_4.png
OverlayRect.0=(180,115),(692,627)
Align.0=R
CallOutMax.0=(0,0),(72,39)
LineData.0=(54,16),(197,16),(197,115)

[Team]
UsagePage=9
Usage=18
Offset=0x1104
Name=Team
OverlayFileName.0=ms3b_t.png
OverlayRect.0=(202,134),(714,646)
Align.0=L
CallOutMax.0=(356,0),(429,37)
LineData.0=(364,16),(225,16),(225,134)

[Mute]
UsagePage=9
Usage=24
Offset=0x1704
Name=Mute
OverlayFileName.0=ms3b_m.png
OverlayRect.0=(161,143),(673,655)
Align.0=R
CallOutMax.0=(0,218),(76,259)
LineData.0=(63,237),(104,237),(167,175)

[All]
UsagePage=9
Usage=17
Offset=0x1004
Name=All Players
OverlayFileName.0=ms3b_a.png
OverlayRect.0=(187,166),(699,678)
Align.0=L
CallOutMax.0=(359,252),(430,290)
LineData.0=(381,270),(325,270),(222,197)

[CnC]
UsagePage=9
Usage=23
Offset=0x1604
Name=Command and Control
OverlayFileName.0=ms3b_c.png
OverlayRect.0=(231,123),(743,635)
Align.0=L
CallOutMax.0=(356,136),(430,172)
LineData.0=(373,153),(286,153)

[Microsoft SideWinder Game Voice.Genre.131]
All=10
Team=9
Button 1=1
Button 2=2
Button 3=3
Button 4=4
CnC=16
Mute=11
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dinput\ihvmap\ms6_g.ini ===
[DirectInput]
DirectXVersion=0x800
Devices=Microsoft SideWinder Force Feedback Pro
[Microsoft SideWinder Force Feedback Pro]
Name=Microsoft SideWinder Force Feedback Pro
Controls=X,Y,Throttle,Rudder,Hat Switch,Button 1,Button 2,Button 3,Button 4,Button A,Button B,Button C,Button D,Shift
ImageFileName.0=MS6.PNG
[X]
Name=X
Type=0x1000002
Align.0=BL
CallOutMax.0=(327,105),(430,141)
LineData.0=(332,140),(332,153),(227,153)
[Y]
Name=Y
Type=0x1000102
Align.0=TL
CallOutMax.0=(328,228),(430,270)
LineData.0=(327,233),(218,233),(218,169)
[Throttle]
Name=Dial
Type=0x202
OverlayFileName.0=MS6_9.png
OverlayRect.0=(170,200),(682,712)
Align.0=TL
CallOutMax.0=(156,279),(245,310)
LineData.0=(184,277),(184,228)
[Rudder]
Name=Rz
Type=0x502
Align.0=L
CallOutMax.0=(329,166),(430,205)
LineData.0=(327,185),(249,185),(232,173)
[Hat Switch]
Name=Hat Switch
Type=0x10
OverlayFileName.0=MS6_2.png
OverlayRect.0=(210,85),(722,597)
Align.0=T
CallOutMax.0=(177,0),(268,35)
LineData.0=(216,19),(216,81)
[Button 1]
Name=Button 1
Type=0x2000004
Align.0=R
CallOutMax.0=(0,69),(97,112)
LineData.0=(97,89),(194,89)
[Button 2]
Name=Button 2
Type=0x2000104
OverlayFileName.0=MS6_1.png
OverlayRect.0=(201,87),(713,599)
Align.0=R
CallOutMax.0=(0,16),(97,61)
LineData.0=(97,36),(206,36),(206,86)
[Button 3]
Name=Button 3
Type=0x2000204
OverlayFileName.0=MS6_4.png
OverlayRect.0=(220,85),(732,597)
Align.0=B
CallOutMax.0=(275,0),(377,39)
LineData.0=(316,38),(316,89),(231,89)
[Button 4]
Name=Button 4
Type=0x2000304
OverlayFileName.0=MS6_3.png
OverlayRect.0=(222,96),(734,608)
Align.0=T
CallOutMax.0=(327,49),(430,88)
LineData.0=(376,67),(376,100),(231,100)
[Button A]
Name=Button A
Type=0x2000404
OverlayFileName.0=MS6_8.png
OverlayRect.0=(146,177),(658,689)
Align.0=R
CallOutMax.0=(1,271),(101,309)
LineData.0=(100,290),(153,290),(153,190)
[Button B]
Name=Button B
Type=0x2000504
OverlayFileName.0=MS6_8.png
OverlayRect.0=(130,171),(642,683)
Align.0=R
CallOutMax.0=(0,112),(98,156)
LineData.0=(98,131),(136,131),(136,168)
[Button C]
Name=Button C
Type=0x2000604
OverlayFileName.0=MS6_5.png
OverlayRect.0=(117,180),(629,692)
Align.0=R
CallOutMax.0=(0,167),(96,205)
LineData.0=(96,183),(115,183)
[Button D]
Name=Button D
Type=0x2000704
OverlayFileName.0=MS6_7.png
OverlayRect.0=(133,185),(645,697)
Align.0=R
CallOutMax.0=(1,219),(100,261)
LineData.0=(100,238),(138,238),(138,199)
[Shift]
Name=Shift
Type=0x2000904
OverlayFileName.0=MS6_10.png
OverlayRect.0=(197,227),(709,739)
Align.0=TL
CallOutMax.0=(248,279),(324,308)
LineData.0=(256,276),(256,241),(214,241)
[MICROSOFT SIDEWINDER FORCE FEEDBACK PRO.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.1]
MapExists=1
[MICROSOFT SIDEWINDER FORCE FEEDBACK PRO.Genre.1]
MapExists=1
X=0x1
THROTTLE=0x2
BUTTON B=0x1
BUTTON D=0x2
BUTTON 3=0x3
Y=0x4
HAT SWITCH=0x1
BUTTON A=0x4
BUTTON 4=0x6
BUTTON 2=0x7
BUTTON 1=0x8
BUTTON C=0xE0
SHIFT=0xFC
[MICROSOFT SIDEWINDER FORCE FEEDBACK PRO.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.41]
MapExists=1
[MICROSOFT SIDEWINDER FORCE FEEDBACK PRO.Genre.41]
MapExists=1
X=0x1
Y=0x2
RUDDER=0x3
THROTTLE=0x4
BUTTON 1=0x1
BUTTON 4=0x2
BUTTON 3=0x3
BUTTON A=0x4
BUTTON B=0x6
BUTTON C=0x7
HAT SWITCH=0x1
BUTTON D=0x8
BUTTON 2=0x9
SHIFT=0xFC
[MICROSOFT SIDEWINDER FORCE FEEDBACK PRO.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.4]
MapExists=1
[MICROSOFT SIDEWINDER FORCE FEEDBACK PRO.Genre.4]
MapExists=1
X=0x1
Y=0x2
THROTTLE=0x3
BUTTON 1=0x1
BUTTON 2=0x2
BUTTON 3=0x3
HAT SWITCH=0x1
RUDDER=0x5
BUTTON B=0x4
BUTTON A=0x5
BUTTON C=0xE0
BUTTON D=0xE8
SHIFT=0xFC
[MICROSOFT SIDEWINDER FORCE FEEDBACK PRO.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.5]
MapExists=1
[MICROSOFT SIDEWINDER FORCE FEEDBACK PRO.Genre.5]
MapExists=1
X=0x1
Y=0x2
THROTTLE=0x3
BUTTON 1=0x1
BUTTON 4=0x2
BUTTON 3=0x3
HAT SWITCH=0x1
BUTTON B=0x4
RUDDER=0x4
BUTTON C=0x5
BUTTON A=0x6
BUTTON 2=0x9
BUTTON D=0xA
SHIFT=0xFC
[MICROSOFT SIDEWINDER FORCE FEEDBACK PRO.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.6]
MapExists=1
[MICROSOFT SIDEWINDER FORCE FEEDBACK PRO.Genre.6]
MapExists=1
X=0x1
Y=0x2
BUTTON 1=0x1
BUTTON 4=0x2
BUTTON 3=0x3
BUTTON A=0xFD
HAT SWITCH=0x1
RUDDER=0x4
THROTTLE=0x5
BUTTON B=0x4
BUTTON C=0x5
BUTTON D=0x6
BUTTON 2=0x7
SHIFT=0xFC
[MICROSOFT SIDEWINDER FORCE FEEDBACK PRO.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.7]
MapExists=1
[MICROSOFT SIDEWINDER FORCE FEEDBACK PRO.Genre.7]
MapExists=1
X=0x1
Y=0x2
THROTTLE=0x3
BUTTON 1=0x1
BUTTON 4=0x2
BUTTON 3=0x3
HAT SWITCH=0x1
RUDDER=0x5
BUTTON C=0x4
BUTTON A=0x5
BUTTON B=0x6
BUTTON D=0x7
BUTTON 2=0x9
SHIFT=0xFC
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dinput\ihvmap\ms34.ini ===
[DirectInput]
DirectXVersion=0x800
Devices=SideWinder Force Feedback Wheel (USB),Microsoft SideWinder Force Feedback Wheel

[SideWinder Force Feedback Wheel (USB)]
VID=1118
PID=52
Name=SideWinder Force Feedback Wheel (USB)
Controls=X AXIS,Y AXIS,Z ROTATION,BUTTON 0,BUTTON 1,BUTTON 2,BUTTON 3,BUTTON 4,BUTTON 5,BUTTON 6,BUTTON 7
ImageFileName.0=MS34.PNG

[X Axis]
UsagePage=0x1
Usage=0x30
Type=0x1000002
Name=X AXIS
Align.0=TR
CallOutMax.0=(0,194),(111,233)
LineData.0=(110,205),(127,205),(144,188)

[Y Axis]
UsagePage=0x1
Usage=0x31
Type=0x1000102
Name=Y AXIS
OverlayFileName.0=MS34_01.png
OverlayRect.0=(299,185),(811,697)
Align.0=R
CallOutMax.0=(53,259),(220,279)
LineData.0=(219,271),(262,271),(312,221)

[Z Rotation]
UsagePage=0x1
Usage=0x35
Type=0x502
Name=Z ROTATION
OverlayFileName.0=MS34_02.PNG
OverlayRect.0=(270,168),(270,168)
Align.0=R
CallOutMax.0=(39,235),(201,256)
LineData.0=(200,248),(230,248),(279,199)

[Button 0]
UsagePage=0x9
Usage=0x1
Type=0x2000004
Name=BUTTON 0
OverlayFileName.0=MS34_03.PNG
OverlayRect.0=(181,79),(181,79)
Align.0=L
CallOutMax.0=(265,58),(427,79)
LineData.0=(264,71),(251,71),(251,89),(192,89)

[Button 1]
UsagePage=0x9
Usage=0x2
Type=0x2000104
Name=BUTTON 1
OverlayFileName.0=MS34_04.PNG
OverlayRect.0=(182,91),(182,91)
Align.0=L
CallOutMax.0=(263,89),(429,109)
LineData.0=(260,100),(191,100)

[Button 2]
UsagePage=0x9
Usage=0x3
Type=0x2000204
Name=BUTTON 2
OverlayFileName.0=MS34_05.PNG
OverlayRect.0=(180,103),(180,103)
Align.0=L
CallOutMax.0=(257,138),(421,159)
LineData.0=(256,151),(232,151),(232,113),(189,113)

[Button 3]
UsagePage=0x9
Usage=0x4
Type=0x2000304
Name=BUTTON 3
OverlayFileName.0=MS34_06.PNG
OverlayRect.0=(127,75),(127,75)
Align.0=TR
CallOutMax.0=(0,43),(98,79)
LineData.0=(97,55),(107,55),(134,82)

[Button 4]
UsagePage=0x9
Usage=0x5
Type=0x2000404
Name=BUTTON 4
OverlayFileName.0=MS34_07.PNG
OverlayRect.0=(121,86),(121,86)
Align.0=TR
CallOutMax.0=(1,81),(98,115)
LineData.0=(97,92),(129,92)

[Button 5]
UsagePage=0x9
Usage=0x6
Type=0x2000504
Name=BUTTON 5
OverlayFileName.0=MS34_08.PNG
OverlayRect.0=(119,96),(119,96)
Align.0=TL
CallOutMax.0=(38,141),(205,164)
LineData.0=(77,140),(112,105),(126,105)

[Button 6]
UsagePage=0x9
Usage=0x7
Type=0x2000604
Name=BUTTON 6
Align.0=BL
CallOutMax.0=(25,4),(222,25)
LineData.0=(51,24),(51,33),(108,33),(144,69)

[Button 7]
UsagePage=0x9
Usage=0x8
Type=0x2000704
Name=BUTTON 7
Align.0=L
CallOutMax.0=(260,29),(427,48)
LineData.0=(258,42),(247,42),(207,82)

[SideWinder Force Feedback Wheel (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.1]
MapExists=1

[SideWinder Force Feedback Wheel (USB).Genre.1]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
Z ROTATION=0x3
BUTTON 7=0x1
BUTTON 6=0x2
BUTTON 0=0x3
BUTTON 1=0xFD
BUTTON 2=0x5
BUTTON 3=0x6
BUTTON 4=0x7
BUTTON 5=0x8

[SideWinder Force Feedback Wheel (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.2]
MapExists=1

[SideWinder Force Feedback Wheel (USB).Genre.2]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
Z ROTATION=0x3
BUTTON 0=0x1
BUTTON 3=0x2
BUTTON 4=0x3
BUTTON 1=0xFD
BUTTON 7=0x4
BUTTON 6=0x5
BUTTON 2=0x6
BUTTON 5=0x7

[SideWinder Force Feedback Wheel (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.3]
MapExists=1

[SideWinder Force Feedback Wheel (USB).Genre.3]
MapExists=1
X AXIS=0x1
Y AXIS=0x3
BUTTON 7=0x1
BUTTON 6=0x2
BUTTON 3=0x3
BUTTON 1=0xFD
Z ROTATION=0x4
BUTTON 0=0x4
BUTTON 2=0x5
BUTTON 4=0x6
[SideWinder Force Feedback Wheel (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.1]
MapExists=1
[SIDEWINDER FORCE FEEDBACK WHEEL (USB).Genre.1]
MapExists=1
X AXIS=0x1
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 6=0xFD
Y AXIS=0x4
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 5=0x6
BUTTON 7=0x8

[Microsoft SideWinder Force Feedback Wheel]
VID=1118
PID=21
Name=Microsoft SideWinder Force Feedback Wheel
Controls=X,ACCELERATOR,BRAKE,BUTTON A,BUTTON B,BUTTON C,BUTTON X,BUTTON Y,BUTTON Z,BUTTON L,BUTTON R,CTRL2052
ImageFileName.0=MS34.PNG

[X]
UsagePage=0x2
Usage=0xC8
Type=0x1000002
Name=X
Align.0=TR
CallOutMax.0=(0,194),(111,233)
LineData.0=(110,205),(127,205),(144,188)

[Accelerator]
UsagePage=0x2
Usage=0xC4
Type=0x1000102
Name=ACCELERATOR
OverlayFileName.0=MS34_01.png
OverlayRect.0=(299,185),(811,697)
Align.0=R
CallOutMax.0=(53,259),(220,279)
LineData.0=(219,271),(262,271),(312,221)

[Brake]
UsagePage=0x2
Usage=0xC5
Type=0x502
Name=BRAKE
OverlayFileName.0=MS34_02.png
OverlayRect.0=(270,168),(270,168)
Align.0=R
CallOutMax.0=(39,235),(201,256)
LineData.0=(200,248),(230,248),(279,199)

[Button A]
UsagePage=0x9
Usage=0x1
Type=0x2000004
Name=BUTTON A
OverlayFileName.0=MS34_03.PNG
OverlayRect.0=(181,79),(693,591)
Align.0=L
CallOutMax.0=(265,58),(427,79)
LineData.0=(264,71),(251,71),(251,89),(192,89)

[Button B]
UsagePage=0x9
Usage=0x2
Type=0x2000104
Name=BUTTON B
OverlayFileName.0=MS34_04.PNG
OverlayRect.0=(182,91),(694,603)
Align.0=L
CallOutMax.0=(263,89),(429,109)
LineData.0=(260,100),(191,100)

[Button C]
UsagePage=0x9
Usage=0x3
Type=0x2000204
Name=BUTTON C
OverlayFileName.0=MS34_05.PNG
OverlayRect.0=(180,103),(692,615)
Align.0=L
CallOutMax.0=(257,138),(421,159)
LineData.0=(256,151),(232,151),(232,113),(189,113)

[Button X]
UsagePage=0x9
Usage=0x4
Type=0x2000304
Name=BUTTON X
OverlayFileName.0=MS34_06.PNG
OverlayRect.0=(127,75),(639,587)
Align.0=TR
CallOutMax.0=(0,43),(98,79)
LineData.0=(97,55),(107,55),(134,82)

[Button Y]
UsagePage=0x9
Usage=0x5
Type=0x2000404
Name=BUTTON Y
OverlayFileName.0=MS34_07.PNG
OverlayRect.0=(121,86),(633,598)
Align.0=TR
CallOutMax.0=(1,81),(98,115)
LineData.0=(97,92),(129,92)

[Button Z]
UsagePage=0x9
Usage=0x6
Type=0x2000504
Name=BUTTON Z
OverlayFileName.0=MS34_08.PNG
OverlayRect.0=(119,96),(631,608)
Align.0=TL
CallOutMax.0=(38,141),(205,164)
LineData.0=(77,140),(112,105),(126,105)

[Button L]
UsagePage=0x9
Usage=0x7
Type=0x2000604
Name=BUTTON L
Align.0=BL
CallOutMax.0=(25,4),(222,25)
LineData.0=(51,24),(51,33),(108,33),(144,69)

[Button R]
UsagePage=0x9
Usage=0x8
Type=0x2000704
Name=BUTTON R
Align.0=L
CallOutMax.0=(260,29),(427,48)
LineData.0=(258,42),(247,42),(207,82)


[MICROSOFT SIDEWINDER FORCE FEEDBACK WHEEL.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.1]
MapExists=1
[MICROSOFT SIDEWINDER FORCE FEEDBACK WHEEL.Genre.1]
MapExists=1
X=0x1
ACCELERATOR=0x2
BRAKE=0x3
BUTTON A=0x1
BUTTON B=0x2
BUTTON C=0x3
BUTTON R=0xFD
BUTTON X=0x4
BUTTON Y=0x5
BUTTON Z=0x6
BUTTON L=0x7
CTRL2052=0x9
[CTRL2052]
Type=0x804
UsagePage=0x9
Usage=0x9
Name=BUTTON 8
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dinput\ihvmap\ms34_g.ini ===
[DirectInput]
DirectXVersion=0x800
Devices=Microsoft SideWinder Force Feedback Wheel

[Microsoft SideWinder Force Feedback Wheel]
Name=Microsoft SideWinder Force Feedback Wheel
Controls=X AXIS,Y AXIS,Z ROTATION,BUTTON 0,BUTTON 1,BUTTON 2,BUTTON 3,BUTTON 4,BUTTON 5,BUTTON 6,BUTTON 7
ImageFileName.0=MS34.PNG

[X AXIS]
Type=0x1000002
Name=X
Align.0=TR
CallOutMax.0=(0,194),(111,233)
LineData.0=(110,205),(127,205),(144,188)

[Y AXIS]
Type=0x1000102
Name=Y
OverlayFileName.0=MS34_01.png
OverlayRect.0=(299,185),(811,697)
Align.0=R
CallOutMax.0=(53,259),(220,279)
LineData.0=(219,271),(262,271),(312,221)

[Z Rotation]
Type=0x502
Name=Rz
OverlayFileName.0=MS34_02.PNG
OverlayRect.0=(270,168),(270,168)
Align.0=R
CallOutMax.0=(39,235),(201,256)
LineData.0=(200,248),(230,248),(279,199)

[Button 0]
Type=0x2000004
Name=BUTTON A
OverlayFileName.0=MS34_03.PNG
OverlayRect.0=(181,79),(181,79)
Align.0=L
CallOutMax.0=(265,58),(427,79)
LineData.0=(264,71),(251,71),(251,89),(192,89)

[Button 1]
Type=0x2000104
Name=BUTTON B
OverlayFileName.0=MS34_04.PNG
OverlayRect.0=(182,91),(182,91)
Align.0=L
CallOutMax.0=(263,89),(429,109)
LineData.0=(260,100),(191,100)

[Button 2]
Type=0x2000204
Name=BUTTON C
OverlayFileName.0=MS34_05.PNG
OverlayRect.0=(180,103),(180,103)
Align.0=L
CallOutMax.0=(257,138),(421,159)
LineData.0=(256,151),(232,151),(232,113),(189,113)

[Button 3]
Type=0x2000304
Name=BUTTON X
OverlayFileName.0=MS34_06.PNG
OverlayRect.0=(127,75),(127,75)
Align.0=TR
CallOutMax.0=(0,43),(98,79)
LineData.0=(97,55),(107,55),(134,82)

[Button 4]
Type=0x2000404
Name=BUTTON Y
OverlayFileName.0=MS34_07.PNG
OverlayRect.0=(121,86),(121,86)
Align.0=TR
CallOutMax.0=(1,81),(98,115)
LineData.0=(97,92),(129,92)

[Button 5]
Type=0x2000504
Name=BUTTON Z
OverlayFileName.0=MS34_08.PNG
OverlayRect.0=(119,96),(119,96)
Align.0=TL
CallOutMax.0=(38,141),(205,164)
LineData.0=(77,140),(112,105),(126,105)

[Button 6]
Type=0x2000604
Name=BUTTON L
Align.0=BL
CallOutMax.0=(25,4),(222,25)
LineData.0=(51,24),(51,33),(108,33),(144,69)

[Button 7]
Type=0x2000704
Name=BUTTON R
Align.0=L
CallOutMax.0=(260,29),(427,48)
LineData.0=(258,42),(247,42),(207,82)

[MICOSOFT SIDEWINDER FORCE FEEDBACK WHEEL.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.1]
MapExists=1

[MICOSOFT SIDEWINDER FORCE FEEDBACK WHEEL.Genre.1]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
Z ROTATION=0x3
BUTTON 7=0x1
BUTTON 6=0x2
BUTTON 0=0x3
BUTTON 1=0xFD
BUTTON 2=0x5
BUTTON 3=0x6
BUTTON 4=0x7
BUTTON 5=0x8

[MICOSOFT SIDEWINDER FORCE FEEDBACK WHEEL.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.2]
MapExists=1

[MICOSOFT SIDEWINDER FORCE FEEDBACK WHEEL.Genre.2]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
Z ROTATION=0x3
BUTTON 0=0x1
BUTTON 3=0x2
BUTTON 4=0x3
BUTTON 1=0xFD
BUTTON 7=0x4
BUTTON 6=0x5
BUTTON 2=0x6
BUTTON 5=0x7

[MICOSOFT SIDEWINDER FORCE FEEDBACK WHEEL.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.3]
MapExists=1

[MICOSOFT SIDEWINDER FORCE FEEDBACK WHEEL.Genre.3]
MapExists=1
X AXIS=0x1
Y AXIS=0x3
BUTTON 7=0x1
BUTTON 6=0x2
BUTTON 3=0x3
BUTTON 1=0xFD
Z ROTATION=0x4
BUTTON 0=0x4
BUTTON 2=0x5
BUTTON 4=0x6

[MICOSOFT SIDEWINDER FORCE FEEDBACK WHEEL.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.1]
MapExists=1

[MICOSOFT SIDEWINDER FORCE FEEDBACK WHEEL.Genre.1]
MapExists=1
X AXIS=0x1
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 6=0xFD
Y AXIS=0x4
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 5=0x6
BUTTON 7=0x8
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dinput\ihvmap\ms7_g.ini ===
[DirectInput]
DirectXVersion=0x800
Devices=Microsoft SideWinder game pad
[Microsoft SideWinder game pad]
VID=1118
PID=3
ImageFileName.0=MS7.PNG
Name=Microsoft SideWinder game pad
Controls=Y AXIS,X AXIS,Button 0,Button 1,Button 2,Button 3,Button 4,Button 5,Button 6,Button 7,Button 8,Button 9

[Y Axis]
Name=Y
Type=0x102
UsagePage=0x1
Usage=0x31
OverlayFileName.0=MS7_1.PNG
OverlayRect.0=(119,110),(631,622)
Align.0=TR
CallOutMax.0=(0,177),(127,245)
LineData.0=(125,192),(139,192),(139,141)

[X Axis]
Name=X
Type=0x2
UsagePage=0x1
Usage=0x30
OverlayFileName.0=MS7_1.PNG
OverlayRect.0=(119,110),(631,622)
Align.0=TR
CallOutMax.0=(1,66),(120,108)
LineData.0=(120,77),(129,77),(129,119)

[Button 0]
Name=BUTTON A
Type=0x4
UsagePage=0x9
Usage=0x1
OverlayFileName.0=MS7_2.PNG
OverlayRect.0=(193,152),(705,664)
Align.0=L
CallOutMax.0=(275,240),(429,263)
LineData.0=(273,253),(200,253),(200,163)

[Button 1]
Name=BUTTON B
Type=0x104
UsagePage=0x9
Usage=0x2
OverlayFileName.0=MS7_3.PNG
OverlayRect.0=(215,146),(727,658)
Align.0=L
CallOutMax.0=(284,206),(429,229)
LineData.0=(283,221),(224,221),(224,158)

[Button 2]
Name=BUTTON C
Type=0x204
UsagePage=0x9
Usage=0x3
OverlayFileName.0=MS7_4.PNG
OverlayRect.0=(237,143),(749,655)
Align.0=TL
CallOutMax.0=(284,156),(429,201)
LineData.0=(283,167),(246,167),(246,153)

[Button 3]
Name=BUTTON X
Type=0x304
UsagePage=0x9
Usage=0x4
OverlayFileName.0=MS7_5.PNG
OverlayRect.0=(197,132),(709,644)
Align.0=L
CallOutMax.0=(248,14),(428,38)
LineData.0=(247,26),(203,26),(203,137)

[Button 4]
Name=BUTTON Y
Type=0x404
UsagePage=0x9
Usage=0x5
OverlayFileName.0=MS7_6.PNG
OverlayRect.0=(215,127),(727,639)
Align.0=L
CallOutMax.0=(256,42),(429,68)
LineData.0=(254,56),(223,56),(223,132)

[Button 5]
Name=BUTTON Z
Type=0x504
UsagePage=0x9
Usage=0x6
OverlayFileName.0=MS7_7.PNG
OverlayRect.0=(234,125),(746,637)
Align.0=L
CallOutMax.0=(270,74),(426,96)
LineData.0=(269,84),(240,84),(240,131)

[Button 6]
Name=BUTTON L
Type=0x604
UsagePage=0x9
Usage=0x7
Align.0=BR
CallOutMax.0=(0,14),(146,54)
LineData.0=(145,44),(165,44),(165,95)

[Button 7]
Name=BUTTON R
Type=0x704
UsagePage=0x9
Usage=0x8
Align.0=TL
CallOutMax.0=(276,105),(429,143)
LineData.0=(276,114),(259,114),(259,125)

[Button 8]
Name=START
Type=0x804
UsagePage=0x9
Usage=0x9
OverlayFileName.0=MS7_8.PNG
OverlayRect.0=(171,147),(683,659)
Align.0=L
CallOutMax.0=(220,275),(419,299)
LineData.0=(217,289),(179,289),(179,155)

[Button 9]
Name=SHIFT
Type=0x904
UsagePage=0x9
Usage=0xA
OverlayFileName.0=MS7_9.PNG
OverlayRect.0=(158,160),(670,672)
Align.0=TR
CallOutMax.0=(6,258),(145,300)
LineData.0=(144,269),(168,269),(168,169)

[MICROSOFT SIDEWINDER GAME PAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.1]
MapExists=1

[MICROSOFT SIDEWINDER GAME PAD.Genre.1]
MapExists=1
X AXIS=0x1
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 8=0xFD
Y AXIS=0x4
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 5=0x6
BUTTON 6=0x7
BUTTON 7=0x8
BUTTON 9=0xFE
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dinput\ihvmap\ms56.ini ===
[DirectInput]
DirectXVersion=0x800
Devices=SideWinder Precision 2 USB Joystick

[SideWinder Precision 2 USB Joystick]
VID=1118
PID=56
Name=SideWinder Precision 2 USB Joystick
Controls=Y AXIS,X AXIS,SLIDER,Z ROTATION,BUTTON 0,BUTTON 1,BUTTON 2,BUTTON 3,BUTTON 4,BUTTON 5,BUTTON 6,BUTTON 7,HAT SWITCH
ImageFileName.0=MS56.PNG

[Y Axis]
UsagePage=0x1
Usage=0x31
Type=0x102
Name=Y AXIS
Align.0=R
CallOutMax.0=(1,105),(159,125)
LineData.0=(160,117),(186,117)

[X Axis]
UsagePage=0x1
Usage=0x30
Type=0x2
Name=X AXIS
Align.0=L
CallOutMax.0=(246,121),(422,139)
LineData.0=(242,131),(216,131)

[Slider]
UsagePage=0x1
Usage=0x36
Type=0x202
Name=SLIDER
OverlayFileName.0=MS56_1.PNG
OverlayRect.0=(187,197),(699,709)
Align.0=TL
CallOutMax.0=(276,233),(417,275)
LineData.0=(273,241),(202,241),(202,224)

[Z Rotation]
UsagePage=0x1
Usage=0x35
Type=0x502
Name=Z ROTATION
Align.0=R
CallOutMax.0=(1,128),(166,147)
LineData.0=(166,137),(190,137)

[Button 0]
UsagePage=0x9
Usage=0x1
Type=0x4
Name=BUTTON 0
OverlayFileName.0=MS56_3.png
OverlayRect.0=(165,68),(677,580)
Align.0=BR
CallOutMax.0=(0,43),(156,62)
LineData.0=(146,53),(146,69),(163,69)

[Button 1]
UsagePage=0x9
Usage=0x2
Type=0x104
Name=BUTTON 1
OverlayFileName.0=MS56_4.png
OverlayRect.0=(199,76),(711,588)
Align.0=TL
CallOutMax.0=(239,92),(425,111)
LineData.0=(254,92),(254,83),(210,83)

[Button 2]
UsagePage=0x9
Usage=0x3
Type=0x204
Name=BUTTON 2
OverlayFileName.0=MS56_5.png
OverlayRect.0=(188,71),(700,583)
Align.0=R
CallOutMax.0=(0,78),(131,109)
LineData.0=(114,92),(194,92),(194,82)

[Button 3]
UsagePage=0x9
Usage=0x4
Type=0x304
Name=BUTTON 3
OverlayFileName.0=MS56_5.PNG
OverlayRect.0=(198,63),(710,575)
Align.0=L
CallOutMax.0=(231,38),(418,56)
LineData.0=(245,56),(245,69),(206,69)

[Button 4]
UsagePage=0x9
Usage=0x5
Type=0x404
Name=BUTTON 4
OverlayFileName.0=MS56_7.png
OverlayRect.0=(149,199),(661,711)
Align.0=R
CallOutMax.0=(2,159),(143,181)
LineData.0=(143,173),(156,173),(156,203)

[Button 5]
UsagePage=0x9
Usage=0x6
Type=0x504
Name=BUTTON 5
OverlayFileName.0=MS56_7.png
OverlayRect.0=(128,204),(640,716)
Align.0=TR
CallOutMax.0=(2,186),(110,229)
LineData.0=(111,195),(135,195),(135,208)

[Button 6]
UsagePage=0x9
Usage=0x7
Type=0x604
Name=BUTTON 6
OverlayFileName.0=MS56_9.png
OverlayRect.0=(121,219),(631,731)
Align.0=TR
CallOutMax.0=(2,231),(113,274)
LineData.0=(113,242),(127,242),(127,228)

[Button 7]
UsagePage=0x9
Usage=0x8
Type=0x704
Name=BUTTON 7
OverlayFileName.0=MS56_10.png
OverlayRect.0=(142,211),(654,723)
Align.0=TR
CallOutMax.0=(3,275),(162,299)
LineData.0=(149,273),(149,220)

[Hat Switch]
UsagePage=0x1
Usage=0x39
Type=0x10
Name=HAT SWITCH
OverlayFileName.0=MS56_2.png
OverlayRect.0=(186,54),(698,566)
Align.0=R
CallOutMax.0=(11,17),(171,40)
LineData.0=(172,32),(193,32),(193,57)


[SIDEWINDER PRECISION 2 USB JOYSTICK.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.2]
MapExists=1
[SIDEWINDER PRECISION 2 USB JOYSTICK.Genre.2]
MapExists=1
X AXIS=0x1
SLIDER=0x2
BUTTON 0=0x1
BUTTON 2=0x2
BUTTON 3=0x3
Y AXIS=0x4
HAT SWITCH=0x1
BUTTON 6=0x4
BUTTON 7=0x5
BUTTON 4=0x7
BUTTON 5=0x8
BUTTON 1=0x9
[SIDEWINDER PRECISION 2 USB JOYSTICK.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.3]
MapExists=1
[SIDEWINDER PRECISION 2 USB JOYSTICK.Genre.3]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
SLIDER=0x3
BUTTON 0=0x1
BUTTON 2=0x2
BUTTON 3=0x3
HAT SWITCH=0x1
BUTTON 5=0x4
BUTTON 7=0x5
BUTTON 6=0x6
BUTTON 1=0x7
[SIDEWINDER PRECISION 2 USB JOYSTICK.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.41]
MapExists=1
[SIDEWINDER PRECISION 2 USB JOYSTICK.Genre.41]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
Z ROTATION=0x3
SLIDER=0x4
BUTTON 0=0x1
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 7=0x4
BUTTON 4=0x5
BUTTON 6=0x6
BUTTON 5=0x7
HAT SWITCH=0x1
BUTTON 1=0x9
[SIDEWINDER PRECISION 2 USB JOYSTICK.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.5]
MapExists=1
[SIDEWINDER PRECISION 2 USB JOYSTICK.Genre.5]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
SLIDER=0x3
BUTTON 0=0x1
BUTTON 2=0x2
BUTTON 3=0x3
HAT SWITCH=0x1
BUTTON 6=0x4
Z ROTATION=0x4
BUTTON 5=0x5
BUTTON 7=0x6
BUTTON 1=0x9
BUTTON 4=0xA
[SIDEWINDER PRECISION 2 USB JOYSTICK.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.6]
MapExists=1
[SIDEWINDER PRECISION 2 USB JOYSTICK.Genre.6]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 2=0x2
BUTTON 3=0x3
HAT SWITCH=0x1
Z ROTATION=0x4
BUTTON 6=0x4
BUTTON 5=0x5
BUTTON 7=0x6
BUTTON 1=0x7
[SIDEWINDER PRECISION 2 USB JOYSTICK.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.7]
MapExists=1
[SIDEWINDER PRECISION 2 USB JOYSTICK.Genre.7]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
SLIDER=0x3
BUTTON 0=0x1
BUTTON 2=0x2
BUTTON 3=0x3
HAT SWITCH=0x1
Z ROTATION=0x5
BUTTON 6=0x4
BUTTON 4=0x6
BUTTON 7=0x7
BUTTON 5=0x8
BUTTON 1=0x9
[SIDEWINDER PRECISION 2 USB JOYSTICK.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.33]
MapExists=1
[SIDEWINDER PRECISION 2 USB JOYSTICK.Genre.33]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 6=0x5
HAT SWITCH=0x1
[SIDEWINDER PRECISION 2 USB JOYSTICK.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.34]
MapExists=1
[SIDEWINDER PRECISION 2 USB JOYSTICK.Genre.34]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 6=0x5
HAT SWITCH=0x1
BUTTON 5=0x6
[SIDEWINDER PRECISION 2 USB JOYSTICK.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.1]
MapExists=1
[SIDEWINDER PRECISION 2 USB JOYSTICK.Genre.1]
MapExists=1
X AXIS=0x1
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 6=0xFD
Y AXIS=0x4
HAT SWITCH=0x1
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 5=0x6
BUTTON 7=0x8
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dinput\ihvmap\ms6.ini ===
[DirectInput]
DirectXVersion=0x800
Devices=Microsoft SideWinder Force Feedback Pro
[Microsoft SideWinder Force Feedback Pro]
VID=1118
PID=6
Name=Microsoft SideWinder Force Feedback Pro
Controls=X,Y,THROTTLE,RUDDER,HAT SWITCH,BUTTON 1,BUTTON 2,BUTTON 3,BUTTON 4,BUTTON A,BUTTON B,BUTTON C,BUTTON D,SHIFT
ImageFileName.0=MS6.png
[X]
UsagePage=0x1
Usage=0x30
Type=0x1000002
Name=X
Align.0=BL
CallOutMax.0=(327,105),(430,141)
LineData.0=(332,140),(332,153),(227,153)
[Y]
UsagePage=0x1
Usage=0x31
Type=0x1000102
Name=Y
Align.0=TL
CallOutMax.0=(328,228),(430,270)
LineData.0=(327,233),(218,233),(218,169)
[Throttle]
UsagePage=0x2
Usage=0xBB
Type=0x202
Name=THROTTLE
OverlayFileName.0=MS6_9.png
OverlayRect.0=(170,200),(682,712)
Align.0=TL
CallOutMax.0=(156,279),(245,310)
LineData.0=(184,277),(184,228)
[Rudder]
UsagePage=0x2
Usage=0xBA
Type=0x502
Name=RUDDER
Align.0=L
CallOutMax.0=(329,166),(430,205)
LineData.0=(327,185),(249,185),(232,173)
[Hat Switch]
UsagePage=0x1
Usage=0x39
Type=0x10
Name=HAT SWITCH
OverlayFileName.0=MS6_2.png
OverlayRect.0=(210,85),(722,597)
Align.0=T
CallOutMax.0=(177,0),(268,35)
LineData.0=(216,19),(216,81)
[Button 1]
UsagePage=0x9
Usage=0x1
Type=0x2000004
Name=BUTTON 1
Align.0=R
CallOutMax.0=(0,69),(97,112)
LineData.0=(97,89),(194,89)
[Button 2]
UsagePage=0x9
Usage=0x2
Type=0x2000104
Name=BUTTON 2
OverlayFileName.0=MS6_1.png
OverlayRect.0=(201,87),(713,599)
Align.0=R
CallOutMax.0=(0,16),(97,61)
LineData.0=(97,36),(206,36),(206,86)
[Button 3]
UsagePage=0x9
Usage=0x3
Type=0x2000204
Name=BUTTON 3
OverlayFileName.0=MS6_4.png
OverlayRect.0=(220,85),(732,597)
Align.0=B
CallOutMax.0=(275,0),(377,39)
LineData.0=(316,38),(316,89),(231,89)
[Button 4]
UsagePage=0x9
Usage=0x4
Type=0x2000304
Name=BUTTON 4
OverlayFileName.0=MS6_3.png
OverlayRect.0=(222,96),(734,608)
Align.0=T
CallOutMax.0=(327,49),(430,88)
LineData.0=(376,67),(376,100),(231,100)
[Button A]
UsagePage=0x9
Usage=0x5
Type=0x2000404
Name=BUTTON A
OverlayFileName.0=MS6_8.png
OverlayRect.0=(146,177),(658,689)
Align.0=R
CallOutMax.0=(1,271),(101,309)
LineData.0=(100,290),(153,290),(153,190)
[Button B]
UsagePage=0x9
Usage=0x6
Type=0x2000504
Name=BUTTON B
OverlayFileName.0=MS6_8.png
OverlayRect.0=(130,171),(642,683)
Align.0=R
CallOutMax.0=(0,112),(98,156)
LineData.0=(98,131),(136,131),(136,168)
[Button C]
UsagePage=0x9
Usage=0x7
Type=0x2000604
Name=BUTTON C
OverlayFileName.0=MS6_5.png
OverlayRect.0=(117,180),(629,692)
Align.0=R
CallOutMax.0=(0,167),(96,205)
LineData.0=(96,183),(115,183)
[Button D]
UsagePage=0x9
Usage=0x8
Type=0x2000704
Name=BUTTON D
OverlayFileName.0=MS6_7.png
OverlayRect.0=(133,185),(645,697)
Align.0=R
CallOutMax.0=(1,219),(100,261)
LineData.0=(100,238),(138,238),(138,199)
[Shift]
UsagePage=0x9
Usage=0xA
Type=0x2000904
Name=SHIFT
OverlayFileName.0=MS6_10.png
OverlayRect.0=(197,227),(709,739)
Align.0=TL
CallOutMax.0=(248,279),(324,308)
LineData.0=(256,276),(256,241),(214,241)
[MICROSOFT SIDEWINDER FORCE FEEDBACK PRO.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.1]
MapExists=1
[MICROSOFT SIDEWINDER FORCE FEEDBACK PRO.Genre.1]
MapExists=1
X=0x1
THROTTLE=0x2
BUTTON B=0x1
BUTTON D=0x2
BUTTON 3=0x3
Y=0x4
HAT SWITCH=0x1
BUTTON A=0x4
BUTTON 4=0x6
BUTTON 2=0x7
BUTTON 1=0x8
BUTTON C=0xE0
SHIFT=0xFC
[MICROSOFT SIDEWINDER FORCE FEEDBACK PRO.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.41]
MapExists=1
[MICROSOFT SIDEWINDER FORCE FEEDBACK PRO.Genre.41]
MapExists=1
X=0x1
Y=0x2
RUDDER=0x3
THROTTLE=0x4
BUTTON 1=0x1
BUTTON 4=0x2
BUTTON 3=0x3
BUTTON A=0x4
BUTTON B=0x6
BUTTON C=0x7
HAT SWITCH=0x1
BUTTON D=0x8
BUTTON 2=0x9
SHIFT=0xFC
[MICROSOFT SIDEWINDER FORCE FEEDBACK PRO.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.4]
MapExists=1
[MICROSOFT SIDEWINDER FORCE FEEDBACK PRO.Genre.4]
MapExists=1
X=0x1
Y=0x2
THROTTLE=0x3
BUTTON 1=0x1
BUTTON 2=0x2
BUTTON 3=0x3
HAT SWITCH=0x1
RUDDER=0x5
BUTTON B=0x4
BUTTON A=0x5
BUTTON C=0xE0
BUTTON D=0xE8
SHIFT=0xFC
[MICROSOFT SIDEWINDER FORCE FEEDBACK PRO.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.5]
MapExists=1
[MICROSOFT SIDEWINDER FORCE FEEDBACK PRO.Genre.5]
MapExists=1
X=0x1
Y=0x2
THROTTLE=0x3
BUTTON 1=0x1
BUTTON 4=0x2
BUTTON 3=0x3
HAT SWITCH=0x1
BUTTON B=0x4
RUDDER=0x4
BUTTON C=0x5
BUTTON A=0x6
BUTTON 2=0x9
BUTTON D=0xA
SHIFT=0xFC
[MICROSOFT SIDEWINDER FORCE FEEDBACK PRO.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.6]
MapExists=1
[MICROSOFT SIDEWINDER FORCE FEEDBACK PRO.Genre.6]
MapExists=1
X=0x1
Y=0x2
BUTTON 1=0x1
BUTTON 4=0x2
BUTTON 3=0x3
BUTTON A=0xFD
HAT SWITCH=0x1
RUDDER=0x4
THROTTLE=0x5
BUTTON B=0x4
BUTTON C=0x5
BUTTON D=0x6
BUTTON 2=0x7
SHIFT=0xFC
[MICROSOFT SIDEWINDER FORCE FEEDBACK PRO.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.7]
MapExists=1
[MICROSOFT SIDEWINDER FORCE FEEDBACK PRO.Genre.7]
MapExists=1
X=0x1
Y=0x2
THROTTLE=0x3
BUTTON 1=0x1
BUTTON 4=0x2
BUTTON 3=0x3
HAT SWITCH=0x1
RUDDER=0x5
BUTTON C=0x4
BUTTON A=0x5
BUTTON B=0x6
BUTTON D=0x7
BUTTON 2=0x9
SHIFT=0xFC
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dinput\ihvmap\ms7.ini ===
[DirectInput]
DirectXVersion=0x800
Devices=SideWinder Game Pad USB version 1.0
[SideWinder Game Pad USB version 1.0]
VID=1118
PID=7
Name=SideWinder Game Pad USB version 1.0
Controls=Y AXIS,X Axis,Button 0,Button 1,Button 2,Button 3,Button 4,Button 5,Button 6,Button 7,Button 8,Button 9
ImageFileName.0=MS7.png

[Y Axis]
Name=Y Axis
Type=0x102
UsagePage=0x1
Usage=0x31
OverlayFileName.0=MS7_1.PNG
OverlayRect.0=(119,110),(631,622)
Align.0=TR
CallOutMax.0=(0,177),(127,245)
LineData.0=(125,192),(139,192),(139,141)

[X Axis]
Name=X Axis
Type=0x2
UsagePage=0x1
Usage=0x30
OverlayFileName.0=MS7_1.PNG
OverlayRect.0=(119,110),(631,622)
Align.0=TR
CallOutMax.0=(1,66),(120,108)
LineData.0=(120,77),(129,77),(129,119)

[Button 0]
Name=BUTTON 0
Type=0x4
UsagePage=0x9
Usage=0x1
OverlayFileName.0=MS7_2.PNG
OverlayRect.0=(193,152),(705,664)
Align.0=L
CallOutMax.0=(275,240),(429,263)
LineData.0=(273,253),(200,253),(200,163)

[Button 1]
Name=BUTTON 1
Type=0x104
UsagePage=0x9
Usage=0x2
OverlayFileName.0=MS7_3.PNG
OverlayRect.0=(215,146),(727,658)
Align.0=L
CallOutMax.0=(284,206),(429,229)
LineData.0=(283,221),(224,221),(224,158)

[Button 2]
Name=BUTTON 2
Type=0x204
UsagePage=0x9
Usage=0x3
OverlayFileName.0=MS7_4.PNG
OverlayRect.0=(237,143),(749,655)
Align.0=TL
CallOutMax.0=(284,156),(429,201)
LineData.0=(283,167),(246,167),(246,153)

[Button 3]
Name=BUTTON 3
Type=0x304
UsagePage=0x9
Usage=0x4
OverlayFileName.0=MS7_5.PNG
OverlayRect.0=(197,132),(709,644)
Align.0=L
CallOutMax.0=(248,14),(428,38)
LineData.0=(247,26),(203,26),(203,137)

[Button 4]
Name=BUTTON 4
Type=0x404
UsagePage=0x9
Usage=0x5
OverlayFileName.0=MS7_6.PNG
OverlayRect.0=(215,127),(727,639)
Align.0=L
CallOutMax.0=(256,42),(429,68)
LineData.0=(254,56),(223,56),(223,132)

[Button 5]
Name=BUTTON 5
Type=0x504
UsagePage=0x9
Usage=0x6
OverlayFileName.0=MS7_7.PNG
OverlayRect.0=(234,125),(746,637)
Align.0=L
CallOutMax.0=(270,74),(426,96)
LineData.0=(269,84),(240,84),(240,131)

[Button 6]
Name=BUTTON 6
Type=0x604
UsagePage=0x9
Usage=0x7
Align.0=BR
CallOutMax.0=(0,14),(146,54)
LineData.0=(145,44),(165,44),(165,95)

[Button 7]
Name=BUTTON 7
Type=0x704
UsagePage=0x9
Usage=0x8
Align.0=TL
CallOutMax.0=(276,105),(429,143)
LineData.0=(276,114),(259,114),(259,125)

[Button 8]
Name=BUTTON 8
Type=0x804
UsagePage=0x9
Usage=0x9
OverlayFileName.0=MS7_8.PNG
OverlayRect.0=(171,147),(683,659)
Align.0=L
CallOutMax.0=(220,275),(419,299)
LineData.0=(217,289),(179,289),(179,155)

[Button 9]
Name=BUTTON 9
Type=0x904
UsagePage=0x9
Usage=0xA
OverlayFileName.0=MS7_9.PNG
OverlayRect.0=(158,160),(670,672)
Align.0=TR
CallOutMax.0=(6,258),(145,300)
LineData.0=(144,269),(168,269),(168,169)

[MICROSOFT SIDEWINDER GAME PAD.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.1]
MapExists=1

[MICROSOFT SIDEWINDER GAME PAD.Genre.1]
MapExists=1
X AXIS=0x1
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 8=0xFD
Y AXIS=0x4
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 5=0x6
BUTTON 6=0x7
BUTTON 7=0x8
BUTTON 9=0xFE
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dinput\ihvmap\ms8.ini ===
[DirectInput]
DirectXVersion=0x800
Devices=Microsoft SideWinder Precision Pro (USB)
[Microsoft SideWinder Precision Pro (USB)]
VID=1118
PID=8
Name=VID_045E&PID_0008
Controls=HAT SWITCH,BUTTON 0,BUTTON 1,BUTTON 2,BUTTON 3,Y AXIS,X AXIS,Z ROTATION,BUTTON 4,BUTTON 5,BUTTON 6,BUTTON 7,BUTTON 8,SLIDER
ImageFileName.0=MS8.PNG

[Hat Switch]
UsagePage=0x1
Usage=0x39
Type=0x10
Name=HAT SWITCH
OverlayFileName.0=MS8_2.PNG
OverlayRect.0=(200,68),(712,580)
Align.0=L
CallOutMax.0=(348,5),(430,45)
LineData.0=(356,24),(207,24),(207,65)

[Button 0]
UsagePage=0x9
Usage=0x1
Type=0x4
Name=BUTTON 0
Align.0=R
CallOutMax.0=(0,65),(85,109)
LineData.0=(69,86),(181,86)

[Button 1]
UsagePage=0x9
Usage=0x2
Type=0x104
Name=BUTTON 1
OverlayFileName.0=MS8_3.PNG
OverlayRect.0=(193,76),(705,588)
Align.0=R
CallOutMax.0=(1,7),(85,47)
LineData.0=(72,24),(196,24),(196,73)

[Button 2]
UsagePage=0x9
Usage=0x3
Type=0x204
Name=BUTTON 2
OverlayFileName.0=MS8_4.PNG
OverlayRect.0=(212,69),(724,581)
Align.0=L
CallOutMax.0=(348,44),(430,79)
LineData.0=(368,60),(214,60),(214,65)

[Button 3]
UsagePage=0x9
Usage=0x4
Type=0x304
Name=BUTTON 3
OverlayFileName.0=MS8_5.PNG
OverlayRect.0=(214,79),(726,591)
Align.0=L
CallOutMax.0=(347,78),(430,119)
LineData.0=(358,96),(217,96),(217,90)

[Y Axis]
UsagePage=0x1
Usage=0x31
Type=0x102
Name=Y AXIS
Align.0=L
CallOutMax.0=(346,197),(429,232)
LineData.0=(350,206),(221,206),(221,182)

[X Axis]
UsagePage=0x1
Usage=0x30
Type=0x2
Name=X AXIS
Align.0=L
CallOutMax.0=(346,118),(430,154)
LineData.0=(361,134),(229,134)

[Z Rotation]
UsagePage=0x1
Usage=0x35
Align.0=L
CallOutMax.0=(346,153),(430,198)
LineData.0=(356,173),(243,173),(234,168)
Type=0x502
Name=Z ROTATION

[Button 4]
UsagePage=0x9
Usage=0x5
Type=0x404
Name=BUTTON 4
OverlayFileName.0=MS8_6.PNG
OverlayRect.0=(149,193),(661,705)
Align.0=R
CallOutMax.0=(0,129),(85,178)
LineData.0=(68,152),(155,152),(155,190)

[Button 5]
UsagePage=0x9
Usage=0x6
Type=0x504
Name=BUTTON 5
OverlayFileName.0=MS8_7.PNG
OverlayRect.0=(129,194),(641,706)
Align.0=R
CallOutMax.0=(0,178),(85,219)
LineData.0=(76,196),(127,196)

[Button 6]
UsagePage=0x9
Usage=0x7
Type=0x604
Name=BUTTON 6
OverlayFileName.0=MS8_8.PNG
OverlayRect.0=(116,204),(628,716)
Align.0=R
CallOutMax.0=(0,237),(86,277)
LineData.0=(71,254),(121,254),(121,221)

[Button 7]
UsagePage=0x9
Usage=0x8
Type=0x704
Name=BUTTON 7
OverlayFileName.0=MS8_9.PNG
OverlayRect.0=(136,203),(648,715)
Align.0=R
CallOutMax.0=(0,277),(86,309)
LineData.0=(73,293),(144,293),(144,218)

[Button 8]
UsagePage=0x9
Usage=0x9
Type=0x804
Name=BUTTON 8
OverlayFileName.0=MS8_10.PNG
OverlayRect.0=(221,226),(733,738)
Align.0=L
CallOutMax.0=(345,231),(427,262)
LineData.0=(359,244),(243,244)

[Slider]
UsagePage=0x1
Usage=0x36
OverlayFileName.0=MS8_1.PNG
OverlayRect.0=(185,208),(697,720)
Align.0=L
CallOutMax.0=(345,271),(429,309)
LineData.0=(353,290),(201,290),(201,230)
Type=0x202
Name=SLIDER

[MICROSOFT SIDEWINDER PRECISION PRO (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.1]
MapExists=1
[MICROSOFT SIDEWINDER PRECISION PRO (USB).Genre.1]
MapExists=1
X AXIS=0x1
SLIDER=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 7=0x3
Y AXIS=0x4
HAT SWITCH=0x1
BUTTON 3=0x4
BUTTON 6=0x5
BUTTON 4=0x6
BUTTON 5=0x7
BUTTON 2=0x8

[MICROSOFT SIDEWINDER PRECISION PRO (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.2]
MapExists=1
[MICROSOFT SIDEWINDER PRECISION PRO (USB).Genre.2]
MapExists=1
X AXIS=0x1
BUTTON 0=0x1
BUTTON 2=0x2
BUTTON 3=0x3
Y AXIS=0x4
HAT SWITCH=0x1
BUTTON 6=0x4
BUTTON 7=0x5
BUTTON 4=0x6
BUTTON 5=0x8
BUTTON 1=0x9

[MICROSOFT SIDEWINDER PRECISION PRO (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.3]
MapExists=1
[MICROSOFT SIDEWINDER PRECISION PRO (USB).Genre.3]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 2=0x2
BUTTON 3=0x3
HAT SWITCH=0x1
BUTTON 5=0x4
BUTTON 7=0x5
BUTTON 6=0x6
BUTTON 1=0x7

[MICROSOFT SIDEWINDER PRECISION PRO (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.41]
MapExists=1
[MICROSOFT SIDEWINDER PRECISION PRO (USB).Genre.41]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
Z ROTATION=0x3
SLIDER=0x4
BUTTON 0=0x1
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 4=0x4
BUTTON 6=0x6
BUTTON 5=0x7
HAT SWITCH=0x1
BUTTON 7=0x8
BUTTON 1=0x9

[MICROSOFT SIDEWINDER PRECISION PRO (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.5]
MapExists=1
[MICROSOFT SIDEWINDER PRECISION PRO (USB).Genre.5]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 2=0x2
BUTTON 3=0x3
HAT SWITCH=0x1
BUTTON 6=0x4
Z ROTATION=0x4
BUTTON 4=0x5
SLIDER=0x6
BUTTON 1=0x9
BUTTON 5=0xA

[MICROSOFT SIDEWINDER PRECISION PRO (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.6]
MapExists=1
[MICROSOFT SIDEWINDER PRECISION PRO (USB).Genre.6]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 2=0x2
BUTTON 3=0x3
HAT SWITCH=0x1
Z ROTATION=0x4
BUTTON 6=0x4
BUTTON 4=0x5
BUTTON 5=0x6
BUTTON 1=0x7

[MICROSOFT SIDEWINDER PRECISION PRO (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.7]
MapExists=1
[MICROSOFT SIDEWINDER PRECISION PRO (USB).Genre.7]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 2=0x2
BUTTON 3=0x3
HAT SWITCH=0x1
Z ROTATION=0x5
BUTTON 5=0x4
BUTTON 4=0x5
BUTTON 6=0x6
BUTTON 7=0x7
BUTTON 1=0x9

[MICROSOFT SIDEWINDER PRECISION PRO (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.33]
MapExists=1
[MICROSOFT SIDEWINDER PRECISION PRO (USB).Genre.33]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 7=0xFD
HAT SWITCH=0x1

[MICROSOFT SIDEWINDER PRECISION PRO (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.34]
MapExists=1
[MICROSOFT SIDEWINDER PRECISION PRO (USB).Genre.34]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 7=0xFD
HAT SWITCH=0x1
BUTTON 5=0x6
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dinput\ihvmap\ms8_g.ini ===
[DirectInput]
DirectXVersion=0x800
Devices=Microsoft SideWinder Precision Pro
[Microsoft SideWinder Precision Pro]
VID=1118
PID=23
Name=Microsoft SideWinder Precision Pro
Controls=X,Y,THROTTLE,RUDDER,HAT SWITCH,BUTTON 1,BUTTON 2,BUTTON 3,BUTTON 4,BUTTON A,BUTTON B,BUTTON C,BUTTON D,SHIFT
ImageFileName.0=MS8.PNG
[X]
UsagePage=0x1
Usage=0x30
Type=0x2
Name=X
Align.0=L
CallOutMax.0=(346,118),(430,154)
LineData.0=(361,134),(229,134)
[Y]
UsagePage=0x1
Usage=0x31
Type=0x102
Name=Y
Align.0=L
CallOutMax.0=(346,197),(429,232)
LineData.0=(350,206),(221,206),(221,182)
[Throttle]
UsagePage=0x2
Usage=0xBB
Type=0x202
Name=THROTTLE
OverlayFileName.0=MS8_1.png
OverlayRect.0=(185,208),(697,720)
Align.0=L
CallOutMax.0=(345,271),(429,309)
LineData.0=(353,290),(201,290),(201,230)
[Rudder]
UsagePage=0x2
Usage=0xBA
Type=0x502
Name=RUDDER
Align.0=L
CallOutMax.0=(346,153),(430,198)
LineData.0=(356,173),(243,173),(234,168)
[Hat Switch]
UsagePage=0x1
Usage=0x39
Type=0x10
Name=HAT SWITCH
OverlayFileName.0=MS8_2.png
OverlayRect.0=(200,68),(712,580)
Align.0=L
CallOutMax.0=(348,5),(430,45)
LineData.0=(356,24),(207,24),(207,65)
[Button 1]
UsagePage=0x9
Usage=0x1
Type=0x4
Name=BUTTON 1
Align.0=R
CallOutMax.0=(0,65),(85,109)
LineData.0=(69,86),(181,86)
[Button 2]
UsagePage=0x9
Usage=0x2
Type=0x104
Name=BUTTON 2
OverlayFileName.0=MS8_3.png
OverlayRect.0=(193,76),(705,588)
Align.0=R
CallOutMax.0=(1,7),(85,47)
LineData.0=(72,24),(196,24),(196,73)
[Button 3]
UsagePage=0x9
Usage=0x3
Type=0x204
Name=BUTTON 3
OverlayFileName.0=MS8_4.png
OverlayRect.0=(212,69),(724,581)
Align.0=L
CallOutMax.0=(348,44),(430,79)
LineData.0=(368,60),(214,60),(214,65)
[Button 4]
UsagePage=0x9
Usage=0x4
Type=0x304
Name=BUTTON 4
OverlayFileName.0=MS8_5.png
OverlayRect.0=(214,79),(726,591)
Align.0=L
CallOutMax.0=(347,78),(430,119)
LineData.0=(358,96),(217,96),(217,90)
[Button A]
UsagePage=0x9
Usage=0x5
Type=0x404
Name=BUTTON A
OverlayFileName.0=MS8_6.png
OverlayRect.0=(149,193),(661,705)
Align.0=R
CallOutMax.0=(0,129),(85,178)
LineData.0=(68,152),(155,152),(155,190)
[Button B]
UsagePage=0x9
Usage=0x6
Type=0x504
Name=BUTTON B
OverlayFileName.0=MS8_7.png
OverlayRect.0=(129,194),(641,706)
Align.0=R
CallOutMax.0=(0,178),(85,219)
LineData.0=(76,196),(127,196)
[Button C]
UsagePage=0x9
Usage=0x7
Type=0x604
Name=BUTTON C
OverlayFileName.0=MS8_8.png
OverlayRect.0=(116,204),(628,716)
Align.0=R
CallOutMax.0=(0,237),(86,277)
LineData.0=(71,254),(121,254),(121,221)
[Button D]
UsagePage=0x9
Usage=0x8
Type=0x704
Name=BUTTON D
OverlayFileName.0=MS8_9.png
OverlayRect.0=(136,203),(648,715)
Align.0=R
CallOutMax.0=(0,277),(86,309)
LineData.0=(73,293),(144,293),(144,218)

[Shift]
UsagePage=0x9
Usage=0xA
Type=0x904
Name=SHIFT
OverlayFileName.0=MS8_10.png
OverlayRect.0=(221,226),(733,738)
Align.0=L
CallOutMax.0=(345,231),(427,262)
LineData.0=(359,244),(243,244)
[MICROSOFT SIDEWINDER PRECISION PRO.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.1]
MapExists=1
[MICROSOFT SIDEWINDER PRECISION PRO.Genre.1]
MapExists=1
X=0x1
THROTTLE=0x2
BUTTON 1=0x1
BUTTON 2=0x2
BUTTON D=0x3
Y=0x4
HAT SWITCH=0x1
BUTTON 3=0x4
BUTTON C=0x5
BUTTON B=0x7
BUTTON 4=0x8
[MICROSOFT SIDEWINDER PRECISION PRO.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.2]
MapExists=1
[MICROSOFT SIDEWINDER PRECISION PRO.Genre.2]
MapExists=1
X=0x1
THROTTLE=0x2
BUTTON 1=0x1
BUTTON 3=0x2
BUTTON 4=0x3
Y=0x4
HAT SWITCH=0x1
BUTTON B=0x4
BUTTON D=0x5
BUTTON A=0x6
BUTTON C=0x8
BUTTON 2=0x9
[MICROSOFT SIDEWINDER PRECISION PRO.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.3]
MapExists=1
[MICROSOFT SIDEWINDER PRECISION PRO.Genre.3]
MapExists=1
X=0x1
Y=0x2
THROTTLE=0x3
BUTTON 1=0x1
BUTTON 3=0x2
BUTTON 4=0x3
HAT SWITCH=0x1
BUTTON B=0x4
BUTTON D=0x5
BUTTON C=0x6
BUTTON 2=0x7
[MICROSOFT SIDEWINDER PRECISION PRO.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.41]
MapExists=1
[MICROSOFT SIDEWINDER PRECISION PRO.Genre.41]
MapExists=1
X=0x1
Y=0x2
RUDDER=0x3
THROTTLE=0x4
BUTTON 1=0x1
BUTTON 3=0x2
BUTTON 4=0x3
BUTTON A=0x4
BUTTON C=0x6
BUTTON D=0x7
HAT SWITCH=0x1
BUTTON B=0x8
BUTTON 2=0x9
[MICROSOFT SIDEWINDER PRECISION PRO.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.4]
MapExists=1
[MICROSOFT SIDEWINDER PRECISION PRO.Genre.4]
MapExists=1
X=0x1
Y=0x2
THROTTLE=0x3
BUTTON 1=0x1
BUTTON 2=0x2
BUTTON 3=0x3
HAT SWITCH=0x1
RUDDER=0x5
BUTTON C=0x4
BUTTON D=0x5
[MICROSOFT SIDEWINDER PRECISION PRO.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.5]
MapExists=1
[MICROSOFT SIDEWINDER PRECISION PRO.Genre.5]
MapExists=1
X=0x1
Y=0x2
THROTTLE=0x3
BUTTON 1=0x1
BUTTON 3=0x2
BUTTON 4=0x3
HAT SWITCH=0x1
BUTTON C=0x4
RUDDER=0x4
BUTTON A=0x5
BUTTON D=0x6
BUTTON 2=0x9
BUTTON B=0xA

[MICROSOFT SIDEWINDER PRECISION PRO.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.6]
MapExists=1
[MICROSOFT SIDEWINDER PRECISION PRO.Genre.6]
MapExists=1
X=0x1
Y=0x2
BUTTON 1=0x1
BUTTON 3=0x2
BUTTON 4=0x3
HAT SWITCH=0x1
RUDDER=0x4
THROTTLE=0x5
BUTTON C=0x4
BUTTON A=0x5
BUTTON B=0x6
BUTTON 2=0x7
[MICROSOFT SIDEWINDER PRECISION PRO.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.7]
MapExists=1
[MICROSOFT SIDEWINDER PRECISION PRO.Genre.7]
MapExists=1
X=0x1
Y=0x2
THROTTLE=0x3
BUTTON 1=0x1
BUTTON 3=0x2
BUTTON 4=0x3
HAT SWITCH=0x1
RUDDER=0x5
BUTTON A=0x4
BUTTON C=0x6
BUTTON D=0x7
BUTTON B=0x8
BUTTON 2=0x9
[MICROSOFT SIDEWINDER PRECISION PRO.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.34]
MapExists=1
[MICROSOFT SIDEWINDER PRECISION PRO.Genre.34]
MapExists=1
X=0x1
Y=0x2
BUTTON 1=0x1
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 4=0x4
BUTTON A=0x5
HAT SWITCH=0x1
BUTTON B=0x6
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dinput\ihvmap\mse_g.ini ===
[DirectInput]
DirectXVersion=0x800
Devices=Microsoft SideWinder Freestyle Pro
[Microsoft SideWinder Freestyle Pro]
VID=1118
PID=13
Name=Microsoft SideWinder Freestyle Pro
Controls=X,Y,THROTTLE,HAT SWITCH,BUTTON A,BUTTON B,BUTTON C,BUTTON X,BUTTON Y,BUTTON Z,BUTTON L,BUTTON R,START,SHIFT
ImageFileName.0=MSE.PNG

[X]
UsagePage=0x1
Usage=0x30
Type=0x2
Name=X
Align.0=R
CallOutMax.0=(29,262),(202,282)
LineData.0=(202,273),(218,273),(242,249)

[Y]
UsagePage=0x1
Usage=0x31
Type=0x102
Name=Y
Align.0=R
CallOutMax.0=(48,286),(214,307)
LineData.0=(214,299),(231,299),(259,271)

[Throttle]
UsagePage=0x2
Usage=0xBB
Type=0x202
Name=THROTTLE
OverlayFileName.0=MSE_10.PNG
OverlayRect.0=(178,175),(690,687)
Align.0=R
CallOutMax.0=(11,237),(176,258)
LineData.0=(167,248),(185,248),(185,191)

[Hat Switch]
UsagePage=0x1
Usage=0x39
Type=0x10
Name=HAT SWITCH
OverlayFileName.0=MSE_1.PNG
OverlayRect.0=(106,142),(618,654)
Align.0=BL
CallOutMax.0=(0,104),(120,140)
LineData.0=(27,138),(27,155),(112,155)

[Button A]
UsagePage=0x9
Usage=0x1
Type=0x4
Name=BUTTON A
OverlayFileName.0=MSE_2.PNG
OverlayRect.0=(218,162),(730,674)
Align.0=TL
CallOutMax.0=(301,206),(430,246)
LineData.0=(300,217),(227,217),(227,175)

[Button B]
UsagePage=0x9
Usage=0x2
Type=0x104
Name=BUTTON B
OverlayFileName.0=MSE_3.PNG
OverlayRect.0=(234,149),(746,661)
Align.0=L
CallOutMax.0=(294,183),(430,203)
LineData.0=(292,195),(246,195),(246,163)

[Button C]
UsagePage=0x9
Usage=0x3
Type=0x204
Name=BUTTON C
OverlayFileName.0=MSE_4.PNG
OverlayRect.0=(253,143),(765,655)
Align.0=L
CallOutMax.0=(292,157),(430,178)
LineData.0=(291,170),(261,170),(261,156)

[Button X]
UsagePage=0x9
Usage=0x4
Type=0x304
Name=BUTTON X
OverlayFileName.0=MSE_5.PNG
OverlayRect.0=(207,142),(719,654)
Align.0=L
CallOutMax.0=(233,14),(420,32)
LineData.0=(231,26),(215,26),(215,148)

[Button Y]
UsagePage=0x9
Usage=0x5
Type=0x404
Name=BUTTON Y
OverlayFileName.0=MSE_6.PNG
OverlayRect.0=(221,129),(733,641)
Align.0=L
CallOutMax.0=(250,38),(426,56)
LineData.0=(249,50),(228,50),(228,135)

[Button Z]
UsagePage=0x9
Usage=0x6
Type=0x504
Name=BUTTON Z
OverlayFileName.0=MSE_7.PNG
OverlayRect.0=(241,123),(753,635)
Align.0=L
CallOutMax.0=(262,63),(429,82)
LineData.0=(261,74),(249,74),(249,129)

[Button L]
UsagePage=0x9
Usage=0x7
Type=0x604
Name=BUTTON L
Align.0=BL
CallOutMax.0=(0,57),(153,78)
LineData.0=(24,77),(24,90),(128,90),(128,108)

[Button R]
UsagePage=0x9
Usage=0x8
Type=0x704
Name=BUTTON R
Align.0=L
CallOutMax.0=(276,95),(420,117)
LineData.0=(274,109),(262,109),(262,120)

[Start]
UsagePage=0x9
Usage=0x9
Type=0x804
Name=START
OverlayFileName.0=MSE_8.PNG
OverlayRect.0=(148,127),(660,639)
Align.0=BL
CallOutMax.0=(18,14),(205,34)
LineData.0=(54,32),(54,46),(158,46),(158,131)

[Shift]
UsagePage=0x9
Usage=0xA
Type=0x904
Name=SHIFT
OverlayFileName.0=MSE_9.PNG
OverlayRect.0=(154,144),(666,656)
Align.0=TL
CallOutMax.0=(2,199),(167,221)
LineData.0=(35,197),(35,186),(161,186),(161,164)

[MICROSOFT SIDEWINDER FREESTYLE PRO.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.1]
MapExists=1
[MICROSOFT SIDEWINDER FREESTYLE PRO.Genre.1]
MapExists=1
X=0x1
THROTTLE=0x2
BUTTON A=0x1
BUTTON B=0x2
BUTTON C=0x3
START=0xFD
Y=0x4
HAT SWITCH=0x1
BUTTON X=0x4
BUTTON Y=0x5
BUTTON Z=0x6
BUTTON L=0x7
BUTTON R=0x8
SHIFT=0xFC
[MICROSOFT SIDEWINDER FREESTYLE PRO.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.2]
MapExists=1
[MICROSOFT SIDEWINDER FREESTYLE PRO.Genre.2]
MapExists=1
X=0x1
THROTTLE=0x2
BUTTON A=0x1
BUTTON B=0x2
BUTTON C=0x3
START=0xFD
Y=0x4
HAT SWITCH=0x1
BUTTON X=0x4
BUTTON Y=0x5
BUTTON Z=0x6
BUTTON L=0x7
BUTTON R=0x8
SHIFT=0xFC
[MICROSOFT SIDEWINDER FREESTYLE PRO.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.3]
MapExists=1
[MICROSOFT SIDEWINDER FREESTYLE PRO.Genre.3]
MapExists=1
X=0x1
Y=0x2
THROTTLE=0x3
BUTTON A=0x1
BUTTON B=0x2
BUTTON C=0x3
START=0xFD
HAT SWITCH=0x1
BUTTON X=0x4
BUTTON Y=0x5
BUTTON Z=0x6
BUTTON L=0x7
SHIFT=0xFC
[MICROSOFT SIDEWINDER FREESTYLE PRO.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.4]
MapExists=1
[MICROSOFT SIDEWINDER FREESTYLE PRO.Genre.4]
MapExists=1
X=0x1
Y=0x2
THROTTLE=0x3
BUTTON A=0x1
BUTTON B=0x2
BUTTON C=0x3
START=0xFD
HAT SWITCH=0x1
BUTTON X=0x4
BUTTON Y=0x5
BUTTON Z=0xE0
SHIFT=0xFC
[MICROSOFT SIDEWINDER FREESTYLE PRO.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.5]
MapExists=1
[MICROSOFT SIDEWINDER FREESTYLE PRO.Genre.5]
MapExists=1
X=0x1
Y=0x2
THROTTLE=0x3
BUTTON Z=0x1
BUTTON Y=0x2
BUTTON X=0x3
START=0xFD
HAT SWITCH=0x1
BUTTON A=0x4
BUTTON C=0x5
BUTTON R=0x9
BUTTON B=0xA
SHIFT=0xFC
[MICROSOFT SIDEWINDER FREESTYLE PRO.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.6]
MapExists=1
[MICROSOFT SIDEWINDER FREESTYLE PRO.Genre.6]
MapExists=1
X=0x1
Y=0x2
BUTTON Z=0x1
BUTTON Y=0x2
BUTTON X=0x3
START=0xFD
HAT SWITCH=0x1
THROTTLE=0x5
BUTTON L=0x4
BUTTON A=0x5
BUTTON B=0x6
BUTTON R=0x7
BUTTON C=0xFE
SHIFT=0xFC
[MICROSOFT SIDEWINDER FREESTYLE PRO.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.7]
MapExists=1
[MICROSOFT SIDEWINDER FREESTYLE PRO.Genre.7]
MapExists=1
X=0x1
Y=0x2
THROTTLE=0x3
BUTTON X=0x1
BUTTON Z=0x2
BUTTON Y=0x3
START=0xFD
HAT SWITCH=0x1
BUTTON L=0x4
BUTTON A=0x6
BUTTON B=0x7
BUTTON C=0x8
BUTTON R=0x9
SHIFT=0xFC
[MICROSOFT SIDEWINDER FREESTYLE PRO.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.33]
MapExists=1
[MICROSOFT SIDEWINDER FREESTYLE PRO.Genre.33]
MapExists=1
X=0x1
Y=0x2
BUTTON A=0x1
BUTTON B=0x2
BUTTON C=0x3
BUTTON X=0x4
BUTTON Y=0x5
START=0xFD
HAT SWITCH=0x1
SHIFT=0xFC
[MICROSOFT SIDEWINDER FREESTYLE PRO.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.34]
MapExists=1
[MICROSOFT SIDEWINDER FREESTYLE PRO.Genre.34]
MapExists=1
X=0x1
Y=0x2
BUTTON A=0x1
BUTTON B=0x2
BUTTON C=0x3
BUTTON X=0x4
BUTTON Y=0x5
START=0xFD
HAT SWITCH=0x1
BUTTON Z=0x6
BUTTON R=0xFE
SHIFT=0xFC
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dinput\ihvmap\mse.ini ===
[DirectInput]
DirectXVersion=0x800
Devices=Microsoft SideWinder Freestyle Pro (USB)
[Microsoft SideWinder Freestyle Pro (USB)]
VID=1118
PID=14
Name=VID_045E&PID_000E
Controls=HAT SWITCH,BUTTON 0,BUTTON 1,BUTTON 2,BUTTON 3,Y AXIS,X AXIS,BUTTON 4,BUTTON 5,BUTTON 6,BUTTON 7,BUTTON 8,BUTTON 9,SLIDER
ImageFileName.0=MSE.PNG

[Hat Switch]
UsagePage=0x1
Usage=0x39
Type=0x10
Name=HAT SWITCH
OverlayFileName.0=MSE_1.PNG
OverlayRect.0=(106,142),(618,654)
Align.0=BL
CallOutMax.0=(0,104),(120,140)
LineData.0=(27,138),(27,155),(112,155)

[Button 0]
UsagePage=0x9
Usage=0x1
Type=0x4
Name=BUTTON 0
OverlayFileName.0=MSE_2.PNG
OverlayRect.0=(218,162),(730,674)
Align.0=TL
CallOutMax.0=(301,206),(430,246)
LineData.0=(300,217),(227,217),(227,175)

[Button 1]
UsagePage=0x9
Usage=0x2
Type=0x104
Name=BUTTON 1
OverlayFileName.0=MSE_3.PNG
OverlayRect.0=(234,149),(746,661)
Align.0=L
CallOutMax.0=(294,183),(430,203)
LineData.0=(292,195),(246,195),(246,163)

[Button 2]
UsagePage=0x9
Usage=0x3
Type=0x204
Name=BUTTON 2
OverlayFileName.0=MSE_4.PNG
OverlayRect.0=(253,143),(765,655)
Align.0=L
CallOutMax.0=(292,157),(430,178)
LineData.0=(291,170),(261,170),(261,156)

[Button 3]
UsagePage=0x9
Usage=0x4
Type=0x304
Name=BUTTON 3
OverlayFileName.0=MSE_5.PNG
OverlayRect.0=(207,142),(719,654)
Align.0=L
CallOutMax.0=(233,14),(420,32)
LineData.0=(231,26),(215,26),(215,148)

[Y Axis]
UsagePage=0x1
Usage=0x31
Type=0x102
Name=Y AXIS
Align.0=R
CallOutMax.0=(48,286),(214,307)
LineData.0=(214,299),(231,299),(259,271)

[X Axis]
UsagePage=0x1
Usage=0x30
Type=0x2
Name=X AXIS
Align.0=R
CallOutMax.0=(29,262),(202,282)
LineData.0=(202,273),(218,273),(242,249)


[Button 4]
UsagePage=0x9
Usage=0x5
Type=0x404
Name=BUTTON 4
OverlayFileName.0=MSE_6.PNG
OverlayRect.0=(221,129),(733,641)
Align.0=L
CallOutMax.0=(250,38),(426,56)
LineData.0=(249,50),(228,50),(228,135)

[Button 5]
UsagePage=0x9
Usage=0x6
Type=0x504
Name=BUTTON 5
OverlayFileName.0=MSE_7.PNG
OverlayRect.0=(241,123),(753,635)
Align.0=L
CallOutMax.0=(262,63),(429,82)
LineData.0=(261,74),(249,74),(249,129)

[Button 6]
UsagePage=0x9
Usage=0x7
Type=0x604
Name=BUTTON 6
Align.0=BL
CallOutMax.0=(0,57),(153,78)
LineData.0=(24,77),(24,90),(128,90),(128,108)

[Button 7]
UsagePage=0x9
Usage=0x8
Type=0x704
Name=BUTTON 7
Align.0=L
CallOutMax.0=(276,95),(420,117)
LineData.0=(274,109),(262,109),(262,120)

[Button 8]
UsagePage=0x9
Usage=0x9
Type=0x804
Name=BUTTON 8
OverlayFileName.0=MSE_8.PNG
OverlayRect.0=(148,127),(660,639)
Align.0=BL
CallOutMax.0=(18,14),(205,34)
LineData.0=(54,32),(54,46),(158,46),(158,131)

[Button 9]
UsagePage=0x9
Usage=0xA
Type=0x904
Name=BUTTON 9
OverlayFileName.0=MSE_9.PNG
OverlayRect.0=(154,144),(666,656)
Align.0=TL
CallOutMax.0=(2,199),(167,221)
LineData.0=(35,197),(35,186),(161,186),(161,164)

[Slider]
UsagePage=0x1
Usage=0x36
OverlayFileName.0=MSE_10.PNG
OverlayRect.0=(178,175),(690,687)
Align.0=R
CallOutMax.0=(11,237),(176,258)
LineData.0=(167,248),(185,248),(185,191)
Type=0x202
Name=SLIDER

[MICROSOFT SIDEWINDER FREESTYLE PRO (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.41]
MapExists=1
[MICROSOFT SIDEWINDER FREESTYLE PRO (USB).Genre.41]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 5=0x6
BUTTON 8=0xFD
BUTTON 6=0x7
HAT SWITCH=0x1
BUTTON 7=0x8
BUTTON 9=0xFC
[MICROSOFT SIDEWINDER FREESTYLE PRO (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.5]
MapExists=1
[MICROSOFT SIDEWINDER FREESTYLE PRO (USB).Genre.5]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 3=0x1
BUTTON 5=0x2
BUTTON 4=0x3
BUTTON 8=0xFD
HAT SWITCH=0x1
BUTTON 6=0x4
BUTTON 1=0x5
SLIDER=0x6
BUTTON 7=0x9
BUTTON 0=0xA
BUTTON 9=0xFC
[MICROSOFT SIDEWINDER FREESTYLE PRO (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.6]
MapExists=1
[MICROSOFT SIDEWINDER FREESTYLE PRO (USB).Genre.6]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 3=0x1
BUTTON 5=0x2
BUTTON 4=0x3
BUTTON 8=0xFD
HAT SWITCH=0x1
BUTTON 6=0x4
BUTTON 1=0x5
BUTTON 0=0x6
BUTTON 7=0x7
BUTTON 9=0xFC
[MICROSOFT SIDEWINDER FREESTYLE PRO (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.34]
MapExists=1
[MICROSOFT SIDEWINDER FREESTYLE PRO (USB).Genre.34]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
BUTTON 0=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 8=0xFD
HAT SWITCH=0x1
BUTTON 5=0x6
BUTTON 7=0xFE
BUTTON 9=0xFC
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dinput\ihvmap\msprw.ini ===
[DirectInput]
DirectXVersion=0x800
Devices=SideWinder Precision Racing Wheel USB version 1.0

[SideWinder Precision Racing Wheel USB version 1.0]
VID=1118
PID=26
Name=SideWinder Precision Racing Wheel USB version 1.0
Controls=X AXIS,Z ROTATION,Y AXIS,BUTTON 0,BUTTON 1,BUTTON 2,BUTTON 3,BUTTON 4,BUTTON 5,BUTTON 6,BUTTON 7
ImageFileName.0=MSPRW.PNG

[X Axis]
UsagePage=0x1
Usage=0x30
Type=0x2
Name=X AXIS
Align.0=TR
CallOutMax.0=(1,183),(114,221)
LineData.0=(111,192),(128,192),(136,184)

[Z Rotation]
UsagePage=0x1
Usage=0x35
Type=0x502
Name=Z ROTATION
OverlayFileName.0=MSPRW_1.PNG
OverlayRect.0=(271,168),(783,680)
Align.0=R
CallOutMax.0=(24,231),(217,253)
LineData.0=(217,243),(237,243),(282,198)

[Y Axis]
UsagePage=0x1
Usage=0x31
Type=0x102
Name=Y AXIS
OverlayFileName.0=MSPRW_2.PNG
OverlayRect.0=(300,185),(812,697)
Align.0=R
CallOutMax.0=(31,256),(234,278)
LineData.0=(234,269),(258,269),(308,219)

[Button 0]
UsagePage=0x9
Usage=0x1
Type=0x4
Name=BUTTON 0
Align.0=L
CallOutMax.0=(278,63),(429,82)
LineData.0=(279,73),(261,73),(261,93),(205,93)
OverlayFileName.0=MSPRW_3.PNG
OverlayRect.0=(195,83),(707,595)

[Button 1]
UsagePage=0x9
Usage=0x2
Type=0x104
Name=BUTTON 1
OverlayFileName.0=MSPRW_4.PNG
OverlayRect.0=(196,96),(708,608)
Align.0=L
CallOutMax.0=(279,95),(429,115)
LineData.0=(278,106),(207,106)

[Button 2]
UsagePage=0x9
Usage=0x3
Type=0x204
Name=BUTTON 2
OverlayFileName.0=MSPRW_5.PNG
OverlayRect.0=(196,108),(708,620)
Align.0=L
CallOutMax.0=(267,133),(429,155)
LineData.0=(266,145),(257,145),(257,118),(205,118)

[Button 3]
UsagePage=0x9
Usage=0x4
Type=0x304
Name=BUTTON 3
OverlayFileName.0=MSPRW_6.PNG
OverlayRect.0=(133,80),(645,592)
Align.0=TR
CallOutMax.0=(0,53),(113,91)
LineData.0=(112,63),(118,63),(141,86)

[Button 4]
UsagePage=0x9
Usage=0x5
Type=0x404
Name=BUTTON 4
OverlayFileName.0=MSPRW_7.PNG
OverlayRect.0=(128,90),(640,602)
Align.0=TR
CallOutMax.0=(1,93),(108,128)
LineData.0=(102,99),(135,99)

[Button 5]
UsagePage=0x9
Usage=0x6
Type=0x504
Name=BUTTON 5
OverlayFileName.0=MSPRW_8.PNG
OverlayRect.0=(127,102),(639,614)
Align.0=TL
CallOutMax.0=(25,148),(200,170)
LineData.0=(66,146),(66,138),(107,138),(134,111)

[Button 6]
UsagePage=0x9
Usage=0x7
Type=0x604
Name=BUTTON 6
Align.0=BL
CallOutMax.0=(3,10),(178,32)
LineData.0=(33,31),(33,42),(109,42),(144,77)

[Button 7]
UsagePage=0x9
Usage=0x8
Type=0x704
Name=BUTTON 7
Align.0=L
CallOutMax.0=(254,38),(423,56)
LineData.0=(252,49),(242,49),(212,79)

[SIDEWINDER PRECISION RACING WHEEL USB VERSION 1.0.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.41]
MapExists=1

[SIDEWINDER PRECISION RACING WHEEL USB VERSION 1.0.Genre.41]
MapExists=1
X AXIS=0x1
Y AXIS=0x4
BUTTON 7=0x1
BUTTON 6=0x2
BUTTON 3=0x3
BUTTON 0=0x4
BUTTON 4=0x5
BUTTON 1=0x6
BUTTON 5=0x7
BUTTON 2=0x8

[SIDEWINDER PRECISION RACING WHEEL USB VERSION 1.0.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.1]
MapExists=1

[SIDEWINDER PRECISION RACING WHEEL USB VERSION 1.0.Genre.1]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
Z ROTATION=0x3
BUTTON 7=0x1
BUTTON 6=0x2
BUTTON 0=0x3
BUTTON 1=0xFD
BUTTON 2=0x5
BUTTON 3=0x6
BUTTON 4=0x7
BUTTON 5=0x8

[SIDEWINDER PRECISION RACING WHEEL USB VERSION 1.0.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.2]
MapExists=1

[SIDEWINDER PRECISION RACING WHEEL USB VERSION 1.0.Genre.2]
MapExists=1
X AXIS=0x1
Y AXIS=0x2
Z ROTATION=0x3
BUTTON 0=0x1
BUTTON 3=0x2
BUTTON 4=0x3
BUTTON 1=0xFD
BUTTON 7=0x4
BUTTON 6=0x5
BUTTON 2=0x6
BUTTON 5=0x7

[SIDEWINDER PRECISION RACING WHEEL USB VERSION 1.0.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.3]
MapExists=1

[SIDEWINDER PRECISION RACING WHEEL USB VERSION 1.0.Genre.3]
MapExists=1
X AXIS=0x1
Y AXIS=0x3
BUTTON 7=0x1
BUTTON 6=0x2
BUTTON 3=0x3
BUTTON 1=0xFD
Z ROTATION=0x4
BUTTON 0=0x4
BUTTON 2=0x5
BUTTON 4=0x6
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dinput\ihvmap\msf1f.ini ===
[DirectInput]
DirectXVersion=0x800
Devices=Microsoft SideWinder 3D Pro
[Microsoft SideWinder 3D Pro]
VID=1118
PID=3871
Name=Microsoft SideWinder 3D Pro
Controls=X,Y,THROTTLE,RUDDER,HAT SWITCH,BUTTON 1,BUTTON 2,BUTTON 3,BUTTON 4,BUTTON 5,BUTTON 6,BUTTON 7,BUTTON 8
ImageFileName.0=MSF1F.PNG
[X]
UsagePage=0x1
Usage=0x30
Type=0x2
Name=X
Align.0=L
CallOutMax.0=(333,95),(430,141)
LineData.0=(347,116),(208,116)

[Y]
UsagePage=0x1
Usage=0x31
Type=0x102
Name=Y
Align.0=R
CallOutMax.0=(0,0),(80,38)
LineData.0=(64,17),(165,17),(165,55)

[Throttle]
UsagePage=0x2
Usage=0xBB
Type=0x202
Name=THROTTLE
OverlayFileName.0=MSF1F_6.PNG
OverlayRect.0=(138,177),(650,689)
Align.0=R
CallOutMax.0=(0,165),(79,205)
LineData.0=(60,183),(136,183)

[Rudder]
UsagePage=0x2
Usage=0xBA
Type=0x502
Name=RUDDER
Align.0=L
CallOutMax.0=(332,144),(429,193)
LineData.0=(344,165),(230,165)

[Hat Switch]
UsagePage=0x1
Usage=0x39
Type=0x10
Name=HAT SWITCH
OverlayFileName.0=MSF1F_2.PNG
OverlayRect.0=(172,62),(684,574)
Align.0=L
CallOutMax.0=(333,0),(430,46)
LineData.0=(343,22),(177,22),(177,61)

[Button 1]
UsagePage=0x9
Usage=0x1
Type=0x4
Name=BUTTON 1
OverlayFileName.0=MSF1F_1.PNG
OverlayRect.0=(154,69),(666,581)
Align.0=R
CallOutMax.0=(0,39),(80,78)
LineData.0=(67,55),(143,55),(143,77),(153,77)

[Button 2]
UsagePage=0x9
Usage=0x2
Type=0x104
Name=BUTTON 2
OverlayFileName.0=MSF1F_3.PNG
OverlayRect.0=(184,78),(696,590)
Align.0=L
CallOutMax.0=(333,51),(430,96)
LineData.0=(343,70),(195,70),(195,81)

[Button 3]
UsagePage=0x9
Usage=0x3
Type=0x204
Name=BUTTON 3
OverlayFileName.0=MSF1F_4.PNG
OverlayRect.0=(167,82),(679,594)
Align.0=R
CallOutMax.0=(0,82),(80,120)
LineData.0=(64,96),(143,96),(143,87),(164,87)

[Button 4]
UsagePage=0x9
Usage=0x4
Type=0x304
Name=BUTTON 4
OverlayFileName.0=MSF1F_5.PNG
OverlayRect.0=(171,101),(683,613)
Align.0=R
CallOutMax.0=(0,123),(79,164)
LineData.0=(66,140),(177,140),(177,116)

[Button 5]
UsagePage=0x9
Usage=0x5
Type=0x404
Name=BUTTON 5
OverlayFileName.0=MSF1F_7.PNG
OverlayRect.0=(203,209),(715,721)
Align.0=T
CallOutMax.0=(2,268),(101,309)
LineData.0=(48,273),(48,218),(199,218)
[Button 6]
UsagePage=0x9
Usage=0x6
Type=0x504
Name=BUTTON 6
OverlayFileName.0=MSF1F_9.PNG
OverlayRect.0=(224,194),(736,706)
Align.0=T
CallOutMax.0=(331,267),(429,309)
LineData.0=(375,272),(375,197),(239,197)
[Button 7]
UsagePage=0x9
Usage=0x7
Type=0x604
Name=BUTTON 7
OverlayFileName.0=MSF1F_9.PNG
OverlayRect.0=(233,203),(745,715)
Align.0=T
CallOutMax.0=(238,267),(333,309)
LineData.0=(286,273),(286,208),(249,208)
[Button 8]
UsagePage=0x9
Usage=0x8
Type=0x704
Name=BUTTON 8
OverlayFileName.0=MSF1F_8.PNG
OverlayRect.0=(210,220),(722,732)
Align.0=T
CallOutMax.0=(102,268),(194,309)
LineData.0=(142,275),(142,230),(207,230)
[MICROSOFT SIDEWINDER 3D PRO.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.2]
MapExists=1
[MICROSOFT SIDEWINDER 3D PRO.Genre.2]
MapExists=1
X=0x1
THROTTLE=0x2
BUTTON 1=0x1
BUTTON 3=0x2
BUTTON 4=0x3
Y=0x4
HAT SWITCH=0x1
BUTTON 5=0x4
BUTTON 8=0x5
BUTTON 6=0x8
BUTTON 2=0x9
BUTTON 7=0xFC
[MICROSOFT SIDEWINDER 3D PRO.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.3]
MapExists=1
[MICROSOFT SIDEWINDER 3D PRO.Genre.3]
MapExists=1
X=0x1
Y=0x2
THROTTLE=0x3
BUTTON 1=0x1
BUTTON 3=0x2
BUTTON 4=0x3
HAT SWITCH=0x1
BUTTON 5=0x4
BUTTON 6=0x6
BUTTON 2=0x7
[MICROSOFT SIDEWINDER 3D PRO.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.41]
MapExists=1
[MICROSOFT SIDEWINDER 3D PRO.Genre.41]
MapExists=1
X=0x1
Y=0x2
RUDDER=0x3
THROTTLE=0x4
BUTTON 1=0x1
BUTTON 3=0x2
BUTTON 4=0x3
BUTTON 6=0x4
BUTTON 7=0x5
BUTTON 5=0x6
BUTTON 8=0x7
HAT SWITCH=0x1
BUTTON 2=0x9
[MICROSOFT SIDEWINDER 3D PRO.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.4]
MapExists=1
[MICROSOFT SIDEWINDER 3D PRO.Genre.4]
MapExists=1
X=0x1
Y=0x2
THROTTLE=0x3
BUTTON 2=0x1
BUTTON 1=0x2
HAT SWITCH=0x1
RUDDER=0x5
BUTTON 5=0x4
BUTTON 8=0x5
[MICROSOFT SIDEWINDER 3D PRO.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.5]
MapExists=1
[MICROSOFT SIDEWINDER 3D PRO.Genre.5]
MapExists=1
X=0x1
Y=0x2
THROTTLE=0x3
BUTTON 1=0x1
BUTTON 3=0x2
BUTTON 4=0x3
HAT SWITCH=0x1
BUTTON 5=0x4
RUDDER=0x4
BUTTON 6=0x5
BUTTON 7=0x6
BUTTON 2=0x9
BUTTON 8=0xA
[MICROSOFT SIDEWINDER 3D PRO.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.6]
MapExists=1
[MICROSOFT SIDEWINDER 3D PRO.Genre.6]
MapExists=1
X=0x1
Y=0x2
BUTTON 1=0x1
BUTTON 3=0x2
BUTTON 4=0x3
HAT SWITCH=0x1
RUDDER=0x4
THROTTLE=0x5
BUTTON 5=0x4
BUTTON 6=0x5
BUTTON 8=0x6
BUTTON 2=0x7
BUTTON 7=0xFC
[MICROSOFT SIDEWINDER 3D PRO.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.7]
MapExists=1
[MICROSOFT SIDEWINDER 3D PRO.Genre.7]
MapExists=1
X=0x1
Y=0x2
THROTTLE=0x3
BUTTON 1=0x1
BUTTON 3=0x2
BUTTON 4=0x3
HAT SWITCH=0x1
RUDDER=0x5
BUTTON 5=0x4
BUTTON 6=0x6
BUTTON 7=0x7
BUTTON 8=0x8
BUTTON 2=0x9
[MICROSOFT SIDEWINDER 3D PRO.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.33]
MapExists=1
[MICROSOFT SIDEWINDER 3D PRO.Genre.33]
MapExists=1
X=0x1
Y=0x2
BUTTON 1=0x1
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 4=0x4
BUTTON 5=0x5
BUTTON 7=0xFD
HAT SWITCH=0x1
BUTTON 6=0xFC
[MICROSOFT SIDEWINDER 3D PRO.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.34]
MapExists=1
[MICROSOFT SIDEWINDER 3D PRO.Genre.34]
MapExists=1
X=0x1
Y=0x2
BUTTON 1=0x1
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 4=0x4
BUTTON 5=0x5
BUTTON 7=0xFD
HAT SWITCH=0x1
BUTTON 6=0x6
BUTTON 8=0xFC
[MICROSOFT SIDEWINDER 3D PRO.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.1]
MapExists=1
[MICROSOFT SIDEWINDER 3D PRO.Genre.1]
MapExists=1
X=0x1
THROTTLE=0x2
BUTTON 1=0x1
BUTTON 2=0x2
BUTTON 6=0x3
Y=0x4
HAT SWITCH=0x1
BUTTON 3=0x4
BUTTON 5=0x6
BUTTON 8=0x7
BUTTON 4=0x8
BUTTON 7=0xFC
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dinput\ihvmap\msf1f_g.ini ===
[DirectInput]
DirectXVersion=0x800
Devices=Microsoft SideWinder 3D Pro
[Microsoft SideWinder 3D Pro]
Name=Microsoft SideWinder 3D Pro
Controls=X,Y,Throttle,Rudder,Hat Switch,Button 1,Button 2,Button 3,Button 4,Button 5,Button 6,Button 7,Button 8,
ImageFileName.0=MSF1F.PNG
[X]
Name=X
Type=0x2
Linedata.0=(80,272),(182,170)
Align.0=C
CalloutMax.0=(1,256),(165,307)
[Y]
Name=Y
Type=0x102
Linedata.0=(211,159),(122,137)
Align.0=L
CalloutMax.0=(213,138),(429,184)
[Throttle]
Name=Slider
Type=0x202
Linedata.0=(49,199),(114,215)
Align.0=C
CalloutMax.0=(0,167),(105,236)
[Rudder]
Name=Rudder
Type=0x502
Linedata.0=(47,116),(139,177)
Align.0=C
CalloutMax.0=(1,79),(100,160)
[Hat Switch]
Name=Hat Switch
Type=0x10
Linedata.0=(165,11),(132,11)
Align.0=L
CalloutMax.0=(165,0),(429,31)
[Button 1]
Name=Button 1
Type=0x4
Linedata.0=(44,35),(88,35)
Align.0=C
CalloutMax.0=(1,0),(74,77)
[Button 2]
Name=Button 2
Type=0x104
Linedata.0=(164,48),(144,32)
Align.0=L
CalloutMax.0=(165,32),(429,63)
[Button 3]
Name=Button 3
Type=0x204
Linedata.0=(175,77),(151,77),(119,34)
Align.0=L
CalloutMax.0=(175,64),(429,95)
[Button 4]
Name=Button 4
Type=0x304
Linedata.0=(176,115),(158,115),(127,66)
Align.0=L
CalloutMax.0=(176,97),(429,135)
[Button 5]
Name=Button 5
Type=0x404
Linedata.0=(230,293),(192,293),(192,240)
Align.0=L
CalloutMax.0=(231,280),(429,308)
[Button 6]
Name=Button 6
Type=0x504
Linedata.0=(222,213),(216,221)
Align.0=BL
CalloutMax.0=(215,183),(429,215)
[Button 7]
Name=Button 7
Type=0x604
Linedata.0=(256,231),(234,231)
Align.0=L
CalloutMax.0=(255,215),(429,248)
[Button 8]
Name=Button 8
Type=0x704
Linedata.0=(212,247),(212,262),(259,262)
Align.0=L
CalloutMax.0=(256,246),(429,276)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dinput\ihvmap\daytona\actc094.ini ===
[DirectInput]
DirectXVersion=0x800
Devices=VID_061C&PID_C084,VID_061C&PID_C094

[VID_061C&PID_C084]
Name=VID_061C&PID_C084
VID=0x061C
PID=0xC084
ImageFileName.0=ACT_RS.PNG
Controls=CTRL16777218,CTRL16777730,CTRL16777474,CTRL33554436,CTRL33554692,CTRL33554948,CTRL33556996,CTRL16,CTRL33555204,CTRL33555460,CTRL33555716,CTRL33555972,CTRL33556228,CTRL33556484,CTRL33557252,CTRL33556740

[VID_061C&PID_C094]
Name=VID_061C&PID_C094
VID=0x061C
PID=0xC094
ImageFileName.0=ACT_RS.PNG
Controls=CTRL16777218,CTRL16777730,CTRL16777474,CTRL33554436,CTRL33554692,CTRL33554948,CTRL33556996,CTRL16,CTRL33555204,CTRL33555460,CTRL33555716,CTRL33555972,CTRL33556228,CTRL33556484,CTRL33557252,CTRL33556740

[CTRL16777218]
Type=0x1000002
UsagePage=0x1
Usage=0x30
Name=X AXIS
Linedata.0=(16,7),(150,7),(188,23)
Align.0=L
CalloutMax.0=(0,0),(111,20)

[CTRL16777730]
Type=0x1000202
UsagePage=0x1
Usage=0x32
Name=THROTTLE
Linedata.0=(376,262),(316,262),(306,191)
Align.0=R
CalloutMax.0=(337,233),(429,289)

[CTRL16777474]
Type=0x1000102
UsagePage=0x1
Usage=0x31
Name=Y AXIS
Linedata.0=(216,282),(262,282),(262,207)
Align.0=L
CalloutMax.0=(166,253),(311,309)

[CTRL33554436]
Type=0x2000004
UsagePage=0x9
Usage=0x1
Name=BUTTON 1
Linedata.0=(7,198),(120,198),(182,114)
Align.0=L
CalloutMax.0=(0,187),(111,210)

[CTRL33554692]
Type=0x2000104
UsagePage=0x9
Usage=0x2
Name=BUTTON 2
Linedata.0=(413,92),(305,92),(236,84)
Align.0=R
CalloutMax.0=(323,82),(430,105)

[CTRL33554948]
Type=0x2000204
UsagePage=0x9
Usage=0x3
Name=BUTTON 3
Linedata.0=(13,84),(121,84),(178,78)
Align.0=L
CalloutMax.0=(0,74),(109,96)

[CTRL33556996]
Type=0x2000A04
UsagePage=0x9
Usage=0xB
Name=BUTTON 11
Align.0=R
CallOutMax.0=(322,111),(429,139)
LineData.0=(420,124),(307,124),(242,95)

[CTRL16]
Type=0x10
UsagePage=0x1
Usage=0x39
Name=POINTOFVIEWHAT
Linedata.0=(414,182),(315,182),(221,104)
Align.0=R
CalloutMax.0=(323,171),(430,194)

[CTRL33555204]
Type=0x2000304
UsagePage=0x9
Usage=0x4
Name=BUTTON 4
Linedata.0=(420,39),(307,39),(238,59)
Align.0=R
CalloutMax.0=(319,30),(430,51)

[CTRL33555460]
Type=0x2000404
UsagePage=0x9
Usage=0x5
Name=BUTTON 5
Linedata.0=(13,54),(121,54),(174,68)
Align.0=L
CalloutMax.0=(0,43),(110,65)

[CTRL33555716]
Type=0x2000504
UsagePage=0x9
Usage=0x6
Name=BUTTON 6
Linedata.0=(9,156),(118,156),(182,91)
Align.0=L
CalloutMax.0=(0,145),(110,169)

[CTRL33555972]
Type=0x2000604
UsagePage=0x9
Usage=0x7
Name=BUTTON 7
Linedata.0=(419,69),(238,69)
Align.0=R
CalloutMax.0=(320,59),(430,82)

[CTRL33556228]
Type=0x2000704
UsagePage=0x9
Usage=0x8
Name=BUTTON 8
Linedata.0=(416,9),(305,9),(244,47)
Align.0=R
CalloutMax.0=(317,0),(430,22)

[CTRL33556484]
Type=0x2000804
UsagePage=0x9
Usage=0x9
Name=BUTTON 9
Linedata.0=(57,246),(148,246),(219,150)
Align.0=L
CalloutMax.0=(0,235),(111,258)

[CTRL33557252]
Type=0x2000B04
UsagePage=0x9
Usage=0xC
Name=BUTTON 12
Align.0=R
CallOutMax.0=(322,142),(429,168)
LineData.0=(417,156),(308,156),(243,106)

[CTRL33556740]
Type=0x2000904
UsagePage=0x9
Usage=0xA
Name=BUTTON 10
Align.0=L
CallOutMax.0=(0,108),(108,133)
LineData.0=(8,120),(120,120),(127,112)

[VID_061C&PID_C094.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.3]
MapExists=1

[VID_061C&PID_C094.Genre.3]
MapExists=1
CTRL16777218=0x1
CTRL16777730=0x3
CTRL33554436=0x1
CTRL33554692=0x2
CTRL33554948=0x3
CTRL33556996=0xFD
CTRL16=0x1
CTRL16777474=0x5
CTRL33555204=0x4
CTRL33555460=0x5
CTRL33555716=0x6
CTRL33555972=0x7
CTRL33556228=0xE0
CTRL33556484=0xE8
CTRL33557252=0xFE
CTRL33556740=0xFC

[VID_061C&PID_C094.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.1]
MapExists=1

[VID_061C&PID_C094.Genre.1]
MapExists=1
CTRL16777218=0x1
CTRL16777730=0x2
CTRL16777474=0x3
CTRL33554436=0x1
CTRL33554692=0x2
CTRL33554948=0x3
CTRL33556996=0xFD
CTRL16=0x1
CTRL33555204=0x4
CTRL33555460=0x5
CTRL33555716=0x6
CTRL33555972=0x7
CTRL33556228=0x8
CTRL33556484=0x9
CTRL33557252=0xFE
CTRL33556740=0xFC
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dinput\ihvmap\raiderpd.ini ===
[DirectInput]
DirectXVersion=0x800
Devices=InterAct SV-251 Raider Digital (Gameport),InterAct SV-251 Raider Digital (USB)

[InterAct SV-251 Raider Digital (Gameport)]
Name=InterAct SV-251 Raider Digital
Controls=X-AXIS,Y-AXIS,Z-AXIS,BUTTON 0,BUTTON 1,BUTTON 2,BUTTON 3,BUTTON 4,BUTTON 5,POV 0
ImageFileName.0=SV2511.PNG
ImageFormat.0=BMP
ImageFileName.1=SV2512.PNG
ImageFormat.1=BMP

[InterAct SV-251 Raider Digital (USB)]
Name=InterAct SV-251 Raider Digital (USB)
ImageFileName.0=SV2511.PNG
ImageFormat.0=BMP
ImageFileName.1=SV2512.PNG
ImageFormat.1=BMP
VID=1533
PID=593
Controls=CTRL2,CTRL4,CTRL514,CTRL260,CTRL516,CTRL1028,CTRL16,CTRL258,CTRL772,CTRL1284

[X-axis]
Name=X-AXIS
Type=0x2
Align.1=L
CallOutMax.1=(281,141),(420,198)
LineData.1=(197,134),(249,134),(249,170),(272,170)

[Y-axis]
Name=Y-AXIS
Type=0x102
Align.1=T
CallOutMax.1=(3,165),(117,267)
LineData.1=(150,136),(55,136),(55,160)

[Z-axis]
Name=Z-AXIS
Type=0x202
Align.0=B
CallOutMax.0=(7,66),(94,153)
LineData.0=(126,220),(49,220),(49,160)

[Button 0]
Name=BUTTON 0
Type=0x4
Align.0=C
CallOutMax.0=(258,20),(376,54)
LineData.0=(285,186),(312,186),(312,57)

[Button 1]
Name=BUTTON 1
Type=0x104
Align.1=R
CallOutMax.1=(4,47),(89,127)
LineData.1=(100,69),(100,94),(93,94)

[Button 2]
Name=BUTTON 2
Type=0x204
Align.1=L
CallOutMax.1=(235,67),(394,121)
LineData.1=(152,26),(212,26),(212,94),(231,94)

[Button 3]
Name=BUTTON 3
Type=0x304
Align.0=R
CallOutMax.0=(6,229),(91,308)
LineData.0=(170,267),(94,267)

[Button 4]
Name=BUTTON 4
Type=0x404
Align.0=L
CallOutMax.0=(335,167),(419,299)
LineData.0=(231,263),(321,263),(321,244),(330,244)

[Button 5]
Name=BUTTON 5
Type=0x504
Align.0=L
CallOutMax.0=(340,66),(420,153)
LineData.0=(276,228),(325,228),(325,114),(335,114)

[POV 0]
Name=POV 0
Type=0x10
Align.1=T
CallOutMax.1=(234,16),(334,62)
LineData.1=(139,7),(282,7),(282,13)

[CTRL2]
Type=0x2
UsagePage=0x1
Usage=0x30
Name=X AXIS
Align.1=L
CallOutMax.1=(276,142),(415,199)
LineData.1=(274,170),(249,170),(249,134),(200,134)

[CTRL514]
Type=0x202
UsagePage=0x2
Usage=0xBB
Name=THROTTLE
Align.0=B
CallOutMax.0=(7,66),(94,153)
LineData.0=(46,153),(46,220),(121,220)

[CTRL4]
Type=0x4
UsagePage=0x9
Usage=0x1
Name=BUTTON 0
Align.1=R
CallOutMax.1=(4,54),(89,134)
LineData.1=(90,94),(100,94),(100,69)

[CTRL260]
Type=0x104
UsagePage=0x9
Usage=0x2
Name=BUTTON 1
Align.1=L
CallOutMax.1=(273,68),(415,114)
LineData.1=(271,90),(220,90),(220,28),(157,28)

[CTRL516]
Type=0x204
UsagePage=0x9
Usage=0x3
Name=BUTTON 2
Align.0=R
CallOutMax.0=(6,229),(91,308)
LineData.0=(92,263),(166,263)

[CTRL772]
Type=0x304
UsagePage=0x9
Usage=0x4
Name=BUTTON 3
Align.0=L
CallOutMax.0=(335,167),(419,299)
LineData.0=(332,244),(321,244),(321,263),(234,263)

[CTRL1028]
Type=0x404
UsagePage=0x9
Usage=0x5
Name=BUTTON 4
Align.0=L
CallOutMax.0=(340,66),(420,153)
LineData.0=(335,114),(325,114),(325,228),(279,228)

[CTRL258]
Type=0x102
UsagePage=0x1
Usage=0x31
Name=Y AXIS
Align.1=T
CallOutMax.1=(0,164),(114,266)
LineData.1=(55,160),(55,136),(147,136)

[CTRL16]
Type=0x10
UsagePage=0x1
Usage=0x39
Name=HAT SWITCH
Align.1=T
CallOutMax.1=(234,16),(334,62)
LineData.1=(282,13),(282,7),(141,7)

[CTRL1284]
Type=0x504
UsagePage=0x9
Usage=0x6
Name=BUTTON 5
Align.0=L
CallOutMax.0=(340,0),(422,62)
LineData.0=(336,30),(306,30),(306,186),(290,186)

[InterAct SV-251 Raider Digital (Gameport).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.1]
MapExists=1

[InterAct SV-251 Raider Digital (Gameport).Genre.1]
MapExists=1
BUTTON 1=0x1
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 0=0xFD
Z-AXIS=0x4
POV 0=0x1
BUTTON 4=0x5
BUTTON 5=0x8

[InterAct SV-251 Raider Digital (Gameport).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.2]
MapExists=1

[InterAct SV-251 Raider Digital (Gameport).Genre.2]
MapExists=1
X-AXIS=0x1
BUTTON 1=0x1
BUTTON 2=0x2
BUTTON 0=0x3
Z-AXIS=0x4
POV 0=0x1
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 5=0x6

[InterAct SV-251 Raider Digital (Gameport).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.4]
MapExists=1

[InterAct SV-251 Raider Digital (Gameport).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.5]
MapExists=1

[InterAct SV-251 Raider Digital (Gameport).Genre.5]
MapExists=1
X-AXIS=0x1
Y-AXIS=0x2
Z-AXIS=0x3
BUTTON 1=0x1
BUTTON 2=0x2
BUTTON 3=0x3
POV 0=0x1
BUTTON 5=0x4
BUTTON 4=0x5
BUTTON 0=0x6

[InterAct SV-251 Raider Digital (Gameport).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.11]
MapExists=1

[InterAct SV-251 Raider Digital (Gameport).Genre.11]
MapExists=1
X-AXIS=0x1
Y-AXIS=0x2
BUTTON 3=0x2
BUTTON 2=0x3
BUTTON 1=0x4
BUTTON 0=0x5
BUTTON 5=0x6
BUTTON 4=0x7
POV 0=0x1
Z-AXIS=0x3

[InterAct SV-251 Raider Digital (Gameport).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.12]
MapExists=1

[InterAct SV-251 Raider Digital (Gameport).Genre.12]
MapExists=1
X-AXIS=0x1
Y-AXIS=0x2
BUTTON 1=0x1
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 4=0x4
BUTTON 5=0x5
BUTTON 0=0xFD

[InterAct SV-251 Raider Digital (Gameport).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.33]
MapExists=1

[InterAct SV-251 Raider Digital (Gameport).Genre.33]
MapExists=1
X-AXIS=0x1
Y-AXIS=0x2
BUTTON 3=0x1
BUTTON 4=0x2
BUTTON 1=0x3
BUTTON 2=0x4
BUTTON 5=0x5
BUTTON 0=0xFD
POV 0=0x1

[InterAct SV-251 Raider Digital (Gameport).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.34]
MapExists=1

[InterAct SV-251 Raider Digital (Gameport).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.28]
MapExists=1

[InterAct SV-251 Raider Digital (Gameport).Genre.28]
MapExists=1
X-AXIS=0x1
Y-AXIS=0x2
BUTTON 1=0x1
BUTTON 3=0x2
BUTTON 2=0x3
BUTTON 4=0x4
BUTTON 5=0x5
BUTTON 0=0xFD
POV 0=0x1

[InterAct SV-251 Raider Digital (Gameport).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.9]
MapExists=1

[InterAct SV-251 Raider Digital (Gameport).Genre.9]
MapExists=1
X-AXIS=0x1
Y-AXIS=0x2
BUTTON 1=0x1
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 4=0x4
BUTTON 5=0x5
BUTTON 0=0x6
POV 0=0x1
Z-AXIS=0x3

[InterAct SV-251 Raider Digital (Gameport).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.10]
MapExists=1

[InterAct SV-251 Raider Digital (Gameport).Genre.10]
MapExists=1
X-AXIS=0x1
Y-AXIS=0x2
BUTTON 3=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 4=0x4
BUTTON 5=0x5
POV 0=0x1
BUTTON 0=0x6
Z-AXIS=0x3

[InterAct SV-251 Raider Digital (Gameport).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.13]
MapExists=1

[InterAct SV-251 Raider Digital (Gameport).Genre.13]
MapExists=1
X-AXIS=0x1
Y-AXIS=0x2
BUTTON 1=0x1
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 4=0x4
BUTTON 5=0x5
BUTTON 0=0x6
POV 0=0x1
Z-AXIS=0x3

[InterAct SV-251 Raider Digital (Gameport).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.15]
MapExists=1

[InterAct SV-251 Raider Digital (Gameport).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.3]
MapExists=1

[InterAct SV-251 Raider Digital (Gameport).Genre.3]
MapExists=1
Y-AXIS=0x1
X-AXIS=0x2
BUTTON 1=0x1
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 4=0xFD
POV 0=0x1
Z-AXIS=0x5
BUTTON 5=0x4
BUTTON 0=0x5

[InterAct SV-251 Raider Digital (Gameport).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.41]
MapExists=1

[InterAct SV-251 Raider Digital (Gameport).Genre.41]
MapExists=1
Y-AXIS=0x1
X-AXIS=0x2
Z-AXIS=0x4
BUTTON 1=0x1
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 4=0x4
BUTTON 5=0x5
BUTTON 0=0x6
POV 0=0x1

[InterAct SV-251 Raider Digital (Gameport).Genre.4]
MapExists=1
X-AXIS=0x1
Y-AXIS=0x2
Z-AXIS=0x3
BUTTON 4=0x1
BUTTON 3=0x2
BUTTON 5=0x3
POV 0=0x1
BUTTON 1=0x4
BUTTON 2=0x5
BUTTON 0=0xFC

[InterAct SV-251 Raider Digital (Gameport).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.6]
MapExists=1

[InterAct SV-251 Raider Digital (Gameport).Genre.6]
MapExists=1
X-AXIS=0x1
Y-AXIS=0x2
BUTTON 1=0x1
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 4=0xFD
POV 0=0x1
Z-AXIS=0x5
BUTTON 5=0x4
BUTTON 0=0x5

[InterAct SV-251 Raider Digital (Gameport).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.7]
MapExists=1

[InterAct SV-251 Raider Digital (Gameport).Genre.7]
MapExists=1
X-AXIS=0x1
Y-AXIS=0x2
Z-AXIS=0x3
BUTTON 1=0x1
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 4=0xFD
POV 0=0x1
BUTTON 5=0x4
BUTTON 0=0x5

[InterAct SV-251 Raider Digital (Gameport).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.8]
MapExists=1

[InterAct SV-251 Raider Digital (Gameport).Genre.8]
MapExists=1
X-AXIS=0x1
Y-AXIS=0x2
BUTTON 1=0x1
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 4=0x4
BUTTON 5=0x5
BUTTON 0=0x6
POV 0=0x1
Z-AXIS=0x3

[InterAct SV-251 Raider Digital (Gameport).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.14]
MapExists=1

[InterAct SV-251 Raider Digital (Gameport).Genre.14]
MapExists=1
X-AXIS=0x1
Y-AXIS=0x2
BUTTON 1=0x1
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 4=0x4
BUTTON 5=0x5
BUTTON 0=0xFD
POV 0=0x1
Z-AXIS=0x3

[InterAct SV-251 Raider Digital (Gameport).Genre.15]
MapExists=1
X-AXIS=0x1
Y-AXIS=0x2
BUTTON 2=0x1
BUTTON 1=0x2
BUTTON 3=0x3
BUTTON 4=0x4
BUTTON 5=0x5
BUTTON 0=0x6

[InterAct SV-251 Raider Digital (Gameport).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.16]
MapExists=1

[InterAct SV-251 Raider Digital (Gameport).Genre.16]
MapExists=1
X-AXIS=0x1
Y-AXIS=0x2
BUTTON 2=0x1
BUTTON 1=0x2
BUTTON 3=0x3
BUTTON 4=0x4
BUTTON 5=0x5
BUTTON 0=0x6

[InterAct SV-251 Raider Digital (Gameport).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.17]
MapExists=1

[InterAct SV-251 Raider Digital (Gameport).Genre.17]
MapExists=1
X-AXIS=0x1
Y-AXIS=0x2
BUTTON 2=0x1
BUTTON 3=0x2
BUTTON 1=0x3
BUTTON 4=0x4
BUTTON 5=0x5
BUTTON 0=0x6

[InterAct SV-251 Raider Digital (Gameport).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.18]
MapExists=1

[InterAct SV-251 Raider Digital (Gameport).Genre.18]
MapExists=1
X-AXIS=0x1
Y-AXIS=0x2
BUTTON 1=0x1
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 4=0x4
BUTTON 5=0x5
BUTTON 0=0x6
POV 0=0x1

[InterAct SV-251 Raider Digital (Gameport).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.19]
MapExists=1

[InterAct SV-251 Raider Digital (Gameport).Genre.19]
MapExists=1
X-AXIS=0x1
Y-AXIS=0x2
BUTTON 1=0x1
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 4=0x4
BUTTON 5=0x5
BUTTON 0=0x6
POV 0=0x1

[InterAct SV-251 Raider Digital (Gameport).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.20]
MapExists=1

[InterAct SV-251 Raider Digital (Gameport).Genre.20]
MapExists=1
BUTTON 2=0x1
BUTTON 1=0x2
BUTTON 3=0x3
BUTTON 4=0xFD
BUTTON 5=0xFE
BUTTON 0=0xFC

[InterAct SV-251 Raider Digital (Gameport).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.22]
MapExists=1

[InterAct SV-251 Raider Digital (Gameport).Genre.22]
MapExists=1
X-AXIS=0x1
Y-AXIS=0x2
BUTTON 3=0x1
BUTTON 4=0x2
BUTTON 5=0x3
BUTTON 1=0x4
BUTTON 2=0x5
BUTTON 0=0x8

[InterAct SV-251 Raider Digital (Gameport).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.23]
MapExists=1

[InterAct SV-251 Raider Digital (Gameport).Genre.23]
MapExists=1
X-AXIS=0x1
Y-AXIS=0x2
BUTTON 2=0x1
BUTTON 1=0x2
BUTTON 3=0x3
BUTTON 4=0x4
BUTTON 5=0x5
BUTTON 0=0x6

[InterAct SV-251 Raider Digital (Gameport).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.24]
MapExists=1

[InterAct SV-251 Raider Digital (Gameport).Genre.24]
MapExists=1
X-AXIS=0x1
Y-AXIS=0x2
BUTTON 1=0x1
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 4=0x4
BUTTON 5=0x5
BUTTON 0=0x6
POV 0=0x1

[InterAct SV-251 Raider Digital (Gameport).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.26]
MapExists=1

[InterAct SV-251 Raider Digital (Gameport).Genre.26]
MapExists=1
X-AXIS=0x1
Y-AXIS=0x2
BUTTON 1=0x1
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 4=0x4
BUTTON 5=0x5
BUTTON 0=0xFD
POV 0=0x1

[InterAct SV-251 Raider Digital (Gameport).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.27]
MapExists=1

[InterAct SV-251 Raider Digital (Gameport).Genre.27]
MapExists=1
X-AXIS=0x1
Y-AXIS=0x2
BUTTON 2=0x1
BUTTON 1=0x2
BUTTON 3=0x3
BUTTON 4=0x4
BUTTON 5=0xFD
POV 0=0x1
BUTTON 0=0x5

[InterAct SV-251 Raider Digital (Gameport).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.29]
MapExists=1

[InterAct SV-251 Raider Digital (Gameport).Genre.29]
MapExists=1
X-AXIS=0x1
Y-AXIS=0x2
BUTTON 1=0x1
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 4=0x4
BUTTON 5=0x5
BUTTON 0=0x6
POV 0=0x1

[InterAct SV-251 Raider Digital (Gameport).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.30]
MapExists=1

[InterAct SV-251 Raider Digital (Gameport).Genre.30]
MapExists=1
X-AXIS=0x1
Y-AXIS=0x2
Z-AXIS=0x3
BUTTON 1=0x1
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 4=0x4
BUTTON 5=0x5
BUTTON 0=0x6
POV 0=0x1

[InterAct SV-251 Raider Digital (Gameport).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.31]
MapExists=1

[InterAct SV-251 Raider Digital (Gameport).Genre.31]
MapExists=1
X-AXIS=0x1
Y-AXIS=0x2
BUTTON 1=0x1
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 4=0x4
BUTTON 5=0x5
BUTTON 0=0x6
POV 0=0x1

[InterAct SV-251 Raider Digital (Gameport).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.32]
MapExists=1

[InterAct SV-251 Raider Digital (Gameport).Genre.32]
MapExists=1
X-AXIS=0x1
Y-AXIS=0x2
BUTTON 1=0x1
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 4=0x4
BUTTON 5=0x5
BUTTON 0=0xFD
POV 0=0x1

[InterAct SV-251 Raider Digital (Gameport).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.40]
MapExists=1

[InterAct SV-251 Raider Digital (Gameport).Genre.40]
MapExists=1
X-AXIS=0x1
BUTTON 1=0x1
Y-AXIS=0x3
BUTTON 2=0x2
BUTTON 3=0xFD
Z-AXIS=0x4
BUTTON 4=0x3
BUTTON 5=0x4
BUTTON 0=0x5

[InterAct SV-251 Raider Digital (Gameport).Genre.34]
MapExists=1
X-AXIS=0x1
Y-AXIS=0x2
BUTTON 3=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 4=0x4
BUTTON 5=0x5
BUTTON 0=0xFD
POV 0=0x1

[InterAct SV-251 Raider Digital (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.1]
MapExists=1

[InterAct SV-251 Raider Digital (USB).Genre.1]
MapExists=1
BUTTON 1=0x1
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 0=0xFD
Z-AXIS=0x4
POV 0=0x1
BUTTON 4=0x5
BUTTON 5=0x8

[InterAct SV-251 Raider Digital (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.2]
MapExists=1

[InterAct SV-251 Raider Digital (USB).Genre.2]
MapExists=1
X-AXIS=0x1
BUTTON 1=0x1
BUTTON 2=0x2
BUTTON 0=0x3
Z-AXIS=0x4
POV 0=0x1
BUTTON 3=0x4
BUTTON 4=0x5
BUTTON 5=0x6

[InterAct SV-251 Raider Digital (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.4]
MapExists=1

[InterAct SV-251 Raider Digital (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.5]
MapExists=1

[InterAct SV-251 Raider Digital (USB).Genre.5]
MapExists=1
X-AXIS=0x1
Y-AXIS=0x2
Z-AXIS=0x3
BUTTON 1=0x1
BUTTON 2=0x2
BUTTON 3=0x3
POV 0=0x1
BUTTON 5=0x4
BUTTON 4=0x5
BUTTON 0=0x6

[InterAct SV-251 Raider Digital (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.11]
MapExists=1

[InterAct SV-251 Raider Digital (USB).Genre.11]
MapExists=1
X-AXIS=0x1
Y-AXIS=0x2
BUTTON 3=0x2
BUTTON 2=0x3
BUTTON 1=0x4
BUTTON 0=0x5
BUTTON 5=0x6
BUTTON 4=0x7
POV 0=0x1
Z-AXIS=0x3

[InterAct SV-251 Raider Digital (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.12]
MapExists=1

[InterAct SV-251 Raider Digital (USB).Genre.12]
MapExists=1
X-AXIS=0x1
Y-AXIS=0x2
BUTTON 1=0x1
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 4=0x4
BUTTON 5=0x5
BUTTON 0=0xFD

[InterAct SV-251 Raider Digital (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.33]
MapExists=1

[InterAct SV-251 Raider Digital (USB).Genre.33]
MapExists=1
X-AXIS=0x1
Y-AXIS=0x2
BUTTON 3=0x1
BUTTON 4=0x2
BUTTON 1=0x3
BUTTON 2=0x4
BUTTON 5=0x5
BUTTON 0=0xFD
POV 0=0x1

[InterAct SV-251 Raider Digital (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.34]
MapExists=1

[InterAct SV-251 Raider Digital (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.28]
MapExists=1

[InterAct SV-251 Raider Digital (USB).Genre.28]
MapExists=1
X-AXIS=0x1
Y-AXIS=0x2
BUTTON 1=0x1
BUTTON 3=0x2
BUTTON 2=0x3
BUTTON 4=0x4
BUTTON 5=0x5
BUTTON 0=0xFD
POV 0=0x1

[InterAct SV-251 Raider Digital (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.9]
MapExists=1

[InterAct SV-251 Raider Digital (USB).Genre.9]
MapExists=1
X-AXIS=0x1
Y-AXIS=0x2
BUTTON 1=0x1
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 4=0x4
BUTTON 5=0x5
BUTTON 0=0x6
POV 0=0x1
Z-AXIS=0x3

[InterAct SV-251 Raider Digital (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.10]
MapExists=1

[InterAct SV-251 Raider Digital (USB).Genre.10]
MapExists=1
X-AXIS=0x1
Y-AXIS=0x2
BUTTON 3=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 4=0x4
BUTTON 5=0x5
POV 0=0x1
BUTTON 0=0x6
Z-AXIS=0x3

[InterAct SV-251 Raider Digital (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.13]
MapExists=1

[InterAct SV-251 Raider Digital (USB).Genre.13]
MapExists=1
X-AXIS=0x1
Y-AXIS=0x2
BUTTON 1=0x1
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 4=0x4
BUTTON 5=0x5
BUTTON 0=0x6
POV 0=0x1
Z-AXIS=0x3

[InterAct SV-251 Raider Digital (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.15]
MapExists=1

[InterAct SV-251 Raider Digital (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.3]
MapExists=1

[InterAct SV-251 Raider Digital (USB).Genre.3]
MapExists=1
Y-AXIS=0x1
X-AXIS=0x2
BUTTON 1=0x1
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 4=0xFD
POV 0=0x1
Z-AXIS=0x5
BUTTON 5=0x4
BUTTON 0=0x5

[InterAct SV-251 Raider Digital (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.41]
MapExists=1

[InterAct SV-251 Raider Digital (USB).Genre.41]
MapExists=1
Y-AXIS=0x1
X-AXIS=0x2
Z-AXIS=0x4
BUTTON 1=0x1
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 4=0x4
BUTTON 5=0x5
BUTTON 0=0x6
POV 0=0x1

[InterAct SV-251 Raider Digital (USB).Genre.4]
MapExists=1
X-AXIS=0x1
Y-AXIS=0x2
Z-AXIS=0x3
BUTTON 4=0x1
BUTTON 3=0x2
BUTTON 5=0x3
POV 0=0x1
BUTTON 1=0x4
BUTTON 2=0x5
BUTTON 0=0xFC

[InterAct SV-251 Raider Digital (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.6]
MapExists=1

[InterAct SV-251 Raider Digital (USB).Genre.6]
MapExists=1
X-AXIS=0x1
Y-AXIS=0x2
BUTTON 1=0x1
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 4=0xFD
POV 0=0x1
Z-AXIS=0x5
BUTTON 5=0x4
BUTTON 0=0x5

[InterAct SV-251 Raider Digital (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.7]
MapExists=1

[InterAct SV-251 Raider Digital (USB).Genre.7]
MapExists=1
X-AXIS=0x1
Y-AXIS=0x2
Z-AXIS=0x3
BUTTON 1=0x1
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 4=0xFD
POV 0=0x1
BUTTON 5=0x4
BUTTON 0=0x5

[InterAct SV-251 Raider Digital (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.8]
MapExists=1

[InterAct SV-251 Raider Digital (USB).Genre.8]
MapExists=1
X-AXIS=0x1
Y-AXIS=0x2
BUTTON 1=0x1
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 4=0x4
BUTTON 5=0x5
BUTTON 0=0x6
POV 0=0x1
Z-AXIS=0x3

[InterAct SV-251 Raider Digital (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.14]
MapExists=1

[InterAct SV-251 Raider Digital (USB).Genre.14]
MapExists=1
X-AXIS=0x1
Y-AXIS=0x2
BUTTON 1=0x1
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 4=0x4
BUTTON 5=0x5
BUTTON 0=0xFD
POV 0=0x1
Z-AXIS=0x3

[InterAct SV-251 Raider Digital (USB).Genre.15]
MapExists=1
X-AXIS=0x1
Y-AXIS=0x2
BUTTON 2=0x1
BUTTON 1=0x2
BUTTON 3=0x3
BUTTON 4=0x4
BUTTON 5=0x5
BUTTON 0=0x6

[InterAct SV-251 Raider Digital (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.16]
MapExists=1

[InterAct SV-251 Raider Digital (USB).Genre.16]
MapExists=1
X-AXIS=0x1
Y-AXIS=0x2
BUTTON 2=0x1
BUTTON 1=0x2
BUTTON 3=0x3
BUTTON 4=0x4
BUTTON 5=0x5
BUTTON 0=0x6

[InterAct SV-251 Raider Digital (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.17]
MapExists=1

[InterAct SV-251 Raider Digital (USB).Genre.17]
MapExists=1
X-AXIS=0x1
Y-AXIS=0x2
BUTTON 2=0x1
BUTTON 3=0x2
BUTTON 1=0x3
BUTTON 4=0x4
BUTTON 5=0x5
BUTTON 0=0x6

[InterAct SV-251 Raider Digital (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.18]
MapExists=1

[InterAct SV-251 Raider Digital (USB).Genre.18]
MapExists=1
X-AXIS=0x1
Y-AXIS=0x2
BUTTON 1=0x1
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 4=0x4
BUTTON 5=0x5
BUTTON 0=0x6
POV 0=0x1

[InterAct SV-251 Raider Digital (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.19]
MapExists=1

[InterAct SV-251 Raider Digital (USB).Genre.19]
MapExists=1
X-AXIS=0x1
Y-AXIS=0x2
BUTTON 1=0x1
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 4=0x4
BUTTON 5=0x5
BUTTON 0=0x6
POV 0=0x1

[InterAct SV-251 Raider Digital (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.20]
MapExists=1

[InterAct SV-251 Raider Digital (USB).Genre.20]
MapExists=1
BUTTON 2=0x1
BUTTON 1=0x2
BUTTON 3=0x3
BUTTON 4=0xFD
BUTTON 5=0xFE
BUTTON 0=0xFC

[InterAct SV-251 Raider Digital (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.22]
MapExists=1

[InterAct SV-251 Raider Digital (USB).Genre.22]
MapExists=1
X-AXIS=0x1
Y-AXIS=0x2
BUTTON 3=0x1
BUTTON 4=0x2
BUTTON 5=0x3
BUTTON 1=0x4
BUTTON 2=0x5
BUTTON 0=0x8

[InterAct SV-251 Raider Digital (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.23]
MapExists=1

[InterAct SV-251 Raider Digital (USB).Genre.23]
MapExists=1
X-AXIS=0x1
Y-AXIS=0x2
BUTTON 2=0x1
BUTTON 1=0x2
BUTTON 3=0x3
BUTTON 4=0x4
BUTTON 5=0x5
BUTTON 0=0x6

[InterAct SV-251 Raider Digital (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.24]
MapExists=1

[InterAct SV-251 Raider Digital (USB).Genre.24]
MapExists=1
X-AXIS=0x1
Y-AXIS=0x2
BUTTON 1=0x1
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 4=0x4
BUTTON 5=0x5
BUTTON 0=0x6
POV 0=0x1

[InterAct SV-251 Raider Digital (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.26]
MapExists=1

[InterAct SV-251 Raider Digital (USB).Genre.26]
MapExists=1
X-AXIS=0x1
Y-AXIS=0x2
BUTTON 1=0x1
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 4=0x4
BUTTON 5=0x5
BUTTON 0=0xFD
POV 0=0x1

[InterAct SV-251 Raider Digital (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.27]
MapExists=1

[InterAct SV-251 Raider Digital (USB).Genre.27]
MapExists=1
X-AXIS=0x1
Y-AXIS=0x2
BUTTON 2=0x1
BUTTON 1=0x2
BUTTON 3=0x3
BUTTON 4=0x4
BUTTON 5=0xFD
POV 0=0x1
BUTTON 0=0x5

[InterAct SV-251 Raider Digital (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.29]
MapExists=1

[InterAct SV-251 Raider Digital (USB).Genre.29]
MapExists=1
X-AXIS=0x1
Y-AXIS=0x2
BUTTON 1=0x1
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 4=0x4
BUTTON 5=0x5
BUTTON 0=0x6
POV 0=0x1

[InterAct SV-251 Raider Digital (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.30]
MapExists=1

[InterAct SV-251 Raider Digital (USB).Genre.30]
MapExists=1
X-AXIS=0x1
Y-AXIS=0x2
Z-AXIS=0x3
BUTTON 1=0x1
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 4=0x4
BUTTON 5=0x5
BUTTON 0=0x6
POV 0=0x1

[InterAct SV-251 Raider Digital (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.31]
MapExists=1

[InterAct SV-251 Raider Digital (USB).Genre.31]
MapExists=1
X-AXIS=0x1
Y-AXIS=0x2
BUTTON 1=0x1
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 4=0x4
BUTTON 5=0x5
BUTTON 0=0x6
POV 0=0x1

[InterAct SV-251 Raider Digital (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.32]
MapExists=1

[InterAct SV-251 Raider Digital (USB).Genre.32]
MapExists=1
X-AXIS=0x1
Y-AXIS=0x2
BUTTON 1=0x1
BUTTON 2=0x2
BUTTON 3=0x3
BUTTON 4=0x4
BUTTON 5=0x5
BUTTON 0=0xFD
POV 0=0x1

[InterAct SV-251 Raider Digital (USB).Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.40]
MapExists=1

[InterAct SV-251 Raider Digital (USB).Genre.40]
MapExists=1
X-AXIS=0x1
BUTTON 1=0x1
Y-AXIS=0x3
BUTTON 2=0x2
BUTTON 3=0xFD
Z-AXIS=0x4
BUTTON 4=0x3
BUTTON 5=0x4
BUTTON 0=0x5

[InterAct SV-251 Raider Digital (USB).Genre.34]
MapExists=1
X-AXIS=0x1
Y-AXIS=0x2
BUTTON 3=0x1
BUTTON 1=0x2
BUTTON 2=0x3
BUTTON 4=0x4
BUTTON 5=0x5
BUTTON 0=0xFD
POV 0=0x1
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dinput\ihvmap\win9x\actc094.ini ===
[DirectInput]
DirectXVersion=0x800
Devices=VID_061C&PID_C084,VID_061C&PID_C094

[VID_061C&PID_C084]
Name=VID_061C&PID_C084
VID=0x061C
PID=0xC084
ImageFileName.0=ACT_RS.PNG
Controls=CTRL16777218,CTRL16777730,CTRL16777474,CTRL33554436,CTRL33554692,CTRL33554948,CTRL33556996,CTRL16,CTRL33555204,CTRL33555460,CTRL33555716,CTRL33555972,CTRL33556228,CTRL33556484,CTRL33557252,CTRL33556740

[VID_061C&PID_C094]
Name=VID_061C&PID_C094
VID=0x061C
PID=0xC094
ImageFileName.0=ACT_RS.PNG
Controls=CTRL16777218,CTRL16777730,CTRL16777474,CTRL33554436,CTRL33554692,CTRL33554948,CTRL33556996,CTRL16,CTRL33555204,CTRL33555460,CTRL33555716,CTRL33555972,CTRL33556228,CTRL33556484,CTRL33557252,CTRL33556740

[CTRL16777218]
Type=0x1000002
UsagePage=0x1
Usage=0x30
Name=X AXIS
Linedata.0=(16,7),(150,7),(188,23)
Align.0=L
CalloutMax.0=(0,0),(111,20)

[CTRL16777730]
Type=0x1000202
UsagePage=0x1
Usage=0x32
Name=THROTTLE

[CTRL16777474]
Type=0x1000102
UsagePage=0x1
Usage=0x31
Name=Y AXIS
Linedata.0=(371,282),(296,282),(296,207)
Align.0=C
CalloutMax.0=(317,253),(429,309)

[CTRL33554436]
Type=0x2000004
UsagePage=0x9
Usage=0x1
Name=BUTTON 1
Linedata.0=(7,198),(120,198),(182,114)
Align.0=L
CalloutMax.0=(0,187),(111,210)

[CTRL33554692]
Type=0x2000104
UsagePage=0x9
Usage=0x2
Name=BUTTON 2
Linedata.0=(413,92),(305,92),(236,84)
Align.0=R
CalloutMax.0=(323,82),(430,105)

[CTRL33554948]
Type=0x2000204
UsagePage=0x9
Usage=0x3
Name=BUTTON 3
Linedata.0=(13,84),(121,84),(178,78)
Align.0=L
CalloutMax.0=(0,74),(109,96)

[CTRL33556996]
Type=0x2000A04
UsagePage=0x9
Usage=0xB
Name=BUTTON 11
Align.0=R
CallOutMax.0=(322,111),(429,139)
LineData.0=(420,124),(307,124),(242,95)

[CTRL16]
Type=0x10
UsagePage=0x1
Usage=0x39
Name=POINTOFVIEWHAT
Linedata.0=(414,182),(315,182),(221,104)
Align.0=R
CalloutMax.0=(323,171),(430,194)

[CTRL33555204]
Type=0x2000304
UsagePage=0x9
Usage=0x4
Name=BUTTON 4
Linedata.0=(420,39),(307,39),(238,59)
Align.0=R
CalloutMax.0=(319,30),(430,51)

[CTRL33555460]
Type=0x2000404
UsagePage=0x9
Usage=0x5
Name=BUTTON 5
Linedata.0=(13,54),(121,54),(174,68)
Align.0=L
CalloutMax.0=(0,43),(110,65)

[CTRL33555716]
Type=0x2000504
UsagePage=0x9
Usage=0x6
Name=BUTTON 6
Linedata.0=(9,156),(118,156),(182,91)
Align.0=L
CalloutMax.0=(0,145),(110,169)

[CTRL33555972]
Type=0x2000604
UsagePage=0x9
Usage=0x7
Name=BUTTON 7
Linedata.0=(419,69),(238,69)
Align.0=R
CalloutMax.0=(320,59),(430,82)

[CTRL33556228]
Type=0x2000704
UsagePage=0x9
Usage=0x8
Name=BUTTON 8
Linedata.0=(416,9),(305,9),(244,47)
Align.0=R
CalloutMax.0=(317,0),(430,22)

[CTRL33556484]
Type=0x2000804
UsagePage=0x9
Usage=0x9
Name=BUTTON 9
Linedata.0=(57,246),(148,246),(219,150)
Align.0=L
CalloutMax.0=(0,235),(111,258)

[CTRL33557252]
Type=0x2000B04
UsagePage=0x9
Usage=0xC
Name=BUTTON 12
Align.0=R
CallOutMax.0=(322,142),(429,168)
LineData.0=(417,156),(308,156),(243,106)

[CTRL33556740]
Type=0x2000904
UsagePage=0x9
Usage=0xA
Name=BUTTON 10
Align.0=L
CallOutMax.0=(0,108),(108,133)
LineData.0=(8,120),(120,120),(127,112)

[VID_061C&PID_C094.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.3]
MapExists=1

[VID_061C&PID_C094.Genre.3]
MapExists=1
CTRL16777218=0x1
CTRL16777730=0x3
CTRL33554436=0x1
CTRL33554692=0x2
CTRL33554948=0x3
CTRL33556996=0xFD
CTRL16=0x1
CTRL16777474=0x5
CTRL33555204=0x4
CTRL33555460=0x5
CTRL33555716=0x6
CTRL33555972=0x7
CTRL33556228=0xE0
CTRL33556484=0xE8
CTRL33557252=0xFE
CTRL33556740=0xFC

[VID_061C&PID_C094.Application.{FD4ACE13-7044-4204-8B15-095286B12EAD}.Genre.1]
MapExists=1

[VID_061C&PID_C094.Genre.1]
MapExists=1
CTRL16777218=0x1
CTRL16777730=0x2
CTRL16777474=0x3
CTRL33554436=0x1
CTRL33554692=0x2
CTRL33554948=0x3
CTRL33556996=0xFD
CTRL16=0x1
CTRL33555204=0x4
CTRL33555460=0x5
CTRL33555716=0x6
CTRL33555972=0x7
CTRL33556228=0x8
CTRL33556484=0x9
CTRL33557252=0xFE
CTRL33556740=0xFC
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dmusic\dmscript\notes.txt ===
Consider
	Abandon using IActiveScriptParse in favor of IPersist* (doesn't appear to be an options for VBS).
	Do we really need protection from multithreaded access?  Am I doing it right?
	Am I defining/returning proper errors?  What about the facility of errors from WinError.h that I return?
	In IDirectMusicScript, etc. pass variants by ref (pointer) instead of value for efficiency?
	If a null performance or loader is passed to IDirectMusicScript::Init then just create and initialize one.
	Should scripts be able to do all the initialization things traditionally done to prepare for playing?
	How do we handle CloseDown?  Must be called by engine?
	Handle error hr's from calling DirectMusic objects better.  Objects set rich error info that we save in exception?
	Multiply times by somthing like 1000 due to lost capacity.  Similar to VB OM.
	Any way to turn off library functions such as Stop?
	Use properties.  "MasterVolume = 100" instead of "SetMasterVolume(100)".

Automation model
	We don't support type info.
	We don't support named parameters.
	We don't pass parameters by reference.

International
	We have no support for scripts with international character sets or locale-dependant programming languages.  In fact, we hard code English so that we assure consistent playback of scripts no matter whether they are running on English or on foreign-language OS's.
	The script source is read from disk with the ANSI code page.
	The script is interpreted/executed with respect to the US English locale.

Scripting Engines
	The scripting engine must support the IActiveScriptParse interface.
	The scripting engine must change to the Started state immediately -- it cannot return OLESCRIPT_S_PENDING from SetScriptState.

Restrictions for simplicity of script API / DirectMusicScript implementation
	Routines take no parameters and don't return values (use global variables instead)

VBS
	No constant for OLESCRIPT_S_PENDING.
	IActiveScript::Close docs inconsistent about return if already closed.

Script Event Track
	Mutes have no effect on whether script events fire.

Implementing new IDispatch object
	New aut*.h from autperformance.h
		Replace CAutDirectMusicPerformance with CAutDirectMusic*
		Replace BaseImpPerf with BaseImp*
		Replace IDirectMusicPerformance with IDirectMusic*
		Replace automation methods (Delete GetIDs/Invoke overrides, delete or replace helpers)
	New aut*.cpp from autperformance.cpp
		#include "autperformance.h" -> "aut*.h", remove unnecessary includes
		Replace BaseImpPerf with BaseImp*
		Replace CAutDirectMusicPerformance with CAutDirectMusic*
		Change ms_wszClassName to the name of your object instead of "Performance"
		Replace method info
		Replace P in DMPDISP_* IDs with your own letter or couple of letters (DMLDISP_* for loader)
		Delete from private functions section onward
		Implement automation methods
	COM hookup
		define new guid in dmscriptautguids.h
		dll.cpp: #include "aut*.h", define g_szDMScript*FriendlyName etc
		dll.cpp: DllGetClassObject, DLLUnregisterServer, DLLRegisterServer

Adding aggregated IDispatch to main objects
	place #include "dmscriptautguids.h" in initguid file and in object .cpp file
	Add IUnknown pointer for controlling unknown to object decl, init to NULL in constructor
	Add IID_IDispatch to query interface
		See an example such as performance.
		Be sure it returns NULL if it fails. (Change structure of if to clear *ppv at top and return E_NOTIMPL if still null instead of else.)
		Be sure to change performance type/GUID.
	Release on destruction, protect destruction with artificially increased ref count (read release and destruction code to make sure this works right with the object)
	Simple test
		Place breakpoint in a method and run into it
		Place breakpoint in real object's destructor and quit
		Step into release of Aut object to ensure it is destroyed as well

Making a new track
	Add new CLSID to dmusici.h
	Create header from track.h
		Replace CDirectMusicScriptTrack
		Change EventInfo to contain the appropriate stuff
	Create source from track.cpp
		Replace CDirectMusicScriptTrack
		Eliminate or modify begin a tool and posting back to self
			IDirectMusicTool interface
			DMUS_PMSG_ScriptTrack structure
		Load ...
			Make new error to replace DMUS_E_INVALID_SCRIPTTRACK.
		InitPlay ...
		EndPlay ...
		Clone
	COM goo (ugh!)
		Duplicate class factory in dmprfdll.cpp and dmprfdll.h.  Change new statement if necessary.
		#include track header in dmprfdll.cpp
		Add case to DllGetClassObject
		Add case to DllUnregisterServer and DllRegisterServer

Segment trigger track
	SetParam (such as GUID_Download) with index 0 won't work.  Only goes to band or trigger track
	but not both.  Must use DMUS_SEG_ALLTRACKS with trigger track.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dmusic\dmsynth\ddkreadme.txt ===
The ddksynth sample in the DDK is created from the live sources in dmsynth.
The sample is generated by removing text between the special BEGIN and END
@@DDKSPLIT tags (such as this paragraph).

This can get a bit cryptic when one line must be used in the real dmsynth code
and a different line must appear in the sample ddksynth code.  Example from umsynth.cpp:
    // @@BEGIN_DDKSPLIT -- This section will be removed in the DDK sample.
        pCaps->guidPort = CLSID_DirectMusicSynth;
    #if 0 // The following section will only take affect in the DDK sample.
    // @@END_DDKSPLIT
        pCaps->guidPort = CLSID_DDKSynth;
    // @@BEGIN_DDKSPLIT -- This section will be removed in the DDK sample.
    #endif
    // @@END_DDKSPLIT

In this example, just the line with CLSID_DDKSynth will appear in the ddksynth
sample.  In the real dmsynth code, CLSID_DDKSynth is surrounded by an #if 0 conditional so it
has no effect.  Thus only CLSID_DirectMusicSynth takes effect in the real code.

The point here is to ship real functioning code for a synthesizer in the DDK, but to replace
its name and CLSID and also to strip out any Microsoft proprietary or licensed technology.  For
example, we can't ship our reverb capability in the DDK since it is licensed from another company.

You can build the cab containing this sample by running "genddkcab dmusiccab.ini" from the
\nt\private\ddk\cabs directory.  See http://devkits/ddk for more information about the DDK.

There are two files that are used only for the DDK sample:
ddksynth.htm:  A descriptive overview that will appear in the DDK sample.
ddksources:    The sources file that will be used in the DDK sample.
               (It would have been too difficult to generate it from the dmsynth sources.inc file.
                Please keep these two files in sync.)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dmusic\dmusic32\i386\readme.txt ===
This file forces existence of the i386 directory
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dplay\tools\dp8sim\dp8sim_interface.txt ===
IDP8SimControl interface
---------------------------------------------------------------------------

Currently, the IDP8SimControl interface is for internal purposes only.  It
does not perform proper error checking.  Here is preliminary documentation
on the supported functions.




IDP8SimControl::Initialize

Initializes the DP8Sim Control interface.

Parameters
DWORD dwFlags	- Unused, must be 0.




IDP8SimControl::Close

Closes the DP8Sim Control interface.

Parameters
DWORD dwFlags	- Unused, must be 0.




IDP8SimControl::EnableControlForSP

Inserts the DP8Sim Control shim in front of the SP with the given GUID.

Parameters
GUID * pguidSP			- Pointer to GUID of SP to intercept.
WCHAR * wszNewFriendlyName	- New friendly name for intercepted SP.
DWORD dwFlags			- Unused, must be zero.




IDP8SimControl::DisableControlForSP

Removes the DP8Sim Control shim from the SP with the given GUID.

Parameters
GUID * pguidSP	- Pointer to GUID of SP that should no longer be
		intercepted.
DWORD dwFlags	- Unused, must be zero.




IDP8SimControl::GetControlEnabledForSP

Determines whether the DP8Sim Control shim is enabled for the SP with the
given GUID or not.  TRUE is returned in pfEnabled if so, FALSE if not.

Parameters
GUID * pguidSP		- Pointer to GUID of SP that should be checked.
BOOL * pfEnabled	- Place to store boolean indicating status.
DWORD dwFlags		- Unused, must be zero.




IDP8SimControl::GetAllParameters

Retrieves all of the current DP8Sim settings.

Parameters
DP8SIM_PARAMETERS * pdp8spSend		- Place to store current send
					parameters.
DP8SIM_PARAMETERS * pdp8spReceive	- Place to store current receive
					parameters.
DWORD dwFlags				- Unused, must be zero.




IDP8SimControl::SetAllParameters

Modifies the current DP8Sim settings.

Parameters
DP8SIM_PARAMETERS * pdp8spSend		- Structure containing desired send
					parameters.
DP8SIM_PARAMETERS * pdp8spReceive	- Structure containing desired
					receive parameters.
DWORD dwFlags				- Unused, must be zero.




IDP8SimControl::GetAllStatistics

Retrieves all of the current DP8Sim statistics.

Parameters
DP8SIM_STATISTICS * pdp8ssSend		- Place to store current send
					statistics.
DP8SIM_STATISTICS * pdp8ssReceive	- Place to store current receive
					statistics.
DWORD dwFlags				- Unused, must be zero.




IDP8SimControl::ClearAllStatistics

Clears all of the current DP8Sim statistics.

Parameters
DWORD dwFlags	- Unused, must be zero.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dplay\tools\dp8sim\dp8sim_readme.txt ===
DP8SIM.DLL and DP8SIMUI.EXE
---------------------------------------------------------------------------

DP8Sim.dll is a simulated DirectPlay8 Service Provider that allows
DirectPlay applications to test their performance under various network
conditions, such as high latency and packet loss.  Although nothing matches
thorough testing under the real deployment environment, DP8Sim can help you
gain a feel for how your application will respond.

The related DP8SimUI.exe configuration utility presents a simple interface
for controlling DP8Sim.dll.


NOTE: DP8Sim is implemented on top of the existing TCP/IP Service Provider.
The settings are also applied on top of the existing network
characteristics.  Therefore it is intended to be used on a high-speed local
area network where normal latency and packet loss are negligible.





Installation
---------------------------------------------------------------------------
DP8Sim.dll and the configuration utility must reside in the same directory.
The first time you launch the utility, it will register the DP8Sim.dll COM
objects automatically.  Alternatively, you may manually register the DLL by
executing "regsvr32.exe dp8sim.dll".





Usage
---------------------------------------------------------------------------

The configuration utility will prompt you to enable the network simulator
for the DirectPlay8 TCP/IP Service Provider when it is launched.
Any existing DirectPlay sessions (those where the DirectPlay interface was
created prior to enabling DP8Sim) will not use the network simulator.


Once simulation is enabled, you will be presented with the list of network
options you can control.  There are also several pre-defined groups of
common settings for your convenience.


The options available are:

Send

* Bandwidth (in bytes/second) = The total available outbound bandwidth for
  all players, in bytes per second.  All packets have their latency
  increased in proportion to their size according to this value.  If the
  application sends more than this amount, later packets are queued behind
  earlier ones.  Use 0 for unlimited bandwidth (up to the real underlying
  network bandwidth).

* Drop percentage (0-100) = The random frequency for an individual
  outbound packet to be dropped, as a percentage.  Each packet stands this
  same chance of being dropped, regardless of other packets.  Note that
  this does not necessarily model the behavior of all networks.  Packet
  loss on the Internet, for example, tends to be bursty.  A value of 1
  means drop an average of 1 out of every 100 packets.  A value of 100
  means drop every packet.  Use 0 to not drop any packets (other than loss
  due to the real underlying network).

* Min latency (in ms) = The minimum delay for outbound packets, in
  milliseconds.  The actual delay for an individual packet is chosen
  randomly between this minimum value and the "Max latency (in ms)" value.
  Note that the delay is applied on top of any delay imposed by bandwidth
  limitations.  Use 0 to not have a lower bound for artificial latency
  (beyond the real underlying network).

* Max latency (in ms) = The maximum delay for outbound packets, in
  milliseconds.  The actual delay for an individual packet is chosen
  randomly between the "Min latency (in ms)" value and this maximum value.
  If this value is lower than "Min latency (in ms)", then it is
  automatically set to equal the minimum value.  Note that the delay is
  applied on top of any delay imposed by bandwidth limitations.  Use 0 to
  not have an upper bound for artificial latency (beyond the real
  underlying network).


Receive

* Bandwidth (in bytes/second) = The total available inbound bandwidth for
  all players, in bytes per second.  See the Send "Bandwidth (in
  bytes/second)" description.

* Drop percentage (0-100) = The random frequency for an individual inbound
  packet to be dropped, as a percentage.  See the Send "Drop percentage
  (0-100)" description.

* Min latency (in ms) = The minimum delay for inbound packets, in
  milliseconds.  See the Send "Min latency (in ms)" description.

* Max latency (in ms) = The maximum delay for inbound packets, in
  milliseconds.  See the Send "Max latency (in ms)" description.


NOTE: These parameters apply to in-game data.  Host enumeration queries and
responses are not subject to simulation.



Making modifications to the current settings enables the Apply and Revert
buttons.  Use Apply to cause the changes to take effect, and Revert to
restore the previous settings. 


At the bottom of the DP8SimUI window, the send and receive statistics for
all affected interfaces are displayed.  The Refresh button updates the
statistics, the Clear button resets all statistics to 0.



When you close the configuration utility it will ask if you want to disable
the network simulator.  Disabling the simulator will prevent future
DirectPlay sessions from being affected by DP8Sim, but any existing
sessions will continue to use the current network simulation settings.  If
you leave DP8Sim enabled, future DirectPlay sessions will use the current
settings, even while the configuration utility is not running.


While the simulator is enabled, the name reported by
IDirectPlay8Peer::EnumServiceProviders,
IDirectPlay8Client::EnumServiceProviders, and
IDirectPlay8Server::EnumServiceProviders for the TCP/IP service provider
will have "(Network Simulator)" appended.





Removal
---------------------------------------------------------------------------

DP8Sim.dll can be unregistered by executing "regsvr32.exe /u dp8sim.dll".
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dplay\tools\parsers\public\readme.txt ===
D P L A Y  v8    I P / I P X    P A R S E R S    F O R    N E T W O R K    M O N I T O R

                                    (C) 2000 Microsoft Corporation, All Rights Reserved

//////////////////
// INTRODUCTION //
//////////////////

This folder contains the 4 DPlay v8 Network Monitor parsers packaged in the dp8parse.dll.

These include: Service Provider, Transport, Session, and Voice layer parsers.


//////////////////
// INSTALLATION //
//////////////////

1. First you need to install NetMon (if you don't already have it). In case you have Windows 2000 Server, NetMon is already installed on your machine. For Windows Professional users, you will need to purchase Microsoft SMS (Systems Management Server) package. See NetMon's documentation for more details.

2. To install the parsers, copy DP8PARSER.DLL into \NetMon|Parsers or \NetMonFull\Parsers, depending on whether you have the light (Win2k Server) or the full (MS SMS) version. By default Netmon is installed under \WintNT\System32.

3. Start NetMon.

4. Set the adapter to capture from (Capture|Networks...|Local Computer). Be sure to choose the one with "Dial-up Connection" property as FALSE (that's your NIC card).

5. You are ready to start capturing! 

Note: if you want to be able to see the network traffic on the entire network segment (very useful for multiplayer games running on a single LAN), you must make sure to use a non-switched hub that broadcasts every packet it receives on the incoming ports to all of its outgoing ports. Otherwise, the machine you will be capturing on, will only see the packets it sends and receives.


///////////////
// CAPTURING //
///////////////

To start capturing, just hit the "Start Capture" (Play) button in the toolbar.

When you want to see what you've just captured, hit the "Stop and View Capture" (Stop with glasses) button and it will open the capture view. At that point you might see lots of traffic irrelevant to you (especially if there is a lot of broadcast going on, on your network segment). Hit the "Edit Display Filter" (Funnel) button, double click on "Protocol==Any", then click on "Disable All". Under "Disabled Protocols" double click on the DPLAYSESSION, DPLAYSP, DPLAYTRANSPORT, and DPLAYVOICE (they should now be the only ones listed under "Enabled Protocols". Hit OK, OK. 

Congratulations, you're looking at DPlay traffic you just captured! Easy, isn't it.

By default NetMon captures only 1 MB of the most recent traffic, so you'll want to increase the buffer size to at least 10-20MB. You can set the buffer size under "Capture|Buffer Settings...". NetMon doesn't know how to stream to a hard drive, so whatever buffer size you set is what you'll get out of the most recent traffic. In case you are interested in 24/7 stream-capturing capability, you can write your own capturer, by calling IDelaydC interface (see MSDN for more details) - NetMon uses this interface internally.


/////////////////
// MISCELLANEA //
/////////////////

The following is the graph protocol for DPlay v8:

|================|
|Session | Voice |
|================|
|   Transport    |
|================|
|Service Provider|
|================|

Note that whenever you filter by a lower-level protocol, you are automatically getting all the higher-level packets sitting on top of that protocol. Therefore filtering with DPLAYSP enabled will show all DPLAY* packets, even if you disable some of the other DPLAY* parsers. Therefore, useful filtering scenarios include filtering only session traffic (DPLAYSESSION), or only voice traffic (DPLAYVOICE). You could also filter out service provider traffic, which involve enumeration handhakings, by enabling DPLAYTRANSPORT and disabling DPLAYSP. Other than that, filtering is mostly useful for filtering out non-DPlay traffic.

Tip: By default [2302,2400]U{6073} port/socket range is used to filter IP/IPX packets for DPlay parsing. To have the parsers recognize user-defined port/socket ranges, add DWORD values MinUserPort and MaxUserPort to \HKCU\Software\Microsoft\DirectX\DirectPlay\Parsers registry key. This will extend the parsed range to: [2303,2400]U{6073}U[MinUserPort,MaxUserPort]. This is useful when your application is using non-standard port ranges.

Tip: You can apply a filter to the capturing process itself (as opposed to the capture view) to, say, capture only IP traffic. Even better, you can filter out all non-IP traffic and IP traffic that doesn't match a certain pattern defined by you. That way you can capture only IP packets with specific source and destination ports, thus isolating particular DPlay traffic. Note that this also applies to IPX capturing. See NetMon's documentation for more details on how to use this feature.

Note that Transport layer splits long messages into fragments. This makes it impossible for the parser to parse any non-initial part of the fragmented message. The first fragment is not guaranteed to be fully parsed either, since a field can be only partially inside a fragment. Transport parser does notify the upper protocol parsers about this, and both Session and Voice parsers do recognize this case, and notify the user accordingly.

Michael Milirud
Last updated: 23/Aug/2000
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dplay\tools\parsers\internal\readme.txt ===
D P L A Y  v8    P A R S E R S    F O R    N E T W O R K    M O N I T O R

							J u l y   1 7 ,   2 0 0 0

                                  M I C R O S O F T    C O R P O R A T I O N    C O N F I D E N T I A L


This folder contains the 4 DPlay v8 Network Monitor parsers packaged in the dp8parse.dll. 

Parsers include:

Name             | Contact
================================
Transport        | Evan Schrier
Service Provider | John Kane
Session          | Mike Narayan 
Voice            | Rod Toll


1). First install NetMon (you can find it here: http://netlab/netmon.htm)

2). To install the parsers copy the DLL into \NETMON\PARSERS (by default \WINNT\SYSTEM32\NETMON\PARSERS)

3). While browsing the capture, filter by the required protocol (e.g. filter by DPLAYTRANSPORT to get only the transport level traffic). 

4). By default [2302,2400]U{6073} port/socket range is used to filter UDP/IPX packets for DPlay parsing.
    To have the parsers recognizing user-defined port/socket ranges, add DWORD values MinUserPort and
    MaxUserPort to \HKCU\Software\Microsoft\DirectX\DirectPlay\Parsers registry key. This will extend
    the parsed range to: [2303,2400]U{6073}U[MinUserPort,MaxUserPort].

The following is the graph protocol for DPlay v8:


|================|
|Session | Voice |
|================|
|   Transport    |
|================|
|Service Provider|
|================|


Note that whenever you filter by a lower-level protocol, you are automatically getting all the higher-protocol packets sitting on top of that protocol. Therefore filtering with DPLAYSP enabled will show all DPLAY* packets, even if you disable some of the other DPLAY* parsers. Therefore, useful filtering scenarios include filtering only session traffic (DPLAYSESSION), or only voice traffic (DPLAYVOICE). You could also filter out service provider traffic, which involve enumeration handshakings, by enabling DPLAYTRANSPORT and disabling DPLAYSP. Other than that, filtering is mostly useful for filtering out non-DPlay traffic.


Tip: You can apply a filter to the capturing process itself (as opposed to the capture view) to, say, capture only IP traffic.
Even better, you can filter out all non-IP traffic and IP traffic that doesn't match a certain pattern defined by you. That way
you can capture only IP packets with specific source and destination ports, thus isolating particular DPlay traffic. Note that
this also applies to IPX capturing.

Note that Transport layer splits long messages into fragments. This makes it impossible for the parser to parse any non-initial part of the fragmented message. The first fragment is not guaranteed to be fully parsed either, since a field can be only partially inside a fragment. Transport parser does notify the upper protocol parsers about this, and both Session and Voice parsers do recognize this case, and notify the user accordingly.

See the public version of this file for me details. 

I'm looking forward to hearing suggestions on how to make this debugging tool easier to use by the end-users.
Send any comments you have to t-micmil.

Michael Milirud

(Last updated 23/Aug/2000)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dxdiag\notes.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft DxDiag Notes for PSS Title _PID_HLINKSDxDiag Notes for PSS Michael D. Anderson Normal.dot Michael D. Anderson Microsoft Word 9.0bjbjU DxDiag Notes for PSS By Mike Anderson July 21, 1998 Help Page Problems to look for: Weird, unofficial versions of OS may cause app problems Some apps may not work properly unless the language and regional setting are English Non-Intel processors may be the cause of app bugs or DirectX bugs If memory is less than 32MB, some games may have performance problems If page file has 0MB available, tell user to make room on HD or increase maximum page file size DirectX Files Page For a good DX6 install on Win98, Version should be 4.06.00.03xx (exact version not yet final) for everything, except: 4.86.00.03xx for ddrawex.dll and dxapi.sys, and 4.05.01.1998 for dsound and dinput files. Note that on NT, the version of DxDiag shipping with DX6 will report some files as missing.  This report is incorrect, so ignore its advice to reinstall DX. This page diagnoses the following problems: Missing files (solution: reinstall DX) Debug files (if user is not developing a DX product, reinstall DX and choose retail) Beta files (reinstall DX) Note: DxDiag used to warn about  obsolete  files (DX5-only files on a DX6 system).  This code was removed because of manbugs #16765. DirectX Drivers Page DxDiag searches \windows\system for a set of known driver files.  The list shown is not necessarily the complete list of all DX drivers installed on the system!  Drivers listed here are not necessarily in use, so problems reported may be harmless. This page diagnoses the following problems: Uncertified files: if the driver is in use and causing problems, get the latest driver from the manufacturer Debug files: ditto Beta files: ditto Display Page It is common for the  Chip type  and  DAC type  fields to be blank; this is not a problem. If the driver listed (under  Main Driver ) is uncertified, a message will appear in the  Notes  section.  The user should contact the display manufacturer for a new driver if he is experiencing problems with this device. Disabling DirectDraw and Direct3D acceleration may help work around driver problems.  Of course, the game s performance will suffer.  After disabling or enabling acceleration, you must close and reopen DxDiag for the change to take effect.  For example, if you disable 3d acceleration then immediately click  Test D3D , it will probably test hardware accelerated 3D as well as software 3D.  If you quit and restart DxDiag it should only test software. Testing DirectDraw runs the following steps: Find and load ddraw.dll Get a pointer to the DirectDrawCreate function in ddraw.dll Call DirectDrawCreate Call pdd->GetCaps Release the DirectDraw object If windowed tests are supported Call DirectDrawCreate (again) Run test #1: Set the cooperative level to normal Create a primary surface Get the primary surface description Do a sequence of colorfill blits to the primary surface Pause Clear the display Force a desktop repaint Release the DirectDraw object Ask user to verify appearance of rectangles Call DirectDrawCreate Run test #2: Set cooperative level to normal Create primary surface Get the primary surface description Create a 200x200 offscreen surface In a loop, colorfill the offscreen surface with black, then colorfill a small white square on the offscreen surface, then blit the offscreen surface to the primary surface Clear the primary surface Force a desktop repaint Release the DirectDraw object Ask user to verify appearance of bouncing box Call DirectDrawCreate Run test #3: Create a test window Set cooperative level to exclusive, fullscreen Set display mode to 640x480x16 Create primary surface with 1 attached back buffer Get the primary surface description Use GetAttachedSurface to get pointer to the back buffer In a loop, colorfill the offscreen surface with black, then colorfill a small white square on the offscreen surface, then flip the front/back buffers Clear the primary surface Set cooperative level back to normal Restore display mode Release the DirectDraw object Ask user to verify appearance of fullscreen bouncing box Free the DirectDraw DLL Testing D3D runs the following steps: Find and load ddraw.dll Get a pointer to the DirectDrawCreate function in ddraw.dll Call DirectDrawCreate Call pdd->GetCaps Release the DirectDraw object Call DirectDrawCreate Run the software D3D test: Create a test window Set cooperative level to exclusive, fullscreen Set the display mode to 640x480x16 Create primary surface with attached back buffer Get primary surface description Use GetAttachedSurface to get ptr to back buffer QueryInterface DD to get D3D interface Create the 3D device, passing the back buffer Create a viewport Add the viewport to the device Set the added viewport to be the current viewport Set the parameters for the viewport Create a light Set the parameters for the light Add the light to the viewport Set the world matrix to identity Set the view matrix to (0, 0, -5) Set up a reasonable projection matrix Create a black material Set the parameters for the black material Create a green material Set the parameters for the green material Create a red material Set the parameters for the red material Create a blue material Set the parameters for the blue material Get a handle to the black material Set the viewport s background material to be the black material handle Set the renderstate to enable dithering Set the ambient light state  Loop 200 times: Set the world matrix to a rotated transform Clear the viewport (target only, since there s no Z-buffer) Call BeginScene Get handle to green material Make it the current light state DrawIndexedPrimitive cube face 1 DrawIndexedPrimitive cube face 2 Get handle to red material Make it the current light state DrawIndexedPrimitive cube face 3 DrawIndexedPrimitive cube face 4 Get handle to blue material Make it the current light state DrawIndexedPrimitive cube face 5 DrawIndexedPrimitive cube face 6 Call EndScene Flip front/back buffers Release everything Set cooperative level back to normal Close the window Restore the display mode Release DirectDraw object Ask user to verify software rendering of cube If hardware is supported Call DirectDrawCreate Repeat above test using hardware device Release DirectDraw object Ask user to verify hardware rendering of cube Free the DirectDraw DLL Sound Page If the driver listed (under  Driver Name ) is uncertified, a message will appear in the  Notes  section.  The user should contact the display manufacturer for a new driver if he is experiencing problems with this device. The DirectSound Test runs the following steps: Find/Load dsound.dll Get a pointer to the DirectSoundCreate function in dsound.dll Call DirectSoundCreate Set the cooperative level to exclusive mode Call GetCaps Load wave resource from file Test DirectSound (2D, software): Create primary sound buffer Create secondary buffer If testing 3D, set buffer position to (-1, 1, 0) Play sound in several formats Release buffers Test DirectSound (3D, software) (same as above) Test DirectSound (2D, hardware) (same as above) Test DirectSound (3D, hardware) (same as above) Release DirectSound object Free dsound library Input Page If any driver is uncertified, beta, or debug, a comment appears in the Notes section.  Consider replacing such drivers if their devices are not working properly. Network Page The Network Test verifies that DirectPlay can successfully do the following: Initialize itself Enumerate available Service Providers (TCP/IP, etc) Create a session Enumerate sessions on a given machine or all machines on the network Join a session Send and receive messages in a session Still Stuck? Page Troubleshoot: This button attempts to run the Win98 Help DirectX Troubleshooter (\windows\help\mdirx.htm) MSInfo: This button attempts to run MSInfo, using the registry key at HKLM\Software\Microsoft\Shared Tools\MSInfo to find the path to it Override: This button sets the  ForceRefreshRage  value of the HKLM\Software\Microsoft\DirectDraw registry key. Report: This button lets you enter user and bug information, then submit your system info to   HYPERLINK mailto:dxfbugs@microsoft.com  dxfbugs@microsoft.com , just like DxBug did. Registry Checking Registry Checking is only performed when DX7 or later is installed In the tables below, a note of   means that the data may be a full path, and the leaf of the path must match the specified data. DDraw: Location Value Notes HKCR\DirectDraw DirectDraw Object HKCR\DirectDraw\CLSID {D7B70EE0-4340-11CF-B063-0020AFC2CD35} HKCR\CLSID\{D7B70EE0-4340-11CF-B063-0020AFC2CD35} DirectDraw Object HKCR\CLSID\{D7B70EE0-4340-11CF-B063-0020AFC2CD35}\InprocServer32 ddraw.dll HKCR\CLSID\{D7B70EE0-4340-11CF-B063-0020AFC2CD35}\InprocServer32 ThreadingModel HKCR\DirectDrawClipper DirectDraw Clipper Object HKCR\DirectDrawClipper\CLSID {593817A0-7DB3-11CF-A2DE-00AA00B93356} HKCR\CLSID\{593817A0-7DB3-11CF-A2DE-00AA00B93356} DirectDraw Clipper Object HKCR\CLSID\{593817A0-7DB3-11CF-A2DE-00AA00B93356}\InprocServer32 ddraw.dll HKCR\CLSID\{593817A0-7DB3-11CF-A2DE-00AA00B93356}\InprocServer32 ThreadingModel HKCR\CLSID\4FD2A832-86C8-11d0-8FCA-00C04FD9189D} DirectDrawEx Object Not checked on Win2000 HKCR\CLSID\4FD2A832-86C8-11d0-8FCA-00C04FD9189D}\InprocServer32 ddrawex.dll HKCR\CLSID\4FD2A832-86C8-11d0-8FCA-00C04FD9189D}\InprocServer32 ThreadingModel Location Value Notes HKLM\Software\Microsoft\Direct3D\Drivers\Direct3D HAL HKLM\Software\Microsoft\Direct3D\Drivers\Direct3D HAL Description HKLM\Software\Microsoft\Direct3D\Drivers\Direct3D HAL {0xe0, 0x3d, 0xe6, 0x84, 0xaa, 0x46, 0xcf, 0x11, 0x81, 0x6f, 0x00, 0x00, 0xc0, 0x20, 0x15, 0x6e} HKLM\Software\Microsoft\Direct3D\Drivers\Ramp Emulation HKLM\Software\Microsoft\Direct3D\Drivers\Ramp Emulation Description HKLM\Software\Microsoft\Direct3D\Drivers\Ramp Emulation {0x20, 0x6b, 0x08, 0xf2, 0x9f, 0x25, 0xcf, 0x11, 0xa3, 0x1a, 0x00, 0xaa, 0x00, 0xb9, 0x33, 0x56} HKLM\Software\Microsoft\Direct3D\Drivers\RGB Emulation HKLM\Software\Microsoft\Direct3D\Drivers\RGB Emulation Description HKLM\Software\Microsoft\Direct3D\Drivers\RGB Emulation {0x60, 0x5c, 0x66, 0xa4, 0x73, 0x26, 0xcf, 0x11, 0xa3, 0x1a, 0x00, 0xaa, 0x00, 0xb9, 0x33, 0x56} HKLM\ Software\Microsoft\Direct3D\DX6TextureEnumInclusionList\16 bit Bump DuDv 00080000 0 16 ff ff00 0 0 HKLM\Software\Microsoft\Direct3D\DX6TextureEnumInclusionList\16 bit BumpLum DuDv 000C0000 0 16 1f 3e0 fc00 0 HKLM\Software\Microsoft\Direct3D\DX6TextureEnumInclusionList\16 bit Luminance Alpha 00020001 0 16 ff 0 0 ff00 HKLM\Software\Microsoft\Direct3D\DX6TextureEnumInclusionList\24 bit BumpLum DuDv 000C0000 0 24 ff ff00 ff0000 0 HKLM\Software\Microsoft\Direct3D\DX6TextureEnumInclusionList\8 bit Luminance 00020000 0  8 ff 0 0 0 HKCR\Direct3DRM Direct3DRM Object HKCR\Direct3DRM\CLSID {4516EC41-8F20-11d0-9B6D-0000C0781BC3} HKCR\CLSID\{4516EC41-8F20-11d0-9B6D-0000C0781BC3} Direct3DRM Object HKCR\CLSID\{4516EC41-8F20-11d0-9B6D-0000C0781BC3}\InprocServer32 d3drm.dll HKCR\CLSID\{4516EC41-8F20-11d0-9B6D-0000C0781BC3}\InprocServer32 ThreadingModel HKCR\DirectXFile DirectXFileObject HKCR\DirectXFile\CLSID {4516EC43-8F20-11D0-9B6D-0000C0781BC3} HKCR\CLSID\{4516EC43-8F20-11D0-9B6D-0000C0781BC3} DirectXFile Object HKCR\CLSID\{4516EC43-8F20-11D0-9B6D-0000C0781BC3}\InprocServer32 d3dxof.dll HKCR\CLSID\{4516EC43-8F20-11D0-9B6D-0000C0781BC3}\InprocServer32 ThreadingModel DInput: Location Value Notes HKCR\CLSID\{25E609E0-B259-11CF-BFC7-444553540000} HKCR\ CLSID\{25E609E0-B259-11CF-BFC7-444553540000}\InProcServer32 dinput.dll HKCR\CLSID\{25E609E0-B259-11CF-BFC7-444553540000}\InProcServer32 ThreadingModel HKCR\CLSID\{25E609E1-B259-11CF-BFC7-444553540000} HKCR\CLSID\{25E609E1-B259-11CF-BFC7-444553540000}\InProcServer32 dinput.dll HKCR\CLSID\{25E609E1-B259-11CF-BFC7-444553540000}\InProcServer32 ThreadingModel HKCR\CLSID\{92187326-72B4-11d0-A1AC-0000F8026977} not on Win2k HKCR\CLSID\{92187326-72B4-11d0-A1AC-0000F8026977}\ProgID not on Win2k HKCR\CLSID\{92187326-72B4-11d0-A1AC-0000F8026977}\InProcHandler32 gchand.dll not on Win2k,Leaf HKCR\CLSID\{92187326-72B4-11d0-A1AC-0000F8026977}\InProcServer32 gcdef.dll not on Win2k, Leaf HKCR\CLSID\{92187326-72B4-11d0-A1AC-0000F8026977}\InprocServer32 ThreadingModel Apartment not on Win2k DMusic: There are a huge number of DMusic entries.  28 Classes are registered in the following format: Location Value Notes HKCR\Microsoft.<name> <name> HKCR\Microsoft.<name>\CLSID <guid> HKCR\Microsoft.<name>\CurVer Microsoft.<name>.1 HKCR\Microsoft.<name>.1 <name> HKCR\Microsoft.<name>.1\CLSID <guid> HKCR\CLSID\<guid> <name> HKCR\CLSID\<guid>\InprocServer32 <leaf> HKCR\CLSID\<guid>\InprocServer32 ThreadingModel Apartment HKCR\CLSID\<guid>\ProgID Microsoft.<name>.1 HKCR\CLSID\<guid>\VersionIndependentProgID Microsoft.<name> Here are the 28 classes: DirectMusicCollection {480FF4B0-28B2-11D1-BEF7-00C04FBF8FEF} dmusic.dll DirectMusic {636B9F10-0C7D-11D1-95B2-0020AFDC7421} dmusic.dll DirectMusicSection {3F037241-414E-11D1-A7CE-00A0C913F73C} dmstyle.dll DirectMusicSynth {58C2B4D0-46E7-11D1-89AC-00A0C9054129} dmsynth.dll DirectMusicBand {79BA9E00-B6EE-11D1-86BE-00C04FBF8FEF} dmband.dll DirectMusicSynthSink {AEC17CE3-A514-11D1-AFA6-00AA0024D8B6} dmsynth.dll DirectMusicPerformance {D2AC2881-B39B-11D1-8704-00600893B1BD} dmime.dll DirectMusicSegment {D2AC2882-B39B-11D1-8704-00600893B1BD} dmime.dll DirectMusicSegmentState {D2AC2883-B39B-11D1-8704-00600893B1BD} dmime.dll DirectMusicGraph {D2AC2884-B39B-11D1-8704-00600893B1BD} dmime.dll DirectMusicTempoTrack {D2AC2885-B39B-11D1-8704-00600893B1BD} dmime.dll DirectMusicSeqTrack {D2AC2886-B39B-11D1-8704-00600893B1BD} dmime.dll DirectMusicSysExTrack {D2AC2887-B39B-11D1-8704-00600893B1BD} dmime.dll DirectMusicTimeSigTrack {D2AC2888-B39B-11D1-8704-00600893B1BD} dmime.dll DirectMusicStyle {D2AC288a-B39B-11D1-8704-00600893B1BD} dmstyle.dll DirectMusicChordTrack {D2AC288b-B39B-11D1-8704-00600893B1BD} dmstyle.dll DirectMusicCommandTrack {D2AC288c-B39B-11D1-8704-00600893B1BD} dmstyle.dll DirectMusicStyleTrack {D2AC288d-B39B-11D1-8704-00600893B1BD} dmstyle.dll DirectMusicMotifTrack {D2AC288e-B39B-11D1-8704-00600893B1BD} dmstyle.dll DirectMusicChordMap {D2AC288f-B39B-11D1-8704-00600893B1BD} dmcompos.dll DirectMusicComposer {D2AC2890-B39B-11D1-8704-00600893B1BD} dmcompos.dll DirectMusicLoader {D2AC2892-B39B-11D1-8704-00600893B1BD} dmloader.dll DirectMusicBandTrack {D2AC2894-B39B-11D1-8704-00600893B1BD} dmband.dll DirectMusicChordMapTrack {D2AC2896-B39B-11D1-8704-00600893B1BD} dmcompos.dll DirectMusicAuditionTrack {D2AC2897-B39B-11D1-8704-00600893B1BD} dmstyle.dll DirectMusicMuteTrack {D2AC2898-B39B-11D1-8704-00600893B1BD} dmstyle.dll DirectMusicTemplate {D30BCC65-60E8-11D1-A7CE-00A0C913F73C} dmcompos.dll DirectMusicSignPostTrack {F17E8672-C3B4-11D1-870B-00600893B1BD} dmcompos.dll DSound: Location Value Notes HKCR\DirectSound DirectSound Object HKCR\DirectSound\CLSID {47D4D946-62E8-11cf-93BC-444553540000} HKCR\CLSID\{47D4D946-62E8-11cf-93BC-444553540000} DirectSound Object HKCR\CLSID\{47D4D946-62E8-11cf-93BC-444553540000}\InprocServer32 dsound.dll HKCR\CLSID\{47D4D946-62E8-11cf-93BC-444553540000}\InprocServer32 ThreadingModel HKCR\DirectSoundCapture DirectSoundCapture Object HKCR\ DirectSoundCapture Object\CLSID {B0210780-89CD-11d0-AF08-00A0C925CD16} HKCR\CLSID\{B0210780-89CD-11d0-AF08-00A0C925CD16} DirectSoundCapture Object HKCR\CLSID\{B0210780-89CD-11d0-AF08-00A0C925CD16}\InprocServer32 dsound.dll HKCR\CLSID\{B0210780-89CD-11d0-AF08-00A0C925CD16}\InprocServer32 ThreadingModel
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dxg\readme.txt ===
DirectX Graphics Directory Structure
====================================

<root>
+---dxg
|   +---d3d              Legacy Direct3D DX6 and DX7 tree
|   |   +---dx6          Generates d3dim.dll (DX6)
|   |   +---dx7          Generates d3dim700.dll (DX7)
|   |   \---ref          Generates d3dref.dll (DX6/7)
|   +---d3d8             D3D8
|   |   +---fe           FrontEnd
|   |   +---fw           FrameWork
|   |   +---inc          D3D8 private headers
|   |   +---lib
|   |   +---link         Generates d3d800.dll
|   |   +---rast
|   |   +---shaders
|   |   +---tnl
|   |   \---util
|   +---d3dx             D3DX
|   +---dd               DDraw (DX1-7 support and win9x "kernel" for DX8+)
|   |   +---ddraw        DDraw DX1-7 and win9x kernel (daytona if necessary)
|   |   |   +---blitlib
|   |   |   +---ddhel
|   |   |   +---ddhelp   Generates ddhelp.exe (win9x only)
|   |   |   +---ddraw    Generates ddraw.dll (daytona if necessary)
|   |   |   +---ddraw16  Generates ddraw16.dll (win9x only)
|   |   |   +---dxapi    Generates dxapi.sys (win9x only)
|   |   |   \---main
|   |   \---ddrawex      Generates ddrawex.dll (if necessary)
|   +---docs             DXG docs
|   +---genx             Generates global DXG public (and private?) headers
|   |                    - Equivalent to nt\private\genx\windows\inc
|   |                    - No other directory should reference these files
|   |                    - Generates files in nt\private\inc, nt\public\sdk\inc
|   +---inc              Some generated global DXG headers
|   +---misc             Maybe move this to stool\dxg\dd eventually
|   +---tests            DXG tests
|   \---tools            DXG tools (vddraw for win9x, etc.)
+---inc                  Some other global headers (for version and win9x)
\---public               Tools not in NT tree for building win9x binaries
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dxg\d3d\dx6\rast\readme.txt ===
**** directories *****

d3dif - D3D interface.  This contains the sources for the interface
between the D3D runtime and the rasterizers.

bin - Rasterizer-specific tools.  This holds the m4.exe needed to build
the numerous m4-ized C++ and asm source files.

inc - Rasterizer-private header files.

refrast - Reference rasterizer sources.  This is the core of the reference
rasterizer, holding all sources which are made public with the DDK.  The
reference rasterizer core is fully independent of any D3D or DDraw
internals, and is connected to the runtime via refif.cpp in the d3dif
directory.  The file inc\refrast.h is also part of the reference
rasterizer package.

setup - Primitive setup.  Contains C++ and x86 assembly for primitive
setup and edge walking.

spaninit - Span iterator management code.

cspan - C span iterators.  These are the span iterators used on non-MMX
(including alpha) machines.

cmmxspan, mmxemul - C span iterators which closely model the MMX versions
for development and debug purposes.  The mmxemul is a library which
emulates the MMX arithmetic functions.  This is a full set of span
iterators which exactly matches the set in mmxspan, and are used when the
???  device GUID is passed to device create.  These are for internal
debug/test only and are not used in the product (the associated GUID is
not in the public d3d.h).

mmxspan - MMX assembly span iterators.

mlspan - Monolithic span iterators.

rampmat - Ramp rasterizer material processing.  See rampmat/ramp.txt for
further explanation (the horror...).

rampspan - Ramp rasterizer span iterators.  C and x86 assembly.

d3drast - This directory is used only to build the d3drast.dll, which is a
library which contains only the rasterizers (accessed via the HAL provider
interface).  This is a test-only library and is not part of the product
build.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dxg\d3d\dx6\rast\codeconv.txt ===
Project Coding Conventions

***** Declarations, Naming and Hungarian

The following Hungarian conventions are used in the tree, as a minimum.
Other conventions may be added to these, but should not change the meaning of
any of these conventions.  If a variable does not start with Hungarian,
it should begin with a capital letter (Foo) to so indicate.  Otherwise,
the first letter after the Hungarian should be capitalized (pfnFoo).
These prefixes are ordered in the order of their precedence (So m_ is
before p is before fn, so you write m_pfnFoo).


Prefix  Meaning                 Why
-------------------------------------------------------------------------------
g_      Global                  Prefix of global variables.
m_      Member of Class         All methods of class will have these variables
                                always in scope.  They need to be different to
                                protect the namespace in methods.
p       Pointer                 Always helpful to know if variable is
                                pointer or pointer pointer (pp)
h       Handle                  Denotes a reference to memory that cannot be
                                directly interpreted as a pointer
b       Bool                    To distinguish TRUE/FALSE containing variable
                                from other integers
c       Count (signed integer)  To indicate that this integer contains a count
                                of something. Is signed so (--count < 0) tests
                                can be used.
f       Floating point (single) To indicate native floating point type.
d       Floating point (double)
fn      Function                Usually with pfn to indicate a pointer to a
                                function.
i       Signed integer          i and u are used to distinguish signed
                                and unsigned integers
o       Offset                  Used to flag memory offsets.  Useful in memory
                                structures in DSP and Chip simulations.
s       String                  s and sz distinguish between non-zero
                                terminated and zero terminated strings.
sz      Zero Terminated String
u       Unsigned integer


'p' should be used in conjunction with a base type tag for pointers to
simple types, so a pointer to an unsigned integer is 'pu' rather than
just 'p'.  Complex types do not have tags so pointers to structures or
objects will only have a 'p' prefix.

***** Differences From Other Hungarian Styles

Many kinds of Hungarian are used around the company, ranging from very
strict to very relaxed.  The Hungarian described here is fairly relaxed and
the following Hungarian conventions are not used:

There is no distinction between far and near pointers.  Pointers are
always 'p'; there is no 'lp'.

Arrays are not distinguished with a special prefix.
	int iFoo[7] instead of int aiFoo[7] or int rgiFoo[7].

Functions are not tagged for return type.
	int Foo() instead of int iFoo().

Variables holding flags are not specially distinguished.
	UINT32 uFlags instead of UINT32 grfFlags or UINT32 fFlags.

Classes and structs do not have tags.
	FooClass *pFoo instead of FooClass *pfcFoo.

Examples:
TCHAR g_szDllName[80];
PHANDLE phFile;
PD3DVERTEX pVtx;

C++ const's follow the Hungarian of their type.  #define's are all cap's.
Classes are mixed case starting with a capital.  Structures are all cap's, with
"tagNAME" used to name the structure, and "NAME" used to name the typedef:

typedef struct tagCHUNKELEM
{
    struct tagCHUNKELEM *pNext;
    EscNodeBase *pNode;
    EscMatrix *pMatrix;
} CHUNKELEM, *PCHUNKELEM;

Structure types should always have a P<struct> typedef associated with
them and P<type> should be used in favor of <type> *.

***** Standard Types

A set of standard types of known size has been defined.  These types
should be used for any data element that must be a particular size.

	typedef signed char         INT8;
	typedef short int           INT16;
	typedef long int            INT32;
	typedef __int64             INT64;
	typedef unsigned char       UINT8;
	typedef unsigned short int  UINT16;
	typedef unsigned long int   UINT32;
	typedef unsigned __int64    UINT64;
	typedef float               FLOAT;
	typedef double              DOUBLE;

If a data element does not require a particular size then the standard
INT and UINT types can be used.  FLOAT and DOUBLE are IEEE standard formats
and take 32 and 64 bits, respectively.

The standard Win32 TCHAR should be used for strings where the character
set can be ANSI or Unicode.  __TEXT() can be used to declare TCHAR
strings and the CRT file tchar.h has many standard routines #defined for
Unicode and ANSI builds.

***** Comments for Files, Functions and Code

Comments should use // instead of /* */ unless an in-line comment is
absolutely necessary.

All files must have a descriptive header comment which gives information
on the contents of the file and any other file-specific information.

C/C++ style:

//-----------------------------------------------------------------------------
//
// This file contains code dealing with foo and also bar.
//
// Copyright (C) Microsoft Corporation, 1997.
//
//-----------------------------------------------------------------------------

Assembly style is the same except with ; instead of //.

;------------------------------------------------------------------------------
;
; This file has optimized routines for foo.
;
; Copyright (C) Microsoft Corporation, 1997.
;
;------------------------------------------------------------------------------

All functions and methods must have a header comment giving an overview
of what the function does, what its inputs are and what its outputs are.

C/C++ style:

//-----------------------------------------------------------------------------
//
// CreateFoo
//
// Takes a bar and a baz and creates a foo from them.  If the foo is
// successfully created it is returned and the baz is updated to
// reflect the new count of foos using it.
//
//-----------------------------------------------------------------------------

Assembly style has ; instead of // and more information about exactly
how the code is entered and left.  If the function is declared with
arguments then no explicit documentation is necessary in the header, but
if arguments are passed in registers then the header should indicate
this.  Return values are assumed to be in eax unless otherwise specified.

;------------------------------------------------------------------------------
;
; CreateFoo
;
; Takes a bar and a baz and creates a foo from them.  If the foo is
; successfully created it is returned and the baz is updated to
; reflect the new count of foos using it.
;
; Expects bar in eax and baz in ebx.
; Destroys ecx and edx.
; 
;------------------------------------------------------------------------------

All code should have at least a simple comment for each basic block and
more comments as necessary.  Assembly code should be heavily commented
with notes on register and FP stack usage, unusual tricks, instruction
pairing issues, etc.

Classes should generally have a function-like comment describing the
reason for their existence and an overview of their interface.  Trivial
classes do not need a comment.  Structs generally need only a mention of
their use, although if they have complicated features or methods they
may need a class-like header.

***** Microsoft Internal

Any code or comments which are for internal use only are bracketed as 
follows.  The brackets and text are stripped for the file versions which 
are made public.

//@@BEGIN_MSINTERNAL
    microsoft-only stuff here
//@@END_MSINTERNAL

***** File Naming

We'll be using a mix of C and C++ so we need to distinguish files
that are C-compatible from those that are not.

Use .c for plain C files.
Use .h for plain C headers or headers which can be included safely in
plain C files.  This includes headers which have C++ constructs
protected by ifdef __cplusplus.  .h files that may be included in C++
code should have internal extern "C" blocks.
Use .cpp for C++ files.
Use .hpp for C++-only headers.

***** General Code Style

Lines should not exceed eighty columns.  This is much more pleasant for
those of us that do not use large windows.

Functions should be fewer than one hundred lines long unless structure
or performance requires a longer function.  In general functions should
be even shorter, with sub-functions created as necessary.

Any commented-out code must have an explanatory comment with it
describing why it is commented out but not removed entirely.

Global variables should be avoided unless absolutely necessary.

Use uSize members of structs that may need to be resized later with
backwards compatibility.  When using uSize make sure to validate sizes
everywhere to force callers to use it properly.

Headers should be protected with #ifndef <file> #define <file> #endif
blocks for inclusion safety.

***** C++ Usage Guidelines

C++ has a lot of things in it which can make code more difficult to read
or slower.  The following is a list of suggestions on things to
avoid.  These rules can be broken if necessary.

Avoid overloading operators.
Avoid default parameters.
Avoid multiple inheritance.
Avoid exceptions.  This means that constructors cannot fail since they
can't return anything.  If an object requires initialization that can
fail the constructor should put the object in an invalid state and a
method called Initialize should be used to fully create the object.
Avoid public data members.  Use accessor methods instead.
Avoid placing method bodies inline in class declarations.  Bodies of
inline methods should follow the class declaration in the header file.
Avoid naming conflicts with functions so that :: is not needed.

***** C/C++ Code Style

Indentation and spacing should be done entirely with spaces; no tabs
should be used.  One indentation level is four spaces.

Braces should be on separate lines and aligned with each other.  All
statements must be bracketed even if they are only a single line.

Case statements should align with the brackets of the switch.  break
statements in case statements should be indented once from the case.

Functions should be declared so that their name begins on the first
character of a line.  Return types, calling conventions and other
decorations should be on a preceeding line.  Arguments can immediately
follow the name.

Functions should always declare a return type and use (void) if they
have no arguments.

Complete Example:

foo.hpp:
//-----------------------------------------------------------------------------
//
// This file contains the declaration of the Foo class.
//
// Copyright (C) Microsoft Corporation, 1997.
//
//-----------------------------------------------------------------------------

#ifndef _FOO_HPP_
#define _FOO_HPP_

// Flags for the Foo class.
#define FOO_INVALID	0x00000001
#define FOO_MATCH	0x00000002

// Special numbers for checking.
#define FOO_RETURN_NEGONE	0xfefefefe
#define FOO_DO_NOTHING		0xefefefef

//-----------------------------------------------------------------------------
//
// class Foo
//
// The Foo class is responsible for keeping a buffer of things to check.
//
//-----------------------------------------------------------------------------

class Foo
{
public:
    Foo(void);
    BOOL Initialize(int cElts);
    ~Foo(void);

    int Check(int iCheck);
    inline UINT32 GetFlags(void);

private:
    INT m_cElts;
    INT m_cUsed;
    PINT m_piBuffer;
    UINT32 m_uFlags;
};

//-----------------------------------------------------------------------------
//
// Foo::GetFlags
//
// Accessor method for a Foo's flags.
//
//-----------------------------------------------------------------------------

inline UINT32
GetFlags(void)
{
    return m_uFlags;
}

#endif // _FOO_HPP_

foo.cpp:
//-----------------------------------------------------------------------------
//
// This file contains the implementation of the Foo class.
//
// Copyright (C) Microsoft Corporation, 1997.
//
//-----------------------------------------------------------------------------

#include "foo.hpp"

//-----------------------------------------------------------------------------
//
// Foo::Foo
//
// Initializes a Foo to an invalid state.
//
//-----------------------------------------------------------------------------

Foo::Foo(void)
{
    m_piBuffer = NULL;
    m_uFlags = FOO_INVALID;
    m_cElts = 0;
    m_cUsed = 0;
}

//-----------------------------------------------------------------------------
//
// Foo::Initialize
//
// Constructs a Foo.
//
//-----------------------------------------------------------------------------

BOOL
Foo::Initialize(int cElts)
{
    // Allocate a buffer.
    m_piBuffer = new int[cElts];
    if (m_piBuffer == NULL)
    {
        return FALSE;
    }

    m_cElts = cElts;
    m_uFlags = 0;

    return TRUE;
}

//-----------------------------------------------------------------------------
//
// Foo::~Foo
//
// Cleans up a Foo.
//
//-----------------------------------------------------------------------------

Foo::~Foo(void)
{
    delete m_piBuffer;
}

//-----------------------------------------------------------------------------
//
// Foo::Check
//
// Checks for the given number in the buffer.  If a match is found,
// return the index of the match.  If no match is found, add the number
// to the buffer and return its index.  If the buffer overflows, -1 is
// returned.
//
// If the number is one of the special numbers, return its special code.
//
//-----------------------------------------------------------------------------

int
Foo::Check(int iCheck)
{
    int i;

    // Check for initialization.
    if (m_uFlags & FOO_INVALID)
    {
        return -1;
    }

    // Check for a special number.
    switch(iCheck)
    {
    case FOO_RETURN_NEGONE:
        return -1;
    case FOO_DO_NOTHING:
        break;
    default:
        break;
    }

    // Look for an existing match.
    for (i = 0; i < m_cUsed; i++)
    {
        if (m_piBuffer[i] == iCheck)
        {
            m_uFlags |= FOO_MATCH;
            return i;
        }
    }

    // No match was found, so add the new number if there's space.
    if (m_cUsed == m_cElts)
    {
        return -1;
    }

    m_piBuffer[m_cUsed] = iCheck;
    return m_cUsed++;
}

***** Assembly Style

All assembly ops and registers should be in lower case.  Each line is
indented eight spaces from the left margin.  Assembler directives and
macros are always in uppercase.

Complete Example:

;------------------------------------------------------------------------------
;
; This file has optimized routines for foo.
;
; Copyright (C) Microsoft Corporation, 1997.
;
;------------------------------------------------------------------------------

.386p
.MODEL FLAT

.CODE

;------------------------------------------------------------------------------
;
; Foo
;
; Takes a pointer to a bar and returns the total bit count for it and its
; successor.
;
;------------------------------------------------------------------------------

Foo PROC PUBLIC,
        pBar:PBAR

        LOCAL cBits:DWORD

        ; Get bit count for current bar.
        mov ecx, pBar
        mov eax, [ecx+BAR_cBits]
        mov cBits, eax

        ; Get successor bar in ecx.
        push ecx
        call UpdateBar
        mov ecx, eax

        ; Sum bit counts for return.
        mov eax, cBits
        add eax, [ecx+BAR_cBits]
        ret
Foo ENDP

END

***** Asserts, Debug Output and Other Debugging Aids

Assert checks should be placed where appropriate.  These should be used 
where unexpected but still possible bad things can happen.

Note that parameter validation will occur in the D3D runtime, so checking 
of state and items like vertex type is not necessary.
                                                     
We will use the new DX DPF support defined in newdpf.h.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dxg\d3d\dx6\rast\mmxspan\monolith.txt ===
This is a brief description of what is in the ml*.mas MMX monolithic
routines.  All monolithics handle both Gouraud and Flat shading (although
Flat shading is no faster).

16 bit Z Buffer (Less Than or equal) 565 color output mode, 565 texture input
1. No Texture
2. Non Perspective Texturing Point
3. Perspective Texturing Point
4. Perspective Texturing Bilinear
5. Non Perspective Texturing Point Modulate
6. Perspective Texturing Point Modulate
7. Perspective Texturing Bilinear Modulate

No Z Buffer 565 color output mode, 565 texture input
8. No Texture
9. Non Perspective Texturing Point
10. Perspective Texturing Point
11. Perspective Texturing Bilinear
12. Non Perspective Texturing Point Modulate
13. Perspective Texturing Point Modulate
14. Perspective Texturing Bilinear Modulate

16 bit Z Buffer (Less Than or equal) 32 bit color output mode,  32 bit texture
input
15. No Texture
16. Non Perspective Texturing Point
17. Perspective Texturing Point
18. Perspective Texturing Bilinear
19. Non Perspective Texturing Point Modulate
20. Perspective Texturing Point Modulate
21. Perspective Texturing Bilinear Modulate

No Z Buffer 32 bit color mode,  32 bit texture input
22. No Texture
23. Non Perspective Texturing Point
24. Perspective Texturing Point
25. Perspective Texturing Bilinear
26. Non Perspective Texturing Point Modulate
27. Perspective Texturing Point Modulate
28. Perspective Texturing Bilinear Modulate
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dxg\d3d\dx6\rast\mmxspan\readme.txt ===
Status of general MMX span routines.

09/08/97 Checked in MMX code.
  There is no way that the current code will compile and run.  I haven't
  even tried to compile it. This is primarily to have it backed up and
  to let anyone that is interested see what has been done.
  The orginal C (or MCP) code are comments of these ASM or MAS files.

  The ACP directory contains a program that generates the .INC file
  for offsets to all the data.  This program was used by Drew and
  seems to work better than H2INC.  We should probably only have one
  of these that would go in the inc directory, but it's not done that
  way now (Plus, my code doesn't generate it based on a makefile.

  Three regular registers have been set aside for use to access the data.
  Since these are passed to every routine, I don't have to pass anything
  on the stack as long as I don't modify them.  I have modified them a
  couple of times before I added this and they need to be changed to esi,
  edi, ebp or eax (eax is usually used for the next indirect jump).

  ebx is a pointer to the D3DI_SPANITER data (Also Accesses the SI stuff
    inside it).
  ecx is a pointer to the D3DI_RASTPRIM data.
  edx is a pointer to tge D3DI_RASTSPAN data.

  There are a few very useful m4 macros to acess this data in
  readable way (It also made converting C code easier):

define(`XpCtxSI',`[ebx+D3DI_SPANITER_$1]')dnl
define(`XpCtx',`[ebx+D3DI_RASTCTX_$1]')dnl
define(`XpP', `[ecx+D3DI_RASTPRIM_$1]')dnl
define(`XpS', `[edx+D3DI_RASTSPAN_$1]')dnl

  Things that need to be done.
    1) New Special W divide.   MMX newton's method code has already
        been written, but it was very specialized (I negated the
        OoW and OoWDX so that 2 - Oow*iW could be done with a pmadd
        and a few other things.)  Code shouldn't have to change much.

    2) Assembly equivalents to the ACMP, ZCMP macros.  A version of
        these has also been written, but most compares were done in
        a reverse order (to preserve registers).  The MMX Alpha and
        Z setup will most likely have to be different.  This means
        that the atest.asm has not been coded.  A test.mas file is
        written, and is missing ZCMP16 and ZCMP32.  The other 4
        specific code cases are done exactly like the C version
        except the iXorMask always seems to be inverted do to how
        the comparison is done.

    3) BufWrite is not implemented.  The code for doing this has
        been done in APP notes.  The 16 bit cases use a pmaddw
        to combine the colors more quickly than shifting.  There
        is also work beening done on a quick dithering routine.
        The MMX dithering routine will use a pcmpgtw to compare
        with the dither table and the do a psubssw since if the
        color value is to be incremented, then the mask will be
        all ones (= -1). Subtracting it will increment the color.
        The saturation is used to not increase too much.  The
        only problem to this is that the color is unsigned so
        it has to be shifted down by one to saturate to 7fff.

    4) BuffRead is not done.  It uses almost identical routines
        as those in texread.


    5) Lots of clean up and 64 bit constants that need to be in
        memory.  I have to figure out what registers get passed
        to routines that are called and what is passed back.
        In some cases, it may be possible to pass data from one
        bead to the next using registers.  This maybe difficult
        though.

    6) ColorBld conversion.  Mostly ROP stuff and calling of
        bldfuncs.asm.  ROP stuff should be pretty easy.

    7) Since function names are the same, if I made a header
        file declaring them extern "C" { },  the assembly code
        could concievably execute in place of the current c code.
        This is where the true bomb test is.

    8) There's probably more, but there is always more.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dxg\d3d\dx6\rast\rampmat\ramp.txt ===
"Ramp is hell," says Gen. William Tecumseh Sherman, now 60, in an address to
a Columbus, Ohio, reunion of the G.A.R. (Grand Army of the Republic). "There is
many a boy here who looks on ramp as all speed, but, boys, it is all hell. You
can bear this warning voice to generations yet to come."
(Quote from 1880 in reference to the U.S. Civil Ramp)

Introduction
============

First, some philosophy and intent.  Ramp is provided in DX6 for compatibility
with DX5, and our implementation is intended to work as well but no better than
ramp did in DX5.  We make no attempt to clean up or generalize ramp, and we
hope to maintain the same quirks the original implementation had, largely
through the literal reuse of DX5 code, where possible.

That said, it is useful to know where the ramp files in DX6 came from in DX5 so
the code can be examined in its original context when questions arise.   The
diesel\direct3d\rast\rampmat (Ramp Material) directory handles creating
rampmap's and palettes from materials and textures.  The
diesel\direct3d\rast\rampspan directory has the span rasterizers for ramp.

DX6                             DX5
diesel\direct3d\rast\rampmat\   diesel\direct3d\drivers\
cmap.h  . . . . . . . . . . . . include\cmap.h
colall.h  . . . . . . . . . . . include\colall.h
indcmap.cpp . . . . . . . . . . gen\indcmap.c
indcmap.h . . . . . . . . . . . include\indcmap.h
palette.cpp . . . . . . . . . . gen\palette.c
palette.h . . . . . . . . . . . include\palette.h
pch.cpp . . . . . . . . . . . . new, for faster compiles
rampif.h  . . . . . . . . . . . new, interface to d3dif
rampmap.cpp . . . . . . . . . . gen\rampmap.c
rampmap.h . . . . . . . . . . . include\rampmap.h
rampmat.cpp . . . . . . . . . . ramp\ramplt.cpp
rampmat.hpp . . . . . . . . . . ramp\ramplti.h
rampmisc.h  . . . . . . . . . . new, odds and ends
rgbmap.cpp  . . . . . . . . . . gen\rgbmap.c
rgbmap.h  . . . . . . . . . . . include\rgbmap.h

diesel\direct3d\rast\rampspan\  diesel\direct3d\drivers\
rrampgen.cpp  . . . . . . . . . ramp\rampgen.c
Other files in rampspan directory based on general beaded span code.

Ramp rasterization is pretty straight forward.  We just do what the DX5 code
did, within the new span rasterization architecture.  Therefore, the rest of
this document will describe the ramp material code.

Exported API's to d3dif
=======================

These are all declared in rampif.h and implemented in rampmat.cpp.  For
convenience, the in file documentation is gathered together here.

//-----------------------------------------------------------------------------
//
// RLDDIRampCreate
//
// Creates the original RLDDIRampLightingDriver with associated lists.  The
// pointer returned is kept in pCtx->pRampDrv.
//
//-----------------------------------------------------------------------------
RLDDIRampLightingDriver* RLDDIRampCreate(PD3DI_RASTCTX pCtx);

//-----------------------------------------------------------------------------
//
// RLDDIRampDestroy
//
// Destroys a RLDDIRampLightingDriver with all associated objects and memory.
// The pCtx->pRampDrv pointer should be set to NULL after this occurs.
//
//-----------------------------------------------------------------------------
void RLDDIRampDestroy(RLDDIRampLightingDriver* drv);

//-----------------------------------------------------------------------------
//
// RLDDIRampBeginSceneHook
//
// Called at clear time to advance material ages and process deferred color
// setting.  Also deletes orphaned IntMaterials.
//
//-----------------------------------------------------------------------------
void RLDDIRampBeginSceneHook(RLDDIRampLightingDriver* driver);

//-----------------------------------------------------------------------------
//
// RLDDIRampEndSceneHook
//
// Called at update time to reclaim unused color resources and reclaim
// memory for old IntMaterials.
//
// The age1 list will contain materials which were active last frame
// and have not been used since the last Clear.
// We remove their colour resources.
//
// The agemax list will contain inactive materials which have not
// been used for AGE_MAX-1 frames.  These are obsolete and we reclaim
// their memory.
//
// NOT CALLING THIS CONSTITUTES A MEMORY LEAK.
//
//-----------------------------------------------------------------------------
void RLDDIRampEndSceneHook(RLDDIRampLightingDriver* driver);

//-----------------------------------------------------------------------------
//
// RLDDIRampMaterialChanged
//
// Called when the contents of D3DMATERIAL we have already made a ExtMaterial
// for changes.
//
//-----------------------------------------------------------------------------
long RLDDIRampMaterialChanged(RLDDIRampLightingDriver* driver, D3DMATERIALHANDLE hMat);

//-----------------------------------------------------------------------------
//
// RLDDIRampSetMaterial
//
// Called when a D3DLIGHTSTATE_MATERIAL changes, which sets the
// driver->current_material.
//
//-----------------------------------------------------------------------------
long RLDDIRampSetMaterial(RLDDIRampLightingDriver* driver, D3DMATERIALHANDLE hMat);

//-----------------------------------------------------------------------------
//
// RLDDIRampCreateMaterial
//
// Called to create a new ExtMaterial for a given D3DFE_MATERIAL.
//
//-----------------------------------------------------------------------------
long RLDDIRampCreateMaterial(RLDDIRampLightingDriver* driver, D3DMATERIALHANDLE hMat, PD3DI_RASTCTX pCtx);

//-----------------------------------------------------------------------------
//
// RLDDIRampDestroyMaterial
//
// Called to delete a ExtMaterial and all associated underlying memory and rampmap
// allocations for a given D3DFE_MATERIAL.
//
//-----------------------------------------------------------------------------
long RLDDIRampDestroyMaterial(RLDDIRampLightingDriver* driver, D3DMATERIALHANDLE hMat);

//-----------------------------------------------------------------------------
//
// RLDDIRampMaterialToPixel
//
// Call to convert a previously created material to a color for use in clearing
// the color buffer, for example.
//
//-----------------------------------------------------------------------------
unsigned long RLDDIRampMaterialToPixel(RLDDIRampLightingDriver* driver,
D3DMATERIALHANDLE hMat);

//-----------------------------------------------------------------------------
//
// RLDDIRampUpdateDDPalette
//
// Called before the destination DirectDraw surface is displayed, to set its palette.
//
//-----------------------------------------------------------------------------
long RLDDIRampUpdateDDPalette(PD3DI_RASTCTX pCtx)

/*
 * Find what range of values lighting should take.  The base is the
 * pixel value (in fixed point) of the dark end of the material.  The
 * shift value is user to convert a 0.16 fixed point shade into the
 * range needed for the material. e.g.
 *
 *      pixel = base + (VALTOFX8(shade) << shift);
 *
 */
HRESULT ExtMaterial::FindLightingRange(unsigned long* base,
                                       unsigned long* size,
                                       BOOL* specular,
                                       unsigned long** texture_colors);

//-----------------------------------------------------------------------------
//
// RLDDIRampMakePaletteRGB8
//
// Call to set up the RGB8 palette and rampmap.  This is a palette of 216 (== 6**3)
// entries of 6 gradations each for r, g, b.  Using this palette requires
// multiplies by 6.
//
//-----------------------------------------------------------------------------
long RLDDIRampMakePaletteRGB8(RLDDIRampLightingDriver* driver);

Classes
=======

There are 3 primary classes that handle ramp materials.  All the classes make
significant use of the diesel\direct3d\d3dim\inc\lists.hpp linked list handling
macros.  See lists.hpp (especially the example code at the end) for details.

ExtMaterial (rampmat.hpp).
/*
 * An ExtMaterial is the underlying driver object for an LPDIRECT3DMATERIAL.
 * When used, it creates IntMaterials which are distinguished by different
 * ambient light, fog, D3DMATERIAL value etc.
 *
 * The ExtMaterials are kept on a list in the driver and if not explicitly
 * freed, they are cleaned up when the driver is destroyed.
 *
 * The IntMaterials can outlive the ExtMaterial in the case that the
 * ExtMaterial is destroyed right after use.  We add these orphans to a list
 * which is emptied at Clear time since after Clear, no pixels are visible
 * which were rendered with the IntMaterial and it can be freed.
 */

IntMaterial (rampmat.hpp).
/*
 * The IntMaterial is derived from an ExtMaterial taking into account the
 * driver state when the ExtMaterial was used.  Normally IntMaterials are
 * on a list in their owning ExtMaterial.  If the external material is
 * destroyed, any active internal materials which it owned are
 * transferred to an orphans list in the driver.  This is cleared out
 * next time Clear is called.
 *
 * The internal material has a list of underlying RampMaterials.  For
 * a non-textured material, there is exactly one and for a textured
 * material, there is one per color in the texture's palette.  The
 * ramp materials track color sharing between internal materials and
 * handle the details of allocating color resources.
 *
 * Internal materials are also chained onto one of a number of lists
 * based on their age.  The age of a material is the number of frames
 * since it was last used to render something.  When a material is
 * aged, it is rejuvenated by moving it to the age=0 list.  Each
 * frame, the lists are rotated by one notch and materials on the
 * oldest list are reclaimed.
 *
 * A material is either active or inactive.  Active materials have
 * color resources and are either on the age=0 list (active this
 * frame) or the age=1 list (active last frame).  When an inactive
 * material is used, it allocates color resources by attempting to
 * activate the underlying ramp materials.
 *
 * At the end of the frame, on Update, any active materials on the
 * age=1 list must be materials which were active last frame but were
 * not used this frame.  We remove their color resources by
 * deactivating the underlying ramp materials.
 */

RampMaterial (rampmat.hpp).
/*
 * RampMaterials are used by internal materials to represent ranges of
 * colors.  They perform low level color allocation by allocating
 * color ranges (RLDDIRamps) from a rampmap.
 *
 * A textured internal material can use many ramp materials.
 * Several internal materials can use the same ramp material if the
 * colors match.  This can happen easily if many textures use the same
 * palette.  The ramp material maintains a usage of how many internal
 * materials are using it and is freed when the last one stops.
 *
 * Ramp materials, like internal materials are either active or
 * inactive.  Active materials have color resources and inactive
 * materials do not.  A ramp material is made active when any of its
 * internal material users are active and inactive when none of then
 * are active.  To track this a count of how many active users is
 * maintained.
 *
 * When a material is made active, it attempts to allocate a color
 * range to use.  If that is successful, it sets the colors in the
 * range to an appropriate ramp of colors.  If is no more space in the
 * colormap for a new range, it finds the closes active ramp material
 * and shares its ramp.
 *
 * To track active materials and sharing materials, the driver has a
 * list of active materials and each material has a list of sharers.
 * The sharers list is only valid for materials which are both active
 * and which own their ramp.
 */

RLDDIColormap (cmap.h).  Common name cmap.  Holds pointer to a
RLDDIColorAllocator, and cmap->priv->map is the master 32K pixelmap.

RLDDIRamp (rampmap.h).  Common name ramp.  Is an element of a RLDDIRampmap
circular queue, and consists of a base (int), size (int), and free (int, BOOL
in meaning) elements.  It is used to allocate space in the master pixelmap.

RLDDIRampmap (rampmap.h).  Common name rampmap.  Holds circular queues of
RLDDIRamp objects on free and allocated lists.  It also holds a pointer back to
the cmap object.

RLDDIPalette (palette.h).  Common name pal.  Holds palette entries, a list of
free palette entries, and methods to allocate, set, and free colors.

A Day in the Life of a Ramp
===========================

At the beginning of time, RLDDIRampCreate (rampmat.cpp) is called.  This
creates and initializes a RLDDIRampLightingDriver with its embedded
RLDDISoftLightingDriver.  The structure is zeroed, then the lists and hash
table is initialized.  Then InitRampmap is called.  If the output surface is
PALETTE4 or PALETTE8, RLDDICreatePalette (palette.cpp) is used to create a 16
or 256 palette in driver->palette.  Otherwise, RLDDICreateRGBMap (rgbmap.cpp)
is called to create driver->rgbmap.  An rgbmap is just the masks and shifts
necessary to turn an arbitrary 24 bit RGB color into its nearest equivalent in
the output surface format.  Thus, rgbmap->alloc.allocate_color doesn't actually
allocate anything, it just returns the nearest output color to the input 24 bit
RGB color.

Once an RLDDIColorAllocator (refered to by alloc) is obtained, a
RLDDICreateIndirectColormap of static size 32K (the max possible, since color
indices in DX5 and DX6 code are 1.15.16) is created.  A RLDDIColormap called
cmap is created, and alloc is used to fill the entire 32K entries with black.

Then, RLDDIIndirectColormapGetMap is used to access the actual color map we
malloc'ed and filled with black (cmap->priv->map), and a pointer to this master
32K array of DWORDS is pointed to by driver->pixelmap and pCtx->pRampMap.
Thus, pCtx->pRampMap is used to do the final color dereference in the ramp
rasterizers.

Then, RLDDICreateRampmap (rampmap.cpp) is use to create a RLDDIRampmap
(called rampmap) and its initial RLDDIRamp (called ramp).

Then, we are finally finished with RLDDIRampCreate.

Next, we would expect to see 1 or more RLDDIRampCreateMaterial's.  I take this
opportunity to fill driver->fog_enable, fog_color with the current renderstate
values.  D3DIF keeps these, along with driver->driver.ambient (represents
D3DLIGHTSTATE_AMBIENT) up to date.  Then, we create a new ExtMaterial (extmat),
and add this material to the drivers->materials list. This list is currently
used for cleanup and material handle lookup.  We intend to get rid of the
material handle lookup by forming an association in the runtime.  We end by
initializing the ExtMaterial's copy of the D3DMATERIAL for this material with
extmat->SetMaterial.

The next thing that should happen is RLDDIRampSetMaterial should be called.
This is not what happens when a material changes, for that,
RLDDIRampMaterialChanged is called.  RLDDIRampSetMaterial sets the
driver->current_material for later activation, and is called when the
D3DLIGHTSTATE_MATERIAL is set.

Note that nothing much has really happened yet.  Next, setup (the rampspan
rasterizer, right now) innocently calls a RAMP_SERVICE_FIND_LIGHTINGRANGE
service to find what its ramp base, size, and texture ramp are.  This calls
driver->current_material->FindLightingRange, and causes the ramp to actually be
created.  First, ExtMaterial::FindIntMaterial  is called to find the internal
material that matches the external material's current characteristics.  If
there is no matching IntMaterial (initially there are no internal materials),
one is created.  Next we create an array of RampMaterial's.

If we are texture mapping, we create 1 RampMaterial* for every color in the
texture palette.  We also create an array of longs called "colors" that is the
same size as the texture palette, and will end up being pointed to by
pTex->pRampmap where it will be used as the final dereference in the ramp
rasterizer texture read functions.  Then, for each color in the texture
palette, a temporary material is created in which the current material's
ambient and diffuse factors are modulated by the texture palette color.  Note
that this implies that the one and only supported texture function for ramp is
modulate, unless the user asks for D3DTBLEND_COPY (I assume we will support
this with another bead, at some point).  Then RampMaterial::Find is called to
find or create a matching RampMaterial*.  Here is where a hash comes in.
RampMaterial's are hashed based on material diffuse color for fast lookup.  If
a perfectly matching RampMaterial is found, it is used, otherwise, a new
RampMaterial with the given D3DMATERIAL is created.  At this point the array of
RampMaterial's is just acting like an array of D3DMATERIAL's with hash values.
Now we are done with the construction of IntMaterial, and IntMaterial has all
the RampMaterial's it needs to create all the pixelmaps, rampmaps, etc. we will
need to actually draw a picture.

The non-texture mapped case is the same as above, except only one RampMaterial
is created (for the current one and only D3DMATERIAL associated with this
RampMaterial).

Next, in ExtMaterial::FindLightingRange, after an IntMaterial has been found or
created, IntMaterial::FindLightingRange is called.  The first thing IntMaterial
does is see if it is active.  If it is, Active() need only update the age lists
so it stays active.  Otherwise, as will happen the first time through, we must
activate the material.

Now RampMaterial::Activate is called for each individual RampMaterial.  This
calls RampMaterial::AllocateColors.  This calls RLDDIRampmapAllocate with the
driver->rampmap to allocate some space in the global pixelmap with a new or
used (but free) RLDDIRamp.  Remember, RLDDIRamp's in RLDDIRampmap's are just
for bookkeeping, they don't really store anything.  Then we call
RampMaterial::SetColors which calls RampMaterial::SetColorsFog or
RampMaterial::SetColorsStd.  This finally calls cmap->set_color which sets the
appropriate entry in the global pixelmap (that we allocated with the
RLDDIRampmap) with the alloc function discussed above.  For non-palletized
output surfaces, this just makes an output color given 24 bits of r, g, and b
and the surface's color masks.  For palletized output surfaces, this calls
RLDDIPaletteAllocateColor in palette.c, which uses the following basic
algorithm.

If an exact match to the desired color already exists in the surfaces palette,
cool, return it.  Otherwise, if there are unused palette entries in the
surface, make one that matches perfectly.  Otherwise, find the closest matching
color in the palette (uses dr*dr + dg*dg + db*db where dr = r - palette->r as a
metric) and return that.

It is probably worth mentioning here that only a shadow copy of the surfaces
palette, driver->ddpalette is updated by the palette.cpp SetColor function.
The palette gets updated in the direct draw output surface by
RLDDIUpdateDDPalette.

To delete a material, RLDDIRampDestroyMaterial is called.  First, the
ExtMaterial destructor is called.  If an IntMaterial associated with the
ExtMaterial is still active, the IntMaterial is placed on the driver->orphans
list.  Orphans are cleaned up when RLDDIRampBeginSceneHook is called, or when
RLDDIRampDestroy is called to destroy the whole RLDDIRampLightingDriver.

Stuff We Do Different (from DX5)
================================

The initialization code in InitRampmap (rampmat.cpp) is all of private
interpretation, mostly from the DX5 source drivers\win32\ddraw.c.  This code
could not be literally stolen, since it brings in a whole bunch of undesirable
RLDDI stuff.

RLDDIUpdateDDPalette (palette.cpp) is likewise from DX5 source
drivers\win32\ddraw.c.  I'm not sure where this was ever called in DX5, but I
have put it sucessfully (so far) in rampif.cpp after all FindLightingRange's
(which is the only thing that can change the palette to change).

Issues
======

RLDDIRampEndSceneHook is not being called.  This constitutes a memory leak.

Need to move the association of the ExtMaterial's with hMat's to the runtime.

Hacked DrawPrim ramp lighting is not the same as RenderPrim (halexe.cpp).
Probably don't need to fix this if Iouri does lighting.

Apps that interpolate across vertices from different materials, like oct1 and
twist may not look exactly the same as they did on DX5, since the appearance
will depend on where the material got put in the global pixelmap.  This, in
turn, depends on the exact timing of the RLDDIRampBeginSceneHook,
RLDDIRampEndSceneHook calls, which we will not reasonably be able to reproduce.

Apps Compat
===========

NT below means NT 5.  98 means memphis.

Direct3D\TestApps\D3DIm
        flipcube.exe    O.K. on NT/98
        oct1.exe        O.K. on NT/98
        oct2.exe        O.K. on NT/98
        sphere.exe      O.K. on NT/98
        triangle.exe    O.K. on NT/98
        tunnel.exe      O.K. on NT/98 Hit F9 3 times to see glitchy problem
                        with grid texture.  Problem only exists in ramp.
        twist.exe       O.K. on NT/98

Direct3D\TestApps\D3DRm
        egg.exe         O.K. on NT/98
        faces.exe       O.K. on NT/98
        fly.exe         O.K. on NT/98
        globe.exe       O.K. on NT/98
        globe2.exe      O.K. on NT/98
        hier1.exe       O.K. on NT/98
        hier2.exe       O.K. on NT/98
        quat.exe        O.K. on NT/98
        shadow.exe      O.K. on NT/98
        tex1.exe        O.K. on NT/98
        tex3.exe        O.K. on NT/98
        tex4.exe        O.K. on NT/98
        tex5.exe        O.K. on NT/98
        trans.exe       O.K. on NT/98
        uvis.exe        O.K. on NT/98
        viewer.exe      O.K. on NT/98

Other
        wipeout2.exe    O.K. on NT/98
        hyperblade      (win95 only) always uses its own rendering or hardware
        wargods         (win95 only) always works, seems to not be using
                        rasterizers.
        agile warrior   (win95 only) O.K.
        terracide       (win95 only) Shows perspectivish problem that can get
                        quite pronounced at times.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dxg\d3d\dx7\readme.txt ===
The following is the directory structure:

link [linking of the various d3dim700.dll libs takes place here]
   daytona
   win9x
fe [Front End, glue code]
   daytona
   win9x

inc [d3dim700.dll specific headers]

tnl [Optimized transform and lighting code]
   daytona
   i386
   win9x

rast [Rasterizer code]
   bin
      alpha
      x86
   cspan
      daytona
      win9x
   d3dif
      daytona
      win9x
   inc
   mlspan
      daytona
      win9x
   mmxemul
      daytona
      win9x
   mmxspan
      daytona
         alpha
         i386
      win9x
          i386
   setup
      daytona
         alpha
         i386
      win9x
          i386
   spaninit
       daytona
       win9x

lib [PSGP libs]
   daytona
      i386
   win9x
       i386

ref [d3dimref.dll Reference h/w emulation]
    link [Linking of the dll takes place here]
    tnl  [Transform and lighting code]
    rast [Rasterization code]
    inc  [common include files]
    drv  [Driver code]
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dxg\d3d\dx7\rast\readme.txt ===
**** directories *****

d3dif - D3D interface.  This contains the sources for the interface
between the D3D runtime and the rasterizers.

bin - Rasterizer-specific tools.  This holds the m4.exe needed to build
the numerous m4-ized C++ and asm source files.

inc - Rasterizer-private header files.

refrast - Reference rasterizer sources.  This is the core of the reference
rasterizer, holding all sources which are made public with the DDK.  The
reference rasterizer core is fully independent of any D3D or DDraw
internals, and is connected to the runtime via refif.cpp in the d3dif
directory.  The file inc\refrast.h is also part of the reference
rasterizer package.

setup - Primitive setup.  Contains C++ and x86 assembly for primitive
setup and edge walking.

spaninit - Span iterator management code.

cspan - C span iterators.  These are the span iterators used on non-MMX
(including alpha) machines.

cmmxspan, mmxemul - C span iterators which closely model the MMX versions
for development and debug purposes.  The mmxemul is a library which
emulates the MMX arithmetic functions.  This is a full set of span
iterators which exactly matches the set in mmxspan, and are used when the
???  device GUID is passed to device create.  These are for internal
debug/test only and are not used in the product (the associated GUID is
not in the public d3d.h).

mmxspan - MMX assembly span iterators.

mlspan - Monolithic span iterators.

rampmat - Ramp rasterizer material processing.  See rampmat/ramp.txt for
further explanation (the horror...).

rampspan - Ramp rasterizer span iterators.  C and x86 assembly.

d3drast - This directory is used only to build the d3drast.dll, which is a
library which contains only the rasterizers (accessed via the HAL provider
interface).  This is a test-only library and is not part of the product
build.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dxg\d3d\dx7\rast\mmxspan\monolith.txt ===
This is a brief description of what is in the ml*.mas MMX monolithic
routines.  All monolithics handle both Gouraud and Flat shading (although
Flat shading is no faster).

16 bit Z Buffer (Less Than or equal) 565 color output mode, 565 texture input
1. No Texture
2. Non Perspective Texturing Point
3. Perspective Texturing Point
4. Perspective Texturing Bilinear
5. Non Perspective Texturing Point Modulate
6. Perspective Texturing Point Modulate
7. Perspective Texturing Bilinear Modulate

No Z Buffer 565 color output mode, 565 texture input
8. No Texture
9. Non Perspective Texturing Point
10. Perspective Texturing Point
11. Perspective Texturing Bilinear
12. Non Perspective Texturing Point Modulate
13. Perspective Texturing Point Modulate
14. Perspective Texturing Bilinear Modulate

16 bit Z Buffer (Less Than or equal) 32 bit color output mode,  32 bit texture
input
15. No Texture
16. Non Perspective Texturing Point
17. Perspective Texturing Point
18. Perspective Texturing Bilinear
19. Non Perspective Texturing Point Modulate
20. Perspective Texturing Point Modulate
21. Perspective Texturing Bilinear Modulate

No Z Buffer 32 bit color mode,  32 bit texture input
22. No Texture
23. Non Perspective Texturing Point
24. Perspective Texturing Point
25. Perspective Texturing Bilinear
26. Non Perspective Texturing Point Modulate
27. Perspective Texturing Point Modulate
28. Perspective Texturing Bilinear Modulate
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dxg\d3d\dx7\rast\mmxspan\readme.txt ===
Status of general MMX span routines.

09/08/97 Checked in MMX code.
  There is no way that the current code will compile and run.  I haven't
  even tried to compile it. This is primarily to have it backed up and
  to let anyone that is interested see what has been done.
  The orginal C (or MCP) code are comments of these ASM or MAS files.

  The ACP directory contains a program that generates the .INC file
  for offsets to all the data.  This program was used by Drew and
  seems to work better than H2INC.  We should probably only have one
  of these that would go in the inc directory, but it's not done that
  way now (Plus, my code doesn't generate it based on a makefile.

  Three regular registers have been set aside for use to access the data.
  Since these are passed to every routine, I don't have to pass anything
  on the stack as long as I don't modify them.  I have modified them a
  couple of times before I added this and they need to be changed to esi,
  edi, ebp or eax (eax is usually used for the next indirect jump).

  ebx is a pointer to the D3DI_SPANITER data (Also Accesses the SI stuff
    inside it).
  ecx is a pointer to the D3DI_RASTPRIM data.
  edx is a pointer to tge D3DI_RASTSPAN data.

  There are a few very useful m4 macros to acess this data in
  readable way (It also made converting C code easier):

define(`XpCtxSI',`[ebx+D3DI_SPANITER_$1]')dnl
define(`XpCtx',`[ebx+D3DI_RASTCTX_$1]')dnl
define(`XpP', `[ecx+D3DI_RASTPRIM_$1]')dnl
define(`XpS', `[edx+D3DI_RASTSPAN_$1]')dnl

  Things that need to be done.
    1) New Special W divide.   MMX newton's method code has already
        been written, but it was very specialized (I negated the
        OoW and OoWDX so that 2 - Oow*iW could be done with a pmadd
        and a few other things.)  Code shouldn't have to change much.

    2) Assembly equivalents to the ACMP, ZCMP macros.  A version of
        these has also been written, but most compares were done in
        a reverse order (to preserve registers).  The MMX Alpha and
        Z setup will most likely have to be different.  This means
        that the atest.asm has not been coded.  A test.mas file is
        written, and is missing ZCMP16 and ZCMP32.  The other 4
        specific code cases are done exactly like the C version
        except the iXorMask always seems to be inverted do to how
        the comparison is done.

    3) BufWrite is not implemented.  The code for doing this has
        been done in APP notes.  The 16 bit cases use a pmaddw
        to combine the colors more quickly than shifting.  There
        is also work beening done on a quick dithering routine.
        The MMX dithering routine will use a pcmpgtw to compare
        with the dither table and the do a psubssw since if the
        color value is to be incremented, then the mask will be
        all ones (= -1). Subtracting it will increment the color.
        The saturation is used to not increase too much.  The
        only problem to this is that the color is unsigned so
        it has to be shifted down by one to saturate to 7fff.

    4) BuffRead is not done.  It uses almost identical routines
        as those in texread.


    5) Lots of clean up and 64 bit constants that need to be in
        memory.  I have to figure out what registers get passed
        to routines that are called and what is passed back.
        In some cases, it may be possible to pass data from one
        bead to the next using registers.  This maybe difficult
        though.

    6) ColorBld conversion.  Mostly ROP stuff and calling of
        bldfuncs.asm.  ROP stuff should be pretty easy.

    7) Since function names are the same, if I made a header
        file declaring them extern "C" { },  the assembly code
        could concievably execute in place of the current c code.
        This is where the true bomb test is.

    8) There's probably more, but there is always more.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dxg\d3d\ref\rast\readme.txt ===
Direct3D Reference Rasterizer



**** NOTES ****

* texture compression is not implemented yet

* line rendering evaluation has potential small errors in the fixed point
line function evaluation - this should only show up in very very long
lines and is being replaced with a lossless fixed point iteration for the
next release

* allocation of texture controls (such as texture coordinate index
selection and filtering) to per-texture state or per-context (renderstate)
state is still under revision and may change

* 24 bit depth buffer and all stencil functionality is implemented but
completely untested

* texture stage blending has not been comprehensively tested yet

* texture state blending macro ops are not fully specified yet

* need to clearly identify REQUIREMENTS versus suggestions/demonstrations
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dxg\ddk\setup\readme.txt ===
DirectX 8.1 Driver Development Kit - Release Notes


Overview
--------

This release of the DirectX Driver Development kit was assembled to aid in developing DirectX8 display drivers for the Win2K family of operating systems   This kit contains sample code for 3DLabs' Permedia3 based display adapters, and demonstrates as many DirectX8 features as could be implemented with this hardware.  Our focus is on DirectX related features.  The sample code also includes non-DirectX related code which is needed to complete the driver so it can be installed and run.  

Microsoft wishes to thank 3DLabs for allowing us to use the Permedia3 as a basis for sample driver code.  


Tools
-----
The sample code in this DDK was built and tested using the following Microsoft products.

Windows 2000 Platform DDK

	Notes:  	1. can be downloaded at http://www.microsoft.com/ddk 
		2. Be sure to check "Samples" group in addition to "Build Environment"

DirectX 8.0  SDK

Visual C++ 32-bit Compiler (Version 6.0, Compiler Version 12.00.8168) (typical / default installation will suffice)


Building driver sample source
-----------------------------

The following is a brief summary of the commands to build the various display driver samples.  These commands
assume that the required tools and related DDK materials are installed and the appropriate commands have been
run from the platform DDK to choose a retail or debug build enviroment

i.e.

	Start -> Programs -> Development Kits -> Windows 2000 DDK -> Checked Build Environment

	or

	Start -> Programs -> Development Kits -> Windows 2000 DDK -> Free Build Environment

Building samples for Win2K

		Permedia3 sample

			display driver
	 			<dxddk root>\src\video\displays\p3samp> build -cZ
			miniport driver
				<dxddk root>\src\video\miniport\p3samp> build -cZ

		Dx8 reference

			<dxddk root>\src\video\displays\d3dref8> build -cZ daytona


Building samples for Win9x


	To build the win9x components of the sample driver:

			..\src\win_me\display\mini\p3samp\drv
			..\src\win_me\display\minivdd\p3samp
        		..\src\video\display\p3samp\dx\win9x

		start the debug Win ME command shell

		Start -> Programs -> Development Kits -> Windows ME DDK -> Checked Build Environment for Win ME
			..\src\win_me\display\mini\p3samp\drv> nmake debug
			..\src\win_me\display\minivdd\p3samp> nmake debug

		start the debug Windows 2000 command shell

			Start -> Programs -> Development Kits -> Windows 2000 DDK -> Checked Build Environment
      			..\src\video\display\p3samp\dx\win9x> build  

		or 

		start the retail Win ME command shell:

			Start -> Programs -> Development Kits -> Windows ME DDK -> Free Build Environment for Win ME
			..\src\win_me\display\mini\p3samp\drv> nmake retail
			..\src\win_me\display\minivdd\p3samp> nmake retail

		start the retail Win 2000 command shell

			Start -> Programs -> Development Kits -> Windows 2000 DDK -> Free Build Environment
      			..\src\video\display\p3samp\dx\win9x> build  


	refrast
		<dxddk root>\src\video\displays\d3dref8> build -cZ win9x



Driver Version Numbers
----------------------
Windows Hardware Quality Labs has recommendations on version numbering schemes.  Please refer to
  
http://microsoft.com/hwdev/devdes/dll_dx5.htm 

for general details regarding driver versioning.  Specifically regarding version number ranges for 
DX8 drivers the following version number ranges should be used for DX8 drivers.

Windows 95/98 DirectX 8.0 compatible drivers 	4.13.01.0000 through  4.13.01.9999
Windows 2000 DirectX 8.0 compatible drivers 	5.13.01.0000 through 5.13.01.9999

Please note that earlier versions of this DDK were not setting these version numbers correctly. Please
verify that the version numbers of your drivers comply with the rules given above and with the sample
drivers built from this release of the DDK or later.


Maximum number of queued presentation blts
------------------------------------------
Note: DX8 drivers must not queue more than 3 presentation blts.  Queueing more than 3 presentation blts
may result in DCT failures and prohibit drivers from logo certification.


Clarification of lockable Z buffer function
-------------------------------------------
A DX8 driver is not required to support a lockable z-buffer, but if it does, functionality must be 
consistent with REF.  


Setting D3DPTEXTURECAPS_MIPMAP
------------------------------
Beginning with DX8 runtimes drivers are required to set D3DPTEXTURECAPS_MIPMAP if the device supports
mip-mapped textures.  This differs from DX7 runtimes which set this cap based on legacy caps.
Additionally the actual texture filter caps passed to the driver via TSS_MIPFILTER etc. have changed
with DX8. The texture filter values passed to the driver for DX8 are defined by the enumerated type
D3DTEXTUREFILTERTYPE and not the legacy enumerated types D3DTEXTUREMAGFITLER, D3DTEXTUREMINFILTER and
D3DTEXTUREMIPFILTER. The driver must, therefore, use the runtime type of the call to identify the type
of value for texture filters. The driver has the option to handle this condition by mapping the new filter
enum to the old ones.  Code to do this can be found in the DKD sample driver function 
__TXT_MapDX8toDX6TexFilter.


Lightweight surface and caching of surface local/global/more pointers
---------------------------------------------------------------------------------------------------
Caching surface related pointers passed down by runtime such as LPDDRAWI_DDRAWSURFACE_LCL,
LPDDRAWI_DDRAWSURFACE_GBL and LPDDRAWI_DDRAWSURFACE_MORE is strongly discouraged in previous DX DDK releases.
In DX8, the "Lightweight" surface was introduced on Win9x platform to reduce memory consumption by the DX 
runtime. A characteristic to consider is that "lightweight" surface local/global/more pointers for the same
surface may change between each DDI call during the surface's lifetime. Cached surface related pointers will
very likely cause various kinds of crashes or problems in your driver. Please reference to Permedia 3 sample 
driver for additional information on how to save the necessary information into a driver specific data 
structure during D3DCreateSurfaceEx call and then use it later in other DDI entry points.


Changes in ref since DX7 release - known and suspected issues
---------------------------------------------------

The following is a brief summary of the changes made to ref since the last DX7 DDk release

	1. DXT4/5 alpha decoding problem - ramp of alpha values was inverted (refs3tc.cpp)
  
	2. Cube Environment Map Filtering - incorrect texel indexing when minimizing (texture.cpp)
  
	3. Flat shading and fog - incorrectly flat shading fog intensity when clipping (clipping.cpp)

	4. D3DTA_SPECULAR always had 1.0 alpha channel (refrasti.hpp; scancnv.cpp; setup.cpp)
	
	5. Changed function for computing texture coverage for cube maps (texture.cpp)


Setting MaxPrinitiveCount Field in D3DCAPS8 Structure
-----------------------------------------------------

"For DirectX 8.0 drivers it is a requirement that the driver report the MaxPrimitiveCount field of D3DCAPS8 
to a value larger than 0x0000FFFFul but smaller than than 0x00FFFFFFul. The value of this field is used
to indicate the number of vertices that can be specified for a single primitive in the DP2 stream. DirectX 
8.0 drivers are required to support an arbitrary number vertices for a single DP2 primitive and hence must
set the value of this field to range specified. A DirectX 8.0 driver is not permited to fail a DP2 drawing
token because the number of vertices if that primitive exceeds 65535."

  
Caps Reporting Requirements of the new D3DCAPS8 Structure
---------------------------------------------------------

The new D3DCAPS8 structure is an aggregate of certain DirectDraw capabilities, pre-DirectX 8.0 Direct3D
capabilities and new DirectX 8.0 capabilities. Although the DirectDraw related capabilities and older
Direct3D capabilities are reported to the runtime through other mechanisms the runtime will not automatically
propogate those capabilities to the D3DCAPS8 structure. It is, therefore, required that the driver fill
in these capabilities (Caps, Caps2 and DevCaps) in the D3DCAPS8 data structure."



world Transform Initialization Considerations
---------------------------------------------

The DX8  runtime sends down a larger number of world transform initializations (256) when an app starts up.
These are sent even if the driver doesn't support that many world transforms (it is highly unlikely that a
driver will support 256 world matrices). Drivers should ignore any world transforms sets that it doesn't
understand. Its also important to note that the world transforms in DX8 start at 0x0100 and go up to 0x01ff.
These values are not part of the transform type enum so values of transform type in the DP2 stream of 0x0103
etc. are perfectly legal.




Sample Driver issues when used with VIA AGP chipsets
----------------------------------------------------

There are currently known issues when attempting to use the Permedia III sample driver on systems using
VIA AGP chipsets.  The VIA AGP GART drivers in some circumstances can cause failures when using the DDK
sample driver.  No current work around exists.  Please us the sample driver on systems with other than VIA 
AGP chipsets.


Change in DX8 headers that may effect DX7 drivers
-------------------------------------------------

Please note that the following define

D3DTRANSFORMSTATE_WORLD

has changed from DX7 to DX8.  Drivers using the DX7 version of the define should be updated to use

D3DTRANSFORMSTATE_WORLD_DX7

Failure to make this change will adversely effect DX7 T&L enabled apps when running on DX7 hardware T&L enabled
drivers.


winnt/win9x Differences in driver context information in DD*_GETDRIVERINFODATA
-------------------------------------------------------------------------------

Please note that there are minor differences in the definitions of DD*_GETDRIVERINFODATA between Windows 9x
and Windows 2000.

As defined in ddrawint.h:
	typedef struct _DD_GETDRIVERINFODATA {
	    // Input fields filled in by DirectDraw
	    VOID*                      dhpdev;         		// Driver context
	    DWORD                   dwSize;         		// Size of this structure
	    DWORD                   dwFlags;        		// Flags
	    GUID                       	guidInfo;       		// GUID that DirectX is querying for
	    DWORD                    dwExpectedSize; 	// Size of callbacks structure expected by DirectDraw.
	    PVOID                      lpvData;        		// Buffer that will receive the requested data
	    // Output fields filled in by driver
	    DWORD                    dwActualSize;   	// Size of callbacks structure expected by driver
	    HRESULT                  ddRVal;         		// Return value from driver
	} DD_GETDRIVERINFODATA;

As defined in ddrawi.h:
	typedef struct _DDHAL_GETDRIVERINFODATA {
	    // Input fields filled in by DirectDraw
	    DWORD       		dwSize;         		// Size of this structure
	    DWORD       		dwFlags;        		// Flags
	    GUID        		guidInfo;       		// GUID that DirectX is querying for
	    DWORD       		dwExpectedSize; 	// Size of callbacks structure expected by DirectDraw.
	    LPVOID      		lpvData;        		// Buffer that will receive the requested data
	    // Output fields filled in by driver
	    DWORD       		dwActualSize;   	// Size of callbacks structure expected by driver
	    HRESULT     	ddRVal;         		// Return value from driver
	    // Input field: Context information for driver
	    // On Win95, this is the dwReserved3 field of the DIRECTDRAW_GBL
	    // On NT, this is the hDD field of DIRECTDRAW_GBL
	    ULONG_PTR   dwContext;  // Context Information
	} DDHAL_GETDRIVERINFODATA;


The dhpdev and dwContext serve the same purpose, they are used by the driver to find the per card 
information.


Clarification of dwReqCommandBufferSizeusage
--------------------------------------------

The dwReqCommandBufferSize field indicates that the amount the buffer should grow by. It is not the 
size the buffer is expected to grow to.


DDSCAPS2_OPAQUE used to indicate lockability of flipping chain 
--------------------------------------------------------------

DX8 runtimes now set DDSCAPS2_OPAQUE on the primary and the backbuffers if the flipping chain is not lockable.
This allows drivers to do behind the scenes optimization.  One misnomer:  It is still possible for us to lock
the primary surface so the driver will need to handle these cases, but such locks will be very infrequent
and are not expected to be fast.


Clarification of caps requirement for driver support of multi-sampling
----------------------------------------------------------------------

Drivers supporting multisampling must fill in the multisample caps in the DpethStencil formats for which 
multi-sampling can be supported.  This allows the runtime to detect if a driver supports multisample for
combinations of render target and Z buffer formats.  For additional information about the restrictions related
to stretch blt multi-sampling please see the description of D3DPRASTERCAPS_STRETCHBLTMULTISAMPLE cap in the
rastercaps contained in the D3DCAPS8 struct in the SDK documentation.



Please note: new rules for ops lists
------------------------------------

The runtime now imposes some rules on the op list.  The current rules are:
	a.  Only One Endian-ness for any DS format is allowed i.e. D15S1 OR S1D15, not both 
            independent of other bits.
	b.  A list should only include D3DFORMAT_OP_DISPLAYMODE for exactly one 16bpp format 
            (i.e. shouldnt enumerate 5:5:5 and 5:6:5).
	c.  A list should not any alpha formats with D3DFORMAT_OP_DISPLAYMODE or D3DFORMAT_OP_3DACCEL set.
	d.  Make sure no mode has OP_3DACCEL set that doesnt also have OP_DISPLAYMODE set. 


Clarification of use of D3DFMT_D16_LOCKABLE flag in op list
-----------------------------------------------------------

DX8 runtimes no longer us the D3DFORMAT_OP_D16_LOCKABLE flag with the introduction of  a new format 
D3DFMT_D16_LOCKABLE.  If the driver supports a lockable  D16, it should report D3DFMT_D16_LOCKABLE in
the op list; otherwise, it should report D3DFMT_D16.

Clarification of D3DFORMAT_OP_DISPLAYMODE and D3DFORMAT_OP_3DACCELERATION
-------------------------------------------------------------------------
DX8 runtimes no longer support the D3DFORMAT_OP_BACKBUFFER flag as it was ambigious.  In it's place are two
new flags: D3DFORMAT_OP_DISPLAYMODE and D3DFORMAT_OP_3DACCELERATION.  D3DFORMAT_OP_DISPLAYMODE indicates that
the display format is supported by DirectDraw.  D3DFORMAT_OP_3DACCELERATION means that D3D is also supported
in this mode.

Use of D3DGDI2_TYPE_DXVERSION to determine DX runtime version
-------------------------------------------------------------

The DX8 runtimes now support a way for a driver on NT to find out the DX-Runtime version.
(This functionality exists on 9x but not on NT). This information is provided to a new driver
(i.e. one that exposes GETDRIVERINFO2) for DX7 applications and DX8 applications. 

Here's the relevant snippets of header:

#define D3DGDI2_TYPE_DXVERSION      (0x00000004ul)  // Notify driver of current DX Version

//
// This data structure is used to notify drivers about the DirectX version
// number. This is the value that is denoted as DD_RUNTIME_VERSION in the
// DDK headers.
//
typedef struct _DD_DXVERSION
{
    DD_GETDRIVERINFO2DATA gdi2;             // [in/out] GetDriverInfo2 data
    DWORD                 dwDXVersion;      // [in]     The Version of DX
    DWORD                 dwReserved;       // Reserved
} DD_DXVERSION;

would result in x0000800 for dwDXVersion; or more accurately, you should DD_RUNTIME_VERSION which is defined
in ddrawi.h.


Compatibility note when using Millenium DDK
-------------------------------------------

Please note that in order to allow a single driver binary to load on Windows 95, through Millenium you must 
make sure that the DDK version is 4.0  This value in stored in DDK_VERSION.  The Win9x kernel (VMM) will only load
a VXD with the same or earlier version.  VXDs with newer (numerically bigger) ddk version will fail to load.
For a VXD to load on from Win95 to Millennium, an DDK version of 4.0 should be used.  This can be controlled
by macro as shown below : (it is part of the VMM.H)

#ifndef DDK_VERSION

#ifdef WIN31COMPAT
#define DDK_VERSION 0x30A       /* 3.10 */
#else  // WIN31COMPAT

#ifdef WIN40COMPAT
#define DDK_VERSION 0x400       /* 4.00 */
#else  // WIN40COMPAT

#ifdef WIN41COMPAT
#define DDK_VERSION 0x40A       /*Memphis is 4.1 */
#else  // WIN41COMPAT

#define DDK_VERSION 0x45A       /*Millennium is 4.90 */

#endif // WIN41COMPAT

#endif // WIN40COMPAT

#endif // WIN31COMPAT

#endif // DDK_VERSION

Developers should use WIN41COMPAT (WIN40COMPAT) if they can and want to use the same binary for ME,
WIN98 (and WIN95)


Driver Managed Resource Support
-----------------------------------------------

As DX7 allowed the driver to perform texture management, the current version allows us to manage plain textures, volume textures, 
cube textures, index buffers and vertex buffers.   In order to enable a DX8.1 driver for resource management it is necessary for the driver 
to set the  DDCAPS2_CANMANAGERESOURCE bit (in addition to DDCAPS2_CANMANAGETEXTURE) in the ddCaps.dwCaps field of the 
DDHALINFO when getting the DrvGetDirectDrawInfo callback.

Two new DP2 command tokens that may appear also in the command buffer are

D3DDP2OP_ADDDIRTYRECT: followed by a D3DHAL_DP2ADDDIRTYRECT structure. Indicates that a specific portion of a 2D resource 
(2D Texture or cube texture) has been dirtied in system memory, so it has to be reloaded into video memory before being used.

typedef struct _D3DHAL_DP2ADDDIRTYRECT
{
    DWORD     dwSurface;     
    RECTL     rDirtyArea;    
} D3DHAL_DP2ADDDIRTYRECT,  *LPD3DHAL_DP2ADDDIRTYRECT;

Members
	dwSurface	Is the surface handle to the managed dirtied surface 
	rDirtyArea	Rectangular area marked dirty

Comments 
	Used only for driver managed resources/surfaces. Never sent unless the driver effectively declares it manages resources.


D3DDP2OP_ADDDIRTYBOX: followed by a D3DDP2OP_ADDDIRTYBOX structure. Indicates that a specific portion of a 3D resource
 (volume texture) has been dirtied in system memory, so it has to be reloaded into video memory before being used.

typedef struct _D3DHAL_DP2ADDDIRTYBOX
{
    DWORD     dwSurface;      // Driver managed volume
    D3DBOX    DirtyBox;       // Box marked dirty
} D3DHAL_DP2ADDDIRTYBOX,  *LPD3DHAL_DP2ADDDIRTYBOX;

Members
	dwSurface	Is the surface handle to the managed dirtied surface 
	DirtyBox	Box marked dirty

Comments 
	Used only for driver managed resources/surfaces. Never sent unless the driver effectively declares it manages resources.
	
See the p3samp sample driver that ships with this DDK for more implementation details. Observe specifically code marked as 
DX7_TEXMANAGEMENT (DX7 style texture management) and also DX8_DDI (DX8 style resource management specializations).

In the DdLock callback the dwFlags field of the DD_LOCKDATA structure should be watched for the new bit DDLOCK_NODIRTYUPDATE
 set when the an app does a lock with D3DLOCK_NO_DIRTY_UPDATE.


WDM AVStream class
-----------------------------

AVSTest is a sample that demonstrates how to implement an AVStream filter driver.  An inf file is supplied
to install the driver.  Once installed, use graphedt to use the sample by inserting the AVSTest filter from
WDM Streaming Capture Devices.  Render the 'Output' pin to a DShow Video Renderer.

Location: <dxddk root>\src\wdm\dxva


Feedback
--------
Please use the bug reporting form of the DirectX 8.0 DDK betaplace web page to report all issues related to the 
DirectX 8.0 DDK.  Include include the DDK version number when reporting issues.  The version number can be found
in the dxddkver.txt file installed in the root directory of the DirectX 8.0 DDK.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dxg\ddk\help\d3d8funcspec81.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Direct3D for DirectX 8.0 Specification Title _PID_HLINKSDirect3D for DirectX 8.0 Specification Chas. Boyd Normal.dot mboland Microsoft Word 10.0urn:schemas-microsoft-com:office:smarttags State urn:schemas-microsoft-com:office:smarttags PlaceType urn:schemas-microsoft-com:office:smarttags PlaceName urn:schemas-microsoft-com:office:smarttags placeDirectX 8.1 Direct3D Functional Specification For DirectX Version 8.1 Revision 1.06   03/23/2001 This document is confidential and contains highly sensitive information about Microsoft s product development plans. This is a proprietary work owned by Microsoft Corporation, and is maintained as a trade secret. Unless provided for under an appropriate Non-Disclosure Agreement, this document may be shared only with authorized personnel at Microsoft.  Discussion or transmission of this document (as well as any associated discussions about the contents of this document) to any unauthorized Microsoft personnel is specifically prohibited.  Complying with all applicable copyright laws is the responsibility of the user.  This document is Copyright   1999 Microsoft Corporation. All rights Reserved. Without limiting the rights under copyright law, no part of this document may be reproduced, stored in or introduced into a retrieval system, or transmitted in any form or by any means (electronic, mechanical, photocopying, recording, or otherwise), or for any purpose, without the express written permission of Microsoft Corporation, One Microsoft Way, Redmond, WA 98052. Microsoft may have patents or pending patent applications, trademarks, copyrights, or other intellectual property rights covering subject matter in this document.  Except as expressly provided in any written license from Microsoft, the furnishing of this document does not give you any license to these patents, trademarks,  copyrights, or other intellectual property rights.  TOC \o "1-4" \h \z   HYPERLINK \l "_Toc485920036"  Introduction  PAGEREF _Toc485920036 \h   HYPERLINK \l "_Toc485920037"  Market Justification for Procedural Shaders  PAGEREF _Toc485920037 \h   HYPERLINK \l "_Toc485920038"  Procedural Pixel Shaders  PAGEREF _Toc485920038 \h   HYPERLINK \l "_Toc485920039"  Evolution from DX6/7  PAGEREF _Toc485920039 \h   HYPERLINK \l "_Toc485920040"  Pixel Shader Scope  PAGEREF _Toc485920040 \h   HYPERLINK \l "_Toc485920041"  1.2.1 Texture Stage States  PAGEREF _Toc485920041 \h   HYPERLINK \l "_Toc485920042"  1.2.2 Post-Shader Pixel Processing:  PAGEREF _Toc485920042 \h   HYPERLINK \l "_Toc485920043"  1.2.3 Pixel Shader Inputs:  PAGEREF _Toc485920043 \h   HYPERLINK \l "_Toc485920044"  Pixel Shader Machine Architecture  PAGEREF _Toc485920044 \h   HYPERLINK \l "_Toc485920045"  1.3.1 Input Color Registers      vn  PAGEREF _Toc485920045 \h   HYPERLINK \l "_Toc485920046"  1.3.2 Texture Registers       tn  PAGEREF _Toc485920046 \h   HYPERLINK \l "_Toc485920047"  1.3.3 Temporary Registers      rn  PAGEREF _Toc485920047 \h   HYPERLINK \l "_Toc485920048"  1.3.4 Constant Factor Registers      cn  PAGEREF _Toc485920048 \h   HYPERLINK \l "_Toc485920049"  1.3.5 Pixel Shader Instruction Types  PAGEREF _Toc485920049 \h   HYPERLINK \l "_Toc485920050"  Pixel Shader Blending Instructions  PAGEREF _Toc485920050 \h   HYPERLINK \l "_Toc485920051"  1.4.1 Pixel Shading Instruction Summary  PAGEREF _Toc485920051 \h   HYPERLINK \l "_Toc485920052"  1.4.2 Pixel Shader Input Argument Modifiers  PAGEREF _Toc485920052 \h   HYPERLINK \l "_Toc485920053"  1.4.2.1 Alpha Replicate      rn.a  PAGEREF _Toc485920053 \h   HYPERLINK \l "_Toc485920054"  1.4.2.2 Invert         1-rn  PAGEREF _Toc485920054 \h   HYPERLINK \l "_Toc485920055"  1.4.2.3 Negate        -rn  PAGEREF _Toc485920055 \h   HYPERLINK \l "_Toc485920056"  1.4.2.4 BIAS             rn_bias  PAGEREF _Toc485920056 \h   HYPERLINK \l "_Toc485920057"  1.4.2.5 Convert to Signed           rn_sgn  PAGEREF _Toc485920057 \h   HYPERLINK \l "_Toc485920058"  1.4.2.6 Blue         rn.b  PAGEREF _Toc485920058 \h   HYPERLINK \l "_Toc485920059"  1.4.3 Pixel Shader Instruction Modifiers  PAGEREF _Toc485920059 \h   HYPERLINK \l "_Toc485920060"  1.4.3.1 Shift/scale Modifiers           _x2, _d2  PAGEREF _Toc485920060 \h   HYPERLINK \l "_Toc485920061"  1.4.3.2 Saturate         _sat  PAGEREF _Toc485920061 \h   HYPERLINK \l "_Toc485920062"  1.4.4 Pixel Shader Output Write Masks  PAGEREF _Toc485920062 \h   HYPERLINK \l "_Toc485920063"  1.4.4.1 Color/Vector Write Mask        .rgb  PAGEREF _Toc485920063 \h   HYPERLINK \l "_Toc485920064"  1.4.4.2 Alpha/Scalar Write Mask       .a  PAGEREF _Toc485920064 \h   HYPERLINK \l "_Toc485920065"  1.4.4.3 Full Write Mask        .rgba  PAGEREF _Toc485920065 \h   HYPERLINK \l "_Toc485920066"  1.4.5 Pixel Shader Instruction Pairing Rules  PAGEREF _Toc485920066 \h   HYPERLINK \l "_Toc485920067"  1.4.6 Pixel Blending Order of Operations  PAGEREF _Toc485920067 \h   HYPERLINK \l "_Toc485920068"  1.4.7 DirectX 8.0 Pixel Shader Blending Samples  PAGEREF _Toc485920068 \h   HYPERLINK \l "_Toc485920069"  1.4.7.1 Diffuse lighting  PAGEREF _Toc485920069 \h   HYPERLINK \l "_Toc485920070"  1.4.7.2 Colored Light Map  PAGEREF _Toc485920070 \h   HYPERLINK \l "_Toc485920071"  1.4.7.3 Brightening Light Map  PAGEREF _Toc485920071 \h   HYPERLINK \l "_Toc485920072"  1.4.7.4 Monochrome Light Map  PAGEREF _Toc485920072 \h   HYPERLINK \l "_Toc485920073"  1.4.7.5 Gloss Map  PAGEREF _Toc485920073 \h   HYPERLINK \l "_Toc485920074"  1.4.7.6 Diffuse Light Map and Gloss Map  PAGEREF _Toc485920074 \h   HYPERLINK \l "_Toc485920075"  1.4.7.7 Diffuse Bump Mapping  PAGEREF _Toc485920075 \h   HYPERLINK \l "_Toc485920076"  1.4.7.8 Diffuse Bump Mapping with Range Falloff  PAGEREF _Toc485920076 \h   HYPERLINK \l "_Toc485920077"  Pixel Shader Texture Addressing Operations  PAGEREF _Toc485920077 \h   HYPERLINK \l "_Toc485920078"  1.5.1 Texture Address Op Instruction Summary  PAGEREF _Toc485920078 \h   HYPERLINK \l "_Toc485920079"  1.5.2 Texture Address Input Argument Modifiers  PAGEREF _Toc485920079 \h   HYPERLINK \l "_Toc485920080"  1.5.3 Texture Address Operator Modifiers  PAGEREF _Toc485920080 \h   HYPERLINK \l "_Toc485920081"  1.5.4 Texture Address Write Masks  PAGEREF _Toc485920081 \h   HYPERLINK \l "_Toc485920082"  1.5.5 DirectX8 Pixel Blending Example Syntax  PAGEREF _Toc485920082 \h   HYPERLINK \l "_Toc485920083"  1.5.6 Texture Sampling  PAGEREF _Toc485920083 \h   HYPERLINK \l "_Toc485920084"  Pixel Shader Caps  PAGEREF _Toc485920084 \h   HYPERLINK \l "_Toc485920085"  1.6.1 Pixel Shader Version  PAGEREF _Toc485920085 \h   HYPERLINK \l "_Toc485920086"  Pixel Shader API Methods:  PAGEREF _Toc485920086 \h   HYPERLINK \l "_Toc485920087"  Pixel Shader Color and Alpha Blending Instruction Reference  PAGEREF _Toc485920087 \h   HYPERLINK \l "_Toc485920088"  Move/Copy         mov  PAGEREF _Toc485920088 \h   HYPERLINK \l "_Toc485920089"  Addition         add  PAGEREF _Toc485920089 \h   HYPERLINK \l "_Toc485920090"  Subtraction         sub  PAGEREF _Toc485920090 \h   HYPERLINK \l "_Toc485920091"  Multiply/Modulate        mul  PAGEREF _Toc485920091 \h   HYPERLINK \l "_Toc485920092"  Multiply-Add         mad  PAGEREF _Toc485920092 \h   HYPERLINK \l "_Toc485920093"  Linear Interpolation Blend       lrp  PAGEREF _Toc485920093 \h   HYPERLINK \l "_Toc485920094"  Conditional          cnd  PAGEREF _Toc485920094 \h   HYPERLINK \l "_Toc485920095"  3-Dimensional Dot Product       dp3  PAGEREF _Toc485920095 \h   HYPERLINK \l "_Toc485920096"  4-Dimensional Dot Product       dp4  PAGEREF _Toc485920096 \h   HYPERLINK \l "_Toc485920097"  Pixel Shader Texture Addressing Instruction Reference  PAGEREF _Toc485920097 \h   HYPERLINK \l "_Toc485920098"  Texture         tex  PAGEREF _Toc485920098 \h   HYPERLINK \l "_Toc485920099"  Texture Coordinate                     texcoord  PAGEREF _Toc485920099 \h   HYPERLINK \l "_Toc485920100"  BUMPENVMAP       texbem  PAGEREF _Toc485920100 \h   HYPERLINK \l "_Toc485920101"  BUMPENVMAPLUMINANCE     texbeml  PAGEREF _Toc485920101 \h   HYPERLINK \l "_Toc485920102"  Remapping Red/Green      reg2gr  PAGEREF _Toc485920102 \h   HYPERLINK \l "_Toc485920103"  Remapping Alpha/Blue      reg2ab  PAGEREF _Toc485920103 \h   HYPERLINK \l "_Toc485920104"  3-Dimensional Dot Product     texdp3  PAGEREF _Toc485920104 \h   HYPERLINK \l "_Toc485920105"  4-Dimensional Dot Product     texdp4  PAGEREF _Toc485920105 \h   HYPERLINK \l "_Toc485920106"  Bi-directional Reflectance Distribution Function  texbrdf  PAGEREF _Toc485920106 \h   HYPERLINK \l "_Toc485920107"  Texture Coordinate-Based Clipping      texkill  PAGEREF _Toc485920107 \h   HYPERLINK \l "_Toc485920108"  3x2 Matrix Multiply      texm3x2  PAGEREF _Toc485920108 \h   HYPERLINK \l "_Toc485920109"  Depth Update       texdepth  PAGEREF _Toc485920109 \h   HYPERLINK \l "_Toc485920110"  3x3 Matrix Multiply      texm3x3_*  PAGEREF _Toc485920110 \h   HYPERLINK \l "_Toc485920111"  Frame-Buffer Blending Update  PAGEREF _Toc485920111 \h   HYPERLINK \l "_Toc485920112"  Additional RenderTarget Blending Operations  PAGEREF _Toc485920112 \h   HYPERLINK \l "_Toc485920113"  Separate RenderTarget Blending for Alpha Channel  PAGEREF _Toc485920113 \h   HYPERLINK \l "_Toc485920114"  Programmable Vertex Processing  PAGEREF _Toc485920114 \h   HYPERLINK \l "_Toc485920115"  Introduction  PAGEREF _Toc485920115 \h   HYPERLINK \l "_Toc485920116"  5.1.1 Application Usage Scenarios:  PAGEREF _Toc485920116 \h   HYPERLINK \l "_Toc485920117"  5.1.1.1 Matrix Palette Skinning  PAGEREF _Toc485920117 \h   HYPERLINK \l "_Toc485920118"  5.1.1.2 Procedural Geometry  PAGEREF _Toc485920118 \h   HYPERLINK \l "_Toc485920119"  5.1.1.3 Wave Modeling  PAGEREF _Toc485920119 \h   HYPERLINK \l "_Toc485920120"  5.1.2 Integration of the Vertex Shader into the Vertex Pipeline:  PAGEREF _Toc485920120 \h   HYPERLINK \l "_Toc485920121"  Vertex Shader Machine Architecture  PAGEREF _Toc485920121 \h   HYPERLINK \l "_Toc485920122"  5.2.1 Resource Summary:  PAGEREF _Toc485920122 \h   HYPERLINK \l "_Toc485920123"  5.2.2 Vertex Input Registers       vn  PAGEREF _Toc485920123 \h   HYPERLINK \l "_Toc485920124"  5.2.3 Constant Registers        c[n]  PAGEREF _Toc485920124 \h   HYPERLINK \l "_Toc485920125"  5.2.4 Temporary Registers       rn  PAGEREF _Toc485920125 \h   HYPERLINK \l "_Toc485920126"  5.2.5 Address Registers        an  PAGEREF _Toc485920126 \h   HYPERLINK \l "_Toc485920127"  5.2.6 Output Registers        oXxx  PAGEREF _Toc485920127 \h   HYPERLINK \l "_Toc485920128"  5.2.7 Instructions  PAGEREF _Toc485920128 \h   HYPERLINK \l "_Toc485920129"  Example Programming Syntax:  PAGEREF _Toc485920129 \h   HYPERLINK \l "_Toc485920130"  5.3.1 Example Vertex Shader Syntax Grammar  PAGEREF _Toc485920130 \h   HYPERLINK \l "_Toc485920131"  5.3.2 Vertex Shader Examples  PAGEREF _Toc485920131 \h   HYPERLINK \l "_Toc485920132"   PAGEREF _Toc485920132 \h   HYPERLINK \l "_Toc485920133"  Error handling  PAGEREF _Toc485920133 \h   HYPERLINK \l "_Toc485920134"  Vertex Shader API Methods:  PAGEREF _Toc485920134 \h   HYPERLINK \l "_Toc485920135"  Vertex  Shader Instruction Set Reference  PAGEREF _Toc485920135 \h   HYPERLINK \l "_Toc485920136"  6.1.1 Add          ADD  PAGEREF _Toc485920136 \h   HYPERLINK \l "_Toc485920137"  6.1.2 3-D  Dot Product        DP3  PAGEREF _Toc485920137 \h   HYPERLINK \l "_Toc485920138"  6.1.3 Four Component Dot Product      DP4  PAGEREF _Toc485920138 \h   HYPERLINK \l "_Toc485920139"  6.1.4 Distance Vector        DST  PAGEREF _Toc485920139 \h   HYPERLINK \l "_Toc485920140"  6.1.5 Exponential Base 2 Partial Precision     EXPP  PAGEREF _Toc485920140 \h   HYPERLINK \l "_Toc485920141"  6.1.6 Logarithm Base 2 Partial Precision     LOGP  PAGEREF _Toc485920141 \h   HYPERLINK \l "_Toc485920142"  6.1.7 Light Coefficients        LIT  PAGEREF _Toc485920142 \h   HYPERLINK \l "_Toc485920143"  6.1.8 Multiply And Add        MAD  PAGEREF _Toc485920143 \h   HYPERLINK \l "_Toc485920144"  6.1.9 Maximum         MAX  PAGEREF _Toc485920144 \h   HYPERLINK \l "_Toc485920145"  6.1.10 Minimum         MIN  PAGEREF _Toc485920145 \h   HYPERLINK \l "_Toc485920146"  6.1.11 Move          MOV  PAGEREF _Toc485920146 \h   HYPERLINK \l "_Toc485920147"  6.1.12 Multiply         MUL  PAGEREF _Toc485920147 \h   HYPERLINK \l "_Toc485920148"  6.1.13 Reciprocal         RCP  PAGEREF _Toc485920148 \h   HYPERLINK \l "_Toc485920149"  6.1.14 Reciprocal Square Root       RSQ  PAGEREF _Toc485920149 \h   HYPERLINK \l "_Toc485920150"  6.1.15 Set On Greater Than or Equal To      SGE  PAGEREF _Toc485920150 \h   HYPERLINK \l "_Toc485920151"  6.1.16 Set On Less Than        SLT  PAGEREF _Toc485920151 \h   HYPERLINK \l "_Toc485920152"  Vertex Shader Macro Instructions  PAGEREF _Toc485920152 \h   HYPERLINK \l "_Toc485920153"  6.2.1 4x4 Vector-Matrix Multiply      M44  PAGEREF _Toc485920153 \h   HYPERLINK \l "_Toc485920154"  6.2.2 4x3 Vector-Matrix Multiply      M43  PAGEREF _Toc485920154 \h   HYPERLINK \l "_Toc485920155"  6.2.3 3x4 Vector-Matrix Multiply      M34  PAGEREF _Toc485920155 \h   HYPERLINK \l "_Toc485920156"  6.2.4 3x3 Vector-Matrix Multiply      M33  PAGEREF _Toc485920156 \h   HYPERLINK \l "_Toc485920157"  6.2.5 3x2 Vector-Matrix Multiply      M32  PAGEREF _Toc485920157 \h   HYPERLINK \l "_Toc485920158"  6.2.6 Fraction        FRC  PAGEREF _Toc485920158 \h   HYPERLINK \l "_Toc485920159"  6.2.7 Exponential Base 2    Full Precision    EXP  PAGEREF _Toc485920159 \h   HYPERLINK \l "_Toc485920160"  6.2.8 Logarithm Base 2     Full Precision    LOG  PAGEREF _Toc485920160 \h   HYPERLINK \l "_Toc485920161"  Vertex Shader Sample Utilities  PAGEREF _Toc485920161 \h   HYPERLINK \l "_Toc485920162"  6.3.1 Linear Interpolation Blend (LERP)    LRP  PAGEREF _Toc485920162 \h   HYPERLINK \l "_Toc485920163"  6.3.2 Cross Product        CP3  PAGEREF _Toc485920163 \h   HYPERLINK \l "_Toc485920164"  6.3.3 Reflection       RFL  PAGEREF _Toc485920164 \h   HYPERLINK \l "_Toc485920165"  6.3.4 Normalize         NM3  PAGEREF _Toc485920165 \h   HYPERLINK \l "_Toc485920166"  Other Common Algorithms  PAGEREF _Toc485920166 \h   HYPERLINK \l "_Toc485920167"  Shader Language  PAGEREF _Toc485920167 \h   HYPERLINK \l "_Toc485920168"  7.1.1 Debugging Support  PAGEREF _Toc485920168 \h   HYPERLINK \l "_Toc485920169"  Hardware Requirements  PAGEREF _Toc485920169 \h   HYPERLINK \l "_Toc485920170"  Sprite Points  PAGEREF _Toc485920170 \h   HYPERLINK \l "_Toc485920171"  Description  PAGEREF _Toc485920171 \h   HYPERLINK \l "_Toc485920172"  Market Justification  PAGEREF _Toc485920172 \h   HYPERLINK \l "_Toc485920173"  CAPS:  PAGEREF _Toc485920173 \h   HYPERLINK \l "_Toc485920174"   PAGEREF _Toc485920174 \h   HYPERLINK \l "_Toc485920175"   PAGEREF _Toc485920175 \h   HYPERLINK \l "_Toc485920176"  Usage:  PAGEREF _Toc485920176 \h   HYPERLINK \l "_Toc485920177"  Implementation:  PAGEREF _Toc485920177 \h   HYPERLINK \l "_Toc485920178"  8.7.1 Caps:  PAGEREF _Toc485920178 \h   HYPERLINK \l "_Toc485920179"  8.7.2 RenderStates  PAGEREF _Toc485920179 \h   HYPERLINK \l "_Toc485920180"  8.7.3 FVF Code  PAGEREF _Toc485920180 \h   HYPERLINK \l "_Toc485920181"  8.7.4 Input Point Size  PAGEREF _Toc485920181 \h   HYPERLINK \l "_Toc485920182"  8.7.5 Computation of Final Point Size  PAGEREF _Toc485920182 \h   HYPERLINK \l "_Toc485920183"  8.7.6 Frustum Clipping  PAGEREF _Toc485920183 \h   HYPERLINK \l "_Toc485920184"  8.7.7 Arbitrary Plane Clipping  PAGEREF _Toc485920184 \h   HYPERLINK \l "_Toc485920185"  8.7.8 Sprite Point Rendering  PAGEREF _Toc485920185 \h   HYPERLINK \l "_Toc485920186"  8.7.9 Non-TnLHal - input FVF is untransformed:  PAGEREF _Toc485920186 \h   HYPERLINK \l "_Toc485920187"  8.7.10 Non-TnLHal - input FVF is transformed:  PAGEREF _Toc485920187 \h   HYPERLINK \l "_Toc485920188"  8.7.11 TnLHal:  PAGEREF _Toc485920188 \h   HYPERLINK \l "_Toc485920189"  8.7.12 Programmable Vertex Processing  PAGEREF _Toc485920189 \h   HYPERLINK \l "_Toc485920190"  Higher-Order Primitives  PAGEREF _Toc485920190 \h   HYPERLINK \l "_Toc485920191"  Description  PAGEREF _Toc485920191 \h   HYPERLINK \l "_Toc485920192"  9.1.1 Future Features:  PAGEREF _Toc485920192 \h   HYPERLINK \l "_Toc485920193"  Market Justification  PAGEREF _Toc485920193 \h   HYPERLINK \l "_Toc485920194"  9.2.1 Improved Quality via Resolution Enhancement  PAGEREF _Toc485920194 \h   HYPERLINK \l "_Toc485920195"  9.2.2 Direct Mapping from Spline-based Tools  PAGEREF _Toc485920195 \h   HYPERLINK \l "_Toc485920196"  9.2.3 Supported/Required By:  PAGEREF _Toc485920196 \h   HYPERLINK \l "_Toc485920197"  Caps:  PAGEREF _Toc485920197 \h   HYPERLINK \l "_Toc485920198"   PAGEREF _Toc485920198 \h   HYPERLINK \l "_Toc485920199"  9.4.1 D3DRS_NUMSEGMENTS <float>  PAGEREF _Toc485920199 \h   HYPERLINK \l "_Toc485920200"  9.4.2 D3DRS_PRIMITIVEORDER  PAGEREF _Toc485920200 \h   HYPERLINK \l "_Toc485920201"  9.4.3 D3DRS_NORMALORDER <int>  PAGEREF _Toc485920201 \h   HYPERLINK \l "_Toc485920202"  9.4.4 D3DRS_HOBASIS  PAGEREF _Toc485920202 \h   HYPERLINK \l "_Toc485920203"  9.4.5 D3DDevice::DrawGrid()  PAGEREF _Toc485920203 \h   HYPERLINK \l "_Toc485920204"  Usage:  PAGEREF _Toc485920204 \h   HYPERLINK \l "_Toc485920205"  9.5.1 Resolution Enhancement  PAGEREF _Toc485920205 \h   HYPERLINK \l "_Toc485920206"  9.5.2 Direct Rendering of Spline Content  PAGEREF _Toc485920206 \h   HYPERLINK \l "_Toc485920207"  Test Procedure  PAGEREF _Toc485920207 \h   HYPERLINK \l "_Toc485920208"  Implementation  PAGEREF _Toc485920208 \h   HYPERLINK \l "_Toc485920209"   PAGEREF _Toc485920209 \h   HYPERLINK \l "_Toc485920210"  9.8.1 Structures  PAGEREF _Toc485920210 \h   HYPERLINK \l "_Toc485920211"  9.8.2 State Information  PAGEREF _Toc485920211 \h   HYPERLINK \l "_Toc485920212"  9.8.3 Vertex Data  PAGEREF _Toc485920212 \h   HYPERLINK \l "_Toc485920213"  Full-Screen Anti-Aliasing and Multi-Sample Rendering Support  PAGEREF _Toc485920213 \h   HYPERLINK \l "_Toc485920214"  Description  PAGEREF _Toc485920214 \h   HYPERLINK \l "_Toc485920215"  Market Justification  PAGEREF _Toc485920215 \h   HYPERLINK \l "_Toc485920216"  10.2.1 Supported/Required By:  PAGEREF _Toc485920216 \h   HYPERLINK \l "_Toc485920217"  API Usage:  PAGEREF _Toc485920217 \h   HYPERLINK \l "_Toc485920218"  Caps:  PAGEREF _Toc485920218 \h   HYPERLINK \l "_Toc485920219"  Test Procedure  PAGEREF _Toc485920219 \h   HYPERLINK \l "_Toc485920220"  Implementation  PAGEREF _Toc485920220 \h   HYPERLINK \l "_Toc485920221"   PAGEREF _Toc485920221 \h   HYPERLINK \l "_Toc485920222"  10.7.1 Structures  PAGEREF _Toc485920222 \h   HYPERLINK \l "_Toc485920223"  10.7.2 State Information  PAGEREF _Toc485920223 \h   HYPERLINK \l "_Toc485920224"  10.7.3 Vertex Data  PAGEREF _Toc485920224 \h   HYPERLINK \l "_Toc485920225"  Other Features  PAGEREF _Toc485920225 \h   HYPERLINK \l "_Toc485920226"  Technical Market Features  PAGEREF _Toc485920226 \h   HYPERLINK \l "_Toc485920227"  Proposed Features  PAGEREF _Toc485920227 \h   HYPERLINK \l "_Toc485920228"  Appendix 1 Hardware Requirements  PAGEREF _Toc485920228 \h   HYPERLINK \l "_Toc485920229"  Performance  PAGEREF _Toc485920229 \h   HYPERLINK \l "_Toc485920230"  Display Resolutions  PAGEREF _Toc485920230 \h   HYPERLINK \l "_Toc485920231"  2D Graphics Support  PAGEREF _Toc485920231 \h   HYPERLINK \l "_Toc485920232"  Video memory architecture  PAGEREF _Toc485920232 \h   HYPERLINK \l "_Toc485920233"  Video Requirements  PAGEREF _Toc485920233 \h   HYPERLINK \l "_Toc485920234"  12.5.1 Video Input  PAGEREF _Toc485920234 \h   HYPERLINK \l "_Toc485920235"  3-D Requirements  PAGEREF _Toc485920235 \h   HYPERLINK \l "_Toc485920236"  12.6.1 Rendering  PAGEREF _Toc485920236 \h   HYPERLINK \l "_Toc485920237"  12.6.1.1 Depth Buffering  PAGEREF _Toc485920237 \h   HYPERLINK \l "_Toc485920238"  12.6.1.2 Shading  PAGEREF _Toc485920238 \h   HYPERLINK \l "_Toc485920239"  12.6.1.3  PAGEREF _Toc485920239 \h   HYPERLINK \l "_Toc485920240"  12.6.2 Textures  PAGEREF _Toc485920240 \h   HYPERLINK \l "_Toc485920241"  12.6.3 3D Performance  PAGEREF _Toc485920241 \h   HYPERLINK \l "_Toc485920242"  12.6.4 Raster Operations  PAGEREF _Toc485920242 \h   HYPERLINK \l "_Toc485920243"  12.6.5 Geometry Operations  PAGEREF _Toc485920243 \h   HYPERLINK \l "_Toc485920244"  12.6.6 3D Non-Requirements  PAGEREF _Toc485920244 \h   HYPERLINK \l "_Toc485920245"  Texgen on Pt  Sprites  PAGEREF _Toc485920245 \h   HYPERLINK \l "_Toc485920246"  Arbitrary clip planes  PAGEREF _Toc485920246 \h  Introduction This is a functional spec that describes the new functionality added to Direct3D in the DirectX 8.0 release.  This includes updates to pixel processing and vertex processing, and the sprite point primitives Market Justification for Procedural Shaders In DX8, procedural models are used for specifying the behavior of the vertex transform and lighting pipeline, and the of pixel texture blending pipeline.  There are 4 key advantages to a program model-based syntax for specifying the behavior of the hardware  1) A more general syntax for specifying common operations. Fixed-function (as opposed to programmable) APIs must define modes, flags etc for an increasing number of operations that need to be expressed.  Further, with the increasing power of the hardware (more colors, more textures, more vertex streams, etc). the token space for the operations times the data inputs becomes combinatorically complex.  A programmability model allows even simple operations like getting the right color and right texture into the right part of the lighting model in a more direct fashion.  The user of the API does not have to search through all the possible modes, they just have to learn the machine and specify the desired algorithm to be performed. For example, the following well-known features can be supported: Basic geometry transformations Simple lighting models Vertex blending for skinning Vertex morphing e.g for tweening Texture transforms Texture generation Environment mapping of various sorts 2) New operations: There are many operations that developers find they need to do that are not supported in current APIs.  In most cases, this is not due to limitations in the capabilities of the hardware, but rather to restrictions in the APIs that interface to it.  In many cases these operations are also simpler and therefore faster than trying to extract the same behavior by contorting a fixed function API to an extent beyond its designers expectations. Examples of such new features expected to  be commonly implemented include: Matrix pallete skinning -character animation with 8-10 bones per mesh. Anisotropic lighting -can only be done currently at the cost of textures for look-up tables. Membrane shaders -ie 1/cos(eye DOT normal): balloons, skin, etc. Kubelka-Munk shaders take into account light that penetrates the surface. Procedural geometry -compositing meshes with procedural ones (spheres) ie to simulate muscle moving under skin. Displacement mapping -modify a mesh with a wave pattern or hump that can be tiled/repeated. s now up to the developers to see what they can discover by innovating here.  While someday more of the chip may be programmable, the vertex and pixel shaders are areas where innovation will be most perceptible and beneficial to end users.  3) Scalability/Evolvability The hardware capabilities are continuing to evolve rapidly.  Programmatic representations can help adapt the API to such evolution since they scale very well.  New features and capabilities can be easily exposed in an incremental way by the following operations Add new instructions Add new data inputs. Add new capabilities from the fixed-function to the programmable portions. Code is the representation that has the best scaling properties for representing complexity.  Further, the amount of code that must change inside D3D is very small for new features added to the shaders. 4) Familiarity Software developers understand programming better than they do hardware.  An API that truly caters to software developers should map hardware functionality into the paradigm that programmers understand best: code. 5) Photo-Real Rendering Heritage There has been a tradition of using programmable shaders in high-end photo-real rendering for many years.   This area is pretty much unconstrained by performance, so programmable shaders represent the ultimate no-compromise goal for rendering technologies.   Further, there is a large amount of support available for shader models like RenderMan and MentalRay, technologies used in many Hollywood movies, such as Jurassic Park, and Bugs Life. 6) Direct Mapping to Hardware Most current 3D hardware (at the vertex processing stage at least) is actually fairly programmable.  The programmability through the API enables the application to map directly to this hardware.  This enables the app programmer to manage the hardware resources according to his requirements.  With a limited set of registers or instructions that can be executed it is very difficult to make a fixed-function implementation that can have all of its features enabled independently from each other.   If you turn on too many features at once that require a shared resource, they can stop working in unexpected (and unexpressable) ways.  The programmable API model follows DirectX s tradition of eliminating this problem by letting the app developer talk directly to the actual hardware, making any such limitations transparent. Note: it is expected that these procedural capabilities in hardware will only be accessible by DX8-class hardware running DX8 drivers.  There are no plans to expose these paradigms on existing DX7y or earlier hardware classes.  Software emulation of vertex processing will be available using KNI and 3DNow host-based processing, and emulation of pixel processing will be available (for prototyping and shader development) via the reference rasterizer. Procedural Pixel Shaders The DirectX8 API paradigm for defining pixel and texture blending operations is a procedural one.  The model includes a definition of a virtual machine architecture and instructions that can define its behavior.  Note that this does not necessarily imply a processor-based implementation.  (in fact, this style of syntax could have been used to define DX6/7 multi-texturing with no change in its operation). This section outlines the update to the pixel processing operations supported by DX8, and the new syntax by which it is controlled Evolution from DX6/7 As appropriate to advancing silicon capabilities and application requirements, the multitexture capabilities of DX6/7 have been extended and made more general in the following ways: 1) A set of general read/write registers has been added to enable more flexible expressions than can be supported by the serial cascade using only D3DTA_CURRENT.  This would have required the specification of a separate result register argument for each stage. 2) The 2x/4x operation modifiers have been broken out into separate flags applicable to any instruction orthogonally. This eliminates the requirement for separate MODULATE, MODULATE2X ops. 3) The BIAS and UNBIAS operation modifiers are now orthogonal as well. This eliminates the requirement for separate ADD, ADDBIAS ops. 4) An optional 3rd argument ARG0 has been added to enable 3 inputs for the following ops: a) MODULATE_ADD now can do ARG1*ARG2 + ARG0 This eliminates the MODULATEALPHA_ADDCOLOR and vice versa ops. b) BLEND now uses Arg0 as the blend proportion between Arg1 and Arg2 This eliminates all the separate BLENDXXXXX instructions. 5) Texture Address modifying operations such as BUMPENVMAP have been broken out from the ColorOp/AlphaOp, and defined as a separate third Operation type specifically for operating texture addresses. In order to support this increased flexibility in a more efficient manner, the API syntax has been changed from DWORD pairs to an ascii assembly code syntax.  This exposes the functionality in a paradigm that is friendly towards application developers: Procedural Pixel Shaders. When using pixel shaders, specular add is no longer specially controlled by a renderstate and is up to the pixel shader to implement if desired.  Fog blending is however, still applied via the fixed-function syntax, but will be completely incorporated into the pixel shader in a future release. Pixel Shader Scope The pixel shader completely replaces the pixel blending functionality specified by the DX6/7 multitexture blending APIs, specifically those operations defined by the D3DTSS_COLOROP, _ALPHAOP, and associated ARGs and modifiers.  When a procedural shader is set, these states are ignored. Texture Stage States The remaining texture states are still observed when pixel shaders are in operation  typedef enum _D3DTEXTURESTATETYPE {      D3DTSS_BUMPENVMAT00   = 7,       D3DTSS_BUMPENVMAT01   = 8,       D3DTSS_BUMPENVMAT10   = 9,       D3DTSS_BUMPENVMAT11   = 10,      D3DTSS_TEXCOORDINDEX  = 11,      D3DTSS_ADDRESS        = 12,      D3DTSS_ADDRESSU       = 13,      D3DTSS_ADDRESSV       = 14,      D3DTSS_BORDERCOLOR    = 15,      D3DTSS_MAGFILTER      = 16,      D3DTSS_MINFILTER      = 17,      D3DTSS_MIPFILTER      = 18,      D3DTSS_MIPMAPLODBIAS  = 19,      D3DTSS_MAXMIPLEVEL    = 20,      D3DTSS_MAXANISOTROPY  = 21,      D3DTSS_BUMPENVLSCALE  = 22,      D3DTSS_BUMPENVLOFFSET = 23,      D3DTSS_TEXTURETRANSFORMFLAGS = 24, // PROJECTED flag is in shader This last setting contains a flag to indicate whether that texture is to be iterated as a projected texture.  In DX8, all quantities are assumed to be iterated in a perspective correct manner, but they may be projected or not based on the setting of this flag. Because these states are not part of the pixel shader, they are not available at shader compile time so the driver can make no assumptions about them (eg differentiate between bilinear and trilinear filtering) at that time.  The application will be free to change these states without requiring the regeneration of the currently bound shader. Further, calls to SetTexture to change the actual image data used cannot cause the pixel shader to stop being valid, so texture (in terms of bit depth) format is free to change.  SetTexture called with a 2-channel texture such as 88DuDv or 88LumAlpha must continue to work as though the 3rd channel were set to 0. Post-Shader Pixel Processing: In DX8, pixel processing such as fog blending, stencil operations and rendertarget blending to occur after execution of the shader.  Render target blending syntax has been updated to support new features as described below. Pixel Shader Inputs In DirectX 8.0, all colors (eg diffuse and specular) declared in the texture registers are assumed saturated (clamped) to 0-1 before use by the shader, since these are the valid inputs to pixel shader. Position is assumed to be clipped before the pixel shader starts. All iterated values are assumed by the API to be iterated perspective correct, but this is not guaranteed in all hardware. Pixel Shader Outputs The result emitted by the pixel shader is the contents of register r0.  Whatever it contains when the shader completes will be sent to the fog stage and render target blender Pixel Shader Machine Architecture The basic machine model is analogous to the vertex processing shaders, in that a set of registers are defined along with a set of operations that can be performed on them.  These operations are expressed as instructions comprised of an operator and one or more arguments (operands). The virtual processor uses the registers defined by the following table: Register Source Min count Max#/instr Vertex color registers (Dn) vertex colors read-only Constant registers     (Cn)  API call read-only Texture registers       (Tn) textures read/write Temporary registers   (Rn) written read/write Each register is a 4-component vector.  The precision of each component is required to be at least 8 bits of fraction with a range from  1.0 to 1.0.  Higher internal precisions such as +/-8 are indicated by a cap <<not present in headers yet>>. No modifiable rounding modes or exceptions are supported.  Multiplication should be supported with  round-to-nearest  to minimize precision loss. Pixel Precision Road Map DX8 requires intermediate computations to maintain at least 8-bit precision for all surface formats, higher precision (12-bit) recommended for in-stage math, saturation to 8-bits between stages. DX9 Will enable support for 12-bit or greater internal computations with integer range of +/-16, saturation between stages will be optional command modifier so it can be disabled.  12-bit per channel surface formats may be supported, and possibly 16-bit. DX10 16-bit per channel surfaces, 16-bit internal computations for blending with 10-12 bits fractional, and some integer and sign bits.   >20-bit floating point color formats may be a possible implementation. min count  column indicates the minimum number of such registers that the implementation must support in order to be able to expose DX8 shading capability. 4 texture address ops 6 blending ops (alpha/color combined) for a total of 12 instructions, but cannot exceed 6 of either kind Input Color Registers The input vertex Color Registers contain color values obtained by per-pixel Gouraud iteration of the color values emitted by the vertex shader (which may in turn receive them from the vertex stream).   A compliant DX8 implementation must support at least 2 of these.  They are read-only, and a maximum of 2 of these colors can be used in any one instruction.  To simulate flat shading, a constant color is more efficient, however, when shademode is FLAT, iteration of both colors is disabled (Note: fog should continue to be iterated).  Ideally, all color iteration should be perspective correct just as texture coordinate iteration is.  A cap will be provided to indicate those implementations that cannot perform perspective correct iteration of colors. Texture Registers There are as many texture registers are there are simultaneous textures supported.  The texture registers are initialized to contain texture colors from the texture sampling units including filtering modes defined by that stage s texture stage state.  The colors come from their corresponding textures as defined by SetTexture( i, tex ) and sampled at the corresponding texture coordinates.  Any texture register that does not have a texture set will be sampled as opaque black (0,0,0,1).  A maximum of 3 texture registers can appear in any single shader instruction.  Texture registers are read/write so they may also be used as temporary registers Temporary Registers The temporary registers are available for use in storing intermediate results.  They are read-write.  A maximum of 3 temporary registers can appear in any one shader instruction.  Shader preprocessing in the debug runtime will fail CreatePixelShader() on any shader that attempts to read from a temporary register that has not been written to by a previous instruction. Constant Factor Registers Descended from the DX6/7 D3DRS_TEXTUREFACTOR constant, the Constant Factor Registers are loadable by the application only via the D3D device method SetPixelShaderConstant(), These are read only.  There are at least 8 constant factor registers defined for use by a pixel shader, but a maximum of 2 may be used in any one instruction.   Pixel Shader Instruction Types There are 2 types of instructions for the pixel shader: texture addressing operations and pixel blending operations.  The blending operations can be used for independent processing of RGB color and scalar alpha. The DX8 virtual machine represents these operations using instructions.  Implementations must support programs of at least 4 address ops and 8 blending instructions to be compliant.  Texture addressing operations (see next section) each consume one slot, but pixel blending (color or alpha) operations can be paired to enable both a color and an alpha instruction in one slot. In DX8, the texture addressing instructions must precede the color blending instructions. The syntax for texture address perturbation operation is included within the shader program itself in the form of texture declarations.  These control how address perturbation operations are applied to the color values sampled from the textures during their pre-loading into the temp register file for use in the body of the pixel shader. Pixel Shader Blending Instructions This section outlines the syntax for color blending using Pixel Shaders.  See section 1.5 for Texture Address Instructions. Pixel Shading Instruction Summary The following pixel blending instructions are supported: mov  d, s0 ; copy add   d, s0, s1 ; sum sub   d, s0, s1 ; difference mul   d, s0, s1 ; modulate mad  d, s0, s1, s2 ; multiply accumulate s0 + s1*s2 lrp    d, s0, s1, s2 ; blend s0*s1 + (1-s0)*s2  = s2 + s0*(s1-s2) dp3   d, s0, s1 ; s0 dot s1 replicated to all channels cmp  d, s0=r0.a, s1, s2 ; d = ( r0.a>0.5 ? s1 : s2 ) For detailed descriptions of these instructions, please see the Pixel Shader Blending Instruction reference in section 2.0 Pixel Shader Input Argument Modifiers The pixel shader instruction arguments (operands) can support modifier flags that affect the input argument before it is processed in the instruction.  These can include one or more of: ALPHA replicates alpha channel to all colors Complements y = 1.0   x.  Unsigned x reqd. Negates the value y = -x.  Signed x reqd. rn_bias Shifts value down by 1/2    y = (x-0.5) rn_sgn SIGNED Shifts down and scales data x2  y = 2*(x-0.5)  copies color blue channel into alpha For example, the LRP instruction can also be implemented as shown: ; Using diffuse alpha to blend between r0 and t0 lrp r0, v0.a, r0, t0 ; can be written (using more clocks) as: sub r0, r0, t0 mad r0, t0, v0.a, r0 Alpha Replicate This input modifier replicates the alpha channel of the affected register to all of its color channels before processing the instruction. Example: mul r0, r0, r1.a ; modulate by alpha channel (grayscale) ; varies only the intensity of color Note: this operator can be used in conjunction with invert or negate.  It is analogous to the D3DTA_ALPHAREPLICATE bit flag in the DirectX 6/7 multi-texture syntax. Invert This input modifier complements the colors in each channel of the specified register.  It is only produces defined results when the input data is unsigned i.e. in the range [0 ..1]. This operation is performed AFTER any other modifiers present on the same argument. Example: mul r0, r0, 1-r1 ; multiply by (1.0  This argument modifier is analogous to the D3DTA_INV flag bit in the DirectX 6/7 multi-texture syntax. Note:  This flag is for working with unsigned data only.  Its use is inconsistent with the _bias, _sgn, and negate modifiers, and so cannot appear on the same register with any of these. Negate Now that signed colors can be used in the pixel pipeline, changing their sign is important.  This input modifier performs a signed inverse (y = -x), or negates the value before it is used in this instruction.  This operation is performed AFTER any other modifiers present on the same argument. Example: mul r0, r0, -v1 ; multiply by  specular color Note:  1-Rn and  Rn are exclusive and cannot be applied to the same register.      rn_bias This input modifier shifts each channel down by 1/2.  ie performs y = (x-0.5) before the register is operated on.    This has the effect of modifying data that was in the range [0..1] to be in the range [-0.5 .. 0.5]. This is commonly used for applying detail textures.  It can also enable the input data to be processed as a signed quantity while reserving dynamic range before overflow clamping that can occur on implementations limited to [-1 .. 1].  Example: add r0, r0, t0_bias ; shift down by 0.5 This example shows how to use add to performs the same operation as D3DTOP_ADDSIGNED in DirectX 6/7 multi-texture syntax. Note:  This modifier is exclusive with Invert, and so cannot be applied to the same register: 1-r0_bias is illegal syntax. Signed Scaling     rn_sgn This input modifier subtracts 0.5 from each channel and scales the result by 2.0 before the instruction is executed.  ie it performs y = (x-0.5)*2.  This has the effect of remapping data that was in the range [0 .. 1] to be in the signed range [-1 .. 1].   This allows subsequent processing of the data to use the full signed dynamic range of the implementation.  This can also be thought of as _biasx2. Example: dp3_sat r0, t1_sgn, v0_sgn ; per-pixel lighting/bump mapping ; assumes bump normals in t1 and light dir in diffuse color v0 This modifer is very commonly used on inputs to the dot product instruction dp3. Note:  This modifier is exclusive with Invert, and so cannot be applied to the same register: 1-r0_sgn is illegal syntax. This input modifier can be used to copy the blue color channel from the rgb pipeline to the alpha pipeline. Example mul r0.a, r1.a, v0.b exponent Pixel Shader Instruction Modifiers Pixel shader instructions can support two modifier flags that affect the output result generated.  These can effectively be considered additional instructions. Shift/scale Modifiers     _x2, _d2 xx_x2 scales output by 2x xx_x4 scales output by 4x xx_x8 scales output by 8x xx_d2 scales output by 1/2 xx_d4 scales output by 1/4 Saturate This modifier clamps the result of this instruction into the range (0.0 to 1.0) for each component.  This operator occurs AFTER the scaling instruction modifier. This is most often used to clamp dot product results, but it also allows consistent emulation of multi-pass methods where the frame-buffer is always in range [0..1], and of DX6/7 -style multi-texture, in which saturation is defined to occur at every stage. Pixel Shader Output Write Masks The output masks are used to indicate whether this result should update either the color, or the alpha component of the result, and therefore use either the color or alpha pipelines for its processing.  These output masks are analogous to the separate COLOROP and ALPHAOP settings in DX6/7 multi-texture blending. These flags are not as general as those used in the vertex shader because the rgb components are always grouped into a single flag, resulting in only 2 different masks, .a and .rgb Color/Vector Write Mask  When specified on the output register, this flag indicates that the operation will update only the 3 color channels of the destination register, (and therefore should be performed in the color (vector) pipeline for this instruction). mul r0.rgb, t0, v0 add r0.a    t1, v1 Alpha/Scalar Write Mask When specified on the destination register, this flag indicates that the operation will update only the alpha channel of the destination register, (and therefore should be performed in the alpha (scalar) pipeline for this instruction). mul r0.rgb, t0, v0 add r0.a    t1, v1 Full Write Mask .rgba This mask requests that the same instruction be applied to both color and alpha channels.  This is the default ie no output mask need be specified at all to achieve the same result.  For example: mul r0, t0, v0 is equivalent to: mul r0.rgba, t0, v0 is equivalent to: mul r0.rgb, t0, v0 mul r0.a    t0, v0 Note that even this last syntax takes only one clock due to pairing between the scalar and vector pipelines. Pixel Shader Instruction Pairing Rules  The processor that executes the pixel shader has 2 parallel pipelines, one for color/vector processing, and one for alpha/scalar processing.  Using these pipelines in parallel results in substantially better processor utilization and performance by reducing the total number of clock cycles required. The output masks can affect how the 2 pipelines are allocated, but there can be ambiguities in order of operations unless explicit pairing syntax is used.  Pairing is indicated by a + sign preceding the 2nd instruction of the pair. mul r0.rgb, t0, v0 ; component-wise multiply the colors add r0.a    t0, v0 ; but add the alpha components Note: The dot product instructions are a special case.  They are fundamentally vector operations and always consume the color/vector pipeline.   Please refer to the descriptions of the dp3 and dp4 instructions below. Pixel Blending Order of Operations The order of operations for processing pixel instructions and modifiers is defined as follows:  First, the input modifiers are applied, then the core instruction is executed, then the output modifier is applied, then the results are written respecting the output mask. Among the input modifiers, the ordering is as follows:  First any bias is applied, then any scaling, then the negate or complement step is performed.  Alpha replication is also performed at this stage. Among the output modifiers, the scales/shifts have higher precedence than the saturation step.  They are applied first, and then any saturation is performed. The net ordering is therefore the following:      Input modifiers: Replicate alpha Scale Negate/complement      Instruction core is executed      Instruction modifiers: _2x, 4x, d2, d4      Output mask DirectX 8.0 Pixel Shader Blending Samples The following samples outline common usage of pixel shading instructions. Diffuse lighting This shader modulates the texture color with the diffuse color from the input vertex. tex t0 mul r0, t0, d0 Monochrome Light Map This shader implements the monochrome light map technique: tex t0 ; declare base texture map tex t1 ; light map need only have an alpha channel mul r0, t0, t1.a ; use only alpha channel Colored Light Map This shader implements the very basic colored light map technique. tex t0 ; declare base texture tex t1 ; declare light map mul r0, t0, t1 Brightening Light Map This shader doubles the output in order to improve the dynamic range of the result.  This enables the light map to both brighten and darken the base texture. tex t0 ; declare base texture tex t1 ; declare light map mul_x2 t0, t0, t1 Gloss Map This shader simulates variable reflectivity or shininess of the base surface.  It expects a glossiness factor in the alpha channel of base texture t0, and an environment map in t1. tex t0 ; base texture map has gloss factor in alpha tex t1 ; environment map mul r0, t1, t0.a ; replicate gloss factor & scale env map by it add r0, r0, t0 ; add base texture to scaled reflection map Diffuse Light Map and Gloss Map Combine colored light map diffuse lighting and gloss/environment map for specular in one pass.  This shader requires >v0.5 as three textures are required. tex t0 ; base texture map has gloss factor in alpha tex t1 ; specular environment map tex t2 ; diffuse light map mul r0, t1, t0.a ; replicate gloss term & scale envt map by it mad r0, r0, t0, t2 ; modulate by diffuse light map and add Diffuse Bump Mapping Perform per-pixel diffuse lighting.  This shader uses the iterated diffuse color (v0) as the light source direction vector, and an rgb texture to store the bump map normals.  These two vectors must have already been transformed into the same coordinate space. tex t0 ; normal map tex t1 ; base texture map (albedo) dp3_sat r0, t0_sgn, d0_sgn ; expand both inputs to signed [-1..1] ; _sat clamps back side to black. mul r0, r0, t1 ; light base texture with bump shading Diffuse Bump Mapping with Range Falloff This shader extends the above with a range-term iterated via the specular color.  It would have to be generated by some vertex level operations.  Light direction is in diffuse.rgb, light intensity (range fall-off) is in diffuse.alpha. tex t0 ; normal map dp3_sat r0, t0_sgn, d0_sgn ; expand both inputs to signed [-1..1] ; _sat clamps back side to black. mul r0, r0, d 0.alpha ; multiply by range fall-off Pixel Shader Texture Addressing Operations Additional pixel shader instructions are provided to enable manipulations of texture address data (as opposed to texture color contents). The textures set at the sampling stages are sampled from the corresponding textures using the sampling, filtering, and wrapping modes selected by the API texture stage states. When these textures are sampled, some operations may be applied to the address used to sample them.  These operations are referred to as texture addressing operations. These constitute a generalization of the texture address perturbation capability supported in DX6/7 via the BUMPENVMAP ColorOperator. In DX8 the set of AddressOps has been extended with additional operators resulting in the following set: Texture Address Op Instruction Summary These are described in more detail in the instruction reference section below. the default, returns sampled texture at this stage texcoord converts corresponding texture coordinate to a color texkill skips this pixel if any texture coordinate is negative texbem performs DX6/7-style BUMPENVMAP operation (2 slots) texbeml performs DX6/7-style BUMPENVMAPLUMINANCE  (2 slots) texreg2gr uses green and red channels as texcoords for this stage texreg2ab uses alpha and blue channels as 2-D texcoords for sampling texm3x2* 3x2 matrix multiply and sample using result (2 slots) texdepth Use g/a as z/w to update depth buffer (2 slots) texm3x3* 3x3 matrix multiply and sample using result (3 slots) texbrdf Evaluate isotropic Bi-directional Reflectance Distribution Fn. Texture address ops define an output argument (result) being the texture register they declare/define.  Some require an input operand to be specified.  This input operand must be a previously defined texture. These can also be thought of as declarations of the texture colors emitted by the texture sampling units into the colorop/alphaop blending shader.  These texture registers can be declared in terms of previously declared textures, but not in terms of later textures, or other pixel color registers. <<These shader declarations should be extended with flags to indicate whether the specified textures are cube maps, volumes, projected textures, etc.>> As might be expected of declarations of the texture colors, there are restrictions on the use of the address op operators: All texture address operations must be declared in the order of the texture they define.  No texture address operation can refer to another texture that is after it, ie of a higher stage number. Precision note: Texture addressing operations need to support sufficient precision for representing texture addresses.  Precision should be sufficient to represent perturbations in the elements of the BUMPENVMAT matrix (for example) that can perturb to a fraction of a texel in an environment map of the maximum texture dimensions supported by the device.  Further, all iterated quantities in these ops must be iterated with perspective correction. Texture Address Input Argument Modifiers The input arguments to texture register declarations can support modifiers that indicate additional processing that is performed during the execution of the  declaration/instruction for the dp3, texdepth, and texmat* operations.  The other texture addressing operators do not support input argument modifiers. _sgn can be appended to the input register argument to indicate that it should be biased and scaled  before use.  This performs the operation y = 2(x-0.5) on the input register before using it in the specified operator.  This operation is commonly used to translate data that is intended to contain signed values in the range [-1..1], but does not because the source it comes from can t support this.  Such data sources include textures tn, iterated colors vn, texture coordinates, or constant factor cn registers. Example: ps.1.1 ; pixel shader version 1.1 tex t0 ; read a texture color texm3x2pad t1, t0_sgn ; note 3x2 instructions must be used texm3x2tex t2, t0_sgn ; pairs   also note _sgn modifier mov r0, t2 Texture Address Operator Modifiers Texture address operations/declarations can support an output modifier like pixel blending ops support, specifically, the _sat modifier. _sat  can be appended to the operator to indicate that the result of the operation should be clamped into the color range (0 to 1.0) upon completion of the operation.  This is commonly required for use in lighting operations. Example: tex t0 ; read a texture color dp3_sat t1, t0_sgn ; dotproduct with texcoords and clamp Texture Address Write Masks No destination/write masks are supported for pixel addressing ops in Pixel Shader model v1.0.  These operations always update all 4 components of the destination register. DirectX8 Pixel Blending Example Syntax This should show the BNF for the parser. We need a syntax mechanism to explicitly indicate alpha/colorop instruction pairing in order to disambiguate dependencies. Texture Sampling Texture sampling and filtering operations are controlled by the standard Textures Stage States for min, mag, mip filtering, and the wrap addressing modes, LODBIAS, etc.  This information is not made available to the driver at shader compile time, so shaders must be able to continue operating when this state changes. The texture type (cubemap, volume map, mipmap, etc). is specified explicitly in the shader syntax.  The application is responsible for setting only textures of the correct type during shader execution. Setting a texture of the wrong type during shader execution will produce undefined results. Pixel Shader Caps Existing Caps flags MaxSimultaneousTextures Indicates the number of textures that can be used in a single pass.  In DX8, this therefore indicates the number of texture registers supported by pixel shaders on this part, and therefore also the number of texture declaration instructions that can be present. MaxTextureBlendStages Indicates the number of blenders available.  This should correspond to the number of instructions supported by pixel shaders on this implementation.   Pixel Shader applications do not need to check the above caps, since they are covered by validation performed during CreatePixelShader() according to the pixel shader version specified (see below). New Caps Flags D3Dcaps8->MaxPixelShaderValue <DWORD> A new cap flag has been added in DX8.  This parameter indicates the internal range of values supported for pixel color blending operations.  Implementations must allow data within the range they report to pass through pixel processing unmodified (unclamped).   This is normally the ends of a signed range, ie an absolute value. 1 indicates the range is [-1.0 to 1.0] 8 indicates the range is [-8.0 to 8.0] 1024,  etc. However, the special value 0.0 indicates that no signed range is supported, and therefore the range is [0 .. 1.0] as in DirectX6/7. Pixel Shader Version D3Dcaps8->PixelShaderVersion <float> There is one cap indicating the level of shader supported (only shaders with version numbers equal to or less than this will succeed CreatePixelShader(). The major version number is encoded in the 2nd byte.  The low byte contains a minor version number.  Due to popular demand from both ISVs and ISVs, a version of the DirectX pixel shader model has been adapted in order to support some DirectX 7.0-class hardware.  This hardware in many cases exceeded the functionality that DX6/7 multitexture exposed, (such as allowing register-based operations), but still supports only a fraction of the DX8 feature set.  The shader version number is used to indicate the level of support that the shader requires. Each implementation sets this cap to indicate the maximum level of shader version it can fully support.  This implies that implementations should never fail create of a valid shader of the version <= the one reported by the cap flag. The currently supported Pixel Shader Versions are summarized in this table: Target Instr. count Instructions required  (include preceding row) texkill, texdepth DX8.1 dp4; texreg2rgb, texdp3, texdp3tex Specifically, DirectX pixel shader version 1.0 has the following requirements: The instruction and register counts as specified in table. All pixel blending/shading operations specified. The following texture addressing operations: texture, texcoord, bumpenvmap, bumpenvmapluminance, reg2AR, reg2GB, mat3x2, and mat3x3 The negate, complement, _bias, _sgn, and .a input modifiers. The _sat, _x2, _x4, _d2 output modifiers. And both the .rgb and .a output masks. Data Types: v1.0 and 1.1 must support minimum 9 bits (s8) for color components, and 16 bits for texture coordinate addresses. v2.0 or greater must support at least [-8..8] dynamic range and arbitrarily interleaved color and address ops, and the dp4 instruction. Pixel Shader API Methods: HRESULT IDirect3DDevice8::SetTextureStageState(DWORD dwStage, D3DTEXTURESTAGESTATETYPE dwState, DWORD dwValue); This is used for the legacy style and the new style. For the legacy, this continues to be as before. For the DX8 style, this programs only the TIS. The COLOROP, ALPHAOP, COLORARG1, COLORARG2, ALPHAARG1 and ALPHAARG2 are ignored if a PixelShader is set. This is analogous to the material and light parameters being ignored by the vertex pipe when a vertex shader is set. HRESULT IDirect3DDevice8::SetTexture(DWORD dwStage, LPDIRECTDRAWSURFACE8 pTexture);  This is used for the legacy style and the new style. In the legacy style this is as before. In the new style, it is used to set the texture in the TIS. HRESULT IDirect3DDevice8::CreatePixelShader(LPDWORD pdwFunction, LPDWORD pdwHandle); This is used only in the DX8 style programming. The user passes in a declaration which are the address ops, and the Function which are the blending ops. D3D returns the Shader handle. The shader validation is done here. It is an error to have either the declaration or the function to be null. A given shader may fail creation due to constraints of the DX8 hardware model.  The following error return values are supported: D3DERR_EXCEEDEDINSTRUCTIONCOUNT D3DERR_INVALIDOPERATION D3DERR_INVALIDOPERAND The above 2 errors can occur at any instruction including within shader  declarations , such as texture address ops. HRESULT IDirect3DDevice8::SetPixelShader(DWORD dwHandle); This is the handle obtained from the CreatePixelShader. If the handle is null, it means that the legacy pipeline be used. HRESULT IDirect3DDevice8::DeletePixelShader(DWORD dwHandle); Deletes the pixel shader from its internal entry. HRESULT IDirect3DDevice8::SetPixelShaderConstant(DWORD dwRegisterAddress,LPVOID lpvConstantData,DWORD dwConstantCount); Pixel Shader Color and Alpha Blending Instruction Reference These are the instructions for color blending.  All of these operations are performed component-wise.  Move/Copy Copies the source register to the destination register. mov   d, s ; copy s to d ( d = s ) Addition Loads the result register with the sum of the two colors in the source operands. add   d, s1, s2 ; sum d = s1 + s2 Subtraction Loads the result register with the difference of the two colors in the source operands. sub   d, s1, s2 ; difference Multiply/Modulate Loads the destination register with the component-wise product of the two colors in the source operand registers.  mul  d, s1, s2 ; modulate d = s1*s2 Multiply-Add Performs a multiply-accumulate operation.  Takes the last 2 arguments, multiplies them together, and adds them to the remaining input/source argument, and places that into the result register.  mad  d, s0, s1, s2 ; d = s0 + s1*s2 Linear Interpolation Blend Linearly interpolates between the 2nd and 3rd source registers by the proportion specified in the 1st source register. lrp d, s0, s1, s2 ; d = s0*s1 + (1-s0)*s2 = s2 + s0*(s1-s2) Conditional In DX8, the conditional instruction can only compare r0.alpha vs 0.5.  If the r0.alpha  is > 0.5, then the 1st source is returned as a result, otherwise the 2nd source is returned.  Again, s0 can only be r0.a in DirectX Pixel Shader Version 1.0. cnd d, r0.a, s1, s2 ; d = ( r0.a >0.5 ? s1 : s2 ) 3-Dimensional Dot Product  Loads the destination register with the 3-element vector dot-product of the two colors in the source operand registers.  Generates a scalar result, but replicates it to all specified output channels. dp3 r, s1, s2 ; s1 dot s2 replicated to all channels NOTE: The dp3 instruction is a fundamentally a vector operation, and is therefore always performed in the vector pipeline.  Using it with the .a modifier just indicates that its result should be propagated to the alpha channel as well. In other words dp3 can be specified as an alpha-op only when it is also the color op, and must use the same arguments.   dp3 r0.rgb, t0, v0 dp3 r0.a,   t0, v0 or equivalently, dp3 r0, t0, v0 will cause the grayscale result of the dp3 operation to be copied into both the color and alpha channels of r0. A different instruction can be specified in the alpha channel of the result, but <<may also need the same arguments>>?? dp3 r0.rgb, t0, v0 ; is legal mul r0.a,   t0, v0 mul r0.rgb, t0, v0 ; Is not legal and  dp3 r0.a,   t0, v0 ; may produce undefined results. This instruction usually benefits from the _sgn modifier applied to it s input arguments if they have not already been expanded to signed dynamic range.  When used for lighting, the _sat instruction modifier is often used to clamp the negative values to black.  For example: dp3_sat r0, t0_sgn, v0_sgn ; t0 is bumps, v0 is light dir 4-Dimensional Dot Product  Loads the destination register with the 4-element vector dot-product of the two input source operand registers.  Generates a scalar result and replicates it to all specified output channels. dp4 r, s1, s2 ; s1 dot s2 replicated to all 4 channels Since this instruction uses all 4 channels of its input data, it consumes both the 3-vector and scalar pipelines.  Therefore, no different operation can be paired with it. For example: tex     t0 ; sample normal from normal map dp4     r0, t0_sgn, v0_sgn ; dot with light direction v0 will replicate the result to all 4 channels of r0. Output masks still work, so specifying an alpha output mask as in: tex     t0 ; sample normal from normal map dp4     r0.a, t0_sgn, v0_sgn ; dot with light direction v0 is legal, and will update only the alpha channel of r0, leaving the rgb components unaffected, but NO .rgb instruction can be specified.  (except dp4). Conversely,  dp4 r0.rgb, t0, v0 is also legal.  The Alpha of r0 is unmodified, but no other alpha op can be specified. Pixel Shader Texture Addressing Instruction Reference Texture This operator samples a color from the texture and copies it into the corresponding register. tex r0 ; Declare register 0 as color from the ;     texture currently set at stage 0. Texture Coordinate                texcoord Converts the iterated texture coordinate assigned to this stage to a color for use in blending.  Allows use of that texture coordinate as an additional gouraud iterated (guaranteed perspective correct) color.  The example shows this. texcoord, t0 ; Declare register 0 as a color from it's texcoords Since any quantity can be mapped by the vertex shader into a texture coordinate, this can be used to feed arbitrary data to the pixel shader.  Position, normal, light source direction, etc. are obvious examples. BUMPENVMAP texbem Takes color defined by the input argument register as DuDv perturbation data.  It transforms it's U and V components by the 2D bumpenvmat matrix, adds them to the current stage's texture coordinates and samples the current stage's texture there. tex  t0 ; read texture t0 as DuDv bumpmap ; computes u = u1 + mat00*t0.r + mat01*t0g texbem t1, t0 v = v1 + mat10*t0.r + mat11*t0g ; and then samples at u,v    t0.b is ignored This operation always interprets Du and Dv as signed quantities, so that the input modifier _sgn is not required to be specified on the input argument.  Applications: This instruction can be used for a variety of techniques based on address perturbation, including per-pixel environment mapping, diffuse lighting (bump mapping), environment matting, etc.  BUMPENVMAPLUMINANCE texbeml Takes color sampled by the preceding stage as DuDvL perturbation data with luminance information.  ie transforms it's red and green components by the 2D bumpenvmat matrix, and adds them to the current stage's texture coordinates and samples this texture at the resulting 2D address.  Then it applies a luminance correction using L, and the API-specified LUMINANCE and BIAS texture stage values. tex     t0 ; define t0 to get a 3-tuple DuDvL ; computes  = u + mat00*t0.r + mat01*t0.g texbeml t1, t0  = v + mat10*t0.r + mat11*t0.g ; and then samples at u   t0.b is ignored ; then applies luminance correction This example shader defines the color in temp register 1 as the color from the texture map set at stage 1 indexed by an address perturbed by the values of the red and green channels sampled from the map set on stage 0. Remapping Red/Green reg2gr Samples this stage's texture at the 2-D coordinates specified by the red and green components of the specified input color.  Can be used for color space remapping operations. Remapping Alpha/Blue reg2ab Samples this stage's texture at the 2-D coordinates specified by the blue and alpha components of the specified input color.  Can be used for color space remapping operations. Remapping RGB reg2rgb Samples this stage's texture at the 3-D coordinates specified by the RGB components of the specified input color.  Can be used for color space remapping operations using cube maps or volume textures. 3-Dimensional Dot Product texdp3 Computes the dot product between the input color argument, and the texture coordinate vector of this stage.  Replicates scalar result to all four color channels.  This can be used for per-pixel lighting computations as shown: tex t0 ; Define t0 as a std 3-vector,  ie a normal texdp3_sat t1, t0_sgn ; Define t1 to be dot of t0 and t1's texcoords The texture set at stage 0 should be a 2-D texture using RGB components to store surface normal vectors.  Note that these are rescaled to signed data range by the _sgn arg modifier. Texcoords for t1 should be set to normalized light direction vector in surface local coords. Note that no texture is sampled from stage 1.  Any texture set there will be ignored. 4-Dimensional Dot Product texdp4 Computes the 4-D dot product between the input argument and the texture coordinate vector of this stage.  This instruction takes over the alpha pipe, so a different operation may not be specified there. tex t0 ; Define t0 as a 4-component vector texdp4 t1, t0_sgn ; Define t1 to be dot of t0 and t1's texcoords Bi-directional Reflectance Distribution Function texbrdf Takes as input the results from the two previous texture stages (t0,t1). Treating both 32-bit results as two unsigned 16-bit numbers on 0.0 .. 1.0,  (h0,l0, h1,l1), perform a 3D texture lookup using texture coordinates ( h0, h1, (signed)(l0 - l1) ). When the two previous texture stages contain angular coordinates of the eye and normal vectors, this mode can be used to calculate Isotropic BRDF Texture Coordinate-Based Clipping   texkill This instruction can be used to implement arbitrary clip planes in the rasterizer. When using vertex shaders, the application is responsible for applying the perspective transform.  This can cause problems for the arbitrary clipping planes, since if it contains anisomorphic scale factors, the clip planes would need to be transformed as well.  Therefore, it is best to provide an un-projected vertex position for use in the arbitrary clipper, which is the texture coordinate set identified by the TEXKILL operator. 3x2 Matrix Multiply texm3x2 Performs a 2x3 matrix multiply on an input color vector.  Takes the specified input color (r0), and dot products it with that stage's texcoords (u,v,w) in (r1) to produce a u coordinate.  Takes that same input color (r0) dot products it again by the texture coordinates of this stage (r2) to compute v.  Then this stage's texture is sampled at (u,v) to produce the final color.  No texture is sampled (or need be set at) the preceding stage (r1), and any operator assigned to it is overridden by this one. tex t0 ; Define t0 as a std 3-vector for later use texm3x2pad t1, t0 ; perform 1st row of matrix multiply texm3x2tex t2, t0 ; perform 2nd row of matrix mult. to get a ; 2-vector to sample texture 2 with. A bump (normal) map should be set on stage 0, and a standard 2-D texture should be set on stage 2.  Any texture set at stage 1 is ignored. For example, in the following shader, a base texture is lit by modulating with a diffuse bump map, and adding an exponentiated specular. Stage0 gets the base texture set, stage1 gets the normal map, stage 2 gets the normal map again. ; texture map texcoords tex     t0 ; base texture map coords texm3x2 t1, t0_sgn ; n map L-vector texm3x2 t2, t0_sgn ; n map H-vector tex2rg  t3, t2 ; 1-D exp map lookup Depth Update texdepth Operates as above, but instead of using the resulting u,v values to perform a read of the texture, it divides to compute u/v, which can be interpreted as z/w = perspective correct depth, and then stores that value as z the coordinate for the pixel. This is used for image-based rendering operations.  It returns opaque black (0,0,0,1) as the result color (t1 and t2 below), but applications should not rely on this (ie should consider this result  undefined ).  The texture coordinates used at stages 1 and 2 should be the transform applied to the displacement value.  These are used to transform the displacement from tex t0 into eye-space z/w to perturb the z-buffer to obtain realistic intersections between bump-mapped surfaces. tex t0 ; Define t0 as a std 3-vector for later use texm3x2pad t1, t0 ; perform 1st row of matrix multiply = Z texdepth   t2, t0 ; perform 2nd row of matrix multiply = W ; divide 1st row by 2nd row (Z/W).  ; Use result as depth for this pixel.  ; clear t1,t2 3x3 Matrix Multiply texm3x3_* The API supports a number of methods to perform a per-pixel 3x3 matrix multiply on the vector sampled from a texture.  The 3x3 matrix is comprised of the texture coordinates from 3 consecutive texture declaration stages.  These matrix multiply operations are constructed from multiple texture address ops instructions/declarations.  In all the examples below, texture coordinate set 0 positions the bump map.  Texture coordinate sets 1, 2, and 3 are the rows of the 3x3 matrix. NOTE: for all of the following, a bump (normal) map should be set on stage 0, and cubemap texture should be set on stage 3.   Texm3x3pad is used in combination with other texture address op declarations to perform matrix multiples.  It is used to represent stages where only the texture coordinate is used.  These corresponding stages have no textures bound, and no sampling will occur.  The input argument t0 should still be specified.  The following cases show examples of the use of this instruction.   Texm3x3tex Is used in combination with PAD ops to perform very basic matrix multiplies.  It is used as the last of the 3 steps comprising the multiply, and accesses the texture bound at the 4th stage using the 3-D result. tex t0 ; Define t0 as a std 3-vector for later use. texm3x3pad t1, t0_sgn ; 1st row of matrix multiply texm3x3pad t2, t0_sgn ; 2nd row of matrix multiply texm3x3tex t3, t0 ; 3rd row of matrix multiply ; and then sample texture using 3-D result mov r0, t3 ; emit result dir. texm3x3spec is for specular reflection/environment mapping.  It takes the resulting post-transformed vector, and uses it as the normal to reflect an eye-ray vector.   [This eye-ray vector is always constant color c0.]   It then uses the result as an address to look up in a cube map texture set at that stage, which should contain a specular environment map.  In this case, any textures set at stages 1 or 2 are ignored. tex t0 ; Define t0 as a std 3-vector for later use. texm3x3pad t1, t0 ; 1st row of matrix multiply texm3x3pad t2, t0 ; 2nd row of matrix multiply texm3x3spec t3, t0, c0 ; 3rd row of matrix multiply, do reflection ; calculation, and sample texture 3 mov r0, t3 ; copy final result to output color TEXM3x3VSPEC is for specular reflection/environment mapping where the eye-vector is not constant.  It works just as TEXM3x3SPEC, except that the eye-ray is taken from the w-components of the 3 sets of texture coordinates used as rows of the matrix, instead of from a special register. tex t0 ; Define t0 as a std 3-vector for later use. texm3x3pad t1, t0 ; 1st row of matrix multiply texm3x3diff t2, t0 ; 2nd row of matrix multiply  texm3x3vspec t3, t0 ; 3rd row of matrix multiply and sample ; texture2, then do reflection calculation ; using eye ray using eye-ray in w ; and sample texture 3 specular map mov r0.rgb, t3 ; put specular color into result mov r0.a,   t2 ; put diffuse color into alpha channel ; use with SRCBLEND = ONE, DESTBLEND = SRCALPHA ; on diffuse texture applied in preceding pass ; to modulate by the monochrome diffuse and add the specular Frame-Buffer Blending Update The render target (usually the frame-buffer) blending syntax has been updated to support new operations, as well as separate frame-buffer operations for alpha and color Additional RenderTarget Blending Operations Many implementations can now support other operations on the results of the products in the frame-buffer blenders.  A new renderstate is defined to select some alternative operations. D3DRS_DESTBLENDOP New frame-buffer blending operations The new frame-buffer blending operations are as follows D3DDESTOP_ADD  // <the default> D3DDESTOP_SUBTRACT // difference between them D3DDESTOP_REVSUBTRACT // swap the order, then subtract D3DDESTOP_MIN // select min of the two D3DDESTOP_MAX // select the max of the two There is a cap bit defined for this: D3DPRIMCAPS.MiscCaps | D3DPMISCCAPS_DESTBLENDOPS = 0x00000080L An implementation must support all 4 of the new ops in order to set the cap bit.  Support only for ADD is insufficient. Render Target Blending Factor There is a new operand available in the render target (destination) blending stage.  It is a separate constant color defined by the new renderstate: D3DRS_DESTFACTOR, <dword> This accepts a 4-byte RGBA color value (like TSS_TFACTOR does). It is accessed in the rendertarget blenders as two new operands available for the SRCBLEND and DESTBLEND.     D3DBLEND_FACTOR         = 14,     D3DBLEND_FACTORALPHA    = 15, Caps: There is a cap bit defined for this.  D3DPRIMCAPS.dwMiscCaps | D3DPMISCCAPS_DESTBLENDFACTOR = 0x00000200L Separate RenderTarget Blending for Alpha Channel Some implementations can support separate operations in the alpha and color channel of the frame-buffer blender.  This capability is enabled by the renderstate D3DRS_SEPARATEDESTALPHAENABLE When set to false (ie, by default) the render target blending factors and operations applied to alpha are forced to be the same as those defined for color.  This mode is effectively hardwired to false on implementations that don t set the cap. Two new renderstates are defined to control the factors in the alpha channel of the render target blenders: D3DRS_SRCBLENDALPHA, and D3DRS_DESTBLENDALPHA Like the D3DRS_SRCBLEND and D3DRS_DESTBLEND, these can each take one of the following values: D3DBLEND_ZERO D3DBLEND_SRCCOLOR D3DBLEND_DESTCOLOR D3DBLEND_SRCALPHA D3DBLEND_DESTALPHA Plus the new states D3DBLEND_FACTOR D3DBLEND_FACTORALPHA and the INV of all of the above. D3DRS_SRCBLENDALPHA Defines a factor multiplying input alpha in render target blending.  This value is ignored unless D3DRS_RTSEPARATEALPHAENABLE is true, since the op defined for color is used for alpha also in that case. D3DRS_DESTBLENDALPHA Defines a factor multiplying input alpha in render target blending.  This value is ignored unless D3DRS_RTSEPARATEALPHAENABLE is true, since the op defined for color is used for alpha also in that case. An additional renderstate is also provided to control the operation used with the alpha channel of the blender. D3DRS_DESTBLENDOPALPHA The render-target blending operation that applies to the alpha channel.  This value is ignored unless D3DRS_RTSEPARATEALPHAENABLE is true.  This can take any of the values defined above for D3DRS_DESTBLENDOP Caps: There is a cap bit defined for this.  D3DPRIMCAPS.dwMiscCaps | D3DPMISCCAPS_RTBLENDSEPARATEALPHA = 0x00000100L Implementations must be able to support at the full set of factors for alpha channel operations to set this cap bit. If an implementation sets both this cap and the _DESTBLENDOPS cap it must support the new operations on the alpha channel independently. Summary: The complete algorithm applied is: CRT = Cin*SRCBLEND  (DESTBLENDOP)  CRT*DESTBLEND ART = Ain*SRCBLENDALPHA  (SRCBLENDOPALPHA)  ART*DESTBLENDALPHA Where: CRT is the RGB color value currently in the render target surface. CIN is the RGB color value currently in the render target surface. ART is the alpha channel value currently in the render target surface. AIN is the alpha channel value currently in the render target surface. DirectX9 Notes In DX9, fog blend, stencil, and rendertarget blending operations will be assumed to be incorporated into the shader language itself.  The current fixed-function hardware specular, fog, and framebuffer alpha blenders will be assumed to have been generalized to support the full set of instruction operations on arbitrary registers by that timeframe.  Applications in that timeframe will be responsible for using these blenders to apply any desired fog, specular add, or alpha blending effects via the shader program.  However, they need to be aware that the render target color may only be available to the last 2 instructions in the shader on most hardware. In DX9, Z-buffer current value and current iterated z (as a position register?) will be made available to any stage of the pixel pipeline.  It is expected that hardware should flush the pixel pipeline if there are commands in it that update the z-buffer that is currently being read.  This will happen only rarely (once per frame) in most usage scenarios.  The most common use for z is to scale the transparency of a sprite to account for volumetric density effects.  At this point, z-writes will most likely be disabled, as the opaque objects should already have been drawn. Stencil operations will be performed as compare operators. Additional texture sampling operations are expected in future hardware to include at least a 3x3 kernel with programmable weights. Other features below indicated with grey background are cut from DX8 and will appear in DX9 or later release.  The DDI protocol is still designed to handle these, and future hardware should be designed with them in mind. Programmable Vertex Processing Introduction Application Usage Scenarios: The following are examples of algorithms that may be implemented on procedural vertex shaders. Matrix Palette Skinning A set of  8-10 matrices can be loaded into the constant registers as a palette.  Each processed vertex can be transformed by a subset of these matrices, and blended into a final result using a vertex-level weight.  One convenient implementation is to use a packed 4-byte integer array to store the matrix palette addresses of 4 matrices that the vertex is influenced by.  A standard 4-D component (like a DX7 texcoord set) can contain the 4 weights that those matrices are blended by. Procedural Geometry A muscle moving under skin can be simulated by an ellipsoid computed from a sphere with scaling along 3 axes.  This can be evaluated, and used to perturb the position of incoming mesh vertices.  The muscle ellipsoid can be scaled and tranlated by updating the constant registers containing it s relative position and scale factors. Wave Modeling A shape such as a quadratic hyperboloid can be generated in the unit square and mapped repeatedly onto incoming geometry.  Take input vertex x,y values, map them into unit square using the FRC macro, compute local hyperboloid elevation, and add to input vertex z value.  This can be used to simulate waves on an ocean, etc. Integration of the Vertex Shader into the Vertex Pipeline: When in operation, the programmable vertex shader replaces the functionality of transformation and lighting.  D3D state information regarding transformation and lighting is ignored in this case.  When the shader is disabled and conventional processing is returned, all current states will apply again. The programmable shader is assumed to be invoked on data that has already been tessellated by any higher-order surface tessellation scheme operating.  Implementations that perform surface tessellation post shader processing must do so in a way that is not apparent to the application and shader code.  Since no semantic information is normally provided before the shader, a special token is used to identify which input stream component represents the base position relative to which all other components are interpolated.  No non-interpolable data channels are supported.  On output, the vertex shader must generate vertex position in homogeneous clip space. Additional data that could be generated includes texture coordinates, colors, fog factor and so on. The standard graphics pipeline processes vertices output by the shader. This processing includes such tasks as: Primitive Assembly Clipping against the frustum and user clipping planes Homogeneous divide Viewport scaling Backface and viewport culling Setup Rasterization Programmable geometry is a mode within the API. When enabled, it partially replaces the vertex pipeline and when disabled, the API has normal control. Execution of vertex shaders does not change the internal D3D state, and no D3D state is available for shaders. CreateVertexShader() with pdwFunction equal to NULL is used to create a shader for fixed-function pipeline. When pdwFunctionis not NULL, the shader is programmable. SetVertexShader() call is used to set the current active shader, which defines to use programmable or fixed-function pipeline. Any tessellation of higher-order surface primitives is logically before execution of the vertex shader. While it is not supported in DX8, displacement mapping is considered a tessellation step for purposes of future discussion.  Arbitrary clip planes note DX8 will support a mode in which the graphics system should cull against, but need not clip against the arbitrary clip planes.  This is for use when the application knows that the z-buffer will end up handling clipping operations due to rendered geometry.  It enables the hardware to avoid potentially expensive computations in the vertex engine that could be handled by the z-compare in the rasterizer. Vertex Shader Machine Architecture Resource Summary: The registers available for use by a DX8 vertex shader are guaranteed to be at least the following: count #per inst Input Vertex Registers  vn 16 vectors     1 read-only Constants Registers     c[n] 96 vectors     1 read-only Temporary Registers    rn 12 vectors     3 read/write Address Registers        an 1 scalar     1 write/use only Instruction Storage 128 instructions The Output Registers are defined by the register model of the raster shader, which must support the following minimum counts. Position 1 4-vector Colors 2 4-vectors TextureCoords 4 4-vectors 1 scalar float Point size 1 scalar float All registers are 4 component floating-point vectors. Vector elements are designated as x, y, z and w in this document, but no semantics are implied. When using vertex shaders on an implementation without pixels shaders (ie that supports only the DX6/7 pixel processing model), the available output registers are: Position 1 vector required for clipping Color 2 vectors diffuse, specular Texcoords 2 vectors dwMaxSimultaneousTextures Vertex Input Registers Each vertex from the input vertex stream(s) is loaded into the Vertex Input Registers before the shader is executed. The Vertex Input Registers are a register file consisting of 16 4-component floating-point vectors are designated as v0   v15. These are read only. Any single instruction may only access one Vertex Input Register, however, each source in the instruction may independently swizzle and negate that vector as it is read. A declaration passed to CreateVertexShader() call, defines mapping between source vertex stream and Vertex Input Registers.  For the fixed-function pipeline, the input registers have the following fixed mapping: D3DVSDE_POSITION     D3DVSDE_BLENDWEIGHT D3DVSDE_BLENDINDICES D3DVSDE_NORMAL     D3DVSDE_DIFFUSE      D3DVSDE_SPECULAR    D3DVSDE_TEXCOORD0  D3DVSDE_TEXCOORD1  D3DVSDE_TEXCOORD2    D3DVSDE_TEXCOORD3    D3DVSDE_TEXCOORD4    D3DVSDE_TEXCOORD5    D3DVSDE_TEXCOORD6    D3DVSDE_TEXCOORD7    Constant Registers There are 96 4-component floating-point vectors comprising the Constant Register file. These Constant Registers are designated as c[offset] or c[offset + A0.x]. The constant register file is read-only from the perspective of the vertex shader. Any single instruction may only access one Constant Register, however, each source in that instruction may independently swizzle and negate that vector as it is read. It may be read via an absolute address, or addressed relative to an address register see 2.2.5.  Reads from out-of-range registers return (0.0, 0.0, 0.0, 0.0). The constant register file has its data loaded by calling the API functions SetVertexShaderConstant() or SetVertexShaderConstants() . Alternatively, when creating a shader, user can specify what constants should be loaded during SetVertexShader() call.  Temporary Registers The temporary registers are grouped into a file of 12 4-D floating point vectors. These have single write and triple read access.  Therefore, an instruction can have as many as 3 temporary registers in its set of input source operands. No values in temp registers that may remain from preceding invocations of the shader can be used.  Shaders that read a value from a temporary register before writing to it will fail CreateVertexShader(). Address Registers There is only 1 scalar address register in DX8. The address register (designated as A0.x) may be used as signed integer offset in relative addressing into the Constant Register File. Reads from out of the legal range will return (0.0, 0.0, 0.0, 0.0). Address registers may be a destination only for the MOV instruction. Address registers cannot be read by the shader, just used in relative addressing of the constant register file. Addresses read from outside the range of constant registers supported will return garbage. Shaders that attempt to use the address register before setting it will fail CreateVertexShader(). Output Registers Output Registers are defined as the inputs to the rasterizer.   Generated data is written into the Output Register File. It has write-only access. These are indicated by the preceding lower case   to make it clear these are write-only. - position in homogeneous clipping space (Must be written by the vertex shader).   - fog factor to be interpolated and then fed to fog table (only scalar fog.x is used) - point size (only scalar psize.x is used) - array of output data registers that will iterated and fed directly to the pixel shader.  Typically used for colors  - texture coordinates, an array of output data registers that will be iterated and used as texture coordinate by the sampling stages feeding the pixel shader.   Otherwise these are the same as the above. Writes to other destinations are ignored. Instructions The vertex shader program can consist of up to 128 instructions. Instructions can have a maximum of three input arguments (source register operands).  Each source operand may be arbitrarily swizzled on read, including broadcast/replicate. Each source operand may be negated. Writes to the destination registers can include masking of individual components, i.e. only the specified components (x,y,z,w) are updated.  No swizzling or negation is supported on writes; therefore the output masks must be in the x-y-z-w order. The software emulated front-end will use the masks on the output register writes to detect what parts of the output vertex a shader modifies and compute an output FVF accordingly for submission to hardware for rasterization-only use. Here is the list of supported instructions.  These each consume one instruction slot from the instruction count limit. copy inputs to outputs multiply and add multiply multiplicative inverse of source.w (21-bit) inverse square-root of source.w  (21-bit precise) 3-element dot-product 4-element dot-product returns min of both args for each component returns max on per component basis returns 1.0 if <  else 0.0 for each component returns 1.0 if >= else 0.0 for each component exponential for specular lighting 10-bit precision inverse of above   (10-bit precision) lit colors given diffuse and specular dot (1, x, x^2, 1/x) given 1/x and x^2  For distance attenuation Here is the list of supported macro instructions These are comprised of multiple of the preceding instructions and are provided for convenience.  They consume more than one instruction slot from the instruction limit with the amount listed in parentheses. m44(4) m43(4) m34(3) m33(3) m32(2) frc(3) fractional portion [0.0 to 1.0) of each component exp(12) log(12) Differences vs pixel shader. In DX8, the LRP operator is not supported in the vertex language, and the DP3 operator does not automatically clamp negative results to 0.0. Example Programming Syntax: For the purpose of presenting sample code, example syntax is defined here.  This syntax is parsed by a utility routine above the API in order to generate the standard tokens transmitted to the driver.  Alternative syntaxes may be supported by other parsing utilities, or the tokens may be specified directly. The conventions for this syntax are shown below, followed by a grammar representation. Registers are named as follows: - temporary register r4 vector - x component of register r4 vector r5.xyz - xyz component of register r5 vector - y component of vertex source position The Constant Registers can be accessed as c[offset] (absolute) or c[A0.x+offset] (relative). In the relative case, a 32 bit signed address register is added to the offset. Reads from out of range addresses are recommended to return a result of  (0,0,0,0) in all hardware and software implementations, but as this cannot be relied on, applications must assume that such results are  undefined .  Writes to such addresses are ignored. Writes to the temporary data and output Registers can be masked. Each component is written only if it appears as a subscript. Source operands may be swizzled before use via four subscripts (from xyzw): .xyzw means source (x, y, z, w) -> input(x, y, z, w) .zzxy means source (x, y, z, w) -> input(z, z, x, y) .xxxx means source (x, y, z, w) -> input(x, x, x, x) Omitting all components is the same as specifying all components. R6 is the same as R6.xyzw .x is the same as .xxxx .y is the same as .yyyy .z is the same as .zzzz .w is the same as .wwww Any source operand may be negated by putting a   sign in front. add r4,   r1, r4 ; result goes into r4 add oPos, r1, r2 ; result goes into the output buffer Colors are mapped into xyzw as rgba respectively. Example Vertex Shader Syntax Grammar Vertex Shader Examples The following examples are shown in a representative syntax that would be parsed by a utility routine above the API in order to generate the token bit pattern transmitted to the driver. ; Skinning with copying texture coordinates from vertices ; c[0]   c[3]   Transformation matrix 1 ; c[4]   c[7]   Transformation matrix 2 ; v0   - position ; v1.x - weight ; v2   - diffuse ; v3   - texture dp4 r0.x, v0, c[0]          ; transform using first matrix dp4 r0.y, v0, c[1] dp4 r0.z, v0, c[2] dp4 r1.x, v0, c[4]          ; transform using second matrix dp4 r1.y, v0, c[5] dp4 r1.z, v0, c[6] add r2, r0, -r1             ; expp oPos.w,r0              ; pos.w = 1.0 mad oPos.xyz, v1.x, r2, r1  ; pos.xyz = weight*(r0-r1) + r1 mov texture[0], d3 D3Dcaps8->MaxPrimitiveCount max prims in drawprim call D3Dcaps8->MaxVertexIndex for 32-bit indices since 4G is too high D3Dcaps8->MaxStreams max streams usable at one time D3Dcaps8->MaxStreamStride max stride for SetStreamSource D3Dcaps8->VertexShaderVersion Vertex Shader Version Number D3Dcaps8->MaxVertexShaderConst Number of Vertex Shader constant registers There is one cap indicating the level of shader supported (only shaders with version numbers equal or less than this will succeed CreateVertexShader().  This level of shader is specified to CreateVertexShader as the 1st token in the shader token stream. Devcaps->dwVertexShaderVersion DX7 functionality is 0.0 DX8 is 1.0 DX9 is 2.0 Error handling Out of range address causes undefined read behavior. Vertex Shader API Methods: HRESULT IDirect3DDevice8::CreateVertexShader(LPDWORD pdwDeclaration,LPDWORD pdwFunction,LPDWORD pdwHandle); This is used only in the DX8 style programming. The user passes in a declaration which defines the parallel DMA streams used, and the function which are the blending ops. D3D returns the Shader handle. The shader validation is done here. It is an error to have both the declaration and the function null. A given shader may fail creation due to constraints of the DX8 hardware model.  The following error return values are supported: D3DERR_EXCEEDEDINSTRUCTIONCOUNT D3DERR_INVALIDOPERATION D3DERR_INVALIDOPERAND The above 2 errors can occur at any instruction including within shader  declarations , such as texture address ops. HRESULT IDirect3DDevice8::SetVertexShader(DWORD dwHandle); This is the handle obtained from the CreateVertexShader().  The handle passed can also be a valid FVF code, which means that the legacy pipeline is to be used. HRESULT IDirect3DDevice8::DeleteVertexShader(DWORD dwHandle); Deletes the Vertex Shader from its internal entry. HRESULT IDirect3DDevice8::SetVertexShaderConstant(DWORD dwRegisterAddress,LPVOID lpvConstantData,DWORD dwConstantCount); Vertex  Shader Instruction Set Reference Format: destination, source0, source1 Description: Add sources into destination Operation: Register s0 = EvalSource(source0) Register s1 = EvalSource(source1) Register r; r.x = s0.x + s1.x; r.y = s0.y + s1.y; r.z = s0.z + s1.z; r.w = s0.w + s1.w; Write(r, destination) Examples: R6, R5, c[10] r4, r6, v2.w 3-D  Dot Product Format: destination, source0, source1 Description: Compute three-component dot product of the sources into destination. Operation: Register s0 = EvalSource(source0) Register s1 = EvalSource(source1) Register r; r.x = r.y = r.z = r.w = s0.x * s1.x + s0.y * s1.y  + s0.z * s1.z ; Write(r, destination) Examples: r6, r3, r4 Four Component Dot Product Format: destination, source0, source1 Description: Compute four-component dot product of the sources into destination. Operation: Register s0 = EvalSource(source0) Register s1 = EvalSource(source1) Register r; r.x = r.y = r.z = r.w = s0.x * s1.x + s0.y * s1.y  + s0.z * s1.z + s0.w * s1.w ; Write(r, destination) Examples: r6, r3, r4 Distance Vector Format: destination, source0, source1 Description: Calculate distance vector. First source operand is assumed to be (ignored, d*d, d*d, ignored) and second source operand is assumed to be (ignored, 1/d, ignored, 1/d). Destination result vector is (1, d, d*d, 1/d). Operation: Register s0 = EvalSource(source0) Register s1 = EvalSource(source1) Register r; r.x = 1.0; r.y = s0.y * s1.y; r.z = s0.z r.w = s1.w; Write(s, destination) Examples: Exponential Base 2 Partial Precision Format: destination, source Description: Provides exponential 2x partial support. Generate approximate answer in destination.z and allows for a more accurate answer of destination.x*FUNC(destination.y). Where FUNC is some user approximation to 2Destination.y  over the limited range of (0.0 <= destination.y < 1.0). Accepts a scalar source from the .w channel of the input register.  Reduced precision arithmetic is acceptable in evaluating destination.z.  However, approximation error must be < 1/(211) absolute error and over the range  0.0 <= t.y < 1.0.  Also, returns 1.0 in .w. Operation: Register s = EvalSource(source); Register t; t.x = 2**TruncateToMinusInfinity(s.w); t.y = s.x - TruncateToMinusInfinity(s.w); // frac() t.z = t.x * approximation(t.y); // Approximation error must be < 1/(211) t.w = 1.0 Write(t, destination) Examples: Logarithm Base 2 Partial Precision Format: destination, source Description: Provides log2(x) partial precision support.  Generates an approximate answer in destination.z and allows for a more accurate answer of destination.x + FUNC(destination.y), where FUNC is some user approximation to log2(destination.y) over a limited range (1.0 <= destination.y < 2.0).  Accepts a scalar source from the .w channel of the input.  The sign bit of the inpu is ignored.  Reduced precision arithmetic is acceptable in evaluating destination.z.  A zero source generates (-inf,1.0,-inf,1.0). Operation: Register s = abs(EvalSource(source)); Register t; if(s.x != 0) t.x = exponent(s.w); // -128 <= exponent < 127 t.y = mantissa(s.w); // 1.0 <= mantissa < 2.0 t.z = t.x + approximation(t.y); // Approximation error must be < 1/(211) t.w = 1.0; t.x = -inf;  t.y =  1.0;  t.z = -inf;  t.w =  1.0; Write(t, destination) Approximation error must be < 1/(211) in absolute error, and over the range  1.0 <= t.y < 2.0. Zero source generates (-inf,1.0,-inf,1.0). Examples: Light Coefficients Format: destination, source Description: Provides lighting partial support. Calculates lighting coefficients from two dot products and a power. The source vector is assumed to contain: source.x  = N*L (dot product between normal and direction to light) source.y  = N*H (dot product between normal and half vector) source.z  = ignored source.w = power.  This is clamped to the range  ( 128.0 and 128.0) noninclusive ie not [-128.0 .. 128.0]. Reduced precision arithmetic is acceptable in evaluating destination.z. An implementation must support at least 8 fraction bits in the power.  Dot products are with normalized vectors.  Clamp limits are  128 to 128.  Error should correspond to LOGP, EXPP combination or approximately 1 LSb worst case for a 8 bit color component. Operation: Register s = EvalSource(source); Register t; if ( s.x < 0.0 ) s.x = 0.0; if ( s.y < 0.0 ) s.y = 0.0; if ( s.w < (-128.0 + e) ) s.w = -128.0 + e; if ( s.w > ( 128.0   e) ) s.w =  128.0  // where e is epsilon ~= 1 least significant bit t.x = 1.0; // Ambient t.y = s.x; // Diffuse t.z = ( (s.x>0.0) ? EXPP(s.w*LOGP(s.y)) : 0.0 ) // Specular t.w = 1.0; Write(t, destination) Examples:  Multiply And Add Format: destination, source0, source1, source2 Description: Multiply and add sources into destination Operation: Register s0 = EvalSource(source0) Register s1 = EvalSource(source1) Register s2 = EvalSource(source2) Register r; r.x = s0.x * s1.x + s2.x; r.y = s0.y * s1.y + s2.y; r.z = s0.z * s1.z + s2.z; r.w = s0.w * s1.w + s2.w; Write(r, destination) Examples: R6, R5, c[10] R4, R6, v[2].w Maximum Format: destination, source0, source1 Description: Minimum of sources into destination Operation: Register s0 = EvalSource(source0) Register s1 = EvalSource(source1) Register r; r.x = (s0.x  >= s1.x) ? s0.x : s1.x; r.y = (s0.y  >= s1.y) ? s0.y : s1.y; r.z = (s0.z  >= s1.z) ? s0.z : s1.z; r.w = (s0.w >= s1.w) ? s0.w : s1.w; Write(r, destination) Examples: r2, r3, r4 Minimum Format: destination, source0, source1 Description: Minimum of sources into destination Operation: Register s0 = EvalSource(source0) Register s1 = EvalSource(source1) Register r; r.x = (s0.x < s1.x) ? s0.x : s1.x; r.y = (s0.y < s1.y) ? s0.y : s1.y; r.z = (s0.z < s1.z) ? s0.z : s1.z; r.w = (s0.w < s1.w) ? s0.w : s1.w; Write(r, destination) Examples: r2, r3, r4 Format: destination, source Description: The contents of source are moved into destination. Only MOV command can access A0 register. Source float is truncated towards  infinity and converted to a signed integer for use in address registers A0.x. Operation: Register s = EvalSource(source) Write(s, destination) Examples: r5, -r4 ; Move negative r4 into r5.  All components are copied. r5, v[0].w ; Move w component of v[0] into xyzw of r5. a0.x, r4.x ; Put r4 s x-component in the address register s x-component. Multiply Format: destination, source0, source1 Description: Multiply sources into destination Operation: Register s0 = EvalSource(source0) Register s1 = EvalSource(source1) Register r; r.x = s0.x * s1.x; r.y = s0.y * s1.y; r.z = s0.z * s1.z; r.w = s0.w * s1.w; Write(r, destination) Examples: R6, R5, c[10] v5, R6, v2.w Reciprocal Format: destination, source Description: Places reciprocal of source scalar into destination.   This is a scalar operation that takes its input from the  .w component of the input register.  The .w extension is required in DX8 shader syntax.  The output must be exactly 1.0 if the input is exactly 1.0.  The result precision should be at least 1.0/(2**22) absolute error over the range 1.0,2.0.  Since common implementation will separate mantissa and exponent. A source of 0.0 yields infinity. Operation: Register s = EvalSource(source) Register r; r.x = r.y = r.z = r.w =  1/s.w; Write(r, destination) Examples: r2, c[14].w oTex2, r1.w Reciprocal Square Root Format: destination, source Description: Places reciprocal square root of source scalar into destination.  This is a scalar operation and takes its input from the .w or scalar channel.  The .w must be specified in DX8 shader syntax.  The absolute value of this input is taken before processing, ie the sign bit is ignored.  The precision should be at least 1.0/(2**22) absolute error over the range (1.0,4.0), since common implementations will separate mantissa and exponent. Output must be exactly 1.0 if the input is exactly 1.0. A source of 0.0 yields infinity. Operation: Register s =Abs(EvalSource(source)) Register r; r.x = r.y = r.z = r.w =  1/sqrt(s.w); Write(r, destination) Examples: r2, c[14].w oTex3, r1.w Set On Greater Than or Equal To Format: destination, source0, source1 Description: Sets destination to 1.0 if s0 is greater than or equal to s1. Set it to 0.0 otherwise. Operation: Register s0 = EvalSource(source0) Register s1 = EvalSource(source1) Register r; r.x = (s0.x >= s1.x) ? 1.0 : 0.0; r.y = (s0.y >= s1.y) ? 1.0 : 0.0; r.z = (s0.z >= s1.z) ? 1.0 : 0.0; r.w = (s0.w >= s1.w) ? 1.0 : 0.0; Write(r, destination) Examples: sge r0, r1, r2 Set On Less Than Format: destination, source0, source1 Description: Set destination to 1.0 if S0 is less than S1. Set it to 0.0 otherwise. Operation: Register s0 = EvalSource(source0) Register s1 = EvalSource(source1) Register r; r.x = (s0.x < s1.x) ? 1.0 : 0.0; r.y = (s0.y < s1.y) ? 1.0 : 0.0; r.z = (s0.z < s1.z) ? 1.0 : 0.0; r.w = (s0.w < s1.w) ? 1.0 : 0.0; Write(r, destination) Examples: slt r1, r2, r3  Vertex Shader Macro Instructions The following instructions are "macro instructions" which are provided for application convenience in performing common simple operations.  They are typically implemented as a series of the above core instructions. These are guaranteed to expand to no more than the number of actual instructions listed (for the purpose of figuring out if you exceed the maximum instruction count limit): Since these are passed to the implementation in the same manner as true instructions, the implementation is free to optimize them.  Therefore no assumptions can be made about actually cycle counts required. 4x4 Vector-Matrix Multiply Format: destination, source0, source1 Description: Performs a product of the input vector and a 4x4 matrix.  The matrix is stored at source1 and the 3 subsequent registers in the same file. This operation is commonly used to transform an position by a projection matrix. This operation is implemented as a series of dot products. Expansion (4 slots) M44, r5, v[0], c[3] Expands to: DP4, r5.x, v[0], c[3] DP4, r5.y, v[0], c[4] DP4, r5.z, v[0], c[5] DP4, r5.w, v[0], c[6] This macro therefore consumes 4 instruction slots from the instruction count. 4x3 Vector-Matrix Multiply Format: destination, source0, source1 Description: Performs a product of the input vector source0 and a 4x3 matrix.  The matrix is stored at source1 and the 2 next higher registers in the same register file. This operation is commonly used for transforming a position vector by a matrix that has no projective effect, such as occurs in model-space transformations. This operation is implemented as a series of dot products. Expansion (3 slots) M43, r5, v[0], c[3] Expands to: DP4, r5.x, v[0], c[3] DP4, r5.y, v[0], c[4] DP4, r5.z, v[0], c[5] This macro therefore consumes 3 instruction slots from the instruction count. Note that the last element w in each of c[3], c[4], and c[5] is ignored in this computation unless the input vector has a w value of 1.0.  If this w-value is 0.0, then no translation of the input vector will occur.  (ie the translation elements of the matrix will not be applied). 3x4 Vector-Matrix Multiply Format: destination, source0, source1 Description: Performs a product of the input vector source0 and a 3x4 matrix.  The matrix is stored at source1 and the 2 subsequent registers in the same register file. This operation is commonly used for transforming a position vector by a matrix that has a projective effect, but applies no translation. It is no faster to execute than  This operation is implemented as a series of dot products. Expansion (4 slots) m34, r5, v[0], c[3] Expands to: dp3, r5.x, v[0], c[3] dp3, r5.y, v[0], c[4] dp3, r5.z, v[0], c[5] dp3, r5.w, v[0], c[6] This macro therefore consumes 4 instruction slots from the instruction count. Note that the last element w in each of c[3], c[4], and c[5] is ignored in this computation. 3x3 Vector-Matrix Multiply Format: destination, source0, source1 Description: Performs a product of the input vector source0 and a 3x3 matrix.  The matrix is stored at source1 and the 2 subsequent registers in the same register file. This operation is commonly used for transforming normal vectors during lighting computations. This operation is implemented as a series of dot products. Expansion (3 slots) M33, r5, v0, c[3] Expands to: DP3, r5.x, v0, c[3] DP3, r5.y, v0, c[4] DP3, r5.z, v0, c[5] This macro therefore consumes 3 instruction slots from the instruction count. Note that the last element w in each of c[3], c[4], and c[5] is ignored in this computation. 3x2 Vector-Matrix Multiply Format: destination, source0, source1 Description: Performs a product of the input 3-vector source0 and a 3x2 matrix.  The matrix is stored at source1 and the next higher register in the same register file.  A 2-D result is produced, leaving the other elements of dest (z and w) unaffected. This operation is commonly used for 2-D transforms. This operation is implemented as a pair of dot products. Also available in the pixel shader instruction set. Expansion (2 slots) M32, r5, v0, c[3] Expands to: DP3, r5.x, v0, c[3] DP3, r5.y, v0, c[4] This macro therefore consumes 2 instruction slots from the instruction count. Note that the last element w in each of c[3] and c[4] is ignored in this computation. The output result register s .z and .w elements are unaffected. Fraction Format: destination, source Description: Returns fractional portion of each input component.   Each component of the result is in the range [0.0  ..  1.0). Operation: Register s = EvalSource(source); Register t; t.x =  s.x - TruncateToMinusInfinity(s.x); t.y =  s.y - TruncateToMinusInfinity(s.y); t.z =  s.z - TruncateToMinusInfinity(s.z); t.w = s.w - TruncateToMinusInfinity(s.w); Write(t, destination) Expansion: exp r0, s0, s1 Examples: Map x,y position of a point into unit square to add tiled displacement map. Exponential Base 2    Full Precision Format: destination, source Description: Provides exponential 2x support with full precision (at least 1/(220).  This is a scalar operation and takes its input from the .w channel, which must be specified.  It always replicates the result into all output 4 channels. Operation: Register s = EvalSource(source); Register t; t.x = t.y = t.z = t.w = 2**(s.w); Write(t, destination) Expansion: This macro takes 12 instruction slots and even more clock cycles. Examples: Logarithm Base 2     Full Precision Format: destination, source Description: Provides log2(x) support with full float precision of at least 1/(220). Accepts a scalar source .w of which the sign bit is ignored.  Result is replicated to all 4 channels. The input exponent must be in the range  128 to 128. Operation: Register s = abs(EvalSource(source)); Register t; if(s.x != 0) t.x = exponent(s.w); // -128 <= exponent < 127 t.y = mantissa(s.w); // 1.0 <= mantissa < 2.0 t.z = t.x + approximation(t.y); // Approximation error must be < 1/(211) t.w = 1.0; t.w =  t.x = t.y = t.z = t.w = -Inf;  Write(t, destination) Approximation error must be < 1/(220) in absolute error, and over the range  1.0 <= t.y < 2.0. Zero source generates (-Inf,-Inf,-Inf,-Inf). Examples: Vertex Shader Sample Utilities These represent common usages of the above instructions, and are provided as examples of their implementation. Linear Interpolation Blend (LERP) Format: destination, source0, source1, source2 Description: Performs a linear interpolation blend between source1 and source2, where source0 is the proportion of the blend to use. Destination = source0*source1 + (1.0   source0)*source2        = source1 + source0*(source2   source1) Expansion (2 slots) SUB destination, source2, source1 MAD destination, source1, source0, destination LRP r5, r0, r1, r2 ADD r5, r2, -r1 MAD r5, r1, r0, r5 Operation: Register s0 = EvalSource(source0) Register s1 = EvalSource(source1) Register s2 = EvalSource(source2) Register r; r.x = s1.x + s0.x*(s2.x   s1.x) r.y = s1.y + s0.y*(s2.y   s1.y) r.z = s1.z + s0.z*(s2.z   s1.z) r.w = s1.w + s0.w*(s2.w   s1.w) Write(r, destination) Note if this were a macro instruction, the result register would be required to be in a read-able bank since it is used for an intermediate result.         Cross Product Format: destination, source0, source1 Description: Performs the 3-D cross product of two input vectors. Destination = source0 CROSS source1 Expansion (2 slots) MUL destination0, source0.yzxw, source1.zxyw MAD destination1, destination0, source0.zxyw, -source1.yzxw Operation: Register s0 = EvalSource(source0) Register s1 = EvalSource(source1) Register s2 = EvalSource(source2) Register r; r.x = s0.y*s1.z   s0.z*s1.y r.y = s0.z*s1.x   s0.x*s1.z r.z = s0.x*s1.y   s0.y*s1.x r.w = 0.0 Write(r, destination) Note if this were a macro instruction, the result register would be required to be in a read-able bank since it is used for an intermediate result. Examples:         Reflection Format: destination, source0, source1 Description: Performs the 3-D reflection calculation of source0 by the plane defined normal to source1. Destination = s0   2.0*( s0 dot s1 )*s1 Expansion A  (3) DOT3 t, s0, s1 MAD  r, s0, -t, s1 MAD  r, s0, -t, s1 Takes 3 slots but needs an additional temp register t. Expansion B  (4) DOT3 r, s0, s1 MUL  r, r, s1 MUL  r, r, c2222 ADD  r, s0, -r Needs only 1 temp register (the output result register), but takes 4 slots. Note if this were a macro instruction, the result register would be required to be in a read-able bank since it is used for an intermediate result. Normalize  Format: d, s0 Description: Normalizes a vector.  Writes the result to all 4 components of the destination.   Note that if this operator is used Expansion: dp3  d.w, s0, s0 rsq  d.w, d.w mul  d.xyzw, s0, d.w Examples:  Other Common Algorithms         OUTER(4) // not common         DETERMINANT(3)         PROJECT (2) A dot b * a DOT3 r, s0, s1 MUL  r, s0 Find a perpendicular to a in the plane of b DOT3 r, s0, s1 MAD r, s1, s0, -r Why don t these all broadcast to all 4 elements?         EXP (8)         LOG (8)         POW   (8) Uses EXPP and LOGP to compute y^x         POWP (2)         SIN    (10) // only in the range  PI/2 to PI/2         COS    (10)         TAN    (10)         ATAN   (16)         MODULO (10)         ...etc Color values are clamped to the range supported by the pixel shader. Shader Language Debugging Support This section describes debugging support built in to the Direct3D runtime and reference device for DirectX 8.0. Direct3D debugging support is based on making the internal state of the reference device queriable by an application, and enabling a single-step functionality to allow the application to access this state at processing points between primitives, pixels, or individual shader instruction execution. The debugging support at the Direct3D API and runtime consists of a data messaging method and callback which allows the application and reference device to exchange data.  There is also a special renderstate, D3DRS_DEBUG, which has bits to control items such as causing the runtime to immediately flush all driver commands. The data messaging is supported by two API calls: the first to send a message to the reference device, and the second to install a callback which the reference device uses to send a message to the application.  The callback message also allows the application to immediately return a message to the reference device at the end of each callback (so, for example, the reference device can be told to step to the next primitive instead of making a callback for each subsequent pixel or shader instruction).   The runtime does not know (or care about) the format of these messages - the message content is determined by the reference device and the application.  The messaging protocol for the reference device shipped with the SDK will be well defined.  Different messaging protocols can be defined for different versions of reference device (which is in a separate DLL and can be replaced independent of the runtime core). Debugging support is only available for the Direct3DRefDevice, and under the debug build of the runtime. ----------------- Hardware Requirements Direct3D for DX8 has well defined sets of required and optional features for the hardware that implements it. Required features are verified by WHQL  Feature cross-dependencies are not allowed   features which do not function as specified in combination with other features are defined as unsupported. Support for optional features are broadly characterized by capability queries.  Fine grained capability characterization for optional features is done via Validate() mechanisms. An example of expected hardware definition is included in Appendix 1. Sprite Points Sprite points were cut late from DX7, but are present in DX8.  They are not supported in the  fixed-function  geometry pipeline, only in the programmable vertex processing model. Description This feature enables the rendering of points.   Generic points:  enabled by D3DPRIMTYPE_POINT, respects D3DRS_POINTSIZE As per opengl.  Not a reqt. Point sprites are generalizations of these that enable arbitrary shapes to be rendered as defined by textures. This is OK as an extension because:    There is little benefit in supporting this feature in d3d run-time since bandwidth is not saved.    Even drivers for non-t&l parts can do better at this than the DirectX run-time can.    The only remaining justification is increased availability to ISVs, but this can be addressed via sample code. Market Justification Support for particle system rendering is required by both technical and entertainment class applications/APIs. Entertainment: Particle system rendering is used by most game ISVs, Entertainment applications are very interested in particle systems.  These can be rendered by the current API, but if implemented in the driver or chip result in a 4x reduction in bandwidth requirements up to that point.  This substantially increases the number of particles that can be rendered in a given scene. Particles are used for: sparks, explosions, snow, flares, etc. Alternative techniques for some of these include line lists, especially when antialiased. Technical: Required by all CAD apps. This feature enables D3D to be used efficiently for technical applications that require screen-space points to mark positions in diagrams, etc. CAPS: D3DPRIMCAPS? D3DRS_POINTRADIUS (float)  Allows app to specify desired radius of points for next DrawPrim call. Defaults to 1.0 indicating that point is 1 screen pixel in width. D3DRS_POINTSCALEENABLE, bool Controls whether point size is specified in screen space pixels (false) or in world-space units that are scaled by 3-D distance from the eye (true). Specifying values less than 1.0 as point radius results in 1 integer pixels that may be fainter if  antialiasing is enabled Is this fall-off a fn of depth or range?  Does it need a separate fall-off function? D3DRS_SPRITEPOINTENABLE, bool Generates screen-space sprites from any rendered points when true.  This causes the points to be rendered as textured quads. The above new renderstate tokens are added into the DP2 command stream. D3DRS_POINTSIZE, (float) D3DRS_SPRITEPOINTENABLE (bool) Usage: Set up desired texture for sprite/billboard Set point size with D3DRS_POINTSIZE Set D3DRS_SPRITEPOINTENABLE to enable textured points Turn on POINTSCALEENABLE to enable variation of size with distance Call DrawPrimitive( D3DPT_POINTLIST, pts ); Typical particle system would be rendered with a few calls, allowing multiple point sizes or textures or colors. Implementation: A variety of implementations can be supported: 1) Some T&L parts may be able to build sprites off-host by using geometry hardware on the far end of the bus.  The primary benefit is 3x reduction in vertex data sent. 2) Some parts should be able to take advantage of the fact that they are regular in screen-space and generate them at the setup stage.  This is the encouraged implementation.  This should enable point-sprites to be rendered 4x faster than 2 triangles, since there is only one, and there are no divisions required. Sprite point size is specified in screen coordinates assuming a distance of 1.0. Some older implementations may have upper limits on the size of point that can be generated.  This should be at least 32 for std points and have no upper limit for sprite points. When enabled via D3DRS_SPRITEPOINTENABLE, Driver takes all points rendered via DrawPrimitive, projects them into screen space as sprite centers scales current POINTRADIUS by z depth for perspective. adds this radius value to screen space point to create 4 corners of quad sets 2-D u,v texcoords of 4 quad corners to range (0,0) .. (1,1) renders as 2 triangles using current pixel pipeline state. The resulting quad should obey current polygon rendering state including: diffuse color (constant across polygon, etc) fog and alpha blending state any multitexture enabled. Except that: cull mode is completely ignored. FILLMODE is ignored perspective correction and therefore rhw not reqd unless w-buffering Note: Depth compare disable support is absolutely required to work since it is common case. Caps: Point size Pmax (default = 1.0f; range >= 0.0F) dvMaxPointSize is added to D3DDeviceDesc7 struct RenderStates Point size d (default = 1.0f) D3DRENDERSTATE_POINTSIZE These 3 renderstates control the fall-off of point size with distance.  Setting these to ( A, B, C) = (0, 0, 1) results in linear fall-off with distance.  This is the usual case for geometric objects, and is the default. Point size param a (default = 1.0f) D3DRENDERSTATE_POINTATTENUATION_A Point size param b (default = 0.0f) D3DRENDERSTATE_POINTATTENUATION_B Point size param c (default = 0.0f) D3DRENDERSTATE_POINTATTENUATION_C Point size minimum Pmin (default = 1.0f; range >= 0.0F) D3DRENDERSTATE_POINTSIZEMIN Sprite Point Mode: on / off (default = off) D3DRENDERSTATE_POINTSPRITEENABLE FVF Code Per-Vertex Point Size d D3DFVF_S Input Point Size If input vertex FVF has D3DFVF_S set, then per-vertex d is used, else renderstate d is used. Computation of Final Point Size Let Pe = (Xe, Ye, Ze) be an eye space point r = sqrt (Xe2 + Ye2 + Ze2) d' = d * sqrt(1/(a + b*r + c*r2)) Note that ( 0, 0, 1 ) is linear fall off needed for geometric objects. Final point size s = Pmax  if d' > Pmax if d' < Pmin otherwise Frustum Clipping When clipping is enabled, points are clipped as follows.  If the vertex is outside the view frustum in Z (either near or far), then the point is culled.  If the point, taking into account the point size, is totally outside the viewport in x or y, then the point is culled.  Remaining points are rendered.  Note that it is possible for the point vertex to be outside the viewport (in x or y) and still be partially visible. The driver must handle frustum clipping of any partially visible points of any radius < Pmax Arbitrary Plane Clipping Implementations that perform point sprite quad generation in the setup phase yet implement arbitrary plane clipping in the vertex engine (such as the SW geometry pipeline) will not be able to perform exact clipping of point-sprites against arbitrary clip planes.  In this case point sprites will be culled against arbitrary clip planes and therefore may pop.  Applications may prevent this by adding a border geometry to such portals that is as wide as the particle radius. Sprite Point Rendering A screen space point P = (X, Y, Z, W) of size s is rasterized as a square of the following 4 vertices: (X - s/2, Y - s/2, Z, W) (X + s/2, Y - s/2, Z, W) (X - s/2, Y + s/2, Z, W) (X + s/2, Y + s/2, Z, W) If Sprite point mode is off, all vertex attributes of the point are copied for each vertex of the square.  If Sprite mode is on, the texture coordinates at the vertices are: (0,0) (SPRITETEXCOORDMAX,0) (0, SPRITETEXCOORDMAX) (SPRITETEXCOORDMAX, SPRITETEXCOORDMAX) #define SPRITETEXCOORDMAX (4095.75F/4096.F) All other vertex attributes are copied at each corner of the square. Non-TnLHal - input FVF is untransformed: Final point size computations are done in runtime library.  Points are clipped such that those which are outside the Z near/far and totally outside the viewport in x and y are culled prior to sending to the driver.  The output point size s is sent on a per vertex basis to the driver using D3DFVF_S. Driver uses D3DRS_POINTSPRITEENABLE to render sprite.  All other point-related renderstates are ignored by driver. Non-TnLHal - input FVF is transformed: Runtime just passes vertices directly to driver.  No clipping or point-size computations are done.  For final point size, driver uses per-vertex size if D3DFVF_S is set, else D3DRENDERSTATE_POINTSIZE. Driver clamps point size to between D3DRENDERSTATE_POINTSIZEMAX and dvMaxPointSize, and uses D3DRENDERSTATE_POINTSPRITE_ENABLE to render sprite.  All other point-related renderstates are ignored by driver. TnLHal: TnLHal devices are required to fully support both the per-vertex point size computations and the point rendering.  Device must achieve same result as non-TnLHal for both untransformed and transformed input vertices. Driver uses all point-related renderstates to process and render point list. Programmable Vertex Processing Sprite point radius is an output value that may be emitted by the vertex shader.  The vertex shader code can implement whatever processing is desired to generate this radius including none, or arbitrarily complex range-attenuation models.  The results of writing into this output registers are ignored when SPRITEPOINTENABLE is false. Where we differ from OpenGL spec: We do not automatically do a circle when antialiasing is on. We allow a complete texture per point. (with Point sprite mode on) We do not modify the alpha when diameter is < threshold. Higher-Order Primitives Direct3D now supports points, lines, triangles, and grid primitives.  These have been extended to support higher-order interpolation beyond linear. Description The current primitives supported by Direct3D are points, lines, and triangles.  While triangles and lines have spatial extent, they were until now both rendered using linear interpolation.  In DirectX 8.0 Direct3D supports rendering of these primitive types using higher order (up to cubic) interpolation. Further, a new quad primitive type is now supported, that can also admit higher-order interpolation during rendering. These primitives support such higher-order interpolation when transmitted to the API as lists, strips, fans, or indexed meshes. This is achieved by using additional information encoded in the vertices themselves.  For example, normal vectors can be used define tangent planes at the vertices to enable cubic interpolation. Most implementations will support higher-order interpolation by tessellation into planar triangles.  The tessellation step is applied logically before the vertex shader stage.  Since the shader API does not impose semantics on its input data, a special mechanism is provided to identify the vertex stream component that represents position, and optionally normal vector.  All other components will be interpolated accordingly. Future Features: In DX8 there is no support for curved lines There is currently no support for specifying crease edges.  The authoring tool must create any sharp edges either as (crack-prone) boundaries between patches, or by inserting very small interpolating patches. In later releases, support will be added for tangent smooth crease edges, and sharp points. Market Justification There are two primary justifications for interest in higher-order surfaces, improving rendering quality, and supporting HO technologies in common DCC authoring tools. Improved Quality via Resolution Enhancement Current primitives are not ideal for representing smooth surfaces.  Higher-order interpolation methods, such as cubic polynomials allow more accurate rendering of curved shapes.  This provides increased realism by reducing or eliminating faceting artifacts visible on silhouette edges or on specular surface lighting.  Further, when tessellation occurs on the chip, the tessellated triangles do not impact bus bandwidth. In many cases a small amount of tessellation can provide good improvements in image quality with minimal performance impact. Direct3D for DX8 provides a simple way to apply resolution enhancement to content created by existing polygon-oriented tools and art pipelines.  The application need only provide a desired level of tessellation, and transmit the data using standard triangle syntax that includes normal vectors. Direct Mapping from Spline-based Tools Many current authoring tools support higher-order primitives to enable more powerful modeling operations than are commonly provided for planar triangle meshes. When used efficiently, ie so that the number of patches generated is reasonable, such tools can produce content that can be rendered directly by the API. To meet this requirement, a new entry point has been added that interprets the incoming vertex data stream as a 2-D array of control points and tessellates it to the desired resolution. Supported/Required By: This feature is primarily driven by requirements for animation and rendering of characters.  It can also be used for other surfaces such as terrain or water. Caps: dwMaxPrimitiveOrder The following new renderstates are supported to render higher-order primitives. D3DRS_NUMSEGMENTS <float> Identifies the number of segments that each edge of the primitive should be divided into when tessellated. Provided as a float, allowing the fractional part to be gradually introduced to minimize popping artifacts.  However, implementations are free to round down to the nearest integer in the DX8 time frame. Implementations should support an upper limit of at least 8 segments per edge and can silently truncate to this limit if it is exceeded. Affects all primitives rendered.  Defaults to 0, which is the same as 1 indicating 1 segment per edge, or no subdivision applied. If this parameter is set to a negative value, the tessellation is adaptive, and based on other criteria that are TBD. D3DRS_PRIMITIVEORDER Independent primitive orders can be specified for position and normals.  This enables linear planar surfaces with higher-order normals for lighting, or cubic surfaces with lower-precision normals for improved performance. An integer indicating the order of polynomial used to interpolate subdivided segments for the position components of primitives rendered by the API.  The values map as follows   1  linear <default>  corresponding to planar triangles   2  quadratic Not supported in DX8 for position data   3  cubic cubic polynomial defined by D3DRS_HOBASIS.   4 or more Not supported in DX8. Values of 1(linear) and 3  (cubic) are required by the implementation to claim HO support in DX8. When the order is set to 1, the basis type is ignored. In the future, other values may be supported.  Even values are uncommon. Defaults to 1 even when set to 0. This parameter affects all primitives rendered, and is independent of the HOBASIS specified. This parameter governs the interpolation order for all vertex data specified, whether it be position, texture coordinates, normals, etc. More specific controls for interpolating this data may be provided in later releases. (such as a per-stream parameter) D3DRS_NORMALORDER <int> An integer indicating the order of polynomial used to interpolate normal vectors for the primitives rendered by the API.  This parameter allows independent control of the precision used in generating normal vectors from that used in generating position values.   The values map as follows:   0  default     <use D3DRS_PRIMITIVEORDER>   1  linear <default> corresponding to Gouraud shading.   2  quadratic   3  cubic cubic polynomial defined by D3DRS_HOBASIS D3DRS_HOBASIS A parameter specifying the formulation to be used in evaluating the HO surface primitive during tessellation. D3DBASIS_TYPE     D3DHO_NORMAL  = 1, // use normals to define splines     D3DHO_BSPLINE = 3, // B-Spline     D3DHO_BEZIER  = 4, // Bezier polynomial     D3DHO_INTERP  = 5, // Catmull-Rom interpolating spline Only cubic forms of these are supported in DX8.  When order is linear, the basis is ignored and the input vertices are interpolated. NORMAL uses normals to define cubics where triangles are submitted using any of the API primitive types for Draw, or DrawGrid. BSPLINE treats the input vertices as control points of a b-spline surface.  The number of apertures rendered is 2 less than the number of apertures in that direction.  The surface generated does not in general contain the control vertices specified. BEZIER treats the input vertices as a series of bezier patches.  The number of vertices specified must be divisible by 3 +1.  Portions of the mesh beyond this criterion will not be rendered.  Full continuity is assumed between sub-patches in the interior of the surface rendered by each call.  Only the vertices at the corners of each sub-patch are guaranteed to lie on the resulting surface.  INTERP uses an interpolating basis to define the surface so that it goes through all the input vertices specified. D3DDevice::DrawGrid() A new entry point is defined that is analogous to D3DDevice::Draw(), but specifically for use with grid primitives. D3DDevice::DrawGrid( dwPitch, rect subrange, BASIS, float*NumSegments Interprets the input vertex stream as a 2-D grid of pitch dwPitch vertices. This call respects the D3DRS_PRIMITIVEORDER.  When set to 1, it will render a mesh of triangles exactly as though they were a series of D3DPT_TRIANGLESTRIPs. Subrange 4 integers defining a subrect region of the grid NumSegments When null, the tessellation level is defined by D3DRS_NUMSEGMENTS, otherwise this must be an array of 4 floats defining number of segments to be generated along each edge of the primitive.  The interior tessellation is implementation defined, but should not be coarser than the lower of the two opposing values. To obtain adaptive tessellation,  Usage: Resolution Enhancement Check content with authoring tool plugin Set NumSegs based on LOD (2 or 3 is often sufficient), and can be used on a user-settable quality slider for example. Set D3DRS_PRIMITIVEORDER to 3 Set D3DRS_HOBASIS to NORMAL Render triangles using D3DPT_TRIANGLEXXX as usual. Direct Rendering of Spline Content Set D3DRS_PRIMITIVEORDER to 3.0 Set D3DRS_HOBASIS to that which the authoring tool emitted Call DrawGrid() Test Procedure Implementation Triangle algorithm is as follows:  for each edge     Project edge vector onto each end s normal, scale by 1/3 to obtain the two interior control pts for representing a cubic bezier patch.  Compute patch center control vertex by reflecting corner pts into interior and averaging. This provides a standard cubic bezier patch that can be rendered using any desired algorithm. Interpolate normal vectors to match. DrawN_Patch( float NumSegs // nr of segs each edge gets divided into DWORD dwGeometryOrder, DWORD dwNormalOrder )      for each triangle( v0, v1, v2) for each edge     ComputeEdgeInteriorControlPoints ComputePatchInteriorControlPoint() load them all into a cubic triangle bezier patch tessellate it using cubic triangle routine to level specified by NumSegs If normal interpolation order > 1   ComputeNormalInteriorControlPts() // one per edge   Load them into a quadratic triangle patch and   tessellate it using quadratic triangle routine to level specified by NumSegs Linearly interpolate any other parameters like color/texcoords, etc. Call real DrawPrimitive passing in new data. Should be a series of strips. ComputeEdgeInteriorControlPoints() // no error return, cannot fail float Tension = 1.0/3.0  // for now. Should be a renderstate. edge = v1 - v0 Cv01 = v0 + (edge - (edge dot N0)*N0)*Tension edge = v0 - v1 Cv10 = v1 - (edge - (edge dot N1)*N1)*Tension edge = v2 - v1 Cv12 = v1 + (edge - (edge dot N1)*N1)*Tension edge = v1 - v2 Cv21 = v2 + (edge - (edge dot N2)*N2)*Tension edge = v0 - v2 Cv20 = v2 + (edge - (edge dot N2)*N2)*Tension edge = v2 - v0 Cv02 = v0 + (edge - (edge dot N0)*N0)*Tension // yes you can avoid half of the above subtracts by swapping end for end, // but I wanted to be clear ComputePatchInteriorControlPoint() // std result for single interior pt Cv = (Cv01 + Cv02 + Cv12 + Cv10 + Cv21 + Cv20)/4.0; // edge control pts Cv -= (v0 + v1 + v2 )/6.0; // corner pts // this routine would be used for quadratic interpolation of normals // ala vanOverVeld. ComputeNormalInteriorControlPts() Navg = (N0 + N1)*0.5; // average the normals at both ends enorm = Normalize( v1 - v0 ); // normalize edge vector (wah) Nproj = (enorm dot Navg)*Navg; // project onto edge vector Nmid = Navg - 2*Nproj; // reflect it The 2-segment-per-edge tessellation case will probably be the most common usage.  It can be reduced down to 9-10 clocks per edge using algebraic simplification of deCastlejau.  This is 30 clocks per triangle, assuming 4-vector code.  The midpoint is v0/8 + v1*3/8 + v2*3/8 + v3/8 using decastlejau for 0.5 but v1 = v0 + k/3 where k is (e - (n0.e)*n0) so we get midpt = v0/2 + k/8 plus the contribution from the other end of that edge  += v3/2 + k'/8 where k  = ((n3.e)*n3   e) and e = v3  Structures The primitive type is extended by new types, the quadgrid. This struct is DDI-visible only.  typedef enum _D3DPRIMITIVETYPE {     D3DPT_POINTLIST     =  1,     D3DPT_LINELIST      =  2,     D3DPT_LINESTRIP     =  3,     D3DPT_TRIANGLELIST  =  4,     D3DPT_TRIANGLESTRIP =  5,     D3DPT_TRIANGLEFAN   =  6,     D3DPT_QUADLIST      =  8,     D3DPT_QUADSTRIP      = 10,     D3DPT_FORCE_DWORD   = 0x7fffffff, } D3DPRIMITIVETYPE; State Information See above renderstates. Vertex Data No change to vertex data is required in DX8. Full-Screen Anti-Aliasing and Multi-Sample Rendering Support The full-scene anti-aliasing support provided in DX7 and earlier releases has been extended with related functionality to support multi-sample rendering techniques.  The previous functionality still works as before. Description Current hardware is beginning to support full-scene anti-aliasing and other effects such as depth-of-field focus blur, and motion blur.  In most cases, this is accomplished by updating the render target using multiple samples per frame-buffer pixel.  This hardware can be used in two different ways, one for antialiasing, and the other for multisample rendering. When used for full-scene anti-aliasing, all sub-samples of a pixel are updated in one pass, but when used for other effects that involve multiple rendering passes, the application can specify that only some of the sub-samples are to be affected by a given rendering pass.  This latter approach enables simulation of motion blur, depth of field focus effects, reflection blur, etc. In both cases, the various samples recorded for each pixel are blended together and output to the screen.  This enables the improved image quality of anti-aliasing or other effects. The technique described here is a limited form of accumulation buffers that enables the majority of their applications with much reduced hardware and API complexity. Currently there is too much variation in the hardware formats for rendertargets that support antialiasing to allow Lock() on such Surfaces. Market Justification Effective antialiasing is an important capability in bringing 3D rendered image quality up to the level seen in television and movies.  Up until now, only ray-tracers and other high-end (non-real-time) renderers used in special effects could support it easily.  Other anti-aliasing schemes used in the real-time space such as edge-antialiasing, and sort-dependent schemes impose significant effort on the application developer.  Full-scene schemes require only a small amount of setup effort. Other techniques enabled by multisample techniques such as motion blur are becoming important in enabling the next level of realism in racing games.  Focus blur, and other blur effects may also be useful in some applications. Supported/Required By: Applications interested in using effects like antialiasing, motion blur, depth of field focus blur, reflection blur, drunken blur, etc. API Usage: Driver exposes a list of sampling qualities it can support as integers { 1 2 4 8 }, defining the quality levels (expressed as number of samples) it can support. The application then requests a level of quality of AA on RenderTarget creation via a flag.  This quality level is expressed as the number of samples a given pixel should support. If this succeeds then the application queries the device to fine out the number of samples that were actually allocated.  It then knows the number of bits that are valid in the mask flags, and how many separate passes could be made. Existing flags for CreateSurface should still work, except for the HINT part. D3DRS_ANTIALIASENABLE, bool to turn it on/off D3DRS_ANTIALIASMASK, DWORD with bits to set for each mask. D3DRS_ANTIALIASSAMPLECOUNT suitable only for get. Returns actual buffer sample count available.  This may vary even on the same HW implementation as a function of the resolution requested for the render target.  The driver may limit total number of samples in low-memory, hi-res mode conditions. The application should expect changes in quality to be analogous to a mode-change as far as memory allocation goes.  Apps must destroy and recreate the render target surface to change sampling quality. It is still required to support the ability to enable/disable antialiasing completely in response to the enable state.  This is required for support of objects that may already have been antialiased.  It is effectively accomplished by setting all sub-samples of a pixel to the same value. Caps: DwMultiSampleQuality Test Procedure Implementation Uses current DX6/7 DP2 DDI tokens Namely HINTANTIALIAS D3DRS_AA Structures State Information Vertex Data Other Features Technical Market Features These features are intended for technical applications and will neither be required or recommended in the MPC spec.  WHQL will still test for these if they are exposed, using tests designed to meet key technical market ISVs certification requirements. Polymode line dashed lines stippled lines Ability to disable antialiasing of lines and points. Proposed Features This is a list of features found in earlier APIs that are not planned for incorporation into the core.  Please notify us immediately of any requirements for these features. Many can be provided by higher-level software components. Direct enumeration of surface/texture formats This makes it very difficult to write applications that can handle addition of new formats. Transparent software emulation of rasterization functionality There is no possibility at this point of implementing transparent software fail-over with acceptable performance characteristics. gl-style feedback It is a key goal to avoid transfer of data from the graphics subsystem to the host wherever possible.  Currently processors are fast enough that re-computation on the host is more efficient.  The only justification for this being considered is for test verification and certification to encourage vertex processing consistency. select/picking (probably DX9) As more of the pipeline gets moved over into hardware, the requirement for getting accurate picking information back to the host may increase.   A synchronous data return mechanism is expected to be sufficient. quads, n-gons, rectangles (unless you count blts) These are planned for incorporation into higher-level libraries. gl-style evaluators insufficient demand.  Can be implemented efficiently on the host  separate materials in 2-sided lighting The difficulty of storing additional state required for a second material is not justified by the expected frequency of usage in common applications.  For those rare cases it is used, the performance impact of just rendering twice is not great, especially for content that may be pre-cached. state push/pop with bits, etc. State management continues to be investigated.  The ideal goal is to have the low-level API and the driver never have to mirror any state.  Those applications that desire state mirroring, such as for prototyping etc, can use a higher-level library that mirrors state on the host to provide conveniences like push/pop. unbounded line loops The silicon required to implement these is not justified when apps can so easily close them. texture image borders This also has been found to be rarely used for the number of gates it costs. per-vertex edge flags point fillmode for polygons No significant benefit vs just rendering as a point list, and in fact may be slower on most hardware. simultaneous rendering to both front and back buffers Frequency of use is too low to justify hardware cost. analogs of glRasterPos Accumulation buffers Anti-Aliasing is commonly provided by separate means that can be more memory-efficient. Any buffer can be used for accumulation, especially if 16-bits per channel is supported. Fine-grained vertex specification  (xxxx, yyyy, zzzz) Benefits of API mapping do not justify hardware effort.  Most applications and existing content are interleaved to at least the xyz xyz level. Appendix 1 Hardware Requirements This section describes an ideal hardware implementation for DX8. Required features will be WHQL tested in the DX8 timeframe. Recommended features are those that are expected to be required in a subsequent release. Performance Entertainment applications will require the most cutting edge 3D performance attainable from the silicon of that time.  The below numbers reflect the expected performance of the high-end PC accelerators at those times. Xmas 99 Mid 2000 Xmas 2000 Fill Rate 600Mpix/s 1.0Gpix/s 1.8Gpix/s Polygon Rate 10MPoly/s 20MPoly/s 50MPoly/s Texture Loads 0.4GB/s 0.6GB/s 1.2GB/s Fill Rate: This is defined as "single texture equivalent bilinear samples per second using 2x2 kernel".  Some parts may no longer support bilinear filtering, preferring trilinear or dualtexture, for which the required fill rate drops to 1/2 of the binlinear number.  z-buffering and alpha blending are assumed to be enabled. Polygon Rate: This is defined as the number of polygons per second.  This is assumed to be single texture, with z, alpha.  Includes transform, and lighting via 1 directional light source, 200 vertices per batch, indexed polygon mesh data. Texture Load Rate: This is the number of bytes/second at which texture data can be loaded from host memory into video memory. Note:  the performance for xmas 2000 was extrapolated from xmas 99 hardware capabilities assuming the usual annual 3X perf increase in most areas.  This may be conservative. Note: vertex throughput requirements may exceed capabilities of basic bus architectures over the next year. Memory: Xmas 99 Mid 2000 Xmas 2000 Video Memory  System Memory 128MB Display Resolutions Adapter must support output to NTSC, 60Hz at 640x480 resolution. True 59.94Hz support is also required at all resolutions. Adapter must support 1600x1200 desktop resolution. Adapter must support HDTV resolutions up to and including 1900x1080p 60Hz. for 3D content using 24-bit double buffers and 32-bit z-stencil. This implies 32MB video memory reqt, leaving 8MB for textures. DAC supports full 3-channel downloadable gamma table and ICM. Adapter supports full VESA DDC 2D Graphics Support Hardware provides support to prevent tearing: All blts and flips must be able to be performed in synch with the display to avoid 'tearing'. The ability to read back the current scan line is required to enable this. Hardware cursors of 256x256 by up to 24-bit color are required. Video memory architecture Hardware is is required to support linear memory as opposed to rectangular memory allocation. Blts to screen are not required as they can be emulated by textured quads. This includes all scaling (with filtering), arbitrary perspective warps, etc. Hardware acceleration support for rectangular memory copies is still required. This support need not include pixel format conversion, but acceleration is required if some type of swizzling or tiling is performed. This rectangular copy operation must support programmable strides so that memory is linear, mod any (api-transparent) tiling. Video Requirements DVD playback to the screen or a texture is required at D1 resolution. at full video rates. Hardware acceleration of motion compensation for MPEG2 decode is required. Scaling of video content must look as good as at least a 3-tap filter. Video Input full video input support is required including VPE, autoflip, etc. DVD playback, MPEG2 decode, etc. 3-D Requirements Rendering Full-screen anti-aliasing must be supported at the following All required features must be available at the same time. Direct3D rasterization conformance rules must be adhered to. Device must support rendering to a texture for the following formats 32-bit:  888 RGB and 8888 RGBA 16-bit:  565 RGB and 5551 RGBA  (4444 RGBA??) Destination alpha bit storage is required. Destination alpha rendering is required for the 32-bit 8888 case. All alpha test modes are required: NEVER, LESS, EQUAL, LESSEQUAL, GREATER, GREATEREQUAL, NOTEQUAL, ALWAYS Depth Buffering 16-bit and 32-bit (24/8) depth buffering support is required. All depth-compare modes must be supported. NEVER, LESS, EQUAL, LESSEQUAL, GREATER, GREATEREQUAL, NOTEQUAL, ALWAYS Minimum 8-bit stencil buffer support is required All stencil operations and tests must be supported. KEEP, ZERO, REPLACE, INCRSAT, DECRSAT, INVERT, INCR, DECR Shading Flat and Gouraud shading are required. Device must support at least 2 independent RGBA iterator sets simultaneously. Device must support at least 4 independent uvwq texture coordinate iterators. All color components iterated must be perspective correct. w-based fog computation must be supported. pixel and vertex fog are required. where vertex fog value can come from vertex input channel. Range-based fog computation is recommended. Textures Minimum 2kx2k max texture limit. Non-power-of-2 texture dimensions must be supported. Mip Mapping is required with true linear filter between levels. mip-maps must be supported down to 1x1 in size. Upper limit must be clampable to MAXLOD MIPLODBIAS must be supported. at least 3x3 filter kernels must be supported (per video scaling reqts) 5x5 programmable kernel is recommended. Support for projected textures is required. Formats required are: 422 Yuv,  and DXT1-DXT5  8-bit palettized, 4-bit palettized surface format is not required. NONPOW2 for everything except MIP-mapping will be required in PC2000. NONPOW2 for everything including MIP-mapping will be recommended in PC2000 and required in PC2001. 3D Performance Texture upload bandwidth must peak at full bus bandwidth 800MB/s. Any texture format differences in video memory must be translated automatically in hardware at a rate sufficient that texture load performance is unaffected. Pixel fill rates should be 1.2GPixels/sec for bilinear single pass equivalent (ie 600Mp/s trilinear or dual texture, or 400 Mp/s trilinear with another bilinear texture, or 300 Mp/s trilinear dual texture). Polygon setup performance should be 50M Poly/s. Point Sprite performance should be twice as fast as triangle setup. Vertex Transformation throughput should be 25M vertices In the DX9 time frame, benchmarks will require hardware to meet the above criteria for performance of individual technologies, plus be able to operate with them in combination in the following manner: * 900M texels per second. * 40M triangles per second. * 300K texture state changes per second. * 150K pixel shader state changes per second. * 150K vertex shader state changes per second. Raster Operations Pixel texture blending support Geometry Operations Hardware supporting 3D geometry operations must support the following    Perf Transformation unit should support 40M vertices/second    Input Formats: Programmable 8-way parallel independent DMA engine for gathering vertex data. (This is recommended even for non-TL hals). Must be able to simultaneously read from video and system memory if there is a distinction. Input channels range from 1 to 4 float components. Programmable transform unit capable of executing all algorithms specified in DX7 including: Transform, perspective divide Directional light calc Vector normalization Reflection calculation for environment mapping vertex blending, morphing, etc. programmable vertex shader support for spot light is not reqd as this can be accessed via device shaders. Separate clipping unit viewport clipping 6 arbitrary clip planes guardband support is required of at least 1k border. Separate setup unit culling is at the back end of transform. 3D Non-Requirements There is currently no requirement for hardware overlays. There is currently no requirement for edge anti-aliasing of the form that requires re-drawing the edges by the application. Colorkey is not required.? TLHALs need not support spot lights of any type. Texgen on Pt  Sprites   Do not put this on.  done Arbitrary clip planes t like cull-only, since it is a HINT, not guaranteed.  Apps could ship that rely on this behavior.   Want to deprecate user clip planes completely and base all clipping on texcoords.  Say this is more general method. User needs to define a mapping as to which texcoord is to be used as the clipping coordinates.  If clipping vs position, the app would have to copy hpos into a texcoord set and then use that with TEXKIL BRDF disappear DEPTH     D3DAOP_BRDF     D3DAOP_DEPTH ROP should be disabled when alpha blending is on In DX8.  This needs to be reset in WHQL. Microsoft Corporation Confidential  PAGE  |r|gr|r ~m~bSbB }s}hs}s m\mQB m\mQB p_pTET ztpt_ztStND k\kK\k\ k\kK\k\ ~t~it~t nhdhYnh fWfFWfW nhdhSnh fWfFWfW rlhlWrlKl k\kK\k\
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dxg\ddk\spec\directx 8 graphics ddi specification.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Corporation DirectX 8.0 Graphics DDI Specification Title _PID_HLINKSDirectX 8.0 Graphics DDI Specification DirectX 8.0 Display Driver DDI Specification Colin McCartney Specification.dot Colin McCartney Microsoft Word 9.0L2rRrybjbjU DirectX Graphics DDI Specification DirectX Version 8.0 Revision 1.0 9/11/2000  TOC \o "1-1" \h \z \t "Heading 2,2"   HYPERLINK \l "_Toc493316128"  DirectX Graphics DDI Specification  PAGEREF _Toc493316128 \h   HYPERLINK \l "_Toc493316129"  Introduction  PAGEREF _Toc493316129 \h   HYPERLINK \l "_Toc493316130"  DDK Header File and Naming Issues  PAGEREF _Toc493316130 \h   HYPERLINK \l "_Toc493316131"  DIRECT3D_VERSION  PAGEREF _Toc493316131 \h   HYPERLINK \l "_Toc493316132"  Minimal DirectX 8.0 DDI Support  PAGEREF _Toc493316132 \h   HYPERLINK \l "_Toc493316133"  Supporting GetDriverInfo2  PAGEREF _Toc493316133 \h   HYPERLINK \l "_Toc493316134"  Reporting DirectX 8.0 Style Direct3D Capabilities  PAGEREF _Toc493316134 \h   HYPERLINK \l "_Toc493316135"  Minimum Capability Requirements for DirectX 8.0 Drivers  PAGEREF _Toc493316135 \h   HYPERLINK \l "_Toc493316136"  Reporting Support for Video Memory Vertex and Index Buffers  PAGEREF _Toc493316136 \h   HYPERLINK \l "_Toc493316137"  The Texture Format List  PAGEREF _Toc493316137 \h   HYPERLINK \l "_Toc493316138"  Format Operations  PAGEREF _Toc493316138 \h   HYPERLINK \l "_Toc493316139"  Surface Formats as FOURCC Codes  PAGEREF _Toc493316139 \h   HYPERLINK \l "_Toc493316140"  Multiple Vertex Streams  PAGEREF _Toc493316140 \h   HYPERLINK \l "_Toc493316141"  Reporting Multiple Vertex Stream Capability  PAGEREF _Toc493316141 \h   HYPERLINK \l "_Toc493316142"  Stream Zero  PAGEREF _Toc493316142 \h   HYPERLINK \l "_Toc493316143"  Notification of Stream / Vertex Buffer Binding  PAGEREF _Toc493316143 \h   HYPERLINK \l "_Toc493316144"  Index Buffers  PAGEREF _Toc493316144 \h   HYPERLINK \l "_Toc493316145"  Reporting Support for 32-bit Indices  PAGEREF _Toc493316145 \h   HYPERLINK \l "_Toc493316146"  Setting the Current Index Buffer  PAGEREF _Toc493316146 \h   HYPERLINK \l "_Toc493316147"  New DP2 Stream Drawing Tokens  PAGEREF _Toc493316147 \h   HYPERLINK \l "_Toc493316148"  D3DDP2OP_DRAWPRIMITIVE  PAGEREF _Toc493316148 \h   HYPERLINK \l "_Toc493316149"  D3DDP2OP_DRAWINDEXEDPRIMITIVE  PAGEREF _Toc493316149 \h   HYPERLINK \l "_Toc493316150"  D3DDP2OP_DRAWPRIMITIVE2  PAGEREF _Toc493316150 \h   HYPERLINK \l "_Toc493316151"  D3DDP2OP_DRAWINDEXEDPRIMITIVE2  PAGEREF _Toc493316151 \h   HYPERLINK \l "_Toc493316152"  D3DDP2OP_CLIPPEDTRIANGLEFAN  PAGEREF _Toc493316152 \h   HYPERLINK \l "_Toc493316153"  Point Sprites  PAGEREF _Toc493316153 \h   HYPERLINK \l "_Toc493316154"  Reporting Support for Point Sprites  PAGEREF _Toc493316154 \h   HYPERLINK \l "_Toc493316155"  Computing the Size of Point Sprites  PAGEREF _Toc493316155 \h   HYPERLINK \l "_Toc493316156"  Rendering Point Sprites  PAGEREF _Toc493316156 \h   HYPERLINK \l "_Toc493316157"  Volume Textures  PAGEREF _Toc493316157 \h   HYPERLINK \l "_Toc493316158"  Reporting Support for Volume Textures  PAGEREF _Toc493316158 \h   HYPERLINK \l "_Toc493316159"  Handling the Creation of Volume Textures  PAGEREF _Toc493316159 \h   HYPERLINK \l "_Toc493316160"  Copying Volume Textures in the DP2 Stream  PAGEREF _Toc493316160 \h   HYPERLINK \l "_Toc493316161"  Presentation  PAGEREF _Toc493316161 \h   HYPERLINK \l "_Toc493316162"  Palettized Textures  PAGEREF _Toc493316162 \h   HYPERLINK \l "_Toc493316163"  Cursors  PAGEREF _Toc493316163 \h   HYPERLINK \l "_Toc493316164"  Vertex Shaders  PAGEREF _Toc493316164 \h   HYPERLINK \l "_Toc493316165"  Vertex Shaders and Fixed Function Hardware  PAGEREF _Toc493316165 \h   HYPERLINK \l "_Toc493316166"  Reporting Support for Programmable Vertex Processing Hardware  PAGEREF _Toc493316166 \h   HYPERLINK \l "_Toc493316167"  D3DDP2OP_CREATEVERTEXSHADER  PAGEREF _Toc493316167 \h   HYPERLINK \l "_Toc493316168"  D3DDP2OP_DELETEVERTEXSHADER  PAGEREF _Toc493316168 \h   HYPERLINK \l "_Toc493316169"  D3DDP2OP_SETVERTEXSHADER  PAGEREF _Toc493316169 \h   HYPERLINK \l "_Toc493316170"  D3DDP2OP_SETVERTEXSHADERCONST  PAGEREF _Toc493316170 \h   HYPERLINK \l "_Toc493316171"  Pixel Shaders  PAGEREF _Toc493316171 \h   HYPERLINK \l "_Toc493316172"  Reporting Support for Programmable Pixel Processing Hardware  PAGEREF _Toc493316172 \h   HYPERLINK \l "_Toc493316173"  D3DDP2OP_CREATEPIXELSHADER  PAGEREF _Toc493316173 \h   HYPERLINK \l "_Toc493316174"  D3DDP2OP_DELETEPIXELSHADER  PAGEREF _Toc493316174 \h   HYPERLINK \l "_Toc493316175"  D3DDP2OP_SETPIXELSHADER  PAGEREF _Toc493316175 \h   HYPERLINK \l "_Toc493316176"  D3DDP2OP_SETPIXELSHADERCONST  PAGEREF _Toc493316176 \h   HYPERLINK \l "_Toc493316177"  High Order Surfaces  PAGEREF _Toc493316177 \h   HYPERLINK \l "_Toc493316178"  Reporting Support for High Order Surfaces  PAGEREF _Toc493316178 \h   HYPERLINK \l "_Toc493316179"  D3DDP2OP_DRAWRECTPATCH  PAGEREF _Toc493316179 \h   HYPERLINK \l "_Toc493316180"  D3DDP2OP_DRAWTRIPATCH  PAGEREF _Toc493316180 \h   HYPERLINK \l "_Toc493316181"  High Order Surface Render States  PAGEREF _Toc493316181 \h   HYPERLINK \l "_Toc493316182"  Multi-sample Rendering  PAGEREF _Toc493316182 \h   HYPERLINK \l "_Toc493316183"  Reporting Multi-sample Support  PAGEREF _Toc493316183 \h   HYPERLINK \l "_Toc493316184"  Multi-sample Support via StretchBlt  PAGEREF _Toc493316184 \h   HYPERLINK \l "_Toc493316185"  Handling the Creation of Multi-Sampled Surfaces  PAGEREF _Toc493316185 \h   HYPERLINK \l "_Toc493316186"  Controlling Multi-sampling  PAGEREF _Toc493316186 \h   HYPERLINK \l "_Toc493316187"  Pure Device Support  PAGEREF _Toc493316187 \h   HYPERLINK \l "_Toc493316188"  Reporting Pure Device Capability  PAGEREF _Toc493316188 \h   HYPERLINK \l "_Toc493316189"  State Block Recording and Pure Devices  PAGEREF _Toc493316189 \h   HYPERLINK \l "_Toc493316190"  Processing the D3DDP2OP_CLEAR DP2 Token  PAGEREF _Toc493316190 \h   HYPERLINK \l "_Toc493316191"  Vertex Buffer Issues  PAGEREF _Toc493316191 \h   HYPERLINK \l "_Toc493316192"  Vertex Buffer Callbacks and Windows 2000  PAGEREF _Toc493316192 \h   HYPERLINK \l "_Toc493316193"  Vertex Buffer Creation Handling on Windows 2000  PAGEREF _Toc493316193 \h   HYPERLINK \l "_Toc493316194"  Vertex Buffer Renaming  PAGEREF _Toc493316194 \h   HYPERLINK \l "_Toc493316195"  Miscellaneous Issues  PAGEREF _Toc493316195 \h   HYPERLINK \l "_Toc493316196"  Clipping Transformed Vertices  PAGEREF _Toc493316196 \h  Introduction This document is the specification of the DirectX display driver DDI for DirectX 8.0. As the DDI for DirectX 8.0 consists of relatively small incremental changes from the DDI for DirectX 7.0 this document does not attempt to be an exhaustive description of the entire DDI. Rather it focuses on those areas of the DDI, which have been modified or extended for DirectX 8.0. This document is a work in progress and is subject to change. Furthermore, the document is incomplete and does not discuss certain areas of the DDI as yet. This will be corrected in subsequent revisions of this document. DDK Header File and Naming Issues In order to make the task of having a single code base for the DirectX portion of your display driver for both Windows 9x and Windows 2000 changes have been made to the naming conventions used for DDI data structures. Previously d3dnthal.h contained definitions of the Direct3D DDI data structures with a naming convention that included the letters NT, i.e., on Windows NT/2000 the data structure associated with the DrawPrimitive2 token to set a palette was called D3DNTHAL_DP2SETPALETTE. In d3dhal.h for Windows 9x the equivalent data structure was called D3DHAL_DP2SETPALETTE. For DirectX 8.0 we are rationalizing this naming scheme to use the Windows 9x style naming on both Windows 9x and Windows NT/2000. d3dnthal.h as shipped with the DDK no longer contains the NT/2000 style names. At this time this rationalization applies to Direct3D data structures only and not DirectDraw DDI data structure. This may change prior to the release of DirectX 8.0. We realize this will result in some initial work in your code base to convert your driver to the new naming scheme. However, we believe the potential benefits in terms of code sharing will result in significant benefits over time. The DirectX 8.0 DDK introduces a new DDI only header file called d3dhalex.h. This header file contains optional helper definitions and macros which are not required to build a working driver but which may prove helpful. Currently this header only contains some macros to assist with reporting D3DCAPS8 to the runtime. However, prior to the final release of the DirectX 8.0 DDK other definitions will be added to this header file. DIRECT3D_VERSION It is necessary for a DirectX display driver to support legacy (DirectX 7.0 and earlier) versions of the DirectX runtime, and hence, DDI as well as the DirectX 8.0 DDI. In order to do that it is necessary to include both old and new DirectX headers (i.e., d3d.h and d3d8.h etc.). However, this can cause a problem with the definition of the pre-processor symbol DIRECT3D_VERSION. This pre-processor symbol is used in the header files to decide which structures and functions should be included. Thus if DIRECT3D_VERSION is defined to be 0x0600 all features from DirectX 7.0 or newer will be #ifdef d out by the preprocessor. The DirectX header files are designed to set the value of DIRECT3D_VERSION to the most recent version they were designed for if the DIRECT3D_VERSION has not already been defined. Thus, d3d.h sets DIRECT3D_VERSION to 0x0700 and d3d8.h sets DIRECT3D_VERTSION to 0x0800. Unfortunately, this means that if d3d.h is included in your source before d3d8.h new Direct3D 8.0 features will not be defined and compiler errors will result. This problem can be addressed by careful ordering of header file inclusion. However, a preferable solution is simple to define DIRECT3D_VERSION to 0x0800 prior to including any header files. This will ensure the correct definitions are always present. Defining DIRECT3D_VERSION to 0x0800 in either a master include file or as a standard command line parameter is strongly recommended. Minimal DirectX 8.0 DDI Support DirectX 8.0 will provide hardware acceleration by DirectX 7.0 level drivers. However, for a driver to expose any of the new features of DirectX 8.0 such as multiple vertex streams, index buffers, vertex and pixel shaders, volume textures, point sprites etc. it must, at a minimum, identify itself by reporting DirectX 8.0 style capabilities and support the new DrawPrimitive2 rendering tokens. In order to support the new DrawPrimitive2 rendering tokens the driver is required to provide basic support for vertex streams and fixed function vertex shaders. This does not imply that the driver/hardware must support multiple vertex streams or programmable vertex shaders. Simply that DP2 tokens relating to vertex streams and vertex shaders are required to support legacy style, fixed function vertex processing. Beyond that all other features enabled by the DirectX 8.0 DDI are optional. Reporting DirectX 8.0 style capabilities involves several steps, handling the new GetDriverInfo2 variant of the existing GetDriverInfo entry point, returning a D3DCAPS8 structure containing the capabilities of the device when requested, ensuring that defined fields of that structure have certain minimum values and finally returning a texture format list that includes DirectX 8.0 style surface format descriptions. These various requirements are discussed in the following sections. Supporting GetDriverInfo2 The DirectX 8.0 DDI introduces a new mechanism for querying the driver for information. This mechanism extends the existing GetDriverInfo entry point to query for additional information from the driver. Currently this mechanism is only used for querying for DX8 style D3D caps but it may be used for other information over time. Note: As you read the following you may be confused as to why the GetDriverInfo2 mechanism is necessary at all. It would seem preferable to simply define a new GetDriverInfo GUID that the driver would handle by returning a D3DCAP8 structure. In this you would be correct. GetDriverInfo2 is a mechanism introduced to minimize the changes required to the Windows Operating Systems to enable DirectX 8.0 level functionality and, hence, to make redistributing the DirectX 8.0 runtime practical. As such, it is likely that future version of DirectX will return to adding additional GUIDs to the GetDriverInfo entry point when additional information is required of the driver. This extension to GetDriverInfo takes the form of a GetDriverInfo call with the GUID GUID_GetDriverInfo2. When a GetDriverInfo call with that GUID is received by the driver, it must examine the data structure passed in the lpvData field of the DD_GETDRIVERINFODATA data structure to see what information is being requested. As described below lpvData can point to either a DD_GETDRIVERINFO2DATA or DD_STEREOMODE structure. It is important to note that GUID_GetDriverInfo2 is, in fact, the same GUID value as GUID_DDStereoMode. If you driver doesn't handle GUID_DDStereoMode this is not an issue. However, if you wish your DirectX 8.0 driver to handle GUID_DDStereoMode special action must be taken. When a call to GetDriverInfo with the GUID_GetDriverInfo2(GUID_DDStereoMode) is made, the runtime sets the dwHeight field of the DD_STEREOMODE structure to the special value D3DGDI2_MAGIC. This field corresponds to the dwMagic field of the DD_GETDRIVERINFO2DATA structure. Therefore, by casting the lpvData pointer to either a pointer to a DD_STEREOMODE structure or a pointer to a DD_GETDRIVERINFO2DATA structure and checking the value of the corresponding field (dwHeight or dwMagic) for the value D3DGDI2_MAGIC you can distinguish between a call to determine stereo mode capabilities or a request of Direct3D 8.0 capabilities. The dwExpectedSize field of the DD_GETDRIVERINFODATA structure is not used by when a GetDriverInfo2 request is being made. Its value is undefined in this case and should be ignored. The actual expected size of the data is found in the dwExpectedSize field of the DD_GETDRIVERINFO2DATA structure. Once the driver has determined that this is a call to GetDriverInfo2 it must then determine the type of information being requested by the runtime. This type is contained in the dwType field of the DD_GETDRIVERINFO2DATA data structure. Currently only a single request type is defined, D3DGDI2_TYPE_GETD3DCAPS8. This type indicates that the runtime wishes to receive a D3DCAPS8 structure giving the DirectX 8.0 style capabilities of the device. Finally, the driver copies the requested data into the supplied buffer. It is important to note that the lpvData field of the DD_GETDRIVERINFODATA data structure points to the buffer to which to copy the requested data. lpvData also points to the DD_GETDRIVERINFO2DATA structure. This means that the data returned by the driver will overwrite the DD_GETDRIVERINFO2DATA structure (and, hence, that the DD_GETDRIVERINFO2DATA structure occupies the first few DWORDs of the buffer). It is not sufficient for the driver to simply handle GUID_GetDriverInfo2 in its GetDriverInfo callback. In order to be called with GetDriverInfo2, and hence report DirectX 8.0 capabilities, it is necessary for the driver to set the new flag DDHALINFO_GETDRIVERINFO2 in the dwFlags field of the DDHALINFO structure returned by the driver. If this flag is not set the runtime will not send GetDriverInfo2 calls to the driver and, hence, the driver will not be recognized as a DirectX 8.0 level driver. The following code fragment demonstrates how to handle GetDriverInfo2. D3DCAPS8 myD3DCaps8 = {  DWORD CALLBACK DdGetDriverInfo(LPDDHAL_GETDRIVERINFODATA lpData) if (MATCH_GUID((lpData->guidInfo), GUID_GetDriverInfo2)) ASSERT(NULL != lpData); ASSERT(NULL != lpData->lpvData); // Is this a call to GetDriverInfo2 or DDStereoMode? if (((DD_GETDRIVERINFO2DATA*)(lpData->lpvData))->dwMagic == D3DGDI2_MAGIC) // Yes, its a call to GetDriverInfo2, fetch the // DD_GETDRIVERINFO2DATA data structure. DD_GETDRIVERINFO2DATA* pgdi2 = lpData->lpvData; ASSERT(NULL != pgdi2); // What type of request is this? switch (pgdi2->dwType) case D3DGDI2_TYPE_GETD3DCAPS8: // The runtime is requesting the DX8 D3D caps // so copy them over now. It should be noted // that the dwExpectedSize field of // DD_GETDRIVERINFODATA is not used for // GetDriverInfo2 calls and should be ignored. size_t copySize = min( sizeof(myD3DCaps8), pgdi2->dwExpectedSize); memcpy(lpData->lpvData, &myD3DCaps8, copySize); lpData->dwActualSize = copySize; lpData->ddRVal       = DD_OK; return DDHAL_DRIVER_HANDLED; default: // For any other GetDriverInfo2 types not handled // or understood by the driver set an ddRVal of // DDERR_CURRENTLYNOTAVAIL and return // DDHAL_DRIVER_HANDLED. return DDHAL_DRIVER_HANDLED; // It must be a call a request for stereo mode support. // Fetch the stereo mode data DD_STEREOMODE* pStereoMode = lpData->lpvData; ASSERT(NULL != pStereoMode); // Process the stereo mode request... lpData->dwActualSize = sizeof(DD_STEREOMODE); lpData->ddRVal       = DD_OK; return DDHAL_DRIVER_HANDLED; // Handle any other device GUIDs... } // DdGetDriverInfo The following is the data structure passed in the lpvData field of the DD_GETDRIVERINFODATA structure when GUID_GetDriverInfo2 is specified. typedef struct _DD_GETDRIVERINFO2DATA DWORD dwReserved; // Reserved Field. // Driver should not read or write this field. DWORD dwMagic; // Magic Number. Has the value D3DGDI2_MAGIC // if this is a GetDriverInfo2 call. // Otherwise this structure is, in fact, a // DD_STEREOMODE call. // Driver should only read this field. DWORD dwType; // Type of information requested. This // field contains one of the // DDGDI2_TYPE_ #defines listed below. // Driver should only read (not write) this // field. DWORD dwExpectedSize; // Expected size of the information // requested. // Driver should only read // (not write) this field. // The remainder of the data buffer (beyond the first // four DWORDs) follows here. } DD_GETDRIVERINFO2DATA; Reporting DirectX 8.0 Style Direct3D Capabilities In response to GetDriverInfo2 query with type D3DGDI2_TYPE_GETD3DCAPS8, the driver should copy an initialized D3DCAPS8 structure into the lpvData field of the DD_GETDRIVERINFODATA structure. This structure is new for DirectX 8.0 and is used for both reporting capabilities from the driver to runtime and from the runtime to the application. D3DCAPS8 has fields that describe both capabilities new to DirectX 8.0 and capabilities carried forward from DirectX 7.0. D3DCAPS8 is not a complete replacement for existing capabilities. Although this structure (along with information of supported surface formats) is a complete description of the device s capabilities from an API perspective it is not sufficient for the DDI. The runtime makes use of the DirectDraw capabilities reported by the driver for such information supported surface capabilities (DDSCAPS) even though these are not exposed directly through the DirectX 8.0 API. Furthermore, the driver is required to continue to report legacy capability structures (such as D3DHAL_D3DEXTENDEDCAPS) as applications using legacy interfaces (DirectX 7.0 and below will continue to request these capabilities). Therefore, reporting DirectX 8.0 style caps through D3DCAPS8 is an additional requirement, rather than a replacement for the existing capability reporting mechanisms. When DirectX 8.0 interfaces are used by the application the runtime will not query for extended D3D capabilities such as D3DHAL_D3DEXTENDEDCAPS if the driver reports DirectX 8.0 capabilities with D3DCAPS8. typedef struct _D3DCAPS8 /* Device Info */ D3DDEVTYPE  DeviceType; UINT    AdapterOrdinal; /* Caps from DX7 Draw */ DWORD   Caps; DWORD   Caps2; DWORD   Caps3; DWORD   PresentationIntervals; /* Cursor Caps */ DWORD   CursorCaps; /* 3D Device Caps */ DWORD   DevCaps; DWORD   PrimitiveMiscCaps; DWORD   RasterCaps; DWORD   ZCmpCaps; DWORD   SrcBlendCaps; DWORD   DestBlendCaps; DWORD   AlphaCmpCaps; DWORD   ShadeCaps; DWORD   TextureCaps; DWORD   TextureFilterCaps;          // D3DPTFILTERCAPS for // IDirect3DTexture8's DWORD   CubeTextureFilterCaps;      // D3DPTFILTERCAPS for // IDirect3DCubeTexture8's DWORD   VolumeTextureFilterCaps;    // D3DPTFILTERCAPS for // IDirect3DVolumeTexture8's DWORD   TextureAddressCaps;         // D3DPTADDRESSCAPS for // IDirect3DTexture8's DWORD   VolumeTextureAddressCaps;   // D3DPTADDRESSCAPS for // IDirect3DVolumeTexture8's DWORD   LineCaps;                   // D3DLINECAPS // size limits for textures DWORD   MaxTextureWidth, MaxTextureHeight; DWORD   MaxVolumeExtent; DWORD   MaxTextureRepeat; DWORD   MaxTextureAspectRatio; DWORD   MaxAnisotropy; float   MaxVertexW; float   GuardBandLeft; float   GuardBandTop; float   GuardBandRight; float   GuardBandBottom; float   ExtentsAdjust; DWORD   StencilCaps; DWORD   FVFCaps; DWORD   TextureOpCaps; DWORD   MaxTextureBlendStages; DWORD   MaxSimultaneousTextures; DWORD   VertexProcessingCaps; DWORD   MaxActiveLights; DWORD   MaxUserClipPlanes; DWORD   MaxVertexBlendMatrices; DWORD   MaxVertexBlendMatrixIndex; float   MaxPointSize; DWORD   MaxPrimitiveCount; // max number of primitives // per DrawPrimitive call DWORD   MaxVertexIndex; DWORD   MaxStreams; DWORD   MaxStreamStride; // max stride for // SetStreamSource DWORD   VertexShaderVersion; DWORD   MaxVertexShaderConst; // number of vertex shader // constant registers DWORD   PixelShaderVersion; float   MaxPixelShaderValue; // max value of pixel shader // arithmetic component } D3DCAPS8; The driver should not initialize the DeviceType or AdapterOrdinal fields. These will be initialized to appropriate values by the runtime. The driver should simply set these fields to zero. Minimum Capability Requirements for DirectX 8.0 Drivers In addition to returning the above data structure in response to a GetDriverInfo2 query the DirectX 8.0 runtime has other requirements that a driver must meet to be considered a DirectX 8.0 level driver. As such a driver that returns the above D3DCAPS8 data structure but does not meet these additional requirements will fail initialization and, hence, Direct3D will not expose a HAL. These minimum capabilities are described below. A DirectX 8.0 driver must explicitly: Report support for one (1) or more vertex streams in the MaxStreams field of D3DCAPS8 Report a maximum point sprite size of at least one (1) in the MaxPointSize field of D3DCAPS8 Modify its list of supported texture formats to support new style pixel format specifications Handle the new DrawPrimitive2 (DP2) drawing tokens. Handle CreateSurfaceEx for vertex and index buffers even if your driver does not support video memory vertex buffer creation. Handles for system memory vertex and index buffers will be passed to the driver. Set the new post-transformed clipping flag D3DPMISCCAPS_CLIPTLVERTS if the hardware supports clipping of post-transformed vertex data. More detailed discussions of these various requirements can be found in subsequent chapters of this document. It should be noted that a driver is NOT required to support any of the new features of DirectX 8.0 such as pixel or vertex shaders, volume textures, point sprites (beyond the non-zero maximum point size), multi-sampling or even multiple vertex streams (as the driver can set the maximum number of simultaneous vertex streams to one) in order to be considered a DirectX 8.0 driver. Reporting Support for Video Memory Vertex and Index Buffers A number of released drivers do not support video memory vertex buffers correctly even though they added that capability. This has caused severe end user problems when video memory vertex buffers were enabled by the runtime. To address this issue DirectX 8.0 introduces two new device capabilities that drivers who wish to use video memory vertex buffers must set. These capabilities communicate to the runtime that video vertex and/or index buffers have been extensively tests on both Win9x and Windows 2000 with the DirectX 8.0 runtime (and the version of DirectX 7.0 runtime that is shipped with DirectX 8.0) and that they work correctly including when vertex buffer renaming (see below) is used. If these capability bits are not set video memory vertex and index buffers will be disabled even for DirectX 7.0 level drivers. These capability flags should be set in the DevCaps field of the D3DCAPS8 structure and are as follows: Prior to addition of these flags the runtime had no good way to determine whether the driver provided real support for video memory vertex buffers or not. The addition of index buffers made this situation worse. These new flags clarify this situation. Therefore, if a DirectX 8.0 exports the execute buffer (d3d buffer) creation and destruction driver entry points it should add one or both of the capability bits D3DDEVCAPS_HWVERTEXBUFFER and D3DDEVCAPS_HWINDEXBUFFER to the DevCaps field of the D3DCAPS8 structure reported via GetDriverInfo2 to the runtime. Set the flag D3DDEVCAPS_HWVERTEXBUFFER if your driver supports video or non-local video memory vertex buffers and D3DDEVCAPS_HWINDEXBUFFER if your driver supports video or non-local video memory index buffers. The runtime masks these capability bits off before reporting capabilities to the application (as they are not useful to applications only to the runtime itself). Therefore, these capabilities will not be visible to the DirectX Caps Viewer applet even if your driver exports them. Correct support for these capabilities will be part of WHQL certification testing. The Texture Format List Direct 8.0 introduces a new mechanism for describing pixel formats. In previous versions of DirectDraw and Direct3D pixel formats were described by a data structure (DDPIXELFORMAT) which contained information about the number of bits per color channel and bit masks for each color channel (along with flags and size field). Although flexible these data structures were complex and unwieldy. Pixel formats in DirectX 8.0 are simple DWORDs that identify a particular pixel format. As such, they are similar to FOURCC codes. In fact, Direct 8.0 pixel formats are compatible with FOURCC codes (Direct3D pixel formats are simply FOURCC codes with all but the least significant bytes being zero). The DDPIXELFORMAT data structure is no longer exposed through API level interfaces. However, it is still used at the DDI level. Specifically, the driver still reports its supported texture formats through a texture format array that consists of surface descriptions with their embedded DDPIXELFORMAT data structures. However, the embedded pixel format structures can now be used to report new style pixel formats. Too specify a new style pixel format using the DDPIXELFORMAT data structure simply set the dwFlags field of the structure to the value DDPF_D3DFORMAT and store the new pixel format identifier in the dwFourCC field. In addition certain other new fields have been added DDPIXELFORMAT (the new fields have been added as members of unions with existing fields so the size of the data structure is the same). These fields include dwOperations that stores the intended operations that can be performed on surfaces with this pixel format, i.e., whether they can be used as textures, cube maps, volume textures, render targets, z/stencil buffers etc., dwPrivateFormatBitCount which holds the bits per pixel of a pixel format private to the driver (i.e., not one of the standard ones defined by Direct3D) and wFlipMSTypes and wBltMSTypes which are used when specifying surfaces that can be used when performing multi-sample rendering. A driver supporting the DirectX 8.0 DDI should return a texture format list containing surface formats specified using the new mechanism described above. This is not an absolute requirement, as the runtime will attempt to map old style pixel formats to new ones. However, it is highly recommended that a driver return new style pixel formats directly (certain new formats and features require new style pixel formats). A DirectX 8.0 DDI compliant driver should continue to report DX7 style surface formats via the standard mechanisms, i.e., the texture format list reported in the global driver data structure (D3DHAL_GLOBALDRIVERDATA) and the Z/Stencil list reported in response to a GUID_ZPixelFormats from GetDriverInfo. However, the driver should also report all of its supported surface formats through the new DirectX 8.0 DDI mechanism described below. DirectX 8.0 DDI style surface formats are reported using the new GetDriverInfo2 described earlier in this document. Two GetDriverInfo2 query types are used by the runtime to query for surface formats from the driver. D3DGDI2_TYPE_GETFORMATCOUNT is used to request the number of DirectX 8.0 style surface formats supported by the driver. D3DGDI2_TYPE_GETFORMAT is used to query for a particular surface format from the driver.  For GetDriverInfo2 queries with the type D3DGDI2_TYPE_GETFORMATCOUNT , the data structure pointed to by the lpvData field of the DDHAL_GETDRIVERINFODATA is DD_GETFORMATCOUNTDATA. This data structure is shown below. typedef struct _DD_GETFORMATCOUNTDATA     DD_GETDRIVERINFO2DATA gdi2; // [in/out] // GetDriverInfo2 data     DWORD                 dwFormatCount; // [out] // Number of supported // surface formats     DWORD                 dwReserved; // Reserved } DD_GETFORMATCOUNTDATA; To handle the D3DGDI2_TYPE_GETFORMATCOUNT all that is required is for the driver to store the number of DirectX 8.0 DDI style surface formats it supports in the dwFormatCount field of the DD_GETFORMATCOUNTDATA.  When the runtime has received the number of supported formats from the driver it when query for each surface format in turn with GetDriverInfo2 queries of type D3DGDI2_TYPE_GETFORMAT. The data structure pointed to by the lpvData field of the DDHAL_GETDRIVERINFODATA data structure is, in this case, DD_GETFORMATDATA. This data structure is shown below. typedef struct _DD_GETFORMATDATA     DD_GETDRIVERINFO2DATA gdi2; // [in/out] // GetDriverInfo2 data     DWORD                 dwFormatIndex; // [in] // The format to return     DDPIXELFORMAT         format; // [out] // The actual format } DD_GETFORMATDATA; The runtime identifies the format to be returned with an integer index whose value varies between zero (0) and one less than the number of supported formats reported earlier by the driver. How these indices as mapped to actual formats is left to the driver. All that matters is that each index maps uniquely to one supported format. The order in which the formats are reported is not significant. When processing this GetDriverInfo2 request the driver should read the dwFormatIndex and map that to one of the supported formats (probably by simply using dwFormatIndex as an index into an array of DDPIXELFORMAT structures) and then copy that format into the format field of the DD_GETFORMATDATA field. The runtime guarantees that it will only pass an index to the driver that is in the range zero (0) to one less that the number of surface formats reported by the driver. However, it is recommended that the range of the index be validated in the debug driver build at least. The DirectX 8.0 runtime scans the texture format list reported by the driver examining the dwFlags fields of each pixel format. If any of the texture formats have dwFlags set to DDPF_D3DFORMAT the runtime identifies this texture format list as DX8 style and will filter all texture formats whose pixel format is not flagged as DDPF_D3DFORMAT. Furthermore, a DX7 or runtime will filter any texture format, which does have DDPF_D3DFORMAT set. Therefore, a driver supporting the DX8 DDI can return a texture format list that contains two entries for each supported format, one specified in the old style and one in the new. DX8 runtimes will use the formats specified in the new style and DX7 runtimes will use the formats specified in the old style. All supported surface formats, be they textures, depth or stencil buffers, render targets etc., should all be reported through the GetDriverInfo2 mechanism. The runtime will ignore the texture and Z/Stencil formats returned through legacy mechanisms (D3DHAL_GLOBALDRIVERDATA and GUID_ZPixelFormats). No attempt will be made to map these formats to DX8 style formats for DirectX 8.0 drivers. However, legacy formats will be mapped to the new style for legacy, DirectX 7.0 or earlier drivers. Therefore, a driver must report all supported surface formats through the DirectX 8.0 DDI. Furthermore, as legacy runtimes will not map new style surface formats to old style formats it is essential that the driver continue to report DirectX 7.0 style surface and Z/Stencil formats through the legacy mechanism. Format Operations When reporting supported surface formats a DirectX 8.0 driver must also indicate which operations can be performed on surfaces of that format. The supported operations for a pixel format are reported through the dwOperations field of the DDPIXELFORMAT structure. The driver should set this field to the logical combination of all supported operations for surfaces of that format. The operations that can be reported are as follows: D3DFORMAT_OP_TEXTURE When this flag is specified in a pixel format it indicates that surfaces of this format can be used as mip-mapped textures. D3DFORMAT_OP_VOLUMETEXTURE When this flag is specified in a pixel format it indicates that surfaces of this format can be used as volume textures. Please note, that this flag is independent of D3DFORMAT_OP_TEXTURE. Thus, it is possible to specify a pixel format that can only be used for volume textures and not for conventional, mip-mapped textures. D3DFORMAT_OP_CUBETEXTURE When this flag is specified in a pixel format it indicates that surfaces of this format can be used as cubic environment map textures. Please note, that this flag is independent of D3DFORMAT_OP_TEXTURE. Thus, it is possible to specify a pixel format that can only be used for cubic environment map textures and not for conventional, mip-mapped textures. D3DFORMAT_OP_OFFSCREEN_RENDERTARGET When this flag is specified in a pixel format it indicates that surfaces of this format can be used as an offscreen render target regardless of the pixel format of the display mode (providing the pixel format of the current display mode was reported with the D3DFORMAT_OP_DISPLAYMODE and D3DFORMAT_OP_3DACCELERATION). If the pixel format of the current display mode did not have these flags set it indicates no 3D acceleration is available in this mode even if the render target is offscreen. This flag can be combined with D3DFORMAT_OP_TEXTURE to indicate that the device can render to textures of the specified pixel format. D3DFORMAT_OP_SAME_FORMAT_RENDERTARGET When this flag is specified in a pixel format it indicates that surfaces of this format can be used as render targets but only when the pixel format of the surface matches the pixel format of the current display mode. This flag does not only apply to offscreen render target but can be specified on the pixel formats of display modes to indicate rendering target capability. This flag can be combined with D3DFORMAT_OP_TEXTURE to indicate that the device can render to textures of the specified pixel format. D3DFORMAT_OP_ZSTENCIL When this flag is specified in a pixel format it indicates that surfaces of this format can be used as Z/Stencil buffers but only if the depth of the Z/Stencil surface matches the color depth of the rendering target to which the depth buffer is attached. When deciding on a match between Z/Stencil and color buffer depth the pixel stride is used. D3DFORMAT_OP_ZSTENCIL_WITH_ARBITRARY_COLOR_DEPTH When this flag is specified in a pixel format it indicates that surfaces of this format can be used as Z/Stencil buffers regardless of the color depth of the render target to which the surface is attached. When specifying this flag you should specify D3DFORMAT_OP_ZSTENCIL also. D3DFORMAT_OP_SAME_FORMAT_UP_TO_ALPHA_RENDERTARGET When this flag is specified in a pixel format it indicates that surfaces of this format can be used as a render target if the current display mode is the same depth if the alpha channel is ignored. e.g. if the device can render to A8R8G8B8 when the display mode is X8R8G8B8, then the format operation list entry for A8R8G8B8 should have this flag set. D3DFORMAT_OP_DISPLAYMODE When this flag is specified it indicates that there is a display mode with this pixel format that has DirectDraw support (including Flip). This flag should not to be set on alpha formats. D3DFORMAT_OP_3DACCELERATION When this flag is specified the graphics accelerator can support some level of Direct3D acceleration when in a display mode with this pixel format and also implies that the driver can create a context in this mode (for some render target format). This flag must only be used when reporting display mode formats (by specifying the D3DFORMAT_OP_DISPLAYMODE). It is not required and indeed should not be set when reporting offscreen render targets formats. Surface Formats as FOURCC Codes Three of the new surface formats defined by DirectX 8.0, D3DFMT_Q8W8V8U8, D3DFMT_V16U16 and D3DFMT_W11V11U10, are passed to the driver as FOURCC codes. This means the various bit depth and mask fields of the DDPIXELFORMAT data structure are not initialized and there values are undefined. Hence, a driver processing these three formats must not rely on the bit count or masks in the pixel format but must compute these as necessary. For example, when computing the pitch of a surface of one of these types the dwRGBBitCount field of the pixel format must not be used. All other formats other than YUV, DXT and IHV specific extension formats are mapped to the legacy DDPIXELFORMAT representation when passed to the driver and, hence, will have valid pixel formats and masks in the pixel format data structure. Multiple Vertex Streams Reporting Multiple Vertex Stream Capability A driver reports the ability to support multiple vertex streams by setting the value of the MaxStreams field of the D3DCAPS8 structure. A driver that supports multiple vertex streams should specify a value greater than one. A DX8 level driver that doesn t support multiple vertex streams should set MaxStreams to one (1). Even if the driver/hardware combination does not support more than one stream of vertex data the driver must still handle the stream binding DP2 tokens (D3DDP2OP_SETSTREAMSOURCE and D3DDP2OP_SETSTREAMSOURCEUM) and the new vertex stream based DP2 drawing tokens described below as these are the mechanisms for passing vertex data to the driver in drawing for DirectX 8.0 level drivers. No DX8 level driver should specify a value of zero for this field. The driver should also set the MaxStreamStride field to the maximum supported stride (in bytes) between vertex elements in a vertex stream. Stream Zero Vertex stream zero is treated differently from the other streams (by virtue of the fact that it was the only stream supported by prior versions of Direct3D). Vertex buffers that have a flexible vertex format (FVF) (FVF field is non-zero) can only be bound to stream zero (this does not imply that the vertex buffer bound to stream zero will always have a flexible vertex format). Stream zero is also the implied vertex source when one of the special, fixed-function vertex shaders is the current vertex shader handle. Notification of Stream / Vertex Buffer Binding A driver is notified of the binding of a vertex buffer to a particular stream through a new DP2 token, D3DDP2OP_SETSTREAMSOURCE, and its associated HAL data structure, D3DHAL_DP2SETSTREAMSOURCE shown below. typedef struct _D3DHAL_DP2SETSTREAMSOURCE     DWORD dwStream;     // Stream index, starting from zero     DWORD dwVBHandle;   // Vertex buffer handle     DWORD dwStride;     // Vertex stride } D3DHAL_DP2SETSTREAMSOURCE, *LPD3DHAL_DP2SETSTREAMSOURCE; The stream being bound is given by dwStream and will have a value between zero (0) and the maximum number of streams specified by the driver (MaxStreams). The debug runtime validates that dwStream is within the legal range but the retail version does not so validation must be present in the driver. DirectX 8.0 does not define the behavior of the driver or hardware in the error case where the stream index given is larger than the maximum stream supported by the hardware (as reported through MaxStreams in D3DCAPS8) beyond requiring that the driver/hardware combination not fault or hang in this case and that, on restoration of correct state the driver/hardware combination should continue to operate normally. It is strongly recommended that debug versions of your display driver display messages in the debug output stream indicating when this problem has been detected. It is legal for the vertex buffer handle (dwVBHandle) to be zero (0) in which case the stream is no longer bound to a vertex buffer. It should be noted that the runtime does not validate the streams accessed by the current vertex shader are non-NULL. It is the responsibility of the driver writer to ensure the driver/hardware does not crash when this error case arises. DirectX 8.0 does not mandate the behavior of the driver/hardware in this case other than to require that the no crash or hang occurs and that the driver can continue to operate correctly when correct state is restored. It is permissible for the display problems to continue for the offending application until it is shutdown, but other applications should not be effected. It is strongly recommended that debug versions of your display driver display messages in the debug output stream indicating when this problem has been detected. It is guaranteed that only a single stream source will be set by a D3DHAL_DP2COMMAND. That is, the wStateCount field of the D3DHAL_DP2COMMAND will always be one (1) when bCommand is D3DDP2OP_SETSTREAMSOURCE. In addition to binding a stream to a vertex buffer it is possible for the vertex data of stream zero) to be supplied in a user memory (UM) buffer. In this case another DP2 token and associated data structure is used to notify the driver of stream binding. That token is D3DDP2OP_SETSTREAMSOURCEUM and its associated data structure, D3DHAL_DP2SETSTREAMSOURCEUM, is shown below. typedef struct _D3DHAL_DP2SETSTREAMSOURCEUM     DWORD dwStream;     // Stream index, starting from zero     DWORD dwStride;     // Vertex stride } D3DHAL_DP2SETSTREAMSOURCEUM, *LPD3DHAL_DP2SETSTREAMSOURCEUM; Although it is possible that dwStream will have values other than zero in future versions of DirectX, for DirectX 8.0 the dwStream field of D3DHAL_DP2SETSTREAMSOURCEUM will always be zero. Specifically, DirectX 8.0 does not support multiple vertex streams with user supplied buffers rather than vertex buffers. Additionally, it is not possible to mix user memory buffers with vertex buffers. When a user memory buffers is supplied it is guaranteed to be stream zero and to be the only stream that should be accessed by subsequent drawing primitives. It is possible that other streams will have non-NULL vertex buffers bound to them at the time when a user memory buffer is bound to stream, however, those other streams must be ignored by the driver and hardware. The actual user memory pointer to the vertex data should be extracted from the D3DHAL_DRAWPRIMITIVES2DATA passed when actually drawing primitives. Index Buffers DirectX 8.0 introduces the concept of index buffers. These buffers are very similar to vertex buffers but store simple 16 or 32-bit indices into vertex data rather than the vertex data itself. Index buffers extend all the benefits of vertex buffers (optimal download, caching etc) to index data. Index buffers are created, locked, unlocked and destroyed with the same driver entry points as those used for vertex buffers. A driver can distinguish between these buffer types using the new surface capability bit DDSCAPS2_INDEXBUFFER. For index buffers, this flag will be set in the ddsCapsEx.dwCaps2 field of the surface s DDRAWI_DDRAWSURFACE_MORE structure. It will be clear for vertex buffers. Unlike many other surface types a driver does not need to set the capability DDSCAPS2_INDEXBUFFER when reporting its capabilities to the runtime in order to receive driver calls for index buffer creation, destruction and locking. A DirectX 8.0 driver that supports vertex buffers is assumed to support index buffers also. If the underlying hardware has no direct support for index buffers the driver should simply handle index buffer creation by allocating system memory for the surface. Reporting Support for 32-bit Indices Prior to DirectX 8.0 vertex indices were restricted to 16-bit quantities. DirectX 8.0 adds support for 32-bit indices. A driver reports support for 32-bit indices by setting the value of the MaxVertexIndex field of D3DCAPS8 (currently also in D3DHAL_D3DEXTENDCAPS) to a value greater than 0xFFFF, i.e., greater than or equal to 65536. This field also allows the driver to report that although it supports indices requiring 32-bits of storage it does not support the full range of 32-bit values. Setting the Current Index Buffer As with vertex data, the index buffer to be used by drawing primitives is no longer part of the data passed to the driver with the primitive, but rather is driver state. The current index buffer is set by a new DP2 token, D3DDP2OP_SETINDICES. This token established the index buffer with the given handle as the current index buffer to use when drawing indexed primitives until a new index buffer is set or the current index buffer is cleared (an index buffer handle of zero is specified in the DP2 token data). The data structure associated with the DP2 token D3DDP2OP_SETINDICES is given below. typedef struct _D3DHAL_DP2SETINDICES DWORD dwVBHandle; // Index buffer handle DWORD dwStride; // Index size in bytes (2 or 4) } D3DHAL_DP2SETINDICES, *LPD3DHAL_DP2SETINDICES; dwVBHandle is the surface handle associate with this surface via a call to CreateSurfaceEx. A handle value of zero (0) is valid and indicates that the current index buffer is cleared. Subsequent attempts to draw indexed primitives (before a new current index buffer is established via another D3DDP2OP_SETINDICES token) should be handled by the driver such that a crash does not occur. Ignoring those primitives or drawing garbage are both acceptable as long as the driver does not crash and can continue to operate normally for non-indexed primitives. It is strongly recommended that the debug version of your driver display informative messages to the debug output stream when this error condition is detected. dwStride gives the size of the indices contained in the index buffer. dwStride will have the value 2 if the indices are 16-bit or 4 if the indices are 32-bit quantities. New DP2 Stream Drawing Tokens DirectX 8.0 s support for multiple streams of vertex data requires that new DP2 drawing tokens be introduced. These new tokens were necessary as the existing drawing tokens assumed that there was a single pointer to vertex data for a particular drawing instruction. With multiple streams, this is no longer the case. A drawing command may well access multiple vertex data buffers simultaneously via streams. This section describes these new drawing tokens. It is important to note that these drawing tokens replace the existing primitive type specific tokens (D3DDP2OP_POINTS, D3DDP2OP_TRIANGLELIST, D3DDP2OP_TRIANGLESTRIP etc.) for calls through the new DirectX 8.0 interfaces only. Calls made through DX7 our earlier interfaces will still be passed through the DDI as the old style drawing tokens. Therefore, a DX 8 driver is required to support both old and new style drawing tokens.  The indexed and non-indexed drawing tokens both have two variants. For example, non-indexed drawing is accomplished by the tokens D3DDP2OP_DRAWPRIMITIVE and D3DDP2OP_DRAWPRIMITIVE2. Similarly, indexed drawing is accomplished vie the tokens D3DDP2OP_DRAWINDEXEDPRIMITIVE and D3DDP2OP_DRAWINDEXEDPRIMITIVE2. The main distinction between the two variants is that D3DDP2OP_DRAWPRIMITIVE2 and D3DDP2OP_DRAWINDEXEDPRIMITIVE2 are used when the vertex data has been transformed by the runtime. This can be the case either because the driver/hardware does not support hardware vertex processing or if software vertex processing has been explicitly selected. For these tokens only stream zero is used and it contains transformed and lit vertices. D3DDP2OP_DRAWPRIMITIVE and D3DDP2OP_DRAWINDEXEDPRIMITIVE are used when the runtime has not processed the vertex data. Thus, these tokens can supply untransformed vertex data when the hardware supports hardware vertex processing or transformed vertex data when the application supplies transformed data direct to the runtime. In this case any number of streams (up to MaxStreams) can be active. Fundamentally, these variants (along with the other new drawing token, D3DDP2OP_CLIPPEDTRIANGLEFAN) enable optimal code paths in the runtime and the distinctions beyond those described here are not significant to the driver. D3DDP2OP_DRAWPRIMITIVE This token is sent to the driver to draw non-indexed primitives. The vertex data can be untransformed (if the hardware supports hardware vertex processing) or transform if the application supplied data in that form to the runtime. D3DDP2OP_DRAWPRIMITIVE2 is used if the vertex data has been transformed by the runtime. typedef struct _D3DHAL_DP2DRAWPRIMITIVE     D3DPRIMITIVETYPE primType;     DWORD  VStart;     DWORD PrimitiveCount; } D3DHAL_DP2DRAWPRIMITIVE, *LPD3DHAL_DP2DRAWPRIMITIVE; primType is the type of primitive to draw (one of D3DPT_POINTLIST, D3DPT_LINELIST, D3DPT_LINESTRIP, D3DPT_TRIANGLELIST, D3DPT_TRIANGLESTRIP or D3DPT_TRIANGLEFAN). PrimitiveCount does not actually give the number of primitives to draw, but rather is the number of triangles, line or points to draw for a given primitive. For example, for a triangle fan PrimitiveCount will give the number of triangles forming the fan, etc. VStart is the index (in to each active vertex stream) of the vertex elements with which to start drawing. Actual vertex data should be read from the current vertex streams (those referenced by the current vertex shader) rather than from the vertex data pointer in D3DHAL_DRAWPRIMITIVES2DATA. D3DDP2OP_DRAWINDEXEDPRIMITIVE This token is sent to the driver to draw indexed primitives. The vertex data can be untransformed (if the hardware supports hardware vertex processing) or transform if the application supplied data in that form to the runtime. D3DDP2OP_DRAWINDEXEDPRIMITIVE2 is used if the vertex data has been transformed by the runtime. As with vertices, the actual indices to use are not passed with the token data, but rather should be read from the currently selected index buffer. See the section on   REF _Ref486313994 \h  Index Buffers  in this document for more details. typedef struct _D3DHAL_DP2DRAWINDEXEDPRIMITIVE D3DPRIMITIVETYPE primType; DWORD BaseVertexIndex; // Vertex which corresponds to index 0 DWORD MinIndex; // Min vertex index in the vertex buffer DWORD NumVertices; // Number of vertices starting from // MinIndex DWORD StartIndex; // Start index in the index buffer DWORD PrimitiveCount; } D3DHAL_DP2DRAWINDEXEDPRIMITIVE, *LPD3DHAL_DP2DRAWINDEXEDPRIMITIVE; primType is the type of primitive to draw (one of D3DPT_POINTLIST, D3DPT_LINELIST, D3DPT_LINESTRIP, D3DPT_TRIANGLELIST, D3DPT_TRIANGLESTRIP or D3DPT_TRIANGLEFAN). PrimitiveCount does not actually give the number of primitives to draw, but rather is the number of triangles, line or points to draw for a given primitive. For example, for a triangle fan PrimitiveCount will give the number of triangles forming the fan, etc. BaseVertexIndex should be added to each index referenced by the various primitives to determine the actual index of the vertex elements in each vertex stream. StartIndex gives the first index in the index buffer from which indices are read to draw the primitives. MinIndex and NumVertices give the range of vertices that are potentially accessed by the primitives to be drawn and, hence, which vertices should be processed. D3DDP2OP_DRAWPRIMITIVE2 This token is sent to the driver to draw non-indexed primitives where the vertex data has been transformed by the runtime. Stream zero (0) contains transform and lit vertices and is the only stream that should be accessed. typedef struct _D3DHAL_DP2DRAWPRIMITIVE2 D3DPRIMITIVETYPE primType; DWORD FirstVertexOffset; // Offset in bytes in the stream 0 DWORD PrimitiveCount; } D3DHAL_DP2DRAWPRIMITIVE2, *LPD3DHAL_DP2DRAWPRIMITIVE2; primType is the type of primitive to draw (one of D3DPT_POINTLIST, D3DPT_LINELIST, D3DPT_LINESTRIP, D3DPT_TRIANGLELIST, D3DPT_TRIANGLESTRIP or D3DPT_TRIANGLEFAN). PrimitiveCount does not actually give the number of primitives to draw, but rather is the number of triangles, line or points to draw for a given primitive. For example, for a triangle fan PrimitiveCount will give the number of triangles forming the fan, etc. FirstVertexOffset is the offset in bytes in stream zero (0) of the vertex data. This is in contrast to D3DDP2OP_DRAWPRITIVE where the start of the vertex data in the vertex stream is specified by a vertex index rather than an actual byte offset. D3DDP2OP_DRAWINDEXEDPRIMITIVE2 This token is sent to the driver to draw indexed primitives if the vertex data has been transformed by the runtime. Stream zero (0) contains transform and lit vertices and is the only stream that should be accessed. As with vertices, the actual indices to use are not passed with the token data, but rather should be read from the currently selected index buffer. See the section on   REF _Ref486313994 \h  Index Buffers  in this document for more details. typedef struct _D3DHAL_DP2DRAWINDEXEDPRIMITIVE2 D3DPRIMITIVETYPE primType; INT   BaseVertexOffset; // Stream 0 offset of the vertex which  // corresponds to index 0. This // offset could be negative, but when // an index is added to the offset // the result is positive  DWORD MinIndex; // Min vertex index in the vertex buffer DWORD NumVertices; // Number of vertices starting from // MinIndex DWORD StartIndexOffset; // Offset of the start index in the // index buffer DWORD PrimitiveCount; // Number of triangles (points, lines) } D3DHAL_DP2DRAWINDEXEDPRIMITIVE2, *LPD3DHAL_DP2DRAWINDEXEDPRIMITIVE2; primType is the type of primitive to draw (one of D3DPT_POINTLIST, D3DPT_LINELIST, D3DPT_LINESTRIP, D3DPT_TRIANGLELIST, D3DPT_TRIANGLESTRIP or D3DPT_TRIANGLEFAN). PrimitiveCount does not actually give the number of primitives to draw, but rather is the number of triangles, line or points to draw for a given primitive. For example, for a triangle fan PrimitiveCount will give the number of triangles forming the fan, etc. BaseVertexIndex should be added to each index referenced by the various primitives to determine the actual index of the vertex elements in stream zero (0). StartIndexOffset gives the first index in the index buffer from which indices are read to draw the primitives. MinIndex and NumVertices give the range of vertices that are potentially accessed by the primitives to be drawn and, hence, which vertices should be processed. D3DDP2OP_CLIPPEDTRIANGLEFAN This token is sent to the driver to draw transformed, clipped triangle fans. This token is a replacement for the DirectX 7.0 tokens that used inline vertices in the command stream. typedef struct _D3DHAL_CLIPPEDTRIANGLEFAN DWORD FirstVertexOffset; // Offset in bytes in the // current stream 0 DWORD dwEdgeFlags; DWORD PrimitiveCount; } D3DHAL_CLIPPEDTRIANGLEFAN, *LPD3DHAL_CLIPPEDTRIANGLEFAN; A single D3DDP2OP_CLIPPEDTRIANGLEFAN token can be used to draw multiple triangle fans. The number of primitives to draw is given by PrimitiveCount. FirstVertexOffset is the byte offset into stream 0 of the start of the vertex data (not the index of the vertex). dwEdgeFlags specify which edges are to be drawn when rendering wire frame (to prevent the drawing of edges introduced by clipping). Point Sprites DirectX 8.0 introduces support for point sprites. A point sprite is an extension to basic point rendering which allows the size of the point to be specified (either by a render state or by a vertex component). When accelerated the point sprites will be rendered in hardware as a screen space quad formed of two triangles and render states such as textures, blending etc. will be used. Reporting Support for Point Sprites A driver notifies the runtime of its support for point sprites by setting the MaxPointSize field of the D3DCAPS8 structure to a floating point number greater than one (reporting a value of one is part of the requirement to indicate a DX8 level HAL). This value specifies the maximum point width and height in render target pixels. Devices that don t support large point sprites can set this value to 1.0. The size of a point sprite can be specified either by a new pre-vertex element or by a new render state. If driver/hardware supports the interleaving of point size information with other vertex data (rather than simply through the point size render state D3DRS_POINTSIZE) it should set the D3DFVFCAPS_PSIZE flag in the FVFCaps field of the D3DCAPS8 structure. Point sprites present a challenging when user clip planes are being used. Its is possible that a particular hardware implementation of point sprites will clip only the actual vertex position of the point sprite against the user clip plane, rather than the expanded quad actually rendered. If the driver/hardware can support clipping of point sprites by their actual computed size rather than simple vertex position the D3DPMISCCAPS_CLIPPLANESCALEDPOINTS capability bit should be set in PrimitiveMiscCaps field of D3DCAPS8. Computing the Size of Point Sprites Point sprites are rendered using the existing D3DPT_POINT primitive type. The size of point sprites can be controlled either via the new render state D3DRS_POINTSIZE or by the new FVF vertex component D3DFVF_PSIZE.  For vertices without the D3DFVF_PSIZE vertex component the current value of the D3DRS_POINTSIZE render state should be used. Otherwise, the value specified in the vertex data should be used.  In either case the value is a floating-point number that is the size (width and height) of the rendered quad in rendering target pixels. The default value of the point size render state (1.0) is sent to the driver during initialization. Two render states control clamping of the computed point sprite size, D3DRS_POINTSIZE_MIN and D3DRS_POINTSIZE_MAX. The computed size of the point should be clamped to be no smaller than the size given by D3DRS_POINTSIZE_MIN and no larger than the size given by D3DRS_POINTSIZE_MAX. It is the driver s responsibility to ensure that the point sprite size is clamped to minimum and maximum size specified by the render states. For drivers support hardware vertex processing the size of point sprites may also be scaled based on the distance from the point to the eye (in eye space). Scaling of the point sprites is enabled by the new render state D3DRS_POINTSCALEENABLE. If the value of this render state is TRUE the points are scaled according to the following formula. Note that in this case the application-specified point size is expressed in camera space units. This scaling is performed by drivers that support transform and light only. Si   input point size (either per-vertex or D3DRS_POINTSIZE) A,B,C  point scale factors D3DRS_POINTSCALEA/B/C Vh   height of viewport (dwHeight field in D3D_VIEWPORT) Pe = (Xe, Ye, Ze)   eye space position of point De = sqrt (Xe2 + Ye2 + Ze2)  distance from eye to position (eye at origin) Ss = Vh  * Si * sqrt(1/(A + B*De + C*(De2))  screen space point size Smax   MaxPointSize device capability Smin   D3DRS_POINTSIZE_MIN  Final screen-space point size: Smax  if Ss > Smax if Ss < Smin otherwise Rendering Point Sprites A screen space point P = (X, Y, Z, W) of screen-space size S is rasterized as a quadrilateral with the following 4 vertices: S/2, Y S/2, Z, W) (X+S/2, Y S/2, Z, W) S/2, Y+S/2, Z, W) (X+S/2, Y+S/2, Z, W) The vertex color attributes are duplicated at each of the 4 vertices, thus each point is always rendered with constant colors. The assignment of texture indices is controlled by the D3DRS_POINTSPRITEENABLE setting.  If D3DRS_POINTSPRITEENABLE is set to FALSE, then the texture coordinates of the vertex are duplicated at each of the 4 vertices. If no texture coordinates are present in the vertex the default values of (0.0f, 0.0f, 0.0f, (1.0f)) are used for corner of the point sprite.  If the D3DRS_POINTSPRITEENABLE is set to TRUE, then the texture coordinates at the 4 vertices are set to: (0.0f, 0.0f) (1.0f, 0.0f) (0.0f, 1.0f) (1.0f, 1.0f) When clipping is enabled, points are clipped as follows.  If the vertex is outside the view frustum in Z (either near or far), then the point is not rendered.  If the point, taking into account the point size, is totally outside the viewport in x or y, then the point is not rendered.  Remaining points are rendered.  Note that it is possible for the point position to be outside the viewport (in x or y) and still be partially visible. Points may or may not be correctly clipped to user-defined clip planes.  If the D3DDEVCAPS_CLIPPLANESCALEDPOINTS is not set, then points are clipped to user-defined clip planes based only on the vertex position, ignoring the point size.  In this case scaled points will be fully rendered when the vertex position is inside the clip planes, and discarded when the vertex position is outside a clip plane. Applications may prevent potential  poping  artifacts by adding a border geometry to clip planes that is as large as the maximum point size. If the D3DDEVCAPS_CLIPPLANESCALEDPOINTS bit is set, then the scaled points are correctly clipped to user-defined clip planes. Volume Textures DirectX 8.0 adds support for volume or 3D textures. Such textures have depth in addition to width and height. Reporting Support for Volume Textures DirectX 8.0 introduces two new primitive texture capabilities flags that the driver sets to indicate support for volume textures. These flags are D3DPTEXTURECAPS_VOLUMEMAP and D3DPTEXTURECAPS_MIPVOLUMEMAP. D3DPTEXTURECAPS_VOLUMEMAP should be set in the dwTextureCaps field of the D3DPRIMCAPS8 structure (part of D3DCAPS8) if the hardware has support for volume textures. D3DPTEXTURECAPS_MIPVOLUMEMAP indicates that the driver supports mip-mapped volume textures. It is a requirement that hardware that supports volume textures supports the use of volume textures in multi-texturing scenarios (in combination with other volume textures or 2D textures). If this scenario is not supported by the hardware, the driver cannot set D3DPTEXTURECAPS_VOLUMEMAP. The driver can indicate that it requires the dimensions of the volume texture to be a power of 2 by setting the primitive texture capability D3DPTEXTURECAPS_VOLUMEMAP_POW2. A driver that supports volume textures is also required to specify the minimum and maximum volume texture dimensions it supports. The field MaxVolumeExtent should be set to the maximum supported dimensions of the volume texture. It is a requirement that the same constraint applies to all three dimensions of the volume texture (width, height and depth). A driver notifies the runtime of the volume texture filtering and texture addressing modes supported by the hardware by setting the VolumeTextureFilterCaps and VolumeTextureAddressCaps to the appropriate combinations of flags. Finally, the driver notifies the runtime of which surface formats can be used with volume textures by setting the D3DFORMAT_OP_VOLUMETEXTURE in the dwOperations field of the surface format s DDPIXELFORMAT. Handling the Creation of Volume Textures DirectX 8.0 introduces a new surface capability bit DDSCAPS2_VOLUME. This flag will be set in the ddsCapsEx.dwCaps2 field of the surface s DDRAWI_DDRAWSURFACE_MORE structure. In the CreateSurface and CreateSurfaceEx callbacks depth of the volume texture can be found in the low word of the dwCaps4 field of the extended surface capabilities (ddsCapsEx) of the surface s DDRAWI_DDRAWSURFACE_MORE structure. The driver should return the  slice pitch  of the volume texture (i.e. the number of bytes to add to move from one 2D slice of the volume to the next) in the dwBlockSizeY field of the surface global structure. DDSURFACEDESC does not contain the slice pitch of volume textures. Copying Volume Textures in the DP2 Stream A new DP2 token, D3DDP2OP_VOLUMEBLT, has been added to support optimal copying and updating of volume textures. This token is very similar to the existing D3DDP2OP_TEXBLT which copies and updates textures but has been extended to support sub-volume (box) copying rather than simple rectangles. The data structure associated with this DP2 token is shown below.  typedef struct _D3DHAL_DP2VOLUMEBLT DWORD   dwDDDestSurface;// dest surface DWORD   dwDDSrcSurface; // src surface DWORD   dwDestX;        // dest X (width) DWORD   dwDestY;        // dest Y (height) DWORD   dwDestZ;        // dest Z (depth) D3DBOX  srcBox;         // src box DWORD   dwFlags;        // blt flags } D3DHAL_DP2VOLUMEBLT, *LPD3DHAL_DP2VOLUMEBLT; dwDDDestSurface and dwDDSrcSurface are the destination and source surface handles for the volume textures respectively. srcBox defines a sub-volume of the source volume texture to copy to the destination. dwDestX, dwDestY and dwDestZ give the location in the destination volume texture to copy the defined source sub-volume. Presentation DirectX 8.0 formalizes the concept of  presentation  (or making the results of rendering visible to the user) in the API. Previously, this was accomplished either by page flipping in full screen mode or a by blitting in windowed mode. The new Present API abstracts the differences of fullscreen and windowed mode away. However, this abstraction is not yet exposed at the DDI level. The runtime simply maps the present API to either the flip or blt DDI entry points depending on the application mode. The new presentation API does place one new requirement on DirectX 8.0 drivers, however. A persistent problem reported by ISVs is a seeming input processing or interactivity lag while doing 3D operations. This problem is, in fact, caused by display drivers queue  presentation  blts or flips along with other rendering operations. In problem cases the instruction queue can contain many frames worth of drawing instructions. The end result is that the application thinks that the frame it just sent down is visible which in fact, due to queuing issues, a much older frame is currently being displayed by the graphics card. All intermediate frames are sitting in the instruction queue waiting to be processed. This is not acceptable to ISVs and they currently employ several workarounds to try and address this issue. WHQL currently has certification tests in place to ensure that certified drivers do not queue frame excessively. However, when running Windowed, rather than fullscreen, the situation is more complex and the driver doesn t now explicitly which blt operations mark a frame boundary. To address this situation DirectX 8.0 has added two new DirectDraw blt flags which are passed to the driver as notification of when a blt operation is actually part of a  Present  and hence marks a frame boundary. These new flags are DDBLT_PRESENTATION and DDBLT_LAST_PRESENTATION. Two flags are necessary because clipping may result in a single Present call invoking multiple blt operations in the driver. In this case all of the blts that are invoked as a result of the Present operation have the DDBLT_PRESENTATION flag set. However, only the final blt of the sequence used to perform the Present will have the DDBLT_LAST_PRESENTATION bit set. Thus if blt is used to implement a Present call the driver will see zero or more blts with the DDBLT_PRESENTATION bit set followed by exactly one blt with both the DDLT_PRESENTATION and DDBLT_LAST_PRESENTATION bits set. These flags are never set by the application. Only the runtime is allowed to pass these flags to a blt. Furthermore, these flags will only be passed to drivers supporting the DirectX 8.0 DDI. With this in mind the driver is only permitted to queue a maximum of three frames. If the driver sees a blt call with DDBLT_ RESENTATION set and it already has three DDBLT_LAST_PRESENTATION blts queued it must fail the call with DDERR_WASSTILLDRAWING. The runtime will retry until the queue has drained sufficiently. If the capabilities of the hardware being driver by the driver are such that the driver can t effectively know when a DDBLT_LAST_PRESENTATION blt in the queue has been retired the driver is required to be conservative and not queue frames at all. DDBLT_LAST_PRESENTATION should cause such drivers to return DDERR_WASSTILLDRAWING until the accelerator is completely finished, exactly as if the application had called Lock on the source surface before calling Blt. Finally, in the case of multiple windowed applications running simultaneously the driver should count presentation blts based on the source of each blt, rather than the primary, i.e., the driver is allowed to queue three frames per window/render target. This will result in better performance in this case. Palettized Textures Although API support for palettized textures has been completely overhauled for DirectX 8.0 this is not reflected in the DDI. The existing palette oriented DP2 tokens continue to be used to notify the driver of the binding between a palette and a texture and of updates to palettes. It is important to note that it is not safe to assume that, because an association between a surface and a palette has been established with D3DDP2OP_SETPALETTE, the lpPalette field of the surface structure points to a valid or palette. The associated between a palette and a surface established by the DP2 stream will not be reflected in the actual surface and palette data structures. Furthermore, DirectDraw s palette DDI entry points will not be called for these palettes. All DDI notifications of texture palette operations are done through the DP2 stream. Cursors DirectX 8.0 has added an API to support high update frequency cursors without requiring API level direct access to the primary surface. For DirectX 8.0 the cursor is, in fact, simply the standard GDI cursor if capabilities permit or is emulated with DirectDraw blts. This may change in future releases of DirectX to enhance cursor support. However, currently all a driver need do to support the DirectX cursor API is return capability information in D3DCAPS8. The CursorCaps field should be set to D3DCURSORCAPS_MONO, D3DCURSORCAPS_COLOR or both to indicate support for monochrome and color hardware cursors. The MaxCursorEdgeSize field should be set to the minimum of the maximum width and maximum height of the hardware cursor (or zero if no hardware cursor is supported). It is not possible to express different maximum sizes for the width and height of the cursor. Vertex Shaders Vertex Shaders and Fixed Function Hardware All drivers that support the DirectX 8.0 DDI must support the new DP2 token D3DDP2OP_SETVERTEXSHADER even if programmable vertex shaders are not supported in hardware. This is simply because D3DDP2OP_SETVERTEXSHADER is the mechanism by which the FVF of incoming vertex data is communicated to the driver when using fixed function as well as programmable vertex processing. D3DDP2OP_SETVERTEXSHADER can be used to notify the driver of both the handle of the current programmable vertex shader to use or the FVF of the vertex data for fixed function vertex processing due to the nature of the handle name space for vertex shaders. The vertex shader handle name space includes all vertex FVF codes. Thus a vertex shader handle can either refer to a programmable vertex shader handle previously created by means of the D3DDP2OP_CREATEVERTEXSHADER DP2 token or the FVF code a vertex format to be processed by fixed function vertex processing. Therefore the driver for hardware that does not support programmable vertex processing should process D3DDP2OP_SETVERTEXSHADER to determine the FVF (and hence the processing to be performed) on the vertex data bound to stream zero. This is particularly important when processing user memory (UM) primitives. In this case the only way of determining the FVF of the supplied vertex data is through the D3DDP2OP_SETVERTEXSHADER token. The test to determine whether a handle is a vertex shader handle or a legacy FVF code is simple. If the least significant bit of the handle is set (1) then the handle is vertex shader handler. If the least significant bit is clear (0) the handle is a legacy FVF code. If the FVF code of a vertex buffer conflicts with that specified by D3DDP2OP_SETVERTEXSHADER the driver should ignore the FVF code of the vertex buffer and continue. The DirectX runtime guarantees that only FVF codes will be passed as vertex shader handles to a driver that does not support programmable vertex processing. However, it is recommended that such a driver have debug code to verify that the FVF code passed is supported. Reporting Support for Programmable Vertex Processing Hardware For a DirectX 8.0 level driver to report support for programmable vertex shader hardware it must set the VertexShaderVersion field of the D3DCAPS8 structure to a valid, non-zero vertex shader version number. The VertexShaderVersion is a DWORD where the most significant word must have the value 0xFFFE and the least significant word holds the actual version number. This least significant byte of this word holds the minor version number and the most significant byte holds the major version number. As the format of this DWORD is complex the driver must set the value of VertexShaderVersion using the macro D3DVS_VERSION defined in d3d8types.h. For example, the following code fragment sets the VertexShaderVersion to indicate support for 1.0 level functionality. myD3DCaps8.VertexShaderVersion = D3DVS_VERSION(1, 0); To report no support for programmable vertex shaders the following code fragment would be used: myD3DCaps8.VertexShaderVersion = D3DVS_VERSION(0, 0); Drivers that do not support programmable vertex processing should set VertexShaderVersion to zero (0). In addition to setting the vertex shader version the driver should report the number of constant registers it has for vertex shading. In order to support the 1.0 vertex shading specification the device must have at least 96 constant registers but it may have more. The driver reports the number of constant registers in the MaxVertexShaderConst field of the D3DCAPS8 structure. For example, the following code fragment reports the minimum number of constant registers required for version 1.0 vertex shaders. myD3DCaps8.MaxVertexShaderConst = 96; d3d8types.h defines a symbol for the minimum number of constant registers required by version 1.0 of the vertex shader specification. This symbol is D3DVS_CONSTREG_MAX_V1_0 and it is recommended that the driver use this symbol unless it supports more than 96 constant registers. D3DDP2OP_CREATEVERTEXSHADER This token is sent to the driver to on the creation of a vertex shader. This token gives the driver the opportunity to convert the vertex shader declaration and code into a hardware specific format and associate this information with the given shader handle. Prior to invoking the driver the runtime performs validation to ensure that the specified shader is legal for the specified shader language version. The runtime flushes all pending state and rendering when this token is to be sent to the driver. Thus, processing of this token is assumed to be synchronous with the runtime and, hence, it is supported for the driver to report failure of the creation request by failing the DrawPrimitives2 DDI call. The runtime checks for failure and will report the error accordingly. Thus, the driver should validate the given shader declaration and code on receipt of this token and report success of failure accordingly. The data structure passed with this token is defined below. typedef struct _D3DHAL_DP2CREATEVERTEXSHADER DWORD dwHandle;  // Shader handle DWORD dwDeclSize;  // Shader declaration size in bytes DWORD dwCodeSize;  // Shader code size in bytes // Declaration follows // Shader code follows } D3DHAL_DP2CREATEVERTEXSHADER, *LPD3DHAL_DP2CREATEVERTEXSHADER; The handle is assigned by the runtime and stored in the dwHandle field. This value is guaranteed to be non-zero. Furthermore, although vertex FVF codes are part of the shader handle name space it is guaranteed that the handle passed will not be an FVF code. D3DDP2OP_DELETEVERTEXSHADER This token is sent to the driver to notify the driver of the deletion of a vertex shader and to give the driver an opportunity to clean up any driver side resources associated with the given vertex shader. The data structure passed with this token is defined below. Note that this data structure is the same as the one used for D3DDP2OP_SETVERTEXSHADER typedef struct _D3DHAL_DP2VERTEXSHADER // Vertex shader handle. DWORD dwHandle; } D3DHAL_DP2VERTEXSHADER, *LPD3DHAL_DP2VERTEXSHADER; The handle assigned by the runtime to the vertex shader to delete is stored in the dwHandle field. The handle is guaranteed to be non-zero. Need to determine if the vertex shader will be unset prior to deletion. Does this token ever occur of the current vertex shader. D3DDP2OP_SETVERTEXSHADER This token is sent to the driver to notify it that a new vertex shader has been selected. All subsequent drawing operations should utilize the given shader until another is selected. All DirectX 8.0 level drivers must support this token as it will be sent even if the driver does not support programmable vertex processing. In that case, however, the shader handle will always be an FVF code indicating fixed function processing of the vertex data. The driver should use the FVF code stored in the dwHandle field as the format of the vertex data in stream zero. A driver that does support programmable vertex processing must examine the handle to determine whether it refers to a shader previously created with D3DDP2OP_CREATEVERTEXSHADER or an FVF code and take the appropriate action. Pixel and vertex shaders are orthogonal. Thus, if a legacy FVF code is selected as the current vertex shader this does not imply legacy pixel processing. In order to reset pixel processing to a non-programmable mode the current pixel shader must also be set to zero (0). Care should be taken in the driver to only reset vertex processing state to a fixed function mode and not pixel processing state when the vertex shader is set to an FVF code. When switching from fixed function vertex processing to programmable vertex processing the values of legacy render state, matrices etc. should be preserved. If and when a switch from programmable to fixed function vertex processing occurs (the driver receives a D3DDP2OP_SETVERTEXSHADER with an FVF as the shader handle) that preserved state should be restored. When switching between programmable shaders any constant register that has a value specified in the definition of that shader should be set to that value. The values of all other constant registers should remain unchanged. The data structure passed with the token is defined below. Note that this data structure is the same as the one used for D3DDP2OP_DELETEVERTEXSHADER typedef struct _D3DHAL_DP2VERTEXSHADER // Vertex shader handle. // The handle could be 0, meaning that the current vertex // shader is invalid (not set). When driver receives // handle 0, it should invalidate all streams pointers DWORD dwHandle; } D3DHAL_DP2VERTEXSHADER, *LPD3DHAL_DP2VERTEXSHADER; The handle assigned by the runtime to the vertex shader to set is stored in the dwHandle field. The supplied handle can be zero indicating that no vertex shader is currently realized. In this case the driver should invalidate all previously set streams and free any data associated with them. The runtime guarantees that streams will be re-initialized with D3DDP2OP_SETSTREAMSOURCE or D3DDP2OP_SETSTREAMSOURCEUM and a new vertex shader will be selected using D3DHAL_DP2VERTEXSHADER prior to any subsequent rendering operations. D3DDP2OP_SETVERTEXSHADERCONST This token is sent to the driver to notify it that one or more of the vertex shader constant registers is to be set. A start register and register count are given. One or more vectors of four single precision floating point values immediately follow the D3DHAL_DP2SETVERTEXSHADERCONST data structure in the DP2 stream. The data structure passed with the token is defined below. typedef struct _D3DHAL_DP2SETVERTEXSHADERCONST DWORD dwRegister;  // Const register to start copying DWORD dwCount;  // Number of 4-float vectors to copy // Data follows } D3DHAL_DP2SETVERTEXSHADERCONST, *LPD3DHAL_DP2SETVERTEXSHADERCONST; The field dwRegister gives the index of the first vertex shader constant to have its value sent. dwCount gives the number of constant registers to set and, hence, the number of four element, single precision float vectors to read from the DP2 stream. The runtime validates that the range of registers specified is legal given the level of vertex shader support reported to the driver. Furthermore, if the driver does not support any form of programmable vertex processing the runtime will not send this token to the driver. Pixel Shaders Reporting Support for Programmable Pixel Processing Hardware For a DirectX 8.0 level driver to report support for programmable pixel shader hardware it must set the PixelShaderVersion field of the D3DCAPS8 structure to a valid, non-zero pixel shader version number. The PixelShaderVersion is a DWORD where the most significant word must have the value 0xFFFF and the least significant word holds the actual version number. This least significant byte of this word holds the minor version number and the most significant byte holds the major version number. As the format of this DWORD is complex the driver must set the value of PixelShaderVersion using the macro D3DPS_VERSION defined in d3d8types.h. For example, the following code fragment sets the PixelShaderVersion to indicate support for 1.0 level functionality. myD3DCaps8.PixelShaderVersion = D3DPS_VERSION(1, 0); To report no support for pixel shaders the code would be as follows: myD3DCaps8.PixelShaderVersion = D3DPS_VERSION(0, 0); Drivers that do not support programmable pixel processing should set PixelShaderVersion to zero (0). Unlike vertex shaders, a device cannot expose more constant registers than the 1.0 specification defines. A device which implements the 1.0 pixel shader specification must expose eight and eight only constant pixel shader  registers. However, there is an additional pixel shader related capability that a driver should set, MaxPixelShaderValue. This field gives the internal range of values supported for pixel color blending operations.  Implementations must allow data within the range they report to pass through pixel processing unmodified (unclamped).  This value normally defines the limits of a signed range, i.e., an absolute value. Therefore, 1 indicates the range is [-1.0 to 1.0], 8 indicates the range is [-8.0 to 8.0],  etc. However, the special value 0.0 indicates that no signed range is supported, and therefore the range is [0 .. 1.0] as in DirectX 6/7. D3DDP2OP_CREATEPIXELSHADER This token is sent to the driver on the creation of a pixel shader. The runtime generates a handle for this shader prior to calling the driver. This handle is guaranteed to be non-zero. The shader code itself follows the D3DHAL_DP2CREATEPIXELSHADER in the DP2 stream. Prior to calling the driver the runtime validates the pixel shader code to ensure that it is legal for the specified shader language version. It is important to note that the creation of a pixel shader does not imply the setting of the current shader. The data structure passed with the token is defined below. typedef struct _D3DHAL_DP2CREATEPIXELSHADER DWORD dwHandle;  // Shader handle DWORD dwCodeSize;  // Shader code size in bytes // Shader code follows } D3DHAL_DP2CREATEPIXELSHADER, *LPD3DHAL_DP2CREATEPIXELSHADER; The field dwHandle is the runtime supplied handle for this shader. dwCodeSize gives the size, in bytes, of the shader code following this data structure in the DP2 stream. D3DDP2OP_DELETEPIXELSHADER This token is sent to the driver when a pixel shader is to be deleted. The runtime passes the handle of the shader to be deleted to the driver. The driver should cleanup any resources associated with that handle. The handle passed is guaranteed to be non-zero. The data structure passed with the token is defined below. typedef struct _D3DHAL_DP2PIXELSHADER // Pixel shader handle.     DWORD dwHandle; } D3DHAL_DP2PIXELSHADER, *LPD3DHAL_DP2PIXELSHADER; Although this data structure is also used when setting a pixel shader it should be noted that when deleting a pixel shader the runtime guarantees that the handle will be non-zero. However, it is possible for a zero handle to be passed when setting the pixel shader. D3DDP2OP_SETPIXELSHADER This token is passed to the driver to set the current pixel shader. The runtime passes the handle of the shader to be set as the current shader to the driver. It is legal for this handle to be zero in which case the driver should unset any programmable vertex state and revert to fixed function pixel processing behavior (using render states etc). The data structure passed with the token is defined below. typedef struct _D3DHAL_DP2PIXELSHADER // Pixel shader handle. // The handle could be 0, meaning that the current pixel // shader is invalid (not set). DWORD dwHandle; } D3DHAL_DP2PIXELSHADER, *LPD3DHAL_DP2PIXELSHADER; This is the same data structure used for deleting a pixel shader. However, unlike the deletion case zero is a valid handle value as described above. When switching from fixed function pixel processing to programmable vertex processing the values of legacy render states, texture stage states etc. should be preserved. If and when a switch from programmable to fixed function pixel processing occurs (the driver receives a D3DDP2OP_SETPIXELSHADER with a shader handle of zero) that preserved state should be restored. When switching between programmable shaders any constant register that has a value specified in the definition of that shader should be set to that value. The values of all other constant registers should remain unchanged. D3DDP2OP_SETPIXELSHADERCONST This token is passed to the driver to set one or more pixel shader constant registers. The runtime passes the first register to set and the number of register to set. The actual data to copy to those registers consists of vectors of four, single precision floating point numbers. These vectors (the same number as there are registers to set) follow this token and its associated data structure in the DP2 stream. The data structure for the token is defined below. typedef struct _D3DHAL_DP2SETPIXELSHADERCONST     DWORD dwRegister;   // Const register to start copying     DWORD dwCount;      // Number of 4-float vectors to copy     // Data follows } D3DHAL_DP2SETPIXELSHADERCONST, *LPD3DHAL_DP2SETPIXELSHADERCONST; The field dwRegister is the index of the first register to set. dwCount gives the number of registers to set. The runtime validates that the specified register range lies within the legal range for the version of the current pixel shader. Immediately following this data structure in the DP2 stream are dwCount, vectors of four single precision floating point numbers. This is the data to copy to the target registers. High Order Surfaces DirectX 8 introduces support for a class for high order surfaces. This section describes the mechanics of the DDI for these patch surfaces but it does not describe the algorithms used. Please refer to the reference rasterizer source code included with the DDK for the details of the algorithms employed. Reporting Support for High Order Surfaces A driver reports its support for high order surfaces using four new capability bits in the DevCaps field of the D3DCAPS8 structure. These flags are as follows: D3DDEVCAPS_QUINTICRTPATCHES Device supports quintic b ziers and B-splines. D3DDEVCAPS_RTPATCHES Device supports rectangular and triangular patches. D3DDEVCAPS_RTPATCHHANDLEZERO When this device capability is set, the hardware architecture does not require caching of any information and that un-cached patches (handle zero) will be drawn as efficiently as cached ones. Note that D3DDEVCAPS_RTPATCHHANDLEZERO does not mean that a patch with handle zero can be drawn. A handle zero patch can always be drawn whether this cap is set or not. D3DDEVCAPS_NPATCHES   Device supports n-patches. D3DDP2OP_DRAWRECTPATCH This token is sent to the driver to draw a rectangular patch. This token is sent to the driver when drawing a new patch, drawing a cached patch or to update the specification of a previously defined patch. The data structure associated with this token is shown below.  typedef struct _D3DHAL_DP2DRAWRECTPATCH DWORD Handle; DWORD Flags; // Optionally followed by D3DFLOAT[4] NumSegments // and/or D3DRECTPATCH_INFO } D3DHAL_DP2DRAWRECTPATCH, *LPD3DHAL_DP2DRAWRECTPATCH; Handle is used to associate the surface with a handle, so that the next time this surface is drawn, there is no need to re-specify the D3DRECTPATCH_INFO for this patch. This makes it possible for the driver to pre-compute and cache forward difference coefficients and/or any other information, which in turn allows subsequent D3DDP2OP_DRAWRECTPATCH tokens using the same handle to execute more efficiently. The actual value of Handle is determined by the application and is not under runtime control. Therefore, the driver should be prepared to cope with any value specifiable by a DWORD. The special handle value of zero means that the patch is dynamic and there is no point pre-computing or caching information for this patch. A non-zero value for Handle means the patch is static (or updated with low frequency) and pre-computation and caching are possible. The Flags is used to communicate what, if any, additional information follows the D3DHAL_DP2DRAWRECTPATCH data structure in the DP2 stream. If RTPATCHFLAG_HASSEGS is specified then four floating point values follow D3DHAL_DP2DRAWRECTPATCH in the DP2 stream. These floats give the segment counts for each of the four edges of the rectangular patch and override the value of the render state D3DRS_PATCHSEGMENTS. If RTPATCHFLAG_HASINFO is specified then a D3DRECTPATCH_INFO data structure follows in the DP2 stream. Information on this structure can be found in the DirectX 8.0 SDK documentation. If both flags are specified the four floats specifying segment counts follow D3DHAL_DP2DRAWRECTPATCH and the D3DRECTPATCH_INFO structure follows the floating point values. There are four scenarios a driver must handle when processing D3DDP2OP_DRAWRECTPATCH. If Handle is zero then the patch is dynamic and no pre-computation or caching should be performed. In this case a D3DRECTPATCH_INFO will follow D3DHAL_DP2DRAWRECTPATCH in the DP2 stream (and the flag RTPATCHFLAG_HASINFO will be set to indicate the presence of the D3DHAL_DRAWRECTPATCH data structure). Optionally, RTPATCHFLAG_HASSEGS may also be set to indicate the presence of the segment information. However, if this is omitted the value of the render state D3DRS_PATCHSEGMENTS should be used instead. If Handle is non-zero and the handle value has not been specified by an earlier D3DDP2OP_DRAWRECTPATCH this indicates that a new cacheable patch is being drawn. The driver should allocate memory to store cached data and add this data to its patch handle table. As this patch has not been seen before the RTPATCHFLAG_HASINFO flags should be set and a D3DRECTPATCH_INFO flag should follow in the DP2 stream. The runtime does not guarantee this, however, and the driver should verify the presence of the patch information by testing the flag. If no information is specified this token should be ignored and no handle should be allocated in the driver s patch handle table. Optionally, RTPATCHFLAG_HASSEGS may also be set to indicate the presence of the segment information. However, if this is omitted the value of the render state D3DRS_PATCHSEGMENTS should be used instead.  If Handle is non-zero, the handle value has been specified by an earlier D3DDP2OP_DRAWRECTPATCH token and the Flags field contains RTPATCHFLAG_HASINFO then the definition for the patch is being updated. A D3DRECTPATCH_INFO data structure will follow in the DP2 stream and the driver should use that to re-compute and re-cache patch information. Optionally, RTPATCHFLAG_HASSEGS may also be set to indicate the presence of the segment information. However, if this is omitted the value of the render state D3DRS_PATCHSEGMENTS should be used instead. If Handle is non-zero, the handle value has been specified by an earlier D3DDP2OP_DRAWRECTPATCH token and the Flags field does not contain RTPATCHFLAG_HASINFO then the cached information should be used for drawing the patch. In this case the current vertex streams are ignored, the cached information should be used instead. However, it is still possible in this case for a new segment information to be specified. Therefore, the driver should check for the flag RTPATCHFLAG_HASSEGS and handle specified segment information even if using a cached patch. The driver receives notification that cached patch information is be released via the render state D3DRS_DELETERTPATCH. The value of this render state is the patch to be deleted. D3DDP2OP_DRAWTRIPATCH This token is sent to the driver to draw a triangular patch. This token is sent to the driver when drawing a new patch, drawing a cached patch or to update the specification of a previously defined patch. The data structure associated with this token is shown below.  typedef struct _D3DHAL_DP2DRAWTRIPATCH DWORD Handle; DWORD Flags; // Optionally followed by D3DFLOAT[3] NumSegments // and/or D3DTRIPATCH_INFO } D3DHAL_DP2DRAWTRIPATCH, *LPD3DHAL_DP2DRAWTRIPATCH; Handle is used to associate the surface with a handle, so that the next time this surface is drawn there is no need to re-specify the D3DTRIPATCH_INFO for this patch. This makes it possible for the driver to pre-compute and cache forward difference coefficients and/or any other information, which in turn allows subsequent D3DDP2OP_DRAWTRIPATCH tokens using the same handle to execute more efficiently. The actual value of Handle is determined by the application and is not under runtime control. Therefore, the driver should be prepared to cope with any value specifiable by a DWORD. The special handle value of zero means that the patch is dynamic and there is no point pre-computing or caching information for this patch. A non-zero value for Handle means the patch is static (or updated with low frequency) and pre-computation and caching are possible. The Flags is used to communicate what, if any, additional information follows the D3DHAL_DP2DRAWTRIPATCH data structure in the DP2 stream. If RTPATCHFLAG_HASSEGS is specified then three floating point values follow D3DHAL_DP2DRAWTRIPATCH in the DP2 stream. These floats give the segment counts for each of the three edges of the triangular patch and override the value of the render state D3DRS_PATCHSEGMENTS. If RTPATCHFLAG_HASINFO is specified then a D3DTRIPATCH_INFO data structure follows in the DP2 stream. Information on this structure can be found in the DirectX 8.0 SDK documentation. If both flags are specified the three floats specifying segment counts follow D3DHAL_DP2DRAWTRIPATCH and the D3DTRIPATCH_INFO structure follows the floating point values. There are four scenarios a driver must handle when processing D3DDP2OP_DRAWTRIPATCH. If Handle is zero then the patch is dynamic and no pre-computation or caching should be performed. In this case a D3DTRIPATCH_INFO will follow D3DHAL_DP2DRAWTRIPATCH in the DP2 stream (and the flag RTPATCHFLAG_HASINFO will be set to indicate the presence of the D3DHAL_DRAWTRIPATCH data structure). Optionally, RTPATCHFLAG_HASSEGS may also be set to indicate the presence of the segment information. However, if this is omitted the value of the render state D3DRS_PATCHSEGMENTS should be used instead. If Handle is non-zero and the handle value has not been specified by an earlier D3DDP2OP_DRAWTRIPATCH this indicates that a new cacheable patch is being drawn. The driver should allocate memory to store cached data and add this data to its patch handle table. As this patch has not been seen before the RTPATCHFLAG_HASINFO flags should be set and a D3DTRIPATCH_INFO flag should follow in the DP2 stream. The runtime does not guarantee this, however, and the driver should verify the presence of the patch information by testing the flag. If no information is specified this token should be ignored and no handle should be allocated in the driver s patch handle table. Optionally, RTPATCHFLAG_HASSEGS may also be set to indicate the presence of the segment information. However, if this is omitted the value of the render state D3DRS_PATCHSEGMENTS should be used instead.  If Handle is non-zero, the handle value has been specified by an earlier D3DDP2OP_DRAWTRIPATCH token and the Flags field contains RTPATCHFLAG_HASINFO then the definition for the patch is being updated. A D3DTRIPATCH_INFO data structure will follow in the DP2 stream and the driver should use that to re-compute and re-cache patch information. Optionally, RTPATCHFLAG_HASSEGS may also be set to indicate the presence of the segment information. However, if this is omitted the value of the render state D3DRS_PATCHSEGMENTS should be used instead. If Handle is non-zero, the handle value has been specified by an earlier D3DDP2OP_DRAWTRIPATCH token and the Flags field does not contain RTPATCHFLAG_HASINFO then the cached information should be used for drawing the patch. In this case the current vertex streams are ignored, the cached information should be used instead. However, it is still possible in this case for a new segment information to be specified. Therefore, the driver should check for the flag RTPATCHFLAG_HASSEGS and handle specified segment information even if using a cached patch. The driver receives notification that cached patch information is be released via the render state D3DRS_DELETERTPATCH. The value of this render state is the patch to be deleted. High Order Surface Render States There are three render states that are used with high order surfaces. These render states are described below. D3DRS_PATCHEDGESTYLE This render state is used to control whether patch edges use discrete or continues tessellation. See the DirectX 8.0 SDK documentation for more details. D3DRS_PATCHSEGMENTS This render state gives the number of segments to be used for each edge of the patch. If an explicit number of segments is specified in the DP2 token those segments should override the value of this render state. See the DirectX 8.0 SDK documentation for more details. D3DRS_DELETERTPATCH This render state notifies the driver that a patch is to be deleted. The value of this render state is the handle to the patch affected. All cached information should be freed and the handle should be removed from the driver s patch handle table. This render state is not API visible, but is generated internally by the API call DeletePatch. This render state is only sent to the driver when patches are deleted by the API explicitly. All other patches should be cleaned up when the device is destroyed. Multi-sample Rendering DirectX 8.0 introduces support for multi-sample rendering with the number of samples per pixel under application control. The API support multi-sampling in both fullscreen and windowed modes of operation. Furthermore, there is sufficient flexibility to support hardware that performs the processing of samples into pixels at the back end (directly out of the framebuffer) or at the front end (via a special flip or blt call). Reporting Multi-sample Support A driver reports the multi-sample capabilities of the hardware by specifying the number of samples per pixel for each surface format it reports. DDPIXELFORMAT has been extended to include a structure called MultiSampleCaps. This structure has fields that let the driver express the number of samples per pixel for both flip (fullscreen) and blt (windowed) multi-sampling. Each of these fields is a WORD in which each bit indicates support for a given number of samples per pixel. Hence, the driver can express support for several different sample counts with a single surface format entry.  The enumerated type D3DMULTISAMPLE_TYPE defined in d3d8types.h is used when setting the bits in wFlipMSTypes and wBltMSTypes. To specify support for a specific number of samples per pixel simply logically shift 1 by the appropriate value from the D3DMULTISAMPLE_TYPE enumerated type less 1 and or this into the appropriate field (wFlipMSType and wBltMSType). For example, if the driver supports both two and four samples for pixel when flipping (fullscreen mode) and 4 samples per pixel when blitting (windowed mode) on X8R8G8B8 surface the following entry would be reported in the surface format list. DDPIXELFORMAT ddpf; ZeroMemory(&ddpf, sizeof(ddpf)); ddpf.dwSize       = sizeof(DDPIXELFORMAT); ddpf.dwFlags      = DDPF_D3DFORMAT; ddpf.dwFourCC     = D3DFMT_X8R8G8B8; ddpf.dwOperations = D3DFORMAT_OP_DISPLAYMODE | D3DFORMAT_OP_3DACCELERATION; ddpf.MultiSampleCaps.wFlipMSTypes = (1 << (D3DMULTISAMPLE_4_SAMPLES  | (1 << (D3DMULTISAMPLE_2_SAMPLES   1)); ddpf.MultiSampleCaps.wBltMSTypes = (1 << (D3DMULTISAMPLE_4_SAMPLES   1)); It is not necessary to specify 1 << (D3DMULTISAMPLE_NONE   1) when reporting formats. It is assumed that any format reported can also be used without multi-sampling. If the hardware supports multi-sample rendering with a z-buffer the z-buffer formats reported should also include the supported samples-per-pixels. Multi-sample Support via StretchBlt Although not the recommended mechanism for supporting multi-sampling it is possible to implement multi-sampling support in the driver by rendering to a large back buffer and performing a stretch blt to resample the large back buffer to the lower resolution primary. However, if this is the mechanism by which the driver supports multi-sampling it must set the new capability bit D3DPRASTERCAPS_STRETCHBLTMULTISAMPLE in the RasterCaps field of the D3D8CAPS structure. It is important to note if the driver uses a stretch blt to perform a page flip in fullscreen mode the driver should specify the supported sample counts in the wFlipMSTypes and not wBltMSTypes as, conceptually at least a flip is being performed. Handling the Creation of Multi-Sampled Surfaces When a multi-sampled surface is being created the number of samples can be found in the ddsCapsEx.dwCaps3 of the DDRAWI_DDRAWSURFACE_MORE/DD_SURFACE_MORE structure. This field simply holds one of the values of the enumerated type D3DMULTISAMPLE_TYPE. It is not a bit field like wFlipMSTypes or wBltMSTypes. If a surface is not multi-sampled dwCaps3 will have the value D3DMULTISAMPLE_NONE (0). When determining whether a creation request for a multi-sample surface can be satisfied or not the driver should not take into account the current value of the D3DRS_MULTISAMPLEANTIALIAS render state. It is not permissible for a driver to fail a request to set D3DRS_MULTISAMPLEANTIALIAS false. Therefore, any restriction which would affect the ability to perform multi-sample rendering should be enforced at context create time even if D3DRS_MULTISAMPLEANTIALIAS is FALSE at that time. Although DirectX 8.0 reduces the applications ability to access the primary surface it does not eliminate them. This has important implications when the primary buffer itself is multi-sampled. In those cases where Direct3D does lock the primary it does not expect the surface data to be multi-sampled. Therefore, if the underlying hardware does have a multi-sampled primary it must take appropriate action when the primary is locked and unlocked. On Lock the driver must return a buffer of data that contains the contents of the primary in a single sample-per-pixel format. On Unlock the driver must convert the single sample-per-pixel format back to primary s multi-sampled format. The new cursor API can also result in Blt calls targeting the primary. Again, if the primary is multi-sampled, the Blt call must handle the conversion from the single sample-per-pixel cursor data to the mutli-sampled primary. Controlling Multi-sampling Two render states control multi-sample rendering. D3DRS_MULTISAMPLEANTIALIAS A BOOL value that determines how individual samples are computed when using a multi-sample render target buffer. When set to TRUE, the multiple samples are computed so that full-scene antialiasing is performed by sampling at different sample positions for each multiple sample. When set to FALSE, the multiple samples are all written with the same sample value (sampled at the pixel center), which allows non-antialiased rendering to a multi-sample buffer. This render state has no effect when rendering to a single sample buffer. The default value is TRUE.  D3DRS_MULTISAMPLEMASK Each bit in this mask, starting at the LSB, controls modification of one of the samples in a multi-sample render target. Thus, for an 8-sample render target, the low byte contains the 8 write enables for each of the 8 samples. This render state has no effect when rendering to a single sample buffer. The default value is 0xFFFFFFFF.  This render state enables use of a multi-sample buffer as an accumulation buffer, doing multipass rendering of geometry where each pass updates a subset of samples. Pure Device Support DirectX 8.0 introduces the concept of a   device. When using a pure device the runtime is somewhat more lightweight, it will not track state or state blocks or perform any software vertex processing on behalf of the hardware. Furthermore, the application cannot query back state from the runtime. The lack of state tracking, particularly when state blocks are being used can result in a significant performance boost for the application. Only vertex processing directly supported by the hardware is available to the application when using a pure device. For example, for cards that don t support hardware T&L, only pre-transformed vertices can be passed to Direct3D. Furthermore, the functions SetClipStatus, GetClipStatus and ProcessVertices cannot be used with the pure device. In order to use a pure device the application must request it with the device creation flag D3DCREATE_PUREDEVICE and the driver must report its ability to act as a pure device. Reporting Pure Device Capability A driver reports the ability to support pure devices by setting the new device capability D3DDEVCAPS_PUREDEVICE in the DevCaps field of the D3DCAPS8 structure.  State Block Recording and Pure Devices State block handling is different for a device operating in pure device mode. In this mode the state block control DP2 token (D3DDP2OP_STATESET) will be sent to the driver with a new operation type (in the dwOperations field). This new operation type is D3DHAL_STATESETCREATE. On receipt of this request the driver should create a state block of the type given in the field sbType. The information to record for each state block type is described below. D3DSBT_ALL When requested to capture all state in pure device mode the driver should capture all state with the exception of the current vertex stream state, the current index stream state and the currently realized textures. The state that should be captured is as follows; the render states listed below, the texture stage states listed below, the viewport, all the world transforms, the view transform, the projection transform, the texture transform for all texture stages, all user clip planes, the current material, all lights that have been used prior to the state block creation, the current vertex shader handle, the current pixel shader handle, the current vertex shader constants and the current pixel shader constants. The render states to record are as follows: D3DRENDERSTATE_SPECULARENABLE D3DRENDERSTATE_ZENABLE D3DRENDERSTATE_FILLMODE D3DRENDERSTATE_SHADEMODE D3DRENDERSTATE_LINEPATTERN D3DRENDERSTATE_ZWRITEENABLE D3DRENDERSTATE_ALPHATESTENABLE D3DRENDERSTATE_LASTPIXEL D3DRENDERSTATE_SRCBLEND D3DRENDERSTATE_DESTBLEND D3DRENDERSTATE_CULLMODE D3DRENDERSTATE_ZFUNC D3DRENDERSTATE_ALPHAREF D3DRENDERSTATE_ALPHAFUNC D3DRENDERSTATE_DITHERENABLE D3DRENDERSTATE_FOGENABLE D3DRENDERSTATE_STIPPLEDALPHA D3DRENDERSTATE_FOGCOLOR D3DRENDERSTATE_FOGTABLEMODE D3DRENDERSTATE_FOGSTART D3DRENDERSTATE_FOGEND D3DRENDERSTATE_FOGDENSITY D3DRENDERSTATE_EDGEANTIALIAS D3DRENDERSTATE_ALPHABLENDENABLE D3DRENDERSTATE_ZBIAS D3DRENDERSTATE_RANGEFOGENABLE D3DRENDERSTATE_STENCILENABLE D3DRENDERSTATE_STENCILFAIL D3DRENDERSTATE_STENCILZFAIL D3DRENDERSTATE_STENCILPASS D3DRENDERSTATE_STENCILFUNC D3DRENDERSTATE_STENCILREF D3DRENDERSTATE_STENCILMASK D3DRENDERSTATE_STENCILWRITEMASK D3DRENDERSTATE_TEXTUREFACTOR D3DRENDERSTATE_WRAP0 D3DRENDERSTATE_WRAP1 D3DRENDERSTATE_WRAP2 D3DRENDERSTATE_WRAP3 D3DRENDERSTATE_WRAP4 D3DRENDERSTATE_WRAP5 D3DRENDERSTATE_WRAP6 D3DRENDERSTATE_WRAP7 D3DRENDERSTATE_AMBIENT D3DRENDERSTATE_COLORVERTEX D3DRENDERSTATE_FOGVERTEXMODE D3DRENDERSTATE_CLIPPING D3DRENDERSTATE_LIGHTING D3DRENDERSTATE_NORMALIZENORMALS D3DRENDERSTATE_LOCALVIEWER D3DRENDERSTATE_EMISSIVEMATERIALSOURCE D3DRENDERSTATE_AMBIENTMATERIALSOURCE D3DRENDERSTATE_DIFFUSEMATERIALSOURCE D3DRENDERSTATE_SPECULARMATERIALSOURCE D3DRENDERSTATE_VERTEXBLEND D3DRENDERSTATE_CLIPPLANEENABLE D3DRS_SOFTWAREVERTEXPROCESSING D3DRS_POINTSIZE D3DRS_POINTSIZE_MIN D3DRS_POINTSPRITEENABLE D3DRS_POINTSCALEENABLE D3DRS_POINTSCALE_A D3DRS_POINTSCALE_B D3DRS_POINTSCALE_C D3DRS_MULTISAMPLEANTIALIAS D3DRS_MULTISAMPLEMASK D3DRS_PATCHEDGESTYLE D3DRS_PATCHSEGMENTS D3DRS_POINTSIZE_MAX D3DRS_INDEXEDVERTEXBLENDENABLE D3DRS_COLORWRITEENABLE D3DRS_TWEENFACTOR D3DRS_BLENDOP The texture stage states to record are as follows: D3DTSS_COLOROP D3DTSS_COLORARG1 D3DTSS_COLORARG2 D3DTSS_ALPHAOP D3DTSS_ALPHAARG1 D3DTSS_ALPHAARG2 D3DTSS_BUMPENVMAT00 D3DTSS_BUMPENVMAT01 D3DTSS_BUMPENVMAT10 D3DTSS_BUMPENVMAT11 D3DTSS_TEXCOORDINDEX D3DTSS_ADDRESSU D3DTSS_ADDRESSV D3DTSS_BORDERCOLOR D3DTSS_MAGFILTER D3DTSS_MINFILTER D3DTSS_MIPFILTER D3DTSS_MIPMAPLODBIAS D3DTSS_MAXMIPLEVEL D3DTSS_MAXANISOTROPY D3DTSS_BUMPENVLSCALE D3DTSS_BUMPENVLOFFSET D3DTSS_TEXTURETRANSFORMFLAGS D3DTSS_ADDRESSW D3DTSS_COLORARG0 D3DTSS_ALPHAARG0 D3DTSS_RESULTARG D3DSBT_VERTEXSTATE When capturing vertex state in pure device mode the following state should be captured; the vertex processing related render states listed below, the vertex processing texture stage states listed below, all lights that have been used prior to the state block creation, the current vertex shader handle and the current vertex shader constants. The render states to record are as follows: D3DRENDERSTATE_SHADEMODE D3DRENDERSTATE_SPECULARENABLE D3DRENDERSTATE_CULLMODE D3DRENDERSTATE_FOGENABLE D3DRENDERSTATE_FOGCOLOR D3DRENDERSTATE_FOGTABLEMODE D3DRENDERSTATE_FOGSTART D3DRENDERSTATE_FOGEND D3DRENDERSTATE_FOGDENSITY D3DRENDERSTATE_RANGEFOGENABLE D3DRENDERSTATE_AMBIENT D3DRENDERSTATE_COLORVERTEX D3DRENDERSTATE_FOGVERTEXMODE D3DRENDERSTATE_CLIPPING D3DRENDERSTATE_LIGHTING D3DRENDERSTATE_NORMALIZENORMALS D3DRENDERSTATE_LOCALVIEWER D3DRENDERSTATE_EMISSIVEMATERIALSOURCE D3DRENDERSTATE_AMBIENTMATERIALSOURCE D3DRENDERSTATE_DIFFUSEMATERIALSOURCE D3DRENDERSTATE_SPECULARMATERIALSOURCE D3DRENDERSTATE_VERTEXBLEND D3DRENDERSTATE_CLIPPLANEENABLE D3DRS_SOFTWAREVERTEXPROCESSING D3DRS_POINTSIZE D3DRS_POINTSIZE_MIN D3DRS_POINTSPRITEENABLE D3DRS_POINTSCALEENABLE D3DRS_POINTSCALE_A D3DRS_POINTSCALE_B D3DRS_POINTSCALE_C D3DRS_MULTISAMPLEANTIALIAS D3DRS_MULTISAMPLEMASK D3DRS_PATCHEDGESTYLE D3DRS_PATCHSEGMENTS D3DRS_POINTSIZE_MAX D3DRS_INDEXEDVERTEXBLENDENABLE D3DRS_TWEENFACTOR The texture stage states to record are as follows: D3DTSS_TEXCOORDINDEX D3DTSS_TEXTURETRANSFORMFLAGS D3DSBT_PIXELSTATE When capturing pixel state in pure device mode the following state should be captured; the pixel processing related render states listed below, the pixel processing texture stage states listed below, the current pixel shader handle and the current pixel shader constants. The render states to record are as follows: D3DRENDERSTATE_ZENABLE D3DRENDERSTATE_FILLMODE D3DRENDERSTATE_SHADEMODE D3DRENDERSTATE_LINEPATTERN D3DRENDERSTATE_ZWRITEENABLE D3DRENDERSTATE_ALPHATESTENABLE D3DRENDERSTATE_LASTPIXEL D3DRENDERSTATE_SRCBLEND D3DRENDERSTATE_DESTBLEND D3DRENDERSTATE_ZFUNC D3DRENDERSTATE_ALPHAREF D3DRENDERSTATE_ALPHAFUNC D3DRENDERSTATE_DITHERENABLE D3DRENDERSTATE_STIPPLEDALPHA D3DRENDERSTATE_FOGSTART D3DRENDERSTATE_FOGEND D3DRENDERSTATE_FOGDENSITY D3DRENDERSTATE_EDGEANTIALIAS D3DRENDERSTATE_ALPHABLENDENABLE D3DRENDERSTATE_ZBIAS D3DRENDERSTATE_STENCILENABLE D3DRENDERSTATE_STENCILFAIL D3DRENDERSTATE_STENCILZFAIL D3DRENDERSTATE_STENCILPASS D3DRENDERSTATE_STENCILFUNC D3DRENDERSTATE_STENCILREF D3DRENDERSTATE_STENCILMASK D3DRENDERSTATE_STENCILWRITEMASK D3DRENDERSTATE_TEXTUREFACTOR D3DRENDERSTATE_WRAP0 D3DRENDERSTATE_WRAP1 D3DRENDERSTATE_WRAP2 D3DRENDERSTATE_WRAP3 D3DRENDERSTATE_WRAP4 D3DRENDERSTATE_WRAP5 D3DRENDERSTATE_WRAP6 D3DRENDERSTATE_WRAP7 D3DRS_COLORWRITEENABLE D3DRS_BLENDOP The texture stage states to record are as follows: D3DTSS_COLOROP D3DTSS_COLORARG1 D3DTSS_COLORARG2 D3DTSS_ALPHAOP D3DTSS_ALPHAARG1 D3DTSS_ALPHAARG2 D3DTSS_BUMPENVMAT00 D3DTSS_BUMPENVMAT01 D3DTSS_BUMPENVMAT10 D3DTSS_BUMPENVMAT11 D3DTSS_TEXCOORDINDEX D3DTSS_ADDRESSU D3DTSS_ADDRESSV D3DTSS_BORDERCOLOR D3DTSS_MAGFILTER D3DTSS_MINFILTER D3DTSS_MIPFILTER D3DTSS_MIPMAPLODBIAS D3DTSS_MAXMIPLEVEL D3DTSS_MAXANISOTROPY D3DTSS_BUMPENVLSCALE D3DTSS_BUMPENVLOFFSET D3DTSS_TEXTURETRANSFORMFLAGS D3DTSS_ADDRESSW D3DTSS_COLORARG0 D3DTSS_ALPHAARG0 D3DTSS_RESULTARG Processing the D3DDP2OP_CLEAR DP2 Token DirectX 8.0 introduces some changes to the required processing of the D3DDP2OP_CLEAR token. Specifically a new flag D3DCLEAR_COMPUTERECTS has been added to the dwFlags field of the D3DHAL_DP2CLEAR data structure. This new flag will only be passed to the driver when a pure device type is being used (i.e., D3DCREATE_PUREDEVICE was specified when creating the device and the driver exports the D3DDEVCAPS_PUREDEVICE device cap). Furthermore, this flag will never be passed to non-DirectX 8.0 drivers and it will not be specified using the legacy Clear or Clear2 driver callbacks. If this flag is set, the specified rectangles should be clipped against the current viewport. Furthermore, it is possible that when D3DCLEAR_COMPUTERECTS is specified the number of rectangles to clear can be zero (the number of rectangles to clear can be found in the wStateCount/wPrimtiveCount union of the D3DHAL_DP2COMMAND structure for the clear). In this case the entire viewport should be cleared. It is important to note that when the number of rectangles is zero the D3DHAL_DP2CLEAR data structure still includes space for a single RECT. Thus the size of this single RECT should be included when advancing to the next DP2 instruction. However, the contents of the RECT in this case are undefined and the driver should not attempt to read them. Vertex Buffer Issues Vertex Buffer Callbacks and Windows 2000 DirectX 7.0 on Windows 2000 gold and Windows 2000 Service Pack 1 (SP1) suffers from a defect that prevents a driver s execute buffer (D3D buffer) callbacks from being invoked by the runtime. This prevents the driver from being notified of vertex buffer creation requests and, hence, no video memory or non-local video memory buffers can be created or used in this scenario. This defect is not present in DirectX 8.0 or in the version of the DirectX 7.0 that is shipped with DirectX 8.0. Furthermore, it will be corrected in an upcoming service pack for Windows 2000 and in all future versions of Windows 2000. However, there is no workaround to enable video memory vertex buffers on Windows 2000 or Windows 2000 SP1 other than to install DirectX 8.0. Vertex Buffer Creation Handling on Windows 2000 In DirectX 8.0 vertex (and index) buffers can be managed as textures were in DirectX 7.0. That is, a system memory copy of a vertex copy is maintained at all times and a video memory copy is only allocated when that vertex buffers is actually required. In order to make vertex management work correctly, however, it is essential that the driver fail vertex buffer creation in the correct way. If the driver does not want to allocate a vertex buffer in video memory but, instead, wishes the runtime to allocate the buffer in system memory. It should not return DDHAL_DRIVER_NOTHANDLED but rather should return DDHAL_DRIVER_HANDLED and indicated failure by setting a ddRVal of E_FAIL. If the driver returns DDHAL_DRIVER_NOTHANDLED the runtime will attempt to allocate the surface from the video memory heaps returned by the driver. This may either fail and return an error to the application or result in the surface being allocated in local or non-local video memory (which is not the intention). Therefore, if you wish the runtime to allocate a vertex buffer in system memory on your behalf please set ddRVal to E_FAIL and return DDHAL_DRIVER_HANDLED. Vertex Buffer Renaming To improve parallelism between the driver and the runtime Direct3D supports the concept of vertex buffer  renaming . Essentially this is a double buffering scheme for vertex buffers. In certain circumstances a driver can, when passed a vertex buffer through a DDI call, modify the video memory pointer of the vertex buffer. In this way, the driver can continue to process the contents of the vertex buffer, while, at the same time, the application can lock and fill the vertex buffer. As far as the application is concerned it is using the same vertex buffer. The fact that the memory pointed to by that vertex buffer has been modified is hidden by the runtime and driver. Although previous versions of DirectX supported vertex buffer renaming there have been certain changes with DirectX 8.0. In previous versions of Direct3D, renaming was primarily accomplished via the DrawPrimitives2 DDI entry point. Flags specified in the D3DHAL_DRAWPRIMITIVES2DATA would specify whether the driver could swap the vertex or command buffer and if so, what the required sizes of the buffers would be. However, in DirectX 8.0 vertex buffer swapping is not accomplished through DrawPrimitives2 (although calls through legacy interfaces will still exploit this mechanism) but rather through the LockExecuteBuffer (LockD3DBuffer) DDI entry point. DirectX 8.0 defines a new lock flag, D3DLOCK_DISCARD, that when passed to the driver indicates that the caller does not require the existing contents of the driver and hence they can be discarded prior to returning the pointer to the vertex buffer data. Hence, when the driver receives a vertex buffer lock call with the D3DLOCK_DISCARD flag set it can choose to rename the vertex buffer by setting the fpVidMem to a new value. It is important to note that the D3DLOCK_DISCARD flag will not be passed to the driver by the initial retail release of Windows 2000. The flag will be passed on Windows 2000 Service Pack 1 (SP1) and all subsequent versions of Windows 2000 and all versions of Windows 9x. In DirectX 7.0 vertex buffer renaming could also be accomplished via LockExecuteBuffer using the flag DDLOCK_DISCARDCONTENTS. However, there were defects in the synchronization between runtime and driver on the original release of DirectX 7.0 that prevent this mechanism working correctly. However, the version of DirectX 7.0 released with DirectX 8.0 corrects this problem and vertex buffer renaming at lock time will be functional through DirectX 7.0 interfaces. Handling Renaming on Windows 2000 However, in order to correctly perform vertex buffer renaming it is important to understand the nature of the fpVidMem pointer stored in the surface global object on Windows 2000. The interpretation of fpVidMem depends on the type of memory in which the surface is stored. For both system and non-local video memory (AGP) surfaces the fpVidMem is a pointer directly into the user mode address space of the process owning that surface. For local video memory surfaces, fpVidMem is an offset from the start of video memory. In order to convert this to a user mode pointer it is necessary to add the base address of video memory as mapped into a user mode process. This base address can be found in the fpProcess field of the DirectDraw local object for a given process.   Although fpVidMem for a non-local video memory surface is simply a user mode pointer the means by which this user more pointer are generated are somewhat complex. It is necessary to understand how the Windows 2000 kernel maintains AGP heaps and manages surface allocations from them. The first important point is that, for non-local heaps, the start address of the heap maintained by the kernel may not be a heap into any real address space. It is in fact, normally, a numerical offset designed to ensure that valid allocations from that heap cannot have a NULL (zero) address. It may be helpful to think of AGP heaps as residing in a conceptual address space that does not correspond to any real address space. The fpStart field of an AGP heap is the base address of the heap in this conceptual address space. Furthermore, any surface s allocated from an AGP heap have fpHeapOffset that also lies in this conceptual address space. Thus, fpHeapOffset is an offset from the base of this conceptual heap and it is not an offset from the start of the heap itself. Furthermore, it is not a pointer into any real address space. In order for a user mode process to access the memory of a surface fpHeapOffset must be mapped (via pointer arithmetic) into the address space of that user mode process. When a surface is created the kernel performs this mapping according to the formula outlined below. Given a surface (pSurface), a kernel mode AGP heap (pvmHeap) and a mapping of the heap into a particular user mode process (pMap). The following formula is used to compute the actual, user mode, fpVidMem, for a surface: fpVidMem = pMap->pvVirtAddr + (pSurface->fpHeapOffset   pvmHeap->fpStart) pvVirtAddr is the base address of the user mode mapping of the AGP heap into a given process. fpStart is the offset of the base of the AGP heap into the conceptual address space described above and fpHeapOffset is the offset of the start of the surface from the base of the same conceptual address space. Your driver is notified of the conceptual base address of AGP heaps through the GetDriverInfo callback. When GetDriverInfo is called with the GUID GUID_UpdateNonLocalHeap the fpGARTLin field of the data structure passed is the same value as fpStart, i.e., the base address of the start of the AGP heap in the conceptual address space. Unfortunately, your driver is not notified of the value of pvVirtAddr and it is not visible to the driver through any of the data structures passed to the driver. Therefore, its value has to be computed from the fpVidMem computed by the kernel for the vertex buffer on initial creating. Given the fpVidMem computed by the kernel simply subtract the current fpHeapOffset less the heap s fpStart. Given the fpHeapOffset of the new memory to be swapped into the vertex buffer on renaming the new value of fpVidMem can be easily computed. The following code fragment demonstrates computing a new fpVidMem for an AGP surface in a lock call. // Get the vertex buffer s surface local and global from the // lock data LPDDRAWI_DDRAWSURFACE_LCL*pLcl = pLockData->lpDDSurface; LPDDRAWI_DDRAWSURFACE_GBL*pGbl = pLcl->lpGbl; // Get heap this vertex buffer was allocated from LPVVIDEOMEMORY pHeap = pGbl->lpVidMemHeap; // Get the current fpVidMem for the vertex buffer FLATPTR fpCurrentVidMem = pGbl->fpVidMem; // Compute the virtual base address of the mapping of this AGP // into the process owning this vertex buffer. FLATPTR pvVirtAddr = fpCurrentVidMem   (pGbl->fpHeapOffset   pHeap->fpStart); // Given the fpHeapOffset of the non-local video memory to be // swapped into the new vertex buffer compute the new fpVidMem // as follow FLATPTR fpNewVidMem = pvVirtAddr + (fpNewHeapOffset   pHeap->fpStart); // Now store the new fpVidMem in the surface global object and // also in the lock data. pGbl->fpHeapOffset = fpNewHeapOffset; pGbl->fpVidMem = fpNewVidMem; pLockData->lpSurfData = fpNewVidMem; // Return success and driver handled pLockData->ddRVal = DD_OK; return DDHAL_DRIVER_HANDLED; In order to make non-local video memory accessible to a user mode process it is necessary for the memory to be both committed and mapped to the user mode process. To ensure that this is done when vertex buffer renaming is being performed it is essential that the new memory for the vertex buffer be allocated using the Eng function HeapVidMemAllocAligned. This will guarantee that the memory is committed and mapped prior to use. HeapVidMemAllocAligned returns an offset into the conceptual address space of the AGP heap and, hence, this pointer can be used as an fpHeapOffset directly. If the driver returns DDHAL_DRIVER_HANDLED for a lock of an AGP surface the kernel code will return to the runtime and application the value of lpSurfData in the DD_LOCKDATA data structure. If the driver returns DDHAL_DRIVER_NOTHANDLED the kernel simply returns the value of fpVidMem to user mode. Therefore, it is not necessary to return DDHAL_DRIVER_HANDLED as long as fpVidMem is updated to point to the new user mode pointer. However, we recommend that the driver both set fpVidMem and lpSurfData and return DDHAL_DRIVER_HANDLED. Miscellaneous Issues Clipping Transformed Vertices The Direct3D 8.0 runtime fully supports the clipping of pre-transformed vertices through both DrawPrimitive and ProcessVertices. This clipping includes user defined clipping planes as well as Z and the X and Y viewport extents. However, the runtime does not guarantee the clipping of post-transformed vertices. Post-transformed, vertex data is passed directly from the application to the driver by the runtime. This does not imply that a driver is required to full clip post-transformed vertex data. A new capability flag D3DPMISCCAPS_CLIPTLVERTS has been added for DirectX 8.0. If the driver sets this flags in the PrimitiveMiscCaps  field of the D3DCAPS8 structure the application can assume that the driver will fully clip post-transformed vertex data to the Z and X, Y viewport extents. Clipping to user-defined clip planes is never supported for post-transformed data. If the driver does not set this flag the application is required to performing clipping of the post-transformed data to the Z extents and to (at least) the guardband extents in X and Y. It is important to note that the runtime does not validate that the application has correctly clipped post-transformed data. It is the driver s responsibility to ensure that a crash or hang does not occur if unclipped or incorrectly clipped data is passed when this flag is set. Microsoft Corporation Confidential Page   PAGE   DATE  9/11/2000
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dxg\docs\d3d8infrastructure.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Corp. 0 Graphics Framework  Title _PID_GUID0 Graphics Framework  Jeff Noyle Normal.dot Jeff Noyle Microsoft Word 8.0'?Mc8 CfF{BFConventions Naming Conventions All interface names start with IDirect3D and are appended with an 8. All struct, enum and identifier names are all-caps, start with D3D and are typically not appended with an 8, unless it is known that the structs will change in DX9 time. Return Code Conventions Authors should note that each method s return codes have been broken into two classes: development-time errors and run-time errors. Development-time errors are those which are caused by the application misusing the method. This usually means by passing bad parameters, or using an unsupported feature (on that device) that could have been avoided by the application propoerly using other enumeration or test functions. Development-time errors should be debugged out of the application before the application is shipped, and no shipping code should have to check for development-time errors. Run-time errors cover expected unpredictable situations. Good examples would be the exhaustion of video memory, or the loss of a device due to the user pressing alt-tab. Every run-time error should be expected and handled by the application. Throughout this document, each function or method s development-time and run-time errors are documented separately, so that authors may easily know what situations they should be able to remove from their application, and what situations they need to handle at run-time. Note that the same error code may be a run-time error for one method or function and yet be a development-time error for another, and vice-versa. Graphics Infrastructure This section presents the services provided by Direct3D that are called at relatively low frequency. These services comprise creation of Direct3D, creation of resources (textures, vertex buffers etc.), display mode selection and presentation of rendered images to the display. A simple clarification of the reference counting semantics of Direct3D APIs provides a great deal of additional programming ease-of-use. An ubiquitous convention in Direct3D for DirectX8 is the following: When an interface pointer is a return type, that interface is not AddRef-ed When in interface pointer is an out-parameter, that interface is AddRef-ed. Two examples will clarify this distinction. The well-known and despised well-loved QueryInterface method returns an interface pointer as an out-parameter. This interface is AddRef ed by the QueryInterface method before it is returned. Applications are then required to call Release on the returned interface when they are finished with it. Now take a look at a good example of the second class: IDirect3Dsurface ID3DSurface8 * IDirect3DCubeMap8::OpenFaceOpenCubemapSurface(DWORD dwFaceIdentifier, UINT iMipLevel); OpenFace OpenCubemapSurface is a method on the cube map interface that allows the application to retrieve any mip level of any face of that cube map. The returned surface interface is not AddRef-ed (because it s a returned value, not an out-parameter), and applications are constrained not to call Release on this interface. This simple rule enables the following code fragment (some details omitted): D3DSURFACEDESC d3dsd; pD3DCubeMap->OpenCubemapSurface(POSITIVEX, 0)->Lock(&d3dsd); ...party on the bits pD3DCubeMap->OpenCubemapSurface(POSITIVEX,0)->Unlock(); Compare with: D3DSURFACEDESC d3dsd; HRESULT hr = pD3DCubeMap->OpenCubemapSurface(POSITIVEX, 0), & pSurface); If (SUCCEEDED(hr)) pSurface->Lock(&d3dsd) ...party on the bits pSurface->->Unlock(); pSurface->Release(); Six lines of application source code in the latter example have been replaced by two in the former. As many methods as possible in Direct3D for DirectX8 follow this convention. For any such interface, you can hang on to the returned pointer (if you need to), provided that you call AddRef yourself immediately after retrieving the pointer, like so: IDirect3Dsurface ID3DSurface8 * pSurface = pCubeMap-> OpenCubemapSurface (...); pSurface->AddRef(); You now own the lifetime of pSurface, and can destroy it by calling Release.  Additionally, it is guaranteed that if the cubemap has such a face/level, then a valid pointer will be returned. No out-of-memory or device-lost or other error will cause a NULL to be returned.  Furthermore, in all cases where an API doesn t return an HRESULT, it is guaranteed that the only (if any) possible failure condition will be an invalid parameter that is independent of the driver caps or machine state. Some Details you Can Ignore Of course, it is only possible to follow this convention in some cases. The returned interface has to point to an object whose lifetime is owned by the object from whom the interface is returned. It is also wise that interfaces only be a return type when expected failure of the function would have been discovered at application author time (such as opening the 14th level of a 3-level mipmapMipMap). Methods such as CreateTexture CreateMipMap still have an out-parameter and return an HRESULT, since it is expected that such a method can fail at run-time (out of video memory, etc.). Creating Direct3D Historical Note The creation and setup of a the Direct3D device Device interface have been collapsed into a single API. Functions for enumerating and retrieving capabilities of a device have been factored out of the device interface itself, in order to allow applications to select devices without creating them. Callbacks are no longer part of this or any other Direct3D enumeration mechanism. Earlier versions of DirectX gave an independent identity to the primary flipping chain and Depth buffers that could be associated with a surface. In Direct3D8 for DirectX8 has the flip chain and depth buffer have become a property of the device with no individual lifetime. The motivations for this were many, but mainly to remove the need for the concept of  attached surfaces  so prevalent and problematic in the former API. This change means that the new creation API takes parameters describing the size and format of the flip chain DX8 specifically requires that if 3D device capabilities exisit at all, then they do not vary with display mode or render target format. In other words, caps are allowed to be zero in any mode, but are not allowed to be different when they are non-zero. The only exception to this rule is multi-sampling (full-scene anti-aliasing), which is expected to vary with render target format. Since only 16 and 32 bpp modes are exposed in DX8, this constancy of capabilities aligns well with existing cards.  In addition to these points, the design presented here requires the application to build no variable-sized storage of any kind. Caps and other items will be returned in structures of a defined size. Enumeration APIs The eEnumeration, caps Caps discovery and creation Creation functions are contained within the IDirect3D8 interface. This interface can be created by a functionall functions exported by d3d8.dll to which. A applications may link dynamically link to these functions., or by creating an instance of the CLSID_Direct3D8 class. The application goes through several nested layers of enumeration. The steps noted here are intended specifically for fullscreen applications. Windowed applications skip most of these steps. The first enumeration is for adapters. An adapter is a physical piece of hardware (note that a graphics card may contain more than one adapter, as in the case of a dual-head display). Applications that are not concerned with multi-monitor support can skip this step and pass D3DADAPTER_DEFAULT in step 2. For each adapter, the application enumerates the supported display modes via EnumAdapterModes. The application next checks for the presence of hardware acceleration (if required) in each of these modes by calling CheckDeviceTypes.  The application now checks for a desired level of functionality for this device on this adapter by calling GetCaps. The application can now filter out those devices which do not offer the required functionality. The caps returned by GetCaps are guaranteed to be constant for a given device across all display modes that were verified supported via CheckDeviceTypes. Devices can always render to surfaces of the format of an enumerated display mode that is supported by that device. If the application wishes to render to surfaces of a different format, it can call CheckDeviceFormats. If the device can render to that format, then it is guaranteed that all the caps returned by GetCaps are applicable. Optionally, the application may lastly determine if multisampling (full-scene antialiasing) is supported for the given render format. Once all these steps have been completed, the application should have a list of display modes in which it can operate as desired. The last step that needs to be performed is to verify that enough device-accessible memory is available to accomodate the required number of buffers and antialiasing. (Such a test is necessary because the memory consumption for the mode/multisample combination is impossible to predict without actually trying, and moreover some adapter architectures may not have a constant amount of device-accessible memory.) In practical terms, this means that an application should be able to respond to out-of-vidmem failures when going fullscreen. The typical response would be to remove that mode from the list of modes the application offers to its users, or to attempt to consume less memory by reducing the number of back buffers or using a cheaper multisampling method. The windowed application performs a similar set of tasks: Determine the desktop rectangle covered by the client area of the window. Enumerate for adapters, looking for the one adapter whose monitor covers the client area. If the client area is owned by more than one adapter, then the application can choose to drive each adapter independently, or drive just one adapter and have the Direct3D runtime move pixels from one device to the other at Present time. The application can also skip these first two steps and use the D3DADAPTER_DEFAULT adapter. This may result in slower operation when the window is placed on a secondary monitor, but is of course a much easier scenario for the application to support. The application now checks all the render target formats that it cares to test by calling CheckDeviceFormats, and passing the format returned by GetAdapterDisplayMode as the AdapterFormat parameter (which causes CheckDeviceFormats to use the adapter s desktop format). Function: Direct3DCreate8 Creates an instance of the DirectX 8 Direct3D object and returns an IDirect3D8 interface. IDirect3D8 * Direct3DCreate8(void); Parameters Return Values The call returns a new IDirect3D interface and succeeds in all cases except out-of-memory conditions. Remarks Calling this function samples the current set of active display adapters. If the user dynamically adds adapters, either by adding devices to the desktop or by hot-docking a laptop, then those devices will not be enumerated for the lifetime of this IDirect3D object. Re-creating a new IDirect3D will expose the new devices. Interface: IDirect3D8 interface IDirect3D8 GetAdapterCount(void); HRESULT GetDeviceIdentifier( UINT  Adapter, DWORD Flags, D3DADAPTER_IDENTIFIER8  *pIdentifier); //OUT GetAdapterModeCount( Adapter); HRESULT EnumAdapterModes( UINT  Adapter,  UINT  Mode, D3DDISPLAYMODE *pMode); //OUT HRESULT CheckDeviceTypes( Adapter, D3DDEVTYPE DeviceType, D3DFORMAT DisplayFormat);//IN HRESULT GetAdapterDisplayMode( Adapter, D3DDISPLAYMODE *pMode); //OUT HRESULT CheckDeviceFormats( UINT  Adapter,  D3DDEVTYPE  Type,  D3DFORMAT AdapterFormat, DWORD Usage, D3DFORMAT  CheckFormat); HRESULT CheckDeviceMultisampleTypes( UINT  Adapter,  D3DDEVTYPE  Type,  D3DFORMAT RenderTargetFormat, //IN Windowed, D3DMULTISAMPLE_TYPE Sample); HRESULT GetDeviceCaps( UINT  Adapter,  D3DDEVTYPE  Type,  D3DCAPS  *pCaps); //OUT HRESULT CreateDevice( UINT  Adapter,  D3DDEVTYPE  Type,  hFocusWindow, DWORD BehaviorFlags, D3DPRESENT_PARAMETERS *pPresenationParameters, IDirect3DDevice8 **ppReturnedInterface); Interface: IDirect3D8::GetAdapterCount Returns the number of adapters on the system. UINT IDirect3D8::GetAdapterCount(void); Return Value The number of adapters on the system at the time this IDirect3D8 was instantiated. See Also IDirect3D8::GetDeviceIdentifier Interface: IDirect3D8::GetDeviceIdentifier Describes the physical display adapters present in the system when Direct3DCreate8 (or CoCreateInstance) was called. HRESULT GetDeviceIdentifier ( UINT  Adapter, DWORD Flags, D3DADAPTER_IDENTIFIER8  *pIdentifier); //OUT Parameters Adapter An ordinal number denoting the adapter to be enumerated. D3DADAPTER_DEFAULT is always the primary display adapter Flags The normal value is zero. Alternatively, the application may specify: D3DENUM_HOST_ADAPTER This flag indicates that the identifier should contain information regarding the host adapter, rather than the actual adapter executing 3D commands. (This situation occurs in so-called  stacked  driver models, wherein a host (typically 2D only) card provides the CRT controller, but a second adapter executes 3D drawing commands and writes images into the host card s frame buffer.) D3DENUM_NO_WHQL_LEVEL This flag forces the D3DADAPTER_IDENTIFIER8.WHQLLevel member to be always zero (i.e. no information returned on WHQL certification date). This member can take a large amount of time to determine (on the order of a second or two). Use of D3DENUM_NO_WHQL_LEVEL avoids this penalty. pIdentifier Pointer to a D3DADAPTER_IDENTIFIER8 structure that will be filled with information concerning this adapter. If Adapter is greater than or equal to the number of adapters in the system, then this structure will be zeroed. Development-Time Error Codes D3DERR_INVALID_CALL if Adapter is out of range or if Flags contains unrecognized parameters or pIdentifier is null or points to unwriteable memory. Run-time Return Codes D3D_OK. Remarks The stacked driver model is becoming rare. Applications will typically not need to specify D3DENUM_HOST_ADAPTER. See Also IDirect3D8::GetAdapterCount Interface: IDirect3D8::CheckDeviceTypes Verifies if a particular device type can be used on this adapter. HRESULT CheckDeviceTypes( Adapter, D3DDEVTYPE CheckType, D3DFORMAT AdapterFormat);//IN Parameters Adapter An ordinal number denoting the adapter to be enumerated. D3DADAPTER_DEFAULT is always the primary display adapter. The function returns FALSE when this value equals or exceeds the number of display adapters in the system. CheckType The device type to check.  AdapterFormat The format of the adapter display mode for which the device type is to be checked. Some devices will only operate in, for example, 16 bits per pixel modes. Use D3DFMT_UNKNOWN to check the device types in the desktop display mode (i.e. when wishing to run in a window). Development-Time Error Codes D3DERR_INVALID_CALL if Adapter is out of range. Run-Time Return Codes If the device can be used on this adapter, D3D_OK is returned, otherwise D3DERR_INVALIDDEVICE is returned. Remarks In actuality, all of DirectX8 s software device types may be used on all adapters. The only device types that may not be present are D3DDEVICE_HAL and D3DDEVICE_PURE_HAL. D3DDEVICE_HAL requires hardware acceleration of some kind, and D3DDEVICE_PURE_HAL requires a DirectX8 driver be present for the adapter in question. Applications should use CheckDeviceTypes to determine if such hardware/drivers are present. Interface: IDirect3D8::GetAdapterModeCount Returns the number of display modes available on this adapter. UINT IDirect3D8::GetAdapterModeCount( Adapter); Parameters Adapter An ordinal number denoting the adapter to be studied. D3DADAPTER_DEFAULT is always the primary display adapter. The function returns zero when this value equals or exceeds the number of display adapters in the system. Return Values The number of display modes on this adapter, or zero if the Adapter argument is greater than or equal to the number of adapters on the system (this is a development-time error). See Also Interface: IDirect3D8::EnumAdapterModes Enumerates the display modes of the given adapter. HRESULT EnumDeviceModes( UINT  Adapter,  UINT  Mode, D3DDISPLAYMODE *pMode); //OUT Parameters Adapter An ordinal number denoting the adapter to be studied. D3DADAPTER_DEFAULT is always the primary display adapter. An ordinal number denoting the mode to be enumerated. In addition, D3DCURRENT_DISPLAY_MODE is not allowed for this method. pMode Pointer to a D3DDISPLAYMODE structure that will contain the returned mode description. This value is zeroed on error conditions. Development-Time Error Codes D3DERR_INVALID_CALL if Adapter or Mode is out-of-range or pMode is invalid, otherwise: Run-Time Return Codes D3D_OK. Remarks In addition to the native formats supported by the adapter, the applicable  unknown  formats are also enumerated. (See the  Resource Formats  section for more details.) These unknown formats allow the application to specify a desire for a certain minimum amount of resolution per color channel, without having to specify or be concerned about the ordering of channels within a pixel. ISSUE: It is expected that the set of refresh rates enumerated through this API be constrained to those that the monitor can handle. Since this is a very difficult determination to make, it is expected that the refresh rate information be restricted to those modes known to be good via a form of mode test performed in code offered by D3DX, in a manner analogous to the mode test API of DirectX 7. The details of this method remain TBD. See Also IDirect3D8::GetAdapterModeCount Method: IDirect3D::GetAdapterDisplayMode Returns the current display mode of the adapter. HRESULT IDirect3D::GetAdapterDisplayMode( Adapter, D3DDISPLAYMODE  pMode); Parameters Adapter An ordinal number denoting the adapter to be studied. D3DADAPTER_DEFAULT is always the primary display adapter.  pMode Pointer to a D3DDISPLAYMODE to be filled with the current adapter s mode. Development-Time Error Codes D3DERR_INVALID_CALL if Adapter is out of range or pMode is invalid. Run-Time Return Codes D3D_OK otherwise. Remarks Note that a device that represents an adapter may have been resized into a particular mode, but this may not be the actual mode of the adapter. A device resized to a particular mode may actually be lost and so not be determining the current mode of the adapter. This function returns the adapter mode, not any particular device s desired mode. Interface: IDirect3D8::CheckDeviceFormats Determines whether a certain surface format can be used as a texture, Depth/stencil buffer or render target (or any combination thereof) on a device representing this adapter. HRESULT CheckDeviceFormats( UINT  Adapter,  D3DDEVTYPE  DeviceType,  D3DFORMAT AdapterFormat, UINT  Usage, D3DFORMAT  CheckFormat); Parameters Adapter An ordinal number denoting the adapter to be studied. D3DADAPTER_DEFAULT is always the primary display adapter. The function returns FALSE when this value equals or exceeds the number of display adapters in the system. DeviceType See the D3DDEVTYPE section for more details. AdapterFormat A D3DFORMAT identifier denoting the format of the display mode in which the adapter will be placed. If this parameter is D3DFMT_UNKNOWN, then the adapter s current desktop mode format is taken. D3DFMT_UNKNOWN is thus the value that should be passed when application wishes to run windowed. Usage This value should indicate the set of usages to which the application would like to put a surface of the given CheckFormat. Allowed usages are: D3DUSAGE_DEPTHSTENCIL D3DUSAGE_RENDERTARGET D3DUSAGE_TEXTURE and any combination may be checked by ORing these values together.  CheckFormat The format of the surfaces which may be used in the ways defined by Usage.  Development-Time Error Codes D3DERR_INVALID_CALL if Adapter is out range, or DeviceType is unsupported. Runt-Time Return Values D3DERR_NOTAVAILABLE if the format is not acceptable to the device for this usage. D3D_OK if the format is acceptable to the device for this usage. Remarks One typical usage of this method is to check the fullscreen display pixel formats in which the device can operate, in order to verify that a device can render in that format. This is achieved by setting AdapterFormat equal to CheckFormat, and equal to one of the returned display formats. Of course, Usage should be set to D3DUSAGE_RENDERTARGET for this check. See the section on enumeration for more detail on the enumeration process. Usages in addition to Usage may be assigned to resources when they are created, such as D3DUSAGE_LOCK. The application s ability to specify such usages is not device-specific, and so need not be checked by this method. See Also Direct3DCreate8 Historical Note Under DX7, drivers were implicitly allowed to alter their capabilities across display modes. In DX8, the display mode is implied by the back buffer format of the swap chain when the swap chain is made fullscreen. Since Direct3D still needs to accomodate older drivers, the DisplayFormat parameter is required.  Interface: IDirect3D8::CheckDeviceMultiSampleTypes Checks if a particular multisampling technique is available on this device. HRESULT CheckDeviceMultisampleTypes( UINT  Adapter,  D3DDEVTYPE  Type,  D3DFORMAT RenderTargetFormat, //IN Windowed, D3DMULTISAMPLE_TYPE Sample); Parameters Adapter An ordinal number denoting the adapter to be studied. D3DADAPTER_DEFAULT is always the primary display adapter. The function returns FALSE when this value equals or exceeds the number of display adapters in the system. DeviceType See the D3DDEVTYPE section for more details. RenderTargetFormat Denotes the render target for which the set of multisample types should be returned. Windowed Denotes whether the application is enquiring about fullscreen or windowed multisampling. Sample The multisample type being tested. Development-Time Error Codes D3DERR_INVALID_CALL if RenderTargetFormat is not supported on this adapter for this devicetype in this mode or TYPE if DeviceType does not apply to this adapter. Run-Time Return Values D3DERR_NOTAVAILABLE if the queried multisample technique is not supported by this device. D3D_OK otherwise. Remarks This method checks to see if the device can perform the specified multisampling method. See Also CreateDirect3D8 Interface: IDirect3D8::GetCaps Retrieves the capabilities of the device that represents this adapter. HRESULT GetCaps( UINT  Adapter,  D3DDEVTYPE  DeviceType,  D3DCAPS8 *pCaps); //OUT Parameters Adapter An ordinal number denoting the adapter represented by the device to be studied. D3DADAPTER_DEFAULT is always the primary display adapter. DeviceType See the D3DDEVTYPE section for more details. pCaps Pointer to application-supplied storage for the returned caps structure. Development-Time Error Returns D3DERR_INVALID_CALL if pCaps is null or points to unwriteable memory, or if DeviceType does not apply to this adapter, or if Adapter is greater than or equal to the number of adapters enumerated by this IDirect3D. Run-Time Return Codes D3D_OK. Remarks The caps returned by this function should be valid in any mode supported by the device. See Also Direct3DCreate8 Interface: IDirect3D8::CreateDevice Creates a device to represent the adapter. HRESULT CreateDevice( UINT  Adapter,  D3DDEVTYPE  DeviceType,  hFocusWindow, DWORD BehaviorFlags, D3DPRESENT_PARAMETERS *pPresentationParameters  IDirect3DDevice8 **ppReturnedInterface); Parameters Adapter An ordinal number denoting the adapter to be studied. D3DADAPTER_DEFAULT is always the primary display adapter. DeviceType Denotes the desired device type desired.  hFocusWindow The hWnd to which focus belongs for this Direct3DDevice. Can be NULL if D3DRESIZE_FULLSCREEN is not specified (but if so, then D3DRESIZE_FULLSCREEN will be illegal for all subsequent calls to Resize on this device). BehaviorFlags Controls some global behaviors of the Direct3D device. Meanings of the first three flags are equivalent to the similarly-named SetCooperativeLevel flags of DX7. Values are: D3DCREATE_FPU_SETUP Indicates that the application would like to keep the FPU set up for optimal Direct3D performance (single precision and exceptions disabled) so Direct3D does not need to explicitly set the FPU each time.  D3DCREATE_FPU_PRESERVE Indicates that the application needs either double precision FPU or FPU exceptions enabled. This makes Direct3D explicitly set the FPU state eah time it is called. Setting the flag will reduce Direct3D performance.  D3DCREATE_MULTI_THREADED Indicates that the application explicitly asks Direct3D to be multithread safe. This makes Direct3D take its global critical section more frequently and can thereby degrade performance. D3DCREATE_DISABLE_DRIVER_MANAGEMENT This flag causes Direct3D to prevent the driver from performing resource  management tasks for D3DPOOL_MANAGED resources. Note that even if the driver cannot manage resources, the different semantics of driver-managed resources still pertain without this flag; namely that such resources are treated as volatile memory and must be destroyed prior to a Resize call, and may return D3DERR_DEVICE_LOST at Lock time. See  Lost Devices  for more information. Presence of this flag means that the Direct3D runtime owns management, even if the driver can perform management tasks. pPresentationParameters See the  IDirect3DDevice8::Resize  method for a full discussion of this parameter. ppReturnedInterface A pointer to the returned interface. Development-Time Error Returns Run-Time Return Codes D3D_OK Remarks IDirect3D8::CreateDevice returns a fully working device interface, set to the required display mode (or windowed), and allocated with the appropriate back buffers. The application need only create and set a Depth buffer, if desired, to begin rendering. See Also IDirect3D8::Resize Structures D3DDISPLAYMODE typedef struct _D3DDISPLAYMODE Width; Height; RefreshRate; D3DFORMAT Format; } D3DDISPLAYMODE; D3DCAPS8 typedef struct _D3DCAPS8 {     /* Device Info */     D3DDEVTYPE          DeviceType;     UINT                AdapterOrdinal;     /* Caps from DX7 Draw */     DWORD               Caps;     DWORD               Caps2;     DWORD               SVCaps;     DWORD               PresentationIntervals;     /* Cursor Caps */     UINT                MaxCursorEdgeSize;     DWORD               CursorCaps;     /* 3D Device Caps */     DWORD               DevCaps;     D3DPRIMCAPS         LineCaps;     D3DPRIMCAPS         TriCaps;     DWORD               MinTextureWidth, MinTextureHeight;     DWORD               MaxTextureWidth, MaxTextureHeight;     DWORD               MaxTextureRepeat;     DWORD               MaxTextureAspectRatio;     DWORD               MaxAnisotropy;     D3DVALUE            GuardBandLeft;     D3DVALUE            GuardBandTop;     D3DVALUE            GuardBandRight;     D3DVALUE            GuardBandBottom;     D3DVALUE            ExtentsAdjust;     DWORD               StencilCaps;     DWORD               FVFCaps;     DWORD               TextureOpCaps;     DWORD               MaxTextureBlendStages;     DWORD               MaxSimultaneousTextures;     DWORD               MaxActiveLights;     D3DVALUE            MaxVertexW;     DWORD               MaxUserClipPlanes;     DWORD               MaxVertexBlendMatrices;     DWORD               VertexProcessingCaps;     DWORD               MaxVertexIndex;     D3DVALUE            MaxPointSize;     DWORD               MaxStreams;     DWORD               VertexShaderVersion;     DWORD               PixelShaderVersion;     DWORD               MinVolumeExtent, MaxVolumeExtent; } D3DCAPS8; D3DCAPS_READ_SCANLINE Caps2 D3DCAPS2_NO_2D_DURING_3D_SCENE D3DCAPS2_FULLSCREEN_GAMMA D3DCAPS2_CAN_RENDER_WINDOWED D3DCAPS2_CAN_CALIBRATE_GAMMA D3DCAPS2_STEREO D3DCAPS2_UMA SVCaps Valid if D3DCAPS2_STEREO is set. D3DCAPS_STEREO_SEQUENTIAL PresentationIntervals A bitmask of values representing what presentation swap intervals are available. The following values are defined: D3DPRESENTATION_INTERVAL_IMMEDIATE D3DPRESENTATION_INTERVAL_ONE D3DPRESENTATION_INTERVAL_TWO D3DPRESENTATION_INTERVAL_THREE D3DPRESENTATION_INTERVAL_FOUR MaxCursorEdgeSize The largest size in pixels of the smallest dimension (x or y) of the hardware-drawn cursor. Zero if no hardware cursor is available. CursorCaps A bitmask indicating what hardware support is available for cursors: D3DCURSORCAPS_MONO A two-color black and white cursor is supported in hardware. D3DCURSORCAPS_COLOR A full-color cursor is supported in hardware. Direct3D for DirectX8 does not define alpha-blending cursor capabilities. DeviceType The Device Type for which this IDirect3DDevice8 was created. AdapterOrdinal The adapter on which this IDirect3DDevice8 was created. This ordinal is only valid to pass to methods of the IDirect3D8 that created this IDirect3DDevice8. This IDirect3D8 can always be retrieved by IDirect3DDevice8::GetDirect3D. CurrentDisplayMode The current display mode of this adapter. D3DADAPTER_IDENTIFIER8 typedef struct _D3DADAPTER_IDENTIFIER8     char    Driver[MAX_DDDEVICEID_STRING];     char    Description[MAX_DDDEVICEID_STRING]; #ifdef _WIN32     LARGE_INTEGER DriverVersion;      /* Defined for 32 bit components */ #else     DWORD   DriverVersionLowPart;     /* Defined for 16 bit driver components */     DWORD   DriverVersionHighPart; #endif     DWORD   VendorId;     DWORD   DeviceId;     DWORD   SubSysId;     DWORD   Revision;     GUID    DeviceIdentifier;     DWORD   WHQLLevel;     HMONITOR hMonitor;  } D3DADAPTER _IDENTIFIER8; Driver, Description These elements are for presentation to the user only. They should not be used to identify particular drivers, since this is unreliable and many different strings may be associated with the same device, and the same driver from different vendors. DriverVersion, DriverVersionLowPart, DriverVersionHighPart This element is the version of the Direct3D driver. It is legal to do <, > comparisons on the whole 64 bits. Caution should be exercised if you use this element to identify problematic drivers. It is recommended that guidDeviceIdentifier is used for this purpose. This version has the form: Product = HIWORD(DriverVersion.HighPart) Version = LOWORD(DriverVersion.HighPart) SubVersion = HIWORD(DriverVersion.LowPart) Build = LOWORD(DriverVersion.LowPart) dwVendorId, dwDeviceId, dwSubSysId, dwRevision These elements can be used to identify particular chipsets. Use with extreme caution. VendorId Identifies the manufacturer. May be zero if unknown. DeviceId Identifies the type of chipset. May be zero if unknown. SubSysId Identifies the subsystem, typically this means  the particular board. May be zero if unknown. Revision     Identifies the revision level of the chipset.  May be zero if unknown. DeviceIdentifier This element can be used to check changes in driver/chipset. This GUID is a unique identifier for the driver/chipset pair. Use this element if you wish to track changes to the driver/chipset in order to reprofile the graphics subsystem. This element can also be used to identify particular problematic drivers. WHQLLevel This element is used to determine the Windows Hardware Quality Lab (WHQL) certification level for this driver/device pair. The DWORD is a packed date structure defining the date of the release of the most recent WHQL test passed by the driver. It is legal to do <,> operations on this value. The following format is used: Year, a decimal number from 1999 upwards. Month, a decimal number from 1 to 12       Day, a decimal number from 1 to 31 The following special values are also used: Not certified. WHQL certified, but no date information available. hMonitor A handle to the monitor connected to this device. Issue: Need to ensure that this structure adequately covers localization issues. Going from a Device to an IDirect3D8 Method: IDirect3DDevice8::GetDirect3D Returns an interface to the instance of the Direct3D object that created this device. void IDirect3DDevice8::GetDirect3D(IDirect3D8 **pDirect3D) Parameters pDirect3D A pointer to an IDirect3D8* that will be filled with a pointer to that interface. This interface will be add-refed, so applications should call Release through this pointer when they are finished with it. Return Values None. This method cannot fail unless a bad pointer was passed. Method: IDirect3DDevice8::GetCreationParameters Returns the ordinal of the adapter represented by this device. D3DDEVICE_CREATION_PARAMETERS IDirect3DDevice8::GetCreationParameters(void) typedef struct _D3DDEVICE _CREATION_ PARAMETERS AdapterOrdinal; D3DDEVTYPE DeviceType; DWORD BehaviorFlags; hFocusWindow; } D3DDEVICE _CREATION_ PARAMETERS; Return Values A structure whose methods are described as follows: AdapterOrdinal Use this ordinal as the iAdapter method for any of the IDirect3D8 methods. Note that different instances of Direct3D8 may use different ordinals (since adapters can come and go in a system due to users adding or subtracting monitors from a multimon system, or due to hot-swapping a laptop, for example). Consquently, you should use this ordinal only in a Direct3D8 known to be valid. The only two valid Direct3D8 instances are: The Direct3D8 that created this IDirect3DDevice8 interface. The Direct3D8 returned from IDirect3DDevice8::GetDirect3D as called through this IDirect3DDevice8 interface. DeviceType, BehaviorFlags, hFocusWindow These are the parameters exactly as they were passed to teh IDirect3D8::CreateDevice call that created this device. Retrieving Caps From a Device Method: IDirect3DDevice8::GetCaps Retrieves the capabilities of the device. HRESULT GetCaps( D3DCAPS8 *pCaps); //OUT Parameters pCaps Pointer to application-supplied storage for the returned caps structure. Development-Time Error Returns D3DERR_INVALID_CALL if pCaps is null or points to unwriteable memory. Run-Time Return Codes D3D_OK. See Also Direct3DCreate8 Sample Code D3DCAPS8 Caps; IDirect3D8 *pFactory = CreateDirect3DFactory8(); UINT cAdapters = pFactory->GetAdapterCount(); for(UINT Adapter = 0; Adapter < cAdapters; Adapter ++) pFactory->GetDeviceCaps( Adapter,  DEVICE_TYPE_HAL,  &Caps); if (Caps.dwXXX & DEVICE_CAP_XXX) //found a device I can add to my list Presentation APIs Introduction The "presentation APIs" are methods that control the low-frequency state of the device that affects what you see on the monitor. These include setting display modes and once-per-frame methods that are used to present images to the user.  Definitions The front buffer is the rectangle of memory that is translated by the graphics adapter and displayed on the monitor or other output device. A back buffer is a surface whose contents can be promoted to the front buffer. A swap chain is a collection of back buffers that can be serially presented to the front buffer. Typically, a fullscreen swap chain presents subsequent images via the Flip DDI, and a windowed swap chain presents images via the Blt DDI.  There is always at least one swap chain per device, since Direct3D for DirectX8 has one swap chain as a property of the device.  The IDirect3DDevice8 interface has a set of methods that manipulate this implicit swap chain, and are a copy of the swap chain s own interface. Applications can create additional swap chains if they choose, but this is not necessary for the typical one-window or fullscreen application. The front buffer is not directly exposed in the Direct3D API for DirectX8. Applications cannot lock or render to the front buffer. (See the Appendix for a discussion of the motivations for this choice.) Historical Notes DX7 offered a number of presentation APIs that always end up being called together. A good example of this grouping would be the SetCooperativeLevel, SetDisplayMode, CreateSurface(DDSCAPS_PRIMARY) sequence. Additionally, there were two methods that signaled a transport of rendered frames to the monitor: Flip and Blt.  DX8 collapses these groups of APIs into few methods, of which two are significant: Resize and Present. Resize subsumes SetCooperativeLevel, SetDisplayMode, CreateSurface(DDSCAPS_PRIMARY) and some of the parameters to Flip. Present subsumes Flip and the presentation uses of Blt. Note that IDirect3D8::CreateDevice represents an implict Resize of the device. The API presented here has no notion of a  primary surface . There is no way to create an object that represents the primary surface: it is considered to be an internal property of the device. This is an intentional restriction, and is discussed in more detail in the appendix. The result of these changes in DX8 is an API that is remarkably simpler to use (just three methods instead of six), and much easier to use correctly. Gamma Correction is accomplished in a similar way to DirectX 7. Instead of the primary surface, gamma ramps are associated with a swap chain. Method: IDirect3DDevice8::Resize The Resize method changes the type (fullscreen or windowed, stereo or not), size and format of the swap chain. HRESULT IDirect3DDevice8::Resize( width,  height,  LPUINT pcBackBuffers,  D3D_FORMAT Format, DWORD  dwFlags,     // D3D_RESIZE_FULLSCREEN, // D3D_RESIZE_STEREO UINT  iPresentationRateInmHz, HWND  hWndDeviceCoverWindow   //must be NULL if  //D3D_RESIZE_FULLSCREEN //is not specified. D3DPRESENT_PARAMETERS *pParameters            ); Parameters pParameters See the description of the D3DPRESENT_PARAMETERS structure below. pcBackBuffers A pointer to an integer that contains the number of back buffers in the new swap chain. This does not include the front buffer or  primary surface . If the number of back buffers requested cannot be created, this function creates as many as possible and fills *pcBackBuffers with the created amount. If pcBackBuffers is NULL, then 1 back buffer is created. dwFlags Any combination of: D3D_RESIZE_FULLSCREEN If this flag is absent, the device is windowed D3D_RESIZE_STEREO Only valid with FULLSCREEN. D3D_RESIZE_SHRINKZ Specify whether the Z buffer should shrunk for new size.  iPresentationRateInmHz The maximal rate at which frames can be presented to the output. Must be one of the presentation rates returned in D3DCAPS8, or one of these special values: The runtime will choose the presentation  rate, or adopt the current rate if windowed. This is the only valid value when windowed. D3D_RESIZE_RATE_UNLIMITED The presentation rate runs as quickly as the  hardware can deliver frames.  Note that this value is expressed in milliHz. hWndDeviceCoverWindow This is the window that will be used to cover the device. Must be NULL if this resize will result in a windowed device. Can be NULL if fullscreen, in which case the runtime will create and use its own window.  This value cannot be NULL. Development-Time Error Codes D3DERR_INVALID_CALL if pParameters is NULL or points to invalid memory. Run-Time Return Codes D3D_OK. Remarks If the new swap chain is fullscreen, the adapter will be placed in the display mode that matches the new size. The back buffer s pool is chosen from a consideration of the IDirect3DDevice8 s device type and the swap effect. Table: Choice of Back Buffer Pool Software Device Hardware Device D3DSWAPEFFECT_COPY _SYSTEMMEM _LOCALVIDMEM D3DSWAPEFFECT_FLIP _LOCALVIDMEM* _LOCALVIDMEM D3DSWAPEFFECT_COPY_VSYNC _SYSTEMMEM _LOCALVIDMEM D3DSWAPEFFECT_DISCARD _SYSTEMMEM _LOCALVIDMEM *Occasionally (when the display driver doesn t support the flip operation) D3DSWAPEFFECT_FLIP on a software device will be implemented by way of some number of system memory buffers (two for double-buffering, three for triple-buffering) that are alternately copied to the frame buffer. See the definition of D3DSWAPEFFECT for more information on the implications of these swap effects. See Also D3DSWAPEFFECT, D3DPRESENT_PARAMETERS Structure: D3DPRESENT_PARAMETERS struct D3DPRESENT_PARAMETERS     UINT                BackBufferWidth;     UINT                BackBufferHeight;     D3DFORMAT           BackBufferFormat;     UINT                BackBufferCount;     D3DMULTISAMPLE_TYPE MultiSampleType;     D3DSWAPEFFECT       SwapEffect;     HWND                hDeviceWindow;     BOOL                Windowed;     BOOL                EnableAutoDepthStencil;     D3DFORMAT           AutoDepthStencilFormat;     /* Following elements must be zero for Windowed mode */     UINT                FullScreen_RefreshRateInHz;     UINT                FullScreen_PresentationInterval;     DWORD               FullScreen_Flags; BackBufferWidth, BackBufferHeight The width and height, in pixels, and the format of the new swap chain s back buffers. If Windowed is FALSE (i.e. the presentation will be fullscreen), then these values must be exactly equal to the width and height respectively of one of the enumerated display modes found through IDirect3D8::EnumAdapterModes. If Windowed is TRUE, then if either of these values is zero, then the corresponding dimension of the client area of the hWndDeviceWindow (or the focus window, if hWndDeviceWindow is NULL) is taken. BackBufferFormat This value must be one of the render target formats as validated by CheckDeviceFormats. If the format is D3DFMT_UNKNOWN, then if Windowed is TRUE, then the format of the back buffers will be taken to be the current format of the display mode, unless that format is not one of the allowed render target formats. If the current format is not allowed, then D3DFMT_UNKNOWNC5 is taken. BackBufferCount Can be 0, 1, 2 or 3. 0 is treated as 1. If this number of back buffers cannot be created, the runtime will fail this call and fill this value with the number of back buffers that could be created. (Thus an app can call twice with the same D3DPRESENT_PARAMETERS struct and expect it to work the second time.) 1 back buffer is considered a minimum. The call fails if 1 back buffer cannot be created. The value of Buffers affects what set of swap effects are allowed. Specifically, any COPY swap effect requires that there be exactly one back buffer. SwapEffect The runtime will guarantee the implied semantics concerning buffer swap behaviour (I.e. can the app depend on the bits being swapped, or copied from back to front). E.g., if windowed and D3DSWAPEFFECT_FLIP, then the runtime will create one extra back buffer, and copy whichever becomes the front buffer at Present time. D3DSWAPEFFECT_COPY and D3DSWAPEFFECT_COPY_VSYNC require that Buffers be set to 1. D3DSWAPEFFECT_DISCARD will be enforced in the debug runtime by filling any buffer with noise after it is presented. hWndDeviceWindow If fullscreen, this is the cover window. If windowed, this will be the default target window for Present. If this value is NULL, the focus window will be taken. Note that no attempt is made by the runtime to reflect user-induced changes in window size, other than an automatic stretch from the back buffer to the client area of the window. The back buffer is not implicitly resized when this window is resized. However, the Present method does automatically track window position changes. MultiSampleType See below. NOTE: MultiSampleType must be D3DMULTISAMPLE_NONE, unless SwapEffect has been set to D3DSWAPEFFECT_DISCARD. In other words, multisampling is only legal if the swap effect is DISCARD. Windowed TRUE if the application wishes to run windowed, FALSE if the application wishes to run fullscreen. EnableAutoZStencil If this value is TRUE, DX8 will manage depth buffers on behalf of the application. The device will create a depth/stencil buffer when it is itself created or resized. The depth/stencil buffer will be automatically set as the render target of the device. When the device is resized, the depth/stencil buffer will also be destroyed and recreated in the new size automatically. If EnableAutoDepthStencil is TRUE, then AutoDepthStencilFormat must be a valid Depth/Stencil format. AutoDepthStencilFormat The format of the automatic Depth/Stencil surface that the device will create. This member is ignored unless EnableAutoDepthStencil is TRUE.  FullScreen_RefreshRateInHz The maximal rate at which frames can be presented to the output. Must be one of the refresh rates returned in D3DCAPS8, or one of these special values: D3DRESIZE_RATE_DEFAULT The runtime will choose the presentation rate, or adopt the current rate if windowed. This is the only valid value when windowed. D3DRESIZE_RATE_UNLIMITED The presentation rate runs as quickly as the hardware can deliver frames.  FullScreen_PresentationInterval Must be one of the values enumerated in D3DCAPS8.dwPresentationIntervals. D3DPRESENTATION_INTERVAL_IMMEDIATE D3DPRESENTATION_INTERVAL_ONE D3DPRESENTATION_INTERVAL_TWO D3DPRESENTATION_INTERVAL_THREE D3DPRESENTATION_INTERVAL_FOUR D3DPRESENTATION_INTERVAL_IMMEDIATE is the only valid value when windowed. Fullscreen_Flags Currently controls only stereo. D3DPRESENT_STEREO ISSUE: still need to flesh out presentation timing when windowed Type: D3DSWAPEFFECT typedef enum D3DSWAPEFFECT {  D3DSWAPEFFECT_COPY,  D3DSWAPEFFECT_FLIP,  D3DSWAPEFFECT_COPY_VSYNC, D3DSWAPEFFECT_DISCARD}; D3DSWAPEFFECT_COPY The back buffer is copied to the front buffer. The back buffer contents are guaranteed to remain unchanged. This swap effect is only legal if exactly one back buffer was specified. D3DSWAPEFFECT_FLIP  The back buffer is swapped to the front buffer. The back buffer contents are replaced with the contents of whatever buffer was least recently presented. All buffers rotate serially, taking turns as back buffer 0, back buffer 1 (and so on, up to BackBufferCount-1), and front buffer. The presentation is synchronized with the vertical sync of the monitor. D3DSWAPEFFECT_COPY_VSYNC The back buffer is copied to the front buffer, but the copy is synchronized with the vertical sync of the monitor. The back buffer contents are guaranteed to remain unchanged.  For software devices, this swap effect is implemented by a copy from the system-memory back buffer to a video-memory back buffer which is then presented via a D3DSWAPEFFECT_FLIP operation, unless the system is DDCAPS2_UMA, in which case the device is treated as a hardware device. For hardware devices, this swap effect is typically implemented by a D3DSWAPEFFECT_FLIP operation followed by a copy from the front buffer back to the buffer. An extra buffer may be required in cases where the front buffer is in a different format or otherwise inaccessible, such a low-bandwidth remote connection. This swap effect is only legal if exactly one back buffer was specified. D3DSWAPEFFECT_DISCARD The back buffer is presented in some unknown method. The back buffer contents are guaranteed to be garbage. No reliance can be made on the contents of the back buffer after Present. The application must therefore overwrite every pixel (and the first write to every pixel must be write-only) in the back buffer before the next Present. Note that this option has the potential to have the highest performance and lowest memory consumption. In debug builds of Direct3D, the back buffer will be intentionally set to garbage regardless of the actual presentation method, as an aid to coding for this style of presentation. This is the only swap effect allowed when multisampling has been enabled for this swap chain. Remarks It should be noted that the state of the back buffer after Present is well-defined by each of these swap effects, and that the fullscreen/windowed-ness of the device has no effect on this state. In particular, the FLIP swap effect operates the same whether windowed or fullscreen, and the Direct3D runtime guarantees this by creating extra buffers. It is therefore recommended that applications use D3DSWAPEFFECT_DISCARD whenever possible to avoid any such penalties, since this swap effect will always be the most efficient in terms of memory consumption and performance. Return Values Remarks If the new swap chain is fullscreen, the adapter will be placed in the display mode that matches the new size. iPresentationRateInmHz is a combination of the monitor refresh rate and any ability the driver has to flip at multiples of the refresh rate (what was the DDFLIP_INTERVALx functionality of DX7).Type: D3DMULTISAMPLE_TYPE This enumeration defines levels of full-scene multisampling that the device can apply. In addition to enabling full-scene multisampling at Resize time, there will be render states that turn various aspects on/off at a fine-grained level. Multisampling is only legal on a swap chain that is being created or resized with the D3DSWAPEFFECT_DISCARD swap effect. typedef enum D3DMULTISAMPLE_TYPE D3DMULTISAMPLE_NONE, D3DMULTISAMPLE_2_SAMPLES, D3DMULTISAMPLE_3_SAMPLES, D3DMULTISAMPLE_16_SAMPLES Method: IDirect3DDevice8::Present HRESULT IDirect3D::Present( LPRECT  pSrcRect,  LPRECT  pDestRect,  hDestWindowOverride LPRGNDATA  pSrcDirtyRect)gion); Parameters hDestWnd This is the window into which the frame will be presented while in windowed mode. This parameter is ignored if in fullscreen mode. Clipping against other windows is guaranteed and cannot be disabled. pSrcRect This value must be NULL unless the swap chain was created with D3DSWAPEFFECT_COPY or D3DSWAPEFFECT_COPY_VSYNC.  pSrcRect is a pointer to a rect containing the source rectangle, in standard DirectX fashion. If NULL, the entire source surface is presented. If the rectangle exceeds the source surface, the rectangle will be clipped to the source surface.  pDestRect This value must be NULL unless the swap chain was created with D3DSWAPEFFECT_COPY or D3DSWAPEFFECT_COPY_VSYNC.  pSrcRect is a pointer to a rect containing the destination rectangle, in window client coordinates. If NULL, the entire client area will be filled. If the rectangle exceeds the destination client area, then the rectangle will be clipped to the destination client area. hDestWindowOverride The destination window whose client area will be taken as the target for this presentation. If this value is NULL, then the hWndDeviceWindow member of D3DRESIZE_PARAMETERS will be taken. pSrcDirtyRegion This value must be NULL unless the swap chain was created with D3DSWAPEFFECT_COPY or D3DSWAPEFFECT_COPY_VSYNC.  If this value is non-null, the contained region is considered to be expressed in back buffer coordinates.  The rectangles within the region are taken to be the minimal set of pixels that need to be transferred to complete the operation. The Present method may take these rectangles into account when optimizing the presentation by copying only the pixels within the region, or some suitably expanded set of rectangles. This is an aid to optimization only, and the application should not rely on the region being copied exactly. The implementation may choose to copy the whole source rectangle. Development-Time Error Codes Run-Time Return Codes D3D_OK. Remarks This function presents the contents of the next in the sequence of back buffers owned by the device.  If necessary, a stretch operation is applied to transfer the pixels within the source rectangle to the destination rectangle in the client area of the target window.  The source dirty region is the minimum set of pixels that need to be copied, and may or may not be used by Present to optimize the operation. If the operation calls for stretching (or shrinking), then the dirty region is used to mask the source rectangle before the stretch (or shrink) calculations are made. ISSUE: It is expected that this API will evolve to take a list of rectangles, rather than the hard-to-use RGNDATA. Implementation Notes Internally we will have this drive our atomic multi-rect CopyRects implementation. Note that non-null dest regions are explicitly supported when fullscreen. This is intended to ease implementation of dirty-rect updates for software-rendered 2D games and/or video. Method: IDirect3DDevice8::GetBackBuffer GetBackBuffer returns an interface to one of the back buffers in the device s swap chain. HRESULT IDirect3DDevice8::GetBackBuffer( UINT  BackBufferOrdinal, D3DBACKBUFFER_TYPE Side, IDirect3DSurface8  **pBackBuffer); Parameters BackBufferOrdinal Denotes which back buffer to Get. Back buffers are numbered from 0 to cBackBuffers-1, where cBackBuffers is the value of the same-named parameter to the most recent Resize. This implies that a value of 0 returns the first back buffer, not the front buffer. The front buffer is not accessible through this method. Indicates which half of the stereo pair to return. One of: D3DBACKBUFFER_TYPE_MONO D3DBACKBUFFER_TYPE_LEFT D3DBACKBUFFER_TYPE_RIGHT When the swap chain is not stereo, any flag can be used. When the swap chain is stereo, LEFT or RIGHT must be used. pBackBuffer Pointer to an IDirect3DSurface8* that will be filled with an interface pointer for the retrieved back buffer. Development-Time Error Codes If BackBufferOrdinal equals exceeds the number of back buffers, then the function fails and returns D3DERR_INVALID_CALL. Run-Time Return Codes D3D_OK. Method: IDirect3DDevice8::SetGammaRamp Sets the gamma correction ramp for the implicit swap chain. void IDirect3DDevice8::SetGammaRamp( DWORD Flags, D3DGAMMA_RAMP *pRamp); Parameters Flags Indicates whether correction should be applied. Gamma correction results in a more consistent display, but can cause SetGammaRamp to consume a lot of processor time. Short-duration effects such as flashing the whole screen red should not be callibrated, but long-duration gamma changes should be callibrated. Possible values: D3DSGR_NO_CALLIBRATION No correction is applied. The supplied gamma table is transferred directly to the device. D3DSGR_CALLIBRATE If a gamma callibrator is installed, the ramp will be modified before being sent to the device to account for the system and monitor s response curves. If a callibrator is not installed, the ramp will be passed directly to the device. Return Values None.  Remarks Since the gamma ramp is a property of the swap chain, the gamma ramp may be applied when the swap chain is windowed.  The gamma ramp takes effect immediately. No wait for vsync is performed. If the device does not support gamma ramps in the swap chain s current presentation mode (fullscreen or windowed), no error return is given. Applications can check the DDCAPS2_PRIMARYGAMMA and DDCAPS2_CANCALIBRATEGAMMA capability bits in D3DCAPS8.dwCaps2 to discover the capabilities of the device and whether a callibrator is installed. ISSUE: In future versions, it is likely that this will be extended to cover a gamma-correcting blt when windowed. See Also IDirect3DSwapChain8 Method: IDirect3DDevice8::GetGammaRamp Retrieves the gamma correction ramp for the swap chain. void IDirect3DDevice8::GetGammaRamp( D3DGAMMA_RAMP *pRamp); Parameters pRamp Points to an application-supplied D3DGAMMARAMP structure that will be filled with the current gamma correction ramp. Structure: D3DGAMMARAMP typedef struct _D3DGAMMARAMP     WORD                Red[256];     WORD                Green[256];     WORD                Blue[256]; } D3DGAMMARAMP; Method: IDirect3DDevice8::GetRasterStatus Returns information concerning the raster of the monitor on which the swap chain is presented. D3DRASTER_STATUS IDirect3DDevice8::GetRasterStatus(void); Return Values A structure containing information about the position or other status of the raster on the monitor driven by this adapter. This function cannot fail, so no error return is possible. Structure: D3DRASTER_STATUS Contains  struct D3DRASTER_STATUS InVBLANK; ScanLine; InVBLANK TRUE if the raster is in the vertical blank period. False otherwise. ScanLine If InVBLANK is FALSE, then this value is an integer roughly corresponding to the current scanline being painted by the raster. The scanlines are numbered in the same way as Direct3D surface coordinates. 0 is the top of the primary surface, extending to the height of the surface   1 at the bottom of the display. If InVBLANK is TRUE, then this value is set to zero and has no meaning. Presenting Multiple Views in Windowed Mode In addition to the swap chain owned and manipulated through the IDirect3DDevice8 interface, an application can create additional swap chains in order to present multiple views from the same device. The application would typically create one swap chain per view, and associate each swap chain with a particular window. The application renders images into the back buffers of each swap chain, then Presents them individually. Note that only one swap chain at a time can be fullscreen on each adapter. Method:IDirect3DDevice8::CreateAdditionalSwapChain Creates an additional swap chain for rendering multiple views. HRESULT IDirect3DDevice8::CreateAdditionalSwapChain( D3DPRESENT_PARAMETERS *pParameters, IDirect3DSwapChain8 **pOut Parameters The parameters are the same as those of the IDirect3DDevice8::Resize method. In fact, IDirect3DDevice8::Resize internally calls CreateAdditionalSwapChain to create the implicit swap chain owned by the device. Return Values Same as IDirect3DDevice8::Resize See Also IDirect3DDevice8::Resize Interface: IDirect3DSwapChain8 The swap chain has the following interface: interface IDirect3DSwapChain8 HRESULT Present( LPRECT pSourceRect, LPRECT pDestRect, hDestWndOverride, LPRGNDATA pDirtyRegion); HRESULT GetBackBuffer( UINT  Buffer, IDirect3DSurface8  **ppBackBuffer); Notice that each of these methods has a mirror in the IDirect3DDevice8 interface. These methods perform identically to their IDirect3DDevice8 counterparts, and the reader is directed to those methods for further documentation. The IDirect3DDevice8 methods are shortcuts with the following meanings: IDirect3DDevice8::Present: synonymous with IDirect3DDevice8::GetSwapChain()->Present IDirect3DDevice8::GetBackBuffer: synonymous with IDirect3DDevice8::GetSwapChain()->GetBackBuffer Depth Buffer Manipulation Historical Note In the past, any surface could be given a Depth buffer via AddAttachedSurface. In this design, Depth buffers are associated with the device instead of with surfaces. Applications are required to move Depth buffers when they set render targets. Modified Method: IDirect3DDevice8::SetRenderTarget Sets a new color and/or Depth buffer for the device. HRESULT IDirect3DDevice8::SetRenderTarget( IDirect3DSurface8 *pNewRenderTarget, IDirect3DSurface8 *pNewDepthStencil, DWORD Flags);  Parameters pNewRenderTarget The new color buffer. If NULL, the existing color buffer is retained. (Devices always have to be associated with some color buffer.) The new render target is AddRefed, if non-NULL. The new surface must have at least D3DUSAGE_RENDERTARGET. pNewDepthStencil The new Depth/stencil buffer. The existing Depth/Stencil buffer, if it exists is Released. The new Depth/Stencil buffer is AddRefed, if non-NULL. Applications can change render target without changing Depth buffer by passing in the out-parameter of IDirect3DDevice8::GetDepthStencilSurface method. The new surface must have at least D3DUSAGE_ZSTENCIL The surface must have D3DPOOL_DEFAULT. Flags Unchanged. Development-Time Error Codes D3DERR_INVALID_CALL if pNewRenderTarget or pNewZStencil are non-null and invalid, or if Flags contains unrecognized flags or if the new Depth buffer is smaller than the new or retained color buffer. Run-Time Return Codes D3D_OK. Remarks The device will call AddRef on each non-null surface passed to SetRenderTarget. After that, the device calls Release on the previously set color buffer. Once a color buffer and a Depth/Stencil surface have been associated with the same device in this way, they are said to be  paired The previous Depth/Stencil surface s contents persist after the call to SetRenderTarget that disassoicated it from the device. If the surface is re-associated with the device, then the contents of the surface will be unchanged, providing the following criterion holds. The new Depth/Stencil surface s contents will not be discarded as long as the color buffer to which the new Depth/Stencil surface is being paired is the same size and format as the color buffer to which the Depth/Stencil surface was most recently paired. See Also IDirect3DDevice8::CreateDepthStencilSurface, IDirect3DDevice8::GetDepthStencilSurface New Method: IDirect3DDevice8::CreateDepthStencilSurface Creates a new Depth/Stencil surface that may be passed to IDirect3DDevice8::SetRenderTarget. HRESULT IDIRECT3DDevice8::CreateDepthStencilSurface( UINT               Width, UINT  Height, DWORD             Usage, D3DFORMAT    Format, D3DMULTISAMPLE_TYPE MultiSampleType, IDirect3DSurface8 ** ppSurface); Parameters Width,Height The dimensions of the surface to be created. Usage D3DUSAGE_DEPTHSTENCIL is added by default.  D3DUSAGE_LOCK is legal (depending on format... unknown formats are not lockable). All other usages are illegal. Format Must be one of the enumerated Depth/Stencil formats for this device. MultiSampleType One of the allowed multisample types. When this surface is passed to SetRenderTarget, its multisample type must match that of the color buffer. ppSurface Development-Time Error Returns D3DERR_INVALIDPARAMS TBD. Run-Time Return Values D3D_OK. Remarks The pool of the Depth/Stencil buffer is always D3DPOOL_DEFAULT. See Also IDirect3DDevice8::SetRenderTarget, IDirect3DDevice8::CopyRects New Method: IDirect3DDevice8::GetDepthStencilSurface  Returns an interface to the Depth buffer owned by the device. HRESULT IDirect3DDevice8::GetDepthStencilSurface( IDirect3DSurface8 ** pSurface); Parameters ppSurface A pointer to a IDirect3DSurface8 * that will receive the new interface. The interface has been AddRefed, and should be Released when no longer needed. Return Values An interface to the device s Depth/Stencil surface. Remarks The surface inherits the D3DUSAGE_LOCK value implied by the Depth/Stencil format (in particular, unknown depth/stencil formats will preclude D3DUSAGE_LOCK).  The surface may be passed to IDirect3DDevice8::CopyRects. ISSUE: Should implicit depth buffers be unlockable? See Also IDirect3DDevice8::SetRenderTarget, IDirect3DDevice8::CopyRects Access to Color Front Buffer Such access will be allowed, but is targetted explicitly at testing requirements. The performance of the functionality described here will not be guaranteed. Method: IDirect3DDevice8::GetFrontBufferContents This method generates a copy of the device s front buffer and places the results in a system memory buffer provided by the application.  HRESULT IDirect3DDevice8::GetFrontBufferRectangle( RECT  *pSourceRect, IDirect3DSurface8  **pRetrievedRectangle); Parameters pSourceRect Pointer to a rectangle in back buffer coordinates for the subset of the device s front buffer to return. If this value is NULL, the entire front buffer is returned. pRetrieveRectangle Points to an IDirect3DSurface8 interface pointer that will receive a pointer to an Image Surface holding a copy of the rectangle specified by pSourceRect. The data are returned in successive rows with no intervening space, starting from the vertically highest row on the device s output to the lowest (following the usual DirectX convention). Return Values Remarks This method is guaranteed to be slow. The buffer pointed to by will be filled with a representation of the front buffer, converted to the standard 32bpp format, D3DFMT_A8R8G8B8. Resources Historical Note Successive previous versions of DirectX had handled the explosion of resource types by overloading the concept of a DirectDraw surface. Originally, surfaces represented 2D arrays of pixels that could have a number of widely divergent uses such as representing the  primary surface , or denoting the overlay transport mechanism. In DX2 surfaces further specialized into textures, execute buffers and render targets. Later, surfaces became vertex buffers (although this is hidden within the DX6 API), and so on. One of the most serious consequences of this continuing expansion of the meanings of a surface was the unacceptably large memory overhead of the objects themselves. Memory overhead plus the volume textures feature of DX8 dictate that the poor surface be relieved of this burden. Thus DX8 presents a factorization of the surface into various types of buffers which are very tightly targeted towards their intended use. In addition, these tightly specified objects have exactly those methods which make sense to use with the object. This reduces the complexity in learning the interface since a multitude of non-applicable methods are not obscuring the interface. Further, it reduces complexity in accessing an object that a component did not create since it vastly reduces the realm of possibilites that the component would need to check for and handle.  A further difficulty of the old polymorphic model was the combinatorially enormous number of potential uses of the objects. It was difficult to adequately specify and test what it might mean, for example, to set a mipmap sublevel as a render target, or to use an overlay as a texture. These combinatorial problems are addressed in DX8 by syntactically restricting the uses of the resources to those that are both useful and well-defined. Such silly operations cannot even be expressed in DX8, so no effort need be expended to specify or test these operations. Resources and Buffers and Their Creation and Manipulation Resources are the textures, cube maps, vertex buffers etc that are used to render a scene. Applications need to create, load, copy and use resources. This section gives a brief overview of these steps and the methods used to accomplish them. The application will first create texture resources, using IDirect3DDevice8::CreateMipMapTexture IDirect3DDevice8::CreateVolumeTexture IDirect3DDevice8::CreateCubeMap The created objects are containers for surfaces or volumes, (generically  buffers ). The application gains access to the contained surfaces (for the purposes of loading artwork) by calling IDirect3DMipMap8::LockRect IDirect3DMipVolume8::LockBox IDirect3DCubeMap8::LockRect which take arguments denoting the contained surface (i.e. mip sub level or cube face) and return pointers to the pixels. (Note that the application has not yet dealt with a surface per se, but has created and initialized texture resources that contain surfaces. The typical application will never use a surface object directly.) The application will also create geometry-oriented resources with IDirect3DDevice8::CreateIndexBuffer IDirect3DDevice8::CreateVertexBuffer and lock and fill them via IDirect3DVertexBuffer::Lock IDirect3DIndexBuffer::Lock If the application is allowing the Direct3D runtime to manage the resources, then the creation process finishes here. If not, then the application will manage promotion of system memory resources to device-accessible resources (where the accelerator can use them) via IDirect3DDevice8::UpdateTexture. In order to present images rendered from these resources, the application also needs color and Depth/stencil buffers. For typical applications, the color buffer is owned by the device s swap chain (which is a collection of back buffer surfaces) and is implicitly created with the device. Depth/Stencil surfaces can be implicitly created, or explicitly created by the application via: IDirect3DDevice8::CreateDepthStencilSurface The application also associates the Depth and color buffers with the device via IDirect3DDevice8::SetRenderTarget Presenting the final image is covered in the section entitled  Presentation APIs  later in this document. The following diagram illustrates the operations that are syntactically possible on the resources and their contents, including the steps outlined above. Also illustrated are the other owners of surfaces: Depth/Stencil buffers (which are surfaces) and swap chains, which own back buffers. Arrows running from left to right indicate that the target types are created by the given methods. Arrows running from right to left indicate that those types can be passed as arguments to the given methods. Figure: Resources and their relationships Usage, Format, Pool and Type of Resources Resources have four properties in common: Usage: The uses to which the resource will be put (texture, rendertarget, etc.) Format: The format of the data (e.g. the pixel format for a 2D surface). Pool: What type of memory the resource is allocated in. Type: What the resource really is (vertex buffer, mipmap etc.). The buffers (surfaces or volumes) owned by the resource inherit the usages, format, and pool of the resource but have their own type. Resource Usage In DirectX 8, resource usages are enforced. An application that wishes to use a resource in a certain operation must specify that operation at resource creation time. The following usages are defined Usage Meaning Allowable types D3DUSAGE_LOCK Lock will succeed All resources. VBs and IBs have this usage by default. These pools disable lock: LOCALVIDMEM, NONLOCALVIDMEM, and DEFAULT. D3DUSAGE_ DEPTHSTENCIL Legal to pass to Depth/Stencil argument of SetRenderTarget 1-level MipMaps, and implicit on surfaces created by CreateDepthStencil-Surface  D3DUSAGE_ RENDERTARGET Legal to pass to color buffer argument of SetRenderTarget All resources that contain or are surfaces. CubeMaps, MipMaps, Depth/Stencil Surfaces D3DUSAGE_TEXTURE Legal to pass to SetTextureStage Implicit on all textures: CubeMaps, MipMaps, volumes. Legal on DepthStencil surfaces, illegal elsewhere. D3DUSAGE_BACKBUFFER Surface will be presented to display via Present Implicitly set on surfaces in a swap chain. Illegal elsewhere D3DUSAGE_ TEXTURE_STAGE_0, D3DUSAGE_ TEXTURE_STAGE_1, D3DUSAGE_ TEXTURE_STAGE_8 Indicates that the texture will be used on the nth stage of a multitexture operation. Usage at other stages is allowed, but may not work on some devices. (See D3DDEVCAPS_SEPARATETEXTUREMEMORIES) All Textures D3DUSAGE_WRITE_ONLY Vertex and Index Buffers D3DUSAGE_ SOFTWARE_PROCESSING Vertex and Index Buffers D3DUSAGE_DO_NOT_CLIP Vertex Buffers D3DUSAGE_LOAD_ONCE Data can be written to the resource once only. Only one Lock of, CopyRects to, or UpdateTexture to the resource will be allowed. Drivers may typically compress or re-order the art after Unlock. Has a benefit especially relevant to vertex and index buffers: on some systems, the contents of these buffers may be reordered for more optimal processing after the unlock. All resources Resource Pools The class of memory that holds a resource s buffers is denoted by the term  . The following pools are defined. Meaning D3DPOOL_LOCALVIDMEM    Memory local to the device. Allocations from this memory do not consume system RAM, and use of this memory does not consume system bandwidth. Reading or writing this memory may be expensive since it typically resides across an expansion bus from the point of view of the processor. Such resources must be destroyed before Resize can be called. D3DPOOL_NONLOCALVIDMEM Memory accessible by the device but backed by system RAM. Allocating this memory consumes pageable system RAM. Using this memory consumes system bandwidth. Writing to this memory is fast, but reading may be slow due to cache issues. Such resources must be destroyed before Resize can be called. D3DPOOL_SYSTEMMEM      Memory typically not accessible by device. Consumes system RAM but does not reduce pageable RAM. Such resources need not be destroyed before Resize can be called. D3DPOOL_MANAGED        The resources will be moved to device-accessible memory automatically. If the device was created without the D3DCREATE_DISABLE_DRIVER_MANAGEMENT flag, the driver may promote the resource according to an unknown algorithm, and Lock may return D3DERR_DEVICE_LOST. If the device was created witht that flag then the Direct3D runtime performs management according to a fixed algorithm, and such resources will not be  . See  Lost Devices  for more information on driver-managed resources and lost devices. D3DPOOL_DEFAULT The resource will be placed in the pool most appropriate for the set of usages requested for this resource. Such resources will be  Pools cannot be mixed for different objects contained within one resource (e.g. mip levels in a mipmap), and once chosen cannot be changed. Applications are strongly urged to use the D3DPOOL_DEFAULT pool. The Direct3D runtime will alllocate memory appropriately and may be able to insulate the application from future evolutions in display memory design. Resource Types The following types are defined: Resource Types D3DRESOURCETYPE_SURFACE                D3DRESOURCETYPE_VOLUME                 D3DRESOURCETYPE_MIPMAP                 D3DRESOURCETYPE_MIPVOLUME              D3DRESOURCETYPE_CUBEMAP                D3DRESOURCETYPE_VERTEXBUFFER           D3DRESOURCETYPE_INDEXBUFFER            These types are set implicitly by the runtime when the application calls a resource-creation method such as IDirect3DDevice8::CreateCubeMap. Applications can query these types at run-time, but it is expected that most scenarios will not require run-time type checking. Resource Formats Historical Note The DDPIXELFORMAT structure is quite complex and poorly defined, and has led to much confusion in the past. Examples of this confusion arise when new formats are defined within the scope of this structure, and older applications become confused as to the interpretation of the structure. Direct3D for DirectX8 replaces the DDPIXELFORMAT structure with an opaque identifier. There is no chance that applications will incorrectly compare formats, since the results of such a comparison is now rigorously defined. Additionally, the DDPIXELFORMAT introduced constraints such as the inability of IHVs to legitimately create their own formats except through a formal FOURCC code registration process. DDPIXELFORMAT was restricted to pixels no larger than a DWORD (due to the choice of DWORD for the mask values). The D3DFORMAT specifier Pixel formats are denoted by opaque DWORD identifiers. The format of these DWORDs has been chosen to enable the expression of IHV-defined extension formats, and also to include the well-established FOURCC method. The set of formats understood by the Direct3D runtime is defined by an enumerated type in the header file. All FourCC codes are inherently part of the table (without mapping). IHVs can extend the table by putting their PCI vendor ID into the high-word, putting 0x00 into the high-byte of the low-word and using the low-byte as a format identifier. The 0x00 prevents collisions with all valid FourCC codes. A high-word of Zero implies that it is a IHV-independent format that doesn't have a FourCC.  Note that IHV supplied formats and many FourCC codes will not be listed in the D3DFORMAT enumeration.  The formats in this enumeration are unique in that they are sanctioned by the runtime, meaning that the reference rasterizer will operate on all these types. The IHV formats will be supported by the individual IHVs on a card-by-card basis. Also note the following table is not complete, and is shown here for illustrative purposes only. The final formats are still TBD. /* Formats */ typedef enum _D3DFORMAT {     D3DFMT_UNKNOWN               =  0,     D3DFMT_UNKNOWN_C5     D3DFMT_UNKNOWN_C5A1     D3DFMT_UNKNOWN_C8     D3DFMT_UNKNOWN_C8A8     D3DFMT_UNKNOWN_F16     D3DFMT_UNKNOWN_F16     D3DFMT_UNKNOWN_D15S1     D3DFMT_UNKNOWN_D24     D3DFMT_UNKNOWN_D24S8     D3DFMT_UNKNOWN_D32 ISSUE:Add a 4 bit palettized     D3DFMT_R8G8B8                = 11,     D3DFMT_A8R8G8B8              = 12,     D3DFMT_X8R8G8B8              = 13,     D3DFMT_R5G6B5                = 14,     D3DFMT_X1R5G5B5              = 15,     D3DFMT_A1R5G5B5              = 18,     D3DFMT_A4R4G4B4              = 19,     D3DFMT_L8                    = 20,     D3DFMT_A8L8                  = 21,     D3DFMT_U8V8                  = 22,     D3DFMT_U5V5L6              = 23,     D3DFMT_U8V8L8                = 24,     D3DFMT_X8U8V8L8                = 25,     D3DFMT_R3G3B2                = 26,     D3DFMT_A8                    = 27,     D3DFMT_UYVY                   = MAKEFOURCC('U', 'Y', 'U', 'V'),     D3DFMT_YUY2                = MAKEFOURCC('Y', 'U', 'Y', '2'),     D3DFMT_DXT1                  = MAKEFOURCC('D', 'X', 'T', '1'),     D3DFMT_DXT2                   = MAKEFOURCC('D', 'X', 'T', '2'),     D3DFMT_DXT3                = MAKEFOURCC('D', 'X', 'T', '3'),     D3DFMT_DXT4                  = MAKEFOURCC('D', 'X', 'T', '4'),     D3DFMT_DXT5                  = MAKEFOURCC('D', 'X', 'T', '5'),     D3DFMT_D16                   = 30,     D3DFMT_VERTEXDATA            = 70,     D3DFMT_INDEX_16              = 71,     D3DFMT_INDEX_32              = 72,     D3DFMT_FORCE_DWORD           = 0xffffffff } D3DFORMAT; Opaque Color Formats We would like to encourage applications to treat the color buffers as opaque, but we still want to enable applications to choose a minimum resolution per channel. If the application specifies any of the D3DFMT_UNKNOWN* identifiers, then the corresponding device surfaces may take on a higher resolution. Specifying any of these formats means that the corresponding surface is not lockable.  Locking Resources Locking  a resource means granting CPU access to its storage. The application subsequently relinquishes direct access to Locked textures by unlocking them. In addition to granting processor access, any other operation involving that resource will be serialized for the duration of a lock. Only one lock for a given resource is allowed (even for non-overlapping regions) and no acclerator operations on a surface may be ongoing while a Lock is outstanding on that surface. Each resource interface has methods for locking the contained buffers. Each resource can also lock a sub-portion of that resource. Two dimensional resources (surfaces) allow the locking of sub-rectangles, and volume resources allow the locking of sub-volumes, or boxes. Each Lock method returns a structure that contains a pointer to the storage backing the resource, and values representing the distances between rows or planes of data, depending on the resource type (see the resource interface reference section below for details). The returned pointer always points to the top-left byte in the locked sub-region. Some resource formats aren t particularaly conducive to locking sub-regions. A good example is the DXTn set of formats, which store pixels in encoded 4x4 blocks. Application writers are cautioned that they should only lock sub-rects for resources that have well-defined storage for each individual pixel. Examples of such storage are D3DFMT_A1R5G5B5 and D3DFMT_A8R8G8B8. Examples of formats with poorly-defined storage for individual pixels are D3DFMT_UYVY and D3DFMT_DXT1. Historical Note DX8 continues the same somewhat fragile convention that a locked subrect returns a pointer to the subrect s top-left pixel. Since it is the display driver that makes the calculation of the address of the subrect and potentially even allocates storage for a temporary buffer therefor, it would have been technically difficult to second-guess the driver and offer a more robust convention: that the returned pointer would always be the top-left of the surface, and the subrect merely an optimization hint. Lock Flags This section discusses the flags that are common to the Lock method on all resource types. Resource Lock Flag Meaning D3DLOCK_READ_ONLY The application will not write to the buffer. This allows resources stored in non-native formats to save the re-compression step when unlocking. D3DLOCK_DISCARD The application will overwrite (with a write-only operation) every location within the portion being locked. This allows resources stored in non-native formats to save the decompression step. D3DLOCK_NO_OVERWRITE Used only with vertex and index buffers. Indicates that no vertices that were referred to in Draw*PrimtiveVB calls since the start of the frame (or the last lock without this flag) will be modified during the lock. This can enable optimizations when the application is only appending data to the vertex buffer. (ISSUE: Can we hide this behind the lock-ranges of a VB/IB?) D3DLOCK_NO_DIRTY _UPDATE By default, lock on a resource adds a dirty region to that resource. This flag prevents any changes to the dirty state of the resource. Applications should use this flag when they have further information about the true set of regions changed during the Lock (and can then pass this information to AddDirtyRect/Box). D3DLOCK_NO_SYSLOCK The default behavior of a video memory lock is to take a system-wide critical section that guarantees (among other things) that no display mode changes can happen for the duration of the lock. This flag causes the system-wide critical section not to be held for the duration of the lock. The lock operation is slightly more expensive, but can enable the system to perform other duties (such as moving the mouse cursor). This flag is useful for long duration locks (e.g. the lock of the back buffer for software rendering) that would otherwise adversely affect system responsiveness. Application writers should note that the first three lock flags (READ_ONLY, DISCARD, and NO_OVERWRITE) are hints only. The runtime makes no checks that applications are obeying the rules they specify by these flags. An application that, for example, specifies READ_ONLY but then writes to the resource can expect strange results.  Resource Interfaces All resources have the following methods in common:  interface IDirect3DResource // Allows navigation to the owning device object; for // example, in DX8, using IID_IDirect3DDevice8 would return // the IDirect3D interface for the object that created // this buffer. This method is rarely required, but is  // impossible to work around if missing. HRESULT GetDevice( REFIID  riid,  void  **ppOwner); // Private Data is the same as in DX7 HRESULT SetPrivateData ( REFGUID  refguid,  void  *pData,  DWORD  SizeOfData,  DWORD  Flags); HRESULT GetPrivateData ( REFGUID  refguid,  void  *pData,  DWORD  *pSizeOfData); HRESULT FreePrivateData( REFGUID  refguid); // Priority control for managed resources // For SetPriority, the previous value is returned. DWORD SetPriority( DWORD  PriorityNew); DWORD GetPriority(void); // Indicates that the application will need this managed resource shortly. // Has no effect on non-managed resources. void PreLoad(void); // Returns the type of this resource. D3DRESOURCETYPE GetType(void); Texture Resource Interfaces All textures have the following methods in common, in addition to the resource methods: interface IDirect3DTexture8     DWORD SetLOD(DWORD);     DWORD GetLOD(void);     DWORD GetLevelCount(void);  // Get number of levels The texture interface serves as a syntactical reminder that only texture resources can be used as textures, since the IDirect3DDevice8::SetTextureStage method takes IDirect3DTexture8 interfaces. IDirect3DMipMap8 In addition to the IDirect3DTexture8 methods, a mipmap resource has: interface IDirect3DMipMap : public IDirect3DTexture8  HRESULT GetSurfaceLevel( UINT  Level,  IDirect3DSurface8  **pOut); //Handy shortcuts to lock a level: D3DSURFACE_DESC GetLevelDesc( UINT  Level); HRESULT LockRect( UINT  Level,  LPRECT  pRect,  D3DLOCKED_RECT  *pLockedRect,  DWORD  Flags); HRESULT UnlockRect( UINT  Level); void AddDirtyRect( RECT  *pRect) }; // IDirect3DMipMap8 IDirect3DMipVolume8 In addition to the IDirect3DTexture8 methods, a volume resource has: interface IDirect3DMipVolume8 : public IDirect3DTexture8  HRESULT GetVolumeLevel( UINT  Level,  IDirect3DVolume8  **pOut); //Handy shortcuts to lock a level D3DVOLUME_DESC GetVolumeDesc( UINT  Level); HRESULT LockBox( UINT  Level ,  D3DBOX  *pBox,  D3DLOCKED_BOX  *pLockedVolume,  DWORD  Flags); HRESULT UnlockBox( UINT  Level); void AddDirtyBox( D3DBOX  *pBox ) }; // IDirect3DMipVolume8 IDirect3DCubeMap8 In addition to the IDirect3DTexture8 methods, a cubemap resource has: interface IDirect3DCubeMap8 : public IDirect3DTexture8 // dwFaceType is one of the cubemap face descriptors defined // as part of BUFFER_UUSAGE HRESULT GetCubemapSurface( D3DCUBEMAP_FACES  FaceType,  UINT  Level,  IDirect3DSurface8  **pSurface); //Handy shortcuts to lock a level of a face: D3DSURFACE_DESC GetLevelDesc( UINT  Level); HRESULT LockRect( D3DCUBEMAP_FACES  FaceType,  UINT  Level,  LPRECT  pRect,  D3DLOCKED_RECT  *pLockedRect,  DWORD  Flags); HRESULT UnlockRect( D3DCUBEMAP_FACES  FaceType,  UINT  Level); void AddDirtyRect( D3DCUBEMAP_FACES  Face,  RECT  *pRect);  }; // IDirect3DCubeMap8 Geometry Resource Interfaces IDirect3DVertexBuffer8 interface IDirect3DVertexBuffer8 : public IDirect3DResource //Other methods TBD DWORD GetFVFormat(); // Methods for IDIRECT3DVertexBuffer8 D3DVERTEXBUFFER_DESC GetVertexBufferDesc(void);         HRESULT Lock( UINT  OffsetToLock,  UINT  SizeToLock,                BYTE  **ppData,       DWORD  Flags); HRESULT Unlock(void); }; // IDirect3DVertexBuffer IDirect3DIndexBuffer8 interface IDirect3DIndexBuffer8 : public IDirect3DResource D3DINDEXBUFFER_DESC GetIndexBufferDesc(void);         HRESULT Lock( UINT  OffsetToLock,  UINT  SizeToLock,                BYTE  **ppData,       DWORD  Flags); HRESULT Unlock(void); }; // IDirect3DIndexBuffer8 Buffer Interfaces IDirect3DSurface8 interface IDirect3DSurface8  // Allows navigation to the owning device object; for // example, in DX8, using IID_IDirect3DDevice8 would return // the IDirect3D interface for the object that created // this buffer. This method is rarely required, but is  // impossible to work around if missing. HRESULT GetDevice( REFIID  riid,  void  **ppOwner); // Private Data is the same as in DX7 HRESULT SetPrivateData ( REFGUID  refguid,  void  *pData,  DWORD  SizeOfData,  DWORD  Flags); HRESULT GetPrivateData ( REFGUID  refguid,  void  *pData,  DWORD  *pSizeOfData); HRESULT FreePrivateData( REFGUID  refguid); // Get access to the parent CubeMap or MipMap object // if this surface is child level of such. HRESULT GetContainer( REFIID  riid,  void  **ppContainer); // Methods for IDirect3DSurface8 D3DSURFACE_DESC GetSurfaceDesc(void); HRESULT LockRect( D3DLOCKED_RECT  *pLockedRect,  LPRECT  pRect,  DWORD  Flags); HRESULT UnlockRect(void); }; // IDirect3DSurface8 IDirect3DVolume8 interface IDirect3DVolume8  // Allows navigation to the owning device object; for // example, in DX8, using IID_IDirect3DDevice8 would return // the IDirect3D interface for the object that created // this buffer. This method is rarely required, but is  // impossible to work around if missing. HRESULT GetDevice( REFIID  riid, void  **ppOwner); // Private Data is the same as in DX7 HRESULT SetPrivateData ( REFGUID  refguid,  void  *pData,  DWORD  SizeOfData,  DWORD  Flags); HRESULT GetPrivateData ( REFGUID  refguid,  void  *pData,  DWORD  *pSizeOfData); HRESULT FreePrivateData( REFGUID  refguid); // Get access to the parent MipVolume object HRESULT GetContainer( REFIID  riid,  void  **ppContainer); // Methods for IDirect3DVolume8 D3DVOLUME_DESC GetVolumeDesc(void); HRESULT LockBox( D3DLOCKED_BOX  *pLockedVolume,  LPD3DBOX  *pBox,  DWORD  Flags); HRESULT UnlockBox(void); }; // IDirect3DVolume8 Enumerated Type: D3DCUBEMAP_FACES typedef enum { D3DCUBEMAP_FACE_POSITIVE_X, D3DCUBEMAP_FACE_NEGATIVE_X, D3DCUBEMAP_FACE_POSITIVE_Y, D3DCUBEMAP_FACE_NEGATIVE_Y, D3DCUBEMAP_FACE_POSITIVE_Z, D3DCUBEMAP_FACE_NEGATIVE_Z, D3DCUBEMAP_FACE_FORCE_DWORD = 0xffffffff } D3DCUBEMAP_FACES; Resource Creation API Reference Method: IDirect3DDevice8::CreateImageSurface Creates an Image Surface. Image surfaces are place-holder surfaces which cannot be used in any Direct3D operation except CopyRects. HRESULT IDirect3DDevice8::CreateImageSurface( UINT  Width, UINT  Height, D3DFORMAT  Format, IDirect3DSurface8 **ppSurface); Parameters Width,Height,Format The width height and format of the surface to be created. ppSurface Points to an IDirect3DSurface8 interface pointer that will be filled with a pointer to an interface to the created image surface. Development-Time Error Returns D3DERR_INVALID_CALL if ppSurface is invalid.  Run-Time Return Codes D3D_OK. Remarks Image surfaces are always D3DPOOL_SYSTEMMEM, and have only D3DUSAGE_LOCK. They can only be Locked or used in CopyRects. Method: IDirect3DDevice8::CreateMipMap Creates a MipMap resource HRESULT IDirect3DDevice8::CreateMipMap( UINT  Width, UINT  Height, UINT  Levels, DWORD  Usage, D3DFORMAT  Format, D3DPOOL  Pool, D3D_MULTISAMPLE_TYPE MultiSampleType, IDirect3DMipMap8 *ppMipMap); Parameters Width, Height Size of the top-level of the mipmap. The pixel dimensions of subsequent levels will be the truncated value of   of the previous level s pixel dimension (independently). Each dimension clamps at a size of 1 pixel (i.e. if the division by two results in zero, one will be taken instead). Format Format of all levels in the mipmap. Levels The number of levels in the mipmap. If this is zero, the runtime will generate all mipmap sublevels down to 1x1 pixels.  Usage D3DUSAGE_TEXTURE is automatically applied. Other allowed usages are (in any combination): D3DUSAGE_RENDERTARGET D3DUSAGE_DEPTHSTENCIL If either D3DUSAGE_RENDERTARGET or D3DUSAGE_DEPTHSTENCIL is used, the application should check that the device supports such operations via IDirect3D::CheckDeviceFormats. D3DUSAGE_LOCK D3DUSAGE_LOAD_ONCE The following hints are useful for devices that expose D3DDEVCAPS_SEPARATETEXTUREMEMORIES. Only one such hint may be specified. The Direct3D runtime does not enforce these hints. Such devices may not function if the texture is placed in a different stage. D3DUSAGE_TEXTURE_STAGE_0, D3DUSAGE_TEXTURE_STAGE_1, ... D3DUSAGE_TEXTURE_STAGE_8 The pool in which the mipmap should be placed. MultiSampleType If the mipmap is going to be used as a render target, then the application may specify a multisample type. Note that depth/stencil and color surfaces which have non-zero multisample types must have matching multisample types when SetRenderTarget pairs the surfaces.  Issue: How does the application determine if MS is supported on a texture? ppMipMap Points to an IDirect3DMipMap8 interface pointer that will be filled with a pointer to an interface to the created mipmap. Development-Time Errors Run-Time Return Codes D3DOK. Method: IDirect3DDevice8::CreateMipVolume HRESULT IDirect3DDevice8::CreateMipVolume(     UINT                Width,     UINT                Height,     UINT                Depth,     UINT                Levels,     DWORD               Usage,     D3D BUFFER_FORMAT  Format,     D3DPOOL    Pool,     IDIRECT3DMipVolume **ppMipVolume); Parameters Width, Height, Depth Size of the top-level of the mipvolume. The pixel dimensions of subsequent levels will be the truncated value of   of the previous level s pixel dimension (independently). Each dimension clamps at a size of 1 pixel (i.e. if the division by two results in zero, one will be taken instead). Format Format of all levels in the mipvolume. Levels The number of levels in the mipvolume. If this is zero, the runtime will generate all mipmap sublevels down to 1x1x1 pixels.  Usage D3DUSAGE_TEXTURE is automatically applied. Other allowed usages are (in any combination): D3DUSAGE_LOCK D3DUSAGE_LOAD_ONCE The following hints are useful for devices that expose D3DDEVCAPS_SEPARATETEXTUREMEMORIES. Only one such hint may be specified. The Direct3D runtime does not enforce these hints. Such devices may not function if the texture is placed in a different stage. D3DUSAGE_TEXTURE_STAGE_0, D3DUSAGE_TEXTURE_STAGE_1, ... D3DUSAGE_TEXTURE_STAGE_8 The pool in which the mipvolume should be placed. ppMipVolume Points to an IDirect3DMipVolume8 interface pointer that will be filled with a pointer to an interface to the created mipvolume. Method: IDirect3DDevice8::CreateCubeMap Creates a cubemap. A cubemap is a collection of six faces, each of which is represented by a set of successively downsampled surfaces (i.e. mipmapped). A cubemap is a flat collection of 6 X Levels surfaces, rather than a collection of six mipmaps. HRESULT IDirect3DDevice8::CreateCubeMap(     UINT              EdgeLength,     UINT              Levels,     DWORD             Usage,     D3DFORMAT    Format,     D3DPOOL           Pool,     IDirect3DCubeMap  **ppCube); EdgeLength Size of the edges of all the top-level faces of the mipmap. The pixel dimensions of subsequent levels of each face will be the truncated value of   of the previous level s pixel dimension (independently). Each dimension clamps at a size of 1 pixel (i.e. if the division by two results in zero, one will be taken instead). Format Format of all levels in all faces of the cubemap. Levels The number of levels in each face of the cubemap. If this is zero, the runtime will generate all mipmap sublevels down to 1x1 pixels for each face.  Usage D3DUSAGE_TEXTURE is automatically applied. Other allowed usages are (in any combination): D3DUSAGE_RENDERTARGET D3DUSAGE_DEPTHSTENCIL If either D3DUSAGE_RENDERTARGET or D3DUSAGE_DEPTHSTENCIL is used, the application should check that the device supports such operations via IDirect3D::CheckDeviceFormats. D3DUSAGE_LOCK D3DUSAGE_LOAD_ONCE The following hints are useful for devices that expose D3DDEVCAPS_SEPARATETEXTUREMEMORIES. Only one such hint may be specified. The Direct3D runtime does not enforce these hints. Such devices may not function if the texture is placed in a different stage. D3DUSAGE_TEXTURE_STAGE_0, D3DUSAGE_TEXTURE_STAGE_1, ... D3DUSAGE_TEXTURE_STAGE_8 The pool in which the mipmap should be placed. MultiSampleType If the mipmap is going to be used as a render target, then the application may specify a multisample type. Note that depth/stencil and color surfaces which have non-zero multisample types must have matching multisample types when SetRenderTarget pairs the surfaces.  Issue: How does the application determine if MS is supported on a texture? ppCube Points to an IDirect3DCubeMap8 interface pointer that will be filled with a pointer to an interface to the created cubemap. Development-Time Errors Run-Time Return Codes D3DOK. Remarks Unlike previous versions, DirectX8 does not allow cubemaps to have missing faces. Also, cubemaps must be the same pixel size in all three dimensions. CreateVertexBuffer Described fully in the  Vertex Buffers  section. CreateIndexBuffer Described fully in the  Index Buffers  section. CreateRenderTarget HRESULT IDIRECT3DDevice8::CreateRenderTarget(     UINT               Width,     UINT  Height,     DWORD             Usage,     D3DFORMAT    Format,     D3DMULTISAMPLE_TYPE MultiSample,     IDIRECT3DSurface8  **ppSurface); Parameters MultiSample Specifies the anti-aliasing type for this render target. This type must match any color-buffer surface when both surfaces are passed to SetRenderTarget. Return Values Remarks This function creates a surface with at least the D3DUSAGE_RENDERTARGET. The only other legal usages is D3DUSAGE_LOCK. The pool of the render target is always POOL_DEFAULT. Manipulation of Resources Historical Note The UpdateTexture API replaces the artwork-transportation uses of the removed Blt API. Method: IDirect3DDevice8::UpdateTexture HRESULT IDirect3DDevice8::UpdateTexture( IDirect3DTexture8 * pSrc,  IDirect3DTexture8 *pDest); This function does a straight copy of the bits from one texture to another. It fails if the textures are of different types, and also if their top-level buffers are of different size. If the destination texture has fewer levels than the source, then only the matching levels are copied. If the source texture has dirty regions, then the copy may be optimized by restricting the copy to just those regions. It should be noted that it is explicitly not guaranteed that only those bytes marked dirty will be copied. Dirty Regions Applications can optimize what subset of a texture is copied by specifying dirty regions on the textures. Only those regions marked  dirty  are copied by UpdateTexture (but the dirty regions may be expanded to optimize alignment).  When a texture is created it is considered to be  all dirty . Only four operations affect the dirty state of a texture:  Adding a dirty region to the texture. Locking some buffer in the texture. This operation will add the locked region as a dirty region. The application can turn off this automatic dirty region update if it has better knowledge of the actual dirty regions. Using the texture as a destination in UpdateTexture. This marks the destination texture as  all dirty Using the texture as a source in UpdateTexture. This clears all the dirty regions on the source texture. Dirty regions are set on the top level of a mipmapped texture, and UpdateTexture may extend the dirtied region down the mip chain in order to minimize the number of bytes copied for each sublevel. Note that sublevel dirty region coordinates are rounded  outwards : meaning that their fractional parts are rounded towards the nearest edge of the texture. Since each type of texture has different types of dirty regions, there are methods on each texture type. 2D textures use dirty rectangles, and volume textures use boxes. IDirect3DVolume::AddDirtyBox(D3DBOX *pBox ) IDirect3DMipMap::AddDirtyRect(RECT *pRect) IDirect3DCubeMap::AddDirtyRect(D3DCUBEMAP_FACES Face, RECT *pRect);  Passing NULL for the pRect or pBox parameters expands the dirty region to cover the entire texture.  Each Lock method can take D3DLOCK_NO_DIRTY_UPDATE, which prevents any changes to the dirty state of the texture. Applications should use this flag when they have further information about the true set of regions changed during the Lock. Application authors should note that a lock or copy to just a sublevel (i.e. without locking/copying to the top level) of a texture does not update the dirty regions for that texture. Applications assume responsibility for updating dirty regions when they lock lower levels without locking the topmost level. Implementation Note The Direct3D texture manager uses this scheme. In addition, the manager must mark a texture as all dirty (AddDirty*(NULL))  when it is evicted. Method: IDirect3DDevice8::CopyRects CopyRects copies rectangular subsets of pixels from one surface to another. No stretch, color key, alpha blend or format conversion is supported. HRESULT IDirect3DDevice8::CopyRects( IDirect3DSurface8 *pSourceSurface, LPRECT pSourceRects, CountOfSourceRects, IDirect3DSurface8 *pDestSurface, LPPOINT pDestPoints); Parameters pSourceSurface, pDestSurface The source and dest surfaces. These surfaces must be different surfaces. pSourceRects, CountOfSourceRects, pDestPoints Pointer to an array and count of rectangles to be transferred. Each rectangle will be transferred to the destination surface, with its top-left pixel at the position identified by the corresponding element of the pDestPoints array. If the pDestPoints value is NULL, then the rects are copied to the same offset (i.e. same top/left location) as the source rectangle. Remarks Rects are clipped against the source and dest surfaces automatically. The format of the two surfaces must match, but they can be different sizes. Development-Time Error Codes Run-Time Error Codes D3D_OK. Allowing mutable surface formats Many ISVs have asked us for a cheap way to change the format of an existing video memory surface without destroying and recreating it. Obviously, the surface could only mutate between two formats that consume the same amount of memory. The DX7 driver model gives us a mechanism whereby this should be achievable. CreateSurface is done in two passes: one which calls the driver to create and allocate the surface, and then a second that tells the driver to associate a runtime-owned handle with the surface. We could do the second operation more than once, and associate several different handles with the same fpVidMem, one for each format. Internally the driver will allocate one driver-owned surface object per format. The SetFormat call would then just swap driver handles in the surface object and so should be very very lightweight indeed. DX8 suits this scenario since DX8 surfaces are state-free. If a surface has any state, then clearly we would have to duplicate driver set-state calls for each of the handles. Blindly doing this on top of DX7 drivers isn t a great idea. We could add an internal caps bit that allows drivers to say they work well in this scenario, and/or develop a list of known-good DX7 drivers. If it turns out that we need a driver rev to do this anyway, then we might just as well add a SetFormat DP2 token... Issue: We could have the SetFormat method either fail or destroy/recreate when the driver isn t compatible. Our choice.  DDI Issues We would inaugurate a new DP2 token that has two fields: handle and new usage. Perhaps we should define a range of DP2 tokens that are to be considered  hints , such as SetUsage, that the driver/device can ignore. (If we do this, we should add a WHQL test to ensure that the driver does indeed ignore all undefined hint tokens!) Resource Structures  /* Vertex Buffer Description */ typedef struct _D3DVERTEXBUFFER_DESC     D3DFORMAT          Format;     D3DTYPE            Type;     DWORD              Usage;     D3DPOOL            Pool;     UINT               Size;     DWORD              dwFVF; } D3DVERTEXBUFFER_DESC;  /* Index Buffer Description */ typedef struct _D3DINDEXBUFFER_DESC     D3DFORMAT          Format;     D3DTYPE            Type;     DWORD              Usage;     D3DPOOL            Pool;     UINT               Size; } D3DINDEXBUFFER_DESC;  /* Surface Description */ typedef struct _D3DSURFACE_DESC     D3DFORMAT          Format;     D3DTYPE            Type;     DWORD              Usage;     D3DPOOL            Pool;     UINT               Size;     UINT               Width;     UINT               Height; } D3DSURFACE_DESC; typedef struct _D3DVOLUME_DESC     D3DFORMAT          Format;     D3DTYPE            Type;     DWORD              Usage;     D3DPOOL            Pool;     UINT               Size;     UINT               Width;     UINT               Height;     UINT               Depth; } D3DVOLUME_DESC; /* Structure for LockRect */ typedef struct _D3DLOCKED_RECT     INT                 Pitch;     LPVOID              pBits; } D3DLOCKED_RECT; /* Structures for LockBox */ typedef struct _D3DBOX     UINT                left;     UINT                top;     UINT                right;     UINT                bottom;     UINT                front;     UINT                back; } D3DBOX; typedef struct _D3DLOCKED_BOX     INT                 RowPitch;     INT                 SlicePitch;     LPVOID              pBits; } D3DLOCKED_BOX; Resource Management Direct3D for DirectX8 offers a resource manager similar in capability to the texture manager of previous releases.  An Overivew of Management Devices can typically access less texture memory than the application wishes to consume over its lifetime.  Resource Management  is that process whereby resources are  promoted  from system-memory storage to device-accessible storage and  evicted , or discarded from device-accessible storage. The Direct3D runtime has its own management algorithm based on a  least recently used  (or LRU) scheme. Direct3D switches to a most-recently used scheme when it detects that more resources than can coexist in device-accessible memory are used within one frame (between BeginScene and EndScene). In additon to this standard management scheme, some drivers have the ability to assume management tasks.  Managed resources usually incur the storage cost of an extra copy in non-volatile memory. In the particular case of Vertex Buffers, there is no performance gain to be realized by allowing the driver to own the transfer of data from system memory to device-accessible memory. Rapidly-changing vertex buffers are thus more efficient in terms of speed and system memory consumption when stored and accessed directly in device-accessible memory rather than in a managed pool. Invoking Management An application expresses its wish for managed resources by passing a special value for the   argument of the IDirect3DDevice8 creation methods. A value of D3DPOOL_MANAGED means that the resource will be managed. There are slight differences in behaviour between runtime-managed and driver-managed resources. If the device was created without the D3DCREATE_DISABLE_DRIVER_MANAGEMENT  flag, then all resources will follow the driver managed rules (even if the driver cannot perform management tasks): Driver-managed resources are considered to be video memory and must be destroyed before Resize can be called. Driver-managed resources can return D3DERR_DEVICE_LOST from Lock. (These points are reiterated and further explained in the  Lost Devices  section.) If the D3DCREATE_DISABLE_DRIVER_MANAGEMENT flag is present, then all managed resources are Direct3D runtime-managed and follow these rules: The runtime will manage allocation of video memory and promotion of resources thereto using its own LRU scheme. In over-committed scenarios (wherein more texture storage is requested than can actually be promoted to device-accessible memory at once) the management switches to a most-recently-used scheme. Direct3D-managed resources are never  , i.e. operations thereon never return D3DERR_DEVICE_LOST. Direct3D-managed resources persist through transitions between the lost and operatonal states of the device. The device can be restored (via Resize) and such resources will continue to function normally without having to be reloaded with art. Note that Resource Management is not supported for all types and usages; for example, objects that have D3DUSAGE_RENDERTARGET are not supported. In DX8, Management is now supported for vertex and index buffers as well as the texture types. Management is not recommended for objects whose contents are changing with very high frequency. Resource Management APIs IDirect3DResource Properties Many objects have the following management-oriented method DWORD SetPriority(DWORD); // returns previous priority DWORD GetPriority(void); // returns current priority and in addition, the texture types: CubeMaps, MipMaps and MipVolumes support the LOD functionality from DX7. DWORD IDirect3DMipTexture::GetLOD(void); DWORD IDirect3DMipTexture::SetLOD(void); //returns previous LOD These methods operate in the same manner as the analogous surface methods from previous releases Method: IDirect3DDevice8::TextureManagerDiscardBytes This method invokes the texture manager to free up memory in a particular pool. The texture manager will free up allocations until the number of target bytes is reached. The manager follows an LRU/Priority technique. HRESULT IDirect3DDevice8::TextureManagerDiscardBytes( D3DPOOL  Pool,  DWORD  Bytes); Parameters The pool in which the manager should discard bytes. ISSUE: Should this be explicit local, nonlocal, etc (i.e. not DEFAULT)? Bytes The number of bytes to discard. If zero, then the manager should discard all bytes. Manipulating Surface Contents Direct3D for DirectX8 provides a targeted API for moving rectangles of pixels between surfaces.  Historical Notes The CopyRect API replaces the artwork-transportation uses of the removed Blt API. Method: IDirect3D8::CopyRect CopyRect moves a rectangular subset of pixels from one surface to another. No stretch, color key, alpha blend or format conversion is supported. HRESULT IDirect3D8::CopyRect( IDirect3DSurface  *pDestSurface, LPRECT pDestRect, IDirect3DSurface *pSourceSurface, LPRECT pSourceRect); The Mouse Cursor API The well-motivated removal of direct primary surface access necessitates the addition of an API to manipulate a mouse cursor.  Discussion of Functionality The mouse cursor methods in DirectX8 allow the application to specify a color cursor by providing a surface that contains an image. The system will guarantee that this cursor will be updated at at least half the display refresh rate if the application s frame rate is slow, but never more frequently than the display refresh rate. The mouse cursor position is slaved to the system cursor (appropriately scaled for the current display mode spatial resolution), but can be moved explicitly by the application. (This is analogous to the behavior of the win32-supported system mouse cursor.) Direct3D guarantees that the mouse will appear either by hardware implementations or by the Direct3D runtime performing hardware-accelerated blt operations at Present time and/or at specific intervals in order to guarantee the half-refresh rate cursor update rate. Method: IDirect3DDevice8::SetCursorProperties Sets properties for the cursor. HRESULT IDirect3DDevice8::SetCursorProperties( UINT   xHotSpot, UINT   yHotSpot, IDirect3DSurface8 *pSourceBitmap); Parameters xHotSpot, yHotSpot This is the offset into the cursor (in pixels from the top-left corner) that is considered to be the center. When the cursor is given a new position, the image is drawn at an offset from this new position determined by subtracting the hotspot coordinates from the position. pSourceBitmap pSourceSurface has to point to an 8888 ARGB surface (format D3DFMT_A8R8G8B8). The contents of this surface will be copied (and potentially format-converted) into an internal buffer from which the cursor is displayed. The dimensions of this surface must be less than the dimensions  of the current display mode, and must be a power of two in each direction (although not necessarily the same power of two). For DX8, the alpha channel must be either 0.0 or 1.0. In DX9 we may open up other alpha values... Return Values TBD, D3D_OK Remarks The application can determine what hardware support is available for cursors by examining appropriate members of D3DCAPS8. See the documentation of that structure for more details. Typically, hardware will support only 32x32 pixel cursors. Additionally, when windowed, the system may only support 32x32 pixel cursors. In this case, the SetCursorProperties call will still succeed, but the cursor may be shrunk to this size (the hotspot will be scaled appropriately). See Also IDirect3DDevice8::SetCursorPosition, IDirect3DDevice8::ShowCursor , D3DCAPS8 Method: IDirect3DDevice8::SetCursorPosition void IDirect3DDevice8::SetCursorPosition(    UINT     UINT  y);     //screen space coordinates Parameters The new position of the cursor in screen-space coordinates. When windowed, this means desktop coordinates. When fullscreen, this means back buffer coordinates (which Direct3D will then appropriately scale to the current display mode, if necessary). The cursor image will be drawn at this position minus the hotspot offset specified in IDirect3DDevice8::SetCursorProperties. If the cursor has been hidden IDirect3DDevice8::ShowCursor, then the cursor is not drawn. Return Values None. This function cannot fail. See Also IDirect3DDevice8::SetCursorProperties, IDirect3DDevice8::ShowCursor Method:IDirect3DDevice8::ShowCursor The ShowCursor function displays or hides the cursor.  BOOL IDirect3DDevice8::ShowCursor( BOOL bShow ); // cursor visibility flag   Parameters bShow If bShow is TRUE, the cursor is shown. If bShow is FALSE, the cursor is hidden. Return Values The return value specifies whether the cursor was previously visible. Remarks This function is independent from the Win32 cursor function of the same name. Applications should use either Win32 cursors or Direct3D cursors exclusively, and not attempt to mix them. See Also IDirect3DDevice8::SetCursorProperties, IDirect3DDevice8::SetCursorPosition Video Memory Management GetAvailableTextureMem Method:IDirect3DDevice8::GetAvailableTextureMem Returns the amount of texture memory available in the given pool. UINT IDirect3DDevice8:: GetAvailableTextureMem ( D3DPOOL Pool); Parameters The pool class for which available texture memory statistics should be returned. Only one of the following values may be passed: D3DPOOL_LOCALVIDMEM D3DPOOL_NONLOCALVIDMEM D3DPOOL_DEFAULT Return Value The function returns an estimate of the available texture memory for the given pool and usages, or zero if the pool is illegal. Remarks This returned value is rounded to 2 significant digits in its binary representation. This is done to reflect the fact that video memory estimates are never precise due to alignment and other issues that affect consumption by certain resources. Applications can use this value to make gross estimates of memory availability to make large-scale resource decisions such as how many levels of a mipmap to attempt to allocate, but cannot use this value to make small-scale decisions such as if there is enough memory left to allocate one more resource. ISSUE: What to do on UMA systems? localvidmem is clearly 0. Should nonlocal be some fixed small amount, like 8 megs? What other number could be meaningful? Historical Note on GetAvailableVidmem In the past, this function has been problematic to interpret, since it was never accurate. The amount of video memory you can actually allocate to textures depends on alignment and pitch restrictions, so it s never guaranteed that you can consume all these bytes. The DCTs have a test that attempts to do so, but has been continually fudged to accomodate reasonable but increasingly unpredictable alignment restrictions. Despite this, a gross approximation to the available vidmem is useful for applications to make first-cut decisions at texture memory allocation. Since the app knows its texture working set to the byte, it might decide, for example, that on an 8 meg card it will discard all its top-level mipmaps. Previously, GetAvailableVidmem also returned a number representing the total amount of a given type of memory, regardless of whether it could ever be available. This was difficult to define and fairly useless to the application, since there was no way the application could know how to free up that other memory if, for example, it was consumed by other applications. On the contrary, applications always know how much memory they have already consumed (within a certain error at least) so can always add this value to the FreeMemory value to derive a fairly meaningful estimate of total accessible video memory. This function cannot reasonably return the amount of physical memory on the adapter, because there are many architectures that make the interpretation of this value very difficult. These architectures are: UMA systems. These devices may have no separate memory at all, but can consume system memory. The amount of  video  memory an application may consume depends heavily on its own working set, and Direct3D cannot know this number. Seconday drivers. Traditional display adapters subtract the amount of memory consumed by the Windows desktop surface from the amount of memory reported. This is sensible, since that memory has to be allocated to the display frame buffer. Secondary drivers, on the other hand, don t have a desktop frame buffer, and so do not subtract this value first, but still need to consume space for the primary surface when they are used. Applications thus need to know which type of adapter they are using before they can reliably transform the amount of physical memory available into the amount available for resources. Stacked drivers. Some parts work by storing all textures in their own memory, but write their output into the actual display card. These cards have issues similar to secondary drivers, but do not subtract the displayed frame buffer from their texture memory, even when they are being actively used. Again, the application needs to understand these parts before it can accurately calculate how much texture memory will be available. Multisampling. When full-scene anti-aliasing is enabled, the display buffers may consume an arbitrarily larger amount of video memory than a naive calculation would suggest. Furthermore, some parts will consume more or less for the primary surface depending on whether the down-sampling is done at Present or scan-out time. This datum isn t even available through the DX8 API. Lost Devices Historical Note In DirectX 1 through 7, DirectDraw surfaces could become  , meaning that the memory they represented had been deallocated and the contained image destroyed. The application was responsible for detecting this situation and repairing it by re-allocating the memory, or  restoring  the surfaces, and then re-filling the surface contents.  Two observations motivate a change in this behavior for DirectX8: Various considerations have demonstrated that it may not be possible to guarantee restorability for surfaces in the future. Fine-grained resource loss (i.e. per-surface) necessitates that the application have many hard-to-test (and likely untested) code paths responding to resource loss. DirectX8 moves the concept of   up the object hierarchy to the device. The device becomes lost, but resources do not. DirectX8  hides  device loss as much as possible, enabling and encouraging the application to have but one device-loss error path. What is a Lost Device? A Direct3D device has two states: operational and lost. The operational state is the normal state of the device wherein it executes and presents all rendering as expected. The device makes a transition to the lost state when some event (such as loss of keyboard focus in a fullscreen application) causes rendering to become impossble. The lost state is characterized by silent failure of all rendering operations (meaning that their return codes indicate success), and an error code (D3DERR_DEVICE_LOST) returned by IDirect3DDevice8::Present. What Causes a Lost Device? The full set of circumstances that can cause a device to become lost is intentionally not specified. Some typical examples include loss of focus such as when the user presses alt-tab, or a system dialog is brought up. Devices can also be lost when power management events occur, or when another application assumes fullscreen operation. How Does an Application Respond to a Lost Device? The application will query the device to see if it can be restored into the operational state. If not, the application will typically wait until the device can be restored. If the device can be restored, the application must ready the device by destroying all video memory resources and any additional swap chains, then Resize it as the application sees fit. Resize is the only method that will have a real effect when the device is lost, and is the only method by which an application can return the device from lost to operational state. Resize will fail unless all video memory resources have been destroyed. The high-frequency calls of Direct3D (with a few exceptions documented below) do not return any information about whether the device has been lost or not. The application can continue to call DrawPrimitive etc. without receiving notification of device loss. Internally, these operations will be discarded until the device is Resized into the operational state. The application can decide what to do upon device loss by consulting the IDirect3DDevice8::TestCooperativeLevel method.  If the method returns D3D_OK, then the device is operational, and vice-versa. If the device is lost but cannot be restored at the current time, the return value will be D3DERR_DEVICE_LOST. This would be the case, for example, when a fullscreen device has been alt-tabbed out of focus. Applications should respond to this method by pausing until the device can be Resized again. This situation will be indicated by a D3DERR_DEVICE_NOT_RESIZED return from TestCooperativeLevel. If the device is lost, and can be restored, then the return code from TestCooperativeLevel is D3DERR_DEVICE_NOT_RESIZED (the return code from Present will still be D3DERR_DEVICE_LOST). Applications should respond to this return code by attempting to Resize the device and un-pausing the application. In all cases, destroying video memory resources (any resource or additional swap chain with D3DPOOL_LOCALVIDMEM, D3DPOOL_NONLOCALVIDMEM or D3DPOOL_DEFAULT) is a prerequisite to calling IDirect3D::Resize (even if the device has not been lost). Creating Resources in Lost Devices Resources can consume video memory. Since a lost device has been disconnected form the video memory owned by the adapter, it is not possible to guarantee allocation of video memory when the device is lost. Hence, all resource creation methods are implemented to succeed the call (i.e. return D3D_OK) but do in fact only allocate dummy system memory. Since any video memory resource has to be destroyed before the device is resized, there will be no issue of over-allocating video memory. These dummy surfaces allow lock, copy etc. to continue to appear to function until the application calls Present and discovers the device has been lost. Driver-Managed Resources and Lost Devices Driver-managed resources present a problem. Since the driver owns the storage associated with the resource and the driver is by definition inaccessible when the device is lost, the Direct3D runtime has no ability to offer continued access to such resources. When resources are driver-managed, then, they are considered to be video-memory, meaning that they must be destroyed before Resize can be called. Additionally, driver-managed resources can fail Lock as explained below in the section entitled  Lost Devices and Retrieved Data Lock and Lost Devices Internally, Direct3D for DirectX8 does enough work that Lock will still succeed after a device has been lost. It is not guaranteed that any video memory resource s data will be accurate during these locks, but it is guaranteed that no error code will be returned. This allows applications to be written without concern for device loss at Lock time. One caveat is covered in the following paragraph. Lost Devices and Retrieved Data (Two scenarios that force applications to notice lost devices) DirectX8 allows applications to copy generated (or even previously written) images from video memory resources into non-volatile system memory resources. Since the source images of such transfers may be lost at any time, the Direct3D runtime is faced with three options: Allow such copy operations to fail when the device is lost and thus break the promise of hiding device loss. Disallow such copies and reduce functionality. Hide loss of the source image in the usual manner, and impress upon application writers the need to re-copy any such images after loss of a device (since it cannot be guaranteed that the device was lost before or after the image was retrieved). DirectX8 chooses the first option: Copy operations (UpdateTexture or CopyRects) can return D3DERR_DEVICELOST when the source object is volatile (D3DPOOL_LOCALVIDMEM, D3DPOOL_NONLOCALVIDMEM, D3DPOOL_DEFAULT or D3DPOOL_MANAGED when driver management is enabled) and the destination object is non-volatile (D3DPOOL_SYSTEMMEM or D3DPOOL_MANAGED when driver management is disabled).  In addition to the problem of lost source images when copying, an application is also allowed to lock a driver-managed resource. Since such resources can be inaccessible when the device is lost, Direct3D for DirectX8 also allows such Lock calls to fail with D3DERR_DEVICELOST. These two cases are the only instances of D3DERR_DEVICELOST outside of Present and TestCooperativeLevel. Other 3D state and Lost Devices As mentioned previously, all video memory must be freed before a device can be resized out of a lost state. In addition to this, other pieces of state are destroyed by the transition from lost back to operational. Specifically: All vertex and pixel shaders are destroyed All lights are destroyed All textures set into the texture pipeline become unset All render states revert to their default state (the state they would have had when the device was first created). These facts encourage applications to develop a single code path to respond to device loss. This code path is likely to be very similar if not identical to the code path taken to initialize the device at start-up. Device Loss State Diagram This diagram illustrates how the device s lost state evolves in response to inputs from the system (external loss events) and the application (resize/allocation/destruction of video memory). In this diagram  vidmem  means any additional swap chain or any resource or surface that consumes D3DPOOL_DEFAULT, D3DPOOL_LOCALVIDMEM, or D3DPOOL_NONLOCALVIDMEM.  Not enough vidmem  means not enough storage for the implicit swap chain. Appendix: Debugging support Easy Runtime Debug/Release Switching Direct3D for DirectX8 will be distributed in two versions in the DirectX SDK: release and debug. Applications will always link against the release build, but a registry setting will cause the release build to load and substitute the debug build for itself.  The registry setting will be controlled through the DirectX SDK control panel and/or the dxdiag diagnostic tool. The debug build will immediately output a banner declaring itself and its version number. Appendix:A Discussion of Retired Functionality This section highlights and discusses motivations for removing functionality that continues to be supported on DX7 but deemed unnecessary or problematic in DX8. Front-Buffer Rendering and the  Primary Surface The original design of DirectDraw has been an obstacle to many people: IHVs find that exposing a particular implementation of a graphics display limits their ability to innovate in hardware design. A good and highly relevant example is full-scene anti-aliasing.  OS designers (that s us) are plagued by applications  ability to Lock the primary surface as we try to evolve the Window manager away from the desktop metaphor towards more dynamic presentation schemes, and even struggle to keep different applications from harming each other s displays on the shared desktop. These and other similar considerations have prompted us to strongly hide the primary surface in DirectX 8. The API doesn t even have such a notion, insofar as there is no way to create an object that represents the primary surface. The primary is considered to be a piece of state, private and internal to the display adapter. Now, the removal of the primary surface does impose some hardships on applications. We have received consistent feedback that applications need to be able to manipulate the front buffer in order to achieve: Custom mouse pointers Immediate display of primitives for debugging The former is hard enough to achieve that Direct3D for DirectX8 will offer a mouse cursor manipulation API. The latter will be achievable through a registry setting (along with other debug aids). The Blt API It was observed that the Blt API serves three purposes in current DirectX applications: High-frequency rectangle primitive Manipulation/Download of Artwork Presentation of rendered frames The DX8 API has been designed to offer better alternatives to Blt that accomplish these tasks. Blt as a High Frequency Rectangle Primitive The simple observation is that in hardware relevant to the DirectX8 release timeframe, DrawPrimitive is a much more effective high frequency primitive than Blt. There are various reasons such as: The Blt DDI does not participate in the token-stream architecture of Direct3D. This causes pipeline stalls and synchrony. Blt has hundreds of poorly-defined modes of operation. Blt doesn t filter. Blt doesn t rotate, skew, affine transform, blend, compare Depth, stencil etc. Direct3D for DirectX8 makes the assertion that modern applications can achieve all their high-frequency needs with DrawPrimitive. To further promote this pathway, the D3DX library offers a Blt-like API that drives the DrawPrimitive API. Manipulation/Download of Artwork Blt is ideally suited to this application. In DX8, the subset of Blt s functionality that is suited to moving art around is found in the IDirect3DDevice8::CopyRect method. The utility of a rect copy API is retained, while removing the poorly defined and fragile complexity of the original Blt. In addition, the new interface will more closely match the ability of hardware to effectively download textures asynchronously. Blt as a Presentation Primitive ing a back buffer to the client are of a window was unnecessarily complex in DirectX 7. The application had to create a clipper object, associate and hWnd with the clipper, then associate the clipper with the primary surface. Direct3D for DirectX8 deletes the clipper object, and offers the IDirect3DDevice8::Present method to achieve the same result without the intermediate steps. Retained uses for Blt The Blt DDI continues to be used in DirectX8 as the primary mechanism for moving large rectangles of pixels on a per-frame basis, i.e. as the mechanism behind the copy-oriented Present operations. Blt also allows the runtime to sidestep two driver transitions (lock and unlock) in favor of one when performing texture download. Lock of Video Memory Textures Direct access to video memory textures is illegal in DX8. Direct access to other resource types and to back buffers is still allowed. The motivations for this choice are: Some drivers fail texture locks anyway Some drivers allocate system memory on Lock to prevent pipeline stalls. Writing across the bus is slow. Reading across the bus is very very slow. Reading from AGP is very slow. Hardware likes to reorder textures to gain better 2D locality. This operation has to be undonde on lock and redone on unlock. Very expensive. Many of today s devices hide lock issues by returning pointers to system memory buffers and performing potentially very expensive operations on unlock. These buffers are sometimes persistent, resulting in enormous memory consumption per surface. The alternative promoted in DX8 is that applications lock only system memory surfaces, and the driver own transporting the contents to video memory (even thought the app can still own allocation of that vidmem and choice of transport time/source/dest). This enables re-ordering by hardware, removes pipeline stalls. Ability to turn stereo on and off arbitrarily In DX7, stereo is enabled via a Flip flag, and can thus change rapidly. In DX8, the stereo-ness is a property of the display mode. Ability to specify user-allocated memory for surfaces. This capability is currently not part of the DX8 API.  Palettized Render Targets IHVs and ISVs have indicated that supporting rendering directly to palettized formats is not part of their plans. Synchronizing Palettes when there are multiple devices is very complex and makes it hard to deliver consistency across different OS Color-Keyed Surfaces Color keys are now render states. Surfaces no longer maintain color key as a piece of internal state. Arbitrary Back Buffer Formats In DX8, render target formats are restricted to: D3DFMT_X1R5R5B5 D3DFMT_R5G6B5 D3DFMT_X8R8G8B8 D3DFMT_A8R8G8B8 IHVs have indicated that these are the only formats that they plan to support in the forseeable future. Adapter/Driver restrictions DX8 turns off all HAL hardware for any driver that exposes the DX7 caps bit DDCAPS_BANKSWITCHED DX8 turns off the 3D HAL for any driver that does not support the DrawPrimitives2 entry point. All DX6+ drivers expose this entry point. Ability to alter a surface s format/size etc. after creation I.e. SetSurfaceDesc is not supported. Since drivers are optimizing their performance by remembering surface properties when the surface is created, it would significantly increase their complexity to support these changes. In most cases, few applications needed this functionality; and we have reduced the performance costs involved in just creating a new surface. Detached multimon secondary displays Providing consistent and reliable support for this feature is difficult. Applications are directed towards implementing support for Attached multi-mon situations. Multiple concurrent locks on a surface Only one lock per surface at any one time. The complexity involved in keeping track of all possibily locks and whether locks were overlapping did not justify the few cases where this could be useful. By reducing the complexity, we are able to reduce the overhead and hence, improve the performance of this API. Flippable mip-maps Complexity was not justified by the limited utility that this feature provided. Piece-wise creation of complex surface chains API-visible attached surfaces no longer exist. Not only is the overhead of our implementation reduced, we have also eliminated complex coding paths that applications would have to write and debug. QueryInterface for older interfaces Supporting old interfaces through QueryInterface just doesn t make sense considering the vast changes to the object model. Many of the older methods and interface/object relationships don t map onto the new interfaces in a compatible way. Overlays and VideoPorts This capability is currently not part of the DX8 API. Applications that need this functionality are directed to to use the DX7 interfaces. Support for video will very likely be overhauled to synchronize with new hardware support, and new software requirements in the future. PAGE   PAGE   IDirect3D CreateMipMap SetTexture IDirect3DSurface8 (render target) Vertex/Index Buffers CreateMipVolume IDirect3D Volume8 IDirect3D CubeMap8 CreateCubeMap SetRenderTarget IDirect3DSurface8 (Faces,Levels) CopyRects IDirect3DSurface8 (Mip Levels) IDirect3D MipMap8 CreateDepthStencilSurface IDirect3D Volume8 Texture Creation Surface Creation Surface Manipulation Texture Usage Resource Manipulation UpdateTexture CreateVertexBuffer IDirect3D VertexBuffer8 IDirect3D IndexBuffer8 IDirect3DSwapChain8 IDirect3DSurface8 (Back Buffer) CreateIndexBuffer IDirect3DSurface8 (Depth/Stencil) CreateRenderTarget OPERATIONAL (Vidmem allocated) (Vidmem allocated) External Loss Event Resize OPERATIONAL (No Vidmem allocated) (No Vidmem allocated) Allocate Vidmem Destroy Vidmem Destroy Vidmem Allocate Vidmem Attempting Resize External Loss Event External Loss Event Not enough vidmem Resize Enough vidmem Resize Resize CreateImageSurface IDirect3DSurface8 (Image Surface) D<fgH D<fgH D<fgH D<fgH D<fgH D<fgH |wrmhc^Y D<fgH D<fgH D<fgH D<fgH D<fgH D<fgH D<fgH D<fgH D<fgH D<fgH D<fgH D<fgH D<fgH D<fgH k<&gH }xsnid_Z h#l<& h#l<& ~ytoje`[ |wrmheb_ zupmhc ~ytnkhc^ ~ytojgd ~ytqlifc ~{xurmje h l<& h l<& h l<& zupmjgda^ h"D<f h"D<f hLD<f h"D<f h!l<& h l<& h l<& h l<& |yvspmj hLD<f h"D<f h"D<f h"D<f hLD<f hLD<f hLD<f hOD<f hOD<f hOD<f hOD<f zupkf hkD<f hjD<f hdD<f hgD<f h%l<& hdD<f heD<f hdD<f heD<f h%l<& {vqlgb]X hjD<f hiD<f hhD<f hgD<f hgD<f hgD<f h&l<& heD<f h%l<& hlD<f hdD<f hdD<f hdD<f xixZKxKZxK hrD<f hqD<f hpD<f hnD<f hmD<f hlD<f hlD<f hlD<f hlD<f hkD<f hjD<f zwtnkhc^Y heD<f heD<f hmD<f hoD<f hnD<f hqD<f zwtqnkhe h&l<& h"l<& ~{xurolifc` |ytqnkhe hyD<f hyD<f dhyD<fgH dhyD<fgH dhyD<fgH D<fgH D<fgH D<fgH dhzD<fgH dhzD<fgH D<fgH D<fgH dhyD<fgH {vqmh D<fgH D<fgH D<fgH D<fgH zupkfa\W ~{xupk |yvsnhe hxD<f D<fgH D<fgH D<fgH D<fgH hxD<f ~ytojgb_Z |wrmheb tojgd_ zupkfc]X hsD<f hsD<f hsD<f {vqlifc hHl<& hwD<f hsD<f hsD<f hsD<f hsD<f }xsnid_Z hMl<& hLl<& hMl<& hLl<& hKl<& hLl<& hRl<& hKl<& hJl<& hIl<& hHl<& hHl<& eyecXe hNl<& hOl<& hOl<& hml<& hml<& hll<& hNl<& hNl<& hMl<& hMl<& hLl<& hHl<& hLl<& hMl<& hLl<& hLl<& hLl<& hMl<& hMl<& h\l<& h\l<& hOl<& hOl<& hol<& hnl<& hnl<& hml<& hml<& hll<& hNl<& hRl<& hpl<& hLl<& hpl<& h^l<& h^l<& hLl<& hLl<& hQl<& hOl<& hPl<& hPl<& }xsnid_Z hXl<& hYl<& hYl<& hQl<& hXl<& hXl<& hXl<& hQl<& hpl<& hRl<& h]l<& h]l<& hWl<& hLl<& hSl<& hQl<& h[l<& hQl<& hXl<& hZl<& hYl<& hZl<& hZl<& |wrmhc^ hil<& hgl<& hjl<& hhl<& hgl<& hhl<& hjl<& hjl<& hnl<& hfl<& hfl<& hjl<& hgl<& hfl<& hHl<& hHl<& hgl<& hil<& hil<& hfl<& hhl<& hfl<& hfl<& hgl<& hgl<& h{D<f h{D<f h{D<f h{D<f hsD<f {vqj`[T }xsnid_ZU td]T] h{D<f {tpib[WP |ung`YRK |unjc\UQK mib^WS |yvspmjgd zuoje`[VQ h{D<f h{D<f h{D<f ~ytoje_Z h{D<f h{D<f h{D<f }xsnid^Y h{D<f h{D<f h{D<f }xsnid_Z h{D<f h{D<f h{D<f |wrmhc^Y h{D<f h{D<f h{D<f }xsnid_Z h{D<f h{D<f h{D<f ~ytojd_Z h{D<f h{D<f h{D<f ~ytoje`[ h{D<f h{D<f h{D<f }xsnid_Z h{D<f h{D<f h{D<f |wrmhc^Y }xsnid_Z h{D<f h{D<f h{D<f xsnid_Z h{D<f h{D<f h{D<f ~{vpkfva\ h{D<f h{D<f h{D<f h{D<f D<fgH
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dxg\docs\d3d8rendering.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Direct3D for DirectX 8.0 Specification Title _PID_HLINKSDirect3D for DirectX 8.0 Specification Chas. Boyd Normal MTOELLE Microsoft Word 9.0_C\t8bjbjU Table of Contents  TOC \o "1-3" \h \z   HYPERLINK \l "_Toc476552039"  Device Types  PAGEREF _Toc476552039 \h   HYPERLINK \l "_Toc476552040"   Device  PAGEREF _Toc476552040 \h   HYPERLINK \l "_Toc476552041"  Device Creation Vertex Processing  PAGEREF _Toc476552041 \h   HYPERLINK \l "_Toc476552042"  Rendering Interfaces  PAGEREF _Toc476552042 \h   HYPERLINK \l "_Toc476552043"  Set Stream Source Methods  PAGEREF _Toc476552043 \h   HYPERLINK \l "_Toc476552044"  Draw Primitive Methods  PAGEREF _Toc476552044 \h   HYPERLINK \l "_Toc476552045"  User Pointer Draw Primitive Methods  PAGEREF _Toc476552045 \h   HYPERLINK \l "_Toc476552046"  Vertex Processing  PAGEREF _Toc476552046 \h   HYPERLINK \l "_Toc476552047"  Vertex Shaders  PAGEREF _Toc476552047 \h   HYPERLINK \l "_Toc476552048"  Programmable vs. Fixed Function Vertex Processing  PAGEREF _Toc476552048 \h   HYPERLINK \l "_Toc476552049"  Flexible Vertex Format and Vertex Shaders  PAGEREF _Toc476552049 \h   HYPERLINK \l "_Toc476552050"  Creating/Setting Vertex Shaders  PAGEREF _Toc476552050 \h   HYPERLINK \l "_Toc476552051"  Vertex Shader Declaration  PAGEREF _Toc476552051 \h   HYPERLINK \l "_Toc476552052"  Vertex Shader Function  PAGEREF _Toc476552052 \h   HYPERLINK \l "_Toc476552053"  Software Vertex Processing Capabilities  PAGEREF _Toc476552053 \h   HYPERLINK \l "_Toc476552054"   Vertex Functionality  PAGEREF _Toc476552054 \h   HYPERLINK \l "_Toc476552055"  Vertex Buffers  PAGEREF _Toc476552055 \h   HYPERLINK \l "_Toc476552056"  Index Buffers  PAGEREF _Toc476552056 \h   HYPERLINK \l "_Toc476552057"  Process Vertices  PAGEREF _Toc476552057 \h   HYPERLINK \l "_Toc476552058"  Fixed Function ProcessVertices  PAGEREF _Toc476552058 \h   HYPERLINK \l "_Toc476552059"  Programmed Function ProcessVertices  PAGEREF _Toc476552059 \h   HYPERLINK \l "_Toc476552060"  Pool and Usage for Vertex and Index Buffers  PAGEREF _Toc476552060 \h   HYPERLINK \l "_Toc476552061"  Point Primitive Rendering Controls  PAGEREF _Toc476552061 \h   HYPERLINK \l "_Toc476552062"  Point Size Computations  PAGEREF _Toc476552062 \h   HYPERLINK \l "_Toc476552063"  Point Rendering  PAGEREF _Toc476552063 \h   HYPERLINK \l "_Toc476552064"  Flexible Vertex Format  PAGEREF _Toc476552064 \h   HYPERLINK \l "_Toc476552065"  Texture Palettes  PAGEREF _Toc476552065 \h   HYPERLINK \l "_Toc476552066"  Capabilities  PAGEREF _Toc476552066 \h   HYPERLINK \l "_Toc476552067"  Render/Device State  PAGEREF _Toc476552067 \h   HYPERLINK \l "_Toc476552068"  Appendix: Fixed Function Vertex Processing  PAGEREF _Toc476552068 \h   HYPERLINK \l "_Toc476552069"  Device State Controls  PAGEREF _Toc476552069 \h   HYPERLINK \l "_Toc476552070"  Functional Description  PAGEREF _Toc476552070 \h   HYPERLINK \l "_Toc476552071"  Vertex Shader Program  PAGEREF _Toc476552071 \h   HYPERLINK \l "_Toc476552072"  Appendix: Debugging Support  PAGEREF _Toc476552072 \h  Change History (3/15/00 MToelle)   Removed emulation device type and added pluggable SW devices; added point size max and clarified point size interpretations; (4/18/00 MToelle)   Fixed SW device registration to take a null pointer for the init function. doc SetCurrentTexturePalette HRESULT GetPixelShaderFunction(   DWORD Handle,   VOID* pBuffer,   DWORD* pcbBufferSize Parameters Handle  The PixelShader being referred to.  pBuffer  Address of a previously allocated buffer to be filled with the code associated with the requested pixel shader handle if the call succeeds. The application calling this method is responsible for allocating and releasing this buffer.  pcbBufferSize  Size of the buffer at pBuffer, in bytes. If this value is less than the actual size of the data (such as 0), the method sets this parameter to the required buffer size, and the method returns D3DERR_MOREDATA. If the buffer is NULL, then the pcbBufferSize is filled with the required size and S_OK returned. Remarks If the handle is an invalid handle , then a DPF is spewed in the Debug builds and an error   D3DERR_INVALID_CALL   is returned.  Return Values If the method succeeds, the return value is DD_OK. If it fails, the method can return one of the following error values:  D3DERR_INVALID_CALL  D3DERR_MOREDATA HRESULT GetVertexShaderFunction(   DWORD Handle,   VOID* pBuffer,   DWORD* pcbBufferSize Parameters Handle  The Vertex-Shader being referred to.  pBuffer  Address of a previously allocated buffer to be filled with the code associated with the requested vertex shader handle if the call succeeds. The application calling this method is responsible for allocating and releasing this buffer.  pcbBufferSize  Size of the buffer at pBuffer, in bytes. If this value is less than the actual size of the data (such as 0), the method sets this parameter to the required buffer size, and the method returns D3DERR_MOREDATA. If the buffer is NULL, then the pcbBufferSize is filled with the required size and S_OK returned. Remarks If the handle is an invalid handle , then a DPF is spewed in the Debug builds and an error   D3DERR_INVALID_CALL   is returned.  Return Values If the method succeeds, the return value is DD_OK. If it fails, the method can return one of the following error values:  D3DERR_INVALID_CALL  D3DERR_MOREDATA HRESULT GetVertexShaderDeclaration(   DWORD Handle,   VOID* pBuffer,   DWORD* pcbBufferSize Parameters Handle  The Vertex-Shader being referred to.  pBuffer  Address of a previously allocated buffer to be filled with the declaration associated with the requested vertex shader handle if the call succeeds. The application calling this method is responsible for allocating and releasing this buffer.  pcbBufferSize  Size of the buffer at pBuffer, in bytes. If this value is less than the actual size of the data (such as 0), the method sets this parameter to the required buffer size, and the method returns D3DERR_MOREDATA. If the buffer is NULL, then the pcbBufferSize is filled with the required size and S_OK returned. Remarks If the handle is an invalid handle , then a DPF is spewed in the Debug builds and an error   D3DERR_INVALID_CALL   is returned.  Return Values If the method succeeds, the return value is DD_OK. If it fails, the method can return one of the following error values:  D3DERR_INVALID_CALL  D3DERR_MOREDATA Device Types Direct3D for DX8 supports several device types encompassing hardware acceleration for both rasterization and vertex processing, software rasterizers, plus development aids such as the reference device.   The primary device type is the HAL device (D3DDEVTYPE_HAL), which supports hardware accelerated rasterization and both hardware and software vertex processing.  This device type is available on all Direct3D-supported graphics adapters. Software rasterization is supported via pluggable software devices, which allow software rasterizers loaded by the application to be used via the Direct3D interfaces. Also supported is the Reference Device (D3DDEVTYPE_REF), which is an additional software-only device intended for use with the DirectX SDK and DDK for application and hardware/driver development.  The Reference Device supports the full feature set of DX8, but is implemented for exact accuracy and runs at a very small fraction of the speed of HAL or Emulation devices.  The reference device is intended as a development and debugging tool, and is not intended to be used in shipping products. The Emulation and Reference devices in DirectX 8 have behavior identical to that of the HAL device, so application code authored to work with the HAL device will work with the Emulation or Reference devices with no modifications. Note however that while the Emulation or Reference device behavior is identical to the HAL devices, the device capabilities do vary, and in particular the Emulation device does not implement all capabilities exposed through the DX8 interfaces.  Device  device is a variant of the HAL Device (also available on the reference device) which is focused on hardware acceleration with more limited software emulation support than the standard HAL Device.  The pure HAL device supports hardware vertex processing only, and only allows a small subset of the device state to be queried by the application.  Additionally, the pure device is available only on adapters which have a minimum level of capabilities. A pure device is created by passing the D3DCREATE_PUREDEVICE flag to CreateDevice.  Support for pure device type is indicated by the D3DDEVCAPS_PUREDEVICE caps bit. The pure device type is intended for extremely performance sensitive applications which are not reliant on software vertex processing or the ability to query device state.  The pure HAL device has significant performance advantages over the (non-pure) HAL device, due to a guaranteed close mapping to the hardware, and reduced need for state shadowing. Note that the functionality and behavior of the pure HAL device is a strict subset of the HAL device.  This enables applications authored to the pure device to fully function, without any modifications (aside from the usual capabilities differences across adaptors), on HAL device when the pure device variant is not available. Device Creation Vertex Processing IDirect3D::CreateDevice takes three flags for controlling the vertex processing capabilities of the created device.  These flags are: D3DCREATE_SOFTWARE_VERTEXPROCESSING D3DCREATE_HARDWARE_VERTEXPROCESSING D3DCREATE_MIXED_MODE_VERTEXPROCESSING These flags control where vertex processing occurs for the HAL and Reference devices.  The  Mixed Mode  flag enables that device to perform both software and hardware vertex processing.  Only one of these flags may be set at one time. Valid combinations of these flags and device types for CreateDevice are (the HWVERTEXPROCESSING cap is the capabilities bit which indicates a hardware device s ability to do vertex processing): D3DCREATE flag D3DDEVTYPE HWVERTEXPROCESSING cap Vertex Processing  Create Usage Flag SOFTWARE_VERTEXPROCESSING HAL/REF t care) Software HARDWARE_VERTEXPROCESSING HAL/REF Hardware MIXED_MODE_VERTEXPROCESSING HAL/REF SOFTWARE_VERTEXPROCESSING Software t care) Software Specifying combinations other than these listed will cause DeviceCreate to fail.   Also note that the HARDWARE_VERTEXPROCESSING flag is required when creating a pure device. Pluggable Software Device Software rasterization for Direct3D is enabled by the pluggable software device, which allows applications to access a variety of software rasterizers through the Direct3D DX8 interfaces. A software device is loaded by the application and registered with IDirect3D, at which point an IDirect3DDevice can be created which will perform the rendering with that software device.  HRESULT IDirect3D::RegisterSoftwareDevice(     VOID*    InitializeFunction); The application is responsible for instantiating the software rasterizer device code.  The external interface for the software rasterizer is a single function, which the application passes from the software device into IDirect3D via the RegisterSoftwareDevice method.  If the software device is successfully registered then the application can create an IDirect3D8Device by calling IDirect3D8::CreateDevice with the D3DDEVTYPE_SW device type. Calling CreateDevice with D3DDEVTYPE_SW will fail if a software device has not been registered or if the registration failed.  Only a single software device can be registered with a single instance of IDirect3D, so RegisterSoftwareDevice will fail if called more than once.  It is possible to use multiple different pluggable software devices by creating multiple IDirect3D8Device instances, one for each software device. Direct3D pluggable software devices communicate with Direct3D via an interface which is similar to the hardware device driver interface (DDI).  The Direct3D DDK provides the documentation and headers for developing these pluggable software devices. Microsoft will provide at least one software device in the form of a static library shipped with the SDK.  Additional software devices may be available from third parties. Rendering Interfaces The rendering interfaces for Direct3D for DX8 consist of methods to render primitives from vertex data stored in one or more data buffers.   Vertex data consists of vertex elements combined to form vertex components.  Vertex elements are the smallest indivisible unit of a vertex, and represent entities such as position, normal, or color.  Vertex components are one or more vertex elements stored contiguously (interleaved per-vertex) in a single memory buffer.   A complete vertex consists of one or more components, where each component is in a separate memory buffer.  To render a primitive, multiple vertex components are read and assembled such that complete vertices are available for vertex processing. Rendering primitives with DX8 consists of two steps: the first is to set up one or more vertex component streams, and the second is to invoke a   method to render from those streams.  Identification of vertex elements within these component streams is specified by the vertex shader.  This is covered in detail in the Vertex Shader sections.  The draw methods specify an offset into the vertex data streams such that an arbitrary contiguous subset of the primitives within one set of vertex data can be rendered with each draw invocation.  This enables changing device rendering state between groups of primitives being rendered from the same vertex buffer(s). Both indexed and non-indexed drawing methods are supported.  The indexed methods use a single set of indices for all vertex components.   Vertex data is presented to the API via Vertex Buffers, and index data for indexed draw methods is presented to the API Index Buffers.  Refer to the appendix on  Programming Hints and Tips  for details on the best way to use index and vertex buffers. A secondary set of rendering interfaces supports passing vertex and index data directly from user memory pointers.  These interfaces support a single stream of vertex data only. Set Stream Source Methods HRESULT IDirect3DDevice8::SetStreamSource(     UINT                    StreamNumber,     DIRECT3DVERTEXBUFFER8*  StreamData,     UINT                    Stride); Parameters StreamNumber Stream number in range 0 to (dwMaxStreams  StreamData Pointer to vertex buffer. Stride Stride, in bytes, between components. The SetStreamSource method binds a vertex buffer to a device data stream.  A stream is defined as a uniform array of component data, where each component consists of one or more elements representing a single entity such as position, normal, color, etc.  The stride specifies the size, in bytes, of the component. These functions create an association between the vertex data and one of several data stream ports feeding the primitive processing functions.  The actual references to the stream data do not occur until a DrawPrimitive function is called. Draw Primitive Methods HRESULT IDirect3DDevice8::DrawPrimitive(     D3DPRIMITIVETYPE  PrimitiveType,     UINT              StartIndex,     UINT              PrimitiveCount); Parameters PrimitiveType Type of primitive. StartIndex Index of first vertex to be loaded for this call. PrimitiveCount Number of primitives to render this call. This method draws non-indexed primitives from the current set of data input streams. HRESULT IDirect3DDevice8::SetIndices(     D3DINDEXBUFFER*  IndexData,     UINT             BaseVertexIndex); Parameters IndexData Pointer to index buffer. BaseVertexIndex Base value for vertex indices.  This value is added to all indices prior to referencing vertex data, thus defining a starting position in the vertex streams. HRESULT IDirect3DDevice8::DrawIndexedPrimitive(     D3DPRIMITIVETYPE  PrimitiveType,          UINT              MinVertexIndex,     UINT              NumIndices,     UINT              StartPosition,     UINT              PrimitiveCount); Parameters PrimitiveType Type of primitive. MinVertexIndex Minimum vertex index, relative to BaseVertexIndex, for vertices used during this call. NumIndices Number of vertex indices for vertices used during this call. StartPosition Specifies the location in the index array to start reading indices for this call.   PrimitiveCount Number of primitives to render this call.  The number of indices used is a function of the primitive count and the primitive type. These methods draw indexed primitives from the current set of data input streams.  The SetIndex methods set the current index array to an index buffer.  The single set of indices is used to index all streams.  The BaseVertexIndex specifies the base value for indices.  This base value is added to all indices prior to referencing into the vertex data streams, the result of which is to set a starting position in the vertex data streams.  The BaseVertexIndex allows multiple indexed primitives to be packed in to one set of vertex data without requiring the indices to be recomputed based on where the corresponding primitive happens to be placed in the vertex data. The MinVertexIndex and MaxVertexIndex specify the range of vertex indices used for each DrawIndexedPrimitive call.  These are used to optimize vertex processing of indexed primitives by processing a sequential range of vertices prior to indexing into these vertices.  Setting these to 0x0 and D3DMAXNUMVERTICES respectively indicates that all vertices are potentially referenced during this call, and thus may all vertices be processed even if only a small subset of them are actually referenced by indices.  It is illegal for any indices used during this call to reference any vertices outside of this range. DrawIndexedPrimitive fails if no index array is set. User Pointer Draw Primitive Methods These methods render with data specified by user memory pointers (instead of vertex and/or index buffers).  These are intended for use in applications which are unable to store their vertex data in vertex buffers.  These methods support a single vertex stream only.  The effect of these calls is to use the provided vertex data pointer and stride for vertex stream zero.  It is invalid to have the declaration of the current vertex shader refer to vertex streams other than stream zero. Following any Draw(Indexed)PrimitiveUP call, the stream zero settings (referenced by GetStreamSource a subsequent non-  drawprim call) are set to NULL.  Following any DrawIndexedPrimitiveUP, the index buffer setting for SetIndices is set to NULL. HRESULT IDirect3DDevice8::DrawPrimitiveUP(     D3DPRIMITIVETYPE  PrimitiveType,     UINT              PrimitiveCount,     VOID*             VertexStreamZeroData,     UINT              VertexStreamZeroStride); Parameters PrimitiveType Type of primitive. PrimitiveCount Number of primitives to render this call. VertexStreamZeroData User memory pointer to vertex data to use for vertex stream zero. VertexStreamZeroStride Stride, in bytes, between data for each vertex. HRESULT IDirect3DDevice8::DrawIndexedPrimitiveUP(     D3DPRIMITIVETYPE  PrimitiveType,          UINT              MinVertexIndex,     UINT              MaxVertexIndex,     UINT              PrimitiveCount,     VOID*             IndexData,     D3DFORMAT         IndexDataFormat,     VOID*             VertexStreamZeroData,     UINT              VertexStreamZeroStride); Parameters PrimitiveType Type of primitive. MinVertexIndex Minimum vertex index, relative to zero (the start of the IndexData pointer), for vertices used during this call. MaxVertexIndex Maximum vertex index, relative to zero (the start of the IndexData pointer), for vertices used during this call. PrimitiveCount Number of primitives to render this call.  The number of indices used is a function of the primitive count and the primitive type. IndexData User memory pointer to index data. IndexDataFormat D3DFMT_INDEX_16 Indices are 16 bits each. D3DFMT_INDEX_32 Indices are 32 bits each. VertexStreamZeroData User memory pointer to vertex data to use for vertex stream zero. VertexStreamZeroStride Stride, in bytes, between data for each vertex. Vertex Processing Vertex Shaders Vertex shaders control the loading and processing of vertices.  Direct3D for DX8 supports two types of vertex processing: programmed vertex processing, and fixed function vertex processing.  The term  vertex shader  most often applies to the programmable mode, although the vertex shader API mechanism encompasses both types of functionality. Vertex shaders are created and managed by methods on IDirect3DDevice8.  Once created, a vertex shader is referred to by its handle.  Vertex shaders are not editable   to be changed they must be destroyed and recreated. Each vertex shader includes a function, which defines the operations to be applied to each vertex, and a declaration, which defines the inputs to the shader, including how the vertex elements within the input data streams are to be used by the shader. Vertex processing performed by vertex shaders encompasses operations applied to single vertices only.  The output of the vertex processing step is defined as individual vertices each consisting of a clip-space position (x, y, z, and w) plus color, texture coordinate, fog intensity, and point size information.  The projection and mapping of these positions to the viewport, the assembling of multiple vertices into primitives, and the clipping of primitives is done by a subsequent processing stage and is not under the control of the vertex shader. Programmable vs. Fixed Function Vertex Processing Vertex shaders are defined at creation as using fixed function or programmed vertex processing.  Fixed function vertex processing provides the same functionality as in Direct3D for DX7, including transformation and lighting, vertex blending, and texture coordinate generation.  Unlike programmed vertex shaders, where the operations applied to vertices are defined within the shader, fixed function vertex processing is controlled by device state set by methods on IDirect3DDevice8 similar to those on IDirect3DDevice7 (which set lights, transforms, etc.).   Note that it is still useful to have multiple fixed-function vertex shaders, because even though the function is fixed (and shared), the declarations can vary.  This enables feeding the fixed function shader with differing layouts of multi-stream inputs. The input vertex elements for fixed function vertex processing have fixed semantics, thus the declaration tags specific input vertex elements as coordinate, normal, color, etc.  The vertex outputs for fixed function vertex shaders always include coordinates, diffuse and specular colors, and multiple texture coordinates (as required by the current device state settings for pixel processing). Programmed vertex shaders have a function defined by an array of instructions to be applied to each vertex.  The mapping of the input vertex elements to the vertex input registers for programmed vertex shaders is defined within the shader declaration, but do not have specific semantics about their usage - the interpretation of the elements is up to the shader instructions.  The vertex outputs for programmed vertex shaders are explicitly written to by instructions within the shader function. Flexible Vertex Format and Vertex Shaders Direct3D for DX8 has a simplified programming model for using the fixed function vertex processing with a single input stream (functionality very similar to that of previous releases).  In this case, the vertex shader consists of a Flexible Vertex Format (FVF) code which is passed in place of a shader handle when setting the current vertex shader.  (The handle space for vertex shaders is managed by the runtime library such that handles which are valid FVF codes are reserved for this usage.) Setting an FVF code as the  current  vertex shader causes the vertex processing to load from stream zero only, and to interpret the vertex elements as defined in the FVF code. Creating/Setting Vertex Shaders A vertex shader is defined by two token arrays which specify the declaration and function of the shader.  The token arrays are composed of single or multiple DWORD tokens terminated by a special 0xFFFFFFFF token value. The shader declaration defines the static external interface of the shader, including binding of stream data to vertex register inputs and values loaded into the shader constant memory. The shader function defines the operation of the shader as an array of instructions which are executed in order for each vertex processed during the time the shader is bound to a device.  Shaders created without a function array apply the fixed function vertex processing when that shader is current. Method: IDirect3DDevice8::CreateVertexShader CreateVertexShader creates vertex shader, and also sets that shader (if created successfully) as the current shader. HRESULT IDirect3DDevice8::CreateVertexShader(     DWORD*  Declaration,     DWORD*  Function,     DWORD*  Handle,     DWORD   Usage); Parameters Declaration Pointer to shader declaration DWORD token array. Function Pointer to shader function DWORD token array. Handle Pointer to shader handle return. Usage Usage controls for vertex shader.  Valid bits are: D3DUSAGE_SOFTWAREPROCESSING   When set, this shader is used only when D3DRS_SOFTWAREVERTEXPROCESSING true. If Handle is set to NULL, then the shader is instantiated and set as the current shader, but no handle is made available for it so it is discarded the next time CreateVertexShader or SetVertexShader are called. If Function is set to NULL, then a fixed-function vertex shader is implied.  The parameter declaration indicated by Declaration is made current, and is also available to be set in a subsequent SetVertexShader if a handle pointer is provided. The D3DSHADER_USAGE_SOFTWAREPROCESSING bit must be set for vertex shaders used when D3DRS_SOFTWAREVERTEXPROCESSING is TRUE, and unset for vertex shaders used when D3DRS_SOFTWAREVERTEXPROCESSING is FALSE. Method: IDirect3DDevice8::SetVertexShader Sets current vertex shader to previously created shader or to FVF-driven fixed function shader. HRESULT IDirect3DDevice8::SetVertexShader(     DWORD   Handle); Parameters Handle Handle from CreateVertexShader or FVF code. SetVertexShader also can take a DX7 FVF code in place of the handle.  The effect of this is to enable the fixed-function vertex shader, with an implicit declaration that matches the FVF code contents read from stream zero.  Only stream zero will be referenced when an FVF-specified shader is bound to the device. The default value for the vertex shader is D3DFVF_VERTEX, which implies the fixed-function vertex shader loading D3DFVF_VERTEX format data from stream zero. Method: IDirectD8::GetVertexShader Returns the currently set vertex shader. HRESULT IDirect3DDevice8::GetVertexShader(     DWORD*  Handle); Parameters Handle Pointer to location to return DWORD handle. Returns DDERR_INVALIDOBJECT - invalid IDirect3DDevice8 object DDERR_INVALIDPARAMS - bad pdwHandle pointer Method: IDirect3DDevice8::DeleteVertexShader Deletes the shader referred to by the handle and frees up the associated resources. HRESULT IDirect3DDevice8::DeleteVertexShader(     DWORD   Handle); Parameters Handle Handle of shader to be deleted. Vertex Shader Declaration The declaration portion of a vertex shader defines the static external interface of the shader.  The information in the declaration includes: Binding of stream data to vertex shader input registers.  This information defines the type and vertex input register assignment of each element within each data stream.  The type specifies the arithmetic data type plus the dimensionality (1, 2, 3, or 4 values).  Stream data elements which are less than 4 values are always expanded out to 4 values with zero or more 0.F values and one 1.F value. Binding of vertex shader input registers to implicit data from the primitive tessellator.  This controls the loading of vertex data which is not loaded from a stream, but rather is generated during primitive tessellation prior to the vertex shader. Loading data into the constant memory at the time a shader is set as the current shader.  Each token specifies values for one or more contiguous 4 DWORD constant registers.  This allows the shader to update an arbitrary subset of the constant memory, overwriting the device state (which contains the current values of the constant memory).  Note that these values can be subsequently overwritten (between DrawPrimitive calls) during the time a shader is bound to a device via the SetVertexShaderConstant method. Declaration arrays are single-dimensional arrays of DWORDs composed of multiple tokens each of which is one or more DWORDs.  The single-DWORD token value 0xFFFFFFFF is a special token used to indicate the end of the declaration array.  The single DWORD token value 0x00000000 is a padding token which is ignored during the declaration parsing.  This pad token enables more complex in-place editing of declarations.  Note that 0x00000000 is a valid value for DWORDs following the first DWORD for multiple word tokens. The shader declaration token types and bit definitions are: [31:29] TokenType     0x0   padding (requires all DWORD bits to be zero)     0x1   stream selector     0x2   stream data definition (map to vertex input memory)     0x3 - vertex input memory from tessellator     0x4 - constant memory from shader     0x5 - reserved     0x6 - extension     0x7 - end-of-array (requires all DWORD bits to be 1) Pad (whitespace) Token (single DWORD token)     [31:29] 0x0     [28:00] 0x0 Stream Selector (single DWORD token)     [31:29] 0x1     [28:04] 0x0     [03:00] stream selector (0..15) Stream Data Definition (single DWORD token) Vertex Input Register Load       [31:29] 0x2       [28]    0x0       [27:20] 0x0       [19:16] type (dimensionality and data type)       [15:04] 0x0       [03:00] vertex register address (0..15)     Data Skip (no register load)       [31:29] 0x2       [28]    0x1       [27:20] 0x0       [19:16] count of DWORDS to skip over (0..15)       [15:00] 0x0 Vertex Input Memory from Tessellator Data (single DWORD token)     [31:29] 0x3     [28:20] 0x0     [19:16] type (dimensionality)     [15:04] 0x0     [03:00] vertex register address (0..15) Constant Memory from Shader (multiple DWORD token)     [31:29] 0x4     [28:24] count of 4*DWORD constants to load (0..15)     [25:07] 0x0     [06:00] constant memory address (0..95) Extension Token (single or multiple DWORD token)     [31:29] 0x6     [28:24] count of additional DWORDs in token (0..31)     [23:00] extension-specific information End-of-array token (single DWORD token)     [31:29] 0x7     [28:00] 0x1fffffff The stream selector token must be immediately followed by a contiguous set of stream data definition tokens.  This token sequence fully defines that stream, including the set of elements within the stream, the order in which the elements appear, the type of each element, and the vertex register into which to load an element.   Streams are allowed to include data which is not loaded into a vertex register, thus allowing data which is not used for this shader to exist in the vertex stream.  This skipped data is defined only by a count of DWORDs to skip over, since the type information is irrelevant. The token sequence: Stream Select: stream=0 Stream Data Definition (Load): type=FLOAT3; register=3 Stream Data Definition (Load): type=FLOAT3; register=4 Stream Data Definition (Skip): count=2 Stream Data Definition (Load): type=FLOAT2; register=7 defines stream zero to consist of 4 elements, 3 of which are loaded into registers and the fourth skipped over.  Register 3 is loaded with the first three DWORDs in each vertex interpreted as FLOAT data.  Register 4 is loaded with the 4th, 5th, and 6th DWORDs interpreted as FLOAT data.  The next two DWORDs (7th and 8th) are skipped over and not loaded into any vertex input register.   Register 7 is loaded with the 9th and 10th DWORDS interpreted as FLOAT data. Placing of tokens other than padding tokens between the Stream Selector and Stream Data Definition tokens is disallowed. When using the fixed function vertex shader, the mapping of the vertex input registers is fixed such that specific vertex elements (such as position or normal) must be placed in specific register locations in the vertex input memory.  These assignments are made automatically when passing an FVF code to SetVertexShader.  When using an explicit shader declaration, the D3DVSDE_* preprocessor macros define the vertex input location into which specific elements must be loaded. Vertex Shader Function The function portion of a vertex shader defines the operations applied to each vertex.  Only programmed vertex shaders have shader functions.  Like declarations, shader functions are single dimensional arrays of DWORDs which form an ordered list of instructions to be executed for each vertex.  Each instruction is composed of multiple DWORDs. Programmed vertex shader functions are described in detail in the  Vertex Shader Programming  chapter. The operations applied to vertices by fixed function vertex shaders are described in the appendix  Fixed Function Vertex Processing Method to set values in the constant array. HRESULT IDirect3DDevice8::SetVertexShaderConstant(     UINT    RegisterAddress,     VOID*   ConstantData,     UINT    ConstantCount); Parameters RegisterAddress Address at which to start loading data into vertex constant array. ConstantData Pointer to (ConstantCount * 4 * sizeof(FLOAT)) data block to load into constant array. ConstantCount Number of 4 FLOAT constants to load. Returns Software Vertex Processing Capabilities The IDirect3DDevice8 interface supports both software and hardware vertex processing.  The software vertex processing capabilities and the hardware vertex processing capabilities generally will not be identical.  However, only the hardware capabilities are variable (depending on the graphics adaptor and driver) while the software capabilities are fixed.  Thus, to avoid having two sets of capabilities for a single device, only the hardware vertex processing capabilities are queriable at runtime, while the software vertex processing capabilities are fixed and not-runtime queriable.  As a convenience, the values for the software processing capabilities are included as #defines in the headers.  For the IDirect3DDevice8 interface, the software vertex processing capabilities are: dwMaxActiveLights: unlimited wMaxUserClipPlanes: 6 wMaxVertexBlendMatrices: 4 dwVertexProcessingCaps:  D3DVTXPCAPS_TEXGEN D3DVTXPCAPS_MATERIALSOURCE7 D3DVTXPCAPS_VERTEXFOG D3DVTXPCAPS_DIRECTIONALLIGHTS    D3DVTXPCAPS_POSITIONALLIGHTS D3DVTXPCAPS_LOCALVIEWER dwMaxStreams: 16 dwMaxVertexIndex: 0xFFFFFFFF The software vertex processing provides a guaranteed set of vertex processing capabilities, including an unbounded number of lights and full support for programmable vertex shaders.  The application programmer can change between software and hardware vertex processing at any time when using the Direct3DHALDevice (the only device type which supports use of both hardware and software vertex processing), the only requirement being that vertex buffers used for software vertex processing must be allocated in system memory.   Providing, within a single device type, both hardware and software-emulation functionality for vertex processing makes sense because the performance of software vertex processing is comparable to that of hardware vertex processing.  This is not the case for rasterization, for which host processors are much slower than specialized graphics hardware, thus both hardware and software-emulated rasterization is not provided within a single device type. The software vertex processing is the only instance of functionality duplicated between the runtime and the hardware/driver within a single device, thus all other capabilities bits represent (potentially variable) functionality provided by the hardware/driver.  Vertex Functionality Vertex data specified with an FVF code has the property of being either transformed or non-transformed.  The terminology used for FVF-specified transformed vertices, dating from prior Direct3D releases, is   vertices (meaning  Transformed and Lit ).  Direct3D for DX8 continues to support TL vertex data, but is subject to some conditions not applicable for non-transformed vertices. TL vertex data is only possible for vertices specified by an FVF code, and is not valid as input for a programmable vertex shader.  (Programmable vertex shaders have the flexibility to take various forms of transformed vertex data, but this is different from FVF-TL vertex data since the interpretation is part of the shader, not a property of the vertex data.)  TL vertex data, due to being defined by an FVF code, is also inherently single stream. TL vertex data is not clipped by Direct3D, thus it is required that TL vertex primitives be clipped prior to sending them to Direct3D.  The X and Y values are required to be clipped to the viewport, or, if available, the device guardband.  The Z values for TL vertices are required to be between 0. and 1. inclusive.  It is also required that the RHW values be within the range 0. < 1./D3DCAPS8.MaxVertexW.  The RHW requirement is to guarantee that the W values are within the supported range of the hardware rasterization device.  Note that the W (and RHW) range of vertices resulting from a perspective projection transformation can be modified by applying a scale to all values in the projection matrix. TL vertex data is always passed directly to the driver for rendering.  When using vertex buffers with TL vertex data, there can be very significant performance advantages to having the driver allocate these VBs in AGP or video memory.  Note that the allocation of a TL vertex VB may be driver-allocated even when non-TL vertex data (either FVF or non-FVF) is not allowed to be driver-allocated, as would be the case when running on a hardware device which does not support transformation and lighting. Vertex Buffers The IDirect3DDevice8 interface supports rendering of primitives using vertex data stored in Vertex Buffer (VB) objects.  Vertex buffers are created from the IDirect3DDevice8 interface, and are usable only with the IDirect3DDevice8 from which they are created. HRESULT IDirect3DDevice8::CreateVertexBuffer(     UINT                     Size,     DWORD                    Usage,     DWORD                    UsageFVF,     D3DPOOL                  Pool,     DIRECT3DVERTEXBUFFER8**  VertexBuffer); Parameters Total size in bytes of the vertex buffer. Usage Usage controls for vertex buffer. D3DUSAGE_WRITEONLY   (Same as DX7) D3DUSAGE_SOFTWAREPROCESSING   Set to indicate that the vertex buffer is to be used with software vertex processing.   D3DUSAGE_DONOTCLIP - Set to indicate that the vertex buffer content will never require clipping. UsageFVF Flexible Vertex Format usage specifier.  When set to a valid FVF code, then the created vertex buffer is an  FVF Vertex Buffer  (see usage requirements below).  When set to zero, the vertex buffer is non-FVF. Set to valid D3DPOOL type. VertexBuffer Pointer to return pointer. The UsageFVF field, when set to a non-zero value (must be a valid FVF code) indicates that the buffer content is to be characterized by an FVF code.  A vertex buffer which is created with an FVF code is referred to as an  FVF Vertex Buffer .  Some methods or usages of IDirect3DDevice8 require FVF Vertex Buffers, and others specifically require non-FVF vertex buffers.  FVF Vertex Buffers are required for: The destination vertex buffer for IDirect3DDevice8::ProcessVertices The vertex buffer bound to input data stream zero when SetVertexShader is set to an FVF code. FVF Vertex Buffers are not allowed to be used for inputs to programmed vertex shaders, or for vertex buffers which are multiple-stream inputs to fixed function vertex processing. Note that the presence of the RHW component on FVF Vertex Buffers indicates that the vertices in that buffer have already been processed.  Vertex buffers used for ProcessVertices destination must be  post-processed .  Vertex buffers used for fixed function shader inputs can be either pre- or post-processed.  If post processed, then the shader is effectively bypassed and the data is passed directly to the primitive clipping/setup module. The D3DUSAGE_SOFTWAREPROCESSING bit specifies that the vertex buffer is to be used with software vertex processing.  All vertex buffers used for software vertex processing must be created with this bit set.  Vertex buffers used for software vertex processing include: All input streams for IDirect3DDevice8::ProcessVertices. All input streams for IDirect3DDevice8::DrawPrimitive and DrawIndexedPrimitive when software vertex processing.  See the description of D3DRS_SOFTWAREVERTEXPROCESSING. Index Buffers Index buffers are memory resources used to hold indices used for the DrawIndexedPrimitive rendering method.   HRESULT IDirect3DDevice8::CreateIndexBuffer(     UINT                    Size,     DWORD                   Usage,     D3DFORMAT               Format,     D3DPOOL                 Pool,     DIRECT3DINDEXBUFFER8**  IndexBuffer); Parameters Total size in bytes of the index buffer. Usage Usage controls for vertex buffer.  Valid bits are: D3DUSAGE_WRITEONLY   (Same as DX7) D3DUSAGE_SOFTWAREPROCESSING   Set for device created with D3DCREATE_MIXED_MODE_VERTEXPROCESSING to indicate that the index buffer is to be used with software vertex processing.   Format Format of index buffer.  Valid settings are: D3DFMT_INDEX_16   16 bits/index D3DFMT_INDEX_32   32 bits/index Set to valid D3DPOOL type. IndexBuffer Pointer to return pointer. The usage is to create an index buffer, lock it, fill it with indices, unlock it, then pass it to DrawIndexedPrimitive.  Use of index buffers allows Direct3D to avoid unnecessary data copying, and to place the buffer in the optimal memory type for the expected usage. Process Vertices Direct3D for DX8 supports standalone processing of vertices, without rendering any primitives, via the ProcessVertices method.  This standalone vertex processing is always performed in software on the host processor. ProcessVertices applies the vertex processing defined by the current vertex shader to the current set of input data streams, generating a single stream of interleaved vertex data to the destination vertex buffer.  The functionality provided by ProcessVertices is identical to that invoked for Draw(Indexed)Primitive while using software vertex processing. HRESULT IDirect3DDevice8::ProcessVertices(     UINT                    SourceStartIndex,     UINT                    DestStartIndex,     UINT                    VertexCount,     DIRECT3DVERTEXBUFFER8*  DestBuffer,     DWORD                   Flags) Parameters SourceStartIndex Index of first vertex to be loaded for this call. DestStartIndex Index of first vertex in the destination vertex buffer into which the results are placed. VertexCount Number of vertices to process. DestBuffer Pointer to destination vertex buffer. Flags D3DPV_DONOTCOPYDATA Because ProcessVertices is always performed in software on the host processor, vertex buffers used as sources (via SetStreamSource) must be created with the D3DVBCAPS_SOFTWAREVERTEXPROCESSING flag for use with ProcessVertices. The destination vertex buffer (DestBuffer) must be created with a non-zero FVF parameter.  The FVF code specified during the VB creation specifies the vertex elements present in the destination vertex buffer. Fixed Function ProcessVertices When using the fixed function vertex processing, modification of the elements in the destination vertex buffer is controlled by the D3DPV_DONOTCOPYDATA flag.  This flag only applies to fixed function vertex processing.   When D3DPV_DONOTCOPYDATA is set, ProcessVertices does not overwrite color and texture coordinate information in the destination buffer unless this data is generated by Direct3D.  Diffuse color is generated when lighting is enabled (D3DRS_LIGHTING true).  Specular color is generated when lighting is enabled and specular is enabled (D3DRS_SPECULAR and D3DRS_LIGHTING true).  Specular color is also generated when fog is enabled. Texture coordinates are generated when texture transform or texture generation is enabled. ProcessVertices uses the current render states to determine what vertex processing should be done. FVF Usage Settings for Destination Vertex Buffers The ProcessVertices function has very specific requirements for the FVF usage settings of the destination vertex buffer, which must fit the current settings for the vertex processing.  For fixed function vertex processing, ProcessVertices requires the following FVF settings: Position type is always D3DFVF_XYZRHW (XYZ and XYZB* are invalid). D3DFVF_NORMAL and D3DFVF_RESERVED* bits must not be set. D3DFVF_DIFFUSE must be set if (OR of following): lighting is enabled (D3DRS_LIGHTING true) lighting is disabled AND diffuse color present in input vertex stream(s) AND D3DPV_DONOTCOPYDATA is not set D3DFVF_SPECULAR must be set if (OR of following): lighting is enabled AND specular is enabled (D3DRS_SPECULAR true) lighting disabled AND specular color present in input vertex stream(s) AND D3DPV_DONOTCOPYDATA is not set vertex fog is enabled (D3DRS_FOGVERTEXMODE not set to D3DFOG_NONE) Texture coordinate count (D3DFVF_TEXCOUNT) must be set as follows: If texture transform and texture generation are disabled for all active texture stages, and the D3DPV_DONOTCOPYDATA is not set, then the number and type output texture coordinates are required to match those of the input vertex texture coordinates.  If D3DPV_DONOTCOPYDATA is set (and texture transform and texgen are disabled), then the output texture coordinates are ignored. If texture transform or texture generation is enabled for any active texture stages, the output vertex may need to contain more texture coordinate sets than the input vertex.  This is due to a proliferation of texture coordinates due to those being generated by texgen or derived by texture transforms.  (Note that a similar proliferation of texture coordinates occurs during DrawPrimitive calls, but is not visible to the application programmer.)  In this case, Direct3D generates a new set of texture coordinates according to the following algorithm.   The new set of texture coordinates is derived by stepping through the texture stages and analyzing the settings for texture generation, texture transformation, and texture coordinate index to determine if a unique set of texture coordinates is required for that stage.  Each time a new set is required it is  allocated  in increasing order.  Note that the maximum (and typical) requirement is one set per stage, although it may be less due to sharing of non-transformed texture coordinates via D3DTSS_TEXCOORDINDEX. Thus, for each texture stage, a new set of texture coordinates is generated if a texture is bound to that stage and any of the following is true: texture generation is enabled for that stage texture transformation is enabled for that stage non-transformed input texture coordinates are referenced (via D3DTSS_TEXCOORDINDEX) for the first time Note that this case (where Direct3D is generating new texture coordinates), the application is required to both: (1) use a destination vertex buffer with the appropriate FVF usage; and (2) reprogram the texture stages D3DTSS_TEXCOORDINDEX accordingly for the placement of the post-processed texture coordinates.  Note that the reprogramming of the D3DTSS_TEXCOORDINDEX settings occurs when the processed vertex buffer is used in subsequent Draw(Indexed)Primitive calls. Texture coordinate dimensionality (D3DFVF_TEX0..7) must be set as follows: For each texture coordinate set: if texture transform and texture generation are disabled, then the output texture coordinate dimensionality must match the input; if the texture transform is enabled, then the output dimensionality must match the count defined by the D3DTTFF_COUNT settings; if the texture transform is disabled and texture generation is enabled, then the output dimensionality must match the settings for the texture generation mode (currently all modes generate 3 floats).  When ProcessVertices fails due to an incompatable destination vertex buffer FVF code, the expected code is printed to the debug output (debug builds only). Programmed Function ProcessVertices When using a programmed vertex shader, the elements updated in the destination vertex buffer are controlled by the shader function program.  When the program writes to one of the destination vertex registers, the corresponding element within each vertex of the destination vertex buffer is updated.  Elements in the destination vertex buffer which are not written to by the program are not modified.  ProcessVertices will fail if the program writes to elements which are not present in the destination vertex buffer. Pool and Usage for Vertex and Index Buffers Vertex and index buffers are created with Pool and Usage information.  Vertex buffers can also optionally be created with a specified FVF code for use in fixed function vertex processing or as the output of process vertices. The D3DUSAGE_SOFTWAREPROCESSING flag can be set for CreateVertexBuffer and CreateIndexBuffer only when mixed mode vertex processing is enabled for that device.  This flag must be set for buffers to be used with software vertex processing, and should be unset for the best possible performance when using hardware vertex processing.  This flag can be set for buffers used for hardware vertex processing, but this should only be done when a single buffer is to be used with both hardware and software vertex processing. In all cases other than mixed mode vertex processing, vertex and index buffers will automatically be created in the appropriate memory pool (for D3DPOOL_DEFAULT).  Setting the D3DUSAGE_SOFTWAREVERTEXPROCESSING flag any of the non mixed-mode cases will cause the create function to fail. Note that it is possible to force vertex and index buffers into system memory by specifying D3DPOOL_SYSTEMMEM, even when the vertex processing is being done in hardware.  This is potentially desirable to avoid overly large amounts of page locked memory when driver is putting these buffers into AGP. Point Primitive Rendering Controls Direct3D for DX8 supports additional parameters controlling the rendering of point primitives.  These parameters enable points to be of a variable size and have a full texture map applied to them. The size of each point is determined by an application-specified size combined with a distance based function computed by Direct3D.  The application can specify point size either per-vertex or via the D3DRS_POINT_SIZE renderstate (which applies to points without a per-vertex size).  The point size is expressed in camera space units, with the exception of when the application is passing post-transformed FVF vertices, in which case the distance-based function is not applied and the point size is expressed in units of pixels in the render target. The texture coordinates used when rendering points are computed depending on the setting of D3DRS_POINT_SPRITE_ENABLE.  When this value is set, the texture coordinates are set such that each point displays the full texture, which is generally useful only when points are significantly larger than one pixel.  When not set, each point s vertex texture coordinate is used for the entire point. Point Size Computations Point size is computed depending on the setting of D3DRS_POINT_SCALE_ENABLE.  If this value is false, then the application-specified point size is directly used as the screen space size.  Vertices that are passed to Direct3D in screen space (post-transformed) do not have point sizes computed, and in this case the specified point size is interpreted as a screen space size. If D3DRS_POINT_SCALE_ENABLE is true, then the screen space point size is computed as follows.  Note that in this case the application-specified point size is expressed in camera space units. Si   input point size (either per-vertex or D3DRS_POINT_SIZE) A,B,C  point scale factors D3DRS_POINT_SCALE_A/B/C Vh   height of viewport (dwHeight field in D3DVIEWPORT) Pe = (Xe, Ye, Ze)   eye space position of point De = sqrt (Xe2 + Ye2 + Ze2)  distance from eye to position (eye at origin) Ss = Vh  * Si * sqrt(1/(A + B*De + C*(De2))  screen space point size Smax   MIN( MaxPointSize device capability, D3DRS_POINT_SIZE_MAX ) Smin   D3DRS_POINT_SIZE_MIN  Final screen-space point size: Pmax  if Ss > Pmax if Ss < Pmin otherwise Point Rendering A screen space point P = (X, Y, Z, W) of screen-space size S is rasterized as a quadrilateral of the following 4 vertices: S/2, Y S/2, Z, W) S/2, Y S/2, Z, W) S/2, Y S/2, Z, W) S/2, Y S/2, Z, W) The vertex color attributes are duplicated at each of the 4 vertices, thus each point is always rendered with constant colors. The assignment of texture indices is controlled by the D3DRS_POINT_SPRITE_ENABLE setting.  If D3DRS_POINT_SPRITE_ENABLE is set to FALSE, then the vertex texture coordinates are duplicated at each of the 4 vertices.  If the D3DRS_POINT_SPRITE_ENABLE is set to TRUE, then all texture coordinates at the 4 vertices are set to: (0.F, 0.F) (0.F, 1.F) (1.F, 0.F) (1.F, 1.F) When clipping is enabled, points are clipped as follows.  If the vertex is outside the view frustum in Z (either near or far), then the point is not rendered.  If the point, taking into account the point size, is totally outside the viewport in x or y, then the point is not rendered.  Remaining points are rendered.  Note that it is possible for the point position to be outside the viewport (in x or y) and still be partially visible. Points may or may not be correctly clipped to user-defined clip planes.  If the D3DDEVCAPS_CLIPPLANESCALEDPOINTS is not set, then points are clipped to user-defined clip planes based only on the vertex position, ignoring the point size.  In this case scaled points will be fully rendered when the vertex position is inside the clip planes, and discarded when the vertex position is outside a clip plane.  Applications may prevent potential  poping  artifacts by adding a border geometry to clip planes that is as large as the maximum point size. If the D3DDEVCAPS_CLIPPLANESCALEDPOINTS bit is set, then the scaled points are correctly clipped to user-defined clip planes. Usage Flags and Point Size Emulation Point size may be emulated under some conditions when the device is not able to directly render arbitrarily sized points.  In this case the software expands out each point to a screen aligned quadrilateral prior to invoking the device.  Because of this potential emulation it is a requirement that vertex buffers which are to be used with variable size point primitives must be identified with the D3DUSAGE_POINTSIZE flag.  (This forces the buffer to be allocated in system memory, since the readback for the expansion would be very slow if the VB were stored in AGP or video memory.) D3DUSAGE_POINTSIZE must be set for vertex buffers used to render point primitives when any of the following are true: D3DRS_POINTSIZE is > 1.0F D3DRS_POINT_SCALE_ENABLE is TRUE  (applies only to pre-transformed vertices) passing in per-vertex point size (D3DFVF_PSIZE) The conditional capabilities related to variable sized point rendering are: The ability to render scaled points.  Devices which can directly render scaled points have the D3DCAPS8.MaxPointSize set to >1.0F.  Devices which specify that they can render scaled points are also required to: support D3DRS_POINT_SCALE_ENABLE if D3DDEVCAPS_HWTRANSFORMANDLIGHT is set Devices which are not able to render scaled points do vertex processing are required to  The ability to receive per-vertex point size.   The first is the ability of the device to render scaled points; this is detected via the D3DDEVCAPS.  The second is the ability of the device to compute point size during vertex processing. Hardware vertex processing may or may not support point size processing.  If, for example, you create a device with D3DCREATE_HARDWAREVERTEXPROCESSING on a HAL device for which the D3DCAPS8.MaxPointSize is <=1.0F, then all points will be single pixel.  To get >1 pixel point sprites you either need to use (FVF) TL verts or SWVP, in which case the runtime will emulate the point sprite rendering. A hardware device which does vertex processing and supports point sprites (has MaxPointSize set > 1.0f) is required to do the size computation for non-transformed sprites, and is required to properly field the per-vertex or RS point size for TL verts. DDI (DX6/7; DX8 ) D3DDEVCAPS_HWTRANSFORMANDLIGHT: DX7,DX8 DDI s only D3D8CAPS::MaxPointSize ( <=1.F; >1.F ) TLVert input Multi-Sampling Direct3D for DX8 supports multisample image buffers for render targets.  Multisample image buffers are used to render filtered (antialiased) images, and can also be used to achieve special effects such as motion blur. Two renderstates control rendering into a multisample render target: D3DRS_MULTISAMPLEANTIALIAS (BOOL; default TRUE) Determines how individual samples are computed when using a multisample rendertarget buffer.  When set TRUE, then the multiple samples are computed such that full-scene antialiasing is achieved (by sampling at different sample positions for each of the multiple samples).  When set FALSE, the multiple samples are all written with the same sample value (sampled at the pixel center), which allows non-antialiased rendering to a multisample buffer.  This renderstate has no effect when rendering to a single sample buffer. D3DRS_MULTISAMPLEMASK (DWORD; default 0xffffffff) Each bit in this mask, starting at the LSB, controls modification of one of the samples in a multisample rendertarget.  Thus, for a 8 sample rendertarget, the low byte contains the 8 write enables for each of the 8 samples.  This renderstate has no effect when rendering to a single sample buffer. This renderstate enables use of a multisample buffer as an accumlation buffer, doing multipass rendering of geometry where each pass updates a subset of samples.   Multisampling occurs only for surface/area based primitives (triangles, point sprites, high-order surfaces), and does not occur when rendering lines.  Line rendering to a multisample buffer results in all samples for a given pixel being updated with each line pixel (the same effect achieved when D3DRS_MULTISAMPLEANTIALIAS is FALSE and D3DRS_MULTISAMPLEMASK is set to all 1 s).  D3DRS_MULTISAMPLEANTIALIAS  and D3DRS_MULTISAMPLEMASK have no effect when rendering lines. The multisampling resolve filtering operation is not guaranteed to do anything more specific than include weighted contributions of each of the samples.  The precise result achieved for a given number of samples may vary for difference devices. Flexible Vertex Format The Flexible Vertex Format (FVF) is used in DX8 to describe the contents of vertices stored interleaved in a single data stream.  FVF is generally used to specify data to be processed by the fixed function vertex processing. The FVF specification for DX8 includes specification for point size, specified by D3DFVF_PSIZE.  This size is expressed in camera space units for non-TL vertices, and in device-space units for TL vertices. Texture Palettes Direct3D for DX8 supports paletted textures via a set of 256 entry palettes associated with the IDirect3DDevice8 object.  One of these palettes is made current via a renderstate setting.  The current palette is used for translating all paletted textures for all active texture stages. The IDirect3DDevice8 palettes contain an alpha channel.  This alpha channel can be used when the hardware capability bit D3DPTEXTURECAPS_ALPHAPALETTE is true, indicating that the device supports alpha from the palette.  The palette alpha channel is used when the texture format does not have an alpha channel.  If the device does not support alpha from the palette and the texture format does not have an alpha channel, the a value of 0xff is used for alpha. There are a maximum of 16,384 palettes.  Memory resources associated with the set of palettes are proportional to the maximum palette number that an application references, so it is advantageous to use contiguous palette numbers starting at zero. This method updates a subset of a palette s 256 entries.  Each entry is a DWORD of the format D3DFMT_A8R8G8B8.  All entries default to 0xffffffff.  Calling SetTexturePalette( n, 0, 0, NULL ) frees the resources associated with the n th palette. HRESULT IDirect3DDevice8::SetTexturePalette(     UINT                    PaletteNumber,     UINT                    StartEntry,     UINT                    NumberOfEntries,     DWORD*                  Entries); Parameters PaletteNumber Sets which of the set of 256 entry palettes to update for this call.  The range for this parameter is 0 to 16,383. StartEntry Starting entry in 256 entry palette to update for this call. NumberOfEntries Number of entries in 256 entry palette to update for this call. Entries Pointer to DWORD array of colors to copy into device palette.  DWORDs are in D3DFMT_A8R8G8B8 format. D3DRS_CURRENT_PALETTE (UINT; default 0; range 0 to 16,383) Sets the current palette for the device.  All subsequent paletted texture reads use this palette. Capabilities DWORD MaxStreams The maximum number of concurrent data streams for SetSteamSource.  The valid range is 1 to 16. DWORD MaxVertexIndex The maximum size of indices supported for hardware vertex processing.  The D3DDP_32BITINDICES and D3DFMT_INDEX_32 can only be used if this value is greater than 0x0000FFFF.   FLOAT MaxPointSize Maximum size of point primitive.  If set to 1.0F then device does not support point size control.  Range is >= 1.F. D3DDEVCAPS_CLIPPLANESCALEDPOINTS Set if device correctly clips scaled points (of size > 1.0) to user-defined clipping planes. Render/Device State D3DRS_SOFTWARE_VERTEX_PROCESSING (BOOL; default depends on device) Allows app to query and select hardware or software vertex processing.  For D3DPureHALDevice, this value is fixed to FALSE.  For D3DHELDevice, this value is fixed to TRUE.  Settable by application for D3DRefDevice.  Settable by application for D3DHALDevice only when D3DDEVCAPS_HWTRANSFORMANDLIGHT is set, else fixed to TRUE.  When variable, the default is FALSE. D3DRS_POINT_SIZE (FLOAT; default 1.0F; range >= 0.F) Size to use for point size computation for cases in which point size is not specified for each vertex.  Value is not used when vertex contains point size.  Value is in screen space units if D3DRS_POINTSCALEENABLE false, else in world space units.  D3DRS_POINT_SIZE_MIN (FLOAT; default 1.0F; range >= 0.F) Minimum size of point primitives.  Point primitives are clamped to this size during rendering.  Note that setting this to values smaller than 1.0 will result points dropping out (when the point does not cover a pixel center and antialiasing is disabled) and/or being rendered with reduced intensity (when antialiasing is enabled).  Value is always expressed in screen space units. D3DRS_POINT_SIZE_MAX (FLOAT; default MaxPointSize cap; range >= 0.F) Maximum size of point primitives.  Point primitives are clamped to this size during rendering.  Value is always expressed in screen space units. D3DRS_POINT_SPRITE_ENABLE (BOOL; default FALSE) When TRUE, texture coordinates of point primitives are set such that full textures are mapped on each point.  When FALSE, the vertex texture coordinates are used for the entire point. D3DRS_POINT_SCALE_ENABLE (BOOL; default FALSE) Controls computation of size for point primitives.  When TRUE, the point size is interpreted as a world space value, and is scaled by the distance function and the frustum->viewport Y axis scaling to compute the final screen space point size.  When FALSE, the point size is intrepreted as screen space and used directly. D3DRS_POINT_SCALE_A (FLOAT; default 1.0F; range >= 0.F) D3DRS_POINT_SCALE_B (FLOAT; default 0.0F; range >= 0.F) D3DRS_POINT_SCALE_C (FLOAT; default 0.0F; range >= 0.F) Controls for distance-based size attenuation for point primitives.  Active only when D3DRS_POINT_SCALE_ENABLE is TRUE. D3DRS_MULTISAMPLE_ANTIALIAS (BOOL; default TRUE) Determines how individual samples are computed when using a multisample rendertarget buffer.  When set TRUE, then the multiple samples are computed such that full-scene antialiasing is achieved (by sampling at different sample positions for each of the multiple samples).  When set FALSE, the multiple samples are all written with the same sample value (sampled at the pixel center), which allows non-antialiased rendering to a multisample buffer.  This renderstate has no effect when rendering to a single sample buffer. D3DRS_MULTISAMPLE_MASK (DWORD; default 0xffffffff) Each bit in this mask, starting at the LSB, controls modification of one of the samples in a multisample rendertarget.  Thus, for a 8 sample rendertarget, the low byte contains the 8 write enables for each of the 8 samples.  This renderstate has no effect when rendering to a single sample buffer. This renderstate enables use of a multisample buffer as an accumlation buffer, doing multipass rendering of geometry where each pass updates a subset of samples.   D3DRS_COLORWRITEENABLE (UINT; default 0x0000000F) Per-channel write enables for render target color buffer.  A set bit results in the color channel being updated during 3D rendering.  A clear bit results in the color channel being unaffected.  This functionality is available if the D3DPMISCCAPS_COLORWRITEENABLE capabilities bit is set for the device.  This renderstate does not affect clear. Uses the following bit assignments: #define D3DCOLORWRITEENABLE_RED     (1L<<0) #define D3DCOLORWRITEENABLE_GREEN   (1L<<1) #define D3DCOLORWRITEENABLE_BLUE    (1L<<2) #define D3DCOLORWRITEENABLE_ALPHA   (1L<<3) Appendix: Fixed Function Vertex Processing Device State Controls The following set of device state controls the fixed function vertex processing.  These controls do not have any effect when using programmed vertex shaders (except as indicated below). IDirect3DDevice8::SetRenderState D3DRENDERSTATE_SPECULARENABLE * D3DRENDERSTATE_FOGSTART ** D3DRENDERSTATE_FOGEND ** D3DRENDERSTATE_FOGDENSITY ** D3DRENDERSTATE_RANGEFOGENABLE D3DRENDERSTATE_LIGHTING D3DRENDERSTATE_AMBIENT D3DRENDERSTATE_FOGVERTEXMODE D3DRENDERSTATE_COLORVERTEX D3DRENDERSTATE_LOCALVIEWER D3DRENDERSTATE_NORMALIZENORMALS D3DRENDERSTATE_DIFFUSEMATERIALSOURCE D3DRENDERSTATE_SPECULARMATERIALSOURCE D3DRENDERSTATE_AMBIENTMATERIALSOURCE D3DRENDERSTATE_EMISSIVEMATERIALSOURCE D3DRENDERSTATE_VERTEXBLEND IDirect3DDevice8::SetTransform IDirect3DDevice8::SetMaterial IDirect3DDevice8::SetLight IDirect3DDevice8::LightEnable * - also controls addition of specular color in pixel pipeline ** - start/end/density also control pixel fog density computation Functional Description [descriptions/equations for fixed function vertex processing] Vertex Shader Program [equivalent vertex shader function program] Appendix: Debugging Support [debug monitor] Microsoft Corporation Confidential  PAGE  Vertex Buffer Another Vertex Buffer A Third Vertex Buffer Vertex Vertex Processing Clip/Setup/Rasterize SetStreamSource (attach vertex components to streams) Stream 0 Loader Stream 1 Loader Stream 2 Loader DrawPrimitive (load vertex components to form vertices and render)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dxg\swrast\inc\dx8sddifw readme.txt ===
Pluggable Software Rasterizer
(c) Microsoft 2000

  D3D8 now allows applications to register specific software rasterizers as
a software device, also known as pluggable software rasterizers. Only one
rasterizer can be registered with each Direct3D object, and then cannot be
unregisted.
  The rasterizer is registered with a call to
IDirect3D8::RegisterSoftwareDevice, and then devices are created with calls
to IDirect3D8::CreateDevice by passing in D3DDEVTYPE_SW. The void* parameter
to IDirect3D8::RegisterSoftwareDevice is a pointer to a function, typically
named D3D8GetSWInfo.

HRESULT APIENTRY D3D8GetSWInfo( D3DCAPS8* pCaps, PD3D8_SWCALLBACKS pCallbacks,
    DWORD* pNumTextures, DDSURFACEDESC** ppTexList);

  This primary entry point is used to retrieve the caps that the device
supports, the secondary entry points/ callbacks, and a list of supported render
surfaces/ textures. This function should be expected to be called multiple
times; but the returning parameters should never change. See the sample, D3D
headers, SDK & DDK documentation for descriptions of D3DCAPS8 and supported
surface lists. Many of the secondary entry points/ callbacks are unused due
to an aging API. The required list of entry points is as follows:

DWORD APIENTRY CreateSurface( LPDDHAL_CREATESURFACEDATA pData);
DWORD APIENTRY CreateSurfaceEx( LPDDHAL_CREATESURFACEEXDATA pData);
DWORD APIENTRY DestroySurface( LPDDHAL_DESTROYSURFACEDATA pData);
DWORD APIENTRY Lock( LPDDHAL_LOCKDATA pData);
DWORD APIENTRY Unlock( LPDDHAL_UNLOCKDATA pData);
DWORD APIENTRY ContextCreate( LPD3DHAL_CONTEXTCREATEDATA pData);
DWORD APIENTRY ContextDestroy( LPD3DHAL_CONTEXTDESTROYDATA pData);
DWORD APIENTRY DrawPrimitives2( LPD3DHAL_DRAWPRIMITIVES2DATA pData);

  Each of these callbacks has some documentation in the DDK help. But, in
essence, CreateSurface and DestroySurface must allocate and destroy 
"video memory" or "driver allocated" surfaces, textures, vertex buffers, etc.
CreateSurfaceEx is used to update the driver on the existence of system
memory surfaces and complex attachment arrangements. Lock and Unlock request
the driver to lock and unlock "video memory" or "driver allocated" surfaces.
ContextCreate and ContextDestroy must allocate and destroy device contexts.
DrawPrimitives2 is a complex callback which requires a context to parse a
command buffer to manipulate render states and rasterize primitives.

  The DX8SDDI framework provides templated classes, which provide a design mix
between STL and ATL. This provides a highly componentized and extendable
programming framework without much performance penalty, as long as the compiler
is able to efficiently compile STL objects or inline deeply. In the spirit of
generic programming, there are 5 major concepts that make up the driver
framework: Driver, PerDDrawData, SurfDBEntry, Surface, and Context. Typically,
as in ATL, to create one's own Driver concept class, a developer would inherit
from CSubDriver with the parent class a template parameter of the CSubDriver.
For ex:

class CMyDriver:
    public CSubDriver< CMyDriver, ... >
{
};

  This allows the CSubDriver to call supplied or overriden functions provided
by CMyDriver without the performance penalty of virtual functions. The naming
convention of the base implementation is always CSub*****, such as CSubDriver,
CSubPerDDrawData, and CSubContext. Sometimes, all the functions provided by
a CSub***** base class is all that is needed. Since a CSub***** base class
cannot be created without deriving from it, there is another naming convention
for the classes which have such a minimal implementation. They are named
CMinimal***** classes, such as CMinimalPerDDrawData. All these classes do is
derive from the CSub***** base class and publicize the constructor and
destructor. The CMinimalDriver is an exception to this rule, as it can't be
created directly either. A unique driver class must be created and inherit
even from CMinimalDriver< * >.
For ex:

template< class TD>
class CMinimalPerDDrawData:
    public CSubPerDDrawData< CMinimalPerDDrawData< TD>, TD>
{
public:
    CMinimalPerDDrawData( TD& Driver, DDRAWI_DIRECTDRAW_LCL& DDLcl)
        :CSubPerDDrawData< CMinimalPerDDrawData< TD>, TD>( Driver, DDLcl)
    { }
    ~CMinimalPerDDrawData()
    { }
};

  Note, CMinimalPerDDrawData still needs to know the concept class of the
Driver, so that it can store a local reference back to it. Therefore, it
still has a template parameter which requires the type of Driver, TD. This
could be CMinimalDriver, a class derived from CSubDriver, or a completely
custom class which still conforms to the concept of Driver. This way a
developer can replace each component of the entire driver as need be without
modifying the other components.

/------------------------------------------------------------------------------\
|
| Driver
|
\------------------------------------------------------------------------------/
  The first concept is the Driver class. This class handles direct interaction
of mapping the primary and secondary entry points from the SDDI to the
appropriate concept objects. It also enforces the restriction of only one
Driver class per process. The CSubDriver class provides a static pointer to
the one and only Driver in the process and provides a GetSWInfo function
which has to be called by a "bridge" function. The pointer to this bridge
function is what should be passed to IDirect3D8::RegisterSoftwareDevice. Also,
the static variable must be defined somewhere, or the compiler will error.
For ex, in the sample:

class CMyDriver:
    public CMinimalDriver< CMyDriver, CMyRasterizer>
{
  ...
};

// Define static variable and initialize to NULL.
CMyDriver* CMyDriver::sm_pGlobalDriver= NULL;

// Somewhere the class must be created. A global class is dangerous, because
// C++ doesn't guarentee creation order of global/ static data. There is some
// global data which might not be created before the driver does which should
// be. So, it is safer to create the class within main. Otherwise, a global
// class is possible if construction order doesn't matter:
//
// CMyDriver g_GlobalDriver;
// CMyDriver* CMyDriver::sm_pGlobalDriver= &g_GlobalDriver;
// 
BOOL WINAPI DllMain( HINSTANCE hInstance, DWORD dwReason, LPVOID lpvReserved)
{
    switch( dwReason)
    {
        case( DLL_PROCESS_ATTACH):
            try {
                CMyDriver::sm_pGlobalDriver= new CMyDriver;
            } catch( ... ) {
                // This can catch any constructor execeptions
                // as well as bad_alloc. 
            }
            if( NULL== CMyDriver::sm_pGlobalDriver)
                return FALSE;
            break;

        case( DLL_PROCESS_DETACH):
            if( NULL!= CMyDriver::sm_pGlobalDriver)
                delete CMyDriver::sm_pGlobalDriver;

            CMyDriver::sm_pGlobalDriver= NULL;
            break;
    }
    return TRUE;
}

// Bridge function which calls the Driver object's GetSWInfo. D3D8GetSWInfo
// should be passed into RegisterSoftwareDevice.
HRESULT APIENTRY
D3D8GetSWInfo( D3DCAPS8* pCaps, PD3D8_SWCALLBACKS pCallbacks,
    DWORD* pNumTextures, DDSURFACEDESC** ppTexList)
{
    return CMyDriver::sm_pGlobalDriver->GetSWInfo( *pCaps, *pCallbacks,
        *pNumTextures, *ppTexList );
}

  The Driver concept class exposes the following types: TDriver, TContext,
TPerDDrawData, TSurface, as well as a few others. The Driver contains a STL
vector of TContext*s, which tracks all instances of Contexts; and a STL vector
of TSurface*s, which tracks all instances of Surfaces or driver allocated
surfaces. The Driver also contains a STL map associating a
LPDDRAWI_DIRECTDRAW_LCL to a TPerDDrawData. The Driver also maps the secondary
entry points to their respective concept objects.

-CreateSurface
  This entry point is requesting the driver to allocate a "video memory" or
"driver allocated" surface. This is equivalent to new TSurface;. However, the
creation is actually done by a surface allocator object which can, naturally,
be replaced: TSurfAlloc.
 
-DestroySurface
  This entry point is requesting the driver to deallocate a "video memory" or
"driver allocated" surface. This is equivalent to delete TSurface;

-CreateSurfaceEx
  This entry point is notifing the driver of "system memory" surface and
"video memory" surface creation and destruction. This is the point where each
surface gets assigned a DWORD handle, except "video memory" surfaces already
know theirs from CreateSurface. The Driver passes this to
TPerDDrawData::SurfaceCreated and TPerDDrawData::SurfaceDestroyed which will
update the Surface Database with information about surfaces, their attachment
heirarchy, and their DWORD handle.

-Lock
  This entry point is requesting the driver to lock a "video memory" or
"driver allocated" surface. The Driver maps this to TSurface::Lock,
which returns the pointer to the surface bits.

-Unlock
  This entry point is requesting the driver to unlock a "video memory" or
"driver allocated" surface. The Driver maps this to TSurface::Unlock.

-ContextCreate
  This entry point is requesting the driver to allocate a device context.
This is equivalent to new TContext.

-ContextDestroy
  This entry point is requesting the driver to deallocate a device context.
This is equivalent to delete TContext;

-DrawPrimitives2
  This entry point contains all the instructions to change render states and
rasterize primitives. It is mapped directly to the corresponding
TContext::DrawPrimitves2.

-ValidateTextureStageState
  This entry point is slightly optional as it is directly called by an
application. Since the application knows whether it calls
IDirect3DDevice8::ValidateDevice, it can appropriately add code for
ValidateTextureStageState. For maximum compatability, it is suggested to
have this implemented. The Driver maps this call to the corresponding
TContext::ValidateTextureStageState.

-GetDriverState
  This entry point is slightly optional as it is directly called by an
application. Since the application knows whether it calls
IDirect3DDevice8::GetInfo, it can appropriately add code for GetDriverState.
For maximum compatability, it is suggested to have this implemented. The
Driver maps this call to the corresponding TContext::GetDriverState.

  If any other entry points or callbacks are called which do not have a default
implementation, an assert will fire in debug mode. Then, a developer can
override the insufficient entry point CSubDriver provides.

/------------------------------------------------------------------------------\
|
| PerDDrawData and SurfDBEntry
|
\------------------------------------------------------------------------------/
  The second concept is the PerDDrawData class. This appropriately named class
really just stores any information which should be associated with a SDDI
DDraw object (DDRAWI_DIRECTDRAW_LCL). Typically, it is considered invalid to
store pointers to DDRAWI***** objects; and even worse to read or write from this
pointer outside of the callback context which it was passed into. However, it
is allowable to store a pointer to DDRAWI_DIRECTDRAW_LCL to make the distinction
of "per DDraw" in the sense used here. There can be multiple DDraw objects
when multiple Direct3D8 objects are created. If the same driver is registered
with each Direct3D8 objects, then multiple DDraw objects will be exposed to
the driver. The PerDDrawData class needs to contain a database of DWORD
surface handles to information about the surface for the Context.
  For example, if the application specifies IDirect3DDevice8::SetTexture,
the SW device, known by us as a Context concept, needs to be able to at least
get the lpVidMem pointer to the surface bits from the DWORD passed into
SetTexture. The Context will also need to be able to extract other information
from the DWORD, like pixel format, width, height, etc., especially for "system
memory" surfaces. All this information is stored in the PerDDrawData surface
database. This must be, because the DWORD handles are unique per DDraw object.
So, the driver must be able to convert a LPDDRAWI_DIRECTDRAW_LCL and DWORD
surface handle to information about the surface for the Context.
  The PerDDrawData exposes the following types: TDriver and the third concept,
TSurfDBEntry. The PerDDrawData contains a surface database which is a STL map
which associates DWORD surface handles to TSurfDBEntry objects, which contain
information about the surface. The PerDDrawData must implement SurfaceCreated
and SurfaceDestroyed for the Driver to call. It must also implement GetDriver
and GetSurfDBEntry for the Context to use.
  Note that there should be at least as many TSurfDBEntry objects as there are
TSurface objects. This is because the SDDI will notify the driver of the
surface characteristics and attachment configuration of any "system memory"
surfaces and any "video memory" surface belonging to the driver. This is the
only way the driver can figure out the attachment configuration of "video
memory" surfaces.
  The Driver object knows how to navigate from a DDRAWI_DDRAWSURFACE_LCL object
and a SurfDBEntry object to a Surface object. Each Surface object also has a
DWORD surface handle field which allows one to find the associated SurfDBEntry
object by looking up the handle in the PerDDrawData.
  The typical SurfDBEntry contains accessor functions named similar to the
data stored in the DDRAWI_DDRAWSURFACE_LCL. For example, the CSurfDBEntry
exposes:
GetLCLdwFlags() == DDRAWI_DDRAWSURFACE_LCL::dwFlags
GetLCLddsCaps() == DDRAWI_DDRAWSURFACE_LCL::ddsCaps
GetMOREddsCapsEx() == DDRAWI_DDRAWSURFACE_MORE::ddsCapsEx
GetGBLfpVidMem() == DDRAWI_DDRAWSURFACE_GBL::fpVidMem
etc.

/------------------------------------------------------------------------------\
|
| Surface
|
\------------------------------------------------------------------------------/
  The fourth concept is the Surface class. This represents a "video memory" or
"driver allocated" surface, eventhough "video memory" doesn't accurately
represent the reality. Typically, the driver will want to create multiple
classes which implemented a common ISurface interface either based on pixel
format or surface role. This is because the Driver object needs to be able to
lock and unlock each surface. The default implementation of Surface is an
interface, IVidMemSurface. This means that when the Driver maps the Lock and
Unlock entry points to TSurface::Lock and TSurface::Unlock, the Driver is
actually calling a virtual function. Also, the Context concept class need to
be able to Clear all render targets. Therefore, the IVidMemSurface interface
includes a Clear function. Thus, the Context is also calling a virtual Clear
function to clear a surface. A developer adding "video memory" textures to the
framework can implement a trivial IVidMemSurface::Clear for these textures by
asserting false and returning failure. This is because non-render targets
should never be cleared.
  Nothing prevents the developer from removing the interface, and using a
purely generic surface class. But, it was expected that the more common
scenario would be to provide an interface here.
  As indicated before, the Surface class needs to implement Lock and Unlock
for the Driver and Context to call. The Context also needs to be able to call
Clear.

/------------------------------------------------------------------------------\
|
| Context
|
\------------------------------------------------------------------------------/
  The final, fifth main concept is the Context class. This represents the
object which implements the IDirect3DDevice8 interface to the application.
The primary functions which it needs to implement is DrawPrimitves2 and
optionally, ValidateTextureStageState. This is the most complex concept class
there is and the implementation was broken up into multiple classes, to again
provide a maxmimum amount of componentization and extendability.
  The entry point DrawPrimitives2 needs to parse a command buffer for
individual commands and execute them. Whatever parses the command buffer also
needs to be aware of state sets. See DDK documentation for a description.
The default implementation for DrawPrimitives2 is CStdDrawPrimitives2. It is
expected that the Context will inherit from CStdDrawPrimitives2 if its
implementation is wanted.
  CStdDrawPrimitives2::DrawPrimitives2 first wraps the
D3DHAL_DRAWPRIMITIVES2DATA class with a class that exposes the command
buffer as a STL container complete with iterators. It uses a Parser
function to call a member function corresponding to each D3DHAL_DP2COMMAND.
The naming convention for these Context member functions are DP2*****. The
CStdDrawPrimitives2 also takes care of state sets. In order to handle state
set recording and capturing, CStdDrawPrimitives2 uses another Parser to call
a recording member function corresponding to each D3DHAL_DP2COMMAND. The
naming convention for these Context member functions are RecDP2*****.
There are also classes which implement many of the required DP2***** and
RecDP2***** functions. So, inheriting from CStdDrawPrimitives2 should be seen
as providing the Context with an implementation for DrawPrimitives2, but also
as seen as needing implementations for many DP2 commands, implementations for
recording many DP2 commands, a collection of DP2Operations <=> member function
bindings, and a collection of DP2Operations <=> recording member function
bindings. For example, let's examine a new CMyContext:

class CMyContext:
    public CSubContext< CMyContext, ... >
{
};

  CMyContext still has no DrawPrimitives2 entry point. CSubContext exposes
the following types: TDriver, TSurface, TPerDDrawData, and TDP2Data.
CSubContext stores a reference to the corresponding PerDDrawData, and
the render target and zbuffer surface pointers. The render target and
zbuffer are TSurface*, not TSurfDBEntry*, as render targets must be
"driver allocated". CSubContext also provides a few functions, like
GetPerDDrawData, DP2SetRenderTarget, and DP2Clear. The last two functions
provide a default implementation to handle the DP2OP_SETRENDERTARGET and
DP2OP_CLEAR commands. However, nothing uses these functions yet.

// Forward declaration
class CMyContext;

// For minimal amount of typing/ retyping.
typedef CStdDrawPrimitves2< CMyContext> TStdDrawPrimitves2;

class CMyContext:
    public TStdDrawPrimitves2,
    public CSubContext< CMyContext, ... , TStdDrawPrimitves2::TDP2Data >
{
};

  Now, CMyContext has a DrawPrimitives2 entry point for the Driver to call,
which is provided by CStdDrawPrimitives2. CMyContext also has default support
for DP2OP_SETRENDERTARGET, DP2OP_CLEAR; but CStdDrawPrimitives2 doesn't have
information on which member function to call for each DP2 command. Note that
TDP2Data is used as a template parameter for CSubContext. This is because
the first paramter of the DP2***** member functions is templatized for
extendability reasons. For CSubContext's DP2SetRenderTarget and DP2Clear
to have the same parameter types as CStdDrawPrimitives2 can call, this is
needed.

// Forward declaration
class CMyContext;

// For minimal amount of typing/ retyping.
typedef CStdDrawPrimitves2< CMyContext> TStdDrawPrimitves2;

class CMyContext:
    public TStdDrawPrimitves2,
    public CSubContext< CMyContext, ... , TStdDrawPrimitves2::TDP2Data >
{
public:
    typedef block< TStdDrawPrimitives2::TDP2CmdBind, 2> TDP2Bindings;

protected:
    static const TDP2Bindings c_DP2Bindings;    

public:
    CMyContext( ... )
        :TStdDrawDrimitives2( c_DP2Bindings.begin(), c_DP2Bindings.end()),
        CSubContext< CMyContext>( ... )
    { }
};

const CMyContext::TDP2Bindings CMyContext::c_DP2Bindings=
{
    D3DDP2OP_SETRENDERTARGET, DP2SetRenderTarget,
    D3DDP2OP_CLEAR,           DP2Clear
};

  Now, CMyContext has provided CStdDrawPrimitives2 with a collection of
bindings. CStdDrawPrimitives2 will now call CMyContext::DP2SetRenderTarget,
which is really CSubContext< CMyContext, ... >::DP2SetRenderTarget when
a DP2 command with D3DDP2OP_SETRENDERTARGET is encountered. There are
other classes which can provide default implementations for each DP2
operation and have the naming convention CStdDP2*****, like
CStdDP2RenderStateStore, which provides DP2RenderState and RecDP2RenderState.
Also, any CStdDP2*****Store class really just stores the parameters of the
command for later reference. For example, CStdDP2WInfoStore just
stores the D3DHAL_DP2WINFO data and provides functions so that the Context,
itself, can be converted to D3DHAL_DP2WINFO or can be retrieved by calling
TContext::GetDP2WInfo.
  The fully functional CMyContext which exposes 1 stream, no TnL support, and
only legacy pixel shading would look something like:
  
// Forward declaration
class CMyContext;

// For minimal amount of typing/ retyping.
typedef CStdDrawPrimitves2< CMyContext> TStdDrawPrimitves2;

// Actually, TStdDrawPrimitives2::TDP2Data can be left out of the template
// parameters for each of the CStdDP2***** classes, as long as the default
// TDP2Data is used from CStdDrawPrimitives2. This is the same default that
// all the other classes have.
class CMyContext:
    public TStdDrawPrimitves2,
    public CSubContext< CMyContext, ... >,
    public CStdDP2ViewportInfoStore< CMyContext>,
    public CStdDP2WInfoStore< CMyContext>,
    public CStdDP2RenderStateStore< CMyContext>,
    public CStdDP2TextureStageStateStore< CMyContext>,
    public CStdDP2SetVertexShaderStore< CMyContext>,
    public CStdDP2VStreamManager< CMyContext, CVStream< ... > >,
    public CStdDP2IStreamManager< CMyContext, CIStream< ... > >
{
public:
    typedef block< TStdDrawPrimitives2::TDP2CmdBind, 15> TDP2Bindings;
    typedef block< TStdDrawPrimitives2::TRecDP2CmdBind, 7> TRecDP2Bindings;

protected:
    static const TDP2Bindings c_DP2Bindings;
    static const TRecDP2Bindings c_RecDP2Bindings;

public:
    CMyContext( ... )
        :TStdDrawDrimitives2( c_DP2Bindings.begin(), c_DP2Bindings.end(),
			c_RecDP2Bindings.begin(), c_RecDP2Bindings.end()),
        CSubContext< CMyContext>( ... )
    { }
};

const CMyContext::TDP2Bindings CMyContext::c_DP2Bindings=
{
    D3DDP2OP_VIEWPORTINFO,          DP2ViewportInfo,
    D3DDP2OP_WINFO,                 DP2WInfo,
    D3DDP2OP_RENDERSTATE,           DP2RenderState,
    D3DDP2OP_TEXTURESTAGESTATE,     DP2TextureStageState,
    D3DDP2OP_CLEAR,                 DP2Clear,
    D3DDP2OP_SETRENDERTARGET,       DP2SetRenderTarget,
    D3DDP2OP_SETVERTEXSHADER,       DP2SetVertexShader,
    D3DDP2OP_SETSTREAMSOURCE,       DP2SetStreamSource,
    D3DDP2OP_SETSTREAMSOURCEUM,     DP2SetStreamSourceUM,
    D3DDP2OP_SETINDICES,            DP2SetIndices,
    D3DDP2OP_DRAWPRIMITIVE,         DP2DrawPrimitive,
    D3DDP2OP_DRAWPRIMITIVE2,        DP2DrawPrimitive2,
    D3DDP2OP_DRAWINDEXEDPRIMITIVE,  DP2DrawIndexedPrimitive,
    D3DDP2OP_DRAWINDEXEDPRIMITIVE2, DP2DrawIndexedPrimitive2,
    D3DDP2OP_CLIPPEDTRIANGLEFAN,    DP2ClippedTriangleFan
};

const CMyContext::TRecDP2Bindings CMyContext::c_RecDP2Bindings=
{
    D3DDP2OP_VIEWPORTINFO,          RecDP2ViewportInfo,
    D3DDP2OP_WINFO,                 RecDP2WInfo,
    D3DDP2OP_RENDERSTATE,           RecDP2RenderState,
    D3DDP2OP_TEXTURESTAGESTATE,     RecDP2TextureStageState,
    D3DDP2OP_SETVERTEXSHADER,       RecDP2SetVertexShader,
    D3DDP2OP_SETSTREAMSOURCE,       RecDP2SetStreamSource,
    D3DDP2OP_SETINDICES,            RecDP2SetIndices
};

/------------------------------------------------------------------------------\
|
| Summary
|
\------------------------------------------------------------------------------/
  It is expected that a pluggable software rasterizer developer will first
start by defining a CMyRasterizer and a CMyDriver, which derives from
CMinimalDriver just like in the sample to get acquanted with the framework and
verify the plumbing.
  The expected next step is to define a CMyContext, which derives from
CSubContext, CStdDrawPrimitives2, & a bunch of CStdDP2*****, just like
CMinimalContext; and a CMyDriver which derives from CSubDriver. The CMyContext
should integrate the old CMyRasterizer functionality.
  The expected next step is then to replace CMinimalPerDDrawData with
CMyPerDDrawData, which derives from CSubPerDDrawData; and then start
replacing many of the other components with custom pieces (CSurface,
CStateSet, CSurfDBEntry, CVStream, CIStream, CPalDBEntry, etc).
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dxg\swrast\rgb\readme.txt ===
**** directories *****

d3dif - D3D interface.  This contains the sources for the interface
between the D3D runtime and the rasterizers.

bin - Rasterizer-specific tools.  This holds the m4.exe needed to build
the numerous m4-ized C++ and asm source files.

inc - Rasterizer-private header files.

refrast - Reference rasterizer sources.  This is the core of the reference
rasterizer, holding all sources which are made public with the DDK.  The
reference rasterizer core is fully independent of any D3D or DDraw
internals, and is connected to the runtime via refif.cpp in the d3dif
directory.  The file inc\refrast.h is also part of the reference
rasterizer package.

setup - Primitive setup.  Contains C++ and x86 assembly for primitive
setup and edge walking.

spaninit - Span iterator management code.

cspan - C span iterators.  These are the span iterators used on non-MMX
(including alpha) machines.

cmmxspan, mmxemul - C span iterators which closely model the MMX versions
for development and debug purposes.  The mmxemul is a library which
emulates the MMX arithmetic functions.  This is a full set of span
iterators which exactly matches the set in mmxspan, and are used when the
???  device GUID is passed to device create.  These are for internal
debug/test only and are not used in the product (the associated GUID is
not in the public d3d.h).

mmxspan - MMX assembly span iterators.

mlspan - Monolithic span iterators.

rampmat - Ramp rasterizer material processing.  See rampmat/ramp.txt for
further explanation (the horror...).

rampspan - Ramp rasterizer span iterators.  C and x86 assembly.

d3drast - This directory is used only to build the d3drast.dll, which is a
library which contains only the rasterizers (accessed via the HAL provider
interface).  This is a test-only library and is not part of the product
build.

========================================================================
    CONSOLE APPLICATION : Rast Project Overview
========================================================================

AppWizard has created this Rast application for you.  
This file contains a summary of what you will find in each of the files that
make up your Rast application.
Rast.vcproj
    This is the main project file for VC++ projects generated using an Application Wizard. 
    It contains information about the version of Visual C++ that generated the file, and 
    information about the platforms, configurations, and project features selected with the
    Application Wizard.

Rast.cpp
    This is the main application source file.

/////////////////////////////////////////////////////////////////////////////
Other standard files:

StdAfx.h, StdAfx.cpp
    These files are used to build a precompiled header (PCH) file
    named Rast.pch and a precompiled types file named StdAfx.obj.

Resource.h
    This is the standard header file, which defines new resource IDs.
    Microsoft Visual C++ reads and updates this file.
/////////////////////////////////////////////////////////////////////////////
Other notes:

AppWizard uses "TODO:" comments to indicate parts of the source code you
should add to or customize.

/////////////////////////////////////////////////////////////////////////////
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dxg\swrast\rgb\mmxspan\monolith.txt ===
This is a brief description of what is in the ml*.mas MMX monolithic
routines.  All monolithics handle both Gouraud and Flat shading (although
Flat shading is no faster).

16 bit Z Buffer (Less Than or equal) 565 color output mode, 565 texture input
1. No Texture
2. Non Perspective Texturing Point
3. Perspective Texturing Point
4. Perspective Texturing Bilinear
5. Non Perspective Texturing Point Modulate
6. Perspective Texturing Point Modulate
7. Perspective Texturing Bilinear Modulate

No Z Buffer 565 color output mode, 565 texture input
8. No Texture
9. Non Perspective Texturing Point
10. Perspective Texturing Point
11. Perspective Texturing Bilinear
12. Non Perspective Texturing Point Modulate
13. Perspective Texturing Point Modulate
14. Perspective Texturing Bilinear Modulate

16 bit Z Buffer (Less Than or equal) 32 bit color output mode,  32 bit texture
input
15. No Texture
16. Non Perspective Texturing Point
17. Perspective Texturing Point
18. Perspective Texturing Bilinear
19. Non Perspective Texturing Point Modulate
20. Perspective Texturing Point Modulate
21. Perspective Texturing Bilinear Modulate

No Z Buffer 32 bit color mode,  32 bit texture input
22. No Texture
23. Non Perspective Texturing Point
24. Perspective Texturing Point
25. Perspective Texturing Bilinear
26. Non Perspective Texturing Point Modulate
27. Perspective Texturing Point Modulate
28. Perspective Texturing Bilinear Modulate
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dxg\swrast\rgb\mmxspan\readme.txt ===
Status of general MMX span routines.

09/08/97 Checked in MMX code.
  There is no way that the current code will compile and run.  I haven't
  even tried to compile it. This is primarily to have it backed up and
  to let anyone that is interested see what has been done.
  The orginal C (or MCP) code are comments of these ASM or MAS files.

  The ACP directory contains a program that generates the .INC file
  for offsets to all the data.  This program was used by Drew and
  seems to work better than H2INC.  We should probably only have one
  of these that would go in the inc directory, but it's not done that
  way now (Plus, my code doesn't generate it based on a makefile.

  Three regular registers have been set aside for use to access the data.
  Since these are passed to every routine, I don't have to pass anything
  on the stack as long as I don't modify them.  I have modified them a
  couple of times before I added this and they need to be changed to esi,
  edi, ebp or eax (eax is usually used for the next indirect jump).

  ebx is a pointer to the D3DI_SPANITER data (Also Accesses the SI stuff
    inside it).
  ecx is a pointer to the D3DI_RASTPRIM data.
  edx is a pointer to tge D3DI_RASTSPAN data.

  There are a few very useful m4 macros to acess this data in
  readable way (It also made converting C code easier):

define(`XpCtxSI',`[ebx+D3DI_SPANITER_$1]')dnl
define(`XpCtx',`[ebx+D3DI_RASTCTX_$1]')dnl
define(`XpP', `[ecx+D3DI_RASTPRIM_$1]')dnl
define(`XpS', `[edx+D3DI_RASTSPAN_$1]')dnl

  Things that need to be done.
    1) New Special W divide.   MMX newton's method code has already
        been written, but it was very specialized (I negated the
        OoW and OoWDX so that 2 - Oow*iW could be done with a pmadd
        and a few other things.)  Code shouldn't have to change much.

    2) Assembly equivalents to the ACMP, ZCMP macros.  A version of
        these has also been written, but most compares were done in
        a reverse order (to preserve registers).  The MMX Alpha and
        Z setup will most likely have to be different.  This means
        that the atest.asm has not been coded.  A test.mas file is
        written, and is missing ZCMP16 and ZCMP32.  The other 4
        specific code cases are done exactly like the C version
        except the iXorMask always seems to be inverted do to how
        the comparison is done.

    3) BufWrite is not implemented.  The code for doing this has
        been done in APP notes.  The 16 bit cases use a pmaddw
        to combine the colors more quickly than shifting.  There
        is also work beening done on a quick dithering routine.
        The MMX dithering routine will use a pcmpgtw to compare
        with the dither table and the do a psubssw since if the
        color value is to be incremented, then the mask will be
        all ones (= -1). Subtracting it will increment the color.
        The saturation is used to not increase too much.  The
        only problem to this is that the color is unsigned so
        it has to be shifted down by one to saturate to 7fff.

    4) BuffRead is not done.  It uses almost identical routines
        as those in texread.


    5) Lots of clean up and 64 bit constants that need to be in
        memory.  I have to figure out what registers get passed
        to routines that are called and what is passed back.
        In some cases, it may be possible to pass data from one
        bead to the next using registers.  This maybe difficult
        though.

    6) ColorBld conversion.  Mostly ROP stuff and calling of
        bldfuncs.asm.  ROP stuff should be pretty easy.

    7) Since function names are the same, if I made a header
        file declaring them extern "C" { },  the assembly code
        could concievably execute in place of the current c code.
        This is where the true bomb test is.

    8) There's probably more, but there is always more.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dxvb\dx7vb\inc\readme.txt ===
These are DX7 Dsound/DMusic headers needed to build the legacy Dx7vb dll
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\gamectrl\coffbasd.txt ===
;  COFFBASD.TXT
;
;    This file defines the base addresses for the Gaming Controller CPL
;    components IN DEBUG BUILDS as they aren't defined elsewhere.
;    Ideally, these should be drawn from some global coffbase.txt but
;    DirectX does not have one and besides the CPL parts only get loaded
;    in one process space so should not be in the shared space.
;
;    The linker uses this file to generate the base address with the
;    following syntax:
;
;    -base:@coffbase.txt,kernel32
;
;    which is the same as:
;
;    -base:0xbff70000
;
;    
joy              0x2bf30000 0x000d0000
gchand           0x2be70000 0x000c0000
gcdef            0x2bd50000 0x000e8000
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\gamectrl\noplace.txt ===
;
;   This is a deliberately empty text file used to redirect binplace to dump 
;   for specific varients of a build
;
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\gamectrl\coffbase.txt ===
;  COFFBASE.TXT
;
;    This file defines the base addresses for the Gaming Controller CPL
;    components IN THE RETAIL BUILD as they aren't defined elsewhere.
;    Ideally, these should be drawn from some global coffbase.txt but
;    DirectX does not have one and besides the CPL parts only get loaded
;    in one process space so should not be in the shared space.
;
;    The linker uses this file to generate the base address with the
;    following syntax:
;
;    -base:@coffbase.txt,kernel32
;
;    which is the same as:
;
;    -base:0xbff70000
;
;    

joy              0x2bfd0000 0x00030000
gchand           0x2bfa0000 0x00020000
gcdef            0x2bf60000 0x00050000
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\gamectrl\client\res\dijoy_cm.rtf ===
{\rtf1\ansi \deff7\deflang1033{\fonttbl{\f7\fswiss\fcharset0\fprq2 MS Sans Serif{\*\falt AvantGarde};}{\f8\froman\fcharset0\fprq2 Times{\*\falt Times New Roman};}{\f11\fmodern\fcharset0\fprq1 Courier New{\*\falt Courier};} {\f61\fmodern\fcharset0\fprq1 Monotype.com;}{\f62\fswiss\fcharset0\fprq2 Franklin Gothic Demi{\*\falt Times New Roman};}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255; \red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;} {\stylesheet{\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 \snext0 Normal;}{\s1\li115\ri130\sb280\sa40\sl-240\slmult0\widctlpar \b\f7\fs16 \sbasedon0\snext0 heading 1;}{\s2\li115\ri130\sb120\sl-240\slmult0\widctlpar \b\f7\fs16 \snext0 heading 2;}{ \s3\li115\ri130\sb120\sa60\sl-240\slmult0\widctlpar \f7\fs16 \snext0 heading 3;}{\s4\fi-245\li360\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 \sbasedon0\snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}{ \s15\fi-187\li274\ri130\sb80\sl-120\slmult0\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx302 \f7\fs16 \sbasedon0\snext0 a/k link;}{\*\cs16 \additive\cf6 \sbasedon10 annotation reference;}{\s17\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16  \sbasedon0\snext17 annotation text;}{\s18\li115\ri130\sb120\sa120\widctlpar \f7\fs16 \snext0 bitmap;}{\s19\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 \sbasedon0\snext0 Context;}{\*\cs20 \additive\up6 \sbasedon10 footnote reference;}{ \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 \sbasedon0\snext0 footnote text;}{\s22\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 \sbasedon0\snext22 Jl;}{\s23\fi-187\li302\ri130\sb80\sl-240\slmult0\widctlpar\tx302 \f7\fs16  \sbasedon0\snext24 Lb1;}{\s24\fi-187\li302\ri130\sb48\sl-240\slmult0\widctlpar\tx302 \f7\fs16 \sbasedon23\snext24 Lb2;}{\s25\fi-158\li461\ri130\sb48\sl-240\slmult0\widctlpar\tx461 \f7\fs16 \sbasedon24\snext25 Lb3;}{\s26\li302\ri130\sb60\sl-240\slmult0 \widctlpar\tx302 \f7\fs16 \sbasedon24\snext24 Lp1;}{\s27\li720\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 \sbasedon0\snext0 Normal Indent;}{\s28\fi-187\li274\ri130\sl-120\slmult0\widctlpar\tx302 \f7\fs16 \sbasedon15\snext28 oem a/k link;}{ \s29\fi-302\li418\ri86\sa120\sl-240\slmult0\widctlpar \f7\fs16 \sbasedon0\snext29 oem button;}{\s30\fi-302\li418\ri86\sb160\sa120\sl-240\slmult0\widctlpar\tx720 \f7\fs16 \sbasedon29\snext30 oem button1;}{\s31\fi-187\li302\sb160\sl-240\slmult0 \widctlpar\tx302 \f7\fs16 \sbasedon0\snext31 oem Lb1;}{\s32\li115\ri130\sb160\sl-240\slmult0\widctlpar \f7\fs16 \sbasedon0\snext32 oem normal;}{\s33\li115\ri2160\sb160\sl-240\slmult0\widctlpar \f7\fs16 \sbasedon0\snext33 oem popup;}{\s34\ri2160\widctlpar  \f7\fs12 \sbasedon33\snext34 oem popup end;}{\s35\fi-187\li302\ri2160\sb160\sl-240\slmult0\widctlpar\tx302 \f7\fs16 \sbasedon31\snext35 oem popup Lb1;}{\s36\li115\sb240\sl-240\slmult0\widctlpar \b\f7\fs16 \sbasedon0\snext36 oem proc head;}{ \s37\li115\ri86\sb80\sl-240\slmult0\widctlpar \f7\fs16 \sbasedon0\snext0 oem tb text;}{\s38\li58\sb80\sl-240\slmult0\widctlpar \f7\fs16 \sbasedon0\snext38 oem tb text 2;}{\s39\fi-187\li245\sb80\sl-240\slmult0\widctlpar\tx245\tx302 \f7\fs16  \sbasedon23\snext39 oem tb text 2 Lb1;}{\s40\fi-187\li245\sb48\sl-240\slmult0\widctlpar\tx245\tx302 \f7\fs16 \sbasedon24\snext40 oem tb text 2 Lb2;}{\s41\fi-158\li403\sb48\sl-240\slmult0\widctlpar\tx403\tx461 \f7\fs16 \sbasedon25\snext41  oem tb text 2 Lb3;}{\s42\li115\ri130\sb80\widctlpar \f7\fs16 \sbasedon0\snext42 Pop-up;}{\s43\li115\ri130\sb120\sa40\sl-240\slmult0\widctlpar \b\f7\fs16 \snext23 proc head;}{\s44\li115\ri86\sb280\sl-240\slmult0\widctlpar \f7\fs16 \sbasedon29\snext29  table top;}{\s45\li58\sb280\sl-240\slmult0\widctlpar \f7\fs16 \sbasedon44\snext38 table top 2;}{\s46\fi-317\li432\ri130\sb120\sl-240\slmult0\widctlpar\tx432\tx576 \f7\fs16 \sbasedon24\snext46 Tbr1;}{\s47\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16  \sbasedon0\snext0 Tech Rev;}{\s48\li58\sb80\sl-240\slmult0\widctlpar \f7\fs16 \sbasedon44\snext48 vertrule;}{\s49\fi-302\li388\ri130\sb80\sl-240\slmult0\widctlpar\tqr\tx274\tx389 \f7\fs16 \sbasedon23\snext49 Lb1a;}{ \s50\fi-302\li388\ri130\sb48\sl-240\slmult0\widctlpar\tqr\tx274\tx389 \f7\fs16 \sbasedon49\snext50 Lb2a;}{\s51\fi-547\li662\ri187\sb60\sa60\sl240\slmult0\nowidctlpar\tx660 \f7\fs16 \sbasedon0\snext51 Np;}{\s52\li115\ri130\sb80\sl-240\slmult0\widctlpar  \f11\fs16 \sbasedon0\snext0 Code;}{\*\cs53 \additive\b \sbasedon10 UI;}{\*\cs54 \additive\scaps\fs14 \sbasedon10 Smallcaps;}{\s55\nowidctlpar\tx480\tx960\tx1440\tx1920\tx2400\tx2880\tx3360\tx3840\tx4320 \f61\fs20\cf1 \snext55 macro;}{ \s56\li115\ri130\sb80\sa100\sl-240\slmult0\widctlpar\noline\hyphpar0 \f7\fs16\kerning20 \sbasedon0\snext0 Text After Ref Label,tarl;}{\s57\li115\ri130\sb140\sl-440\slmult0\nowidctlpar\noline\hyphpar0 \f62\fs32\kerning20 \sbasedon0\snext57 toc 1,toc1;}{ \s58\li780\ri2820\sb80\sl-14\slmult0\keepn\nowidctlpar \f8\fs16 \sbasedon0\snext0 Index;}{\*\cs59 \additive\cf12 \sbasedon10 HTML;}}{\info{\title Create Help files for Winhelp 4.0}{\author benmoe} {\doccomm Version of what7.dot specific for NT project\'0d\'0d\'0d\'0dModifications:\'0d\'0d6/11/96  Term and Def styles added\'0d\'0d5/14/96  Code and Np styles added}{\operator benmoe}{\creatim\yr1997\mo6\dy10\hr10\min25} {\revtim\yr2000\mo3\dy22\hr14\min26}{\printim\yr2000\mo3\dy3\hr14\min4}{\version2}{\edmins1}{\nofpages56}{\nofwords1175}{\nofchars6699}{\*\company Microsoft Corporation}{\vern57443}}\margl1440\margr1440  \widowctrl\ftnbj\aenddoc\linkstyles\hyphcaps0\formshade \fet0{\*\template \\\\taos\\vss\\Win98\\Template\\What7.dot}\sectd \linex0\endnhere {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain  \li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_101_1058}}  Lists the installed game controllers and their status. If you want to test, configure, or recalibrate a controller, click its name in the list, and then click {\b Properties}. \par {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_101_1010}{\*\bkmkend IDH_101_1010}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_101_1010}} Click this to add a new game controller. \par \page {\cs20\up6 #{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_101_1022}} Updates the information that appears in the {\b Game Controllers} list. \par {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_101_1028}{\*\bkmkend IDH_101_1028}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_101_1028}} Removes the selected game controller. \par \pard \li115\ri130\sb80\sl-240\slmult0\widctlpar {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_101_1002}{\*\bkmkend IDH_101_1002}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_101_1002}}  Click this to test, configure, or calibrate this game controller.{\up6 {\*\bkmkstart IDH_117_8195}{\*\bkmkend IDH_117_8195} \par }\pard \li115\ri130\sb80\sl-240\slmult0\widctlpar {\up6 \page }{\cs20\up6 #{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_117_8195}}  Lists the controller IDs for each game controller installed on this computer. You can change the ID that each game controller is assigned to. \par {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_117_8196}{\*\bkmkend IDH_117_8196}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_117_8196}} Lists the game controllers installed on this computer. \par {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_117_8197}{\*\bkmkend IDH_117_8197}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_117_8197}}  Lists the controller IDs and the game controllers currently assigned to each ID.  \par {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_117_8198}{\*\bkmkend IDH_117_8198}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_117_8198}} Click this to change the game controller assigned to the selected ID. \par {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_117_1101}{\*\bkmkend IDH_117_1101}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_117_1101}}  Specifies the port used for your game controller port (if it requires one). \par {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_117_1100}{\*\bkmkend IDH_117_1100}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_117_1100}}  Allows other devices, such as your modem, to interrupt the operation of your game controller. However, selecting this check box can cause a delay in the response of your game controller. \par Clear this check box if your joystick isn't working properly in a game.  \par Select this check box if your modem does not work properly when you are playing games online or if you notice networking or other hardware problems when using your game controller.  \par {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_119_1059}{\*\bkmkend IDH_119_1059}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_119_1059}}  Lists game controllers both by type (for example, 2-button flight yoke) and by product name (for example, Microsoft SideWinder 3D Pro). If possible, choose the specific product name of your game controller. \par If your game controller product name or type is not listed, click {\b Add} {\b Other} to install drivers for it, or click {\b Custom }to specify the features of your controller. \par {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_119_1039}{\*\bkmkend IDH_119_1039}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_119_1039}}  Click this if your game controller is not listed and you have an installation disk. On the next dialog box, click {\b Have Disk} and then follow the instructions on the screen. \par \page {\cs20\up6 #{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_119_1049}}  Click this if your game controller is not listed and you do not have an installation disk. You can specify the characteristics of your controller. \par {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_4099_1043}{\*\bkmkend IDH_4099_1043}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4099_1043}} Specifies the number of axe s your game controller has. Although there are exceptions, two-axis game controllers typically provide up-and-down and side-to-side motion. Three-axis game controllers generally provide a throttle control. Four-axis game controllers usually provide a thro ttle and a rudder. \par \pard \li115\ri130\sb80\sl-240\slmult0\widctlpar \page {\cs20\up6 #{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4099_1045}} Specifies the number of buttons on your game controller.{\up6  {\*\bkmkstart IDH_4099_1048}{\*\bkmkend IDH_4099_1048} \par }\pard \li115\ri130\sb80\sl-240\slmult0\widctlpar \page {\cs20\up6 {\*\bkmkstart IDH_4099_1050}{\*\bkmkend IDH_4099_1050}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4099_1050}}  Specifies the type of game controller you are setting up. \par {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_4099_1051}{\*\bkmkend IDH_4099_1051}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4099_1051}} Specifies that you have a game controller designed. \par {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_4099_1052}{\*\bkmkend IDH_4099_1052}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4099_1052}}  Specifies that you have a touch-directional game controller that moves in eight directions. This kind of game controller typically has two to four buttons. \par {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_4099_1053}{\*\bkmkend IDH_4099_1053}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4099_1053}}  Specifies that your game controller has a steering wheel and gas and brake pedals. \par {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_4099_1054}{\*\bkmkend IDH_4099_1054}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4099_1054}}  Specifies that your game controller has a point-of-view (POV) hat. A POV hat enables you to specify the position or direction from which to view an object on your screen. \par {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_4099_1056}{\*\bkmkend IDH_4099_1056}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4099_1056}}  Provides a space for you to type a name for this custom game controller. This name will appear in the list of available controllers installed on your computer. \par \page {\cs20\up6 #{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4099_1058}} Specifies that your controller is a joystick. \par {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_8188_8189}{\*\bkmkend IDH_8188_8189}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_8188_8189}}  Displays the controller ID that you can assign to the selected game controller. Click the arrows to change the controller ID. \par Some games require the game controller to be assigned to the controller ID 1. \par \page {\cs20\up6 #{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_8188_8191}} Displays the selected controller ID. To assign a game controller to this ID, click the controller name in the {\b  Game Controllers }list. \par \pard \li115\ri130\sb80\sl-240\slmult0\widctlpar {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_8188_8194}{\*\bkmkend IDH_8188_8194}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_8188_8194}} Lists t he available game controllers.  \par \pard \li115\ri130\sb80\sl-240\slmult0\widctlpar {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_4098_12293}{\*\bkmkstart IDH_4098_12308}{\*\bkmkend IDH_4098_12293}{\*\bkmkend IDH_4098_12308}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0 \widctlpar \f7\fs16 {\cs20\up6 #} IDH_4101_12293}} Shows the range of motion for axes 1 and 2. To calibrate your game controller\rquote s range of motion for axes 1 and 2 (usually X and Y), follow the instructions in the Calibration Information area. \par {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_4101_12308}{\*\bkmkend IDH_4101_12308}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4101_12308}} Shows the range  of motion for axis 3. To calibrate your game controller\rquote s range of motion for axis 3, follow the instructions in the Calibration Information area. \par {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_4101_12334}{\*\bkmkend IDH_4101_12334}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4101_12334}}  Shows the range of motion for axis 4. To calibrate your game controller\rquote s range of motion for axis 4, follow the instructions in the Calibration Information area. \par {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_4101_12347}{\*\bkmkend IDH_4101_12347}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4101_12347}}  Shows the range of motion for axis 5. To calibrate your game controller\rquote s range of motion for axis 5, follow the instructions in the Calibration Information area. \par {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_4101_12349}{\*\bkmkend IDH_4101_12349}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4101_12349}}  Shows the range of motion for axis 6. To calibrate your game controller\rquote s range of motion for axis 6, follow the instructions in the Calibration Information area. \par {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_4101_12309}{\*\bkmkend IDH_4101_12309}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4101_12309}}  Shows the position of your point-of-view (POV) hat as you move it up, left, right, and down. To calibrate your game controller\rquote s POV hat, follow the instructions in the Calibration Information area. \par {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_4201_1019}{\*\bkmkend IDH_4201_1019}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4201_1019}} Specifies that your game controller has a rudd er or pedals, or that you have attached a separate rudder or pedals. Click this to ensure that the rudder or pedals will work in your games. \par \pard \li115\ri130\sb80\sl-240\slmult0\widctlpar {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_4201_12291}{\*\bkmkend IDH_4201_12291}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4201_12291}}  Click this to calibrate your game controller. Calibrating sets the range of motion for the axes of your game controller. If your game controller has a point-of-view (POV) hat, you can also calibrate that feature. \par \pard \li115\ri130\sb80\sl-240\slmult0\widctlpar {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_4202_12293}{\*\bkmkend IDH_4202_12293}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4202_12293}}  Shows the range of motion for axes 1 and 2. To calibrate your game controller\rquote s range of motion for axes 1 and 2 (usually X and Y), follow the instructions in the Calibration Information area. \par {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_4202_12308}{\*\bkmkend IDH_4202_12308}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4202_12308}}  Shows the range of motion for axis 3. To calibrate your game controller\rquote s range of motion for axis 3, follow the instructions in the Calibration Information area. \par {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_4202_12334}{\*\bkmkend IDH_4202_12334}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4202_12334}}  Shows the range of motion for axis 4. To calibrate your game controller\rquote s range of motion for axis 4, follow the instructions in the Calibration Information area. \par \pard \fi-605\li720\ri130\sb80\sl-240\slmult0\widctlpar {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_4202_8199}{\*\bkmkend IDH_4202_8199}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4202_8199}}  Describes each step of the calibration process. \par \pard \li115\ri130\sb80\sl-240\slmult0\widctlpar {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_4203_12293}{\*\bkmkend IDH_4203_12293}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4203_12293}}  Tests the range of motion for axes 1 and 2. Try to reach all four corners of the test box. If axes 1 and 2 do not respond correctly, try recalibrating the game controller. \par \pard \li115\ri130\sb80\sl-240\slmult0\widctlpar {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_4203_12308}{\*\bkmkend IDH_4203_12308}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4203_12308}}  Tests the range of motion for axis 3. Try to reach the top and bottom of the test box using the axis controller on the game controller. If axis 3 does not respond correctly, try recalibrating the game controller. \par \pard \li115\ri130\sb80\sl-240\slmult0\widctlpar {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_4203_12334}{\*\bkmkend IDH_4203_12334}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4203_12334}}  Tests the range of motion for axis 4. Try to reach the top and bottom of the test box. If axis 4 does not respond correctly, try recalibrating the game controller. \par {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_4203_12347}{\*\bkmkend IDH_4203_12347}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4203_12347}}  Use to test the range of motion for axis 5. Try to reach the top and bottom of the test box. If axis 5 does not respond correctly, try recalibrating the game controller. \par {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_4203_12349}{\*\bkmkend IDH_4203_12349}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4203_12349}}  Tests the range of motion for axis 6. Try to reach the top and bottom of the test box. If axis 6 does not respond correctly, try recalibrating the game controller. \par {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_4203_12309}{\*\bkmkend IDH_4203_12309}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4203_12309}}  Tests your game controller's point-of-view (POV) hat, if it has one. To test the POV hat, move it up, left, right, and down. If it does not respond correctly, try recalibrating your game controller. \par \pard \li115\ri130\sb80\sl-240\slmult0\widctlpar {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_4203_1023}{\*\bkmkend IDH_4203_1023}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4203_1023}}  Tests your game controller's buttons. Press each button on your game controller one at a time. Button number assignments are determined by your game controller's manufacturer. \par \pard \li115\ri130\sb80\sl-240\slmult0\widctlpar {\up6 \page }{\cs20\up6 #{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4202_12328}} Click this, or press ENTER, after each step of calibrating the POV hat. \par {\up6 \page }{\cs20\b\up6 #{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4202_12329}}  Returns to the previous step in the calibration process. The current axis remains either uncalibrated or returns to its previous calibration values. \par {\up6 \page }{\cs20\up6 #{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4202_12330}} Moves to the next control to calibrate, skipping the curren t calibration step. The current axis remains either uncalibrated or returns to its previous calibration values. \par \page {\up6  }{\cs20\up6 #{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4101_12328}}Click this, or press ENTER, after each step of calibrating the POV hat. \par {\up6 \page }{\cs20\b\up6 #{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4101_12329}} Returns to the previous step in the calibration process. The current axis remains either uncalibrated or returns to its previous calibration values. \par {\up6 \page } {\cs20\up6 #{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4101_12330}}Moves to the next control to calibrate, skipping the current calibration step. {\*\bkmkstart IDH_4202_12328} {\*\bkmkend IDH_4202_12328}The current axis remains either uncalibrated or returns to its previous calibration values. \par \page {\cs20\up6 #{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_APPMAN_EXCLUDEDRIVE_INSTRUCTIONS}}  Displays the drives on which new games can be installed and displays the amount of disk space that can be used by games. The percentage of disk space used by games cannot be changed on excluded drives. \par \page {\cs20\up6 #{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_APPMAN_RESTOREDEFAULTS_INSTRUCTIONS}} Restores the default percentages of disk space that can be used by games on all drives. \par \pard \li115\ri130\sb80\sl-240\slmult0\widctlpar \page {\cs20\up6 #{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_APPMAN_DISKUSAGE_SETTING_INSTRUCTIONS}} Adjusts the amount of disk space that  can be used by games. \par \pard \li115\ri130\sb80\sl-240\slmult0\widctlpar \page {\cs20\up6 #{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_VOICE_DETAILS}} Displays additional information about how to turn on and use Voice chat. \par \page {\cs20\up6 #{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_VOICE_LIST_GAMES}} Lists the games that you can play while simultaneously talking with online friends. \par }
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\gamectrl\clientnt\res\dijoy_cm.rtf ===
{\rtf1\ansi \deff7\deflang1033{\fonttbl{\f7\fswiss\fcharset0\fprq2 MS Sans Serif{\*\falt AvantGarde};}{\f8\froman\fcharset0\fprq2 Times{\*\falt Times New Roman};}{\f11\fmodern\fcharset0\fprq1 Courier New{\*\falt Courier};} {\f61\fmodern\fcharset0\fprq1 Monotype.com;}{\f62\fswiss\fcharset0\fprq2 Franklin Gothic Demi{\*\falt Times New Roman};}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255; \red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;} {\stylesheet{\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 \snext0 Normal;}{\s1\li115\ri130\sb280\sa40\sl-240\slmult0\widctlpar \b\f7\fs16 \sbasedon0\snext0 heading 1;}{\s2\li115\ri130\sb120\sl-240\slmult0\widctlpar \b\f7\fs16 \snext0 heading 2;}{ \s3\li115\ri130\sb120\sa60\sl-240\slmult0\widctlpar \f7\fs16 \snext0 heading 3;}{\s4\fi-245\li360\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 \sbasedon0\snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}{ \s15\fi-187\li274\ri130\sb80\sl-120\slmult0\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx302 \f7\fs16 \sbasedon0\snext0 a/k link;}{\*\cs16 \additive\cf6 \sbasedon10 annotation reference;}{\s17\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16  \sbasedon0\snext17 annotation text;}{\s18\li115\ri130\sb120\sa120\widctlpar \f7\fs16 \snext0 bitmap;}{\s19\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 \sbasedon0\snext0 Context;}{\*\cs20 \additive\up6 \sbasedon10 footnote reference;}{ \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 \sbasedon0\snext0 footnote text;}{\s22\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 \sbasedon0\snext22 Jl;}{\s23\fi-187\li302\ri130\sb80\sl-240\slmult0\widctlpar\tx302 \f7\fs16  \sbasedon0\snext24 Lb1;}{\s24\fi-187\li302\ri130\sb48\sl-240\slmult0\widctlpar\tx302 \f7\fs16 \sbasedon23\snext24 Lb2;}{\s25\fi-158\li461\ri130\sb48\sl-240\slmult0\widctlpar\tx461 \f7\fs16 \sbasedon24\snext25 Lb3;}{\s26\li302\ri130\sb60\sl-240\slmult0 \widctlpar\tx302 \f7\fs16 \sbasedon24\snext24 Lp1;}{\s27\li720\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 \sbasedon0\snext0 Normal Indent;}{\s28\fi-187\li274\ri130\sl-120\slmult0\widctlpar\tx302 \f7\fs16 \sbasedon15\snext28 oem a/k link;}{ \s29\fi-302\li418\ri86\sa120\sl-240\slmult0\widctlpar \f7\fs16 \sbasedon0\snext29 oem button;}{\s30\fi-302\li418\ri86\sb160\sa120\sl-240\slmult0\widctlpar\tx720 \f7\fs16 \sbasedon29\snext30 oem button1;}{\s31\fi-187\li302\sb160\sl-240\slmult0 \widctlpar\tx302 \f7\fs16 \sbasedon0\snext31 oem Lb1;}{\s32\li115\ri130\sb160\sl-240\slmult0\widctlpar \f7\fs16 \sbasedon0\snext32 oem normal;}{\s33\li115\ri2160\sb160\sl-240\slmult0\widctlpar \f7\fs16 \sbasedon0\snext33 oem popup;}{\s34\ri2160\widctlpar  \f7\fs12 \sbasedon33\snext34 oem popup end;}{\s35\fi-187\li302\ri2160\sb160\sl-240\slmult0\widctlpar\tx302 \f7\fs16 \sbasedon31\snext35 oem popup Lb1;}{\s36\li115\sb240\sl-240\slmult0\widctlpar \b\f7\fs16 \sbasedon0\snext36 oem proc head;}{ \s37\li115\ri86\sb80\sl-240\slmult0\widctlpar \f7\fs16 \sbasedon0\snext0 oem tb text;}{\s38\li58\sb80\sl-240\slmult0\widctlpar \f7\fs16 \sbasedon0\snext38 oem tb text 2;}{\s39\fi-187\li245\sb80\sl-240\slmult0\widctlpar\tx245\tx302 \f7\fs16  \sbasedon23\snext39 oem tb text 2 Lb1;}{\s40\fi-187\li245\sb48\sl-240\slmult0\widctlpar\tx245\tx302 \f7\fs16 \sbasedon24\snext40 oem tb text 2 Lb2;}{\s41\fi-158\li403\sb48\sl-240\slmult0\widctlpar\tx403\tx461 \f7\fs16 \sbasedon25\snext41  oem tb text 2 Lb3;}{\s42\li115\ri130\sb80\widctlpar \f7\fs16 \sbasedon0\snext42 Pop-up;}{\s43\li115\ri130\sb120\sa40\sl-240\slmult0\widctlpar \b\f7\fs16 \snext23 proc head;}{\s44\li115\ri86\sb280\sl-240\slmult0\widctlpar \f7\fs16 \sbasedon29\snext29  table top;}{\s45\li58\sb280\sl-240\slmult0\widctlpar \f7\fs16 \sbasedon44\snext38 table top 2;}{\s46\fi-317\li432\ri130\sb120\sl-240\slmult0\widctlpar\tx432\tx576 \f7\fs16 \sbasedon24\snext46 Tbr1;}{\s47\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16  \sbasedon0\snext0 Tech Rev;}{\s48\li58\sb80\sl-240\slmult0\widctlpar \f7\fs16 \sbasedon44\snext48 vertrule;}{\s49\fi-302\li388\ri130\sb80\sl-240\slmult0\widctlpar\tqr\tx274\tx389 \f7\fs16 \sbasedon23\snext49 Lb1a;}{ \s50\fi-302\li388\ri130\sb48\sl-240\slmult0\widctlpar\tqr\tx274\tx389 \f7\fs16 \sbasedon49\snext50 Lb2a;}{\s51\fi-547\li662\ri187\sb60\sa60\sl240\slmult0\nowidctlpar\tx660 \f7\fs16 \sbasedon0\snext51 Np;}{\s52\li115\ri130\sb80\sl-240\slmult0\widctlpar  \f11\fs16 \sbasedon0\snext0 Code;}{\*\cs53 \additive\b \sbasedon10 UI;}{\*\cs54 \additive\scaps\fs14 \sbasedon10 Smallcaps;}{\s55\nowidctlpar\tx480\tx960\tx1440\tx1920\tx2400\tx2880\tx3360\tx3840\tx4320 \f61\fs20\cf1 \snext55 macro;}{ \s56\li115\ri130\sb80\sa100\sl-240\slmult0\widctlpar\noline\hyphpar0 \f7\fs16\kerning20 \sbasedon0\snext0 Text After Ref Label,tarl;}{\s57\li115\ri130\sb140\sl-440\slmult0\nowidctlpar\noline\hyphpar0 \f62\fs32\kerning20 \sbasedon0\snext57 toc 1,toc1;}{ \s58\li780\ri2820\sb80\sl-14\slmult0\keepn\nowidctlpar \f8\fs16 \sbasedon0\snext0 Index;}{\*\cs59 \additive\cf12 \sbasedon10 HTML;}}{\info{\title Create Help files for Winhelp 4.0}{\author benmoe} {\doccomm Version of what7.dot specific for NT project\'0d\'0d\'0d\'0dModifications:\'0d\'0d6/11/96  Term and Def styles added\'0d\'0d5/14/96  Code and Np styles added}{\operator benmoe}{\creatim\yr1997\mo6\dy10\hr10\min25} {\revtim\yr2000\mo3\dy22\hr14\min26}{\printim\yr2000\mo3\dy3\hr14\min4}{\version2}{\edmins1}{\nofpages56}{\nofwords1175}{\nofchars6699}{\*\company Microsoft Corporation}{\vern57443}}\margl1440\margr1440  \widowctrl\ftnbj\aenddoc\linkstyles\hyphcaps0\formshade \fet0{\*\template \\\\taos\\vss\\Win98\\Template\\What7.dot}\sectd \linex0\endnhere {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain  \li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_101_1058}}  Lists the installed game controllers and their status. If you want to test, configure, or recalibrate a controller, click its name in the list, and then click {\b Properties}. \par {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_101_1010}{\*\bkmkend IDH_101_1010}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_101_1010}} Click this to add a new game controller. \par \page {\cs20\up6 #{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_101_1022}} Updates the information that appears in the {\b Game Controllers} list. \par {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_101_1028}{\*\bkmkend IDH_101_1028}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_101_1028}} Removes the selected game controller. \par \pard \li115\ri130\sb80\sl-240\slmult0\widctlpar {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_101_1002}{\*\bkmkend IDH_101_1002}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_101_1002}}  Click this to test, configure, or calibrate this game controller.{\up6 {\*\bkmkstart IDH_117_8195}{\*\bkmkend IDH_117_8195} \par }\pard \li115\ri130\sb80\sl-240\slmult0\widctlpar {\up6 \page }{\cs20\up6 #{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_117_8195}}  Lists the controller IDs for each game controller installed on this computer. You can change the ID that each game controller is assigned to. \par {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_117_8196}{\*\bkmkend IDH_117_8196}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_117_8196}} Lists the game controllers installed on this computer. \par {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_117_8197}{\*\bkmkend IDH_117_8197}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_117_8197}}  Lists the controller IDs and the game controllers currently assigned to each ID.  \par {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_117_8198}{\*\bkmkend IDH_117_8198}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_117_8198}} Click this to change the game controller assigned to the selected ID. \par {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_117_1101}{\*\bkmkend IDH_117_1101}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_117_1101}}  Specifies the port used for your game controller port (if it requires one). \par {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_117_1100}{\*\bkmkend IDH_117_1100}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_117_1100}}  Allows other devices, such as your modem, to interrupt the operation of your game controller. However, selecting this check box can cause a delay in the response of your game controller. \par Clear this check box if your joystick isn't working properly in a game.  \par Select this check box if your modem does not work properly when you are playing games online or if you notice networking or other hardware problems when using your game controller.  \par {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_119_1059}{\*\bkmkend IDH_119_1059}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_119_1059}}  Lists game controllers both by type (for example, 2-button flight yoke) and by product name (for example, Microsoft SideWinder 3D Pro). If possible, choose the specific product name of your game controller. \par If your game controller product name or type is not listed, click {\b Add} {\b Other} to install drivers for it, or click {\b Custom }to specify the features of your controller. \par {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_119_1039}{\*\bkmkend IDH_119_1039}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_119_1039}}  Click this if your game controller is not listed and you have an installation disk. On the next dialog box, click {\b Have Disk} and then follow the instructions on the screen. \par \page {\cs20\up6 #{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_119_1049}}  Click this if your game controller is not listed and you do not have an installation disk. You can specify the characteristics of your controller. \par {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_4099_1043}{\*\bkmkend IDH_4099_1043}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4099_1043}} Specifies the number of axe s your game controller has. Although there are exceptions, two-axis game controllers typically provide up-and-down and side-to-side motion. Three-axis game controllers generally provide a throttle control. Four-axis game controllers usually provide a thro ttle and a rudder. \par \pard \li115\ri130\sb80\sl-240\slmult0\widctlpar \page {\cs20\up6 #{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4099_1045}} Specifies the number of buttons on your game controller.{\up6  {\*\bkmkstart IDH_4099_1048}{\*\bkmkend IDH_4099_1048} \par }\pard \li115\ri130\sb80\sl-240\slmult0\widctlpar \page {\cs20\up6 {\*\bkmkstart IDH_4099_1050}{\*\bkmkend IDH_4099_1050}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4099_1050}}  Specifies the type of game controller you are setting up. \par {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_4099_1051}{\*\bkmkend IDH_4099_1051}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4099_1051}} Specifies that you have a game controller designed. \par {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_4099_1052}{\*\bkmkend IDH_4099_1052}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4099_1052}}  Specifies that you have a touch-directional game controller that moves in eight directions. This kind of game controller typically has two to four buttons. \par {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_4099_1053}{\*\bkmkend IDH_4099_1053}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4099_1053}}  Specifies that your game controller has a steering wheel and gas and brake pedals. \par {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_4099_1054}{\*\bkmkend IDH_4099_1054}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4099_1054}}  Specifies that your game controller has a point-of-view (POV) hat. A POV hat enables you to specify the position or direction from which to view an object on your screen. \par {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_4099_1056}{\*\bkmkend IDH_4099_1056}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4099_1056}}  Provides a space for you to type a name for this custom game controller. This name will appear in the list of available controllers installed on your computer. \par \page {\cs20\up6 #{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4099_1058}} Specifies that your controller is a joystick. \par {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_8188_8189}{\*\bkmkend IDH_8188_8189}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_8188_8189}}  Displays the controller ID that you can assign to the selected game controller. Click the arrows to change the controller ID. \par Some games require the game controller to be assigned to the controller ID 1. \par \page {\cs20\up6 #{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_8188_8191}} Displays the selected controller ID. To assign a game controller to this ID, click the controller name in the {\b  Game Controllers }list. \par \pard \li115\ri130\sb80\sl-240\slmult0\widctlpar {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_8188_8194}{\*\bkmkend IDH_8188_8194}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_8188_8194}} Lists t he available game controllers.  \par \pard \li115\ri130\sb80\sl-240\slmult0\widctlpar {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_4098_12293}{\*\bkmkstart IDH_4098_12308}{\*\bkmkend IDH_4098_12293}{\*\bkmkend IDH_4098_12308}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0 \widctlpar \f7\fs16 {\cs20\up6 #} IDH_4101_12293}} Shows the range of motion for axes 1 and 2. To calibrate your game controller\rquote s range of motion for axes 1 and 2 (usually X and Y), follow the instructions in the Calibration Information area. \par {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_4101_12308}{\*\bkmkend IDH_4101_12308}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4101_12308}} Shows the range  of motion for axis 3. To calibrate your game controller\rquote s range of motion for axis 3, follow the instructions in the Calibration Information area. \par {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_4101_12334}{\*\bkmkend IDH_4101_12334}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4101_12334}}  Shows the range of motion for axis 4. To calibrate your game controller\rquote s range of motion for axis 4, follow the instructions in the Calibration Information area. \par {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_4101_12347}{\*\bkmkend IDH_4101_12347}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4101_12347}}  Shows the range of motion for axis 5. To calibrate your game controller\rquote s range of motion for axis 5, follow the instructions in the Calibration Information area. \par {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_4101_12349}{\*\bkmkend IDH_4101_12349}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4101_12349}}  Shows the range of motion for axis 6. To calibrate your game controller\rquote s range of motion for axis 6, follow the instructions in the Calibration Information area. \par {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_4101_12309}{\*\bkmkend IDH_4101_12309}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4101_12309}}  Shows the position of your point-of-view (POV) hat as you move it up, left, right, and down. To calibrate your game controller\rquote s POV hat, follow the instructions in the Calibration Information area. \par {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_4201_1019}{\*\bkmkend IDH_4201_1019}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4201_1019}} Specifies that your game controller has a rudd er or pedals, or that you have attached a separate rudder or pedals. Click this to ensure that the rudder or pedals will work in your games. \par \pard \li115\ri130\sb80\sl-240\slmult0\widctlpar {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_4201_12291}{\*\bkmkend IDH_4201_12291}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4201_12291}}  Click this to calibrate your game controller. Calibrating sets the range of motion for the axes of your game controller. If your game controller has a point-of-view (POV) hat, you can also calibrate that feature. \par \pard \li115\ri130\sb80\sl-240\slmult0\widctlpar {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_4202_12293}{\*\bkmkend IDH_4202_12293}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4202_12293}}  Shows the range of motion for axes 1 and 2. To calibrate your game controller\rquote s range of motion for axes 1 and 2 (usually X and Y), follow the instructions in the Calibration Information area. \par {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_4202_12308}{\*\bkmkend IDH_4202_12308}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4202_12308}}  Shows the range of motion for axis 3. To calibrate your game controller\rquote s range of motion for axis 3, follow the instructions in the Calibration Information area. \par {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_4202_12334}{\*\bkmkend IDH_4202_12334}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4202_12334}}  Shows the range of motion for axis 4. To calibrate your game controller\rquote s range of motion for axis 4, follow the instructions in the Calibration Information area. \par \pard \fi-605\li720\ri130\sb80\sl-240\slmult0\widctlpar {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_4202_8199}{\*\bkmkend IDH_4202_8199}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4202_8199}}  Describes each step of the calibration process. \par \pard \li115\ri130\sb80\sl-240\slmult0\widctlpar {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_4203_12293}{\*\bkmkend IDH_4203_12293}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4203_12293}}  Tests the range of motion for axes 1 and 2. Try to reach all four corners of the test box. If axes 1 and 2 do not respond correctly, try recalibrating the game controller. \par \pard \li115\ri130\sb80\sl-240\slmult0\widctlpar {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_4203_12308}{\*\bkmkend IDH_4203_12308}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4203_12308}}  Tests the range of motion for axis 3. Try to reach the top and bottom of the test box using the axis controller on the game controller. If axis 3 does not respond correctly, try recalibrating the game controller. \par \pard \li115\ri130\sb80\sl-240\slmult0\widctlpar {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_4203_12334}{\*\bkmkend IDH_4203_12334}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4203_12334}}  Tests the range of motion for axis 4. Try to reach the top and bottom of the test box. If axis 4 does not respond correctly, try recalibrating the game controller. \par {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_4203_12347}{\*\bkmkend IDH_4203_12347}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4203_12347}}  Use to test the range of motion for axis 5. Try to reach the top and bottom of the test box. If axis 5 does not respond correctly, try recalibrating the game controller. \par {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_4203_12349}{\*\bkmkend IDH_4203_12349}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4203_12349}}  Tests the range of motion for axis 6. Try to reach the top and bottom of the test box. If axis 6 does not respond correctly, try recalibrating the game controller. \par {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_4203_12309}{\*\bkmkend IDH_4203_12309}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4203_12309}}  Tests your game controller's point-of-view (POV) hat, if it has one. To test the POV hat, move it up, left, right, and down. If it does not respond correctly, try recalibrating your game controller. \par \pard \li115\ri130\sb80\sl-240\slmult0\widctlpar {\up6 \page }{\cs20\up6 {\*\bkmkstart IDH_4203_1023}{\*\bkmkend IDH_4203_1023}#{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4203_1023}}  Tests your game controller's buttons. Press each button on your game controller one at a time. Button number assignments are determined by your game controller's manufacturer. \par \pard \li115\ri130\sb80\sl-240\slmult0\widctlpar {\up6 \page }{\cs20\up6 #{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4202_12328}} Click this, or press ENTER, after each step of calibrating the POV hat. \par {\up6 \page }{\cs20\b\up6 #{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4202_12329}}  Returns to the previous step in the calibration process. The current axis remains either uncalibrated or returns to its previous calibration values. \par {\up6 \page }{\cs20\up6 #{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4202_12330}} Moves to the next control to calibrate, skipping the curren t calibration step. The current axis remains either uncalibrated or returns to its previous calibration values. \par \page {\up6  }{\cs20\up6 #{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4101_12328}}Click this, or press ENTER, after each step of calibrating the POV hat. \par {\up6 \page }{\cs20\b\up6 #{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4101_12329}} Returns to the previous step in the calibration process. The current axis remains either uncalibrated or returns to its previous calibration values. \par {\up6 \page } {\cs20\up6 #{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_4101_12330}}Moves to the next control to calibrate, skipping the current calibration step. {\*\bkmkstart IDH_4202_12328} {\*\bkmkend IDH_4202_12328}The current axis remains either uncalibrated or returns to its previous calibration values. \par \page {\cs20\up6 #{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_APPMAN_EXCLUDEDRIVE_INSTRUCTIONS}}  Displays the drives on which new games can be installed and displays the amount of disk space that can be used by games. The percentage of disk space used by games cannot be changed on excluded drives. \par \page {\cs20\up6 #{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_APPMAN_RESTOREDEFAULTS_INSTRUCTIONS}} Restores the default percentages of disk space that can be used by games on all drives. \par \pard \li115\ri130\sb80\sl-240\slmult0\widctlpar \page {\cs20\up6 #{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_APPMAN_DISKUSAGE_SETTING_INSTRUCTIONS}} Adjusts the amount of disk space that  can be used by games. \par \pard \li115\ri130\sb80\sl-240\slmult0\widctlpar \page {\cs20\up6 #{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_VOICE_DETAILS}} Displays additional information about how to turn on and use Voice chat. \par \page {\cs20\up6 #{\footnote \pard\plain \s21\li115\ri130\sb80\sl-240\slmult0\widctlpar \f7\fs16 {\cs20\up6 #} IDH_VOICE_LIST_GAMES}} Lists the games that you can play while simultaneously talking with online friends. \par }
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filters\asf\doc\asfwrite.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Corp. DirectShow ASF Writer TitleDirectShow ASF Writer Michael Savage Normal Michael Savage Microsoft Word 9.0bjbjU DirectShow ASF Writer A sink filter which uses the Windows Media SDK (WMSDK) to write media streams to an Advanced Streaming Format (ASF) file. Deliverables:  qasf.dll - the writer filter (CLSID_AsfWriter) will be combined with the reader filter and placed into a single, self-registering dll.  Although they re currently in the separate dlls asfwrite.dll and asfread.dll. Does it matter?? The writer filter will also support a single property page (CLSID_AsfWriter) to allow for selection of an ASF profile from the WMSDK s system profile list. The selected profile determines the attributes for the output file.  Filter specifics: The writer filter supports the following interfaces: IFileSinkFilter2 - allows for output file name specification ISpecifyPropertyPages - expose its property page IConfigAsfWriter   new interface which allows filter to be configured based on a profile id IPersistStream   allows filter to persist configuration data IMediaSeeking Not currently supported. Probably only necessary if we need to report consumption progress. Do we? Will it mean anything since we re just giving to the wmsdk and would really need them to tell us how much they ve written? The writer filter will configure its input pin count and type based on the ASF profile it loads when its IConfigAsfWriter::ConfigureFilterWithProfileId() method is called. It will create exactly the number of input pins as the output stream count in the ASF profile and the major type for each input pin will be set to match the major type of ata corresponding output stream and thereafter restrict connections to be of that major type. For a successful transition of the filter into the Paused state from a Stopped state the filter will require that  all of its input pins are connected, else it ll return the error E_FAIL (??) it has been configured with a destination filename, else it ll return the win32 error ERROR_INVALID_NAME(converted to an HRESULT) the WMSDK s IWMWriter::BeginWriting method is successful New interfaces supported: IConfigAsfWriter is supported by the filter and contains the following methods: ConfigureFilterUsingProfileId( DWORD dwProfileId )   Have the filter configure itself for the passed in WMSDK profile id. This includes creating the appropriate number of input pins and type. Filter must be stopped to use and currently must not be connected. Is requiring to be unconnected too strict? Not hard to fix. GetCurrentProfileId( DWORD *pdwProfileId )   Find out which profile id the filter is currently configured to use. ConfigureFilterUsingProfile( IWMProfile * pProfile )   Have the filter configure itself for the passed in WMSDK profile. Using this method, advanced users can define their own profiles and pass them to the filter or take the writer s current profile and modify it. Filter must be stopped to use and currently must not be connected. Is requiring to be unconnected too strict? Not hard to fix. GetCurrentProfile( IWMProfileDWORD **ppProfile )   Get the current profile from the writer filter. Input stream types supported: Although the primary source of input streams to the writer is expected to from a file, the writer should also be capable of sourcing live data or capture streams to an ASF file.  Known Limitations: The writer will not support appending data to the end of an existing ASF file. Dependencies: WMSDK - The filter requires a valid install of the WMSDK and its underlying dependencies, including a valid ASF system profile list. DRM - ?? Assume these dependencies are same as WMSDK dependencies. Issues: Encryption, filter keying mechanism is dependent on the WMSDK decisions. Still don t know how this will work. Can the filter be registered as a standard DirectShow filter that is usable by any DShow application or do we need to restrict its use to known apps?  Video-only profiles   will the WMSDK support this and present with video-only profiles or will we need to insert low bitrate silence streams?
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filters\avi\capture\todo.txt ===
Work items for Vfw capture driver wrapper


1) Support IOverlay
  No work has been done yet to support overlays.
  the thunks should already exist. refer to
  motown\avicap.32\*.c to see how avicap manages overlays
  the thunks from avicap.32 are already in place in this
  filter

2) Support IReferenceClock slaved to the VSYNC clock.
  the _vsyncmem structure in vidx.h is the structure
  that will be shared with the driver.  the driver will
  update this struture with a QPC value and with a VSYNC
  count on each vsync.  we will expose a clock that
  periodically checks this memory and keeps it's own clock
  (based on QPC from drifting relative to this memory)
  the thunks for this have been written but not tested.
  (see vidxSetupVsyncMem)

3) Complete work to support IPropertyPage. the thunking
  for videoDialog is complete.  No new thunks should
  be necessary here, just expose editing of _vfwcaptureoptions.
  A new thunk to enum video capture drivers may make life easier.
  one caveat here:  VfwCapDriverDialog currently works only
  when the filters is Paused (because only then does it have
  the driver open).

4) Expose Line21 (closed caption) and SMPTE timecode streams.
  Thunks for these are complete (these streams are returned
  as extra fields in the VIDEOHDREX for each frame captured).

5) Support variable frame rate capture (for video conferencing).
  preferably some form of frame-on-demand rather than doing
  this by munging frame rates on the fly.

6) Port to NT.  all of the vidxZZZ functions are part of the
  thunking layer.  equivalents will have to be written for NT.
  (some of this work has aleady been done in the NT version
  of avicap32.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filters\core\comlite\readme.txt ===
THIS DIRECTORY IS NOW OBSOLETE

GO TO filters\core\decibels
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filters\dv\dvenc\make.log ===
Making C:\qsrc\filters\dv\dvenc 
TARGET_LIB = debug\dvenc.lib 
TARGET_BIN = debug\dvenc.dll 
 
pass1 - C:\qsrc\filters\dv\dvenc 
Generate dependencies... 
c:\qsrc\tools\bin\mkdepend.exe -tc:\qsrc -aQUARTZ=c:\qsrc -I. -Ic:\qsrc\sdk\include -Ic:\qsrc\sdk\classes\base -Ic:\qsrc\h -Ic:\qsrc\h\vc41 {src_files}/{rc_file} 
pass2 - C:\qsrc\filters\dv\dvenc 
Compiling dvenc.cpp... 
cl /Yustreams.h /Fpc:\qsrc\sdk\lib\streamsd.pch -c -nologo -Gy -DINC_OLE2 -DSTRICT -DWIN32 -D_WIN32 -MDd -D_MT -D_DLL -D_X86_=1 -DWINVER=0x0400 -DDBG=1 -DDEBUG -D_DEBUG -Z7 -Oid -Gz -Dtry=__try -Dexcept=__except -Dleave=__leave -Dfinally=__finally -W3 -DFILTER_DLL -Fodebug\ -I. -Ic:\qsrc\sdk\include -Ic:\qsrc\sdk\classes\base -Ic:\qsrc\h -Ic:\qsrc\h\vc41 dvenc.cpp 
dvenc.cpp
 
Compiling pencode.cpp... 
cl /Yustreams.h /Fpc:\qsrc\sdk\lib\streamsd.pch -c -nologo -Gy -DINC_OLE2 -DSTRICT -DWIN32 -D_WIN32 -MDd -D_MT -D_DLL -D_X86_=1 -DWINVER=0x0400 -DDBG=1 -DDEBUG -D_DEBUG -Z7 -Oid -Gz -Dtry=__try -Dexcept=__except -Dleave=__leave -Dfinally=__finally -W3 -DFILTER_DLL -Fodebug\ -I. -Ic:\qsrc\sdk\include -Ic:\qsrc\sdk\classes\base -Ic:\qsrc\h -Ic:\qsrc\h\vc41 pencode.cpp 
pencode.cpp
 
Build library debug\dvenc.lib... 
 lib 
  /NODEFAULTLIB
  /machine:i386
  /subsystem:windows,4.0
  /def:dvenc.def
  -debugtype:cv
  /out:debug\dvenc.lib
  c:\qsrc\sdk\lib\strmbasd.lib
  debug\dvenc.obj
  debug\pencode.obj
  debug\encprop.obj
  
Microsoft (R) 32-Bit Library Manager Version 5.00.7022
Copyright (c) 1997 - 1997  Microsoft Corporation.  All Rights Reserved.

/NODEFAULTLIB 
/machine:i386 
/subsystem:windows,4.0 
/def:dvenc.def 
-debugtype:cv 
/out:debug\dvenc.lib 
c:\qsrc\sdk\lib\strmbasd.lib 
debug\dvenc.obj 
debug\pencode.obj 
debug\encprop.obj 
   Creating library debug\dvenc.lib and object debug\dvenc.exp
 
Copy debug\dvenc.lib to c:\qsrc\lib\debug\dvenc.lib... 
        1 file(s) copied.
 
pass3 - C:\qsrc\filters\dv\dvenc 
Linking debug\dvenc.dll... 
 link 
  /NODEFAULTLIB
  /INCREMENTAL:NO
  /NOLOGO
  /MACHINE:i386
  /PDB:NONE
  /align:0x1000
  /debug:mapped,full
  /debugtype:both
  /dll
  /base:0x1c400000
  /subsystem:windows,4.0
  /entry:DllEntryPoint@12
  /out:debug\dvenc.dll
  debug\dvenc.exp
  debug\dvenc.obj
  debug\pencode.obj
  debug\encprop.obj
  debug\_streams.obj
  c:\qsrc\sdk\lib\strmbasd.lib
  c:\qsrc\sdk\lib\strmbasd.lib
  dvencode.lib
  c:\qsrc\sdk\lib\quartz.lib
  msvcrtd.lib
  vfw32.lib
  winmm.lib
  msacm32.lib
  kernel32.lib
  advapi32.lib
  version.lib
  largeint.lib
  user32.lib
  shell32.lib
  gdi32.lib
  comdlg32.lib
  comctl32.lib
  ole32.lib
  oleaut32.lib
  rpcrt4.lib
  c:\qsrc\lib\i386\uuid.lib
  
 
Copy debug\dvenc.dll to c:\qsrc\runtime\debug\dvenc.dll... 
        1 file(s) copied.
 
Done!
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filters\image2\readme.txt ===
Notes on the contents of this directory


    core        The Core Renderer a COM object that can operate
                independent of DShow.

    ap          This is the default Allocator - Presenter, a COM object.
                DShow applications can replace this object with
                their own implementation of an Allocator - Presenter if they
                want to do special application specific allocation or
                presentation.

    wm          This is the default Window Manager, a COM object.
                DShow applications can replace this object with own
                implementation of a Window Manager if they want to do special
                application specific containment of the Video being played back.

    video       This is the DShow Video Mixing Renderer.  It is a DShow filter
                based on the DShow base classes.  Note that it does not derive
                from the DShow base Renderer classes.  This filter consists of
                the necessay "glue" to construct a DShow Renderer out of the
                above components.

    mixer       This directory implements the mixing component of the new DShow
                Video Mixing Renderer.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filters\lin21dec\test\howtouse.txt ===
\Quartz\filters\lin21dec\test\HowToUse.txt:


Introduction:
============
This is a short doc on how to use the Test Line21 Source Filter (TSrcL21) to 
test the Line21 Decoder Filter (Lin21Dec).


Purpose:
========
Right now we don't have any line21 data source.  The Test Source filter has
been created to do some preliminary testing of the features and correctness
of the Line21 Decoder filter.  So far it has been very useful and effective
for this purpose.

How It Works:
============
It's simple.  It's a 3 step method.
a) Instantiate a TSrcL21, a Lin21Dec and a Video Renderer in a graph 
   (e.g, using GraphEdt). TSrcL21 asks for a .L21 filename on startup.
b) Connect TSrcL21's output to Lin21Dec's input; then connect Lin21Dec's 
   output to the Video Renderer's input. 
c) Now play, pause, stop -- whatever you want.
Note: TSrcL21 doesn't do seeking.  So when the play send, you have to 
----  reinstantiate TSrcL21 (and specify the .L21 input file name) again and 
      connect the pins.  It may be some work to do seek back to beginning.

.L21 Files:
==========
These files are plain text file to be created using text editors like Edit,
Notepad etc (which put a CR-LF for a lind end).  These files are to be used
as the input to TSrcL21.  By varying the contents of these files a vast
amount test cases can be covered for Lin21Dec.  It's not necessary to write
a lot of code to test Lin21Dec.
Note: There are a few rules about the .L21 files, but imagination is the
----  only limit for the usefulness of this approach.

.L21 Rules:
==========
I had to create a few "rules" or syntax for the input files used for TSrcL21.
1. The first line should be
   #SubType={BytePair|GOPPacket}
   This line indicates to TSrcL21 that the data should be sent down either as
   byte pairs or as GOP packets (as in DVD). Not having this line will cause
   TSrcL21 to have an invalid media type and it won't connect to Lin21Dec.

2. If the SubType on line 1 has been specified as "GOPPacket" then the
   second line should be of the form
   NewPacket n
   where n is an integer in the range 1 to 53 (DVD's max for a packet). Each
   such line indicates the beginning of a new GOP packet of caption chars.
   There can be multiple such packets each starting with a "NewPacket n" line.
   For subtype "BytePair", this line should not be used.

3. The text chars are to be typed in as it is with a max of 32 chars per 
   line.  It's a good test case to have more than 32 chars on a line as 
   Lin21Dec should handle that right.

4. The control chars, special chars etc are in the range 10 hex to 7f hex.
   So they are put in [ ] to distinguish them from a normal number. A control
   char pair [14 20] has to be used to indicate that the caption mode is
   Pop-on.

There are a bunch of .L21 files checked in in the 
\quartz\filters\lin21dec\test\data dir.  Take a look at them to get an idea
of how these files should be created. Use these files as input to create
filter graphs and play them back.  See the correspondence between the control
chars and color/font/mode etc change in the displayed caption.

Finally:
=======
You need to read about 10 pages of doc on Closed Captioning.  I have a copy
of the doc 
"Closed Caption Decoder Requirements from FCC Report and Order FCC 91-119".
This is the minimum you will need to know to create meaningful L21 files
for testing Lin21Dec.  If you get more interested in it, you can also raed
EIA-608, but it's a pin-in-the-****.  So try avoiding it if you can.


Feedback:
========
Please let me know of any problem/concerns/requirements/... whatever (praise
is fine too :-).

--- AlokC (05/15/97).
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filters\mixer\ovmprop\ovmprop.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Overlay Mixer Property Pages Title _PID_GUIDOverlay Mixer Property Pages Fang Wang Normal Fang Wang Microsoft Word 8.0bjbjt+t+ Overlay Mixer Property Pages Code Changes: Newly added files: Ovmprop.h Ovmprop.cpp Ovmprop.rc Ovmprop2.h Ovmprop2.cpp Ovmprop2.rc Ovmprop.reg Ovmprop.doc Newly added classes: class COMQualityProperties : public CBasePropertyPage class COMPositionProperties : public CBasePropertyPage class COMVPObjectProperties : public CBasePropertyPage class COMPinConfigProperties : public CBasePropertyPage Newly added interfaces: IAMOverlayMixerPosition2: IAMOverlayMixerPosition STDMETHODIMP GetOverlayRects(RECT *pSrcRect, RECT *pDestRect);  STDMETHODIMP GetVideoPortRects(RECT *pDeskRect, RECT *pDestRect);  STDMETHODIMP GetBasicVideoRects(RECT *pDeskRect, RECT *pDestRect);  IMixerPinConfig3: ImixerPinConfig2 STDMETHODIMP GetRenderTransport(AM_RENDER_TRANSPORT *pamRenderTransport); IEnumPinConfig: IUnknown STDMETHODIMP Next(IMixerPinConfig3* pPinConfig); IVPInfo: IUnknown STDMETHOD GetRectangles(RECT *prcSource, RECT *prcDest ); STDMETHOD GetCropState(AMVP_CROP_STATE* pCropState); STDMETHOD GetPixelsPerSecond(DWORD* pPixelPerSec); STDMETHOD GetVPDataInfo(AMVPDATAINFO* pVPDataInfo); STDMETHOD GetVPInfo(DDVIDEOPORTINFO* pVPInfo); STDMETHOD GetVPBandwidth(DDVIDEOPORTBANDWIDTH* pVPBandwidth); STDMETHOD GetVPCaps(DDVIDEOPORTCAPS* pVPCaps); STDMETHOD GetVPInputFormat(LPDDPIXELFORMAT* pVPFormat); STDMETHOD GetVPOutputFormat(LPDDPIXELFORMAT* pVPFormat); Changes in COMFilter: Exposes IQualProp Exposes IAMOverlayMixerPosition2 Exposes IEnumPinConfig Exposes IspecifyPropertyPages Changes in COMInputPin: Exposes IMixerPinConfig3 Exposes IspecifyPropertyPages Changes in CAMVideoPort Exposes IVPInfo The UI By setting the registry using the ovmprop.reg, new property pages will be displayed if one right clicks on the Overlay Mixer filter and then clicks on  Properties  in GraphEdt.   There should be 3 new property pages entitled  Quality VideoPort , and  Positions .  In addition to that, there should be a number of input pin configuration pages.  The title of these pages is made up by concatenating  Config  and the name of each input pins.   Quality page shows various quality statistics that the Overlay Mixer sees.  If a hardware decoder is used, Overlay Mixer will not able to see any frames, thus all entries on this pages will be zeros.  Numbers on this page do not update themselves automatically.  One has to close the property page and reopen in order to see the numbers updated by time.  This is due to the limitation of CQualityProperties that was written for Video Renderer.   VideoPort page shows video port information if Overlay Mixer uses the video port as the render transport when a hardware decoder is used.  If a software decoder is used, and Overlay Mixer uses overlay as the render transport, all entries on this page will be zeros.  Information on this page is grouped by the various video port data structures.  This page is designed for viewing video port capabilities and connection information for hardware decoders. Positions page shows 2 sets of source and destination rectangles.  The first set is from the primary input pin.  In the case of overlay transport, these rectangles are returned from IOverlay of the primary input pin.  In the case of video port transport, they are returned from IVPObject of the primary input pin.  The second set is returned from IBasicVideo of the filter connected to the output pin.  Of these rectangles, only the destination rectangle of the primary input pin is in the screen coordinate space.  All others are in their own relative coordinate space. Input pin configuration pages contain and control configuration of individual input pins.  Aspect ratio mode, key color and transparency are parameters that the user can set, of which aspect ratio mode and key color are implemented as of now.   Depending on the aspect radio mode set, the Overlay Mixer should either stretch, center or crop the video image.  By setting the key color, one should see that color momentarily as the background before the video starts (mostly likely one won t see it at all on a windows machine).  If one is running on an NT machine, and the window moves continuously as one moves the window, one should see that color as the background as the video window.  Other information on the page include relation position which should always be [0, 0, 10000, 10000], and rectangles from current connection s media types.   One can also right click on the input pins to get their configuration property pages.  The pages should also show up in MediaPlayer, although because of the order of the functions being called to add the pages to the sheet, the input pin configuration pages  titles are not constructed correctly.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filters\mixer\testmc2\readme.txt ===
Introduction:

Current the only way one can use hardware motion compensation is through Overlay mixer filter.  Hence one has to write a filter to interact with overlay mixer and it, in turn, calling proper DirectDraw function and finally the display driver. 

This is a sample filter which shows how to use hardware motion compensation in video decoder.  It is intend to supply VGA manufactory with basic shell to do their driver testing through overlay mixer.  Current this filter disregard the input sample and calling overlay mixer without any valid data.  

What you need:

1. Hardware Motion Comp GUIDs should replace CLSID_TESTMOCOMP1 and CLSID_TESTMOCOMP2
2. Proper decoded video data
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filters\mpeg1\outline.txt ===
MPEG1 support components
------------------------

Class Ids and media types
-------------------------

The following filter class ids are supported:

CLSID_MPEG1Doc          - Reads MPEG1 system stream from file
CLSID_MPEG1PacketPlayer - Receives MPEG1 packets

The following media types are supported

Major Type                   Sub Type

MEDIATYPE_Audio              MEDIASUBTYPE_MPEG1PacketAudio
MEDIATYPE_Video              MEDIASUBTYPE_MPEG1PacketVideo


The following filter class ids are supported:

CLSID_MPEG1Doc          - Reads MPEG1 system stream from file

    Input Pins          - None
    Output Pins         - MEDIATYPE_Audio/MEDIASUBTYPE_MPEG1PacketAudio
                        - MEDIATYPE_Video/MEDIASUBTYPE_MPEG1PacketVideo

CLSID_MPEG1PacketPlayer - Receives MPEG1 packets

    Input Pins          - MEDIATYPE_Audio/MEDIASUBTYPE_MPEG1PacketAudio
                        - MEDIATYPE_Video/MEDIASUBTYPE_MPEG1PacketVideo

    Output Pins         - MEDIATYPE_Video/MEDIASUBTYPE_Overlay
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filters\mpeg1\packet\design.txt ===
This project creates a filter for playing MPEG video.  It uses the Mpeg...
APIs defined by ACT (mpegapi.h) for their MPEG drivers to implement the filter(s).

The ACT drivers take the packet layer (whole packets include PTS etc).  It
looks therefore like a media sample MUST contain (a set of) whole packets.

The ACT kernel drivers swallow a PMPEG_PACKET_LIST structure whole, each
one of these contains packets for both audio and video.  In particular
MpegWriteData gets passed

-- a count of packets.
-- a PMPEG_PACKET_LIST parameter.
-- a stream type

so in fact each queued request is for a specific device.

However, there is only one device queue so if the audio and video
gets out of synch in terms of delivery then data wanting to play may
queue unnecessarily.

Filters
-------

For this model, to play mpeg system stream we need a filter to split the system
layer and present packets to the driver as implemented by these APIs.

Though we're going to choose a filter with a single input and output pin
we're not going to use CTransformFilter because:

1.  This is not flexible enough.
2.  Our requests are not completed synchronously.

The 'driver' filter can have several possible modes of operation depending on
the device capabilities:

    Render to overlay device (need separate overlay filter device too)
    Decompress/?Compress to memory.

These caps apply to audio and video which are treated separately.  In this
sense a device which supports audio and video will be treated as 2 filters
by us - then tied together by using the same hdevice.


Filter model
------------

There are actually 3 filter models we can adopt:


1.
                                       ----------------
          ------------                |                |
         |            |        o------  Audio renderer  ------o
         |             ------o        |                |
   o-----   Splitter  |                ----------------
         |             ------o         ----------------
         |            |               |                |
          ------------         o------  Video filter    ------o
                                      |                |
                                       ----------------

2.  Same as 1. but the audio and video are part of a single filter with
    two pins (so we can distinguish video from audio).

3.  A single filter with a single input and output which combines splitting
    with rendereing.

We will do number 2 (splitter + filter with 2 input pins).
sources of mpeg packet layer audio and video than the splitter, but maybe
we can have different splitters depeding one whether we're real time or
whatever.  Actually Alistair says he knows of 3 'system' layers.

The input pins will support (in the first design) the following media
types respectively:

1.  Mpeg1 audio packet data (ie just the data, not the packets).
2.  Mpeg1 video packet data.

If our driver supports decompression then other output pins could be
supported.  The Mpeg api supplied by ACT does not currently allow this.

How do we stop the audio filter rendering?  Maybe have a diffenent
class id for the non-render version, or connect and audio output pin to
ground, or just don't send the audio?  The current answer is that
we will support 2 class ids (when necessary) - one for (de)compression
and one for being an audio renderer.  This means we need different filters
for the audio and video because one is a renderer and one isn't.

A reason for having just one filter is it's going to be hard to
pause half of an MPEG hardware device (just for instance).


Overlay
-------

Setting the mask is controlled by DCI.

Note (horrible) setting up the overlay is controlled by the overlay
device so I suppose we need to keep this open?

What happens here is:

1.  We say we support a mediatype of MediaType_OverlayWindow
2.  We get IOverlayWindow off the renderer's input pin.
3.  We register our IOverlayWindowNotify interface.
    The initial overlay position is set (even when inactive)
    based on calling GetClipList or SetChromKey or whatever.
    The renderer will tell us (how?) when it's visible.
4.  We adjust the overlay position based on the notifications if
    we're bitmapped (or the renderer does the painting with the
    chromakey?).

5.  In the case of chromakey we still need to know where the window
    is so we'll need to hook callbacks.

What's kind of weird is that the window is owned by the renderer but
the overlay hardware is owned by us so we'd better be talking about the
same display surface (eg on the same machine)!

Display modes
-------------

If the display mode is wrong the Mpeg apis will reject our calls (how?)
and we'll have to refuse to start etc etc.

Palettes
--------
Do we need to worry or are all our devices going to be true colour?

Synchronization and timing
--------------------------

(For now) we'll get our reference clock from IMediaSample::SetSyncSource.
When we get a packet (list) for rendering we'll adjust the system time
clock based on:

1.  The current reference clock.
2.  The current STC.
3.  The FIRST packet SCR.

And we'll try and maintain a constant relationship between the STC and
the current reference clock.

So:

1.  At start of play (paused->playing) we'll queue up some stuff and note
the first PTS (can the hardware be paused so it can have decoded stuff
ready to go?  I hope so).  The remember diff = PTS - ref clock.  On
Run() set the STC to PTS and unpause.

2.  On each packet query the STC and reference clock and reset the STC based
on being a slave to the reference clock.

Resource management
-------------------

Resources are basically determined by how much we can queue up on the
kernel mode driver

Yes, and we'll have a self-imposed limit - how do we determine this?
For wave drivers it was a (fixed) guess.

When the resource limit is reached we'll basically wait until a buffer
completes.

This means that there is a lot hanging on the amount we should queue.  It
should probably be a time-based limit.  If we queue too much we hit the disk
reader etc.

The model is that we return from GetBuffer() ... until we've either

a.  Passed the buffer to the MPEG api. OR
b.  Been deactivated.

BUT if we're in paused state we just give a bad return when we can't
queue up any more.

Currently buffers must be of fixed size (!).  This seems a bit bad
and in our case they must therefore be 65536 bytes (max size of
packet) at least so we have to provide our own allocator.

This means we must provide the allocator.

The splitter will use the system layer info to decide on a reasonable
buffer size and request this size from our allocator (which for now
we'll just say OK to).

Internal synchronization
------------------------

The filter will have a single critical section.  This is NEVER
held when an API is called which might block but is held at all
other times (?).

In addition there is an event object owned by the filter to
signal a state change from another thread when a thread is
waiting.  The state change APIs must have their own critical section
(ie the state has a critical section?) since they obviously want
to be able to change the state

In fact it turns out we must have a thread to pump the MPEG device.
This is because the implementation of GetBuffer() must synchronize
with the current state (critical section) but the resources must
not be freed until we are really inactive.  OR ... what about
a reference count on the playing resources (or when the STOPPED
event is signalled THEN we release everything).

Management of mpeg api
----------------------

This API only has events as notifications so we must have a single
event per buffer.  We'll keep a list of which ones are 'outstanding'
and just call MpegQueryAsyncResult(wait) on the first one (we sent
last) when we're asked for a new one and there are none free.

(Video) Render target
---------------------

If the renderer (ie the filter connected to the video output pin)
does not support IMediaWindow then we must render to memory
if we can.  If we can't then just refuse the pin connect.

Similarly for the audio (is it still IMediaWindow?).  We get the audio
properties etc from the IMediaWindow?  Otherwise we have to render to memory.
Or should we just be the audio renderer (what does a renderer have to support)?

Finding the right device
------------------------

There's a logical problem that once the splitter has split the streams we'd
like them both to be rendered by the same card.  This might ultimately be
dictated by making sure the 'location' of the outputs is the same (but then
this won't always be the case?).  This would be much simpler if we supported
either a splitter or a splitter+renderer filter and possibly some codecs to
generate PCM and bitmaps or something.

The mpeg video apis identify objects by device index.  We need to try to make
sure that stuff playing from the same source goes through the same card. In
general if 2 filters are running off the same filter graph at least their time
stamps should be in synch so we can play them.  What we should effectively do
is never play more than one filter graph at a time on a single card and make
sure we match streams from a single filter graph to the same card.  This last
bit means we must be in a filter graph before we get asked about the pins, or
else we have to postpone the decision about which mpeg card to use until
we're asked to play.

Note that it could be a function of something else to make sure the same 'device'
plays the data if possible but then because we're emulating we 'find' all
the devices at once.

Worker thread
-------------

This thread handles packet queueing and sending IO to the real device
(MpegWriteDevice).  There is 1 queue per logical device.

The waits are WaitForMultipleObjects with 1 event per stream and
the worker request event - all are Manual Reset so we don't miss stuff.
The return code tells us what to do - either complete 1 request from the
stream queue, receive a new packet or terminate.

When the thread terminates this terminates all IO (courtesy of the IO
subsystem).  Calling Free() on the streams frees all the queues.



Format negotiation
------------------

The input format contains the size of the video and the source rectangle
(usually the whole video).  This will be proposed as the output format in
the normal way - but we don't want a DIB section but we won't request
the allocator from the renderer (make sure the base class doesn't!).


Properties
----------

We should support the relevant property interfaces.  What do we
do about audio mixer controls?

Note on resources
-----------------

Because real resources are involved here (well usually - ie the
hardware) we need some way of resolving resource conflicts (eg
trying to drive the same hardware to do compression and rendering
at the same time when it's not allowed).

The current religion on this is that conficts are OK between
separate filter graphs so what we really (may) need is the ability
to enumerate instances of ourselves in the same filter graph to
avoid conflicts.  This is not currently addressed here.

In any case for the current design we should not pop up twice in
the same filter graph.  Because a single device (audio and video)
can only be opened once through the ACT APIs multiple filters can
run on the same device at once and the driver will cope with
contention.

Basic design
------------

Components
----------

Filter

   CMpeg1PacketFilter

2 input pins (video and audio)

   CMpeg1PacketInputPin

1 output pin (handles overlay)

   CMpeg1Overlay

Shared handle to mpeg driver

   CMpegDevice

dual streams for mpeg driver

   CMpeg1DeviceStream

2 allocators - one for each pin

   CMpeg1StreamAllocator

   This is NOT based on CBaseAllocator because we'll have our own
   synchronization mechanisms.



Setup
-----

The driver will be a set of filter objects which will be composed into
suitable objects by a mapping layer.

The filter objects will be:

CMpeg1SystemSplitter - 1 input pin and 2 output pins.  Splits Mpeg1 system
layer.

CMpeg1DeviceRenderer

    Members

         m_AudioRenderer
         m_VideoRenderer


CMpeg1AudioPacketRender

CMpeg1VideoPacketRender

CMpeg1AudioPacketDecompress

CMpeg1VideoPacketDecompress


Issues
------

When connecting up the overlay we want to register for callbacks after
everything's been agreed - so do we need a 'complete connect'?  For
now we're setting everything up on CheckConnect (and not even checking
any media types!).


Where do we get the clock from?  I assume we get the reference clock from the
filter graph but that we can't be the reference clock?

Where do we negotiate the window size and position (alignment)? - from
IMediaWindow on the renderer.

See 'Note on resources'.

What about 'preroll' (time < 0) - just do it for now until our buffers
are full - does this mean just pausing the real device and sending it everything
we've got - won't that mess up the clock or something?

When is this filter available?  Answer should really be where there is
at least one Mpeg driver (MpegEnum... returns something).  Fortunately
at least all Mpeg drivers are going to output their video to the screen
so the destination thing isn't quite so bad as for audio.

If we have separate input pins for different Mpeg streams (audio and
video) is there a problem that the data could arrive out of (time)
sequence, or can the device cope with this?

GetBuffer() queueing.  The problem is that things may be OK when
you 'get' the buffer but NOT when you want to send, so the device
may get into some awkward queueing states.  Note that Decommit() is
the way to get the buffer back.

If we create a thread to pump the mpeg driver we can avoid waiting
in InputPin::Receive().  If not and we can't queue the buffer we really have
to wait for one to become free (maybe with a timeout if it's a quota
problem).

We only play 1 audio and 1 video stream at a time (!!).  We should
design to support CreatePin() to play multiple?  This would involve
being truly flexible about streams.

We rely on being State_Inactive when

Notes
-----

The source filter must give us the video size as part of the media type
(can it change in the stream?) - so it must parse the video sequence header.

When we start a stream we need to be sure we're at the start of a real
frame etc.  The source filter must ensure this.  If we get inactivated
the src filter must be informed - but how?

EOS and splicing - we don't want to specify EOS on the current packet
unless we know the next packet has a different STC.  What would be
slightly better is if the EOS notification contained an STC value
to set.  We could then queue up more data with a much smaller glitch.

In the MPEG api stuff we have to open the mpeg device to determine its capabilities.
Additionally we only get the devices back by enumeration and it's not clear whether
device ids or caps related to those ids are stable over time.  I think we
need something much more dynamic than that - devnode / MRID identification should
help here.

How to we make sure that a single MPEG stream ends up on the same device (ie
not audio and video sent to different cards?).  Is this by making sure the
rederers are different for different cards but the 'same' for the same card??

Not sure whether the MPEG stuff assumes that the device can only be opened
once or not.  In any case - either the Open should cope with multiple opens
or there should be another way of determining capabilities etc.

Decommit may take a while to complete if there are buffers still playing -
should this initiate a pause?  In this case we return from the commit but
don't allow a 'SetSize'.  When all buffers complete (or when we detect they
do since we have no thread monitoring them!) we finish the decommit.  In
this state in the allocator m_Committed is FALSE but m_pBuffer is non-null.
We don't allow decommit if the client is still holding on to buffers.

Note that in the allocator buffers can get into a number of awkward states
because they can be Release()'d at a random moment.  Consequently we
MUST NOT reuse buffers until they are Release()'d.


The ACT stuff has the SyncVideoToAudio which allows 2 streams to have
offset PTS's.  We could do this by using the PTS cum sample time to
look for differences and set the difference.  Not sure how this is
related to just setting them independently though??  It's possible
we should call this instead of setting the individual clocks.

We would like to 'pass the device around' to the active window - but
that's not currently possible.  One possiblity would be to open the
kernel driver multiple times and 'seize' the device with the cooperation
of the driver if you become the active window.

Should the kernel driver reserve some quota up front and allocate it
privately to get reliable throughput?

Comments on current ACT drivers
-------------------------------

1.  They should support the mixer API at least.

2.  The port driver is having to guess all the private driver settings in
    order to pull them out and present them to the driver (so I presume
    they are also in some kind of public structure).  Better to let
    the driver ask for properties by name for a given instance.

3.  Said before - but you shouldn't have to open the device for exclusive
    use just to get its caps.

4.  They should use DCI to update the clipping for mask type overlays.
    (any evidence they don't?).

5.  They only support 2 streams.  So (eg) they could not play 2 audio
    streams (not sure this would be sensible) or pass data, karaoke etc
    I THINK.  At any rate they only support 1 stream per TYPE.  This
    is not really a problem for MPEG1 which only supports 1 id for
    audio and 1 for video.

6.  The port driver ought to validate lengths better or use a try ... except
    while parsing a packet list.  Actually this is probably mainly done
    by MpIoctlVideoWritePackets.

7.  Should they have 2 device queues - one for audio and one for video?  Or
    can they remove it by key?  Actually the do have 2 device objects so
    it's OK.  This means we could manage both streams separately.

8.  Card specific information in player (ie mpegtest tests which card it
    is in order to decide what to do).

9.  Do they use the Scr field in the packet list?

10. They should call DisableLibraryThreadCalls in their Dll init.

11. Is the API synchronized for multiple threads?

12. The kernel driver doesn't seem to do anything with the SCR value
    in the MPEG_PACKET_LIST structure.

13. mpegtest waits on all buffers for completion - is this necessary?
    Can they complete the wrong wait first?

14. Need the device open to control the volume so can't use mixer app!

15. (v minor) MPEG_PACKET_LIST should point to a LPCVOID, not LPVOID and
    the structures themselves should be const.

16. No way to change the clock on a packet basis?  We want to switch
    time base seamlessly when the 'next' packet enters the decoder,
    so the app needs to sync the time change to the packet, not call
    it separately.

17. Might be nice to do the overlay mask thing in bands (rather than
    allocate the whole thing?).  Would be interesting to know what
    the hardware interface is on (eg) matrox.

18. What do MpegSetOverlaySource and MpegSetOverlayDestination do
    when the coordinates are negative or all outside the screen?
    (note that MPEG_OVERLAY_PLACEMENT seems undefined - maybe its
     used in the IOCTLs).

    Well, MpegSetOverlaySource is not supported (!),
    MpegSetOverlayDestination just casts the LONGs to ULONGs - this
    is pretty crummy.

19. What do we do if we're asked to display the overlay (by clipping
    change) but we can't open the device?

20. To synchronize clocks with a real clock the best thing to do would be to
    pass a delta from the system clock to the kernel.  This will be taken
    care of when we do our own drivers because the kernel driver (filter)
    will be passed a marshalled pointer to the ref clock - thus we need
    to be sure of having a kernel implementation of ref clocks.

21. The audio on (eg) the marvel2 appears never to set the hardware ref
    clock, rather it just works out what the STC is as a delta from
    the hardware ref clock.  This is going to make it difficult to
    synchronize with an external source!  In this case we need a caps
    field to know this is the case.

22. Why can't the PTS be part of the MPEG_PACKET_LIST structure?  After
    all the Scr is already in there.  This way we could avoid passing
    the packet headers which just confuse downstream guys.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filters\mpeg1\packet\spec.txt ===
MPEG1 packet player
-------------------

See mpegdef.h for definitions of values.

The MPEG1 packet player is a filter supporting:

    IFilter
    IMediaFilter

This filter has class id CLSID_Mpeg1PacketPlayer.

Media types
-----------

It supports 2 input pins which accept the following 2 media types
respectively:

    Major type         Subtype                         Props
    -----------------------------------------------------------------
    MEDIATYPE_Audio    MEDIASUBTYPE_Mpeg1PacketAudio   None
    MEDIATYPE_Video    MEDIASUBTYPE_Mpeg1PacketVideo   Default video props

These 2 pins accept samples (see ISO11172) which contain a packet()
format data (starting with a packet_start_code) and stream ids
consistent with audio and video streams respectively.  Each sample
start must start with the a packet_start_code


There is 1 output pin (connected to the renderer?) supporting the
following media type:


    Major type         Subtype                   Props
    ------------------------------------------------------------------
    MEDITTYPE_Video    MEDIATYPE_NULL            Default video props

The input pin of the renderer must support IOverlayWindow.

Filter properties
-----------------



Timing
------

The first packet received after going into 'Paused' from 'inactive' state MUST
have a PTS.  This PTS (pts(0)) will is saved.  When 'Run' is issued
we have 3 numbers:

    The time stamp on the first smaple - ts(1)
    The current time                   - ts(2)

We must set the STC to pts(0) - (ts(1) - ts(2)) - all in appropriate
units.  This will cause the first sample to be presented the right
time after the play starts.

While playing we must maintain the different between the STC and
the current time - which we will also remember.

While paused we have to count the time Paused and add it to the
STC, Reference clock time difference.

The ability to synch the stream to the system clock will be
determined by how frequently we get packets with PTSs in them because
we'll set the STC on a per sample basis.

The client can change the synch by changing the sample start times.


When the device is held open
----------------------------

For now this be be whenever the output overlay pin is connected.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filters\sbe\wmsdk\zeusette\readme.txt ===
The files in this tree are the delta files to the zeusette tree that we need
 in order to build a functional SBEIO.DLL binary (out of the zeusette tree).

The directory structure has been kept the same as in the zeusette tree.

NOTE: the files dvrfilesink.idl and dvrfilesource.idl which were duplicated
in our own tree's IDL subdirectory, are not once again duplicated into this
subtree.  Those files are updated as well, and should be copied to the zeusette
tree from this project's IDL subdirectory.

Updated files:

%SDXROOT%\multimedia\dshow\filters\sbe\wmsdk\zeusette\sdk\dll\dvr\dvrsink\dvrsink.def
%SDXROOT%\multimedia\dshow\filters\sbe\wmsdk\zeusette\sdk\dll\dvr\dvrsink\dvrsink.rc
%SDXROOT%\multimedia\dshow\filters\sbe\wmsdk\zeusette\sdk\dll\dvr\dvrsink\sources

%SDXROOT%\multimedia\dshow\filters\sbe\idl\dvrfilesink.idl
%SDXROOT%\multimedia\dshow\filters\sbe\wmsdk\zeusette\sdk\writer\sink\dvrsink\DVRSharedMem.h
%SDXROOT%\multimedia\dshow\filters\sbe\wmsdk\zeusette\sdk\writer\sink\dvrsink\dvrsink.cpp
%SDXROOT%\multimedia\dshow\filters\sbe\wmsdk\zeusette\sdk\writer\sink\dvrsink\dvrsink.h

%SDXROOT%\multimedia\dshow\filters\sbe\idl\dvrfilesource.idl
%SDXROOT%\multimedia\dshow\filters\sbe\wmsdk\zeusette\sdk\writer\sink\dvrsource\dvrsource.cpp
%SDXROOT%\multimedia\dshow\filters\sbe\wmsdk\zeusette\sdk\writer\sink\dvrsource\dvrsource.h

%SDXROOT%\multimedia\dshow\filters\sbe\wmsdk\zeusette\sdk\writer\sink\filesinkv1\FileSinkv1.cpp
%SDXROOT%\multimedia\dshow\filters\sbe\wmsdk\zeusette\sdk\writer\sink\filesinkv1\FileSinkv1.h

The files were updated to:
1. have a settable async IO reader/writer (set by the DVRIO layer after instantiation)
2. have a virtual Write(..) method in the base classes, in filesinkv1.*
3. extend the private interface to allow setting the async IO reader/writers in the IDLs
4. build to SBEIO.DLL vs. DVRSINK.DLL
5. resource for SBEIO.DLL does not mention DVR

The following batch file, when run from a ZEUSETTE razzle window, copies the
correct files over.

================================================================================

@echo off

if "%SDXROOT%" == "" goto norazzle
if "%1" == "" goto nosbesdxroot

setlocal

set TSDVR_ZEUSETTE_SRC_LOC=%1%\multimedia\dshow\filters\sbe\wmsdk\zeusette
set TSDVR_IDL_LOC=%1%\multimedia\dshow\filters\sbe\idl

set TSDVR_ZEUSETTE_DVRSINK_DLL_SRC=%TSDVR_ZEUSETTE_SRC_LOC%\sdk\dll\dvr\dvrsink
set TSDVR_ZEUSETTE_DVRSINK_SRC=%TSDVR_ZEUSETTE_SRC_LOC%\sdk\writer\sink\dvrsink
set TSDVR_ZEUSETTE_DVRSOURCE_SRC=%TSDVR_ZEUSETTE_SRC_LOC%\sdk\writer\sink\dvrsource
set TSDVR_ZEUSETTE_FILESINKV1_SRC=%TSDVR_ZEUSETTE_SRC_LOC%\sdk\writer\sink\filesinkv1

set ZEUSETTE_DVRSINK_DLL_LOC=%SDXROOT%\multimedia\src\zeusette\SDK\dll\dvr\dvrsink
set ZEUSETTE_DVRSINK_LOC=%SDXROOT%\multimedia\src\zeusette\SDK\writer\sink\dvrsink
set ZEUSETTE_DVRSOURCE_LOC=%SDXROOT%\multimedia\src\zeusette\SDK\writer\sink\dvrsource
set ZEUSETTE_FILESINKV1_LOC=%SDXROOT%\multimedia\src\zeusette\SDK\writer\sink\filesinkv1

%_NTDRIVE%

REM ----------------------------------------------------------------------------
REM checkout target DLL files we will overwrite
cd %ZEUSETTE_DVRSINK_DLL_LOC%
sd edit dvrsink.def
sd edit dvrsink.rc
sd edit sources

REM ----------------------------------------------------------------------------
REM check out the dvrsink files we will overwrite
cd %ZEUSETTE_DVRSINK_LOC%
sd edit dvrsink.cpp
sd edit dvrsink.h
sd edit dvrsharedmem.h
sd edit dvrfilesink.idl

REM ----------------------------------------------------------------------------
REM check out the dvrsource files we will overwrite
cd %ZEUSETTE_DVRSOURCE_LOC%
sd edit dvrsource.h
sd edit dvrsource.cpp
sd edit dvrfilesource.idl

REM ----------------------------------------------------------------------------
REM check out the filesinkv1 files we will overwrite
cd %ZEUSETTE_FILESINKV1_LOC%
sd edit filesinkv1.h
sd edit filesinkv1.cpp

REM ----------------------------------------------------------------------------
REM copy the new files over

copy %TSDVR_ZEUSETTE_DVRSINK_DLL_SRC%\sources           %ZEUSETTE_DVRSINK_DLL_LOC%\
copy %TSDVR_ZEUSETTE_DVRSINK_DLL_SRC%\dvrsink.def       %ZEUSETTE_DVRSINK_DLL_LOC%\
copy %TSDVR_ZEUSETTE_DVRSINK_DLL_SRC%\dvrsink.rc        %ZEUSETTE_DVRSINK_DLL_LOC%\

copy %TSDVR_ZEUSETTE_DVRSINK_SRC%\dvrsharedmem.h        %ZEUSETTE_DVRSINK_LOC%\
copy %TSDVR_ZEUSETTE_DVRSINK_SRC%\dvrsink.cpp           %ZEUSETTE_DVRSINK_LOC%\
copy %TSDVR_ZEUSETTE_DVRSINK_SRC%\dvrsink.h             %ZEUSETTE_DVRSINK_LOC%\
copy %TSDVR_IDL_LOC%\dvrfilesink.idl                    %ZEUSETTE_DVRSINK_LOC%\

copy %TSDVR_ZEUSETTE_DVRSOURCE_SRC%\dvrsource.cpp       %ZEUSETTE_DVRSOURCE_LOC%\
copy %TSDVR_ZEUSETTE_DVRSOURCE_SRC%\dvrsource.h         %ZEUSETTE_DVRSOURCE_LOC%\
copy %TSDVR_IDL_LOC%\dvrfilesource.idl                  %ZEUSETTE_DVRSOURCE_LOC%\

copy %TSDVR_ZEUSETTE_FILESINKV1_SRC%\filesinkv1.h       %ZEUSETTE_FILESINKV1_LOC%\
copy %TSDVR_ZEUSETTE_FILESINKV1_SRC%\filesinkv1.cpp     %ZEUSETTE_FILESINKV1_LOC%\

REM ----------------------------------------------------------------------------
REM compare dvrsink files
fc %TSDVR_ZEUSETTE_DVRSINK_DLL_SRC%\sources         %ZEUSETTE_DVRSINK_DLL_LOC%\sources
fc %TSDVR_ZEUSETTE_DVRSINK_DLL_SRC%\dvrsink.def     %ZEUSETTE_DVRSINK_DLL_LOC%\dvrsink.def
fc %TSDVR_ZEUSETTE_DVRSINK_DLL_SRC%\dvrsink.rc      %ZEUSETTE_DVRSINK_DLL_LOC%\dvrsink.rc

fc %TSDVR_ZEUSETTE_DVRSINK_SRC%\dvrsharedmem.h      %ZEUSETTE_DVRSINK_LOC%\dvrsharedmem.h
fc %TSDVR_ZEUSETTE_DVRSINK_SRC%\dvrsink.cpp         %ZEUSETTE_DVRSINK_LOC%\dvrsink.cpp
fc %TSDVR_ZEUSETTE_DVRSINK_SRC%\dvrsink.h           %ZEUSETTE_DVRSINK_LOC%\dvrsink.h
fc %TSDVR_IDL_LOC%\dvrfilesink.idl                  %ZEUSETTE_DVRSINK_LOC%\dvrfilesink.idl

REM ----------------------------------------------------------------------------
REM compare dvrsource files
fc %TSDVR_ZEUSETTE_DVRSOURCE_SRC%\dvrsource.h       %ZEUSETTE_DVRSOURCE_LOC%\dvrsource.h
fc %TSDVR_ZEUSETTE_DVRSOURCE_SRC%\dvrsource.cpp     %ZEUSETTE_DVRSOURCE_LOC%\dvrsource.cpp
fc %TSDVR_IDL_LOC%\dvrfilesource.idl                %ZEUSETTE_DVRSOURCE_LOC%\dvrfilesource.idl

REM ----------------------------------------------------------------------------
REM compare filesinkv1 files
fc %TSDVR_ZEUSETTE_FILESINKV1_SRC%\filesinkv1.cpp   %ZEUSETTE_FILESINKV1_LOC%\filesinkv1.cpp
fc %TSDVR_ZEUSETTE_FILESINKV1_SRC%\filesinkv1.h     %ZEUSETTE_FILESINKV1_LOC%\filesinkv1.h

endlocal

goto end

:nosbesdxroot
@echo must specify the SDXROOT of the tree with the SBE dir
@echo e.g. f:\sd\l6dev
goto end

:norazzle
@echo not a razzle window

:end

================================================================================
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filters\tsdvr\tools\graphedt\graphedt\proppage.txt ===
I made quite a few changes to the implementation of IPropertyPageSite
in GraphEdt. This now reflects the protocol intended by OLE.

Refer to "\\ole\specs\draft\Interface Specification for OLE Controls.doc",
which is by far the best documentation I have found on this.

A few things I have noticed in existing property pages, which will break
with my new version.

IPropertyPage::TranslateAccelerator - should return E_NOTIMPL if it doesn't
        process any messages, S_FALSE if it doesn't use this message and
	S_OK if if this message was used.

IPropertyPage::SetObjects - If called with parameter 0 all
	addref'ed pointers from a previous SetObjects call should be released.

	SetObjects will be called twice. Once with the pointers, second time
	with 0 to release them.

	SetObjects should be for initialisation/clean up of the property
	page.

IPropertyPage::Show - can be used to show or hide the property page
	(when user is clicking between tabs). Only SW_SHOW, SW_SHOWNORMAL
	 and SW_HIDE are allowed as argument.

IPropertyPage::Activate - this can also be used to show and hide the property
	page and can therefore be used more than once during the lifetime
	of a property page. (it is actually the prefered mechanism to
	show/hide the pages, since memory is only needed for the visible
	page.

IPropertyPage::Deactivate - Destroys a window, but state of property
	page must be kept for next Activate call.

IPropertyPage::SetPageSite - This must addref the pointer given to it and
	release the pointer if the argument is NULL.

Please read the documentation from \\ole - it specifies which return codes
are allowed and which are not.

Jonathan has actually started (maybe even finished) to implement a class
which deals with most of these methods in order to make the property
pages easier and faster to create.



=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filters\tve\addtobuild.txt ===
also see - http://winweb/setup/ bottom of the page.

1) Add lines to add these files

		tvecontr.dll
		tvefilt.ax

   in

		D:\nt\published\sdk\lib\placefil.txt

	Keep alphabetized

	
	placefil.txt causes files to be binplaced in 
		d:\binaries.X
	instead of
		d:\binaraies.X\dump


2)  Build to move placefil over to where it belongs (so binplace can find it).

cd D:\nt\published\sdk\lib  
build /Z


3)  Add lines to

  D:\nt\admin\ntsetup\inf\win4\inf\layout.inx


4)  Add lines to

  D:\nt\admin\ntsetup\inf\win4\inf\syssetup.inx


5)  Build in 

cd D:\nt\admin\ntsetup\inf\win4\inf
build /Z


6)  Add lines to  XXX\sources
 
	for POST_BUILD0 step
	adding h/idl/mc files that need to be distributed

7)  Add lines to 
	D:\nt\tools\publicchanges.txt
	listing these files



> run a time build on everything... 
  d:>nt> perl tools\timebuild.pl

> use the results to try and install on another machine ***



For Driver Replacement - disable Win32 driver replacement deamon
		Run RegEdit
		Search fro SFCDisable
		Change from 0x0000 0000 to 0xffff ff9d


IPSink/NDis

	d:\\nt\drivers\wdm\bad\ipsink
	d:\\nt\multimedia\dshow\filters.ks\ipsink

	need files 
		ipsink.ax			// copy to system32
		ndisip.sys			// copy to winnt/system32
		streamIp.sys		// copy to winnt/system32
		streamIp.inf		//
		ndisip.inf			

	 Run 
		Control Panel->Add New Hardware Wizard/Troubleshoot a device-> (wait for Plug&Play)
		Add A new Device -> No, I want to select the hardware from a list ->

			 Network Adapters -> Have Disk -> Browse -> (navigate to and choose  ndisip.inf)
			 Choose BAD IPSINK/NDS driver (Win2k) -> Next -> ...

			 Sound, video, and game controllers -> Have Disk -> Browse -> navigate to and choose streamIP.inf)
			 Choose BDA IPSink -> Next -> ...

		Probably need a reboot around now...
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filters\tve\buildnotes.txt ===
Build Options for ATVEFSend/TVEContr

These now built under Build - 

//
	1) get razzle running...
	2) enlist into multimedia (but then you already did that didn't you?
		cd %_NTROOT%\%_NTDRIVE%
		sdx enlist multimedia
	3a) delete previous public files
		> cd %_NTROOT%
		> revert_public
	3b) sync to changes
		> sdx sync

	4) for each build type (debug, release, 64 bit debug, 64 bit release)
		a) build the published files
			> cd %_NTROOT%\%_NTDRIVE%\multimedia\published
			> build /Z
		b) build TVE
			> cd multimedia\dshow\filters\tve
			> build /CZ

ToDo --
	need to add released files to place after reverse integration of Sean's private directory
		D:\nt\published\sdk\lib\placefil.txt  (see AddToBuild.txt)

Caution -
	- building with the IDE in any of the TVE directories will cause MIDL to leave .h and .c
	  around... These must be deleted or bad things will happen...


// -------------------- more old notes - ignore this stuff. ------------------------

To make them compile, you need the VC98 (VC 6.0) binaries under the mstools directory.  To

	1) enlist into mstools\c12
			cd ntc\public\mstools
			mkdir c12
			cd c12
			enlist -s //phoe -p c12
			ssync -r

	2) Use build - the dev environment no longer works...
		iebuild /D /w /c debug


Tools->Options->Directories, 
	Include Files:
	Library Files
	Source Files			should all be empty...

Path's

// ----------------
TestSend.exe

Link:
  new: Comctl32.lib Wininet.lib libcd.lib libcpd.lib comsupp.lib ws2_32.lib kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib 
       advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib

// **********************************************************************
// ---- stuff below here is old  Igonore It!
************************************************************************

old include:
   ..\include,e:\ntc\public\sdk\inc\atl30,e:\ntc\public\sdk\inc,e:\ntc\public\sdk\inc\crt,e:\ntc\public\mstools\c12\inc

old link - input Additional Library Path
	e:\ntc\public\mstools\c12\lib,e:\ntc\public\sdk\lib\i386

old Resources
    ..\include;e:\ntc\public\sdk\inc

Midl
    ..\include,e:\ntc\public\mstools\c12\inc,e:\ntc\public\mstools\c12\atl\include,e:\ntc\public\sdk\inc
-----------------------------------------------------------------
--  to build (mostly) under the NTC tree
			Build Options for TVEContr

For NTC Build

e:\ntc\private\genx\types\vccom needed in the include file listing

NTC: Tools->Options->Directories

  Include Files:
	e:\ntc\public\sdk\inc\atl30
	e:\ntc\public\sdk\inc
	e:\ntc\public\sdk\inc\crt
	e:\ntc\private\genx\types\vccom		<--- new as of 10/20


  Library Files
	e:\ntc\public\sdk\lib\i386

  Source Files
	E:\NTC\PRIVATE\AMOVIE\FILTERS\TVE\INCLUDE
	E:\NTC\PRIVATE\AMOVIE\FILTERS\TVE\COMMON
	e:\ntc\public\sdk\inc\atl30
	e:\ntc\public\sdk\inc\crt

-- needs C12 directory (VC 6.* libs and headers) - HA! Buggy!
	> cd     /ntc/public/mstools
	 mkdir c12
	 cd c12
	 slm enlist -s //muroc/slm -p root/dev/tools/c32

C12 directory doesn't contain VC6 need to:
  >  copy "d:\program files\microsoft visual studio\vc98\lib\msvcprtd.lib" 
     to the C12 lib (e:\ntc\public\mstools\c12\lib)
  > same for retail build (msvcprt.lib)
	 
-- must remove /GZ from the compiler switches... 
   (compiler stack-checking feature ... else get unresolved external symbol _chkesp ).
   ( think this has something to do with <Winsock2.h> include in stdafx.h )

- note that NTC version of TestSend doesn't build in the Unicode Release

Current list of librarys
  AtvefSend: 
    VcComSup.lib Comctl32.lib Wininet.lib ws2_32.lib <+ standard>
	 
	vccomsup.lib ws2_32.lib kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib 
    shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib 

ws2_32.lib kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib 
ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib vccomsup.lib MSVCPRTD.LIB msvcrtd.lib libc.lib

------------------------------------------------------------------
To Build Under the VC 6.0 Tree

Tools->Options->Directories		(pretty much standard VC stup)

Include Files:
D:\Program Files\Microsoft Visual Studio\VC98\INCLUDE
D:\Program Files\Microsoft Visual Studio\VC98\MFC\INCLUDE
D:\Program Files\Microsoft Visual Studio\VC98\ATL\INCLUDE

Library Files
D:\Program Files\Microsoft Visual Studio\VC98\ATL\INCLUDE
D:\Program Files\Microsoft Visual Studio\VC98\MFC\LIB

Source Files
D:\Program Files\Microsoft Visual Studio\VC98\MFC\SRC
D:\Program Files\Microsoft Visual Studio\VC98\MFC\INCLUDE
D:\Program Files\Microsoft Visual Studio\VC98\ATL\INCLUDE
D:\Program Files\Microsoft Visual Studio\VC98\CRT\SRC
E:\NTC\PRIVATE\AMOVIE\FILTERS\TVE\INCLUDE
E:\NTC\PRIVATE\AMOVIE\FILTERS\TVE\COMMON

Executable Files
D:\Program Files\Microsoft Visual Studio\Common\MSDev98\Bin
D:\Program Files\Microsoft Visual Studio\VC98\BIN
D:\Program Files\Microsoft Visual Studio\Common\TOOLS
D:\Program Files\Microsoft Visual Studio\Common\TOOLS\WINNT
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filters\tve\atvefsend\errata.txt ===
ATVEFSend Errata

Last updated:
		Feb 28, 2000



Note 1) Trigger Character Encoding

According to the Spec, characters in trigger outside the range of 0x20 to 0x7e 
are to be encoded.  This is doen with standard Internet URL mechanism of the 
percent character ("%") followed by the two-digit hexadecimal value of the character
in standard ASCII (?? how different is this than ISO-8859-1 ??)   ATVEFSend does this
automatically.

Note possible Spec problems:
		In ATVEFSend, the characters '[', ']', and '%' are also escaped,
		even though they are within the range of 0x20 to 0x7e.  This makes parsing on the
		receiver side far easier..  

		The name string is encoded - this lets it contain values outside the range 0x20
		to 0x7e, and also lets it contain square brackets contrary to the spec.

	Receivers code should unencode all strings (name, URL, and script), and be able to 
	handle '%NN' encoded values that happen to be inside the 0x20 to 0x7e range.


Note 2) Max Trigger Length

All triggers are required to be less than 1480 or so bytes long. If they are longer, an 
ATVEFSEND_E_TRIGGER_TOO_LONG error will be returned.  Calculation of this max length
is a bit fuzzy by about 5-20 characters due to encoded characters and short/long keywords.
Hence strings that appear to be short enough may actually be rejected.



Note 3) Norpack Inserter Hangs or Refuses Connection on Initialize (error 0x8007274c)

Often the Norpack Inserter will hang during the Initialize call (for ATVEFInserterSession and 
ATVEFLine21Session).  This happens more often than not after breaking out of an established
connection instead of disconnecting nicely.  So far, the only way to fix things I've discovered
is to power cycle the inserter.


Note 4) Line21Session::SendTriggerEx - new method that takes TveLevel parameter

SendTriggerEx  (just for Line21Session) is like SendTrigger, but takes an additional argument. 
	[in] double rTveLevel.  
This should normally be 1.0 for ATVEF compient triggers, and 0.0 
for old pre-Atvef triggers, for sending to WebTV boxes. A value of 0.0 value causes no
[t:] field to be entered in the trigger at all.   Only 1 decimal place in the fraction
is supported.  SendTriggerEx should only be used for testing, non 1.0 values are not
Atvef Complient.


Note 5) Line21Session::SendTriggers - Automatically padded with Norpack control codes

Line21Session::SendTrigger automatically pads the constructed trigger string
with correct characters for sending on Norpack encoders,  
		   The header padding prepended to is : "2 t2\r"
		   The trailer padding appended is    : "\r\003\r"
Construct the trigger yourself and use SendRawTrigger if you desire to send
other padding characters (e.g. 'c1' instead of 't2' to send trigger as closed
caption text.)

Note 6) Line21Session::SendRawTrigger - CRC works despite Norpack control codes

SendRawTrigger will construct and append a CRC field to a raw trigger if the
the 'insertCRC' flag is set true. This is designed to work despite any control
characters before or after the trigger string added to configure a Norpack CC inserter.

This CRC calculations ignore any characters before the
first "<" or "[" character (which ever comes first), and after the last ">" or "]"
character (which ever comes last).  The CRC field [NNNN]is inserted after
the last "]" or ">" character, before any trailing Norpack characters.


Note 7) IATvefInserterSession, IAtvefMulticastSession - new SendRawAnnouncement method
This method allows you to send self formated announcements.  No error checking is performed
on wether they are valid or not. Use of this method is **highly** discouraged except for 
purposes of generating bad announcements for testing ATVEF receivers.


Note 8) Bug fixes 1/31/2000

-> CAtvefPackage::AddLotsOfFiles (addDir), now returns error on bogus directoryies..
-> GenTrigger:: (line 84) Terminates string with zero before computing CRC
-> Line21::SendRawTrigger - now computes CRC around padding caracter (Note6 above)
-> Line21::SendTriggerEx - New method - now takes new 'tveLevel' parameter.
-> Inserter/Multicast::SendRawAnnouncement - New method

Note 9) Bug fix...
Most of the IAtvefAnnouncement methods were automatically disconnecting the server when accessed,
this was in error.  The following routines do disconnect from the server when called.

	AddEmailAddress
	AddExtraAttribute
	AddPhoneNumber
	AddStartStopTime
	ClearEmailAddresses
	ClearExtraAttributes
	ClearPhoneNumbers
	ClearTimes
	GetStartStopTime

	put/get_ContentLevelID
	get_EmailAddresses
	get_ExtraAttributes
	put/put_LangID
	put/get_MaxCacheSize
	get_Media
	get_MediaCount
	get_PhoneNumbers
	put/get_Primary
	put/get_SAPDeleteAnnc
	put/get_SAPMessageIDHash
	put/get_SAPSendingIP
	put/get_SDPLangID
	put/get_SecondsToEnd
	put/get_SendingIP
	put/get_SessionID
	put/get_SessionLabel
	put/get_SessionName
	put/get_SessionURL
	put/get_SessionVersion
	put/get_UserName
	put/get_UUID

(This may be swinging overboard in the opposite direction too far...)


The only methods that will now automatically disconnect are:

	ConfigureAnncTransmission
	ConfigureDataAndTriggerTransmission
	ConfigureDataTransmission
	ConfigureTriggerTransmission

(There is some question as to wether the Configure Data and Trigger calls
should not disconnect the announcement connections. This is hard to do, so they
will disconnect all 3 connections.)

Note 10) IAtvefLine21 Session bug fixes.
  A disconnect may immediatly follow a connect - no longer need to have an initialize here.

  Bogus few bytes occasionally found before valid data in a trigger
  (particularly second or later ones after a connect) have been eliminated.


Note 11) Line21Session sends to 't2', instead of 'c1'
  Brief bug in bugfix 10 caused data to be send to C1, instead of T2.  Fixed.

2/15/2000

Note 12) IAtvefPackage::DumpToBSTR() automagically truncates output
   strings to a max of 63K bytes to prevent tragic errors. It returns S_FALSE
   in this case, and appends the string "*** PACKAGE TO LARGE - TRUNCATING DUMP ***" to
   end of dump.

   This method is predominatly a debug method and doesn't handle large strings
   reliably. As such this shouldn't be a problem.
   a problem.

Note 13) SendRawAnnouncement methods 'hidden' from VB.


2/21/2000

Note 14)  Bug fixes:

	Newly found bug in CTVEComPack::WriteStreamHeader (called from CPackage::AddFile)
	causing  heap allocation errors caught in debug version when GetMIMEContentLocation
	was shorter than Filename.

	CPackage::GetTransmitSize() now works even after a package has been fragmented (sent).
	It used to return an error value.  This may return a slightly different (more correct)
	value after the package has been sent than before, since it works on the true number
	of bytes sent.

	CPackage::AddFile() no longer resets (kills) the package when adding a non-existant file.
	(It still throws an error however, a VB client needs to catch this error and continue.)

	CPackage::DumpToBSTR() used to leak temp files, forgot to close a file handle. Fixed.
	
	CPackage::DumpToBSTR() used to have problems converting compressed files in the package,
	was using a conversion to wide char routine that used NULL termination.  Changed to do
	it by hand.

Note 15)  SendRawAnnouncement
    This method is provided to send self-generated and formatted announcements to clients.
	As such, it is intended for debugging purposes only, and should not be used by normal clients.
	There is a problem with this method in that the Connect() method attempts to verify the announcement 
	specified by the normal methods on IAtvefAnnouncement is valid, even though that announcement
	is not actually sent.  Else connect fails.  The work around is to actually specify a valid
	default announcement before calling connect, and then use SendRawAnnouncement() to send
	the test announcement.  Parameters in the true announcement will not be used.



Note 16)	More bug fixes   (3/02/2000)
	IAtvefInsertSession::Disconnect() now disconnects the announcement session, which
	should disconnect the socket used to talk to the inserter. This means other clients
	should be able to now talk to the inserter.

	IAtvefLine21Session.  Call to Disconnect() before call to Initialize() no longer
	crashes.  (Returns ATVEFSEND_E_NOT_INTIALIZED error.)


	IAtvefInserterSession:	Call to Disconnect() actually disconnects the connection to
	the inserter.  This allows another process to use it during this period.  Additional
	change to Connect (actually first send), causes a reconnection if previously disconnected.
	NOTE: the inserter is actually connected during the first Initialize, not the first
	Connect.  This could be a bit wierd.

	IAtvefAnnouncement calls to put_UserName, put_SessionURL, put_SessionName, 
	put_SessionLabel, and put_UUID now will not fail on zero length strings.

	Bug in DateTONTP TIme where date was off by 2 days.  Fixed.

	BIG BUG FIX - converted to use correct GZIP implementation, using CRC32, rather than adler32.
	Also added support to skip optional fields in gzip header (extra, file, and crc), rather.
	NOTE - Fixed huffman dictionaries headers may not work (random calls to adler32 still left
	in dictionary code). Don't expect many of these.


	Updated version number of the dll/file from 1.0.0.5  to 2.0.0.0.


Note 17)	Prefix bug fixes (6/22/2000)
	Five minor bugs the prefix tool pointed out fixed.  (See bug 118709-118715).   Most had to
	do with not catching NULL returns from new correctly, leading to crashes in out of memory 
	situations.  (Most were because I tried to NULL terminate the null string.)  Also fixed
	minor memory leak in gzmime.cpp where I was reallocating strings to different lenghts, but
	forgot to delete the old string.



Note 18)	Fixed 0 start/stop time bug (underflow) (11/22/2000)
	Passing of 0's in the t=start stop  (IATVEFAnnouncement AddStartStopTime() method) had 
	numeric underflow problems do to use of unsigned values, producing some very bad (large) values.
	Dates in first two days of January 1900 may be wrong due to this fix.




Note 19)	Removed debug assert in put_LangID() and put_SDPLangID() (11/22/2000)
	These two methods tossed a "Debug Assertion Failed" error when passed bad language 
	ids (e.g. 99999).  Fixed by removing the assert...


Note 20)	Fixed debug build problem in trees.c Assert()	(11/22/2000)
	Turning on debug code made a new error pop up in an Assert in this file due to bad numerical casting.


Note 21)	New (extra) methods. (11/22/2000)
	Added the following interface methods to IATVEFMedia

	HRESULT ExtraAttributes([out, retval] IDispatch* *ppVal);	// returns IATVEFAttrList*
	HRESULT AddExtraAttribute([in] BSTR bstrKey, [in] BSTR bstrVal);
	HRESULT ExtraFlags([out, retval] IDispatch* *ppVal);		// returns IATVEFAttrList*
	HRESULT AddExtraFlag([in] BSTR bstrKey, [in] BSTR bstrVal);
	
	And the following ones to IATVEFAnnouncement.
	HRESULT ExtraFlags([out, retval] IDispatch* *pVal);		// returns IATVEFAttrList*
	HRESULT AddExtraFlag([in] BSTR bstrKey, [in] BSTR bstrValue);
	HRESULT ClearExtraFlags();

	ExtraFlags allow any arbitrary flag to be added to either the session or media level of the 
	form (key=value), while the ExtraAttributes allow attributes of the form (a=key:value) to 
	be added.  These are primarily supported to write debug announcements to test the reliability 
	and hardness of receivers, and are not intended for normal use.

Note 20)	Changed .Dll version (11/22/2000)
	Changed from 2.0.0.0 to 2.1.0.0 because of new interface methods above.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filters\tve\tests\readme.txt ===
Tests
	- various small applications to test the TVE system

TestTVE2
	- C++ application to test TVE interfaces

VBTest1
	- VB Application to test ITVEAttrMap

VBTest2
	- Low level VB Application to test trigger parser

VBTestTrigger
	- VB Application to test trigger parser.  Lets you
	  enter and modify strings to parse, and displays
	  each parsed field in a form.  (Tests all ITVETrigger
	  methods.)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filters\tve\tests\bin\readme.txt ===
wsend
	transmits known data to either a multicast group or via tunnel to a
	Broadcast Router.  The payload size and transmission rate are 
	configurable.  The payload consists of the following (DWORDs):

            index    field       description
            -------  ----------- ------------------------------------------------
            0        checksum    DWORD sum of index, max, cycle, id, size
                                  1st buffer DWORD
            1        index       incrementing counter which identifies a 
                                  specific packet
            2        max         index max; cycles when it reaches this value
            3        cycle       identifies a particular cycle
            4        id          identifies the particular data stream
            5        size        size of entire payload, inclusive of the header
	    6 - last pad	 configurable payload pad

wlisten
	multicast listener.  A packet counter increments when a packet is
	processed.  Alternately, the packet payload can be dumped and viewed
	as the packets are received.  If the following registry DWORD value
	exists and is set to 1 (HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\WListen\Stats),
	wlisten can be configured to keep stats on lost/corrupt packets
	transmitted wsend via a wsend stream.

mctunnel
	multicast receiver which tunnels received packets to a Broadcast Router
	via TCP connection.

reflect 
        multicast reflector from one physical network to another via a multi-
        homed machine; use -? switch to view the command line options.

mdump
	console based multicast dump utility which displays received packets.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filters.ks\dbgpages\readme.txt ===
dbgpages.ax NOTES

**************************************************

    This is a property page designed explicitly for debugging issues internal
to KsProxy, AVStream, ks.sys, etc...  In order to use this, you must build
a private version of ksproxy.ax which defines DEBUG_PROPERTY_PAGES and 
regsvr32 the built version of dbgpages.ax.  Note that proppage.dll must also
be registered in order for this to work properly.

    Each proxied pin will have a property page "Debug Pipes" which will show
the proxy's internal pipes configuration for a pin, the DShow allocator
properties for the assigned allocator, and the kernel pin's allocator framing
properties.  Note that if two proxied pins are connected, due to an odd
behavior in graphedt, you will get property pages for **BOTH** when you click
properties of one of them.  The first property page is that of the connected
pin and the second is that of the pin you clicked properties on.  This is 
due to the pin property implementation in graphedt.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filters.ks\tests\testmix\testmix.rtf ===
{\rtf1\ansi \deff0\deflang1024{\fonttbl{\f0\froman Times New Roman;}{\f1\froman Symbol;}{\f2\fswiss Arial;}{\f3\fswiss Helvetica;}{\f4\fmodern Courier;}{\f5\fswiss Helv;}{\f6\froman Ariel;}{\f7\fmodern Courier New;} {\f8\fswiss Univers (WN);}{\f9\froman CG Times (WN);}{\f10\fswiss MS Sans Serif;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0; \red255\green255\blue255;\red0\green0\blue127;\red0\green127\blue127;\red0\green127\blue0;\red127\green0\blue127;\red127\green0\blue0;\red127\green127\blue0;\red127\green127\blue127;\red192\green192\blue192;}{\stylesheet{\s244\li120\sb80\sl-240  \f3\fs18\up6\lang1033 \sbasedon0\snext0 footnote reference;}{\s245\li120\sb80\sl-240 \f3\fs20\lang1033 \sbasedon0\snext0 footnote text;}{\s251\fi-245\li360\sb120\sa60\sl-240 \f10\fs20\lang1033 \sbasedon253\snext251 heading 4;}{ \s252\li120\sb120\sa60\sl-240 \f3\fs20\lang1033 \snext0 heading 3;}{\s253\li120\sb120\sa60\sl-240 \b\f3\fs20\lang1033 \snext0 heading 2;}{\s254\li120\sb280\sa120\sl-320 \b\f3\lang1033 \snext10 heading 1;}{\s255\li360\sb80\sl-240 \f3\fs20\lang1033  \snext0 Normal Indent;}{\li120\sb80\sl-240 \f3\fs20\lang1033 \snext0 Normal;}{\s2\fi-240\li600\sb60\sl-240 \f3\fs20\lang1033 \snext2 Jli;}{\s3\li120\sb60\sl-240\keep\tx520\tx920\tx1320\tx1720\tx2120 \f4\fs16\lang1033 \snext3 Ex;}{\s4\li120\sb160\sl-240  \f3\fs20\lang1033 \snext13 Sa1;}{\s5\fi-240\li360\sl-240\tx360 \f3\fs20\lang1033 \snext6 Lb1;}{\s6\fi-240\li360\sb60\sl-240\tx360 \f3\fs20\lang1033 \snext6 Lb2;}{\s7\li360\sb60\sl-240 \f3\fs20\lang1033 \snext6 Lp1;}{\s8\fi-1800\li1920\sb120\sa40\sl-240 \brdrb\brdrs\brdrw15\brsp20 \brdrbtw\brdrs\brdrw15\brsp20 \tx1920 \b\f3\fs20\lang1033 \snext9 Th;}{\s9\fi-1800\li1920\sb60\sl-240\tx1920 \f3\fs20\lang1033 \snext9 Tp;}{\s10\li120\sl-240 \f3\fs20\lang1033 \snext0 Normal 2;}{\s11\li120\sb120\sa120  \f3\fs20\lang1033 \snext0 bitmap;}{\s12\li120\sb120\sl-240 \f3\fs20\lang1033 \snext13 Sa2;}{\s13\fi-240\li360\sb60\sl-240 \f3\fs20\lang1033 \snext13 Jl;}{\s14\li120\sa60 \f8\fs20\lang1033 \snext14 *body;}{\s15\li120\sa60 \b\f8\fs20\lang1033  \snext15 *heading;}{\s16\li120\sa60\sl-240 \f8\fs20\lang1033 \sbasedon14\snext16 para;}{\s17\fi-280\li400\sa60 \f8\fs20\lang1033 \sbasedon14\snext17 jump;}{\s18\fi-280\li400\sa60\tx400 \f8\fs20\lang1033 \sbasedon14\snext18 list bullet;}{ \s19\fi-280\li600\sa60 \f8\fs20\lang1033 \sbasedon14\snext19 jump indent;}{\s20\li120\sa60\sl-40\brdrb\brdrs\brdrw15\brsp20 \brdrbtw\brdrs\brdrw15\brsp20 \f8\fs20\lang1033 \sbasedon14\snext20 table rule;}{\s21\fi-280\li400\sa60\tqr\tx280\tx400  \f8\fs20\lang1033 \sbasedon14\snext21 list number;}{\s22\li120\sb100\sa60 \b\f8\fs20\lang1033 \sbasedon15\snext17 see also;}{\s23\li400\sa60 \f8\fs20\lang1033 \sbasedon14\snext23 para indent;}{\s24\fi-1800\li1920\tx1920 \b\f8\fs20\lang1033  \sbasedon15\snext20 table head;}{\s25\fi-1800\li1920\sa60\tx1920 \f8\fs20\lang1033 \sbasedon14\snext25 table text;}{\s26\li120\sb120\sa60 \f8\fs20\lang1033 \sbasedon14\snext19 see also 2;}{\s27\li120\sa60\keep\tx520\tx920\tx1320\tx1720\tx2120  \f4\fs20\lang1033 \sbasedon14\snext27 code;}{\s28\sl-120 \f9\fs20\lang1033 \snext16 *spacing;}{\s29\sl-120 \f9\fs20\lang1033 \sbasedon28\snext29 s6;}{\s30\qj\li360 \lang1033 \sbasedon0\snext30 Help Text;}{\s31\li115\sb120\sa40\sl-240\brdrb \brdrs\brdrw15\brsp20 \brdrbtw\brdrs\brdrw15\brsp20 \f10\fs20\lang1033 \sbasedon8\snext9 Th2;}{\s32\li115\sb120\sa40\sl-240\brdrb\brdrs\brdrw15\brsp20 \brdrbtw\brdrs\brdrw15\brsp20 \b\f10\fs16\lang1033 \sbasedon8\snext9 Th3;}{\s33\li115\sb200\sl-240  \f10\fs20\lang1033 \sbasedon0\snext0 Normal 3;}{\s34\fi-1800\li1915\sb120\sa40\sl-240\brdrb\brdrs\brdrw15\brsp20 \brdrbtw\brdrs\brdrw15\brsp20 \tx1915 \b\f10\fs20\lang1033 \sbasedon0\snext35 Thh;}{\s35\fi-1800\li1915\sb60\sl-240\tx1915 \f10\fs20\lang1033  \sbasedon0\snext35 Tph;}}{\info{\author TRIO}{\creatim\yr1992\mo6\dy24\hr16\min51}{\version1}{\edmins357}{\nofpages2}{\nofwords66236}{\nofchars69347}{\vern16504}}\paperw12240\paperh15840\margl1800\margr1800\margt1440\margb1440\gutter0 {\*\template  C:\\WINAPPS\\WINWORD\\WHAT31.DOT}\sectd \linex0 \pard\plain \keepn \f3\fs20\lang1033 {\fs16\up6 ${\footnote \pard\plain \s245\li120\sb80\sl-240 \f3\fs20\lang1033 {\fs16\up6 $} Contents}} {\fs16\up6 #{\footnote \pard\plain \s245\li120\sb80\sl-240  \f3\fs20\lang1033 {\fs16\up6 #} Contents}} {\fs16\up6 K{\footnote \pard\plain \s245\li120\sb80\sl-240 \f3\fs20\lang1033 {\fs16\up6 K} Contents}} \{bmc generic.bmp\} {\b\f2\fs32 GENERIC: Simple Example Application}{\b\f2\fs32  \par }\pard \li120 {\f2  \par }{\field{\*\fldinst {\f2 include GENERIC.DOC}}{\fldrslt {\f2 GENERIC is a sample application that illustrates what could be considered a 'mimimum' implementation of a Windows application.}{\f2  \par }{\f2  \par }{\f2 While it would be possible to write an application that was far more minimum then GENERIC, such an application would not implement some of the features of a Windows application that many users would consider 'standard'.}{\f2  \par }{\f2  \par }{\f2 The features that GENERIC implements:}{\f2  \par }{\f2  \par }\pard \li720 {\f2 Custom Icon}{\f2  \par }{\f2 Standard Menu Bar}{\f2  \par }\pard \fi-1320\li2040 {\f2 Standard Help Menu}{\f2  \par }{\f2 Full WinHelp Support}{\f2  \par }{\f2 Keyboard Accelerator Usage}{\f2  \par }{\f2 Version Control Information}{\f2  \par }{\f2 Full Win16, Win32s, Win32 Common Source Code}{\f2  \par }\pard \fi-1320\li1440 {\f2 \page }{\b\f2 Feature:}{\f2  }{\f2 \tab }{\f2 Custom Icon}{\f2  \par }{\b\f2 Description:}{\f2  }{\f2 \tab }{\f2 While this might appear to be a t}{\f2 rivial and obvious feature, it is suprising how many sample applicaitons fail to implement this.}{\f2  \par }{\b\f2 Files used to implement Feature:}{\f2  \par }\pard \fi-720\li1440 {\b\f2 GENERIC.ICO}{\f2  : This contains the bitmap representation of the icon. It was created with the icon editor application that comes with the SDK.}{\f2  \par }{\f2  \par }{\b\f2 GENERIC.RC}{\f2  : This file defines all of the resources used by the application, including the ICON resource type that will allow the custom icon to be loaded.}{\f2  \par }{\f2  \par }{\b\f2 GENERIC.C}{\f2  : Loads the ICON resource, and assigns it to the }{\i\f2 hIcon}{\f2  element of the }{\i\f2 WNDCLASS}{\f2  structure that is passed into the }{\i\f2 RegisterClass}{\f2  call.}{\f2  \par }\pard \fi-1320\li1440 {\f2  \par }{\b\f2 \page }{\b\f2 Feature:}{\f2  }{\f2 \tab }{\f2 An 'About...' Box With Custom Icon And Font Style}{\f2  \par }{\b\f2 Description:}{\f2  }{\f2 \tab }{\f2  Many sample applications simply use a call to 'MessageBox' to put up their 'About' box (if they even bother to do so at all). This application goes a little further by not only creating an actual dialog box, but by also taking the few extra steps that mak }{\f2 e the dialog look better, and contain useful information.}{\f2  \par }{\b\f2 Files used to implement Feature:}{\f2  \par }\pard \fi-720\li1440 {\f2 GENERI}{\f2 C.DLG}{\f2  \par }{\f2 GENERIC.RC}{\f2  \par }{\f2 GENERIC.RCV}{\f2  \par }{\f2 GENERIC.C}{\f2  \par }\pard \fi-1320\li1440 {\f2  \par }{\f2  \par }{\b\f2 \page }{\b\f2 Feature:}{\f2  }{\f2 \tab }{\f2 Standard Menu Bar}{\f2  \par }{\b\f2 Description:}{\f2  }{\f2 \tab }{\f2 The book "The Windows Interface: An Application Design Guide", presents a recommended standard menu bar configuration. As closely as appropriate, this application follows the presented layout.}{\f2  \par }{\b\f2 Files used to implement Feature:}{\f2  \par }\pard \fi-720\li1440 {\f2 GENERIC.RC}{\f2  \par }{\f2 GENERIC.C}{\f2  \par }{\f2  \par }\pard \fi-1320\li1440 {\b\f2 \page }{\b\f2 Feature:}{\f2  }{\f2 \tab }{\f2 Standard Help Menu}{\f2  \par }{\b\f2 Description:}{\f2  }{\f2 \tab  \par }{\b\f2 Files used to implement Feature:}{\f2  \par }\pard \fi-720\li1440 {\f2  \par }\pard \fi-1320\li1440 {\f2  \par }{\b\f2 \page }{\b\f2 Feature:}{\f2  }{\f2 \tab }{\f2 Full WinHelp Support}{\f2  \par }{\b\f2 Description:}{\f2  }{\f2 \tab  \par }{\b\f2 Files used to implement Feature:}{\f2  \par }\pard \fi-720\li1440 {\f2  \par }\pard \fi-1320\li1440 {\f2  \par }{\b\f2 \page }{\b\f2 Feature:}{\f2  }{\f2 \tab }{\f2 Keyboard Accelerator Usage}{\f2  \par }{\b\f2 Description:}{\f2  }{\f2 \tab  \par }{\b\f2 Files used to implement Feature:}{\f2  \par }\pard \fi-720\li1440 {\f2  \par }\pard \fi-1320\li1440 {\f2  \par }{\b\f2 \page }{\b\f2 Feature:}{\f2  }{\f2 \tab }{\f2 Version Control Information}{\f2  \par }{\b\f2 Description:}{\f2  }{\f2 \tab  \par }{\b\f2 Files used to implement Feature:}{\f2  \par }\pard \fi-720\li1440 {\f2  \par }\pard \fi-1320\li1440 {\f2  \par }{\b\f2 \page }{\b\f2 Feature:}{\f2  }{\f2 \tab }{\f2 Full Win16, Win32s, Win32 Common Source Code}{\f2  \par }{\b\f2 Description:}{\f2  }{\f2 \tab  \par }{\b\f2 Files used to implement Feature:}{\f2  \par }\pard \fi-720\li1440 {\f2  \par }{\f2  \par }\pard \fi-1320\li1440 }}\pard\plain \fi-1320\li1440 \f3\fs20\lang1033 {\f2  \par }\pard \li120 {\f2 \page }{\f2 This is a sample WinHelp source document. To easily modify this }{\f2 document to customize it for use in your application perform the following steps:}{\f2  \par }{\f2  \par }{\f2 (Assuming you are using Windows Word other document editors could be used, but you are on your own for doing the appropriate conversions)}{\f2  \par }{\f2  \par }\pard \fi-504\li624 {\f2 1.}{\f2 \tab }{\f2 Open up this document.}{\f2  \par }\pard \li120 {\f2  \par }\pard \fi-504\li624 {\f2 2.}{\f2 \tab }{\f2 Turn on the 'View | Field Codes' option from the menu bar.}{\f2  \par }\pard \li120 {\f2  \par }\pard \fi-504\li624 {\f2 3.}{\f2 \tab }{\f2 Either remove, or appropriately alter the "}{\f2 \{}{\f2 bmc generic.bmp}{\f2 \}}{\f2 " field on the first line. Do not make any modifications to the "$ # K" that preceeds it.}{\f2  \par }\pard \li120 {\f2  \par }\pard \fi-504\li624 {\f2 4.}{\f2 \tab }{\f2 Create a new document and enter into it all of the information you are wanting to have in the WinHelp file. Avoid 'hard' pagebreaks (<ctrl-enter>), and 'fancy' formatting.}{\f2  \par }\pard \li120 {\f2  \par }\pard \fi-504\li624 {\f2 5.}{\f2 \tab }{\f2 Change the "}{\f2 \{}{\f2 include GENERIC.DOC}{\f2 \}}{\f2 " field to point to your new document}{\f2  \par }\pard \li120 {\f2  \par }\pard \fi-504\li624 {\f2 6.}{\f2 \tab }{\f2  Hilite the entire 'include' field that you just altered, and hit F9 (this will grab the information out of your document). If you run into problems with this step, simply delete the entire 'include' field, and copy/paste in the document you had created.}{ \par }\pard \li120 {\f2  \par }\pard \fi-504\li624 {\f2 7.}{\f2 \tab }{\f2 Save this document out, but make sure that you save it out as an RTF file, and not a DOC file. The Help Compiler reads the RTF format for building WinHelp files.}{\f2  \par }\pard \fi-1320\li1440 {\f2 \page }{\f2  \par }}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filters.ks\tests\wavetest\exe\mmreg.ini ===
[mmreg]
version = 144

[Wave Format Tag]
0     = WAVE_FORMAT_UNKNOWN
1     = WAVE_FORMAT_PCM,                    Pulse Code Modulation (PCM)
2     = WAVE_FORMAT_ADPCM,                  Microsoft Adaptive Delta PCM
5     = WAVE_FORMAT_IBM_CVSD
6     = WAVE_FORMAT_ALAW,                   A Law
7     = WAVE_FORMAT_MULAW,                  Mu Law
16    = WAVE_FORMAT_OKI_ADPCM                                                                                   OKI Adaptive Delta PCM
17    = WAVE_FORMAT_IMA_ADPCM,              IMA Adaptive Delta PCM
17    = WAVE_FORMAT_DVI_ADPCM
18    = WAVE_FORMAT_MEDIASPACE_ADPCM
19    = WAVE_FORMAT_SIERRA_ADPCM
20    = WAVE_FORMAT_G723_ADPCM
21    = WAVE_FORMAT_DIGISTD
22    = WAVE_FORMAT_DIGIFIX
23    = WAVE_FORMAT_DIALOGIC_OKI_ADPCM
32    = WAVE_FORMAT_YAMAHA_ADPCM,           Yamaha Adaptive Delta PCM
33    = WAVE_FORMAT_SONARC
34    = WAVE_FORMAT_DSPGROUP_TRUESPEECH
35    = WAVE_FORMAT_ECHOSC1
36    = WAVE_FORMAT_AUDIOFILE_AF36
37    = WAVE_FORMAT_APTX
38    = WAVE_FORMAT_AUDIOFILE_AF10
48    = WAVE_FORMAT_DOLBY_AC2
49    = WAVE_FORMAT_GSM610
51    = WAVE_FORMAT_ANTEX_ADPCME
52    = WAVE_FORMAT_CONTROL_RES_VQLPC
53    = WAVE_FORMAT_DIGIREAL
54    = WAVE_FORMAT_DIGIADPCM
55    = WAVE_FORMAT_CONTROL_RES_CR10
56    = WAVE_FORMAT_NMS_VBXADPCM
64    = WAVE_FORMAT_G721_ADPCM
80    = WAVE_FORMAT_MPEG
512   = WAVE_FORMAT_CREATIVE_ADPCM
514   = WAVE_FORMAT_CREATIVE_FASTSPEECH8
515   = WAVE_FORMAT_CREATIVE_FASTSPEECH10
768   = WAVE_FORMAT_FM_TOWNS_SND
4096  = WAVE_FORMAT_OLIGSM
4097  = WAVE_FORMAT_OLIADPCM
4098  = WAVE_FORMAT_OLICELP
4099  = WAVE_FORMAT_OLISBC
4100  = WAVE_FORMAT_OLIOPR
65535 = WAVE_FORMAT_DEVELOPMENT

[Wave Filter Tag]
0     = WAVE_FILTER_UNKNOWN
1     = WAVE_FILTER_VOLUME
2     = WAVE_FILTER_ECHO
65535 = WAVE_FILTER_DEVELOPMENT

[MM Manufacturer ID]
1  = MM_MICROSOFT,        Microsoft Corporation
2  = MM_CREATIVE,         Creative Labs, Inc
3  = MM_MEDIAVISION,      Media Vision, Inc.
4  = MM_FUJITSU,          Fujitsu Corp.
20 = MM_ARTISOFT,         Artisoft, Inc.
21 = MM_TURTLE_BEACH,     Turtle Beach, Inc.
22 = MM_IBM,              IBM Corporation
23 = MM_VOCALTEC,         Vocaltec LTD.
24 = MM_ROLAND,           Roland
25 = MM_DSP_SOLUTIONS,    DSP Solutions, Inc.
26 = MM_NEC,              NEC
27 = MM_ATI,              ATI
28 = MM_WANGLABS,         Wang Laboratories, Inc
29 = MM_TANDY,            Tandy Corporation
30 = MM_VOYETRA,          Voyetra
31 = MM_ANTEX,            Antex Electronics Corporation
32 = MM_ICL_PS,           ICL Personal Systems
33 = MM_INTEL,            Intel Corporation
34 = MM_GRAVIS,           Advanced Gravis
35 = MM_VAL,              Video Associates Labs, Inc.
36 = MM_INTERACTIVE,      InterActive Inc
37 = MM_YAMAHA,           Yamaha Corporation of America
38 = MM_EVEREX,           Everex Systems, Inc
39 = MM_ECHO,             Echo Speech Corporation
40 = MM_SIERRA,           Sierra Semiconductor Corp
41 = MM_CAT,              Computer Aided Technologies
42 = MM_APPS,             APPS Software International
43 = MM_DSP_GROUP,        DSP Group, Inc
44 = MM_MELABS,           microEngineering Labs
45 = MM_COMPUTER_FRIENDS, Computer Friends, Inc.
46 = MM_ESS,              ESS Technology
47 = MM_AUDIOFILE,        Audio, Inc.
48 = MM_MOTOROLA,         Motorola, Inc.
49 = MM_CANOPUS,          Canopus, co., Ltd.
50 = MM_EPSON,            Seiko Epson Corporation
51 = MM_TRUEVISION,       Truevision
52 = MM_AZTECH,           Aztech Labs, Inc.
53 = MM_VIDEOLOGIC,       Videologic
54 = MM_SCALACS,          SCALACS
55 = MM_KORG,             Toshihiko Okuhura, Korg Inc.
56 = MM_APT,              Audio Processing Technology
57 = MM_ICS,              Integrated Circuit Systems, Inc.
58 = MM_ITERATEDSYS,      Iterated Systems, Inc.
59 = MM_METHEUS,          Metheus
60 = MM_LOGITECH,         Logitech, Inc.
61 = MM_WINNOV,           Winnov, Inc.
62 = MM_NCR,              NCR Corporation
63 = MM_EXAN,             EXAN
64 = MM_AST,              AST Research Inc.
65 = MM_WILLOWPOND,       Willow Pond Corporation
66 = MM_SONICFOUNDRY,     Sonic Foundry
67 = MM_VITEC,            Vitec Multimedia
68 = MM_MOSCOM,           MOSCOM Corporation
69 = MM_SILICONSOFT,      Silicon Soft, Inc.
73 = MM_SUPERMAC,         Supermac
74 = MM_AUDIOPT,          Audio Processing Technology
76 = MM_SPEECHCOMP,       Speech Compression
78 = MM_DOLBY,            Dolby Laboratories
79 = MM_OKI,              OKI
80 = MM_AURAVISION,       AuraVision Corporation
81 = MM_OLIVETTI,         Olivetti
82 = MM_IOMAGIC,          I/O Magic Corporation
83 = MM_MATSUSHITA,       Matsushita Electric Industrial Co., LTD.
84 = MM_CONTROLRES,       Control Resources Limited
85 = MM_XEBEC,            Xebec Multimedia Solutions Limited
86 = MM_NEWMEDIA,         New Media Corporation
87 = MM_NMS,              Natural MicroSystems
88 = MM_LYRRUS,           Lyrrus Inc.
89 = MM_COMPUSIC,         Compusic
90 = MM_OPTI,             OPTi Computers Inc.
93 = MM_DIALOGIC,         Dialogic Corporation

[MM_MICROSOFT]
1  = MM_MIDI_MAPPER,                Midi Mapper
2  = MM_WAVE_MAPPER,                Wave Mapper
3  = MM_SNDBLST_MIDIOUT,            Sound Blaster MIDI output port
4  = MM_SNDBLST_MIDIIN,             Sound Blaster MIDI input port
5  = MM_SNDBLST_SYNTH,              Sound Blaster internal synth
6  = MM_SNDBLST_WAVEOUT,            Sound Blaster waveform output
7  = MM_SNDBLST_WAVEIN,             Sound Blaster waveform input
9  = MM_ADLIB,                      Ad Lib Compatible synth
10 = MM_MPU401_MIDIOUT,             MPU 401 compatible MIDI output port
11 = MM_MPU401_MIDIIN,              MPU 401 compatible MIDI input port
12 = MM_PC_JOYSTICK,                Joystick adapter
13 = MM_PCSPEAKER_WAVEOUT,          PC speaker waveform output
14 = MM_MSFT_WSS_WAVEIN,            MS Audio Board waveform input
15 = MM_MSFT_WSS_WAVEOUT,           MS Audio Board waveform output
16 = MM_MSFT_WSS_FMSYNTH_STEREO,    MS Audio Board  Stereo FM synth
17 = MM_MSFT_WSS_MIXER,             MS Audio Board Mixer Driver
18 = MM_MSFT_WSS_OEM_WAVEIN,        MS OEM Audio Board waveform input
19 = MM_MSFT_WSS_OEM_WAVEOUT,       MS OEM Audio Board waveform output
20 = MM_MSFT_WSS_OEM_FMSYNTH_STEREO,MS OEM Audio Board Stereo FM Synth
21 = MM_MSFT_WSS_AUX,               MS Audio Board Aux. Port
22 = MM_MSFT_WSS_OEM_AUX,           MS OEM Audio Aux Port
23 = MM_MSFT_GENERIC_WAVEIN,        MS Vanilla driver waveform input
24 = MM_MSFT_GENERIC_WAVEOUT,       MS Vanilla driver wavefrom output
25 = MM_MSFT_GENERIC_MIDIIN,        MS Vanilla driver MIDI in
26 = MM_MSFT_GENERIC_MIDIOUT,       MS Vanilla driver MIDI  external out
27 = MM_MSFT_GENERIC_MIDISYNTH,     MS Vanilla driver MIDI synthesizer
28 = MM_MSFT_GENERIC_AUX_LINE,      MS Vanilla driver aux (line in)
29 = MM_MSFT_GENERIC_AUX_MIC,       MS Vanilla driver aux (mic)
30 = MM_MSFT_GENERIC_AUX_CD,        MS Vanilla driver aux (CD)
31 = MM_MSFT_WSS_OEM_MIXER,         MS OEM Audio Board Mixer Driver
32 = MM_MSFT_MSACM,                 MS Audio Compression Manager
33 = MM_MSFT_ACM_MSADPCM,           MS ADPCM Codec
34 = MM_MSFT_ACM_IMAADPCM,          IMA ADPCM Codec
35 = MM_MSFT_ACM_MSFILTER,          MS Filter
36 = MM_MSFT_ACM_GSM610,            GSM 610 codec
37 = MM_MSFT_ACM_G711,              G.711 codec
38 = MM_MSFT_ACM_PCM,               PCM converter
39 = MM_WSS_SB16_WAVEIN,            Sound Blaster 16 waveform input
40 = MM_WSS_SB16_WAVEOUT,           Sound Blaster 16  waveform output
41 = MM_WSS_SB16_MIDIIN,            Sound Blaster 16 midi-in
42 = MM_WSS_SB16_MIDIOUT,           Sound Blaster 16 midi out
43 = MM_WSS_SB16_SYNTH,             Sound Blaster 16 FM Synthesis
44 = MM_WSS_SB16_AUX_LINE,          Sound Blaster 16 aux (line in)
45 = MM_WSS_SB16_AUX_CD,            Sound Blaster 16 aux (CD)
46 = MM_WSS_SB16_MIXER,             Sound Blaster 16 mixer device
47 = MM_WSS_SBPRO_WAVEIN,           Sound Blaster Pro waveform input
48 = MM_WSS_SBPRO_WAVEOUT,          Sound Blaster Pro waveform output
49 = MM_WSS_SBPRO_MIDIIN,           Sound Blaster Pro midi in
50 = MM_WSS_SBPRO_MIDIOUT,          Sound Blaster Pro midi out
51 = MM_WSS_SBPRO_SYNTH,            Sound Blaster Pro FM synthesis
52 = MM_WSS_SBPRO_AUX_LINE,         Sound Blaster Pro aux (line in )
53 = MM_WSS_SBPRO_AUX_CD,           Sound Blaster Pro aux (CD)
54 = MM_WSS_SBPRO_MIXER,            Sound Blaster Pro mixer
55 = MM_MSFT_WSS_NT_WAVEIN,         WSS NT wave in
56 = MM_MSFT_WSS_NT_WAVEOUT,        WSS NT wave out
57 = MM_MSFT_WSS_NT_FMSYNTH_STEREO, WSS NT FM synth
58 = MM_MSFT_WSS_NT_MIXER,          WSS NT mixer
59 = MM_MSFT_WSS_NT_AUX,            WSS NT aux
60 = MM_MSFT_SB16_WAVEIN,           Sound Blaster 16 waveform input
61 = MM_MSFT_SB16_WAVEOUT,          Sound Blaster 16  waveform output
62 = MM_MSFT_SB16_MIDIIN,           Sound Blaster 16 midi-in
63 = MM_MSFT_SB16_MIDIOUT,          Sound Blaster 16 midi out
64 = MM_MSFT_SB16_SYNTH,            Sound Blaster 16 FM Synthesis
65 = MM_MSFT_SB16_AUX_LINE,         Sound Blaster 16 aux (line in)
66 = MM_MSFT_SB16_AUX_CD,           Sound Blaster 16 aux (CD)
67 = MM_MSFT_SB16_MIXER,            Sound Blaster 16 mixer device
68 = MM_MSFT_SBPRO_WAVEIN,          Sound Blaster Pro waveform input
69 = MM_MSFT_SBPRO_WAVEOUT,         Sound Blaster Pro waveform output
70 = MM_MSFT_SBPRO_MIDIIN,          Sound Blaster Pro midi in
71 = MM_MSFT_SBPRO_MIDIOUT,         Sound Blaster Pro midi out
72 = MM_MSFT_SBPRO_SYNTH,           Sound Blaster Pro FM synthesis
73 = MM_MSFT_SBPRO_AUX_LINE,        Sound Blaster Pro aux (line in )
74 = MM_MSFT_SBPRO_AUX_CD,          Sound Blaster Pro aux (CD)
75 = MM_MSFT_SBPRO_MIXER,           Sound Blaster Pro mixer
76 = MM_MSFT_MSOPL_SYNTH,           Yamaha OPL2/OPL3 compatible FM synthesis


[MM_CREATIVE]
1   = MM_CREATIVE_SB15_WAVEIN,    SB (r) 1.5 waveform input
2   = MM_CREATIVE_SB20_WAVEIN,    SB (r) 2.0 waveform input
3   = MM_CREATIVE_SBPRO_WAVEIN,   SB Pro (r) waveform input
4   = MM_CREATIVE_SBP16_WAVEIN,   SBP16 (r) waveform input
101 = MM_CREATIVE_SB15_WAVEOUT,   SB (r) 1.5 waveform output
102 = MM_CREATIVE_SB20_WAVEOUT,   SB (r) 2.0 waveform output
103 = MM_CREATIVE_SBPRO_WAVEOUT,  SB Pro (r) waveform output
104 = MM_CREATIVE_SBP16_WAVEOUT,  SBP16 (r) waveform output
201 = MM_CREATIVE_MIDIOUT,        SB (r) MIDI output port
202 = MM_CREATIVE_MIDIIN,         SB (r) MIDI input port
301 = MM_CREATIVE_FMSYNTH_MONO,   SB (r) FM synthesizer
302 = MM_CREATIVE_FMSYNTH_STEREO, SB Pro (r) stereo FM synthesizer
303 = MM_CREATIVE_MIDI_AWE32,     SB AWE32 MIDI output port
401 = MM_CREATIVE_AUX_CD,         SB Pro (r) aux (CD)
402 = MM_CREATIVE_AUX_LINE,       SB Pro (r) aux (line in)
403 = MM_CREATIVE_AUX_MIC,        SB Pro (r) aux (mic)
405 = MM_CREATIVE_SB16_MIXER
406 = MM_CREATIVE_SBPRO_MIXER

[MM_ARTISOFT]
1 = MM_ARTISOFT_SBWAVEIN,  Artisoft Sounding Board waveform input
2 = MM_ARTISOFT_SBWAVEOUT, Artisoft Sounding Board waveform output

[MM_IBM]
1  = MM_MMOTION_WAVEAUX,    IBM M-Motion Auxiliary Device
2  = MM_MMOTION_WAVEOUT,    IBM M-Motion Waveform Output
3  = MM_MMOTION_WAVEIN,     IBM M-Motion Waveform Input
11 = MM_IBM_PCMCIA_WAVEIN,  IBM waveform input
12 = MM_IBM_PCMCIA_WAVEOUT, IBM Waveform output
13 = MM_IBM_PCMCIA_SYNTH,   IBM Midi Synthesis
14 = MM_IBM_PCMCIA_MIDIIN,  IBM external MIDI in
15 = MM_IBM_PCMCIA_MIDIOUT, IBM external MIDI out
16 = MM_IBM_PCMCIA_AUX,     IBM auxiliary control

[MM_MEDIAVISION]
16  = MM_MEDIAVISION_PROAUDIO,      Pro Audio Spectrum
17  = MM_PROAUD_MIDIOUT
18  = MM_PROAUD_MIDIIN
19  = MM_PROAUD_SYNTH
20  = MM_PROAUD_WAVEOUT
21  = MM_PROAUD_WAVEIN
22  = MM_PROAUD_MIXER
23  = MM_PROAUD_AUX
32  = MM_MEDIAVISION_THUNDER,       Thunder Board
35  = MM_THUNDER_SYNTH
36  = MM_THUNDER_WAVEOUT
37  = MM_THUNDER_WAVEIN
39  = MM_THUNDER_AUX
48  = MM_MEDIAVISION_TPORT,         Audio Port
49  = MM_TPORT_WAVEOUT
50  = MM_TPORT_WAVEIN
51  = MM_TPORT_SYNTH
64  = MM_MEDIAVISION_PROAUDIO_PLUS, Pro Audio Spectrum Plus
65  = MM_PROAUD_PLUS_MIDIOUT
66  = MM_PROAUD_PLUS_MIDIIN
67  = MM_PROAUD_PLUS_SYNTH
68  = MM_PROAUD_PLUS_WAVEOUT
69  = MM_PROAUD_PLUS_WAVEIN
70  = MM_PROAUD_PLUS_MIXER
71  = MM_PROAUD_PLUS_AUX
80  = MM_MEDIAVISION_PROAUDIO_16,   Pro Audio Spectrum 16
81  = MM_PROAUD_16_MIDIOUT
82  = MM_PROAUD_16_MIDIIN
83  = MM_PROAUD_16_SYNTH
84  = MM_PROAUD_16_WAVEOUT
85  = MM_PROAUD_16_WAVEIN
86  = MM_PROAUD_16_MIXER
87  = MM_PROAUD_16_AUX
96  = MM_MEDIAVISION_PROSTUDIO_16,  Pro Audio Studio 16
97  = MM_STUDIO_16_MIDIOUT
98  = MM_STUDIO_16_MIDIIN
99  = MM_STUDIO_16_SYNTH
100 = MM_STUDIO_16_WAVEOUT
101 = MM_STUDIO_16_WAVEIN
102 = MM_STUDIO_16_MIXER
103 = MM_STUDIO_16_AUX
112 = MM_MEDIAVISION_CDPC,          CDPC
113 = MM_CDPC_MIDIOUT
114 = MM_CDPC_MIDIIN
115 = MM_CDPC_SYNTH
116 = MM_CDPC_WAVEOUT
117 = MM_CDPC_WAVEIN
118 = MM_CDPC_MIXER
119 = MM_CDPC_AUX
128 = MM_MEDIAVISION_OPUS1208,      Opus MV 1208 Chipsent
129 = MM_OPUS401_MIDIOUT
130 = MM_OPUS401_MIDIIN
131 = MM_OPUS1208_SYNTH
132 = MM_OPUS1208_WAVEOUT
133 = MM_OPUS1208_WAVEIN
134 = MM_OPUS1208_MIXER
135 = MM_OPUS1208_AUX
144 = MM_MEDIAVISION_OPUS1216,      Opus MV 1216 chipset
145 = MM_OPUS1216_MIDIOUT
146 = MM_OPUS1216_MIDIIN
147 = MM_OPUS1216_SYNTH
148 = MM_OPUS1216_WAVEOUT
149 = MM_OPUS1216_WAVEIN
150 = MM_OPUS1216_MIXER
151 = MM_OPUS1216_AUX

[MM_VOCALTEC]
1 = MM_VOCALTEC_WAVEOUT, Vocaltec Waveform output port
2 = MM_VOCALTEC_WAVEIN,  Vocaltec Waveform input port

[MM_ROLAND]
15 = MM_ROLAND_MPU401_MIDIOUT
16 = MM_ROLAND_MPU401_MIDIIN
17 = MM_ROLAND_SMPU_MIDIOUTA
18 = MM_ROLAND_SMPU_MIDIOUTB
19 = MM_ROLAND_SMPU_MIDIINA
20 = MM_ROLAND_SMPU_MIDIINB
21 = MM_ROLAND_SC7_MIDIOUT
22 = MM_ROLAND_SC7_MIDIIN
23 = MM_ROLAND_SERIAL_MIDIOUT
24 = MM_ROLAND_SERIAL_MIDIIN

[MM_DIGISPEECH]
1 = MM_DIGISP_WAVEOUT, Digispeech Waveform output port
2 = MM_DIGISP_WAVEIN,  Digispeech Waveform input port

[MM_WANGLABS]
1 = MM_WANGLABS_WAVEIN1,  Input audio wave device present on the CPU board of the following Wang models: Exec 4010, 4030 and 3450; PC 251/25C, PC 461/25S and PC 461/33C
2 = MM_WANGLABS_WAVEOUT1, Output audio wave device present on the CPU board of the Wang models listed above.

[MM_TANDY]
1  = MM_TANDY_VISWAVEIN
2  = MM_TANDY_VISWAVEOUT
3  = MM_TANDY_VISBIOSSYNTH
4  = MM_TANDY_SENS_MMAWAVEIN
5  = MM_TANDY_SENS_MMAWAVEOUT
6  = MM_TANDY_SENS_MMAMIDIIN
7  = MM_TANDY_SENS_MMAMIDIOUT
8  = MM_TANDY_SENS_VISWAVEOUT
9  = MM_TANDY_PSSJWAVEIN
10 = MM_TANDY_PSSJWAVEOUT

[MM_INTEL]
1   = MM_INTELOPD_WAVEIN,  HID2 WaveAudio Input driver
101 = MM_INTELOPD_WAVEOUT, HID2 WaveAudio Output driver
401 = MM_INTELOPD_AUX,     HID2 Auxiliary driver (required for mixing functions)

[MM_INTERACTIVE]
69 = MM_INTERACTIVE_WAVEIN
69 = MM_INTERACTIVE_WAVEOUT

[MM_YAMAHA]
1 = MM_YAMAHA_GSS_SYNTH,   Yamaha Gold Sound Standard FM sythesis driver
2 = MM_YAMAHA_GSS_WAVEOUT, Yamaha Gold Sound Standard wave output driver
3 = MM_YAMAHA_GSS_WAVEIN,  Yamaha Gold Sound Standard wave input driver
4 = MM_YAMAHA_GSS_MIDIOUT, Yamaha Gold Sound Standard midi output driver
5 = MM_YAMAHA_GSS_MIDIIN,  Yamaha Gold Sound Standard midi input driver
6 = MM_YAMAHA_GSS_AUX,     Yamaha Gold Sound Standard auxillary driver for mixer functions

[MM_EVEREX]
1 = MM_EVEREX_CARRIER, Everex Carrier SL/25 Notebook

[MM_ECHO]
1 = MM_ECHO_SYNTH,   Echo EuSythesis driver
2 = MM_ECHO_WAVEOUT, Wave output driver
3 = MM_ECHO_WAVEIN,  Wave input driver
4 = MM_ECHO_MIDIOUT, MIDI output driver
5 = MM_ECHO_MIDIIN,  MIDI input driver
6 = MM_ECHO_AUX,     auxillary driver for mixer functions

[MM_SIERRA]
20 = MM_SIERRA_ARIA_MIDIOUT, Sierra Aria MIDI output
21 = MM_SIERRA_ARIA_MIDIIN,  Sierra Aria MIDI input
22 = MM_SIERRA_ARIA_SYNTH,   Sierra Aria Synthesizer
23 = MM_SIERRA_ARIA_WAVEOUT, Sierra Aria Waveform output
24 = MM_SIERRA_ARIA_WAVEIN,  Sierra Aria Waveform input
25 = MM_SIERRA_ARIA_AUX,     Sierra Aria Auxiliary device
32 = MM_SIERRA_ARIA_AUX2

[MM_DSP_GROUP]
1 = MM_DSP_GROUP_TRUESPEECH, High quality 9.54:1 Speech Compression Vocoder

[MM_MELABS]
1 = MM_MELABS_MIDI2GO, parallel port MIDI interface

[MM_ESS]
1 = MM_ESS_AMWAVEOUT,  ESS Audio Magician Waveform Output Port
2 = MM_ESS_AMWAVEIN,   ESS Audio Magician Waveform Input Port
3 = MM_ESS_AMAUX,      ESS Audio Magician Auxiliary Port
4 = MM_ESS_AMSYNTH,    ESS Audio Magician Internal Music Synthesizer Port
5 = MM_ESS_AMMIDIOOUT, ESS Audio Magician MIDI Output Port
6 = MM_ESS_AMMIDIIN,   ESS Audio Magician MIDI Input Port
10= MM_ESS_MPU401_MIDIIN, ESS 1688 Midi Input Port


[MM_TRUEVISION]
1 = MM_TRUEVISION_WAVEIN1
2 = MM_TRUEVISION_WAVEOUT1

[MM_AZTECH]
3   = MM_AZTECH_MIDIOUT
4   = MM_AZTECH_MIDIIN
17  = MM_AZTECH_WAVEIN
18  = MM_AZTECH_WAVEOUT
20  = MM_AZTECH_FMSYNTH
33  = MM_AZTECH_PRO16_WAVEIN
34  = MM_AZTECH_PRO16_WAVEOUT
38  = MM_AZTECH_PRO16_FMSYNTH
65  = MM_AZTECH_DSP16_WAVEIN
66  = MM_AZTECH_DSP16_WAVEOUT
68  = MM_AZTECH_DSP16_FMSYNTH
70  = MM_AZTECH_DSP16_WAVESYNTH
401 = MM_AZTECH_AUX_CD
402 = MM_AZTECH_AUX_LINE
403 = MM_AZTECH_AUX_MIC

[MM_VIDEOLOGIC]
1 = MM_VIDEOLOGIC_MSWAVEIN
2 = MM_VIDEOLOGIC_MSWAVEOUT

[MM_APT]
1 = MM_APT_ACE100CD

[MM_ICS]
;1 = MM_ICS_BIZAUDIO_WAVEOUT
1 = MM_ICS_WAVEDECK_WAVEOUT,           MS WSS compatible card and driver
2 = MM_ICS_WAVEDECK_WAVEIN
3 = MM_ICS_WAVEDECK_MIXER
4 = MM_ICS_WAVEDECK_AUX
5 = MM_ICS_WAVEDECK_SYNTH


[MM_KORG]
1 = MM_KORG_PCIF_MIDIOUT,   Korg PC I/F Driver
2 = MM_KORG_PCIF_MIDIIN,    Korg PC I/F Driver

[MM_METHEUS]
1 = MM_METHEUS_ZIPPER

[MM_WINNOV]
1 = MM_WINNOV_CAVIAR_WAVEIN
2 = MM_WINNOV_CAVIAR_WAVEOUT
3 = MM_WINNOV_CAVIAR_VIDC
4 = MM_WINNOV_CAVIAR_CHAMPAGNE
5 = MM_WINNOV_CAVIAR_YUV8

[MM_DSP_SOLUTIONS]
1 = MM_DSP_SOLUTIONS_WAVEOUT
2 = MM_DSP_SOLUTIONS_WAVEIN
3 = MM_DSP_SOLUTIONS_SYNTH
4 = MM_DSP_SOLUTIONS_AUX

[MM_ANTEX]
; = MM_ANTEX_AUDIOPORT22_WAVEOUT
; = MM_ANTEX_SX15_WAVEOUT
; = MM_ANTEX_SX12_WAVEOUT
; = MM_ANTEX_AUDIOPORT22_WAVEIN
; = MM_ANTEX_SX15_WAVEIN
; = MM_ANTEX_SX12_WAVEIN
; = MM_ANTEX_VP625_WAVEIN
; = MM_ANTEX_AUDIOPORT22_FEEDTHRU
; = MM_ANTEX_VP625_WAVEOUT

[MM_VAL]
; = MM_VAL_MICROKEY_AP_WAVEOUT
; = MM_VAL_MICROKEY_AP_WAVEIN

[MM_CAT]
1 = MM_CAT_WAVEOUT

1 = MM_EPS_FMSND

[MM_ITERATEDSYS]
1 = MM_ITERATEDSYS_FUFCODEC

[MM_NCR]
1 = MM_NCR_BA_WAVEIN
2 = MM_NCR_BA_WAVEOUT
3 = MM_NCR_BA_SYNTH
4 = MM_NCR_BA_AUX
5 = MM_NCR_BA_MIXER

[MM_VITEC]
1 = MM_VITEC_VMAKER
2 = MM_VITEC_VMPRO

[MM_MOSCOM]
1 = MM_MOSCOM_VPC2400,                 Four Port VOice Processing / Voice Recognition Board

[MM_SILICONSOFT]
1 = MM_SILICONSOFT_SC1_WAVEIN,         Waveform in , high sample rate
2 = MM_SILICONSOFT_SC1_WAVEOUT,        Waveform out , high sample rate
3 = MM_SILICONSOFT_SC2_WAVEIN,         Waveform in 2 channels, high sample rate
4 = MM_SILICONSOFT_SC2_WAVEOUT,        Waveform out 2 channels, high sample rate
5 = MM_SILICONSOFT_SOUNDJR2_WAVEOUT,   Waveform out, self powered, efficient
6 = MM_SILICONSOFT_SOUNDJR2PR_WAVEIN,  Waveform in, self powered, efficient
7 = MM_SILICONSOFT_SOUNDJR2PR_WAVEOUT, Waveform out 2 channels, self powered, efficient
8 = MM_SILICONSOFT_SOUNDJR3_WAVEOUT,   Waveform in 2 channels, self powered, efficient

[MM_OLIVETTI]
1  = MM_OLIVETTI_WAVEIN
2  = MM_OLIVETTI_WAVEOUT
3  = MM_OLIVETTI_MIXER
4  = MM_OLIVETTI_AUX
5  = MM_OLIVETTI_MIDIIN
6  = MM_OLIVETTI_MIDIOUT
7  = MM_OLIVETTI_SYNTH
8  = MM_OLIVETTI_JOYSTICK
9  = MM_OLIVETTI_ACM_GSM
10 = MM_OLIVETTI_ACM_ADPCM
11 = MM_OLIVETTI_ACM_CELP
12 = MM_OLIVETTI_ACM_SBC
13 = MM_OLIVETTI_ACM_OPR

[MM_IOMAGIC]
1 = MM_IOMAGIC_TEMPO_WAVEOUT
2 = MM_IOMAGIC_TEMPO_WAVEIN
3 = MM_IOMAGIC_TEMPO_SYNTH
4 = MM_IOMAGIC_TEMPO_MIDIOUT
5 = MM_IOMAGIC_TEMPO_MXDOUT
6 = MM_IOMAGIC_TEMPO_AUXOUT

[MM_MATSUSHITA]
1 = MM_MATSUSHITA_WAVEIN
2 = MM_MATSUSHITA_WAVEOUT
3 = MM_MATSUSHITA_FMSYNTH_STEREO
4 = MM_MATSUSHITA_MIXER
5 = MM_MATSUSHITA_AUX

[MM_NEWMEDIA]
1 = MM_NEWMEDIA_WAVJAMMER,             WSS Compatible sound card.

[MM_OPTI]
1  = MM_OPTI_M16_FMSYNTH_STEREO
2  = MM_OPTI_M16_MIDIIN
3  = MM_OPTI_M16_MIDIOUT
4  = MM_OPTI_M16_WAVEIN
5  = MM_OPTI_M16_WAVEOUT
6  = MM_OPTI_M16_MIXER
7  = MM_OPTI_M16_AUX
16 = MM_OPTI_P16_FMSYNTH_STEREO
17 = MM_OPTI_P16_MIDIIN
18 = MM_OPTI_P16_MIDIOUT
19 = MM_OPTI_P16_WAVEIN
20 = MM_OPTI_P16_WAVEOUT
21 = MM_OPTI_P16_MIXER
22 = MM_OPTI_P16_AUX
32 = MM_OPTI_M32_WAVEIN
33 = MM_OPTI_M32_WAVEOUT
34 = MM_OPTI_M32_MIDIIN
35 = MM_OPTI_M32_MIDIOUT
36 = MM_OPTI_M32_SYNTH_STEREO
37 = MM_OPTI_M32_MIXER
38 = MM_OPTI_M32_AUX

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filters.ks\winlog\readme.txt ===
========================================================================
       MICROSOFT FOUNDATION CLASS LIBRARY : winlog
========================================================================


AppWizard has created this winlog application for you.  This application
not only demonstrates the basics of using the Microsoft Foundation classes
but is also a starting point for writing your application.

This file contains a summary of what you will find in each of the files that
make up your winlog application.

winlog.h
    This is the main header file for the application.  It includes other
    project specific headers (including Resource.h) and declares the
    CWinlogApp application class.

winlog.cpp
    This is the main application source file that contains the application
    class CWinlogApp.

winlog.rc
    This is a listing of all of the Microsoft Windows resources that the
    program uses.  It includes the icons, bitmaps, and cursors that are stored
    in the RES subdirectory.  This file can be directly edited in Microsoft
	Developer Studio.

res\winlog.ico
    This is an icon file, which is used as the application's icon.  This
    icon is included by the main resource file winlog.rc.

res\winlog.rc2
    This file contains resources that are not edited by Microsoft 
	Developer Studio.  You should place all resources not
	editable by the resource editor in this file.

winlog.clw
    This file contains information used by ClassWizard to edit existing
    classes or add new classes.  ClassWizard also uses this file to store
    information needed to create and edit message maps and dialog data
    maps and to create prototype member functions.

/////////////////////////////////////////////////////////////////////////////

For the main frame window:

MainFrm.h, MainFrm.cpp
    These files contain the frame class CMainFrame, which is derived from
    CFrameWnd and controls all SDI frame features.

res\Toolbar.bmp
    This bitmap file is used to create tiled images for the toolbar.
    The initial toolbar and status bar are constructed in the
    CMainFrame class.  Edit this toolbar bitmap along with the
    array in MainFrm.cpp to add more toolbar buttons.

/////////////////////////////////////////////////////////////////////////////

AppWizard creates one document type and one view:

winlogDoc.h, winlogDoc.cpp - the document
    These files contain your CWinlogDoc class.  Edit these files to
    add your special document data and to implement file saving and loading
    (via CWinlogDoc::Serialize).

winlogView.h, winlogView.cpp - the view of the document
    These files contain your CWinlogView class.
    CWinlogView objects are used to view CWinlogDoc objects.



/////////////////////////////////////////////////////////////////////////////
Other standard files:

StdAfx.h, StdAfx.cpp
    These files are used to build a precompiled header (PCH) file
    named winlog.pch and a precompiled types file named StdAfx.obj.

Resource.h
    This is the standard header file, which defines new resource IDs.
    Microsoft Developer Studio reads and updates this file.

/////////////////////////////////////////////////////////////////////////////
Other notes:

AppWizard uses "TODO:" to indicate parts of the source code you
should add to or customize.

If your application uses MFC in a shared DLL, and your application is 
in a language other than the operating system's current language, you
will need to copy the corresponding localized resources MFC40XXX.DLL
from the Microsoft Visual C++ CD-ROM onto the system or system32 directory,
and rename it to be MFCLOC.DLL.  ("XXX" stands for the language abbreviation.
For example, MFC40DEU.DLL contains resources translated to German.)  If you
don't do this, some of the UI elements of your application will remain in the
language of the operating system.

/////////////////////////////////////////////////////////////////////////////
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\avi\avimsr\avimsr.doc ===
Microsoft Word Document MSWordDoc Word.Document.6Title_of_the_docTitle_of_the_doc avimsr.doc Microsoft Word for Windows 95Title: AVI file splitter Owner: Syon Bhattacharya Last Saved:   SAVEDATE  \* MERGEFORMAT  10/05/95 2:17 PM Revision:   REVNUM  \* MERGEFORMAT  Document Name:   FILENAME  \* MERGEFORMAT  Mm_spec Location: DISCLAIMER: The features described in this specification are subject to change without notice due to unforeseen implementation complications, schedule constraints, beta test feedback and usability testing. Nothing in this document should be interpreted as a contractual obligation by Microsoft to meet specific dates, testing procedures or product specifications. This document is MICROSOFT CONFIDENTIAL  TOC \o "1-3"  Overview  GOTOBUTTON _Toc337953377    PAGEREF _Toc337953377  Feature Description  GOTOBUTTON _Toc337953378    PAGEREF _Toc337953378  End User Benefits  GOTOBUTTON _Toc337953379    PAGEREF _Toc337953379  Implementation  GOTOBUTTON _Toc337953380    PAGEREF _Toc337953380  Assumptions  GOTOBUTTON _Toc337953381    PAGEREF _Toc337953381  Design Details  GOTOBUTTON _Toc337953382    PAGEREF _Toc337953382  Data structures  GOTOBUTTON _Toc337953383    PAGEREF _Toc337953383  Data Flow  GOTOBUTTON _Toc337953384    PAGEREF _Toc337953384  Sample Code  GOTOBUTTON _Toc337953385    PAGEREF _Toc337953385  Dependencies  GOTOBUTTON _Toc337953386    PAGEREF _Toc337953386  Constraints  GOTOBUTTON _Toc337953387    PAGEREF _Toc337953387  Platform Dependencies  GOTOBUTTON _Toc337953388    PAGEREF _Toc337953388  Internationalization  GOTOBUTTON _Toc337953389    PAGEREF _Toc337953389  Future versions  GOTOBUTTON _Toc337953390    PAGEREF _Toc337953390  Testing  GOTOBUTTON _Toc337953391    PAGEREF _Toc337953391  Functionality Testing  GOTOBUTTON _Toc337953392    PAGEREF _Toc337953392  CompatiecAllocator Provides allocator for output pin. Based on CBaseAllocator. Does not allocate any memory.  Use SetParent() to point it at a cache buffer that owns it. Use SetCBuffersReported to lie about this number as it will be an arbitrarily large number. Useful if the downstream filter will try to allocate that much if it is copying data. CRecCache Maintains cache of buffers and reserve buffers. GetBuffer does not block. Pretends to be an IMemAllocator for IAsyncReader. Returns to semaphores for caller to wait on for available buffer. CRecBuffer buffers used above. CBaseMSRInPin Input pin. Notifies filter when there is a connection. Accepts anything with IAsyncReader. Calls CBaseMSRFilter::CheckMediaType to accept. CBaseMSRFilter The Filter. Creates output pins and removes them on connect/disconnect of the input pin. Configure the downstream allocator when the output pins are connected (before running) CBaseMSROutPin Output pin. parse stream in file here. use m_rpImplbuffer. CBaseMSROutPinWorker Data structures Data Flow Sample Code Use the  sample code  style for sample code. Dependencies Relies on certain behavior of base classes. Johnkn s aviriff.h. Constraints Currently, the file writer does not handle MIDI. Streams are not synchronized in the output file; samples are output in the order received. Streams will be recorded at a constant rate. Platform Dependencies Relies on Win32 API calls. Tests whether CreateIoCompletionPort() succeeds to determine whether asynchronous I/O can be used. Internationalization Does regQuartz media type contain language information? Currently, the language field in the AVI file is set to 0. Future versions Error recovery. Handle out of disk space errors by truncating the file and leaving it in a consistent state. Coalescing. Copying small data streams (small audio bytes, text, RIFF headers) on the end of other samples. Coalescing. Is there any point in coalescing large chunks by programming the allocator to return adjacent blocks of memory for successive samples which could be written in one write operation? 500k is a good target size, but video capture case is optimal only with use of the source filter s allocator. Aborts (Adobe) Testing Functionality Testing Features tested by creating a Quartz graph in GraphEdit which uses that feature/code path. Compatibility Testing Compatibility with existing AVI readers. Output files were tested with MediaPlayer in Windows NT 3.51 and with the MCI AVI player. Performance Testing Performance as a percentage of disk bandwidth on a particular Windows NT system. Error condition testing Errors propagate up. Each has been tested, but more work is needed. Deadlock Potentials, if any Each pin calls the filter; the filter serializes calls. The file I/O worker thread blocks on the Completion port. The filter side blocks on an event from the worker thread. Related Documents AVI file format: MSDN->Product Documentation -> SDKs -> Video for Windows Development Filename:   FILENAME  \* MERGEFORMAT  avispec.doc Microsoft Confidential  TITLE  \* MERGEFORMAT  Title_of_the_doc Owner:   AUTHOR  \* MERGEFORMAT  Page   PAGE  \* MERGEFORMAT   NUMPAGES  \* MERGEFORMAT  Revision:   REVNUM  \* MERGEFORMAT  Normal Heading 1 Heading 2 Heading 3 Heading 4 Heading 5 Heading 6 Default Paragraph Font TOC 1 TOC 2 TOC 3 TOC 4 TOC 5 TOC 6 TOC 7 TOC 8 TOC 9 Header Footer SampleCode List Bullet inline code Annotation Reference _Toc337537865 _Toc337547462 _Toc337953377 _Toc337537866 _Toc337547463 _Toc337953378 _Toc337953379 _Toc337953380 _Toc337953381 _Toc337953382 _Toc337953383 _Toc337953384 _Toc337953385 _Toc337953386 _Toc337953387 _Toc337953388 _Toc337953389 _Toc337953390 _Toc337953391 _Toc337953392 _Toc337953393 _Toc337953394 _Toc337953395 _Toc3379533963 C:\tmp\local spec .doc _3\\Syonb2\c\quartzus\filters\avi\avidest\avispec.doc syon+C:\quartzus\filters\avi\avidest\avispec.doc C:\tmp\foo.doc _/\\SYONB2\C$\qsrc\filterus\avi\avimsr\avimsr.doc _/\\SYONB2\C$\qsrc\filterus\avi\avimsr\avimsr.doc _/\\SYONB2\C$\qsrc\filterus\avi\avimsr\avimsr.doc _/\\SYONB2\C$\qsrc\filterus\avi\avimsr\avimsr.doc _/\\SYONB2\C$\qsrc\filterus\avi\avimsr\avimsr.doc _/\\SYONB2\C$\qsrc\filterus\avi\avimsr\avimsr.doc                                HP LaserJet 5P/5MP PostScript \\msprint5\corpb PSCRIPT HP LaserJet 5P/5MP PostScript HP LaserJet 5P/5MP PostScript Custom page 1 Custom page 2 Custom page 3 HP LaserJet 5P/5MP PostScript Custom page 1 Custom page 2 Custom page 3 Times New Roman Symbol Arial Courier New Title_of_the_doc
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\avi\avimux\readme.txt ===
error handling needs to be fixed. 1 day

drop frames have wrong file offset. 

use NewSegment

two copies: not our allocator and using buffered io

interleave streams. use buffered IO, define interface. 1 week

append to existing files 3 days

fixup overlapped i/o (nt hang, empty cpool bug) - 1 day

(reader, writer) - edit arbitrary riff stuff (copyright string, etc)
(3 days)

set media types on input pins (I want to make 8 bit rgb connection,
not 24)

write multiple frames in one write operation (one stream only). New
transport / allocator which provides contiguous buffers.any
performance benefit? can we get more than 3.6mb/sec?

lots of waste with audio; ,might be better copy audio streams

smpte time code streams

separate filters for writing files

variable frame rates, discontinuities

Quartz issues. how does capture graph look. how are frames dropped in
preview renderer. run with no clock for now

queueing data on pause

need to define live streams

winnt uses async io, win95 doesn't. add a i/o thread for win95? on
winnt there is no control over how many outstanding writes there are,
and winnt seems to hang for some reason (can't page? page lock too
much). limit outstanding writes.

two writes issued if there isn't enough room in the buffer for a 'junk
chunk.' may be best to drop writing junk chunks. or an option to skip
riff headers.

talk to file reader; switch between the two quickly. scenario: capture
some stuff, look at it, capture some more, etc.

how well can file reader play uninterleaved capture files? need to add
some interleaving to writer?

multi language files

fix riffwalk

simple, 3 button capture app

problem using private allocator: the suffix means that the last 8
bytes of each buffer has to be used for junk. should allocate another
sector for that.

dwMaxBytesPerSecond is average, not maximum, bit rate

sector wasted with every outer riff chunk (1 sector every 1 gigabyte)

---

IConfigureAviWriter

SetMode ( mode = { Capture, Interleave } )

SetInterleaving ( frames interleave, frames preroll )

SetCompatibility ( compatibility = { New, Old, Both } )

combine setmode, setinterleaving?

-- gate file writer

StartNow
StarT(time or timecode or frame)
duration(time or timecode or frame)
stop(time or timecode or frame)
StopNow

will have timecode pin that may not be written out.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\avi\avimux\avispec.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Title_of_the_doc Title Title_of_the_doc _PID_GUIDTitle_of_the_doc mm_spec.dot syonb Microsoft Word 8.0@HP LaserJet 5P/5MP PostScript \\msprint5\corpb PSCRIPT HP LaserJet 5P/5MP PostScript HP LaserJet 5P/5MP PostScript Custom page 1 Custom page 2 Custom page 3 HP LaserJet 5P/5MP PostScript Custom page 1 Custom page 2 Custom page 3^]rAih ${!$+ /,Vj0Title: AVI file writer filter Owner: Syon Bhattacharya Last Saved:   SAVEDATE  \* MERGEFORMAT  10/05/95 2:17 PM Revision:   REVNUM  \* MERGEFORMAT  Document Name:   FILENAME  \* MERGEFORMAT  Mm_spec Location: DISCLAIMER: The features described in this specification are subject to change without notice due to unforeseen implementation complications, schedule constraints, beta test feedback and usability testing. Nothing in this document should be interpreted as a contractual obligation by Microsoft to meet specific dates, testing procedures or product specifications. This document is MICROSOFT CONFIDENTIAL  TOC \o "1-3"  Overview  PAGEREF _Toc379942951 \h  Feature Description  PAGEREF _Toc379942952 \h  End User Benefits  PAGEREF _Toc379942953 \h  Implementation  PAGEREF _Toc379942954 \h  Assumptions  PAGEREF _Toc379942955 \h  File Writer Implementation  PAGEREF _Toc379942956 \h  AVIMux  PAGEREF _Toc379942957 \h  Restrictions  PAGEREF _Toc379942958 \h  some of the stuff below is obsolete  PAGEREF _Toc379942959 \h  Design Details  PAGEREF _Toc379942960 \h  CFileIo  PAGEREF _Toc379942961 \h  CImperfectBufIo  PAGEREF _Toc379942962 \h  CAviWrite  PAGEREF _Toc379942963 \h  CAviDest  PAGEREF _Toc379942964 \h  CAviDest::CAviInput  PAGEREF _Toc379942965 \h  Data structures  PAGEREF _Toc379942966 \h  Data Flow  PAGEREF _Toc379942967 \h  Sample Code  PAGEREF _Toc379942968 \h  Dependencies  PAGEREF _Toc379942969 \h  Constraints  PAGEREF _Toc379942970 \h  Platform Dependencies  PAGEREF _Toc379942971 \h  Internationalization  PAGEREF _Toc379942972 \h  Future versions  PAGEREF _Toc379942973 \h  Testing  PAGEREF _Toc379942974 \h  Functionality Testing  PAGEREF _Toc379942975 \h  Compatibility Testing  PAGEREF _Toc379942976 \h  Performance Testing  PAGEREF _Toc379942977 \h  Error condition testing  PAGEREF _Toc379942978 \h  Deadlock Potentials, if any  PAGEREF _Toc379942979 \h  Related Documents  PAGEREF _Toc379942980 \h  Overview This document describes implementation details for the AVIMux and file writer filters. Use these filters to output an AVI file containing the data received on the input pins. This document assumes knowledge of Quartz and the AVI file format. Feature Description The file writer filter can be replaced with a component which writes to a stream in a compound document. The AVImux is the file type specific component. The AVIMux outputs a file in the new AVI file format with a two level index. It can be configured to output a file compatible with existing AVI readers. The AVImux accepts any number of inputs, up to the limit of the AVI file format. Each input stream corresponds to one AVI stream. These filters are designed to achieve a high throughput for video capture to a pre-allocated file. To maximize disk bandwith utilization, the filter uses unbuffered, asynchronous disk writes (if available) without seeking when running. Interleave streams for efficient and streaming playback. End User Benefits The filter can be used to record a video editing session (eg a filter in an ISVs video editing system). Video capture (ISVs and end users). Implementation Assumptions File Writer Filename set through IFileSinkFilter::SetFileName and can be changed when graph stopped  When the file writer is given a filename, it changes the values reported to GetAllocatorRequirements to match the sector sizes and requests a reconnect upstream. The filewriter currently does not provide an allocator. The filewriter writes samples as they arrive in the Paused and Running states. The file writer uses IMemInputPin to transport data. The stream times on samples (GetTime()) represent byte offsets. The filewriter refuses samples with S_FALSE after it encounters an error or EndOfStream. The filewriter signals errors to the graph using NotifyEvent. The filewriter may do this after returning from Receive and accepting additional samples. The filewriter writes all samples it has accepted when it is stopped with IMediaFilter::Stop and refuses any new samples. It blocks the Stop() call until it commits all samples to disk but it may signal the graph (EC_COMPLETE) earlier. The input pin of the filewriter exports IStream and supports a subset of its methods. These are available even when the graph is stopped. Release the interface to close the file handle. No sector or memory alignment requirements are negotiated for IStream. On Windows95, the file writer queues writes on a separate thread. The IMemInputPin::Receive() call can block on both Windows95 and Windows NT. AVIMux The AVIMux creates a variable number of input pins supporting IMemInputPin and one output pin using both IStream and IMemInputPin. Accepts any stream with MajorType in the FOURCCMap space. Samples with negative time stamps are discarded. Audio streams are handled specially, all other streams are handled like video (frame based) Video streams should have the nAvgTimePerFrame entry set in VIDEOINFO structure of the format block. It is used to determine which frames were dropped by the source. Initial frames: AVIMux records start times of all streams, normalizes streams so earliest stream starts at t=0 then normalizes all streams so that first video stream starts on a frame boundary. AVIMux reconnects input pins when the output pin is reconnected to renegotiate alignment requirements. GetAllocatorRequirements() on input pins reports a prefix of 8 and alignment from File writer. The prefix is used to reserve space for the RIFF headers. AVIMux generally issues one write per sample using IMemInputPin downstream. In NotifyAllocator(), the AVIMux determines if samples on a stream need to be copied. Data must be not be read-only and must have the requested alignment and prefix. The AVIMux does not negotiate a suffix on input streams  allocators (for RIFF/AVI   chunks). If it s using an upstream allocator, the AVImux may issue two writes   one write for the data, and one sector for padding. All this goes away if the AVIMux is using buffered I/O.  Restrictions Time elapsed in any stream will not exceed xxx. Number of samples in any stream will not exceed xxx. (this can be detected). This is determined by the amount of space preallocated at startup for the index. Size of sample will not exceed xxx. (this can be detected) Will not exceed maximum number of pending asynchronous file requests. some of the stuff below is obsolete Design Details The following classes are defined: CFileIo, CImperfectBufIo, CAviWrite, CAviDest, CAviInput, CAviAllocator. CFileIo The CFileIo class encapsulates the interface to file I/O. It supports writing in buffered (through the operating system), unbuffered, synchronous and asynchronous modes. The implementation uses a separate thread that waits on a Win32 completion port to process asynchronous events. The caller specifies a callback to call when an asynchronous write completes. CFileIo maintains a fixed size pool of WriteRequest objects which contain OVERLAPPED structures necessary for completion ports. CFileIo handles the different file access modes by creating two handles to the file; one file handle is used for buffered, synchronous I/O, the other for unbuffered, asynchronous I/O. If an error is detected (during the completion event), a flag is set and subsequent writes will fail. All calls should be serialized by the caller. Public methods: BOOL SetMaxPendingRequests(ULONG cRequests); Set the count of outstanding write requests. This corresponds to the number of buffers the caller has allocated. BOOL Create(); Create() creates the file and starts the worker thread. SetMaxPendingRequests() needs to should be called before. BOOL StreamingStart(ULONGLONG ibFile); Start streaming at ibFile, which must be aligned, in the file. StreamingGetFilePointer(), StreamingSeek(), and SreamingWrite() calls can be issued in streaming mode. BOOL StreamingEnd(); Ends streaming mode. Blocks until all pending writes complete. BOOL StreamingGetFilePointer(ULONGLONG *pibFile); BOOL StreamingSeek(ULONG cbSeek); BOOL StreamingWrite(   BYTE *pbData,   DWORD cbData,   FileIoCallback fnCallback,   void *pMisc); StreamingWrite() issues an asynchronous write and calls fnCallback on completion or error. pMisc is an argument passed to the callback. pbData, and dwSize must be aligned on the boundaries returned in GetMemReq() below. The write operation fails if a previous write failed. Under Windows, this call blocks until the write operation completes. BOOL Close(); Close() closes the file and the worker thread, and resets its internal state. Can only be called when not streaming (ie StreamingEnd() was called). BOOL SynchronousWrite(   DWORDLONG dwlPos,   BYTE *pbData,   DWORD dwSize); BOOL SynchronousRead(   DWORDLONG dwlPos,   BYTE *pbData,   DWORD dwSize); void GetMemReq(   ULONG* pAlignment,   ULONG *pcbPrefix,   ULONG *pcbSuffix); Returns the alignment requirements for write  and seek operations. static void NullCallback(void *pMisc); CImperfectBufIo The CImperfectBufIo class uses the same interface as CFileIo, but reports an alignment of 1 and copies incoming samples to a larger buffer. The benefits are that no space is wasted in JUNK chunks and performance can better than the operating system s own buffering. The buffering is imperfect because the class may write over the data in the file before and after a streaming write. This behavior is acceptable in the AVI file writer because thesamples are the first thing to be written in streaming mode. CAviWrite The CAviWrite class encapsulates all the specifics of the AVI file format. On startup, CAviWrite prepares the file for streaming and on shutdown it fills in the structures omitted. RIFF structure The AVI header is maintained in memory as the on disk structure and is output to disk when the file is closed (on the pause to stop transition). Keeping the structure in memory as it is on disk requires padding (  chunks) to ensure all the structures are aligned on 32 bit DWORDs. The AVI format only guarantees that structures are aligned on 16 bit WORDS. AVI chunks that are not aligned on 16 bit words can be aligned for free (no junk chunks). CAviWrite expects incoming samples to be aligned on DWORDs or CFileIo s requirments, whichever is greater. Each sample must be padded on either size. The padding in front of the sample is used for the RIFF chunk header. The padding at the back is used for a JUNK chunk needed to pad the file to sector boundaries. Options The Avi file writer supports the following options through registry entries in "HKEY_CURRENT_USER\\ Software\\Microsoft\\Multimedia\\AviWriterFilter cbSubIndex cbSuperIndex cbOuterRiff: Size of the outermost RIFF chunks. Should be 1 Gb to remain compatible with older AVI file readers. cbHeaderJunk: amount of junk left in the header after the   junk for editing. cbBuffer cBuffers bBufferedIo Incoming data A StreamInfo structure is used to keep track of all of the per-stream information including a copy of the MediaType structure, necessary to compute stream rates, sample counts, etc. This structure is updated for each sample received. For each sample: When each sample received, it is written to disk indexed (possibly triggering a write) the size of the outermost RIFF chunk is checked (possibly increasing the file s seek offset if a new RIFF chunk must be started). the first chunk is a special case because space needs to be left for the old style index. Index The super index and the current sub-index for each stream are kept in memory. The CAviAllocator allocator is used to allocate buffers for the subindex chunks. When a subindex is filled, it is output at the current position in the file and a new one is allocated. This means the index is after the data it indexes. When the file is closed, the sub indexes are propagated up, one stream at a time, so that the index chunk is before the data it indexes. During the initialization step, space is allocated for the first subindex chunks at the very beginning of the   chunk. This space may be  junked  if there is one subindex, and it fits in the space allocated for the superindex. During the propagation step, the old format index (idx1) is constructed. The CWalkIndex class is used to read index entries and propagate subindex chunks. Public methods CAviWrite(TCHAR *szName); void GetMemReq(ULONG* pAlignment, ULONG *pcbPrefix, ULONG *pcbSuffix); Return CAviWrite s requirements on incoming samples. BOOL Initialize(int cPins, MediaType **rgpMt, ULONG *rgcBuffer); Initialize CAviWrite, create the output file, and prepare to receive samples. rgpMt is an array of pointser to media types for the connected pins (NULL if the pin is not connected). rgcBuffer is an array containing the number of buffers allocated on the pin's allocator. BOOL Close(); HRESULT Receive(int pinNum, IMediaSample *pSample); Each sample is written through this method. Calls from the different pins are serialized at the filter. static FOURCC MpVideoGuidSubtype_Fourcc(const GUID *pGuidSubtype); Maps media subtype to a FOURCC code for the AVI file; returns 0 if mapping is unknown. CAviDest The CAviDest class implements the filter and behaves like a rendering filter. It inherits CBaseMediaFilter and IFileSourceFilter. On startup, the filter creates one output pin. If a pin reports that it is connected,  and there are no more free pins, the filter creates a new pin. The filter initializes and closes CAviWrite on stop -> pause and pause -> stop transitions. The filter does not distinguish between the paused and stopped states; it is the source filter's responsibility. Much of the pin's behavior is routed through the filter. In particular, receives are serialized at the filter. CAviDest::CAviInput The CAviDestInput class implements the input pin. It accepts any stream which can be put in an AVI file as determined by MpVideoGuidSubtype_Fourcc.  When a connection is made or broken, it notifies the filter so that the filter can create another pin. When a stream reports EndOfStream(), and there are no more active streams, a pin notifies the filter that the run is complete. Allocator The pin would like to use the source filter's allocator as this saves a memory copy.  In order to use the source filter's allocator, the input pin checks that it meets the size, alignment, and padding requirements set at pin creation. The pin is responsible for copying the sample to its own allocator if it cannot use the source filter's. Data structures Data Flow Sample Code Use the  sample code  style for sample code. Dependencies Relies on certain behavior of base classes. Johnkn s aviriff.h. Constraints Currently, the file writer does not handle MIDI. Streams are not synchronized in the output file; samples are output in the order received. Streams will be recorded at a constant rate. Platform Dependencies Relies on Win32 API calls. Tests whether CreateIoCompletionPort() succeeds to determine whether asynchronous I/O can be used. Internationalization Does regQuartz media type contain language information? Currently, the language field in the AVI file is set to 0. Future versions Error recovery. Handle out of disk space errors by truncating the file and leaving it in a consistent state. Coalescing. Copying small data streams (small audio bytes, text, RIFF headers) on the end of other samples. Coalescing. Is there any point in coalescing large chunks by programming the allocator to return adjacent blocks of memory for successive samples which could be written in one write operation? 500k is a good target size, but video capture case is optimal only with use of the source filter s allocator. Aborts (Adobe) Testing Functionality Testing Features tested by creating a Quartz graph in GraphEdit which uses that feature/code path. Compatibility Testing Compatibility with existing AVI readers. Output files were tested with MediaPlayer in Windows NT 3.51 and with the MCI AVI player. Performance Testing Performance as a percentage of disk bandwidth on a particular Windows NT system. Error condition testing Errors propagate up. Each has been tested, but more work is needed. Deadlock Potentials, if any Each pin calls the filter; the filter serializes calls. The file I/O worker thread blocks on the Completion port. The filter side blocks on an event from the worker thread. Related Documents AVI file format: MSDN->Product Documentation -> SDKs -> Video for Windows Development Filename:   FILENAME  \* MERGEFORMAT  avispec.doc Microsoft Confidential  TITLE  \* MERGEFORMAT  Title_of_the_doc Owner:   AUTHOR  \* MERGEFORMAT  Page   PAGE  \* MERGEFORMAT   NUMPAGES  \* MERGEFORMAT  Revision:   REVNUM  \* MERGEFORMAT  }xsnid_ }zzzzzzzzzzx
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\control\textcont\sample.txt ===
Control Data
; first, a listing of sets used
; each line starting with a { is assumed to be a GUID.
; index numbers assumed, or explicit?
; then frame rate to use as output rate (rate, scale) then length in ms
+1 30 1 10000
{41BF4281-45F2-11d0-A520-6CC005C10000}
;
;
; following entry says "value of property #2 in set #0 is 2 at time 0.
V	0	0	2	2
; property 1 should start at 0
V	0	0	1	0
; ramp: at time 0, value of #1 should ramp to be 100 at time 3000.
R	0	0	1	100	3000
R	3000	0	1	0	3000
R	6000	0	1	100	3000
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\todo.txt ===
Here is my attempt at a schedule.  Based on milestone date, it lists the things that will be done for that date, who is working on each thing, and things are numbered sort of by priority.


- Danny



THINGS TO WORRY ABOUT STARTING NOW
1-write a sample app/real video editor



END OF MARCH
Danny
*DONE* 1- Support slo-motion and fast forward of video, not just normal speed video clips
*DONE* 2- Allow the app to specify edit points at any arbitrary time (right now if they don't specify a "round number" the project won't play, but will hang)
3- Switch needs the allocator fixed to work with Mux filters on its output and other allocator magic
4- work with ASF guys to get their MUX registered properly to work with us and ICaptureGraphBuilder both
5- ASX reading and writing (instead of XML)
*DONE* 6- Holes in the timeline don't work yet... BLACK needs to be used
*DONE* 7- Holes in audio don't work yet... SILENCE needs to be used
8- .BMP .DIB .JPG .GIF still image sources need to be supported
Eric
1- the TLDB api's dont return any error codes when you do illegal things
*DONE* 2- TLDB clips need to be given an instantiated source filter right now... all clips should just be given a filename
3- remove hard coded media type references from the timeline, and finish implementing important parts of TLDB, and document which methods are done, and which are still not done, error check, so in theory, other MTypes could work
4- Remove hard coded media type references from RenderEngine, and finish implementing important parts, and document which methods are done, and which are still not done, error check, so in theory, other MTypes could work
5- Finish the media locator to find clips that move on their drive
*DONE* 6- support transition from A to B or B to A
7- support STATIC or VARYING Execute % in DXTs, and allow custom curves, not just linear
*DONE* 8- make compositions work in the timeline
*DONE* 9- make compositions work in the render engine
*DONE* 10- support for multiple streams of multiple types TLDB... maybe by having multiple trees per TL, with one media type per tree
11- DA sources can't be seeked yet
Xuping
1- resizer needs to not data copy if size doesn't change




END OF APRIL
Eric
1- Make Chroma/Luma/other keying DXTs work and be supported (maybe earlier)
Danny
1- Quality Management - switch drops frames to keep in real time
2- ASF reading and writing will be finished (dependency here)
3- allow netshow sources, or other existing source filters besides file sources - can't be seeked efficiently?
4- allow live sources as inputs, and stuff that can't be seeked at all




END OF JUNE

GENERAL
Eric
1- Completed TLDB API
2- Completed RenderEngine API
3- The render engine cache manager needs to be implemented (MONTHS of work here)
4- cutpoints, or allow each effect be specified twice (cutpoint or fast one for preview, slow one for offline)

Xuping
1- Reading Dib Sequences (foo000.bmp through foo999.bmp being a 1000 frame movie)
2- Writing Dib Sequences too
3- implement interpolating resizer... maybe preview uses fast resizer, offline uses interpolating one?
Danny
1- reuse sources and black/silence to save opening the same file 10 times??
2- dynamic reconnecting of sources so 100 files aren't opened at once (lots of work?)
3- Adobe wants a callback to tell them what piece of the timeline is currently being rendered so they can fill in bits they don't ask us to do
4- profile where time is spent to tell app the 10 slowest DXTs, for instance, to help it get real time performance.  also be able to tell app when a source or other component is responsible?

AUDIO+
Danny
1- Support slo/fast audio speeds too
2- support at least one specific scenario for non-video/audio for ASF
Xuping
1- We need KMixer working, or to write our own mixer (let's just write our own) and get support in TLDB, RenderEngine (I'll need to help her)
2- Support for changing audio volume over time

DXT
Xuping
1- somebody needs to write 30000 SMPTE wipe and other DXTs.
Eric
1- use procedural DXTs as a source?
2-support titling properly - we need a story here... just use DA??  (or is this just an external DXTransform or source filter, perhaps?)
3-implement our end after we work with DXT to have them register more info, like SMPTE #
4-implement our end after we work with DXT to make them support standard way of changing common parameters



THINGS FOR TED TO DO
1-push for the pinnacle thing... make them base on Dexter, get it shipped on Win2000C
2-find important, specific, non-audio/video scenarios using ASF we need to support
3-work with DA to allow import audio from DA scenes, not just video (DA to be fixed for this)
4-work with DA to route video into DA to use as effect (also requires DA changes)
5-work with DA to help them use dexter to do their video editing
6-work with DA and CORE to find improvement over AMSTREAM way of getting DShow data
7-help DXT, DSound, SonicFoundry come up with an audio FX model
8-work with DXT to have them register more info, like SMPTE #
9-work with DXT to make them support standard way of changing common parameters
10-help us come up with a titling story
11-keyframing story?
12-alpha/chroma keying story?
13-Get testers to profile DXTs and complain to paul which ones are slow with animated inputs and get them fixed
14-investigate how FIELD based support would work



THINGS I'M HAPPY TO PUNT FOR NOW
1- implement the audio FX model we come up with
2- AAF reading and writing
3- don't always use RGB32 and CDaudio as the format for the swithcher?  eg. if the project final format is RGB16, we can use RGB16 as our internal format.  For compressed output, RGB32 is probably fine...  biHeight < 0?
4- smart recompression?  will we actually do this?
5- support hearing the audio while you scrub?
6- support FIELD based video (we would be the first)
7- support for live scenarios, not just live sources: changing the timeline after it's been rendered without stopping, for instance for live commercial insertion
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\todo.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsquish ALPHA TASKS Title _PID_GUIDALPHA TASKS Danny Miller Normal.dot Danny Miller Microsoft Word 8.0J>#dN m,(dY@ h.dY@ (+3dY@ Hb8dN tG^;dN 1CdGJ -youdNDEXTER THINGS TO DO ALPHA TASKS Priority 1 CODE REVIEW everything - 1 week The SMPTE wipe DXT does not work - we need to replace the JPEG file reader - Xuping/Danny/Eric (3 days) Fix source splitting to split effect/transition properties - Danny (1 day) Render Engine error checking, and better Error Logging - Eric (1 week) Switch, FRC and DXT need to use Error Log for their errors (eg: "SHIT", SetRate failing, and property failures) - Danny (1 day) Seeking is off by 3 frames sometimes - Danny (1 day) Finish Keying - Xuping (1 day ???) Fix the SMPTE wipes to look good - Danny (1 day) RAID bugs - ??? Error checking - bogus media types for the switch, etc - Danny (1 day) Priority 2 COM object to find the length of a media stream in a file - Eric (3 days) COM object to find the # of streams in a file, and their type - Eric (included above) Fix DA source filter to be seekable - Eric (3 days) Make sure stream # feature works in XML - Danny (1/2 day) Programmable output buffer size for the switch - Danny (1/2 day) Make all our interfaces VB-AUTOMATABLE - Eric (1 week) Dexter 1.0 - Sept ?? Better support in IRenderEngine for writing ASF, WAV, DSEQ, etc - Danny - 2 days Allow live sources in Dexter (camera input), and netshow sources - Danny - 3 days support still image sources that an app has in memory, but not in a file - 1/2 day Support non-audio/video.  Single track only? Are gaps OK?  What about if times overlap? - Danny - 4 days Support non-black backgrounds... and washes too? - 1 day Other switching scenarios - live switching on demand - Danny - 3 days Other switching scenarios - playlists - durations not known - Danny - 2 days Higher resolution SMPTE masks for better looking wipes? (Data will be 4x bigger?) - 3 days Identify all hacks, and see which need fixing - Danny/Eric - part of code review above Do we need to uninstall? - 0 days Eliminate the C runtime - 2 days Better performing audio mixer and volume changer - 3 days Dynamic reconnections - don't open every source while building the graph, only as they are needed - Danny 3 weeks Implement the Cache Manager to allow changing the timeline and making a new graph quickly without tearing down and building a new graph (for as many scenarios as possible) - Eric/Danny - 2 months Read/Write XGR as well as XTL? - 1 day Ship our Still frame grabber filter... make it useful for getting all the frames out of a stream, as a replacement for MMStream - 1 week A new stretch mode - Preserve aspect ratio but don't letter box... crop two of the ends off - 1 day We need MORE SAMPLE APPS to show other cool applications for Dexter - new headcount? Seeking an MPEG is sometimes off by 1/2 second... this can cause us problems. - 1/2 day Black frames show up in between seeks in MPlayer.  Why? - 2 days Using an MPEG in a project slows seeking down every time! - 2 days A project with audio from a .MOV file sometimes seeks slower than other projects - 2 days Reuse the same source filter for multiple times a clip is on the same track - Danny - 1 week Use same source filter for audio and video when their times are the same? - Danny - never or 1 week If a source runs out early, don't stop the whole project? - Danny - 1 day Support GIFs?  Any other still formats? - 1 day Better resizer? (a mode for fast vs. interpolated) - 3 days Ship a JPEG wipe generator tool - 3 days Fix performance of our DXT's... SMPTE and KEYS - 1 week Profile graph building and optimize it. - 2 weeks Profile graph playing and optimize it - 2 weeks Post 1.0? Use SubObjects in the Timeline? Use Interest Ranges? More property support - other than IPropertySetter, and on more objects? Tell app where time was spent - slowest DXTs? Animated wipes using AVIs? DMusic sources? Undo/Redo for the timeline? MAKE SURE TO TEST THESE: 1.  Round trip conversions between doubles and reference times should be the same 2.  Test DV content 3.  Seek using Relative mode, and other wierd stuff like that 4.  Cutpoints 5.  Test IErrorLog for many things, like bad clip times, no such DXT, bad props, etc. 6.  Pound on Keying 7.  Pound on Titling 8.  All XTL files can save themselves back again, all GRF files work Test muting individual and groups of objects, and all effects and transitions at once Audio effects DShow filters ysmga[
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\dexter.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsquish DEXTER Title _PID_GUIDDEXTER Danny Miller Normal.dot Danny Miller Microsoft Word 8.0PBrush IDATx cVT3p ,2zaI mG)Hx] cIDATx PX>k/ '1pE( IDATx KvA]qK lIDATx F+MeI NiH]}p{ (E)JQ lAxhQ D)K^V BBQgJ $U#4_8 A%kg_ pVVDAfPaintbrush Picture PBrush PBrushPaintbrush Picture PBrush PBrushPaintbrush Picture PBrush PBrushcNf2' cNf2'bjbjt+t+ DEXTER 1.  Introduction Dexter is a system for editing various bits of different media together from different sources, including doing mixing and special effects and transitions for audio and video data types.  It consists of several parts.  At the lowest level, there is a collection of filters that can be put together in a DirectShow filtergraph, and specially programmed to accomplish any editing task desired (the FILTER COLLECTION).   There is also a high level API, where an app can specify at a very high level what editing task is to be performed, such as "this piece of video dissolves to this other piece of video, and a third comes in from the side" and this information can be stored and retrieved  (The TIMELINE DATABASE).   There is also an engine that reads the database and constructs a filtergraph to accomplish that task, bridging the 2 previous components mentioned (The RENDER ENGINE).    In the future, we will probably see a component to read and write AAF files from the information in the timeline database.  We also have testing tools to create editing projects from  XML text files (you can type a description of your editing project in plain english!), and a simple VB app somewhat like Adobe Premiere you can use to make editing projects.  Pretty cool, eh? 2.  Using and Testing Dexter The easiest way to play with Dexter is through the XML parser test app, XMLTLTST.  You can build this app in the  dexter\test\xmltltst  directory (make sure you ve built in the  dexter  directory first). Usage: XMLTLTST /n input.xtl [output.grf] [output.xtl] If you just type: XMLTLTST filename.xtl the app will  execute the project described in the file, and render a preview to the screen.  (There is no support at this time for creating AVI or ASF files of the project from XML) XMLTLTST filename.xtl filename.grf will also create a .grf file of the project, that can later be played with MediaPlayer where you can seek around in it., or load it into Graphedt to alter the graph to save the project in an AVI file, etc..    The "/n" flag will skip playing a preview of the file, and only create a .grf file for you XMLTLTST filename.xtl output.xtl This will save a copy of filename.xtl back out as output.xtl, after sending it through our load and save code, testing our persistance of files.  It won't look identical, but it should be functionally identical. You can have as many .grf or .xtl output arguments as you want. One of the basic units of an editing project is a track.  A track consists of a number of clips, one after the other, that cannot overlap.  For instance, three clips or pieces of data coming from three different sources put back to back would make up a track.  For video or audio tracks, if there are gaps between the clips, that part of the track is transparent and you will hear or see the contents of the tracks underneath.  If there is no content on any track for a given period of time, black or silence will be used to fill it.  You are also allowed to have one or more 1-input video or audio effects on a portion of a clip or on a portion of a track.  (If you want the whole sequence in black and white, it's easier to put the B&W effect on the whole track instead of 3 times on each of the clips.)  The effects are allowed to overlap.  One important audio effect supported is a crossfade, where you can vary the output volume over time. For video or audio projects, you can combine tracks to make a composition.  Tracks are layered on top of each other, and you will only see the top layer.   If there is no content in one track, you will see the content of the layer beneath it.  A track may have one or more transitions on it, where that track's contents will be blended somehow with the total output of the layers beneath it.   These transitions may not overlap.  For audio projects, the only logical transition supported is a mixer, but video has countless possible transitions. A composition may be used as a track in another composition.  This allows for arbitrary complexity.  Compositions also may have effects and transitions associated with them (for example to make an entire project B&W, or fade an entire project in from silence). A timeline can produce any number of streams, based on how many top level composition nodes it has (for instance 1 video stream and 2 audio streams).  Each top level node is an editing project in itself, and a separate subgraph is built for each of them, with a switcher and other supporting filters. SYNTAX: <timeline> : the main project tag <composite> : identifies a project that is to be a track of another parent project <group type="video"> : identifies a top-level project of the timeline that represents one output stream of either "video" or "audio" <composition> : one or more tracks collected as a composition can be treated as a track in another composition <track> : a track  <clip src="filename.ext" tlstart="a" tlstop="b" mstart="c" mstop="d"> : a piece of media placed on the timeline from a to b, consisting of the piece of that file from c to d <effect clsid="{xxxxx}" start="a" stop="b"> : a one input Direct X Video Transform lasting from a to b <transition clsid="{xxxxx}" start=a" stop="b" direction="a2b"> : a two input Direct X Video Transform lasting from a to b and either transitioning from a to b, or from b to a. As with all XML, if a tag is fully specified, it ends with a "/" before the closing ">".   If other lines come in between, there is no "/" in the tag, but a closing tag beginning with a "/" is required. <tag1/> <tag2> <subtag2/> </tag2> RULES: clips within a track cannot overlap an effect can be on a clip, track, or composition.  There can be multiple effects which can all overlap a transition can be on a track or composition.  There can be multiple transitions, but they cannot overlap. A transition on the first track means black is the other source. Effects and Parameters can have arbitrary properties set on them (IDispatch will be called on the DirectX Transform with your property settings) .XTL SYNTAX:       the values shown in quotes are in most cases, the default value if that parameter is left out. // <timeline> //      output="foo.avi" (default is preview) (not yet implemented) //      duration = "time" (optional) // <group> //      Name="Project X" (Switch will get this name) //      FrameRate="15.0"         !!! anything with more than seven decimal  digits won't work! (overflow) //      PreviewMode="1" allow drop frames //      type="video" //              Width="320" //              Height="320" //              BitDepth="16" (or 24 or 32) //      type="audio" //              SamplingRate="44100" //      priority="n" (optional) // (any of the below can have Mute="On" to make that component act as if it // wasn't there) // <composite> // <track> // <daclip>     (uses DA Source filter) // <clip> //      src="file" (given to the source filter) //      tlstart = "time" //      tlstop = "time" //      mstart = "time" //      mstop = "time" (optional) //      FrameRate = "0" (used only for dib sequences... what is its fps? The         default, 0, means to disable dib seq (use only that 1 file), so to enable dib sequences, you must set this parameter) //      !!! anything more than seven decimal digits won't work! (overflow) //      StretchMode = "Stretch" (Stretch, Crop or PreserveAspectRatio) //      clsid = "clsid" (optional specific src filter to use - not used if //                       "category" or "instance" are specified) //      category = "clsid" (optional - default is "DShow Filters" category) //      instance = "friendly name" (optional - looks in "category" for it) // <effect> //      clsid="" //      start="time" //      stop="time" // <transition> //      clsid="" //      start="time" //      stop="time" //      SwapInputs="0" //      cutpoint="time"   (not yet implemented) //  Effects and transitions can have a <param> sub tag, to specify parameters //  you can set on that DirectXTransform.  Most transitions support "progress", //  to specify how much of A vs. B you want to see.  Most other possible //  parameters are transform specific. //  Our SMPTE wipe DXT that is part of Dexter supports the following parameters: //  (more information needs to be written about this) //  "MaskName" - if not NULL, use this JPEG as the wipe instead of a standard //               SMPTE wipe //  "MaskNum" - which SMPTE wipe # to use (see TedWi for chart of wipes) //  "ScaleX" - stretch the shape of the wipe //   "ScaleY" - stretch the shape of the wipe //  "OffsetX" - have the transform start off centre //  "OffsetY" - have the transform start off centre  //  "ReplicateX" - duplicate the shape this many times horizontally //  "ReplicateY" - duplicate the shape this many times vertically  //  "BorderColor" - colour of border between A and B //  "BorderWidth" - width of border between A and B //  "BorderSoftness" - additional width to be blurry //  The value of the parameter can change over time, jumping to a new value at //  a new time, or interpolating from the last point to a new value at a new //  point.  Here's a wacky example of a wipe effect that flies around wildly //  instead of going linearly from left to right as it would have done by //  default:  All parameter times are relative to the start of the effect //  or transition //<transition clsid="{AF279B30-86EB-11D1-81BF-0000F87557DB}" start="2" stop="9"> //                <param name="progress" value="0.0"> //                       <at time="1" value="0.5"/> //                        <at time="2" value="1.0"/> //                        <linear time="5" value="0.0"/> //                        <linear time="6" value="1.0"/> //                        <linear time="6.5" value="0.0"/> //                        <linear time="7.0" value="1.0"/> //                </param> //</transition> //  This example runs the progress backwards... eg.  a left to right wipe //  becomes a right to left wipe, starting with all new video and wiping back //  to old video: //<transition clsid="{AF279B30-86EB-11D1-81BF-0000F87557DB}" start="2" stop="8"> //                <param name="progress" value="1.0"> //                       <linear time="6" value="0"/> //                </param> //</transition> //  The first value on the same line as the parameter name is the value at time //  0, and will always be the value unless other values are specified as //  sub tags underneath it.  "Progress" is a parameter that you will likely //  want to vary over time.  The SMPTE DXT parameters are not... //  you would simply say: //<transition clsid="{dE75D012-7A65-11D2-8CEA-00A0C9441E20}" start="2" stop="4"> //            <param name="MaskNum" value="107"/> //             <param name="BorderWidth" value="3"/> //</transition> //  The above example uses the CLSID of the SMPTE DXT.  By default is does a //  left to right wipe with no border. //  Here's a fun example:  A 2x3 matrix of tall skinny hearts with the border //  colour changing dynamically!!! //<transition clsid="{dE75D012-7A65-11D2-8CEA-00A0C9441E20}" start="2" stop="4"> //         <param name="MaskNum" value="130"/> //         <param name="ScaleY" value="3"/> //         <param name="ReplicateX" value="2"/> //         <param name="ReplicateY" value="3"/> //         <param name="BorderColor" value="65280"> <at time=".5" value="16711680"/> <at time="1" value="255"/> <at time="1.5" value="65535"/>     </param> //         <param name="BorderWidth" value="5"/> //         <param name="BorderSoftness" value="5"/> //</transition> //  Using parameters with the audio mixer filter is how you change the volume //  of an audio clip, track, composite, or group.  Use the CLSID of the //  Audio Mixer filter (CLSID_AudMixer) and use the parameter name "vol". //  BE CAREFUL using values > 1 to increase the volume, you will probably clip //  the audio and distort the sound.  Only decreasing the volume is recommended. //  This example sets the volume of an object to 1/2 volume //  <!-- this effect can be on a clip, track, composite or group--> //  <effect clsid="{036A9790-C153-11d2-9EF7-006008039E37}" start="0" stop="5"> //          <param name="vol" value=".5"/> //  </effect> //  This example fades the volume out //  <effect clsid="{036A9790-C153-11d2-9EF7-006008039E37}" start="0" stop="5"> //          <param name="vol" value="1.0"> //              <at time="5" value="0"/> //          </param> //  </effect> EXPLANATIONS: Some of the tags are straightforward, and will be obvious once you look at an example.  Here are some of the less common flags: <clip src="foo.ext"> A source clip can be any streaming media type that DShow supports, eg.  avi, asf, mpg, mov, wav, etc.  It can also be a still image for video... .bmp, .dib, .jpg and .jpeg are the supported still image formats.   All these objects have timeline times (tlstart and tlstop).  Everything but still images have media times too (mlstart and mlstop).    Sequences of still images are also supported.... EG: If you specify a filename of "pict098.jpg" and there exists files called "pict099.jpg" "pict100.jpg" etc., every frame, a new picture will be sent, instead of the same image every frame.   In order to get this feature, you must specify the frame rate of the sequence (at what rate playback of the sequence will look "normal") with the FrameRate parameter, otherwise, just that one individual picture will be used. Since all clips are stretched to the group's size, you have 3 choices about how to stretch a particular clip, using the StretchMode parameter.  If nothing is specified, "Stretch" is assumed.    "Stretch" means stretch the video to the new size; aspect ratio may not be preserved.  "Crop" means take a chunk out of the centre of the source clip that is the same as the group size, using black around it if it is too small.  No stretching is done.  Finally, "PreserveAspectRatio" will stretch the clip to the new group size, but preserve the aspect ratio, putting black around the edges that need extra padding. <transition SwapInputs="1"/> Optionally switches the inputs to the transition around.   EG: With SwapInputs="1" a wipe that normally has the new video wipe in from the left, will have the old video wipe in from the left overtop the new vide. This works well with the above example of running the progress backwards, so you can make a left to right wipe go right to left (by running the progress backwards) and have the old video on the left and the new video on the right (by swapping the inputs).  Doing one without the other typically looks wierd. <group type="video" FrameRate="15" Width="320" Height="240" BitDepth="16"/> These are the defaults.  This determines the format of the video coming out of the switch.  BitDepths supported so far are only 16 (that will mean 555), 24, and 32.  Anything else will probably crash. <group type="audio" SamplingRate="44100"/> (This is the default).  This determines the format of the audio coming out of the switch.  (only 8000, 11025, 22050, 32000, 44100, and 48000 are allowed right now, I think. anything else will crash) <clip> mstop and tlstop are optional, but one of the two must be specified.  If one is left out, it assumes a normal rate of speed for playback. <group Name="Project X"/> This will cause the switcher for that group to be named that name, so you can do a FindFileByName in the filter graph to get the switcher for that group (each group uses a big switcher).  Then getting the first output pin of that filter will give you the main output stream of that group.  This is for simplicity. <group PreviewMode="0"> Normally, if you are previewing your project, and your effects and transitions are slow, so the project cannot keep up in real time, frames will be dropped to keep synchronization good (making the video look choppy).  (When writing to a file, frames will never be dropped).  If you force PreviewMode=0, then you will never drop frames, even when previewing to the screen, so you may see the video play very slowly out of sync with the audio.   Only slow effects and transitions are skipped in preview mode, if you have a slow decompressor, or data is coming over a slow network connection, frames will not be able to be dropped. <clip clsid="{xxx-xxx....}"/> Instead of using the default file source filter based on the filename you give, this will instantiate a particular source filter.  If you still give a filename using src="foo.ext", it will pass that filename to the filter using IFileSourceFilter. <clip category="{xxx-xxx...}" instance="USB Camera #1"/> This will choose a source filter by looking in filter category {xxx-xxx...} (for instance, the VideoCapture Filters category... default is the regular DShow Filters category) and use the source filter with the given friendly name given by "instance".  If no "instance" is given, the first filter in the category is used. mute="1" Any object can be muted.  This will turn that element and all of its children off (ie. all of the clips and effects and transitions of a track will be turned off when the track is turned off).  CURRENT LIMITATIONS: only audio and video types are supported only video supports transitions... there is always a default audio transition to mix all overlapping audio Video effects and transitions must be DirectX Transforms Audio effects can be any direct show filter There is a special volume changing audio effect that is directly supported by Dexter Example 1: This is the simplest possible project that simply plays 10 seconds of an avi file (the 10 seconds from 30 to 40 seconds into the movie) with accompanying audio. The audio will be at half volume. (Two streams are generated, one for each group).  You can have more than one group with each type of media, for instance to author an ASF file with mutliple video streams, but typically you will want one group of each type. In this example, the video is 640x480 24bit RGB at 7.5 frames per second, and the audio is 48kHz.  Also note that mstop is left out from the video clip and tlstop is left out from the audio clip, since they can be computed using the other numbers and assuming normal rate playback. <timeline>     <group type="video" FrameRate="7.5" Width="640" Height="480" BitDepth="24">         <track>             <clip src="c:\foo.avi" tlstart="0" tlstop="10" mstart="30" />         </track>     </group>     <group type="audio" SamplingRate="48000">         <track>             <clip src="c:\foo.avi" tlstart="0" mstart="30" mstop="40" > <param name="vol" value=".5"/>             </clip>         </track>     </group> </timeline> Example 2: This plays the video and audio at half speed (20 seconds of source material have 40 seconds in which to play) <timeline>     <group type="video">         <track>             <clip src="c:\foo.avi" tlstart="0" tlstop="40" mstart="30" mstop="50" />         </track>     </group>     <group type="audio">         <track>             <clip src="c:\foo.avi" tlstart="0" tlstop="40" mstart="30" mstop="50" />         </track>     </group> </timeline> Example 3: This plays three 10 second clips of video back to back, with 1 second of black space between each clip.  Remember, a track can have multiple clips on it, as long as the clips don't overlap.  The first clip plays normally.  The second clip show a single still frame from that video for 10 seconds, and the third clip is a JPEG compressed bitmap displayed for 10 seconds. <timeline>     <group type="video">         <track>             <clip src="c:\foo.avi" tlstart="0" tlstop="10" mstart="30" mstop="40" />             <clip src="c:\bar.avi" tlstart="11" tlstop="21" mstart="15" mstop="15" />            <clip src="c:\blah.jpg" tlstart="22" tlstop="32" />         </track>     </group> </timeline> Example 4: This is the same as example 3, except that the first 5 seconds of clip#2 will be upside down.  If you changed Mute to 1, it would no longer be upside down, as that effect would not really be there. <timeline>     <group type="video">         <track>             <clip src="c:\foo.avi" tlstart="0" tlstop="10" mstart="30" mstop="40" />             <clip src="c:\bar.avi" tlstart="11" tlstop="21" mstart="15" mstop="15" > <effect clsid="{B05A941C-3CE1-11D2-952A-00C04FA34F05}" start="11" stop="16" Mute="0"/>            </clip>            <clip src="c:\blah.jpg" tlstart="22" tlstop="32" />         </track>     </group> </timeline> Example 5:  This is the same as #3, except that all three clips will be upside down, since the effect is on the whole track, and not just an individual clip <timeline>     <group type="video">         <track>             <clip src="c:\foo.avi" tlstart="0" tlstop="10" mstart="30" mstop="40" />             <clip src="c:\bar.avi" tlstart="11" tlstop="21" mstart="15" mstop="15" />             <clip src="c:\blah.jpg" tlstart="22" tlstop="32" />             <effect clsid="{B05A941C-3CE1-11D2-952A-00C04FA34F05}" start="0" stop="32" />         </track>     </group> </timeline> Example 6:  This project has two tracks.  Whenever tracks overlap, the track specified last has priority, so in this case, bar.mpg will be seen for the first 10 seconds, and after that, the last 2 seconds of foo.mpg.  <timeline>     <group type="video">         <track>             <clip src="c:\foo.mpg" tlstart="0" tlstop="12" mstart="30" mstop="42" />         </track>         <track>             <clip src="c:\bar.mpg" tlstart="0" tlstop="10" mstart="12" mstop="22" />         </track>     </group> </timeline> Example 7:  In this example, you will see the 2 clips in track 2 play, and in the 1 second gap between them, you will see the clip from the first track peek through. <timeline>     <group type="video">         <track>             <clip src="c:\foo.avi" tlstart="0" tlstop="20" mstart="30" mstop="50" />         </track>         <track>             <clip src="c:\bar.mpg" tlstart="0" tlstop="10" mstart="12" mstop="22" />             <clip src="c:\blah.mov" tlstart="11" tlstop="20" mstart="12" mstop="21" />         </track>     </group> </timeline> Example 8:  Now there is a transition specified during the overlapping period of 2 tracks, so you will see the first clip fade to the second clip.   You will also hear the audio tracks mixed during the overlapping period. <timeline>     <group type="video">         <track>             <clip src="c:\foo.avi" tlstart="0" tlstop="10" mstart="30" mstop="40" />         </track>         <track>             <clip src="c:\bar.mpg" tlstart="7" tlstop="15" mstart="12" mstop="20" />             <transition clsid="{2A54C913-07AA-11D2-8D6D-00C04F8EF8E0}" start="7" stop="10" />         </track>     </group>     <group type="audio">         <track>             <clip src="c:\foo.avi" tlstart="0" tlstop="10" mstart="30" mstop="40" />         </track>         <track>             <clip src="c:\bar.mpg" tlstart="7" tlstop="15" mstart="12" mstop="20" />         </track>     </group> </timeline> Example 9:  Here you will see the first clip fade to the second clip, and then fade back to the first clip (by swapping the inputs of the last transition) <timeline>     <group type="video">         <track>             <clip src="c:\foo.avi" tlstart="0" tlstop="20" mstart="30" mstop="50" />         </track>         <track>             <clip src="c:\bar.mpg" tlstart="5" tlstop="15" mstart="12" mstop="22" />             <transition clsid="{2A54C913-07AA-11D2-8D6D-00C04F8EF8E0}" start="5" stop="8" />             <transition clsid="{2A54C913-07AA-11D2-8D6D-00C04F8EF8E0}" start="12" stop="15" SwapInputs="1" />          </track>     </group> </timeline> Example 10:  An example of compositions.  Here you will see example 9 fade into example 5, with each example treated as if it was a track.  You'll see example 9 from 0 to 15 seconds, then a fade for 5 seconds, and after 20 seconds, you'll see only example 5.   This is an example of a transition being on a composition. <timeline>     <group type="video">       <composition>         <track>             <clip src="c:\foo.avi" tlstart="0" tlstop="20" mstart="30" mstop="50" />         </track>         <track>             <clip src="c:\bar.mpg" tlstart="5" tlstop="15" mstart="12" mstop="22" />             <transition clsid="{2A54C913-07AA-11D2-8D6D-00C04F8EF8E0}" start="5" stop="8" />             <transition clsid="{2A54C913-07AA-11D2-8D6D-00C04F8EF8E0}" start="12" stop="15" SwapInputs="1" />          </track>       </composition>       <composition>         <track>             <clip src="c:\foo.avi" tlstart="0" tlstop="10" mstart="30" mstop="40" />             <clip src="c:\bar.avi" tlstart="11" tlstop="21" mstart="15" mstop="15" />             <clip src="c:\blah.avi" tlstart="22" tlstop="32" mstart="12" mstop="32" />             <effect clsid="{B05A941C-3CE1-11D2-952A-00C04FA34F05}" start="0" stop="32" />         </track>         <transition clsid="{2A54C913-07AA-11D2-8D6D-00C04F8EF8E0}" start="15" stop="20" />       </composition>     </group> </timeline> Example 11:  Here, you will see a dib sequence play.  The dib sequence is stated as being a 15fps sequence, so 15 pictures played within a one second duration would look normal.    In this case, the final project is an 8 frame per second project, so basically, every other jpg file in the sequence will be played at 8 fps as a result of this project (which will only last one second).  Also, the pictures will not be stretched normally to the group size,  an aspect ratio preserving stretch will be made. <timeline>     <group type="video"    Width="640" Height="480" FrameRate="8" >         <track>             <clip src="c:\ski001.jpg" tlstart="0" tlstop="1" FrameRate="15" StretchMode="PreserveAspectRatio" />         </track>     </group> </timeline> Congratulations.  Now you understand XML. The chapters after this one might contain WAY more detail than you care to read.  They were mostly written in case I die, so someone will be able to figure out how it all works.   If you want more intimite detail about how Dexter works, you can read on. 3.  The Filter Collection Video, audio and other data can come from any source.  Any DShow stream can be used as input.   MPEG, QuickTime,  and AVI files of different sizes, frame rates and compression types can be mixed at will.  There are no limitations.  Every stream is converted to be the same format before the pieces are editing together and mixed.  For video, everything is the same bit depth, frame rate, and frame size.  For audio, it is the same sampling rate, channels, and bit count.  All of the inputs go into a big switcher, whose outputs are connected to various special effect, or mixer filters (for video and audio), which are re-routed back into the mixer.   The last output of the mixer is connected to some rendering filters, to preview or write the result to a file.  So the special filters that are used to make an editing graph are:  1) GENERATE BLACK VIDEO - for when you want black in your presentation 2) GENERATE STILL VIDEO - for putting still images in your presentation 3) SILENCE - for when there is no audio in a portion of your presentation 4) STRETCH VIDEO - to resize video 5) FRAME RATE CONVERTER - to correct the frame rate of a video 6) AUDIO REPACKER - to break the audio stream into equal size packets 7) BIG SWITCH - the brains 8) DIRECTX TRANSFORM WRAPPER - hosts one or more DirectX Transforms for video effects 9) AUDIO MIXER - mixes several audio streams For example, in a video editing project, each source file being used would be a graph looking like this, whose output would go into one of the inputs of the big switch.  The first three filters, you are familiar with. The STRETCH VIDEO filter is programmed with the interface IResize (which sets the media type to accept, for instance, RGB32, and the size to resize to, for instance, 320x240).  There is also a property page you can use from graphedit instead of programming the filter, which can set the output size.  If you use the property page and do not program the filter, it will only accept RGB32. The FRAME RATE CONVERTER filter is programmed with the interface IFrmRateConverter.  This sets the output frame rate to generate, as well as the media start/stop times and the skew.  What are those?  Let's say for the first 10 seconds of your presention, you want to see the portion of this file from 30 to 40 seconds.  The media start and stop times will be 30 and 40 seconds, since that is the piece of this video you are interested in.  The skew is the offset to add to the media start time to get the project time.  In this case, this piece of video starts at the beginning of the project, or time 0, so the skew is -30.   You should always have a frame rate converter in this stream, even if the original source video is already the correct frame rate.  There may be errors or mistakes in the stream, and the frame rate converter will correct them. embed Paint.Picture  An audio source stream would look like this:  There may be one or more ACM converters to decompress the audio stream and convert it to a given format.  The AUDIO REPACKER will break all the audio streams up into equal size packets, say 1/30 of a second.  This is programmable through the IAudRepack interface.  Like the frame rate converter for video streams, every audio stream must have an audio repacker to pack the audio streams all the same way. embed Paint.Picture  If you are using black video as a source, or silence, the stream would consist only of that one filter.  It will produce the data at the correct format without needing any other filters.  BLACK supports the IGenVideo interface on its output pin, and SILENCE supports the ISilence interface on its output pin.  You can set the output format, frame/sample rate, and start time and duration with this interface.  This way you do not need a frame rate or sample rate converter.  For instance, if you need black video from 20 to 30 seconds in your presentation, you would set a start time of 20 and a duration of 10 seconds. If you are using a still image as a source, that image will be repeated over and over at a certain frame rate.    BMP, JPG and GIFs are supported at the moment.  You may still need a STRETCH VIDEO filter to resize it.  STILL VIDEO supports IGenVideo on its output pin, and you can set the frame rate, start time and duration.  You can also give it your own raw bits to produce, instead of a file name. You can also get video or audio from any other source in DShow.  Just remember to convert it to the proper uncompressed format, and frame rate convert the video or repack the audio. The BIG SWITCH The big switch supports the interface IBigSwitch. With this interface, you set the media type for the connections, the frame rate it will receive (the same frame rate all the frame rate converters are set to), the project duration, the number of inputs and outputs, and most importantly you program the switch matrix. Let's start with a simple example.  We want to play 10 seconds of video from stream 1, and then cut to 10 seconds of video from stream 2.  Here is a picture: embed Paint.Picture  The project length is 20 seconds. Input pin 0 would be programmed like this:   At time 0, connect to output 0.  At time 10, connect nowhere. Input pin 1 would be programmed like this:   At time 10, connect to output 0.  At time 20, connect nowhere. The DIRECTX TRANSFORM WRAPPER The DirectX Transform wrapper filter supports the IAMMixEffect interface.  You can program it to know what media type to accept, how many inputs (1 or 2) and queue up a bunch of effects.  Each effect has a lifetime... for instance the wrapper might act as a wipe from 0 to 10 seconds, and as a dissolve from 10 to 20 seconds.  Within the lifetime, each effect has an active period.  For instance, the wipe may be active from 4 to 6 seconds, and the dissolve may be active from 11 to 14 seconds.   For a one input effect, before the active time, no processing will be done.  During the active period, either a fixed amount of processing will be done, or a variable amount, changing throughout the active period (arbitrarily and user-settable).  After the active period, no processing will be done.   For a two input effect, before the active time, the first input will be presented.  During the active time, the transition between the first and second inputs will either be a fixed amount, or arbitrarily variable.  After the active time, the second input will be presented. The Big Switch and the DirectX Transform Wrapper do not have property pages, and cannot be played with in graphedit since there is no way to call the interfaces to program them.  You will need to compile them specially to create a switch or fx wrapper to suit your purpose.  (The switch is located in filterus\dexter\switch.  The DXT wrapper is found in filterus\dexter\dxt\dxtwrap).  You will find code in these filters inside #IFDEF TEST that you can change to suit your needs, and then you will be able to make editing graphs using graphedit.  When you save an editing graph, it will remember all of the settings of every filter when it is re-loaded. Here is a more complicated example of a video editing project, using transitions and effects. Our project will be 10 seconds long.  Clip A lasts from 0 to 6 seconds.  Clip B lasts from 4 to 10 seconds.  Clip A is the 6 second portion of "foo.avi" from 20 to 26 seconds.  Clip B is the 6 second portion of "bar.avi" from 13 to 19 seconds.  Where Clip A and B overlap, there will be a wipe effect, with B coming in from the left.   This entire project will be fading in from black, with black only at 0 seconds, and finally the full video showing at 10 seconds.  Also, the middle 4 seconds of Clip A (from 1 to 5 seconds) will have a black and white effect on it (only the first and last second will be in the original colour).  Thus Clip A will switch from B&W to colour in the middle of the wipe. This is the graph that will do this task. embed Paint.Picture  NOTE:  The real switcher has output#0 as the main stream output, in this example it is the last output pin that is the main stream output.  In real life, though, it is always pin #0. There are probably many ways to program this graph.  I will demonstrate 2 of them METHOD 1 - All relevant filters are programmed to accept RGB32, and to output 15fps (or whatever you'd like) - BLACK source is set to output 10 seconds of black, starting at time 0 - CLIP A's frame rate converter has MediaStart=20, MediaStop=26, Skew=-20 - CLIP B's frame rate converter has MediaStart=13, MediaStop=19, Skew = -3 - DXT Wrapper 1 has lifetime 1 to 5, active time 1 to 5, the B&W effect is chosen (set to always be full B&W during the active period) - DXT Wrapper 2 has lifetime 4 to 6, active time 4 to 6, the WIPE transition is chosen (set to vary linearly between A and B) - DXT Wrapper 3 has lifetime 0 to 10, active time 0 to 10, the DISSOLVE transition is chosen (set to vary linearly between A and B) - Switch input 0 is programmed as follows:  at time 0 output to 3.  at time 10 no output - Switch input 1:  at time 0 output to 4.  at time 1 output to 0, at time 5 output to 1, at time 6 no output - Switch input 2:  at time 4 output to 2, at time 6 output to 4, at time 10 no output - Switch input 3:  at time 1 output to 4, at time 4 output to 1, at time 5 no output - Switch input 4:  at time 4 output to 4, at time 6 no output - Switch input 5:  at time 0, output to 5, at time 10 no output METHOD 2 - All relevant filters are programmed to accept RGB32, and to output 15fps (or whatever you'd like) - BLACK source is set to output 10 seconds of black, starting at time 0 - CLIP A's frame rate converter has MediaStart=20, MediaStop=26, Skew=-20 - CLIP B's frame rate converter has MediaStart=13, MediaStop=19, Skew = -3 - DXT Wrapper 1 has lifetime 0 to 6, active time 1 to 5, the B&W effect is chosen (set to always be full B&W during the active period) - DXT Wrapper 2 has lifetime 0 to 10, active time 4 to 6, the WIPE transition is chosen (set to vary linearly between A and B) - DXT Wrapper 3 has lifetime 0 to 10, active time 0 to 10, the DISSOLVE transition is chosen (set to vary linearly between A and B) - Switch input 0 is programmed as follows:  at time 0 output to 3.  at time 10 no output - Switch input 1:  at time 0 output to 0.  at time 6 no output - Switch input 2:  at time 4 output to 2, at time 10 no output - Switch input 3:  at time 0 output to 1, at time 6 no output - Switch input 4:  at time 0 output to 4, at time 10 no output - Switch input 5:  at time 0, output to 5, at time 10 no output Study these examples carefully. (!!!!!!) Audio examples using the mixer and repacker will be given when it works. COMPILING DEXTER If you are able to build any part of DirectShow, you can build Dexter.  You will need the NT build environment set up, and to be enlisted in the DShow tree. 1.  "iebuild" in the private\dxmdev\dshowdev directory of the NT build environment 2.  "iebuild" in the makesdk directory of the quartz tree 3.  "iebuild" in the sdl\classes\base directory of the quartz tree 4.  "iebuild" in the filterus\dexter directory of the quartz tree.  This contains all of the dexter code 5.  "iebuild" in the compdlls\qedit directory of the quartz tree.  This will create qedit.dll in libd\i386 (a debug version) 6.  "regsvr32" qedit.dll on a machine to install it.  You will need msvcrtd.dll (the debug c runtime) in order to use the debug dexter. If you wish to write programs using the dexter filters and interfaces, you will need to include the qedit_i.c file (created when you compiled filterus\dexter\idl) in your program, and link with ?????  (!!! how does this work???) 4. The Timeline Database The following interfaces are available for an application to describe an editing project:  IAMTimeline, IAMTimelineObj, IAMTimelineTrack, IAMTimelineSrc, IAMTimelineEffect, IAMTimelineTrans, IAMTimelineComp, IAMTimelineEffectable, IAMTimelineTransable,  IAMTimelineNode, IAMTimelineXFade, and finally IAMTimelineHelper which is even higher level to help you do common tasks. (!!!)  Eric can put more detail here about using these APIs.  For now, read the interface descriptions in the idl file (start with the high level IAMTimelineHelper) and look at the XML reader code that uses these APIs to see how it's done.  \filterus\dexter\test\xmltl. 5.  The Render Engine The render engine reads the timeline database and builds a filtergraph to execute the project.  It supports IRenderEngine, and you basically tell it what timeline you are using, and it can build a graph for you.  You can set the output frame rate and size for video streams, or output format for audio streams.  It also tells you all of the outputs of the graph (for instance maybe your project produces 1 video stream and 2 audio streams, by having 3 top level compositions in the timeline).   You will be able to render these outputs, perhaps much like the capture graph builder, and send the output to be previewed, or to be written to a file, or transmitted somewhere, using any DShow rendering filters available. (!!!) Eric can put more detail here, there are other things it can do.  See the idl file for more details.  Not everything is implemented yet. 6.  Testing tools After reading this document, you can learn the details of the interfaces by reading our idl file, in filterus\dexter\idl\qedit.idl. There is a tool to take a text file with extended XML and execute that project by building a timeline, and calling the render engine.  It is found in filterus\dexter\test\xmltl.  This is described in chapter 2.   We also have a VB app (!!! NOT CHECKED IN YET!)  which has a crude user interface you can use to build editing projects.  This will be improved as time goes by. Testing this project will involve the following: 1)  Using the XML text file tool to create projects 2) Using the VB app 3) Making projects in Graphedit, which will involve custom compiles of the switcher and DXT wrapper at this point. 4.  Writing applications to test the timeline and render engine APIs to do specific editing projects. (Be creative!  There are unlimited possibilities.) 5.  Writing applications to build filtergraphs directly to perform editing tasks without using the timeline or render engine APIs (such as the examples in section 2).  This is less important than #4. Please see DannyMi with any questions.   This is a fun and exciting project, and I hope everyone that becomes involved will really enjoy their time spent with it. jKy|: jGy|:
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\shotb\shotb.txt ===
#include "stdafx.h"
#include "ishotb.h"

CShotBoundaryFilter::CShotBoundaryFilter( TCHAR *tszName, IUnknown * pUnk, HRESULT * pHr )
    : CTransInPlaceFilter( tszName, pUnk, CLSID_ShotBoundaryDet, pHr )
    , m_pPrevBuff( NULL )
    , m_pCurrBuff( NULL )
    , m_pYUVBuff( NULL )
{ 
	SetBins( 256, 256, 256 );
	SetParameters( 5.0, 10.0 );
}

CShotBoundaryFilter::~CShotBoundaryFilter( )
{
    if( m_pPrevBuff )
    {
        delete [] m_pPrevBuff;
    }
    if( m_pCurrBuff )
    {
        delete [] m_pCurrBuff;
    }
    if( m_pYUVBuff )
    {
        delete [] m_pYUVBuff;
    }
}

HRESULT CShotBoundaryFilter::NonDelegatingQueryInterface( REFIID riid, void ** ppv )
{
    if( riid == IID_IShotBoundaryDet )
    {
        return GetInterface( (IShotBoundaryDet*) this, ppv );
    }
    return CTransInPlaceFilter::NonDelegatingQueryInterface( riid, ppv );
}

HRESULT CShotBoundaryFilter::CheckInputType( const CMediaType * pType )
{
    if( *pType->Type( ) != MEDIATYPE_Video )
    {
        return VFW_E_INVALIDMEDIATYPE;
    }

    if( *pType->Subtype( ) != MEDIASUBTYPE_RGB24 )
    {
        return VFW_E_INVALIDMEDIATYPE;
    }

    // make sure it's a video info header
    //
    if( *(pType->FormatType( )) != FORMAT_VideoInfo )
    {
        return VFW_E_INVALIDMEDIATYPE;
    }

    VIDEOINFOHEADER * vih = (VIDEOINFOHEADER*) pType->Format( );
    if( vih->bmiHeader.biBitCount != 24 )
    {
        return VFW_E_INVALIDMEDIATYPE;
    }

    return NOERROR;
}

HRESULT CShotBoundaryFilter::SetMediaType( PIN_DIRECTION Dir, const CMediaType * pType )
{
    if( Dir != PINDIR_INPUT )
    {
        return NOERROR;
    }

    VIDEOINFOHEADER * vih = (VIDEOINFOHEADER*) pType->Format( );
    long Width = vih->bmiHeader.biWidth;
    long Height = vih->bmiHeader.biHeight;
    long Size = Width * Height * 3;
    m_nWidth = Width;
    m_nHeight = Height;
    
    if( m_pPrevBuff )
    {
        delete [] m_pPrevBuff;
    }
    if( m_pCurrBuff )
    {
        delete [] m_pCurrBuff;
    }
    if( m_pYUVBuff )
    {
        delete [] m_pYUVBuff;
    }

    m_pPrevBuff = new BYTE[ Size ];
    m_pCurrBuff = new BYTE[ Size];
    m_pYUVBuff = new __int16[ Size ];

    SetDimension( Width, Height );
    SetInputs( m_pPrevBuff, m_pCurrBuff );

    return NOERROR;
}

HRESULT CShotBoundaryFilter::Transform( IMediaSample * pSample )
{
    BYTE * pBuffer = NULL;
    pSample->GetPointer( &pBuffer );

    // convert the RGB to YUV
    //
    for( long s = 0 ; s < m_nWidth * m_nHeight ; s++ )
    {
        double Red = *pBuffer++;
        double Green = *pBuffer++;
        double Blue = *pBuffer++;
        BYTE Y = 0.299*Red+0.587*Green+0.114*Blue;
        BYTE U = -0.147*Red-0.289*Green+0.436*Blue;
        BYTE V = 0.615*Red-0.515*Green-0.100*Blue;
        Y = Y & 0xF0;
        U = U & 0xC0;
        U = U / 16;
        V = V & 0xC0;
        V = V / 64;
        *( m_pYUVBuff + s ) = Y + U + V;
    }

    SetInput( (BYTE*) m_pYUVBuff );

    BOOL Boundary = GetDecision( );

    return NOERROR;
}

#if 0
Table of contents 
Purpose of this FAQ 
Some definitions 
How to store the colors of a picture? 
Bitmapped pictures vs. vectorial pictures 
The color look-up table (LUT) 
What is this gamma component? 
White points 
How to measure display gamma? 
Gamma measurement, the easy way 
Gamma measurement, the hard way 
The transfer function 
Color space conversions 
RGB, CMY, and CMYK 
HSI, HSL, HSV, and related color spaces 
CIE XYZ 
CIE Luv and CIE Lab 
LCH and CIE LSH 
YUV, YIQ, and YCbCr 
SMPTE-C RGB 
SMPTE-240M YPbPr (HD televisions) 
Xerox Corporation YES 
Kodak Photo CD YCC 
Color quantizations 
Full color space to color look-up table 
Color look-up table to a gray scales 
Gray scales to black and white 
References 
Comments and thanks 
Contents 
1 - Purpose of this FAQ 
I did a (too) long period of research in the video domain (video cards, image file formats, and so on) and I've decided to provide to all people who need some informations about that. ;-) I aim to cover a part of the Frequently Asked Questions (FAQ) in the video works, it means to provide some (useful?) informations about the colors, and more especially about color spaces. If you have some informations to ask/add to this document, please read section 11. 

2 - Some definitions 
Color is defined as an experience in human perception. In physics terms, a color is the result of an observed light on the retina of the eye. The light must have a wavelength in the range of 400 to 700 nm. The radient flux of observed light at each wavelength in the visible spectrum is associated to a Spectral Power Distribution (SPD). A SPD is created by cascading the SPD of the light source with the Spectral Reflectance of the object in the scene. In addition the optics of any imaging device will have an effect. Strictly though, color is a visual sensation, so a `color' is created when we observe a specific SPD. We see color by means of cones in the retina. There are three types of cones sensitive to wavelengths that approximately correspond to red, green and blue lights. Together with information from rod cells (which are not sensitive to color) the cone information is encoded and sent to higher brain centres along the optic nerve. The encoding, known as opponent process theory, consists of three opponent channels, these are: 

	Red     -       Green
	Blue    -       Yellow
	Black   -       White

Note: Actually, recent studies show that eyes use addtionnal cone types. (cf. "La Recherche", n.272, january, 1995) 
This is different to tri-chromatic theory (e.g. Red, Green, Blue additive color) which you may be used to, but when we describe colors we do not say "it is a reddy green" or "that's a bluey yellow". Perceptually we require three attributes to describe a color. Generally any three will do, but there need's to be three. 

For human purpose color descriptions these attributes have been made by the CIE recommendations. (CIE is a French acronym for Commission Internationale de l'Eclairage.) The recommendations of the CIE are as follows: 

Brightness. 
The attribute of a visual sensation according to which an area appears to exhibit more or less light. [You can blurry or enhance an image by modifying this attribute.] 
Hue. 
The attribute of a visual sensation according to which an area appears to be similar to one, or to proportions of two, of the perceived colors red, yellow, green and blue. 
Colorfulness. 
The attribute of a visual sensation according to which an area appears to exhibit more or less of its hue. [You can go from a sky blue to a deep blue by changing this attribute.] 
So, a color is a visual sensation produced by a stimulus which is a specific SPD. It should be noted however, that two different SPD's may produce the same visual sensation - an effect known as metarmerism. 

What is a color space? 

A color space is a method by which we can specify, create and visualise color. As human's, we may define a color by its attributes of brightness, hue and colorfulness. A computer will define a color in terms of the excitations of red, green and blue phosphors on the CRT faceplate. A printing press defines a color in terms of the reflectance and absorbance of cyan, magenta, yellow and black inks on the paper. 

If we imagine that each of the three attributes used to describe a color are axes in a three dimensional space then this defines a color space. The colors that we can percieve can be represented by the CIE system, other color spaces are subsets of this perceptual space. For instance RGB color space, as used by television displays, can be visualised as a cube with red, green and blue axes. This cube lies within our perceptual space, since the RGB space is smaller and represents less colors than we can see. CMY space would be represented by a second cube, with a different orientation and a different position within the perceptual space. 

So, a color space is a mathematical representation of our perceptions. It's useful to think so because computers are in fond of numbers and equations... 

Why is there more than one color space? 

Different color spaces are better for different applications, some equipment has limiting factors that dictate the size and type of color space that can be used. Some color spaces are perceptually linear, i.e. a 10 unit change in stimulus will produce the same change in perception wherever it is applied. Many color spaces, particularly in computer graphics are not linear in this way. Some color spaces are intuitive to use, i.e. it is easy for the user to navigate within them and creating desired colors is relativly easy. Finally, some color spaces are device dependent while others are not (so called device independent). 

What's the difference between device dependent and device independent? 

A device dependent color space is a color space where the color produced depends on the equipment and the set-up used to produce it. For example the color produced using pixel values of [rgb = 250,134,67] will alter as you change the brightness and contrast on your display. In the same way if you change your monitor the red, green and blue phosphors will have slightly different SPD's and the color produced will change. Thus RGB is a color space that is dependent on the system being used, it is device dependent. A device independent color space is one where the coordinates used to specify the color will produce the same color wherever they are applied. An example of a device independent color space (if it has been implemented properly) is the CIE L*a*b* color space (known as CIELab). This is based on the HVS (Hue/Value/Saturation) as described by the CIE system (see below to know what CIE stands for). 

Another way of looking a device dependancy is to imagine our RGB cube within our perceptual color space. We define a color by the values on the three axes. However the exact color will depend on the position of the cube within the perceptual color space. Move the cube (by changing the set-up) and the color will change even if the RGB values remain the same. Some device dependent color spaces have their position within CIE space defined These are known as device callibrated color spaces and are a kind of half way house between dependent and independent color spaces. For example, a graphics file that contains colorimetric information, i.e. the white point, transfer functions, and phosphor chromaticities, would enable device dependent RGB data to be modified for whatever device was being used - i.e. callibrated to specific devices. In other words, if you have a device independent color space, you must adapt your device as defined in the color space and not the color space to the device. 

What is a color gamut? 

A color gamut is the boundary of the color space. Gamut's are best shown and evaluated using the CIE system, a system we will see later and in section 8.3. 

What color space should I use? 

That depends on what you want to do, but here is a list of the pros and cons of some of the more common, computer related, color spaces - we will see in section 8 how to convert the (most common) color spaces between themselves and which references to use - : 

RGB (Red Green Blue) 

Additive color system based on trichromatic theory, commonly used by CRT displays where proportions of excitation of red, green and blue emmiting phosphors produce colors when visually fused. Easy to implement, non linear, device dependent, unintuitive, common (used in television cameras, computer graphics, etc). 

CMY(K) (Cyan Magenta Yellow (Black)) 

Subtractive color. Used in printing and photography. Printers often include the fourth component, black ink, to improve the color gamut (by increasing the density range), improving blacks, saving money and speeding drying (less ink to dry). Fairly easy to implement, difficult to transfer *properly* from RGB (simple transforms are, well, simple), device dependent, non-linear, unintuitive. 

HSL (Hue Saturation and Lightness) 

This represents a wealth of similar color spaces, alternatives include HSI (intensity), HSV (value), HCI (chroma/colorfulness/intensity), HVC, TSD (hue saturation and darkness) etc etc. All these color spaces are non-linear transforms from RGB and thus, device dependent, non-linear but very intuitive. In addition the seperation of the luminance component has advantages in image processing and other applications. (But take care, the complete isolation of the separate components will require a space optimised for your device. See later notes on CIE color spaces) 

YIQ, YUV, YCbCr, YCC (Luminance - Chrominance) 

These are the television transmission color spaces (YIQ and YUV analogue (NTSC and PAL) and YCbCr digital). They separate luminance from chrominance (lightness from color) and are useful in compression and image processing applications. YIQ and YUV are, if used according to their relative specifications, linear. They are all device dependent and, unless you are a TV engineer, unintuitive. Kodaks PhotoCD system uses a type of YCC color space, PhotoYCC, which is a device calibrated color space. 

CIE 

What is the CIE System? 

The CIE has defined a system that classifies color according to the HVS (it started producing specifications in 1931). Using this system we can specify any color in terms of its CIE coordinates. 

The CIE system works by weighting the SPD of an object in terms of three color matching functions. These functions are the sensitivities of a standard observer to light of different wavelengths. The weighting is performed over the visual spectrum, from around 360nm to 830nm in 1nm intervals. However, the illuminant, lighting, and viewing geometry are carefully defined. This process produces three CIE tri-stimulus values, XYZ, which describe the color. 

There are many measures that can be derived from the tri-stimulus values, these include chromaticity coordinates and color spaces. 

There are two CIE based color spaces, CIELuv and CIELab. They are near linear (as close as any color space is expected to sensibly get), device independent (unless your in the habit of swapping your eye balls with aliens), but not very intuitive to use. 

From CIELuv you can derive CIELhs or CIELhc where h is the hue (an angle), s the saturation and c the chroma. CIELuv has an associated chromaticity diagram, a two dimensional chart which makes additive color mixing very easy to visualise, hence CIELuv is widely used in additive color applications, like television. CIELab has no associated two dimensional chromaticity diagram and no correlate of saturation so only Lhc can be used. 

Since there is such a wide variet of color spaces, it is useful to understand a bit more about them and how to convert between them. 

The color space conversions are essentially provided for programers. If you are a specialist then skip to the references in section 10. Many of the conversions are based on linear matrix transforms. (Was it Jim Blinn who said that any problem in computer graphics can be solved by a matrix transform ?). As an example: 

RGB -> CIE XYZrec601-1 (D65) provides the following matrix of numbers (see section 8.3): 

    |  0.607   0.174   0.200 |
    |  0.299   0.587   0.114 |
    |  0.000   0.066   1.111 |

and CIE XYZrec601-1 (D65) -> RGB provides the following matrix: 
    |  1.910  -0.532 -0.288 |
    | -0.985   1.999 -0.028 |
    |  0.058  -0.118 -0.898 |

These two matrices are the (approximate) inversion of each other. If you are a beginner in this mathematical stuff, skip the previous explainations, and just use the results of sections... 
Other definitions. 


    Photometric terms:  illuminance   - luminous flux per unit area incident on
					a surface
			luminance     - luminous flux per unit solid angle and
					per unit projected area, in a given
					direction, at a point on a surface.
			luminous flux - radient flux weighted by the V(landa)
					function.
					I.e. weighted by the eye's sensitivity.
			luminosity    - ability to appear luminous
			radient flux  - total power / energy of the incident
					radiation.

    Other terms:        brightness    - the human sensation by which an area
					exhibits more or less light.
			lightness     - the sensation of an area's brightness
					relative to a reference white in the
					scene.
			luma          - Luminance component corrected by a gamma
					function and often noted Y'. See section
					4 about gamma and section 8.3 about Y.
			chroma        - the colorfulness of an area relative to
					the brightness of a reference white.
			saturation    - the colorfulness of an area relative to
					its brightness. 

Note: This list is not exhaustive, some terms have alternative meanings but we assume these to be the fundamentals. 

3 - How to store the colors of a picture? 
All the pictures need color information to make sense. Furthermore, all pictures don't use the full color space. We will see now how colors of a picture are stored in video cards and graphics files. I won't describe any image file formats. This is the comp.graphics FAQ purpose stored on rtfm.mit.edu:/pub/usenet/news.answers/graphics/faq maintened by John T. Grieggs (grieggs@netcom.com). 
3.1 - Bitmapped pictures vs. vectorial pictures 
You can consider a picture either as a painting or as a 2D/3D modelling. In the first case, your picture is stored as a scannerised picture, it means a serie of lines where each line contains a serie of points. Each point is called pixel (picture screen element) for a screen display, and pel (print element) for a printer. Being that computers store the color information associated to each point as a binary sequence, the full picture is called bit-mapp (or bit-mapped) picture. In the second case, you can describe each element of your picture as points, lines, filled or empty circles, filled or empty polygons, and so on. In this case the picture can be considered as a 2D or a 3D description and is stored as a vectorial picture. 

What are the advantages and disadvantages to use one description rather than the other? 

With a bitmapped description, the data can be stored as in the video RAM. Loading and saving a picture is easy and fast. However if you enlarge your picture, you will see big squares, and at the opposite, if you reduce your picture, you will lose some informations beacuse some pixels will disappear. Furthermore, a big bitmapped picture will take a lot of room in memory. With a vectorial description, each time you load your picture you must compute the rendering because most of video cards only use bitmapped description. On the other hand, a vectorial picture take almost no room and a it can be enlarged or reduced without loss of information. 

3.2 - The color look-up table (LUT) 
When you write on a paper, you choose a black, blue, or any other pencil. Of course, for a computer black, blue, and so, don't mean anything, and you must come back to numbers. Because of an historical evolution, there are two kinds of possibilities to encode numbers to get colors. 

Firstly: video cards had what we could name a palette of colors. If we take as reference our pencils, we can match the black pencil as number 1, the blue pencil as number 2, and so on. In video system, we have an additional color, the color of the paper (or background) numbered as pencil 0. With a monochrome adapter, you just have two possibilities 0 and 1, and with a 4-color adapter, you have four pencils 0, 1, 2, and 3. As you see, a pixel is referenced in the video RAM, so that you can modify it. The array is the palette and in video RAM all pixels specify an index value into this palette. This is why we call this a color look-up table encoding. Of course, in the array, the colors can be specified with any kind of color space. Actually, being that most of CRTs is a plate of luminophors with three kinds of phosphors, i.e. Red, Green, and Blue, the array contains a long serie of RGB values. 

    X is the color number	Write X			Palette[X] gives to
          of a pixel     ->	in video RAM	->	the video controller
							the real color to display

Even if you work in monochome, you must distinguish X (the index) and Palette[X] (the color). The main advantage of this system is to allow you good animation effects. For example, if you change a color in the palette you change the color for all pixels with the associated index. Of course, the main disadvantage is the palette size, usually restricted to 2, 4, 16, or 256. 

Secondly: To avoid the last problem, we currently get ride of the palette system to use direct colors. With this specification, all colors are directly stored in video RAM instead of indexes. Of course, animation effects are now impossible but you have more colors on the screen. When you have direct RGB colors such that each channel use 8-bits, you call this a true color system. 

I describe this section as if we were using a bitmapped picture but, actually, we could extend all that to vectorial pictures. 

4 - What is this gamma component? 
Many image processing operations, and also color space transforms that involve device independent color spaces, like the CIE system based ones, must be performed in a linear luminance domain. By this we really mean that the relationship between pixel values specified in software and the luminance of a specific area on the CRT display must be known. CRTs will have a non-linear response. The luminance of a CRT is generally modelled using a power function with an exponent, gamma, somewhere between 2.2 [NTSC and SMPTE specifications] and 2.8 [as given by Hunt and Sproson]. Recent measurements performed at the BBC in the UK (Richard Salmon and Alan Roberts) have shown that the actual value of gamma is very dependent upon the accurate setting of the CRTs black level. For correctly set-up CRTs gamma is 2.35 +/- 0.1. This relationship is given as follows: 

    Luminance = voltage ^ gamma

Where luminance and voltage are normalised. For Liquid Crystal Displays the response is more closely followed by an "S" shaped curve with a vicious hook near black and a slow roll-off near white. 

In order to display image information as linear luminance we need to modify the voltages sent to the CRT. This process stems from television systems where the camera and receiver had different transfer functions (which, unless corrected, would cause problems with tone reproduction). The modification applied is known as gamma correction and is given below: 

    New_Voltage = Old_Voltage ^ (1/gamma)

(Both voltages are normalised and gamma is the value of the exponent of the power function that most closely models the luminance-voltage relationship of the display being used.) 
For a color computer system we can replace the voltages by the pixel values selected, this of course assumes that your graphics card converts digital values to analogue voltages in a linear way. (For precision work you should check this). The color relationships are: 

    Red  = a* (Red' ^gamma) +b
    Green= a* (Green' ^gamma) +b
    Blue = a* (Blue' ^gamma) +b

where Red', Green', and Blue' are the normalised input RGB pixel values and Red, Green, and Blue are the normalised gamma corrected signals sent to the graphics card. The values of the constants a and b componsate for the overall system gain and system offset respectively. (Essentially gain is contrast and offset is intensity.) For basic applications the values of a, b and gamma can be assumed to be consistent between color channels. However for precise applications they must be measured for each channel separatley. Usually, you can just fix up a, b, and gamma to respectively 1, 0, and 2.2. 

It is common to perform gamma correction by calculating the corrected value for each possible input value and storing this in an array as a Look Up Table (see section 3.2). 

Research by Cowan and Post (see references in section 10) has shown that not all CRT displays can be accurately modelled by a simple power relationship. Cowan found errors of up to 100% between measured and calculated values. To prevent this a simple LUT generating gamma correction function cannot be used. The best method is to measure the absolute luminance of the display at various pixel values and to linearily interpolate between them to produce values for the LUT. 

It should be noted at this point that correct gamma correction depends on a number of factors, in addition to the characteristics of the CRT display. These include the gamma of the input device (scanner, video grabber etc), the viewing conditions and target tone reproduction characteristics. In addition linear luminance is not always desirable. For computer generated images a system which is linear with our visual perception may be preferable. If luminance is represented by L then lightness, our visual sensation of an objects brightness relative to a similarly illuminated area that appears white, is given by L: 

    { L=116*((Y/Yn)^(1/3))-16 if Y/Yn>0.008856
    { L=903.3*Y/Yn            if Y/Yn<=0.008856

This relationship is in fact the CIE 1976 Lightness (L*) equation which will be discussed in section 8.4. 
Most un-gamma corrected displays have a near linear L* response, thus for computer generated applications, or applications where pixel values in an image need to be intuitivly changed, this set up may be better. 

Note: Gamma correction performed in integer maths is prone to large quantisation errors. For example, applying a gamma correction of 1/2.2 to an image with an original gamma of one (linear luminance) produced a drop in the number of grey levels from 245 to 196. Take care not to alter the transfer characteristics more than is necessary, if you need to gamma correct images try to keep the originals so that you can pass them on to others without passing on the degradations that you've produced ;-). 

In some image file formats or in graphics applications in general, you need sometimes some other kinds of correction. These corrections provide some specific processings rather than true gamma correction curves. This is often the case, for examples, with the printing devices or in animation. In the first case, it is interesting to specify that a color must be re-affected in order you get a better rendering, as we see it later in CMYK section. In the second case, some animations can need an extra component associated to each pixel. This component can be, for example, used as a transparency mask. We *improperly* call this extra component gamma correction. -> not to to be confused with gamma. 

5 - White points 
In colorimetry, we say that the white point of a system is the color at which all three of the tristimuli (RGB or XYZ etc) are equal to each other. The white point is said to be achromatic in that system, it has no color. The white point color does not have to be perceptually white, it is only the balance color for the system. You can think of the white point as being the color of the illuminant for any scene represented by that system. There is no reason why all color systems should use exactly the same white point. The TV system in Europe uses D65 as its white point (R=G=B=1), while the original NTSC used Illuminant C. Both are equally valid as white points, they are only 10.34 dC* CIELuv units apart (1.5jnd), they are merely the colors for which R=G=B=1 in the TV systems, they owe nothing to basic physics. In the same way, the CIE XYZ system has a white point which is defined as the color of an equal-energy radiator 

6 - How to measure display gamma? 
There are several means to do so. I report here two means used in TV by Alan Roberts and Richard Salmon. You can use two processes to measure gamma, one is quick and dirty, the other is slow and uses some tricky maths to get rid of offsets in both the linear (light) and non-linear (volts) domains. Both methods are standard within the TV industry now, having been adopted by the EBU (European Braodcasting Union) recently following our developement work in this area. 

6.1 - Gamma measurement, the easy way 
This requires that the display has an interlaced raster and uses interlace as a flicker photometer. You create a test picture consisting of two fields. In one field, the lines are peak white or black, alternating down the picture. In the other field, the lines are a mid grey. If the two fields have the same brightness (that is, they don't flicker), then the voltage which drove the CRT to produce the field of mid grey reveals the true value of gamma. The field of black and white lines integrates in the eye to produce precisely half peak brightness, and the voltage which produces the mid grey value which does not flicker must be: 
Vmidgrey =3D 0.5 ^ (1/gamma) 
since:
0.5 ^ gamma =3D Vmidgrey In practice we use a test signal with 10 test patches, calculated to produce zero flicker on CRTs with gammas from 2.0 to 2.9. It is *essential* that the black level of the display is correctly set, because an error of only 2% in drive voltage can change the apparent value of gamma by up to about 0.4, depending on the real value of gamma. To set the black level correctly, we include two test patches in the test signal, one at +2% and one at -2% voltage. We adjust the brightness so that the -2% patch is invisible and the +2% patch is just visible. The resulting value of gamma is accurate to plus or minus 0.1. 

6.2 - Gamma measurement, the hard way 
This can take all day and still not produce an acceptable result, depending on how you do it. But if you do it correctly you can get answers which are consistently accurate to 3 decimal places. The display needs to be highly stable. Generally, Grade 1 broadcast monitors are sufficently stable, but they all cost real money. When we tried to measure our 38" HDTV monitor we failed because it was not stable enough (the monitor cost us =A340,000). 

You use a test signal, which makes peak white in a small patch in the middle of the screen, typically 10% square will do. Use an attenuator to set the signal level and a really accurate calibrated light meter, or a good photomultiplier, to measure the light output over as large a dynamic range as possible. If you then plot the results as LOG Light versus LOG Volts, you might get a straight line, the slope of which gives you gamma. Unfortunately, some errors get in the way and wreck this situation, giving a curved line in the LOG world. We get around this by a subterfuge. Assume that the actual transfer characteristic is: 

    Light =3D a + (Volts - b) ^ gamma
    
where b is the error in setting black level and a is the combined effect of stray light and the error in setting black level. If we differentiate the table of results we get: 
    dLight/dVolts =3D k (Volts - b) ^ (gamma - 1)
    
and a (the stray light etc) has disappeared. So if we plot LOG (dLight/dVolts) versus LOG Volts, the slope is gamma-1 provided that b (black level error) is zero. We use a computer optimisation routine to estimate the value for b such that the line is straight, and an accurate value for gamma drops out of the sums. Similarly, we can do some substitution and plot LOG (dLight/dVolts) versus LOG (Light) and optimise the value for a to find another value for gamma as a cross check. These values are never more than about 0.05 apart, usually much closer. The problem is that it is very difficult to get sufficiently accurate data to do these caluclations, you need values of light intensity to more than 5 significant figures, and that takes some doing. 
7 - The transfer function 
The gamma correcting function is sometime called transfert function when it is applied to convert a picture with regard to the display. Actually, the term of transfert function is more usual with the output devices. When a point is printed, the printed color usually absorbs more external color than our needs. This can be very significant so that the global picture can look murky. Exceptionaly, the picture can appear too light. To correct this problem, we use a correcting function similar to gamma called transfert function. Then the programer can either correctly rule a set of corrections of levels stored in the palette or simplify the problem by applying an exponent correction such as: 

    Corrected tone = Initial tone^Exponent of the gain

Usually, the exponent of the gain is to fix about 1.7. Color space conversions 

8 - Color space conversions 
Except an historical point of view, most of you are - I hope - interested in color spaces to make renderings and, if possible, on your favorite computer. Most of computers display in the RGB color space but you may need sometimes the CMYK color space for printing, the YCbCr or CIE Lab to compress with JPEG scheme, and so on. That is why we are going to see, from here, what are all these color spaces and how to convert them from one to another (and primary from one to RGB and vice-versa, this was my purpose when I started this FAQ). 
I provide the color space conversions for programers. The specialists don't need most of these infos or they can give a glance to all the stuff and read carefully the section 10. Many of the conversions are based on linear functions. The best example is given in section 8.3. These conversions can be seen in matrices. A matrix is in mathematics an array of values. And to go from one to another space color, you just make a matrix inversion. E.g. RGB -> CIE XYZrec601-1 (C illuminant) provides the following matrix of numbers (see section 8.3): 

    |  0.607   0.174   0.200 |
    |  0.299   0.587   0.114 |
    |  0.000   0.066   1.116 |
    
and CIE XYZrec601-1 (C illuminant) -> RGB provides the following matrix: 
    |  1.910  -0.532  -0.288 |
    | -0.985   1.999  -0.028 |
    |  0.058  -0.118   0.898 |
    
You have to ensure that RGB values are related to linear RGB and not the gamma corrected CRT drive signals R'G'B', as explained in section 4. These two matrices are the (approximative) inversion of each other. If you are a beginner in this mathematical stuff, skip the previous explainations, and just use the result... 
8.1 - RGB, CMY, and CMYK 
The most popular color spaces are RGB and CMY. These two acronyms stand for Red/Green/Blue and Cyan/Magenta/Yellow. They're device-dependent. The first is normally used on monitors, the second on printers. 

RGB are known as additive primary colors, because a color is produced by adding different quantities of the three components, red, green, and blue. 

CMY are known as subtractive (or secondary) colors, because the color is generated by subtracting different quantities of cyan, magenta and yellow from white light. 

The primaries used by artists, cyan, magenta and yellow are different than the primaries of computer devices because they are concerned with mixing pigments rather than lights or dyes. 

    RGB -> CMY                          | CMY -> RGB
    Red   = 1-Cyan      (0<=Cyan<=1)    | Cyan    = 1-Red (0<=Red<=1)
    Green = 1-Magenta   (0<=Magenta<=1) | Magenta = 1-Green (0<=Green<=1)
    Blue  = 1-Yellow    (0<=Yellow<=1)  | Yellow  = 1-Blue (0<=Blue<=1)

On printer devices, a component of black is added to the CMY, and the second color space is then called CMYK (Cyan/Magenta/Yellow/blacK). This component is actually used because cyan, magenta, and yellow set up to the maximum should produce a black color. (The RGB components of the white are completly substracted from the CMY components.) But the resulting color isn't physically a 'true' black. The transforms from CMY to CMYK (and vice versa) are given as shown below: 
    CMY -> CMYK                         | CMYK -> CMY
    Black=minimum(Cyan,Magenta,Yellow)  | Cyan=minimum(1,Cyan*(1-Black)+Black)
    Cyan=(Cyan-Black)/(1-Black)         | Magenta=minimum(1,Magenta*(1-Black)+Black)
    Magenta=(Magenta-Black)/(1-Black)   | Yellow=minimum(1,Yellow*(1-Black)+Black)
    Yellow=(Yellow-Black)/(1-Black)     |

Note, these differ to the descriptions often given, for example in Adobe Postscript. For more information see FIELD in section 10. This is because Adobe doesn't choose to use the most recent equations. (I don't know why!) 
    RGB -> CMYK                         | CMYK -> RGB
    Black=minimum(1-Red,1-Green,1-Blue) | Red=1-minimum(1,Cyan*(1-Black)+Black)
    Cyan=(1-Red-Black)/(1-Black)        | Green=1-minimum(1,Magenta*(1-Black)+Black)
    Magenta=(1-Green-Black)/(1-Black)   | Blue=1-minimum(1,Yellow*(1-Black)+Black)
    Yellow=(1-Blue-Black)/(1-Black)     |

Of course, I assume that C, M, Y, K, R, G, and B have a range of [0;1]. 
8.2 - HSI, HSL, HSV, and related color spaces 
The representation of the colors in the RGB and CMY(K) color spaces are designed for specific devices. But for a human observer, they are not useful definitions. For user interfaces a more intuitive color space, designed for the way we actually think about color is to be preferred. Such a color space is HSI; Hue, Saturation and Intensity, which can be thought of as a RGB cube tipped up onto one corner. The line from RGB=min to RGB=max becomes verticle and is the intensity axis. The position of a point on the circumference of a circle around this axis is the hue and the saturation is the radius from the central intensity axis to the color. 

		 Green
		  /\
		/    \    ^
	      /V=1 x   \   \ Hue (angle, so that Hue(Red)=0, 
       Blue -------------- Red       Hue(Green)=120, and Hue(blue)=240 deg)
	    \      |     /
	     \     |-> Saturation (distance from the central axis)
	      \    |   /
	       \   |  /
		\  | /
		 \ |/
	       V=0 x (Intensity=0 at the top of the apex and =1 at the base of the cone)

The big disadvantage of this model is the conversion which is mainly because the hue is expressed as an angle. The transforms are given below: 
    Hue = (Alpha-arctan((Red-intensity)*(3^0.5)/(Green-Blue)))/(2*PI)
    with { Alpha=PI/2 if Green>Blue
	 { Aplha=3*PI/2 if Green<Blue
	 { Hue=1 if Green=Blue
    Saturation = (Red^2+Green^2+Blue^2-Red*Green-Red*Blue-Blue*Green)^0.5
    Intensity = (Red+Green+Blue)/3

Note that you have to compute Intensity *before* Hue. If not, you must assume that: 
    Hue = (Alpha-arctan((2*Red-Green-Blue)/((Green-Blue)*(3^0.5))))/(2*PI).

I assume that H, S, L, R, G, and B are within the range of [0;1]. Another point of view of this cone is to project the coordinates onto the base. The 2D projection is: 
    Red:   (1;0)
    Green: (cos(120 deg);sin(120 deg)) = (-0.5; 0.866)
    Blue:  (cos(240 deg);sin(240 deg)) = (-0.5;-0.866)
    Now you need intermediate coordinates:
    x = Red-0.5*(Green+Blue)
    y = 0.866*(Green-Blue)

Finally, you have: 
    Hue = arctan2(x,y)/(2*PI) ; Just one formula, always in the correct quadrant
    Saturation = (x^2+y^2)^0.5
    Intensity = (Red+Green+Blue)/3

Another model close to HSI is HSL. It's actually a double cone with black and white points placed at the two apexes of the double cone. I don't provide formula, but feel free to send me the formula you could find. ;-) 
    we got this from Fabrice Lestideau :
    Hi,
    I give you the formula of the HLS color space:
    L= (max+min)/2
    if L<=0.5     S=(max-min)/(max+min)
    else               S=(max-min)/(2-max-min)

    if (max=R)        H=(G-B)/(max-min)
    if (max+G)        H=(2+(B-R)/(max-min))
    if (max+B)        H=(4+(R-G)/(max-min))

    thank you for your color faq.

    you're welcome.

Actually, here are many variations on HSI, e.g. HSL, HSV, HCI (chroma / colorfulness), HVC, TSD (hue saturation and darkness) etc. But they all do basically the same thing. 

8.3 - CIE XYZ 
The CIE (presented in the section 2) has defined a human "Standard Observer", based on measurements of the color-matching abilities of the average human eye. Using data from measurements made in 1931, a system of three primaries, XYZ, was developed in which all visible colors can be represented using only positive values of X, Y and Z. The Y primary is identical to Luminance, X and Z give coloring information. This forms the basis of the CIE 1931 XYZ color space, which is fundamental to all colorimetry. Values are normally assumed to lie in the range [0;1]. Colors are rarely specified in XYZ terms, it is far more common to use "chromaticity coordinates" which are independant of the Luminance (Y). The main advantage of CIE XYZ, and any color space or color definition based on it, is that it is completely device independent. The main disadvantage with CIE based spaces is the complexity of implementing them, in addition some are not user intuitive. A complete description of the CIE system is beyond the scope of this FAQ, useful formula to convert between CIE values and between CIE and non-CIE color spaces. It is highly recommended that anyone wishing to implement any of the CIE system in the digital domain reads the refs in section 10, specifically HUNT 1, SPROSON, BERNS and CIE 1. 

Chromaticity coordinates are derived from tristimulus values (the amounts of the primaries) by normalising thus: 

     x = X/(X+Y+Z)
     y = Y/(X+Y+Z)
     z = Z/(X+Y+Z)

Chromaticity coordinates are *always* used in lower case. Because they have been normalised, only two values are needed to specify the color, and so z is normally discarded (because x+y+z=1). Colors can be plotted on a "chromaticity diagram" using x and y as coordinates, with Y (Luminance) normal to the diagram. When a color is specified in this form, it is referred to as CIE 1931 xyY. Tristimulus values can always be derived from xyY values: 
    X = x*Y/y
    Z = (1-x-y)*Y/y

For scientists and programers, it is possible to convert between RGB as displayed on a CRT and CIE tristimulus values. 
The first step is to ensure that you have either linear luminance information, or that you know the transfer function (gamma correction) of the display device. For further details on this see section 4. This will give you the luminances of the red, green and blue phosphor emissions from the red, green and blue pixel values that you specify. The second stage is to perform a matrix transform (see section 8) to convert the red, green, blue luminance information to CIE XYZ tristimulus values, essentially. We can apply Grassman's Laws to establish conversion matrices between the XYZ primaries and any other set of primaries, for instance (if we consider RGB): 

    |Red  |      -1 |X|         |X|       |Red  |
    |Green| = |M|  *|Y|   and   |Y| = |M|*|Green|
    |Blue |         |Z|         |Z|       |Blue |

The matrix M is 3 by 3, and consists of the tristimulus values of the RGB primaries in terms of the XYZ primaries (phosphors on *your* CRT). 
Ideally you would measure these - if you have a colorimeter or a spectroradiometer / spectrophotometer handy. Alternativly you could assume that your system corresponds to a particular specification, e.g. NTSC, and use the figures given by the standard, however this is often not a valid assumption - and if you need to make it it's probably not worth going to the effort of implementing the transforms, the error's induced would outway any advantages of the CIE system. The third method is to derive the figures from other data. 

To solve this system and get the matrix M we need some more data. The first data is the color reference we use. With the CIE standard the reference of your rendering is the white. White point is achromatic and is defined so that Y=1, and Red=Green=Blue. To get the white point coordinates and put it into our previous matrix system we use the CIE xyY diagram. This diagram is a 2D diagram (based on tristimuli in regard with the wave lengths) where you get a color as (x;y). To transform this 2D diagram into a 3D, we just consider: 

    z=1-(x+y)
    X=x*Y/y
    Y=Y (fixed for the diagram)
    Z=z*Y/y

(Take care on these letters because these are case sensitive. Otherwise you'd get unaccurate results!) From there we must consider the coordinates of the vertices in your triangle reference. The three vertices in your triangle reference are "pure values", it means the chromacity coordinates of red, green, and blue are defined in the CIE xyY diagram: 
    Red:   (xr; yr; zr=1-(xr+yr))
    Green: (xg; yg; zg=1-(xg+yg))
    Blue:  (xb; yb; zb=1-(xb+yb))
    And the white is defined such that Red=Green=Blue=1 as:
    |Xn|   |r1 g1 b1|   |Redn  |   |r1 g1 b1|   |1|
    |Yn| = |r2 g2 b2| * |Greenn| = |r2 g2 b2| * |1| (1)
    |Zn|   |r3 g3 b3|   |Bluen |   |r3 g3 b3|   |1|
    (1) becomes by invoking the white balance condition:
    |Xn|   |ar*xr ag*xg ab*xb|   |1|   |xr xg xb|   |ar|
    |Yn| = |ar*yr ag*yg ab*yb| * |1| = |yr yg yb| * |ag| (2)
    |Zn|   |ar*zr ag*zg ab*zb|   |1|   |zr zg zb|   |ab|

But Xn, Yn, and Zn are also defined as (xn;yn) from the CIE xyY diagram: 
    zn=1-(xn+yn)
    Xn=xn*Yn/yn=xn/yn
    Yn=1 (always for white!)
    Zn=zn*Yn/yn=zn/yn
    So (2) becomes:
    |xn/yn|   |xr xg xb|   |ar|
    |  1  | = |yr yg yb| * |ag| (3)
    |zn/yn|   |zr zg zb|   |ab|

Now, xn, yn, zn, xr, yr, zr, xg, yg, zg, xb, yb, and zb are all known because they are supplied. Multiplying the chromaticity coordinates by these values gives the the matrix in equation (1) (with a HP pocket computer, for example) and get ar, ag, and ab. So: 
    |X|   |xr*ar xg*ag xb*ab|   |Red  |
    |Y| = |yr*ar yg*ag xb*ab| * |Green|
    |Z|   |zr*ar zg*ag xb*ab|   |Blue |

Let's take some examples. The CCIR (French acronym for Comite Consultatif International des Radiocommunications) defined several recommendations. The most popular (they shouldn't be used anymore, we will see later why) are CCIR 601-1 and CCIR 709. The CCIR 601-1 is the old NTSC (National Television System Committee) standard. It uses a white point called "C Illuminant". The white point coordinates in the CIE xyY diagram are (xn;yn)=(0.310063;0.316158). The red, green, and blue chromacity coordinates are: 
    Red:   xr=0.67 yr=0.33 zr=1-(xr+yr)=0.00
    Green: xg=0.21 yg=0.71 zg=1-(xg+yg)=0.08
    Blue:  xb=0.14 yb=0.08 zb=1-(xb+yb)=0.78
    zn=1-(xn+yn)=1-(0.310063+0.316158)=0.373779
    Xn=xn/yn=0.310063/0.316158=0.980722
    Yn=1 (always for white)
    Zn=zn/yn=0.373779/0.316158=1.182254

We introduce all that in (3) and get: 
    ar=0.981854
    ab=0.978423
    ag=1.239129

Finally, we have RGB -> CIE XYZccir601-1 (C illuminant): 
    |X|   |0.606881 0.173505 0.200336|   |Red  |
    |Y| = |0.298912 0.586611 0.114478| * |Green|
    |Z|   |0.000000 0.066097 1.116157|   |Blue |

Because I'm a programer, I preferr to round these values up or down (in regard with the new precision) and I get: 
    RGB -> CIE XYZccir601-1 (C illuminant)      | CIE XYZccir601-1 (C illuminant) -> RGB
    X = 0.607*Red+0.174*Green+0.200*Blue        | Red   =  1.910*X-0.532*Y-0.288*Z
    Y = 0.299*Red+0.587*Green+0.114*Blue        | Green = -0.985*X+1.999*Y-0.028*Z
    Z = 0.000*Red+0.066*Green+1.116*Blue        | Blue  =  0.058*X-0.118*Y+0.898*Z

The other common recommendation is the 709. The white point is D65 and have coordinates fixed as (xn;yn)=(0.312713;0.329016). The RGB chromacity coordinates are: 
    Red:   xr=0.64 yr=0.33 zr=1-(xr+yr)=0.03
    Green: xg=0.30 yg=0.60 zg=1-(xg+yg)=0.10
    Blue:  xb=0.15 yb=0.06 zb=1-(xb+yb)=0.79

Finally, we have RGB -> CIE XYZccir709 (709): 
    |X|   |0.412411 0.357585 0.180454|   |Red  |
    |Y| = |0.212649 0.715169 0.072182| * |Green|
    |Z|   |0.019332 0.119195 0.950390|   |Blue |

This provides the formula to transform RGB to CIE XYZccir709 and vice-versa: 
    RGB -> CIE XYZccir709 (D65)                 | CIE XYZccir709 (D65) -> RGB
    X = 0.412*Red+0.358*Green+0.180*Blue        | Red   =  3.241*X-1.537*Y-0.499*Z
    Y = 0.213*Red+0.715*Green+0.072*Blue        | Green = -0.969*X+1.876*Y+0.042*Z
    Z = 0.019*Red+0.119*Green+0.950*Blue        | Blue  =  0.056*X-0.204*Y+1.057*Z

Recently (about one year ago), CCIR and CCITT were both absorbed into their parent body, the International Telecommunications Union (ITU). So you must *not* use CCIR 601-1 and CCIR 709 anymore. Furthermore, their names have changed respectively to Rec 601-1 and Rec 709 ("Rec" stands for Recommendation). Here is the new ITU recommendation. The white point is D65 and have coordinates fixed as (xn;yn)=(0.312713; 0.329016). The RGB chromacity coordinates are: 
    Red:   xr=0.64 yr=0.33 zr=1-(xr+yr)=0.03
    Green: xg=0.29 yg=0.60 zg=1-(xg+yg)=0.11
    Blue:  xb=0.15 yb=0.06 zb=1-(xb+yb)=0.79

Finally, we have RGB -> CIE XYZitu (D65): 
    |X|   |0.430574 0.341550 0.178325|   |Red  |
    |Y| = |0.222015 0.706655 0.071330| * |Green|
    |Z|   |0.020183 0.129553 0.939180|   |Blue |

This provides the formula to transform RGB to CIE XYZitu and vice-versa: 
    RGB -> CIE XYZitu (D65)                     | CIE XYZitu (D65) -> RGB
    X = 0.431*Red+0.342*Green+0.178*Blue        | Red   =  3.063*X-1.393*Y-0.476*Z
    Y = 0.222*Red+0.707*Green+0.071*Blue        | Green = -0.969*X+1.876*Y+0.042*Z
    Z = 0.020*Red+0.130*Green+0.939*Blue        | Blue  =  0.068*X-0.229*Y+1.069*Z


You should remember that these transforms are only valid if you have equipment that matches these specifications, or you have images that you know have been encoded to these standards. If this is not the case, the CIE values you calculate will not be true CIE. 
See section 7.2 to get a useful example of these ugly value. ;-) 

For your application, use new ITU rec, if possible. 

8.4 - CIE Luv and CIE Lab 
In 1976, the CIE defined two new color spaces to enable us to get more uniform and accurate models. The first of these two color spaces is the CIE Luv which component are L*, u* and v*. L* component defines the luminancy, and u*, v* define chrominancy. CIE Luv is very used in calculation of small colors or color differences, especially with additive colors. The CIE Luv color space is defined from CIE XYZ. 

CIE XYZ -> CIE Lab 

    { L* = 116*((Y/Yn)^(1/3)) with Y/Yn>0.008856
    { L* = 903.3*Y/Yn with Y/Yn<=0.008856
    u* = 13*(L*)*(u'-u'n)
    v* = 13*(L*)*(v'-v'n)

where u'=4*X/(X+15*Y*+3*Z) and v'=9*Y/(X+15*Y+3*Z) and u'n and v'n have the same definitions for u' and v' but applied to the white point reference. So, you have: 
    u'n=4*Xn/(Xn+15*Yn*+3*Zn) and v'n=9*Yn/(Xn+15*Yn+3*Zn)

See also section 8.3 about Xn, Yn, and Zn. 
As CIE Luv, CIE Lab is a color space introduced by CIE in 1976. It's a new incorporated color space in TIFF specs. In this color space you use three components: L* is the luminancy, a* and b* are respectively red/blue and yellow/blue chrominancies. This color space is also defined with regard to the CIE XYZ color spaces. 

CIE XYZ -> CIE Lab 

    { L=116*((Y/Yn)^(1/3))-16 if Y/Yn>0.008856
    { L=903.3*Y/Yn            if Y/Yn<=0.008856
    a=500*(f(X/Xn)-f(Y/Yn))
    b=200*(f(Y/Yn)-f(Z/Zn))
    where { f(t)=t^(1/3) with Y/Yn>0.008856
	  { f(t)=7.787*t+16/116 with Y/Yn<=0.008856

See also section 8.3 about Xn, Yn, and Zn. 

8.5 - LCH and CIE LSH 
CIELab and CIELuv both have a disadvantage if used for a user interface, they are unintuitive to use. To solve this we can use CIE definitions for chroma, c, Hue angle, h and saturation, s (see section 2). Hue, chroma and saturation can be derived from CIELuv, and Hue and chroma but *NOT* saturation can be derived from CIELab (this is because CIELab has no associated chromaticity diagram and so no correlation of saturation is possible). 

To distinguish between LCH derived from CIELuv and CIELab the values of Hue, H, and Chroma, C, are given the subscripts uv if from CIELuv and ab if from CIELab. 

CIELab -> LCH 

    L = L*
    C = (a*^2+b*^2)^0.5
    { H=0                                 if a=0
    { H=(arctan((b*)/(a*))+k*PI/2)/(2*PI) if a#0
    { and { k=0 if a*>=0 and b*>=0
	  { or k=1 if a*>0 and b*<0
	  { or k=2 if a*<0 and b*<0
	  { or k=3 if a*<0 and b*>0

CIELuv -> LCH 

    L = L*
    C = (u*^2 + v*^2)^0.5     or   C = L*s
    H = arctan[(v*)/(u*)]
    { H=0                                 if u=0
    { H=(arctan((v*)/(u*))+k*PI/2)/(2*PI) if u#0
    { and { k=0 if u*>=0 and v*>=0
	  { or k=1 if u*>0 and v*<0
	  { or k=2 if u*<0 and v*<0
	  { or k=3 if u*<0 and v*>0

CIELuv -> CIE LSH 

    L = L*
    s = 13[(u' - u'n)^2 + (v' - v'n)^2]^0.5
    H = arctan[(v*)/(u*)]
    { H=0                                 if u=0
    { H=(arctan((v*)/(u*))+k*PI/2)/(2*PI) if u#0 (add PI/2 to H if H<0)
    { and { k=0 if u*>=0 and v*>=0
	  { or k=1 if u*>0 and v*<0
	  { or k=2 if u*<0 and v*<0
	  { or k=3 if u*<0 and v*>0

8.6 - YUV, YIQ, and YCbCr 
YUV and YIQ are standard color spaces used for analogue television transmission. YUV is used in European TVs (PAL) and YIQ in North American TVs (NTSC). These colors spaces are device-dependent, like RGB, but they are callibrated. This is because the primaries used in these television systems are specified by the relative standards authorities. Y is the luminance component and is usually referred to as the luma component (it comes from CIE standard), U,V or I,Q are the chrominance components (i.e. the color signals). 

YUV uses D65 white point which coordinates are (xn;yn)=(0.312713;0.329016). The RGB chromacity coordinates are: 

    Red:   xr=0.64 yr=0.33
    Green: xg=0.29 yg=0.60
    Blue:  xb=0.15 yb=0.06

See section 8.3 to understand why the above values. 
    RGB -> YUV                                  | YUV -> RGB
    Y =  0.299*Red+0.587*Green+0.114*Blue       | Red   = Y+0.000*U+1.140*V
    U = -0.147*Red-0.289*Green+0.436*Blue       | Green = Y-0.396*U-0.581*V
    V =  0.615*Red-0.515*Green-0.100*Blue       | Blue  = Y+2.029*U+0.000*V

    RGB -> YIQ                                  | YUV -> RGB
    Y =  0.299*Red+0.587*Green+0.114*Blue       | Red   = Y+0.956*I+0.621*Q
    I =  0.596*Red-0.274*Green-0.322*Blue       | Green = Y-0.272*I-0.647*Q
    Q =  0.212*Red-0.523*Green+0.311*Blue       | Blue  = Y-1.105*I+1.702*Q

    YUV -> YIQ                          | YIQ -> YUV
    Y = Y (no changes)                  | Y = Y (no changes)
    I = -0.2676*U+0.7361*V              | U = -1.1270*I+1.8050*Q
    Q =  0.3869*U+0.4596*V              | V =  0.9489*I+0.6561*Q


Note that Y has a range of [0;1] (if red, green, and blue have a range of [0;1]) but U, V, I, and Q can be as well negative as positive. I can't give the range of U, V, I, and Q because it depends on precision from Rec specs To avoid such problems, you'll preferr the YCbCr. This color space is similar to YUV and YIQ without the disadvantages. Y remains the component of luminancy but Cb and Cr become the respective components of blue and red. Futhermore, with YCbCr color space you can choose your luminancy from your favorite recommendation. The most popular are given below: 
    +----------------+---------------+-----------------+----------------+
    | Recommendation | Coef. for red | Coef. for Green | Coef. for Blue |
    +----------------+---------------+-----------------+----------------+
    | Rec 601-1      | 0.2989        | 0.5866          | 0.1145         |
    | Rec 709        | 0.2126        | 0.7152          | 0.0722         |
    | ITU            | 0.2220        | 0.7067          | 0.0713         |
    +----------------+---------------+-----------------+----------------+
    RGB -> YCbCr
    Y  = Coef. for red*Red+Coef. for green*Green+Coef. for blue*Blue
    Cb = (Blue-Y)/(2-2*Coef. for blue)
    Cr = (Red-Y)/(2-2*Coef. for red)
    YCbCr -> RGB
    Red   = Cr*(2-2*Coef. for red)+Y
    Green = (Y-Coef. for blue*Blue-Coef. for red*Red)/Coef. for green
    Blue  = Cb*(2-2*Coef. for blue)+Y

(Note that the Green component must be computed *after* the two other components because Green component use the values of the two others.) Usually, you'll need the following conversions based on Rec 601-1 for TIFF and JPEG works: 
    RGB -> YCbCr (with Rec 601-1 specs)         | YCbCr (with Rec 601-1 specs) -> RGB
    Y=  0.2989*Red+0.5866*Green+0.1145*Blue     | Red=  Y+0.0000*Cb+1.4022*Cr
    Cb=-0.1688*Red-0.3312*Green+0.5000*Blue     | Green=Y-0.3456*Cb-0.7145*Cr
    Cr= 0.5000*Red-0.4184*Green-0.0816*Blue     | Blue= Y+1.7710*Cb+0.0000*Cr

Additional note: Tom Lane provided me implementation of the Baseline JPEG compression system but after a close look I understood that the IJG values was an approximation of the previous values (you should preferr mine ;-).). 
I assume Y is within the range [0;1], and Cb and Cr are within the range [-0.5;0.5] if Red, Green, and Blue are within the range [0;1]. 


8.7 - SMPTE-C RGB 
SMPTE is an acronym which stands for Society of Motion Picture and Television Engineers. They give a gamma (=2.2 with NTSC, and =2.8 with PAL) corrected color space with RGB components (about RGB, see section 8.1). The white point is D65. The white point coordinates are (xn;yn)=(0.312713; 0.329016). The RGB chromacity coordinates are: 

    Red:   xr=0.630 yr=0.340
    Green: xg=0.310 yg=0.595
    Blue:  xb=0.155 yb=0.070

See section 8.3 to understand why the above values. To get the conversion from SMPTE-C RGB to CIE XYZ or from CIE XYZ to SMPTE-C RGB, you have two steps: 
    SMPTE-C RGB -> CIE XYZ (D65)                | CIE XYZ (D65) -> SMPTE-C RGB
    - Gamma correction                          | - Linear transformations:
    Red=f1(Red')                                | Red  = 3.5058*X-1.7397*Y-0.5440*Z
    Green=f1(Green')                            | Green=-1.0690*X+1.9778*Y+0.0352*Z
    Blue=f1(Blue')                              | Blue = 0.0563*X-0.1970*Y+1.0501*Z
    where { f1(t)=t^2.2 whether t>=0.0          | - Gamma correction
	  { f1(t)-(abs(t)^2.2) whether t<0.0    | Red'=f2(Red)
    - Linear transformations:                   | Green'=f2(Green)
    X=0.3935*Red+0.3653*Green+0.1916*Blue       | Blue'=f2(Blue)
    Y=0.2124*Red+0.7011*Green+0.0866*Blue       | where { f2(t)=t^(1/2.2) whether t>=0.0
    Z=0.0187*Red+0.1119*Green+0.9582*Blue       |       { f2(t)-(abs(t)^(1/2.2)) whether t<0.0

8.8 - SMPTE-240M YPbPr (HD televisions) 
SMPTE gives a gamma (=0.45) corrected color space with RGB components (about RGB, see section 8.1). With this space color, you have three components Y, Pb, and Pr respectively linked to luminancy (see section 2), green, and blue. The white point is D65. The white point coordinates are (xn;yn)=(0.312713;0.329016). The RGB chromacity coordinates are: 

    Red:   xr=0.67 yr=0.33
    Green: xg=0.21 yg=0.71
    Blue:  xb=0.15 yb=0.06

See section 8.3 to understand why the above values. Conversion from SMPTE-240M RGB to CIE XYZ (D65) or from CIE XYZ (D65) to SMPTE-240M RGB, you have two steps: 
    YPbPr -> RGB                                | RGB -> YPbPr
    - Gamma correction                          | - Linear transformations:
    Red=f(Red')                                 | Red  =1*Y+0.0000*Pb+1.5756*Pr
    Green=f(Green')                             | Green=1*Y-0.2253*Pb+0.5000*Pr
    Blue=f(Blue')                               | Blue =1*Y+1.8270*Pb+0.0000*Pr
    where { f(t)=t^0.45 whether t>=0.0          | - Gamma correction
	  { f(t)-(abs(t)^0.45) whether t<0.0    | Red'=f(Red)
    - Linear transformations:                   | Green'=f(Red)
    Y=  0.2122*Red+0.7013*Green+0.0865*Blue     | Blue'=f(Red)
    Pb=-0.1162*Red-0.3838*Green+0.5000*Blue     | where { f(t)=t^(1/0.45) whether t>=0.0
    Pr= 0.5000*Red-0.4451*Green-0.0549*Blue     |       { f(t)-(abs(t)^(1/0.45)) whether t<0.0

8.9 - Xerox Corporation YES 
YES have three components which are Y (see Luminancy, section 2), E (chrominancy of red-green axis), and S (chrominancy of yellow-blue axis) Conversion from YES to CIE XYZ (D50) or from CIE XYZ (D50) to YES, you have two steps: 

    YES -> CIE XYZ (D50)                        | CIE XYZ (D50) -> YES
    - Gamma correction                          | - Linear transformations:
    Y=f1(Y')                                    | Y= 0.000*X+1.000*Y+0.000*Z
    E=f1(E')                                    | E= 1.783*X-1.899*Y+0.218*Z
    S=f1(S')                                    | S=-0.374*X-0.245*Y+0.734*Z
    where { f1(t)=t^2.2 whether t>=0.0          | - Gamma correction
	  { f1(t)-(abs(t)^2.2) whether t<0.0    | Y'=f2(Y)
    - Linear transformations:                   | E'=f2(E)
    X=0.964*Y+0.528*E-0.157*S                   | S'=f2(S)
    Y=1.000*Y+0.000*E+0.000*S                   | where { f2(t)=t^(1/2.2) whether t>=0.0
    Z=0.825*Y+0.269*E+1.283*S                   |       { f2(t)-(abs(t)^(1/2.2)) whether t<0.0

Conversion from YES to CIE XYZ (D65) or from CIE XYZ (D65) to YES, you have two steps: 
    YES -> CIE XYZ (D65)                        | CIE XYZ (D65) -> YES
    - Gamma correction                          | - Linear transformations:
    Y=f1(Y')                                    | Y= 0.000*X+1.000*Y+0.000*Z
    E=f1(E')                                    | E=-2.019*X+1.743*Y-0.246*Z
    S=f1(S')                                    | S= 0.423*X+0.227*Y-0.831*Z
    where { f1(t)=t^2.2 whether t>=0.0          | - Gamma correction
	  { f1(t)-(abs(t)^2.2) whether t<0.0    | Y'=f2(Y)
    - Linear transformations:                   | E'=f2(E)
    X=0.782*Y-0.466*E+0.138*S                   | S'=f2(S)
    Y=1.000*Y+0.000*E+0.000*S                   | where { f2(t)=t^(1/2.2) whether t>=0.0
    Z=0.671*Y-0.237*E-1.133*S                   |       { f2(t)-(abs(t)^(1/2.2)) whether t<0.0

Usually, you should use YES <-> CIE XYZ (D65) conversions because your screen and the usual pictures have D65 as white point. Of course, sometime you'll need the first conversions. Just take care on your pictures. 

8.10 - Kodak Photo CD YCC 
The Kodak PhotoYCC color space was designed for encoding images with the PhotoCD system. It is based on both ITU Recommendations 709 and 601-1, having a color gamut defined by the ITU 709 primaries and a luminance - chrominance representation of color like ITU 601-1's YCbCr. The main attraction of PhotoYCC is that it calibrated color space, each image being tracable to Kodak's standard image-capturing device and the CIE Standard Illuminant for daylight, D65. In addition PhotoYCC provides a color gamut that is greater than that which can currently be displayed, thus it is suitable not only for both additive and subtractive (RGB and CMY(K)) reproduction, but also for archieving since it offers a degree of protection against future progress in display technology. Images are scanned by a standardised image-capturing device, calibrated accoring to the type of photographic material being scanned. The scanner is sensitive to any color currently producable by photographic materials (and more besides). The image is encoded into a color space based on the ITU Rec 709 reference primaries and the CIE standard illuminant D65 (standard daylight). The extended color gamut obtainable by the PhotoCD system is achieved by allowing both positive and negative values for each primary. This means that whereas conventional ITU 709 encoded data is limited by the boundary of the triangle linking the three primaries (the color gamut), PhotoYCC can encode data outside the boundary, thus colors that are not realiseable by the ITU primary set can be recorded. This feature means that PhotoCD stores more information (as a larger color gamut) than current display devices, such as CRT monitors and dye-sublimination printers, can produce. In this respect it is good for archieval storage of images since the pictures we see now will keep up with improving display technology. When an image is scanned it is stored in terms of the three reference primaries, these values, Rp, Gp and Bp are defined as follows: 

    Rp = kr {integral of (Planda planda rlanda) dlanda}
    Gp = kg{integral of (Planda planda glanda) dlanda}
    Bp = kb{integral of (Planda planda blanda) dlanda}

where Rp Gp and Bp are the CCIR 709 primaries although not constrained to positive values. kr kg kb are normalising constants; Planda is the spectral power distribution of the light source (CIE D65); planda is the spectral power distribution of the scene at a specific point (pixel); rlanda glanda and blanda are the spectral power distributions of the scanner components primaries. 
kr kg kb are specified as kr = 1/[integral of (Planda * rlanda) dlanda] as similairly for kg and kb replacing rlanda with glanda and blanda respectivly. 

Let's stop with the theory and let's see how to make transforms. To be stored on a CD rom, the Rp Gp and Bp values are transformed into Kodak's PhotoYCC color space. This is performed in three stages. With the first stage a non-linear transform is applied to the image signals (this is because scanners tend to be linear devices while CRT displays are not), the transform used is as follows: Y (see Luminancy, section 2) and C1 and C2 (both are linked to chrominancy). 

    YC1C2->RGB                                          | RGB->YC1C2
    - Gamma correction:                                 | Y' =1.3584*Y
    Red  =f(red')                                       | C1'=2.2179*(C1-156)
    Green=f(Green')                                     | C2'=1.8215*(C2-137)
    Blue =f(Blue')                                      | Red  =Y'+C2'
    where { f(t)=-1.099*abs(t)^0.45+0.999 if t<=-0.018  | Green=Y'-0.194*C1'-0.509*C2'
	  { f(t)=4.5*t if -0.018<t<0.018                | Blue =Y'+C1'
	  { f(t)=1.099*t^0.45-0.999 if t>=0.018         |
    - Linear transforms:                                |
    Y' = 0.299*Red+0.587*Green+0.114*Blue               |
    C1'=-0.299*Red-0.587*Green+0.886*Blue               |
    C2'= 0.701*Red-0.587*Green-0.114*Blue               |
    - To fit it into 8-bit data:                        |
    Y =(255/1.402)*Y'                                   |
    C1=111.40*C1'+156                                   |
    C2=135.64*C2'+137                                   |

Take care I assume Red, Green, Blue, Y, C1, and C2 are in the range of [0;255]. Take care that your RGB values are not constrainted to positive values. So, some colors can be outside the Rec 709 display phosphor limit, it means some colors can be outside the trangle I defined in section 8.3. This can be explained because Kodak want to preserve some accurate infos, such as specular highlight information. You can note that the relations to transform YC1C2 to RGB is not exactly the reverse to transform RGB to YC1C2. This can be explained (from Kodak point of view) because the output displays are limited in the range of their capabilities. 
Converting stored PhotoYCC data to RGB 24bit data for display by computers on CRT's is achieved as follows; 

Firstly normal Luma and Chroma data are recovered: 

    Luma        = 1.3584 * Luma(8bit)
    Chroma1     = 2.2179 * (Chroma1(8bit) - 156)
    Chroma2     = 1.8215 * (Chroma2(8bit) - 137)


Assuming your display uses phosphors that are, or are very close to, ITU Rec 709 primaries in their chromaticities, then (* see below) 
	Rdisplay        = L + Chroma2
	Gdisplay        = L - 0.194Chroma1 - 0.509Chroma2
	Bdisplay        = L + Chroma1

Two things to watch are: 
a) this results in RGB values from 0 to 346 (instead of the more usual 0 to 255) if this is simply ignored the resulting clipping will cause severe loss of highlight information in the displayed image, a look-up-table is usually used to convert these through a non-linear function to 8 bit data. For example: 

    Y =(255/1.402)*Y'                                   
    C1=111.40*C1'+156                                   
    C2=135.64*C2'+137   

b) if the display phosphors differ from CCIR 709 primaries then further conversion will be necessary, possibly through an intermediate device independedent color space such as CIE XYZ. 
* As a note: Do the phosphors need to match with regard to their chromaticities or is a spectral match required? Two different spectral distributed phosphors may have same chromaticites but may not be a metameric match since metarimerism only applies to spectral distribution of color matching functions. Another point to note is that PhotoCD images are chroma subsampled, that is to say for each 2 x 2 block of pixels, 4 luma and 1 of each chroma component are sampled (i.e. chroma data is averaged over 2x2 pixel blocks). This technique uses the fact that the HVS is less sensitive to luminance than chromaince diferences so color information can be stored at a lower precision without percievable loss in visual quality. 

9 - Color quantizations 
An important problem in color processing comes up with your displaying/printing device. In fact, many output devices can't reproduce all the colors you want. In many cases you must convert all your colors into a subset. We will see from now some references or algorithms to deal with that problem. 

9.1 - Full color space to color look-up table 
Usually, you will need to quantize 24-bit color images downto 8-bit color images. (The conversions into grayscale or bi-level images are explained in the next section.) There are several means to do so. I suggest you read the references given in comp.graphics FAQ stored on rtfm.mit.edu:/pub/usenet/news.answers/graphics/faq maintened by John T. Grieggs (grieggs@netcom.com). 

9.2 - Color look-up table to a gray scales 
It is really easy to convert a picture into its grayscale representation. To do so, you take your RGB picture (if you don't have a RGB picture, have a look into section 8 and subsections) and you translate each RGB value into the luminancy value. Old softwares used Rec 601-1 and produced: Gray scale = Y = (299*Red+587*Green+114*Blue)/1000 With Rec 709, we have: Gray scale = Y = (213*Red+715*Green+72*Blue)/1000 Some others do as if: Gray scale = Green (They don't consider the red and blue components at all) Or, alternativly, you can average the three color components so: Gray scale = (Red+Green+Blue)/3 But now all people *should* use the most accurate, it means ITU standard: Gray scale = Y = (222*Red+707*Green+71*Blue)/1000 (That is very close to Rec 709!) I performed some personal tests and have sorted them in regard with the global resulting luminancy of the picture (from my eye point of view!). The following summary gives what I found ordered increasingly: 

    +---------------------------------+-----------------+
    | Scheme                          | Luminancy level |
    +---------------------------------+-----------------+
    | Gray = Green                    |        1        |
    | Gray = ITU (D65)                |        2        |
    | Gray = Rec 709 (D65)            |        3        |
    | Gray = Rec 601-1 (C illuminant) |        4        |
    | Gray = (Red+Green+Blue)/3       |        5        |
    +---------------------------------+-----------------+

So softwares with Gray=Rec 709 (D65) produce a more dark picture than with Gray=Green. Even if you theorically lose many details with Gray=Green scheme, in fact, and with the 64-gray levels of a VGA card of a PC it is hard to distinguish the loss. 
9.3 - Gray scales to black and white 
Usually, you need to convert a color picture into black and white for printer output device. To do so, you must do it into two steps. The first step is to convert your color picture into a gray level picture, as explained in section 9.2. In the second step you have to convert your grey level picture into a black and white picture. This second stage can be done by several ways depending on your output device. All the ways are based on the fact that human eye is unable to distinguish small displayed/printed informations. So, if two points are very close to each other, they are mixed to a single point. Of course, there is a limit from which your eye will be able to see a pattern. That is why your output device must be as precise as possible. 

The first way to produce monochrome pictures is the halftoning scheme. In this scheme, a point is output as big as the input gray level is dark, and, at the opposite, a point is output as small as the input gray level is light. The size of the output point can be produced by using more or less ink or by writting several dots closely in an aggregate but unable to distinguish as a pattern by the eye. The rules to make aggregates are given as follows: 

Two aggregates of two successive gray scales must differ by adding/removing one dot. A nxn matrix of dots produce n^2+1 different gray levels. 
Two aggregates placed side by side must not appear as a pattern. 
The aggregate must be built by addding step by step dots from the center of the aggregate. 
For example, a 2x2 aggregate is (D means a black dot to place): 
       +-+-+         +-+-+         +-+-+         +-+-+         +-+-+
       | | |         |D| |         |D| |         |D|D|         |D|D|
       +-+-+         +-+-+         +-+-+         +-+-+         +-+-+
       | | |         | | |         | |D|         | |D|         |D|D|
       +-+-+         +-+-+         +-+-+         +-+-+         +-+-+
    Aggregate 1   Aggregate 2   Aggregate 3   Aggregate 4   Aggregate 5

You can express it as the following matrix: 
         | 0 2 |
    M  = | 3 1 |
     2

Note that the numbers in M2 are such that first dot is placed at the top left hand corner (value 0), the second dot is placed at the bottom right hand corner (value 1), and so on. 
You can generalize that by the following algorithm (which produces Mn such that n=2^k): 

    Mn[0;0] <- 0
    Mn[0;1] <- 2
    Mn[1;0] <- 3
    Mn[1;1] <- 1
    for I <- 2 to k
    do J <- 1 binary_shift_left (I-1)
       for X <- 0 to J-1
       do for Y <- 0 to J-1
          do Mn[Y;X] <- Mn[Y;X] binary_shift_left 2
             Mn[Y;X+J] <- Mn[Y;X]+2
             Mn[Y+J;X] <- Mn[Y;X]+3
             Mn[Y+J;X+J] <- Mn[Y;X]+1
          end loop
       end loop
    end loop

Halftoning is good with high definition output device as laser printer but it is hard to apply for displaying or in graphics files because each point is output as a set of dots => You enlarge the bitmapped picture! 
After halftoning, we can consider thresholding schemes. In these schemes, you take a single value or a set of values and each gray level is compared to the threshold value(s). If the gray level is lesser than the threshold then you output a black dot otherwise you output white. 

    for X <- 0 to Image_Size_in_X-1
    do for Y <- 0 to Image_Size_in_Y-1
       do if Read_Gray_Level(X,Y)<128
          then Write_Dot(X,Y,Black)
          else Write_Dot(X,Y,White)
          end if
       end loop
    end loop

I assume that Read_Gray_Level function gives a gray level within the range 0 to 255. 
We can generalize the single threshold by using a set of thresholds, as defined in Bayer's scheme. In this scheme we take the Mn matrices we saw previously. For examples, with a 4-bit gray level picture you use M2 and with an 8-bit gray level picture we use M16 (n=16, and k=4): 

    for X <- 0 to Image_Size_in_X-1
    do for Y <- 0 to Image_Size_in_Y-1
       do if Read_Gray_Level(X,Y)<M16[X logical_binary_and 15;Y logical_binary_and 15]
          then Write_Dot(X,Y,Black)
          else Write_Dot(X,Y,White)
          end if
       end loop
    end loop

Note that the "logical binary and" operation is made to avoid X and Y value to be beyond the range [0;15]. This is equivalent to a modulo 16 operation, but faster on computers. 
Thresholding schemes are simple and produce quick good results but they can be replaced by the very good schemes called dithering. The principle of dithering is simple. We re-adjust the error made on a dot in output by diffusing the error to the neighbouring dots. That's why we also call this scheme error diffusion. For example, let's consider X as the analysed point. The neighbouring points are re-adjusted by the following coefficients presented in the following matrix. 

    +-+-+-+
    | |X|7|
    +-+-+-+
    |3|5|1|
    +-+-+-+

around X, only four points are adjusted with the error. The sum of the adjustment is 7+3+5+1=16. For example, the pixel to the right of X is adjusted by 7/16 of the error made on X (the error can be positive as well negative!). This filter is very popular because it is the Floyd-Steinberg's filter. To have more information about that, have a look in ULICHNEY (see section 11). The problem of halftoning is that you need input gray levels as well readable as writeable. The process can be slow but it produces nicest results compared to fast thresholding scheme. 
10 - References (most of them are provided by Adrian Ford) 
"An inexpensive scheme for calibration of a color monitor in terms of CIE standard coordinates" W.B. Cowan, Computer Graphics, Vol. 17 No. 3, 1983 
"Calibration of a computer controlled color monitor", Brainard, D.H, Color Research & Application, 14, 1, pp 23-34 (1989). 
"Color Monitor Colorimetry", SMPTE Recommended Practice RP 145-1987 
"Color Temperature for Color Television Studio Monitors", SMPTE Recommended Practice RP 37 
SPROSON: "Color Science in Television and Display Systems" Sproson, W, N, Adam Hilger Ltd, 1983. ISBN 0-85274-413-7 (Color measuring from soft displays. It as a reference.) 
CIE 1: "CIE Colorimetry" Official recommendations of the International Commission on Illumination, Publication 15.2 1986 
BERNS: "CRT Colorimetry:Part 1 Theory and Practice, Part 2 Metrology", Berns, R.S., Motta, R.J. and Gorzynski, M.E., Color Research and Appliation, 18, (1993). (Adrian Ford talks about it as a must about CIE implementations on CRT's) 
"Effective Color Displays. Theory and Practice", Travis, D, Academic Press, 1991. ISBN 0-12-697690-2 (Color applications in computer graphics) 
FIELD: Field, G.G., Color and Its Reproduction, Graphics Arts Technical Foundation, 1988, pp. 320-9 (Read this about CMY/CMYK) 
POYNTON: "Gamma and its disguises: The nonlinear mappings of intensity in perception, CRT's, Film and Video" C. A. Poynton, SMPTE Journal, December 1993 
HUNT 1: "Measuring Color" second edition, R. W. G. Hunt, Ellis Horwood 1991, ISBN 0-13-567686-x (Calculation of CIE Luv and other CIE standard colors spaces) 
"On the Gun Independance and Phosphor Consistancy of Color Video Monitors" W.B. Cowan N. Rowell, Color Research and Application, V.11 Supplement 1986 
"Precision requirements for digital color reproduction", M Stokes MD Fairchild RS Berns, ACM Transactions on graphics, v11 n4 1992 
CIE 2: "The colorimetry of self luminous displays - a bibliography" CIE Publication n.87, Central Bureau of the CIE, Vienna 1990 
HUNT 2: "The Reproduction of Color in PhotoGraphy, Printing and Television", R. W. G. Hunt, Fountain Press, Tolworth, England, 1987 
"Fully Utilizing Photo CD Images, Article No. 4, PhotoYCC Color Encoding and Compression Schemes" Eastman Kodak Company, Rochester NY (USA) (1993). 
ULICHNEY: "Digital halftoning", Robert Ulichney, MIT Press, 1987, ISBN 0-262-21009-6 

Comments and thanks 
11 - Comments and thanks 
Whenever you would like to comment or suggest me some informations about this or about the color space transformations in general, please use email: dbourgin@ufrima.imag.fr (David Bourgin) if, and only if, this e-mail appears to be unavailable, please use email: bourgin@obs-besancon.fr (David Bourgin) (I preferr the first email for several reasons, such as good tools at imag.) 

Special thanks to the following persons (there are actually many other people to cite) for contributing to valid, see even to write some part of the sections: 

Adrian Ford (ajoec1@westminster.ac.uk) for help in sections 2, 4 
Tom Lane (Tom_Lane@G.GP.CS.CMU.EDU) for general help when I started this FAQ 
Alan Roberts and Richard Salmon (Alan.Roberts@rd.bbc.co.uk, Richard.Salmon@rd.eng.bbc.co.uk) for help in sections 5, 6, 6.1, 6.2, 8.3 
Grant Sayer (grants@research.canon.oz.au) for help in sections 8.8, 8.9, 8.10 
Steve Westland (coa23@potter.cc.keele.ac.uk) for general help 
Christian Steyaert (steyaert@vvs.innet.be) for help in section 8.2 
Glenn Davis (glennd@starconn.com) for help in section 8.10 
If you have no ftp access but e-mail access and want to get a file (such as an update of this faq) you can do it via e-mail. There are several servers able to do so. For example, an ftp mail server exists with the e-mail: ftpmail@ftp-gw-1.pa.dec.com Send "help" in the "Subject:" line of your mail. 

HTML translation by: 

Last HTML update: 29/5/95 
Posted Date: 18/4/95 
Last update: 3/4/95 
Rick Davis <rld@sgi.com> 
--------------------------------------------------------------------------------
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\metronom\readme.txt ===
DirectShow Sample -- Metronome Filter
-------------------------------------

This sample filter shows how to implement a reference clock.  The filter uses 
your default microphone input to listen for audio spikes (clicks, hand claps, 
coughs, etc.), which it will use to determine a clock rate.

After building the filter, run the included .REG file to register the DLL
(metronom.ax).  Copy the metronom.ax file to your windows system directory
(ie. \winnt\system32\metronom.ax).

To use the filter:
     - Build a filter graph with a video component (or audio and video)
     - Delete the "Default DSound Renderer" from the graph (which removes
         the reference clock from the graph)
     - Select Graph->Insert Filters in GraphEdit
     - Expand the DirectShow Filters node and insert the "Metronome" filter
     - Play the graph
     - The video will begin playing at normal speed.  To modify the speed,
         clap your hands or use a metronome to set a new speed.  For best
         results, start clapping at the same rate that you were clapping
         when you set the clock rate, then speed up or slow down the rate.


Release Notes
=============

1.  This filter works for VIDEO ONLY.  Our audio renderer is not capable 
of slaving  to radically different clock rates.   Make a graph in graphedit 
of some video file, and then Insert the "metronome" filter into the graph.  
If the clip contains an audio component, then remove the "Default DSound 
Renderer" from the filter graph.  Play the graph.

2.  Clap into your microphone.  If you clap 92 times per minute (once every 
~652 ms) the movie will play at the normal rate.  You can change this default 
near the top of the .cpp file.  Clap faster or slower, and the playback rate 
of the video will change accordingly.  

3.  Or, hook up an electronic metronome by a cable to your sound card, and 
turn the dial and watch the video playback speed change.

4.  If you don't clap for any length of time, it keeps on at the old rate, 
so you can give your hands a rest.  But when you start clapping again, you must 
start clapping at about the same speed you left off at, and then slow down 
or speed up, or it will ignore you.  To be precise:  Don't suddenly start 
clapping more than TWICE as slow as you were before you stopped, or you'll 
be ignored.

5.  DShow can't play infinitely fast.  The limit depends on your CPU speed.  
If you try and go much faster than is possible for any length of time, it will 
get confused, will stop working, and you won't be able to slow it down.  
Press STOP and PLAY again.


The only important rule for writing a clock is this:  
    Your clock can NEVER GO BACKWARDS!

When you are asked what time it is, never give a time before the last reported time.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\midi\dmusic\todo.txt ===
Remaining work items:

* IMediaSeeking

* Bypass performance, segment objects and do our own MIDI parsing, note messages straight to the port.

* Performance

  - Responsiveness to Active() too slow! The DirectMusic objects need to be created on the same thread as they are accessed, otherwise DirectMusic-related start dying.

  - Running the graph, stopping the graph, then rerunning the graph DM ports are messed up

* Extras
  - Property sheets displaying DirectMusic-performance information, latency times
  - Why does ASYNC->DMUSIC->WAVDEST (sdk sample)->File Writer not work?
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\wdm\cam1394\video.txt ===
0xffb4e000  0x60739775 0x5d7a9a76 0x63789879 0x627d9878
0xffb4e010  0x617b987a 0x647b957c 0x607a9677 0x637d9677
0xffb4e020  0x677d9483 0x617d9580 0x64829485 0x697d9779
0xffb4e030  0x6e789474 0x6c7c947f 0x69869188 0x6a839186
0xffb4e040  0x6a848f85 0x66899086 0x657f9384 0x6a839482
0xffb4e050  0x697c957c 0x68839284 0x68848e87 0x68878d87
0xffb4e060  0x69888a8e 0x68888d8c 0x69869080 0x68849280
0xffb4e070  0x65859182 0x678b8c8a 0x698c8e86 0x6483937d
0xffb4e080  0x5c809384 0x60899283 0x667f9381 0x69859187
0xffb4e090  0x6a809184 0x66828f8b 0x688b8c8d 0x68878c88
0xffb4e0a0  0x65918a8e 0x6587898f 0x64918a8a 0x668b8e8a
0xffb4e0b0  0x68858e8b 0x64868d8c 0x65888e8a 0x688b8b91
0xffb4e0c0  0x6b8c888c 0x69908990 0x678f888f 0x68968892
0xffb4e0d0  0x678d8a8b 0x678c8a8e 0x6b91898a 0x698a8b8a
0xffb4e0e0  0x668b8a8b 0x668d8991 0x698f8991 0x698f8890
0xffb4e0f0  0x6d918696 0x6e968697 0x69928894 0x668d8b83
0xffb4e100  0x6b868991 0x6d90888d 0x688f8c8a 0x69878d85
0xffb4e110  0x688a8c8c 0x69898b87 0x6a8f8894 0x6a978794
0xffb4e120  0x6892898f 0x678b898c 0x698c898c 0x6b8e8891
0xffb4e130  0x6a968693 0x6b948694 0x6d958693 0x6c998693
0xffb4e140  0x6b90898d 0x6b8b8b88 0x698a8893 0x6b958790
0xffb4e150  0x6c8c8891 0x6b938794 0x6b90888f 0x6d8b8892
0xffb4e160  0x6d95888d 0x6b898889 0x6d8f8892 0x6d8c8986
0xffb4e170  0x69898b8a 0x688a8b8a 0x6a8d898e 0x648b8a85
0xffb4e180  0x69868e89 0x6f828d86 0x6c888895 0x6996888f
0xffb4e190  0x678c8a8b 0x6a878e84 0x69868e8c 0x6a898a89
0xffb4e1a0  0x6a8c878f 0x6a91888c 0x688c898e 0x64908d89
0xffb4e1b0  0x69799668 0x785cb04b 0x7a4ac24b 0x754dc14f
0xffb4e1c0  0x714dbf53 0x744dc355 0x7250c554 0x6f55c653
0xffb4e1d0  0x6a54c554 0x6150c352 0x624cc24d 0x634ebf4d
0xffb4e1e0  0x654fbe50 0x6653c354 0x645ac359 0x645ac25a
0xffb4e1f0  0x6a57be59 0x6d56be57 0x6559c159 0x5b5dc054
0xffb4e200  0x665bbb5a 0x6d5cb859 0x6855bc53 0x7050ba51
0xffb4e210  0x7154b64e 0x674bba47 0x6942ba43 0x7042b93f
0xffb4e220  0x7145b13d 0x7031a434 0x7331a230 0x6e29a630
0xffb4e230  0x6a38ad3b 0x7237a738 0x81319a2d 0x872c9826
0xffb4e240  0x7d269a26 0x7c289928 0x7825a325 0x712d9e2b
0xffb4e250  0x691c9620 0x6a249022 0x751d8f1f 0x7d1f921b
0xffb4e260  0x7f20921e 0x801d9322 0x811f9420 0x7d20951f
0xffb4e270  0x80249b20 0x7c229f21 0x7b229a23 0x8322911c
0xffb4e280  0x64749678 0x60799779 0x617b977c 0x5f789678
0xffb4e290  0x6179977a 0x647b977c 0x617f9776 0x617c967d
0xffb4e2a0  0x68889287 0x6a81947e 0x677e9683 0x6b7b967f
0xffb4e2b0  0x6e759380 0x6c7e9380 0x6d839281 0x6a809183
0xffb4e2c0  0x66829184 0x62869084 0x5c819284 0x6286937c
0xffb4e2d0  0x657c9381 0x69878f84 0x6d888c8d 0x6a8f8b89
0xffb4e2e0  0x6c8c8c96 0x688a8d8d 0x66898f86 0x68849187
0xffb4e2f0  0x66849184 0x66858f8a 0x6b868f84 0x6c859183
0xffb4e300  0x63848f8a 0x65888f82 0x6b88917f 0x6a869188
0xffb4e310  0x6a809080 0x65898f86 0x66848f84 0x638a8d86
0xffb4e320  0x5f908a8f 0x618a8a8a 0x618a8b8f 0x64898b89
0xffb4e330  0x68898c89 0x64848d87 0x64858d87 0x648b8a87
0xffb4e340  0x6990898c 0x688e8a8e 0x668d898f 0x6c92888f
0xffb4e350  0x68918a8e 0x65898c89 0x688c8b89 0x688b8c8d
0xffb4e360  0x688a8c8a 0x65898a8f 0x6790898f 0x678a898f
0xffb4e370  0x6c938799 0x70998697 0x6c958792 0x698b8a84
0xffb4e380  0x6a8c8794 0x68958893 0x69868b86 0x6c848a8d
0xffb4e390  0x6a8b8891 0x6a928992 0x6d8d8893 0x6b91888f
0xffb4e3a0  0x688b8a90 0x698b898d 0x668e898f 0x668e898f
0xffb4e3b0  0x6b958792 0x6d948891 0x6e8e8791 0x6b958791
0xffb4e3c0  0x698c8a8a 0x6c8d8b8b 0x698e8995 0x6993888f
0xffb4e3d0  0x6b8b8892 0x6b948895 0x6e918893 0x73928897
0xffb4e3e0  0x708d888a 0x6c8a8890 0x70948795 0x708c8887
0xffb4e3f0  0x6e8c8a90 0x6c8f8b90 0x688f8a8b 0x668a888c
0xffb4e400  0x6b898a8a 0x6d8a8c88 0x688c8991 0x6791898d
0xffb4e410  0x668a8c87 0x6c898e89 0x6d868c8d 0x69908b8a
0xffb4e420  0x6e8b898d 0x6e918992 0x6a8c898e 0x668f8d87
0xffb4e430  0x6a7c986d 0x785cb352 0x784ec350 0x734cc050
0xffb4e440  0x7453be54 0x7a55c055 0x7a57c058 0x745bc157
0xffb4e450  0x6853c05a 0x6853bf54 0x6555bc53 0x5951b956
0xffb4e460  0x575ab759 0x5b5bb95d 0x5a5fbb59 0x5b5dbb5d
0xffb4e470  0x625bbb5a 0x6459bd5a 0x5d56c15c 0x535cc259
0xffb4e480  0x605cc263 0x695ec15a 0x6651be52 0x774eb94c
0xffb4e490  0x784cb83e 0x6e42b73d 0x6b40b43b 0x743fb036
0xffb4e4a0  0x793bab2f 0x7131a631 0x7837a535 0x7730a437
0xffb4e4b0  0x6540ab3f 0x663baa38 0x832f9c29 0x87289726
0xffb4e4c0  0x75219825 0x681f9724 0x6b219c1e 0x7b239921
0xffb4e4d0  0x7f20911c 0x6f198d1d 0x731b8d1f 0x7f1e921c
0xffb4e4e0  0x871d9320 0x861f9623 0x80239923 0x7e229724
0xffb4e4f0  0x781f9823 0x6e239d22 0x71239b21 0x83229420
0xffb4e500  0x677a9579 0x67789477 0x667b957c 0x647a9378
0xffb4e510  0x6378967a 0x637a9782 0x637b9777 0x657a9482
0xffb4e520  0x68829186 0x6a7f937f 0x68809779 0x6a809480
0xffb4e530  0x6c819084 0x6b7f9280 0x6b819383 0x69869183
0xffb4e540  0x697e9184 0x66899084 0x62839183 0x67859381
0xffb4e550  0x65819182 0x67848e8a 0x6c898b89 0x688a8b85
0xffb4e560  0x66898d89 0x64858e8b 0x64888f83 0x66849185
0xffb4e570  0x68849181 0x68849182 0x6a849084 0x6a848f89
0xffb4e580  0x65888b91 0x658d8b8c 0x69849084 0x68859087
0xffb4e590  0x6a848e86 0x6a8a8e87 0x687f917f 0x65898f89
0xffb4e5a0  0x62898c8c 0x628d8c89 0x65868b89 0x678d888d
0xffb4e5b0  0x688d8a8a 0x68898c89 0x678c8c87 0x66898a8b
0xffb4e5c0  0x68918a89 0x68888c8e 0x688b898f 0x6b8f888f
0xffb4e5d0  0x6a8d8a8e 0x69868e85 0x68888d89 0x668c8b8d
0xffb4e5e0  0x688c8e85 0x65888b8d 0x688d898d 0x69898990
0xffb4e5f0  0x6b928790 0x6d928792 0x6b948891 0x69918989
0xffb4e600  0x668a8890 0x66938891 0x688b888f 0x688f898d
0xffb4e610  0x66938796 0x6995888f 0x6b8c8890 0x688d8a8c
0xffb4e620  0x67888c8b 0x6b8b8a8e 0x6a91898d 0x63908a8e
0xffb4e630  0x688d8990 0x6c8f898a 0x6d8f8892 0x6d948790
0xffb4e640  0x6b8e888d 0x698c8a8e 0x6689898e 0x6691888e
0xffb4e650  0x658d898e 0x658d8a8b 0x6b8a8790 0x6e8f8890
0xffb4e660  0x6d8c898c 0x6c928794 0x6e968791 0x6f92878c
0xffb4e670  0x6c8a888e 0x698e8c8b 0x67878b8d 0x68928898
0xffb4e680  0x6d91888c 0x6e888b8e 0x688d8b8c 0x688a8c8a
0xffb4e690  0x69868e85 0x698a8d8a 0x68878c8a 0x688b8b8d
0xffb4e6a0  0x6a89898e 0x668f8991 0x668d898f 0x668d8e8b
0xffb4e6b0  0x697d986c 0x715eb350 0x6e51c354 0x6956be51
0xffb4e6c0  0x6b59bc58 0x6f56bd59 0x6e59bb5d 0x6c57bb52
0xffb4e6d0  0x6859bc55 0x6655b957 0x6055b558 0x5a56b35b
0xffb4e6e0  0x565ab25f 0x5560b461 0x505eb662 0x4d5db861
0xffb4e6f0  0x5f5eb859 0x685dbf58 0x5b53c455 0x5655c64e
0xffb4e700  0x6549cb4f 0x6d4fcc4c 0x6f44bb3f 0x783db337
0xffb4e710  0x773cb838 0x7338b538 0x7534ad34 0x7733a635
0xffb4e720  0x7b30a427 0x742fa62d 0x713da634 0x7731a133
0xffb4e730  0x643caa41 0x603fad3b 0x7b339e2e 0x85299628
0xffb4e740  0x80249626 0x7a289522 0x7c239221 0x7f238f20
0xffb4e750  0x7d24881f 0x761e881e 0x771c8819 0x7b1e9019
0xffb4e760  0x841d921c 0x841f971f 0x7e209d24 0x83249923
0xffb4e770  0x80229621 0x74219b21 0x75219c21 0x80219821
0xffb4e780  0x697e9574 0x6c79957b 0x6b7e967c 0x67799576
0xffb4e790  0x6579977b 0x647e9680 0x687c967d 0x6a7a957f
0xffb4e7a0  0x68849287 0x6a839484 0x687d9578 0x69819482
0xffb4e7b0  0x698a9186 0x6a809284 0x6a839182 0x67879086
0xffb4e7c0  0x6b819187 0x6984917e 0x67849287 0x6a839281
0xffb4e7d0  0x667f9383 0x66849188 0x69838e84 0x65858e84
0xffb4e7e0  0x61848f85 0x61858d8a 0x618a8f88 0x65829282
0xffb4e7f0  0x6882937d 0x69859287 0x68849186 0x69888f84
0xffb4e800  0x688b8c90 0x668f8b8a 0x68868e83 0x66868e8a
0xffb4e810  0x6a858c8c 0x6e8a8c8a 0x69898c84 0x68888e8c
0xffb4e820  0x66858c8b 0x63878c8a 0x678b8b84 0x6a908893
0xffb4e830  0x68908a8e 0x6b868d8a 0x6a8b8d89 0x68868a8d
0xffb4e840  0x6a8f8b8d 0x68808d89 0x698d8990 0x6b908890
0xffb4e850  0x6c908b8a 0x6d838d84 0x69868c87 0x678e8b8d
0xffb4e860  0x698b8d84 0x63868c91 0x67918990 0x6c8c898f
0xffb4e870  0x6b948890 0x6a8f8890 0x6c8e8890 0x6a8f888d
0xffb4e880  0x648a8990 0x66958990 0x698e898f 0x66928893
0xffb4e890  0x6490898f 0x698d8990 0x688d898e 0x668b8b87
0xffb4e8a0  0x678b8d8a 0x6e8c8b8f 0x6e8f8990 0x658d8993
0xffb4e8b0  0x68918990 0x6b94888d 0x6c908799 0x6e978798
0xffb4e8c0  0x6d92888e 0x688c8a8e 0x638a8a8b 0x608b898e
0xffb4e8d0  0x60908a8d 0x648c8b86 0x66858a8d 0x678c8993
0xffb4e8e0  0x6b93888e 0x6d938797 0x6d958790 0x6d8b8990
0xffb4e8f0  0x69938a8d 0x688a8c88 0x68858a88 0x6b938799
0xffb4e900  0x6f94878c 0x708e8c89 0x6b838c8b 0x6a8b8b89
0xffb4e910  0x6c8a8c89 0x67888d88 0x64858b8a 0x6a8e888c
0xffb4e920  0x668b898d 0x60888a8c 0x62888b88 0x66859184
0xffb4e930  0x667e996d 0x6f61ad56 0x6c52bd56 0x6352bd54
0xffb4e940  0x6457bc56 0x6756bb58 0x6657b958 0x6657ba58
0xffb4e950  0x6b51bc55 0x6653ba56 0x5f53b953 0x5e55b752
0xffb4e960  0x5d54b451 0x574eb44e 0x4b48b946 0x4644b844
0xffb4e970  0x6144b846 0x713dbf3d 0x603ac231 0x5e37c23a
0xffb4e980  0x6d35c73a 0x7147c945 0x723dbe2f 0x7533b538
0xffb4e990  0x7337b838 0x7736b739 0x7b38b134 0x7535aa33
0xffb4e9a0  0x7c33a534 0x772da832 0x6c3cac46 0x753ea72d
0xffb4e9b0  0x6a34a54b 0x683fa131 0x772e9c2c 0x852e9a2a
0xffb4e9c0  0x8a2a9927 0x88269426 0x89249123 0x80208c23
0xffb4e9d0  0x7a23881d 0x7c1d861c 0x7916871e 0x79178e1d
0xffb4e9e0  0x831b9021 0x851c941d 0x8124971b 0x89229421
0xffb4e9f0  0x87209320 0x7c1d9720 0x7c1d9723 0x8122931f
0xffb4ea00  0x667b967a 0x6778977b 0x687c9781 0x6c789679
0xffb4ea10  0x6279987d 0x5b7e9582 0x6680947b 0x6a77937e
0xffb4ea20  0x697e9580 0x697f9484 0x67809481 0x61829481
0xffb4ea30  0x6286947f 0x697e9283 0x67828f86 0x66868e89
0xffb4ea40  0x6c868f84 0x69809282 0x66849284 0x6b809380
0xffb4ea50  0x6b83947c 0x677e9482 0x66879189 0x66818f81
0xffb4ea60  0x63878f85 0x63868d86 0x638e8f86 0x677e9383
0xffb4ea70  0x6c7c957d 0x6c809285 0x6a889085 0x6b859086
0xffb4ea80  0x68818f86 0x65858c8f 0x66898b84 0x67898b8b
0xffb4ea90  0x6a8a898d 0x6b8e888e 0x6c8b898e 0x6d888c87
0xffb4eaa0  0x6a8a8c87 0x66888a8d 0x688e8a8a 0x65898990
0xffb4eab0  0x65918a8e 0x67878e84 0x678a8e89 0x698b8a8a
0xffb4eac0  0x6d908c8a 0x6c868e89 0x6990898f 0x6994898c
0xffb4ead0  0x6a8d898b 0x698d8b89 0x6a878a8b 0x698b8a87
0xffb4eae0  0x66898c88 0x648a8b90 0x65958990 0x6a8b8990
0xffb4eaf0  0x6a8f898e 0x698b8a8a 0x6b90888d 0x698f898e
0xffb4eb00  0x658d898e 0x658d898f 0x6788898c 0x67908990
0xffb4eb10  0x6a8d898f 0x6d8a8a8c 0x698c8991 0x668c8c88
0xffb4eb20  0x698a8e86 0x6d878c8e 0x6d8c8a8e 0x6b8e8891
0xffb4eb30  0x6b948791 0x698c8891 0x6b918696 0x6b99869a
0xffb4eb40  0x6a90888f 0x66908990 0x62888c8b 0x63868d8a
0xffb4eb50  0x668d8a90 0x698d8a8a 0x6c868c89 0x6b8b8890
0xffb4eb60  0x6b958790 0x6a928792 0x6b978791 0x6b8b8990
0xffb4eb70  0x688f8a8d 0x6c8c8b8d 0x6b8c888d 0x698c8896
0xffb4eb80  0x6b90888b 0x6b878c8b 0x698b8c88 0x6d8a898f
0xffb4eb90  0x6c93888d 0x67868c8b 0x678b8a8a 0x6a8e8890
0xffb4eba0  0x678f898d 0x688e898f 0x6a8a8c88 0x68869383
0xffb4ebb0  0x657b9a70 0x6d5ca84e 0x704bb247 0x6147be46
0xffb4ebc0  0x6649bb4c 0x7046b646 0x7040b343 0x6f41b33c
0xffb4ebd0  0x7439b33a 0x6f3cb235 0x6c36b438 0x6f38b43c
0xffb4ebe0  0x6c3eae3c 0x673daa3d 0x6337ad38 0x6638a93e
0xffb4ebf0  0x6f3bac3e 0x783cb338 0x713db338 0x6c3bb539
0xffb4ec00  0x723fbe40 0x7344c44d 0x704dbe4e 0x733db540
0xffb4ec10  0x7537b83d 0x763bb53b 0x7c39b239 0x793cab35
0xffb4ec20  0x7d35a735 0x7833a930 0x6433b343 0x7141ad2f
0xffb4ec30  0x6e29a32b 0x6d2c9927 0x7a269a21 0x7c289e2a
0xffb4ec40  0x7d269a2a 0x7b279328 0x7e268d26 0x82258927
0xffb4ec50  0x81278720 0x841d821b 0x8117851a 0x821a8b17
0xffb4ec60  0x89198c1a 0x831d8f1b 0x7c1f8f1f 0x891e8d1e
0xffb4ec70  0x8c1b9020 0x8020951b 0x7a1d9222 0x7d1e8e1c
0xffb4ec80  0x627d9680 0x64799777 0x677c9780 0x6e7c9777
0xffb4ec90  0x617c9779 0x537f9781 0x64789572 0x6b819280
0xffb4eca0  0x6a7b957a 0x687f947e 0x66829481 0x5d7f957e
0xffb4ecb0  0x5c7c957d 0x69829385 0x65848f87 0x66878c8b
0xffb4ecc0  0x6e8a8e84 0x67869182 0x66869287 0x6c859485
0xffb4ecd0  0x717f9480 0x69809285 0x65878f88 0x67878f86
0xffb4ece0  0x64858f84 0x658c8d86 0x668b8f82 0x6a7f9382
0xffb4ecf0  0x70809284 0x70868f88 0x6c888f88 0x6c888f88
0xffb4ed00  0x68838e88 0x64868c89 0x63878c8a 0x6788898c
0xffb4ed10  0x6c918894 0x688a898a 0x6e898892 0x718b8a8b
0xffb4ed20  0x6c848a8d 0x6a8d888f 0x688f8984 0x648c8a8e
0xffb4ed30  0x63918b8d 0x64828e84 0x658a8e87 0x6b8b898f
0xffb4ed40  0x6f94898d 0x708d8b8c 0x698b8990 0x678e8891
0xffb4ed50  0x698e8990 0x69968891 0x6c8e888f 0x6a8a8b87
0xffb4ed60  0x638a8d89 0x688a8c8b 0x68868a87 0x6a948992
0xffb4ed70  0x6a8a8990 0x678c8a8d 0x6891898d 0x67888995
0xffb4ed80  0x678e898c 0x6685898b 0x66918895 0x6a8c8792
0xffb4ed90  0x6f96888c 0x71898a8c 0x6a8d898c 0x678f8988
0xffb4eda0  0x6d89898a 0x6c8c8a8c 0x6e8c8c8a 0x6f8e8892
0xffb4edb0  0x6c968793 0x67908892 0x69948794 0x68958793
0xffb4edc0  0x68948893 0x678f8990 0x638e8990 0x688c8a8b
0xffb4edd0  0x6d8e8990 0x6f908895 0x70928890 0x6d948793
0xffb4ede0  0x6a92878f 0x678f8890 0x6a918795 0x6c908991
0xffb4edf0  0x6a8b8b8f 0x6f8d898e 0x6d91898c 0x678a898f
0xffb4ee00  0x68928990 0x658e8c87 0x688c8a8f 0x7291889a
0xffb4ee10  0x6d978891 0x688b8a8b 0x6b8d8890 0x6b948891
0xffb4ee20  0x6a95888f 0x70918894 0x7191888d 0x6c8a8f8a
0xffb4ee30  0x647a996d 0x6e55a141 0x7433a434 0x6333af3a
0xffb4ee40  0x682fb239 0x7b37ad3a 0x7a35ab34 0x7634ad3c
0xffb4ee50  0x7c35b038 0x7437b237 0x763cb338 0x7d3fb237
0xffb4ee60  0x773eb13d 0x703aac39 0x7138aa35 0x7738a939
0xffb4ee70  0x773cac3a 0x7a3cb046 0x7b3ab23c 0x743eb33d
0xffb4ee80  0x7642bb44 0x744cc14d 0x6f54bc4a 0x7547b740
0xffb4ee90  0x7a40b53c 0x773bb23a 0x7e38b139 0x7e35ad36
0xffb4eea0  0x7f32a733 0x7b35aa31 0x6933aa33 0x742ea32d
0xffb4eeb0  0x78229c20 0x73219624 0x80229723 0x76269b27
0xffb4eec0  0x6f22992b 0x6d239624 0x76258f27 0x8527862b
0xffb4eed0  0x88278124 0x8c1f811b 0x8b14891b 0x8c198c18
0xffb4eee0  0x93188c1b 0x86188d1b 0x7815881f 0x891d881b
0xffb4eef0  0x92208e16 0x841c901b 0x7a208d17 0x791c8d1b
0xffb4ef00  0x6a7c957f 0x677a9775 0x657f977f 0x6d79977a
0xffb4ef10  0x667c9683 0x5a7f977a 0x64799578 0x6c7d917e
0xffb4ef20  0x6b79937c 0x697b9484 0x6784937e 0x607f957f
0xffb4ef30  0x5f7c947b 0x67849384 0x667f8f86 0x678a8a89
0xffb4ef40  0x69888c89 0x65849181 0x67889387 0x6d829480
0xffb4ef50  0x6d819284 0x6a839184 0x68888f85 0x68888f88
0xffb4ef60  0x67848f85 0x65878d87 0x618b8f82 0x62839382
0xffb4ef70  0x6c848f88 0x6e888c88 0x6b8b8d85 0x69888e8a
0xffb4ef80  0x688c8c8a 0x698b8d84 0x67878c8f 0x698c888f
0xffb4ef90  0x6c958895 0x6d8a8a84 0x708d8795 0x7090888c
0xffb4efa0  0x6c8d888d 0x688f8990 0x668f898a 0x668c8a8c
0xffb4efb0  0x688b8c88 0x66848d8a 0x66888d86 0x69878993
0xffb4efc0  0x6c908892 0x6e94898a 0x668b8893 0x66998794
0xffb4efd0  0x66908892 0x64928892 0x6792898e 0x668b8c89
0xffb4efe0  0x66898d89 0x6c8e8b88 0x6988898d 0x6a93898b
0xffb4eff0  0x69888a8b 0x658b8a8d 0x6890898e 0x6d8c8893
0xffb4f000  0x6e95888e 0x6b878890 0x67998796 0x68958794
0xffb4f010  0x6c958890 0x718b8b89 0x6d8d8990 0x69948891
0xffb4f020  0x6c928797 0x6c93898c 0x6f868e88 0x6e8a8991
0xffb4f030  0x6b958698 0x69978791 0x6a938796 0x6992888e
0xffb4f040  0x66908893 0x6390888e 0x668b8891 0x6d8f888d
0xffb4f050  0x6b8f898e 0x6d8e8892 0x6e938794 0x6b93869a
0xffb4f060  0x68968792 0x678f8894 0x69928892 0x6a8f898c
0xffb4f070  0x6b898b87 0x6d8f8891 0x6f918989 0x6a8e898b
0xffb4f080  0x6890888d 0x66888b88 0x698f8992 0x7091878f
0xffb4f090  0x6e938992 0x6a89888b 0x6a918891 0x6891898e
0xffb4f0a0  0x678f898f 0x6e908890 0x6d918792 0x67938c8a
0xffb4f0b0  0x647f976a 0x7a5a9845 0x82348f37 0x74339c34
0xffb4f0c0  0x7339a537 0x7d3ea13b 0x7e35a03a 0x7933a438
0xffb4f0d0  0x7337ac3a 0x7238b33c 0x7a3bb141 0x7b3cad40
0xffb4f0e0  0x7437b23f 0x7341ad3d 0x7b36a539 0x7e35a735
0xffb4f0f0  0x7438ab38 0x793eaf38 0x7a3bb239 0x733cb042
0xffb4f100  0x703bb843 0x6f45c14a 0x6554bc58 0x664eb943
0xffb4f110  0x733bb33a 0x783aad35 0x7b37b037 0x7833ad3b
0xffb4f120  0x792fa931 0x7830a932 0x732fa030 0x802b9726
0xffb4f130  0x83249028 0x801b8c22 0x811f9221 0x7d229723
0xffb4f140  0x7e249625 0x79219822 0x7e2a8f25 0x8229852b
0xffb4f150  0x872d7e27 0x90237f1b 0x88198b19 0x87188b1a
0xffb4f160  0x8b188b17 0x7c1b881d 0x79197e18 0x8d197f18
0xffb4f170  0x8d19891b 0x7d1c8a19 0x7c1f881a 0x7c1d8a1a
0xffb4f180  0x6f839480 0x6977967a 0x607c997b 0x6d7c967c
0xffb4f190  0x68829384 0x6081957e 0x6581957b 0x6b7b937f
0xffb4f1a0  0x6c7c947c 0x6a829486 0x687f947f 0x5e7f957c
0xffb4f1b0  0x607d9583 0x68849483 0x6a7f917d 0x68898d88
0xffb4f1c0  0x64868e89 0x6284947c 0x6a7f9681 0x6f7e957f
0xffb4f1d0  0x6b869186 0x6b858f86 0x6d848d87 0x6a898d87
0xffb4f1e0  0x6b849183 0x65848f87 0x5b859085 0x5c849380
0xffb4f1f0  0x68849087 0x6c8b8d8b 0x69868d81 0x678b8c8c
0xffb4f200  0x68908b8b 0x6e888c87 0x6d8a8b8c 0x6c8a888f
0xffb4f210  0x6d93888f 0x718b8c84 0x728c8c90 0x6f8d898f
0xffb4f220  0x6d8c898b 0x678e898f 0x668f8990 0x69938b89
0xffb4f230  0x6c888e87 0x68888e8a 0x67898c89 0x67898a8f
0xffb4f240  0x69958a89 0x6a8b8b8b 0x62888a92 0x66928897
0xffb4f250  0x658f888a 0x6687898e 0x6594898c 0x638b8f8a
0xffb4f260  0x6a868e8a 0x6d938c8f 0x6c8b8a92 0x6a96898d
0xffb4f270  0x698a8b8a 0x658a8c8a 0x688d8a8c 0x718f879c
0xffb4f280  0x73a08797 0x708b8891 0x6b918795 0x68988792
0xffb4f290  0x6890898e 0x708e8989 0x708d888e 0x6d948891
0xffb4f2a0  0x6d928799 0x6e98888e 0x71898a8d 0x6d8e888d
0xffb4f2b0  0x6b938695 0x6d958792 0x6b908790 0x6a918892
0xffb4f2c0  0x668d898c 0x62858a81 0x6c878890 0x718f878f
0xffb4f2d0  0x698c898d 0x6a8d8990 0x6b918792 0x6a91869b
0xffb4f2e0  0x6a998796 0x6789898d 0x69908894 0x678e898b
0xffb4f2f0  0x69898b86 0x6c898994 0x7294898b 0x6d88898a
0xffb4f300  0x66918994 0x6b8f888c 0x6b948892 0x6e93888f
0xffb4f310  0x728f898b 0x6c87898a 0x6b8d898d 0x6a8c898b
0xffb4f320  0x678b8a8d 0x6d90888e 0x6a91888e 0x638b8c89
0xffb4f330  0x657a956b 0x85579744 0x88329336 0x79389e39
0xffb4f340  0x7636a63d 0x7c3ca73a 0x7d37a73c 0x7938a839
0xffb4f350  0x6a3daf3d 0x6f3fb53f 0x7b44b439 0x783db042
0xffb4f360  0x743caf3f 0x793fab3c 0x8238a938 0x8538a936
0xffb4f370  0x7533aa31 0x783cab37 0x7d33ae38 0x7635ad37
0xffb4f380  0x703eb039 0x7042b63d 0x6340b236 0x6137ad34
0xffb4f390  0x7034ac2e 0x7b37a933 0x7d36a930 0x7534a831
0xffb4f3a0  0x752fa831 0x7732a72c 0x7b2ea22b 0x882b9a28
0xffb4f3b0  0x8c219223 0x89239120 0x841d9120 0x88219226
0xffb4f3c0  0x8c23951d 0x87259721 0x88288c26 0x80228529
0xffb4f3d0  0x872e8029 0x9523831f 0x87158c1a 0x81178c19
0xffb4f3e0  0x861a8b1a 0x73188818 0x75138420 0x8d1b8517
0xffb4f3f0  0x86198c1a 0x75188e19 0x7d198b1f 0x801d8919
0xffb4f400  0x6b84937e 0x667b9777 0x617d9a7c 0x66789581
0xffb4f410  0x62809186 0x6483937f 0x697d9579 0x697b9484
0xffb4f420  0x68799380 0x69849481 0x687f957f 0x5e80967e
0xffb4f430  0x62799778 0x6b849580 0x6c7b937d 0x68839084
0xffb4f440  0x65859086 0x69839679 0x6d76977e 0x697f967a
0xffb4f450  0x67849289 0x6a888e81 0x6d858b89 0x6c8b8c88
0xffb4f460  0x6b7e9181 0x65879088 0x60849080 0x64829285
0xffb4f470  0x69859182 0x678d8e8b 0x66898d85 0x638b8a93
0xffb4f480  0x68908b84 0x6d8a8c8e 0x6b898b87 0x6d87898e
0xffb4f490  0x6a8f888e 0x6d898f81 0x70849086 0x6c868c8a
0xffb4f4a0  0x6a8c898c 0x698f898d 0x688b8991 0x6a8e8b8a
0xffb4f4b0  0x6a868f86 0x658a8d89 0x658c8b8a 0x68878c8b
0xffb4f4c0  0x6a8a8d83 0x69888e8a 0x63898c8c 0x608b8b8c
0xffb4f4d0  0x698a8c87 0x6c868a88 0x668e8a8c 0x67889180
0xffb4f4e0  0x6b81908a 0x6d898c87 0x698a8c8a 0x668d8a8c
0xffb4f4f0  0x668a8c8a 0x65868f88 0x688a8c90 0x6c8b8795
0xffb4f500  0x6c988695 0x6c938890 0x6a8b8892 0x6795888d
0xffb4f510  0x6b8e898f 0x708f888e 0x70958791 0x6d91888c
0xffb4f520  0x6b8f8890 0x6c94888e 0x6e8f8890 0x6c948792
0xffb4f530  0x6c978790 0x6b8d8890 0x68928890 0x6b8e8890
0xffb4f540  0x6a8b898b 0x67848c88 0x6b898a86 0x6f8b878e
0xffb4f550  0x698f898b 0x6a8b898f 0x6d90888d 0x6a928793
0xffb4f560  0x69938990 0x688a8b86 0x678b8995 0x6a8e888d
0xffb4f570  0x6c8b8a88 0x6d8d8992 0x71958989 0x6d89898a
0xffb4f580  0x668e8896 0x6c8f888a 0x6a8d8890 0x6c92888f
0xffb4f590  0x708e898a 0x6e8a8a86 0x6f8b8b8b 0x6c888b86
0xffb4f5a0  0x648b8a8a 0x6b8b8b89 0x6c8c898c 0x658c8b8a
0xffb4f5b0  0x647d926c 0x7f589745 0x843c9736 0x7f399f3a
0xffb4f5c0  0x7c38a63e 0x7b39ad3f 0x7e3aac3a 0x7c41ab39
0xffb4f5d0  0x713eb23c 0x7042b843 0x7b3eb743 0x7b41b248
0xffb4f5e0  0x7441ac41 0x7440ab3c 0x7c38ab3c 0x7d38aa38
0xffb4f5f0  0x7838a937 0x7a36a636 0x7b39a733 0x7e31aa2e
0xffb4f600  0x7a29a92f 0x7331ab35 0x7033a433 0x75309c30
0xffb4f610  0x7829a32b 0x7631a531 0x7931a030 0x7633a22e
0xffb4f620  0x742aa62c 0x772ea52b 0x7929a227 0x7f2e992b
0xffb4f630  0x84289224 0x8a249424 0x82258f24 0x7f228b25
0xffb4f640  0x88209321 0x85239422 0x86258925 0x88238427
0xffb4f650  0x8a29832c 0x9123861f 0x871c8c17 0x7c1b8918
0xffb4f660  0x811d8814 0x7c1a8a1a 0x801a861b 0x8b1a891b
0xffb4f670  0x871b8e1a 0x811a8e1c 0x83198b18 0x84198519
0xffb4f680  0x667f947a 0x657e957a 0x647e9779 0x5c7a977c
0xffb4f690  0x5a7e9586 0x68809580 0x6c80967f 0x657e967d
0xffb4f6a0  0x657f947e 0x6b829381 0x6981957d 0x5f7d967c
0xffb4f6b0  0x667d967f 0x6e80947d 0x6d78937e 0x6a849281
0xffb4f6c0  0x68839285 0x6e83957f 0x6e7e977e 0x627c9780
0xffb4f6d0  0x617c957a 0x6984917e 0x6b858c8d 0x6d8f8d87
0xffb4f6e0  0x6b829184 0x67889085 0x64819183 0x68869287
0xffb4f6f0  0x6a7b9189 0x658d8e8a 0x658b8c86 0x61878a97
0xffb4f700  0x6c8c8c87 0x6c858e8b 0x68878d8b 0x6d8d8d8a
0xffb4f710  0x68878d88 0x68849086 0x6f849084 0x68898e86
0xffb4f720  0x668b8a8d 0x6c8e8a8c 0x6e8b8c8e 0x6c8a8f88
0xffb4f730  0x69839086 0x628d8d90 0x638a8c86 0x688a8c8a
0xffb4f740  0x6a908e84 0x69878e89 0x678b8c8a 0x61878d87
0xffb4f750  0x6d8a8c8b 0x708c8a8c 0x69898a8f 0x6b8a8e84
0xffb4f760  0x6c828e84 0x6b878a89 0x688a8a8b 0x64898a8a
0xffb4f770  0x638c8a89 0x68878c88 0x688f8b94 0x678c8a84
0xffb4f780  0x658a898c 0x688e8993 0x678a8990 0x658f8989
0xffb4f790  0x6e8c8993 0x7291888f 0x6e988899 0x6d928a8b
0xffb4f7a0  0x6b898990 0x6a918890 0x6d8f8994 0x6b958894
0xffb4f7b0  0x6c988797 0x69928892 0x68958891 0x6b8f888f
0xffb4f7c0  0x6c8f8992 0x6c91898f 0x6b91878c 0x6b8f8794
0xffb4f7d0  0x6a958693 0x6b908792 0x6f948892 0x6b8e888f
0xffb4f7e0  0x6a93888b 0x6a888987 0x66898993 0x6d8f8890
0xffb4f7f0  0x70968893 0x6e90888e 0x718f8b8a 0x6d888a88
0xffb4f800  0x68908993 0x6d93898b 0x6a858991 0x6a918792
0xffb4f810  0x6f8f8890 0x7092898a 0x72908b8c 0x6e8a8b85
0xffb4f820  0x638a898f 0x6a93888b 0x6f86898a 0x668c8d85
0xffb4f830  0x617b956a 0x7b579942 0x823a9a3c 0x863ba03e
0xffb4f840  0x8239a63d 0x7d3aae3e 0x823eac3f 0x843fa93c
0xffb4f850  0x7a41b343 0x7340b641 0x7b44b444 0x8144b343
0xffb4f860  0x7541ae42 0x6f3aae41 0x773fb243 0x7637b039
0xffb4f870  0x7d3fae37 0x7a38ad36 0x7933ab36 0x8731a429
0xffb4f880  0x8728a425 0x762ca82f 0x772da22b 0x802c9c2a
0xffb4f890  0x802ca130 0x722aa22c 0x732a9d31 0x782a9e2a
0xffb4f8a0  0x792c9e27 0x7b2fa023 0x7a2aa229 0x79309829
0xffb4f8b0  0x7d299132 0x8d2a9129 0x82268d29 0x77268d2d
0xffb4f8c0  0x85289129 0x84278f25 0x84268c26 0x8e268b29
0xffb4f8d0  0x8d2b8828 0x8d268b21 0x881c8e16 0x781d8a1a
0xffb4f8e0  0x7d1c891b 0x871b8919 0x8b1d8918 0x8a198c17
0xffb4f8f0  0x891c9019 0x8a1a911b 0x8b188d1d 0x8a17861b
0xffb4f900  0x617b977c 0x697c937c 0x6b7d9479 0x5c7b9979
0xffb4f910  0x57789c78 0x6478997c 0x6a7f9480 0x677d967e
0xffb4f920  0x667e9581 0x6b819285 0x6b81957f 0x677b977d
0xffb4f930  0x6c7d9480 0x6f82937f 0x6c7d9481 0x697e9481
0xffb4f940  0x6b80937d 0x6c84947f 0x6b84957f 0x687c957e
0xffb4f950  0x69789779 0x6c7f9384 0x6a828d8e 0x688a8e82
0xffb4f960  0x6a808f8a 0x6685907e 0x62839283 0x67869383
0xffb4f970  0x677e9286 0x658a8f8a 0x68898c84 0x64908a8e
0xffb4f980  0x6a8a8e82 0x68829184 0x63878f8c 0x67869089
0xffb4f990  0x65859085 0x69868f84 0x6c868f86 0x66868e86
0xffb4f9a0  0x668b8c8b 0x68868c8a 0x678b8e8c 0x6b859280
0xffb4f9b0  0x6c7c9182 0x668b8c8d 0x66878c8b 0x698c8c8b
0xffb4f9c0  0x6b898e84 0x69888d8b 0x698a8c89 0x688b8c86
0xffb4f9d0  0x6e8e898b 0x6d8f898d 0x698e898f 0x6c888b8c
0xffb4f9e0  0x6c8b8a86 0x6c8b888d 0x6991898d 0x688f898c
0xffb4f9f0  0x698f8991 0x668c898e 0x628a8a94 0x658b8d84
0xffb4fa00  0x63848d87 0x668f898d 0x688e898f 0x648c8b8c
0xffb4fa10  0x67888995 0x6c928890 0x6e8c8992 0x6c8b8c89
0xffb4fa20  0x648c8996 0x66928890 0x6b8b8b8c 0x698b8a8e
0xffb4fa30  0x6990898e 0x688f8890 0x6b908890 0x6d8e888a
0xffb4fa40  0x668f898f 0x658f8891 0x6c958794 0x708f8695
0xffb4fa50  0x6e9d849a 0x6c9e868f 0x6f908890 0x6c8e8991
0xffb4fa60  0x6b90888e 0x6d908891 0x6c8b888f 0x6c8b888f
0xffb4fa70  0x6e968695 0x71928891 0x72888c88 0x69878a90
0xffb4fa80  0x6790898e 0x6c8c8b88 0x6b8a898d 0x6d938796
0xffb4fa90  0x6d8e8890 0x6b8e8991 0x6e8e8b8d 0x6e8c8a8e
0xffb4faa0  0x688e8890 0x6c97878f 0x6d86898c 0x668b8f87
0xffb4fab0  0x647c976e 0x7c569a4a 0x85389c3c 0x853ba03c
0xffb4fac0  0x7e3ca53c 0x7b39af3c 0x8141a942 0x813ba940
0xffb4fad0  0x7839b43d 0x7440b541 0x7946b040 0x7a42b242
0xffb4fae0  0x7740b043 0x7542b140 0x7341b63e 0x7342b53e
0xffb4faf0  0x773bb241 0x7735b23b 0x7d35ab3a 0x88309e31
0xffb4fb00  0x842a9c29 0x7b27a42b 0x7c319f2a 0x80279a2b
0xffb4fb10  0x7f279f2c 0x7c299e2d 0x7c299a27 0x7c2b9829
0xffb4fb20  0x80299528 0x7d259c27 0x7225a126 0x7630962d
0xffb4fb30  0x7d2c902a 0x852a8e2f 0x7d29892c 0x7b2c8b29
0xffb4fb40  0x832e8c2f 0x822f8929 0x842a9027 0x8c269028
0xffb4fb50  0x8c2c8c2b 0x8a248f20 0x7d1c8e1d 0x781c881f
0xffb4fb60  0x8319881f 0x8619881f 0x7f1a8a16 0x841f8d1a
0xffb4fb70  0x891b9119 0x871a931a 0x881b8d1a 0x851d8619
0xffb4fb80  0x5c7a987c 0x6a7d957f 0x6e7f957c 0x5f7a9876
0xffb4fb90  0x59729973 0x6174987b 0x69809582 0x6b7c957e
0xffb4fba0  0x677d947f 0x69849283 0x6d7c947f 0x6d7f957d
0xffb4fbb0  0x707f9581 0x6f7e9385 0x6a819382 0x68849482
0xffb4fbc0  0x6d809480 0x697f9482 0x6881957f 0x6a7c957f
0xffb4fbd0  0x6c7a9483 0x72849183 0x6a848e8c 0x65888f84
0xffb4fbe0  0x69859088 0x64809181 0x63839389 0x68879187
0xffb4fbf0  0x64848f87 0x66868f88 0x6b868e84 0x658a8d87
0xffb4fc00  0x68869083 0x65869085 0x60848f8a 0x638d8d88
0xffb4fc10  0x638c8e87 0x68888e8a 0x698f8c87 0x65858d88
0xffb4fc20  0x658b8d88 0x63898c8c 0x618c8c89 0x69888f88
0xffb4fc30  0x6f828f86 0x6a8c8a8e 0x698d8a8b 0x6a8e8a8b
0xffb4fc40  0x6e888c8b 0x698f8c91 0x6c8c8c87 0x6f8b8d8b
0xffb4fc50  0x708e8b8e 0x6c8b898c 0x6c8f8a88 0x6c8d8890
0xffb4fc60  0x6d95888b 0x6c91888c 0x6c8f888f 0x6c908893
0xffb4fc70  0x6e96879b 0x6693888e 0x5c888a8c 0x62868d86
0xffb4fc80  0x62848b8b 0x6492898c 0x6a8e8994 0x6890898d
0xffb4fc90  0x618c8993 0x6690888d 0x6f918894 0x6a888b85
0xffb4fca0  0x5e8b8a93 0x65928893 0x6d8c888b 0x6b8c888f
0xffb4fcb0  0x6684898b 0x678e8990 0x6e8e888d 0x708a898c
0xffb4fcc0  0x638a8a8a 0x608e898d 0x6d908795 0x75938592
0xffb4fcd0  0x71978499 0x6d988696 0x708d8890 0x6e8d898d
0xffb4fce0  0x6d908792 0x70928790 0x708d888c 0x6c8a888d
0xffb4fcf0  0x6c928798 0x74988693 0x7390888a 0x66878a90
0xffb4fd00  0x6792898d 0x6c89888d 0x6d8f8894 0x70938694
0xffb4fd10  0x6c95878f 0x678b8989 0x6b89898a 0x6e8f898a
0xffb4fd20  0x6c8d878f 0x6c8d878f 0x6c8a888b 0x678e8c8a
0xffb4fd30  0x697d916f 0x7f5c963e 0x8b40983a 0x863f9d35
0xffb4fd40  0x793ba33d 0x7b3caa3d 0x803ca83e 0x7f3da641
0xffb4fd50  0x783fae3c 0x7642b13d 0x773eb13e 0x763fb03e
0xffb4fd60  0x7c43ac3f 0x7d41ad3b 0x7541b340 0x773ab33c
0xffb4fd70  0x753ab13f 0x783ab13b 0x8139ad3b 0x8834a42d
0xffb4fd80  0x82279f31 0x812c9f2d 0x802c9f2b 0x7e309f2a
0xffb4fd90  0x7e2aa22b 0x852ea02e 0x83279c29 0x7e299c28
0xffb4fda0  0x85299728 0x7d279a28 0x6d249a28 0x762d922a
0xffb4fdb0  0x7e2c8c2d 0x7f28892e 0x7a2a8831 0x7f308b32
0xffb4fdc0  0x822f8e30 0x7f308c2f 0x872b8e2d 0x8c289029
0xffb4fdd0  0x8c278d2e 0x8b268b22 0x76198e1b 0x761d8f21
0xffb4fde0  0x8a1d8d1c 0x871b8a1c 0x741a8b1d 0x801b8f21
0xffb4fdf0  0x8a1c9419 0x831b951a 0x871b8e1d 0x8119891b
0xffb4fe00  0x6177987e 0x6b7a967e 0x6c819383 0x657f967c
0xffb4fe10  0x61769476 0x667c9679 0x68819481 0x6a7e947f
0xffb4fe20  0x677f9283 0x69829284 0x6b7f9382 0x6984937f
0xffb4fe30  0x6a7f947a 0x6a859483 0x69819480 0x61829582
0xffb4fe40  0x65809580 0x6983947e 0x687f957d 0x677e9482
0xffb4fe50  0x67849086 0x6b848f82 0x69878e87 0x68868f84
0xffb4fe60  0x6a859185 0x6782927f 0x69859382 0x6b848e89
0xffb4fe70  0x668d8b89 0x63868f86 0x64858f8a 0x64839085
0xffb4fe80  0x68849182 0x67849087 0x66868e85 0x67898a8d
0xffb4fe90  0x658f8c84 0x6b848c8f 0x6c918988 0x68898c8a
0xffb4fea0  0x67888e8a 0x66878b90 0x658b8a8a 0x678a8d8a
0xffb4feb0  0x68888c8b 0x6a91898d 0x6b8c888f 0x698f898d
0xffb4fec0  0x6b8b8a8c 0x65898c8e 0x65888d8a 0x68888e84
0xffb4fed0  0x6b888c8b 0x6d8d898b 0x6d8c8a8a 0x6d8b8894
0xffb4fee0  0x6c948794 0x6b92888d 0x678d8a8b 0x688f8893
0xffb4fef0  0x6c8f8796 0x6b978791 0x6690898e 0x678a8c86
0xffb4ff00  0x69858a90 0x6b918894 0x6b8f888f 0x698c888b
0xffb4ff10  0x6b938893 0x6f8c888d 0x6f908894 0x688a8a8a
0xffb4ff20  0x688d898e 0x6c908793 0x6f8f878f 0x6f8f868f
0xffb4ff30  0x6f92878e 0x6d90888b 0x6f8b898e 0x6d908a8a
0xffb4ff40  0x698b8b87 0x688a8990 0x6e908794 0x75988594
0xffb4ff50  0x7493859a 0x709b8599 0x72918988 0x70898988
0xffb4ff60  0x70938699 0x73928691 0x7390888e 0x728f888b
0xffb4ff70  0x728b878e 0x7694859a 0x7795878c 0x6f88898e
0xffb4ff80  0x718c8891 0x748e878c 0x72918691 0x74938590
0xffb4ff90  0x73938794 0x738a8989 0x738b878e 0x728f8789
0xffb4ffa0  0x758d8691 0x7690868f 0x758c878c 0x718d8792
0xffb4ffb0  0x75878f77 0x83679057 0x8a518f53 0x8650964f
0xffb4ffc0  0x8249a048 0x7f3da63e 0x7e3da63e 0x7d3da43d
0xffb4ffd0  0x763ea83a 0x6f3dad3d 0x6e3eb03b 0x753bad3c
0xffb4ffe0  0x7d3da73f 0x7b3ea940 0x7738b03f 0x793fb03d
0xffb4fff0  0x743cb03c 0x753ab13e 0x7b3dad39 0x813ca933
0xffb50000  0x8132a133 0x7f309b30 0x7d32a02d 0x842ea433
0xffb50010  0x882ca22d 0x872ba12e 0x832c9f2d 0x82279d29
0xffb50020  0x8a2e982a 0x82289626 0x7629902d 0x7a2a8c2c
0xffb50030  0x7a2f882f 0x7a308431 0x722d862f 0x73328b2c
0xffb50040  0x7c339037 0x7c338d36 0x812c8c2a 0x862a9027
0xffb50050  0x892d8d2c 0x8a2c851e 0x80228c1a 0x791b931c
0xffb50060  0x7b1c911c 0x83208b19 0x7b1d891d 0x7b208e1a
0xffb50070  0x82189520 0x801d9516 0x871d901b 0x851c8a1b
0xffb50080  0x6a7b967b 0x6e7c957e 0x6a809485 0x6880957d
0xffb50090  0x677c957b 0x6a7f977e 0x68839480 0x687f9284
0xffb500a0  0x67829283 0x6a849186 0x6a809083 0x65879185
0xffb500b0  0x65819480 0x66869383 0x677c947f 0x5b839681
0xffb500c0  0x5d809581 0x6786947e 0x677f957e 0x657e9287
0xffb500d0  0x63859183 0x66838f85 0x69888e86 0x6c849088
0xffb500e0  0x6b878e88 0x6c869180 0x707d937d 0x6f818e8b
0xffb500f0  0x68928b8b 0x5f848e82 0x5a898f86 0x64889186
0xffb50100  0x6a859180 0x69848e86 0x6a8a8d87 0x6a888c8b
0xffb50110  0x68888d86 0x6f8a8b90 0x6e8d898e 0x6b8b8b8b
0xffb50120  0x698b8e84 0x68848e8c 0x688a8a8b 0x66938b8e
0xffb50130  0x638a8e87 0x698b8e88 0x6d888a8b 0x6894898d
0xffb50140  0x698b8c85 0x63828d86 0x5f8b8d8d 0x5e868f86
0xffb50150  0x64878b8a 0x6e8f8991 0x6f8f8891 0x6f8d8790
0xffb50160  0x6e9a8794 0x6b90898c 0x65898989 0x668e8988
0xffb50170  0x6a8b888e 0x6e938894 0x6e8e8890 0x6d8e8891
0xffb50180  0x7092898d 0x6f8e8895 0x6b8e888b 0x6a878791
0xffb50190  0x72928893 0x77918793 0x6f948794 0x698f888c
0xffb501a0  0x6f908695 0x70938698 0x6f948691 0x72928792
0xffb501b0  0x75958690 0x7390878f 0x71908791 0x6e918790
0xffb501c0  0x6f8f8790 0x6e8c868e 0x6f958595 0x75968499
0xffb501d0  0x76928498 0x759b849a 0x7493858f 0x708e8591
0xffb501e0  0x73968499 0x77998494 0x77948492 0x78958497
0xffb501f0  0x7898839b 0x799c819d 0x7c998295 0x76938394
0xffb50200  0x79998298 0x7b96829b 0x77958399 0x7899839b
0xffb50210  0x7b99829a 0x7e9b8395 0x7c988395 0x77988399
0xffb50220  0x7d96829e 0x7d9c829d 0x7d9c829d 0x7a9b8397
0xffb50230  0x7993858a 0x867c8578 0x86708673 0x85738a6a
0xffb50240  0x89619953 0x8247a73f 0x7d3baa36 0x7941a93a
0xffb50250  0x733aab3f 0x6737ad43 0x633bae3e 0x743aac3c
0xffb50260  0x7e3ba93d 0x773dab3e 0x793cb03d 0x7b41b23a
0xffb50270  0x7339b03c 0x763eae3c 0x773cac36 0x7d38aa37
0xffb50280  0x8031a331 0x7a329f32 0x7c33a235 0x8a32a735
0xffb50290  0x8f2fa333 0x882ea02c 0x842ea12d 0x852a9d30
0xffb502a0  0x8c2c992a 0x852d9925 0x782a942e 0x7c2a8d2d
0xffb502b0  0x7731892c 0x7630882d 0x6b2d8a2c 0x69308e36
0xffb502c0  0x78329136 0x79358d31 0x7e348a2b 0x80268c28
0xffb502d0  0x842b8e29 0x87248b22 0x8a1b8e1e 0x7f1c8c18
0xffb502e0  0x72208b1b 0x811c8d1d 0x821b8f1e 0x78188f1f
0xffb502f0  0x7c1d931b 0x7d209717 0x8821931c 0x8a1b8c19
0xffb50300  0x6b7c957b 0x66799581 0x6481947d 0x657f967f
0xffb50310  0x647d977e 0x6875977f 0x687f9480 0x67849281
0xffb50320  0x66819283 0x66839183 0x68848e88 0x65849084
0xffb50330  0x62809383 0x63829282 0x68809480 0x637d967c
0xffb50340  0x627e957e 0x67839481 0x6b7d9481 0x6b81918a
0xffb50350  0x6983927d 0x67848f89 0x68878d86 0x6a808e85
0xffb50360  0x68888c8e 0x66898f7f 0x6c83927f 0x6c838d8b
0xffb50370  0x688f8c87 0x62838f86 0x60898f84 0x68879281
0xffb50380  0x6b829182 0x68848d8c 0x6a878b8e 0x6d878e83
0xffb50390  0x69818e87 0x6b91898b 0x6c8d8990 0x688c898f
0xffb503a0  0x668c8f82 0x6b7f8f85 0x698f8a93 0x648f8a8d
0xffb503b0  0x66899084 0x6c7f9384 0x6d868c89 0x68908a8d
0xffb503c0  0x68898d85 0x67808e86 0x658a8d89 0x65898e88
0xffb503d0  0x6a888a8e 0x708f878f 0x71968793 0x708d8792
0xffb503e0  0x70968793 0x6f8f888a 0x6e8b8891 0x7191888e
0xffb503f0  0x6f89898c 0x6d918893 0x71908794 0x72918790
0xffb50400  0x728e8890 0x768b8791 0x748e8691 0x718c8689
0xffb50410  0x748c878c 0x78958694 0x75928591 0x72918696
0xffb50420  0x7996839f 0x7b9e829b 0x77928592 0x7a968596
0xffb50430  0x7d938592 0x7d9a849b 0x7b948493 0x7b968492
0xffb50440  0x7b9a8399 0x7b978399 0x7c9b829c 0x7d98829b
0xffb50450  0x7d9b8396 0x7c9c8399 0x7d988298 0x7ca281a2
0xffb50460  0x7ca181a1 0x7da0819c 0x7da181a2 0x7ea180a8
0xffb50470  0x7fa580a4 0x7faa80a8 0x7fa580a7 0x7fa580a6
0xffb50480  0x7ea780a7 0x7ea680a9 0x7fa880a3 0x7fa180a2
0xffb50490  0x7fa580a4 0x7fa580a3 0x7fa680a5 0x7ea880a7
0xffb504a0  0x7fa580a5 0x7fa780a7 0x80a680a9 0x7ea480a0
0xffb504b0  0x809e8297 0x838e8189 0x8387838b 0x848a857c
0xffb504c0  0x86738c5f 0x8553a43e 0x7d38ad3e 0x7b3bad40
0xffb504d0  0x773aad3f 0x6d3fae3e 0x6b3ca93c 0x763ea939
0xffb504e0  0x7a3ba93e 0x763bad3d 0x7c3eb13f 0x7839b33d
0xffb504f0  0x733faf3a 0x783cab3a 0x7739a839 0x7b36ab35
0xffb50500  0x7f35a539 0x7e35a233 0x7f32a436 0x8333aa2f
0xffb50510  0x8431a438 0x83319e31 0x802fa230 0x82319e2d
0xffb50520  0x882e992e 0x812d9a28 0x7630962f 0x732f8d30
0xffb50530  0x722d8b2a 0x74298e29 0x70299027 0x6e289226
0xffb50540  0x752b932c 0x792f8d30 0x8432862c 0x83278525
0xffb50550  0x7b288d2b 0x81259120 0x8b208e1f 0x851f831d
0xffb50560  0x7a1f851f 0x821f8d1b 0x811c9221 0x781b911f
0xffb50570  0x7a1d911c 0x7b1d991f 0x821c951f 0x821b8e20
0xffb50580  0x6b7c957d 0x5c7d947e 0x5d80957f 0x627b9682
0xffb50590  0x627a997a 0x6779997e 0x667c9479 0x67849185
0xffb505a0  0x65849281 0x5f819280 0x64858f86 0x67839180
0xffb505b0  0x627e9383 0x5f839281 0x6883947f 0x6b79947d
0xffb505c0  0x667f9282 0x66849381 0x6e82947c 0x71899190
0xffb505d0  0x70809476 0x697a9184 0x65828e84 0x68848f88
0xffb505e0  0x64878e87 0x5e81907f 0x67849187 0x6a878f89
0xffb505f0  0x68848f84 0x64828f88 0x64879086 0x6b869182
0xffb50600  0x6b848f83 0x67868c87 0x6a8b8990 0x6e8a8b87
0xffb50610  0x698d8b87 0x668e898e 0x698f898d 0x658a898a
0xffb50620  0x62848f83 0x6e7f8e89 0x6c8c8a89 0x638a898c
0xffb50630  0x6a8a8c88 0x6f818e86 0x6d8a8b8a 0x688a8a8c
0xffb50640  0x668c8b8b 0x6a888a8d 0x6c898a8a 0x6b8d8a8a
0xffb50650  0x6f8b8890 0x75908793 0x74968593 0x72948593
0xffb50660  0x73938594 0x7393868e 0x75938596 0x7a988597
0xffb50670  0x738f8687 0x6d8c858f 0x74928395 0x77958396
0xffb50680  0x77958399 0x7d978293 0x7d9b829d 0x78998394
0xffb50690  0x758f8392 0x7a9b81a3 0x7c9f819d 0x7b9f819d
0xffb506a0  0x7da181aa 0x7ea780a4 0x7da381a1 0x7ea581a2
0xffb506b0  0x80a180a4 0x80aa80a4 0x7ea580a5 0x7fa380a5
0xffb506c0  0x7fa780a8 0x7fab80a6 0x80a980a9 0x80ab80aa
0xffb506d0  0x7fa980a3 0x80a980ac 0x80ac80aa 0x80ae80ae
0xffb506e0  0x80a980ae 0x80ab80ab 0x80ac80ae 0x80af80b4
0xffb506f0  0x80b180b0 0x80b080ae 0x80b280b0 0x80b180b0
0xffb50700  0x80ae80af 0x80b080b1 0x80b180ad 0x80ac80ad
0xffb50710  0x80ae80aa 0x80ac80ab 0x80ae80ad 0x80ae80af
0xffb50720  0x80ab80aa 0x80ab80a9 0x80ad80a8 0x80ad80a7
0xffb50730  0x80a280a0 0x81a0809c 0x809d7fa1 0x82a28096
0xffb50740  0x84838671 0x89539c41 0x8039a43c 0x7f39a842
0xffb50750  0x7d3aac3d 0x743ead3c 0x713caa3c 0x793ca83c
0xffb50760  0x743da938 0x7742ab39 0x8047af3e 0x7939ad3b
0xffb50770  0x763dad3b 0x7b38ab3a 0x7a38a834 0x7d36a939
0xffb50780  0x8034a63a 0x802ea43a 0x8436a233 0x7e33a533
0xffb50790  0x7a2fa230 0x80369e37 0x8130a032 0x81309f2d
0xffb507a0  0x852f9c2e 0x802e9a2d 0x772f9330 0x6b2c8c2d
0xffb507b0  0x6d2c8a2c 0x74258d27 0x79299026 0x77259425
0xffb507c0  0x73249327 0x79298f2c 0x892d8a2c 0x85298622
0xffb507d0  0x74298b24 0x7e298e23 0x8e1a8d20 0x8b1c871d
0xffb507e0  0x811e8a1e 0x861d8e1d 0x861c8c1c 0x7d17891e
0xffb507f0  0x791e901b 0x7c1c971f 0x801c921a 0x7d1c8f19
0xffb50800  0x6d84937c 0x67809380 0x6880947d 0x69849680
0xffb50810  0x677b9a76 0x6879987e 0x677c9482 0x6a80917f
0xffb50820  0x6889927f 0x6182947f 0x68809286 0x6b87917e
0xffb50830  0x637f9284 0x607e937e 0x6a81947a 0x6f7f9181
0xffb50840  0x67848f87 0x64839281 0x6c7d9380 0x6f8c9187
0xffb50850  0x6e7f936d 0x687c9484 0x69818e85 0x6b888e87
0xffb50860  0x67849081 0x67848f84 0x6a828f84 0x69899185
0xffb50870  0x667f9187 0x66849186 0x6a829284 0x6b848f8a
0xffb50880  0x6b888c86 0x6c868a8d 0x6f8b878c 0x708e898e
0xffb50890  0x6e8c898f 0x6d8d8991 0x718a8892 0x6e90898a
0xffb508a0  0x6c868d87 0x73858c89 0x74868988 0x718b8795
0xffb508b0  0x7293878a 0x75898988 0x748c898b 0x72888b88
0xffb508c0  0x728a888c 0x7591878f 0x7891878b 0x788b878d
0xffb508d0  0x7991868f 0x7d92858e 0x7d958497 0x7d9b81a2
0xffb508e0  0x7d9d8198 0x7d9e819c 0x7d9f819d 0x7e9d81a0
0xffb508f0  0x7d9d829b 0x7d9e81a0 0x7da181a2 0x7da781a9
0xffb50900  0x7ea880a8 0x80a680a9 0x80ac80ad 0x7fac80a4
0xffb50910  0x7fa280a1 0x7fa680b0 0x80b080aa 0x80ab80ab
0xffb50920  0x80a780ac 0x80af80af 0x80b080ae 0x80af80ae
0xffb50930  0x80ab80ad 0x80b280b2 0x80b280b1 0x80ae80ad
0xffb50940  0x80b180b0 0x80af80b0 0x80ad80ae 0x80b180b1
0xffb50950  0x80b080b4 0x80b580b3 0x80b080b4 0x80b580b5
0xffb50960  0x80b380b5 0x80b580b5 0x80b680ba 0x80b680b8
0xffb50970  0x80b780ba 0x80b880b7 0x80b880b7 0x80b880b9
0xffb50980  0x80b780b5 0x80b880b7 0x80b780b6 0x80b680b6
0xffb50990  0x80b580b3 0x80b480b4 0x80b180b1 0x80b180b3
0xffb509a0  0x80af80b0 0x80ae80ab 0x80ad80aa 0x7fac80ac
0xffb509b0  0x80a880a9 0x81a880ae 0x80b180b6 0x80b280a9
0xffb509c0  0x8396847a 0x8e58933f 0x89409836 0x8339a239
0xffb509d0  0x8436a93f 0x823cac3a 0x8040aa3a 0x8443a737
0xffb509e0  0x8341a63d 0x823ca93b 0x843bab3f 0x803ba83b
0xffb509f0  0x8137ab37 0x8439ac36 0x853ba636 0x8838a633
0xffb50a00  0x8939a737 0x8c35a636 0x93349f33 0x8d31a032
0xffb50a10  0x8b32a035 0x8f2f9d31 0x90329d32 0x932f9d33
0xffb50a20  0x8f329c31 0x8934992e 0x80328f37 0x7135892c
0xffb50a30  0x702d8928 0x79298726 0x7b248e25 0x73219425
0xffb50a40  0x6c249326 0x75239028 0x82258b2c 0x8324852c
0xffb50a50  0x7d288728 0x7f238a21 0x831d8b1d 0x86218a19
0xffb50a60  0x811c901e 0x7f1f8e1d 0x8021841e 0x801e821f
0xffb50a70  0x801b8c1c 0x81159120 0x7c1a8d20 0x7b1d8d13
0xffb50a80  0x6f7f907e 0x6f808f81 0x707f917a 0x70829379
0xffb50a90  0x6e79967a 0x6976957c 0x69809282 0x6d7b917d
0xffb50aa0  0x6a878d87 0x66848e84 0x6c848e87 0x6f888e83
0xffb50ab0  0x617f907d 0x617d9282 0x6c829480 0x6f839284
0xffb50ac0  0x69898e84 0x6384907e 0x6c849084 0x6e869187
0xffb50ad0  0x6a7f9379 0x69848e8a 0x6e868a8f 0x6d8b8a88
0xffb50ae0  0x6b898c85 0x6d868c88 0x6e8a8c85 0x6a858e80
0xffb50af0  0x65818d88 0x69848c87 0x71868b89 0x6b8b898b
0xffb50b00  0x6c88888a 0x718b868a 0x748e868e 0x75938592
0xffb50b10  0x7491858f 0x738d868c 0x788d8594 0x76928590
0xffb50b20  0x738c868d 0x778c858f 0x7c8d848e 0x7d95829f
0xffb50b30  0x7d9a8295 0x7e938293 0x7d9d829b 0x7d9a8391
0xffb50b40  0x7d95829a 0x7e9c809e 0x7e9e809f 0x7e9c819f
0xffb50b50  0x7ea1819f 0x7fa080a0 0x80a580ac 0x80b180ad
0xffb50b60  0x80ad80b1 0x80af80b0 0x80b180b0 0x80b080b3
0xffb50b70  0x80b080ae 0x80b380b4 0x80b380b0 0x80ab80b0
0xffb50b80  0x80b180ae 0x80b380b3 0x80b180b4 0x80b180ae
0xffb50b90  0x80af80ab 0x80b380b2 0x80b280b7 0x80b380b3
0xffb50ba0  0x80b080b4 0x80b480b7 0x80b880b8 0x80b480b8
0xffb50bb0  0x80bc80b8 0x80b780ba 0x80bc80ba 0x80bf80ba
0xffb50bc0  0x80bb80bd 0x80bd80bb 0x80bd80be 0x80b980b9
0xffb50bd0  0x80bb80bb 0x80bc80be 0x80bd80bc 0x80bb80bd
0xffb50be0  0x80be80c0 0x80bc80ba 0x80bd80bb 0x80bb80b8
0xffb50bf0  0x80b980b8 0x80ba80b6 0x80b580b6 0x80b780b5
0xffb50c00  0x80b380b3 0x80b180b0 0x80b080ae 0x80ad80ad
0xffb50c10  0x80a980a9 0x80a680a5 0x7fa481a4 0x7fa3819e
0xffb50c20  0x7d9e81a0 0x7e9d819a 0x7e9c8196 0x7e938093
0xffb50c30  0x7f988098 0x809b80a1 0x80a480b0 0x80b080a5
0xffb50c40  0x82908373 0x93539139 0x913f9a39 0x88419e36
0xffb50c50  0x8c3e9e3a 0x903d9f3d 0x903e9d3a 0x923c9d3f
0xffb50c60  0x90349d40 0x8e3d9f3b 0x8a39a136 0x88399e3f
0xffb50c70  0x8b369c3e 0x8e36a03e 0x923da038 0x923d9c3e
0xffb50c80  0x923a9c38 0x97439b42 0xa043964a 0x98439346
0xffb50c90  0x98498f4b 0x9c508c4b 0x9d4e8e50 0xa0538c4e
0xffb50ca0  0x984d9248 0x9349943f 0x87308e32 0x782c8a2e
0xffb50cb0  0x772a8c27 0x7d268c29 0x81258f24 0x73248e24
0xffb50cc0  0x6a249024 0x71249227 0x7d298f29 0x81278a26
0xffb50cd0  0x822e8c28 0x7f248f23 0x781e9022 0x801e931e
0xffb50ce0  0x821d9421 0x7c1b9220 0x7c1b8c1f 0x811f8b1d
0xffb50cf0  0x841b911c 0x841b9120 0x791b8c12 0x7b1b8b1d
0xffb50d00  0x77848b8a 0x768b8a8a 0x76848d82 0x75868e86
0xffb50d10  0x77829179 0x767d9084 0x74868f82 0x747e8e83
0xffb50d20  0x7287898c 0x708a888a 0x71878b82 0x72878b8b
0xffb50d30  0x71878d81 0x737d9083 0x75859278 0x72799284
0xffb50d40  0x6f868e85 0x6f888c86 0x71868c89 0x73859083
0xffb50d50  0x6f818f86 0x6d8a8a89 0x738b8892 0x7192888e
0xffb50d60  0x708e878b 0x708d878d 0x718e888e 0x72878a84
0xffb50d70  0x7489888d 0x76878689 0x78908692 0x798c858f
0xffb50d80  0x798d868c 0x7a908592 0x7c988398 0x7c9b829e
0xffb50d90  0x7c9e829e 0x7d9b829d 0x7e9f80a3 0x7ea1819e
0xffb50da0  0x7da181a1 0x7ea080a4 0x7fa580a6 0x80a680aa
0xffb50db0  0x80a780a4 0x80ac80ad 0x80ad80ae 0x80a880ab
0xffb50dc0  0x80a980ac 0x80ae80ae 0x80b180b0 0x80ac80b1
0xffb50dd0  0x80b280ae 0x80ae80b3 0x80b580ba 0x80b680b7
0xffb50de0  0x80b880bb 0x80b980b9 0x80b980ba 0x80b880be
0xffb50df0  0x80b980bb 0x80bc80bc 0x80ba80bb 0x80b880b9
0xffb50e00  0x80bd80be 0x80be80be 0x80bb80c0 0x80be80bb
0xffb50e10  0x80bc80be 0x80bd80bd 0x80ba80bb 0x80bb80bb
0xffb50e20  0x80bc80be 0x80bc80bf 0x80bd80be 0x80be80c0
0xffb50e30  0x80bb80bb 0x80be80bb 0x80bc80bb 0x80b980b9
0xffb50e40  0x80ba80b6 0x80b780b4 0x80b380b1 0x80b180af
0xffb50e50  0x80b080ab 0x80ae80ae 0x80ab80aa 0x80aa80ab
0xffb50e60  0x7fa580a6 0x7fa380a7 0x80a2809f 0x7fa0819f
0xffb50e70  0x7f9b829c 0x7f9a8299 0x7f9a8296 0x7f978393
0xffb50e80  0x7f968394 0x7f91838d 0x808d848b 0x808a8489
0xffb50e90  0x80868782 0x7e808b7f 0x7e7e8c7a 0x7f7a8e78
0xffb50ea0  0x7e798a77 0x7f758974 0x80738972 0x80758574
0xffb50eb0  0x8173847b 0x81828188 0x809a80a4 0x80aa809f
0xffb50ec0  0x818c8372 0x90588d46 0x8e479942 0x8a4c984a
0xffb50ed0  0x8b4e9252 0x8c549152 0x8a579254 0x8b549359
0xffb50ee0  0x895a935c 0x885b915f 0x885e9162 0x86648e5e
0xffb50ef0  0x86668a63 0x88648f65 0x8865916a 0x886d8e6b
0xffb50f00  0x87698c6b 0x856e8c72 0x89728974 0x8a778678
0xffb50f10  0x8b79837c 0x8a7c837d 0x897c847f 0x897f837e
0xffb50f20  0x867b8474 0x866a8e59 0x8c4c8a3a 0x84348b2b
0xffb50f30  0x722a8e2a 0x6a259126 0x74238e24 0x6f258724
0xffb50f40  0x6c248b22 0x73259324 0x7a26942a 0x7f2b8e2b
0xffb50f50  0x802f8e27 0x7a269225 0x7b1f9520 0x8120991f
0xffb50f60  0x80219923 0x7c219621 0x7a1f951e 0x7f1c9320
0xffb50f70  0x841c9319 0x83208c1c 0x7b198c17 0x7f1b8a19
0xffb50f80  0x7f948496 0x7f958498 0x7f8f838e 0x7b938391
0xffb50f90  0x7d90838d 0x7f8f8493 0x7d8c848e 0x7b8c8491
0xffb50fa0  0x7c928496 0x7a958495 0x79918494 0x79938493
0xffb50fb0  0x7e928493 0x7e8e8490 0x7b8d8585 0x768b858f
0xffb50fc0  0x748d8689 0x768b8590 0x75908590 0x768d8589
0xffb50fd0  0x728a878b 0x73928590 0x7998829d 0x789c8391
0xffb50fe0  0x789a8392 0x779a8397 0x79958396 0x7e92839a
0xffb50ff0  0x7e9c829d 0x7e9a819e 0x7da2819e 0x7fa280a3
0xffb51000  0x7fa480a3 0x7fa280a6 0x7fa580a6 0x80aa80a9
0xffb51010  0x80ad80ae 0x80ac80ad 0x80b280b4 0x80b180af
0xffb51020  0x80ad80b1 0x80ae80b1 0x80b480b3 0x80b280b2
0xffb51030  0x80b080b1 0x80b580b5 0x80bb80b9 0x80b580b7
0xffb51040  0x80b980b9 0x80ba80bb 0x80bc80bc 0x80be80be
0xffb51050  0x80be80bb 0x80bd80be 0x80be80c1 0x80c480c0
0xffb51060  0x80c280c3 0x80c680c6 0x80c080c2 0x80c480c0
0xffb51070  0x80c380c0 0x80bd80c0 0x80bb80b8 0x80b980b4
0xffb51080  0x80b180b2 0x80ae80af 0x80ac80ac 0x80a980a7
0xffb51090  0x80a780a7 0x80a580a2 0x80a4809f 0x7ea1809e
0xffb510a0  0x7c9b81a0 0x7b9c819b 0x7c9c809b 0x7c9a8099
0xffb510b0  0x7c998096 0x7d998099 0x7d968094 0x78958094
0xffb510c0  0x7690808e 0x778e808f 0x768b8189 0x738a8189
0xffb510d0  0x73878286 0x71868284 0x6d848281 0x71828282
0xffb510e0  0x707c8279 0x707c837b 0x78798177 0x70738073
0xffb510f0  0x80718070 0x8072806c 0x806e806f 0x8071806e
0xffb51100  0x806f8071 0x806e806e 0x806e806e 0x836d806f
0xffb51110  0x846e826e 0x836e856b 0x866f886e 0x8a73896f
0xffb51120  0x89728672 0x8a738578 0x89778377 0x8a7b817f
0xffb51130  0x887f7f84 0x838c8094 0x80a380ad 0x80af80aa
0xffb51140  0x829e8089 0x907c807b 0x8c73857c 0x8c7c867c
0xffb51150  0x8b81847d 0x89858382 0x87858484 0x87888385
0xffb51160  0x86888288 0x8488818b 0x848b818d 0x828a818a
0xffb51170  0x828a818d 0x8292818d 0x838e8191 0x838d8192
0xffb51180  0x828e8094 0x81928093 0x82998098 0x8298819c
0xffb51190  0x809e7f9e 0x80a180a0 0x80a180a0 0x809d80a1
0xffb511a0  0x819b7f92 0x82828173 0x8e618347 0x9038862e
0xffb511b0  0x6e258e22 0x58269123 0x66299123 0x69268f23
0xffb511c0  0x6e268e23 0x7a269124 0x7927932b 0x7e25912f
0xffb511d0  0x802f9028 0x75269523 0x81239723 0x87219c21
0xffb511e0  0x82209723 0x7f219521 0x7b1d961f 0x8020961f
0xffb511f0  0x831e9420 0x811b8d1c 0x7e1c8f18 0x841c8e17
0xffb51200  0x80a080a3 0x80a080a1 0x80a180a3 0x80a480a2
0xffb51210  0x80a180a3 0x80a080a3 0x809f80a1 0x7fa180a0
0xffb51220  0x80a6809f 0x80a280a5 0x7fa280a0 0x7fa480a5
0xffb51230  0x7fa280a2 0x7fa580a2 0x7f9f819c 0x7e9e81a1
0xffb51240  0x7e9e8298 0x7e9d81a0 0x7d9f81a0 0x7d9d829d
0xffb51250  0x7e9d81a3 0x7e9f81a2 0x7ea980a7 0x7fa280a4
0xffb51260  0x7fa780a2 0x7fa680a4 0x7fa380a4 0x80a780a7
0xffb51270  0x80a880a9 0x80ac80ac 0x80ae80ad 0x80af80af
0xffb51280  0x80ab80af 0x80ae80ad 0x80ad80af 0x80b080b1
0xffb51290  0x80b780b8 0x80b680b7 0x80ba80ba 0x80b980ba
0xffb512a0  0x80bb80b8 0x80be80be 0x80bd80be 0x80bd80be
0xffb512b0  0x80bf80bf 0x80be80c0 0x80be80bf 0x80bf80bf
0xffb512c0  0x80c280c1 0x80c080c0 0x80c180c1 0x80c180bf
0xffb512d0  0x80bf80c0 0x80bf80bf 0x80ba80bf 0x80bc80ba
0xffb512e0  0x80ba80bd 0x80b780b5 0x80b380af 0x7fac80aa
0xffb512f0  0x7ea7809f 0x7e9e8299 0x7e988491 0x7f8e838d
0xffb51300  0x7f8a8486 0x7f848785 0x7f82897f 0x7c82887c
0xffb51310  0x7b80857e 0x7a7a857b 0x7c7b867a 0x7a7b8778
0xffb51320  0x76778a78 0x76758877 0x7a778577 0x7b738673
0xffb51330  0x7e748573 0x7f728574 0x7c728671 0x7b738472
0xffb51340  0x7c708370 0x7f6f8370 0x7f6d846b 0x7c6e836f
0xffb51350  0x7d6a826d 0x7d6a836e 0x796e836e 0x7e6d826f
0xffb51360  0x7f6c8170 0x7c6f8071 0x7f757f71 0x81747f74
0xffb51370  0x82737e77 0x80757e79 0x807b7f77 0x817c827e
0xffb51380  0x827f8180 0x827e8280 0x82848283 0x83838184
0xffb51390  0x82877e88 0x81887f89 0x828a8189 0x838a808d
0xffb513a0  0x828f8091 0x82928091 0x81947f93 0x80987f99
0xffb513b0  0x809c809d 0x80a480a9 0x80b080bb 0x80c180b9
0xffb513c0  0x80af80a9 0x809f80a1 0x809d80a1 0x80a380a5
0xffb513d0  0x80a580a7 0x80a580a9 0x80a880a9 0x80ad80aa
0xffb513e0  0x80a980ac 0x80ac80ab 0x80ac80b0 0x80ad80ab
0xffb513f0  0x80ad80ab 0x80ab80af 0x80ae80b0 0x80af80b2
0xffb51400  0x80b480b2 0x80b580b5 0x80b380b4 0x80b680b5
0xffb51410  0x80ba80bf 0x80c080c0 0x80c280bf 0x80c280bb
0xffb51420  0x80bb80b2 0x829e7f8d 0x8a757f5a 0x90408334
0xffb51430  0x76278e26 0x6e278f26 0x6f259123 0x6b259721
0xffb51440  0x72289225 0x741f8f26 0x71289225 0x7d29922a
0xffb51450  0x822e912c 0x7b279526 0x811f9923 0x81219b21
0xffb51460  0x7c239521 0x7b26931f 0x7d209422 0x8122941b
0xffb51470  0x831d9320 0x831f8c1c 0x7f1b8f1a 0x841a9118
0xffb51480  0x80ae80b0 0x80b180af 0x80ad80ae 0x80af80b3
0xffb51490  0x80ae80ac 0x80b280ae 0x80af80ae 0x80b180ad
0xffb514a0  0x80b080af 0x80b280af 0x80b180ab 0x80ad80b0
0xffb514b0  0x80af80b0 0x80aa80a9 0x80ac80ad 0x80ad80ab
0xffb514c0  0x80ae80a9 0x80ac80a9 0x80a980aa 0x80ac80a8
0xffb514d0  0x80af80ab 0x80ac80ac 0x80aa80ad 0x80aa80ac
0xffb514e0  0x80b080ad 0x80b080ad 0x80ad80b0 0x80b280b2
0xffb514f0  0x80b680b3 0x80b980b6 0x80b580b4 0x80b680b7
0xffb51500  0x80ba80ba 0x80b980b8 0x80b880bb 0x80b980b9
0xffb51510  0x80ba80b9 0x80b980b7 0x80b880b9 0x80b780b4
0xffb51520  0x80b480b3 0x80b280b1 0x80b080b1 0x80b280b0
0xffb51530  0x80af80ad 0x80af80ad 0x80ad80ae 0x80ac80ac
0xffb51540  0x80ad80a9 0x80ab80ac 0x80a880a8 0x7fa680a6
0xffb51550  0x7ea180a2 0x7ea1809f 0x7d99809a 0x79978097
0xffb51560  0x748f818c 0x6e888286 0x6c83837f 0x6a7d837b
0xffb51570  0x6e778475 0x72748a73 0x71718b72 0x746f896e
0xffb51580  0x786f896e 0x7a69896e 0x7f6e876b 0x816b8568
0xffb51590  0x7f6a836a 0x7d688668 0x81688669 0x80658669
0xffb515a0  0x7f678665 0x836a8565 0x876a846b 0x8a68836c
0xffb515b0  0x8d6e836d 0x896b8370 0x866e8370 0x86728375
0xffb515c0  0x86718276 0x8b758176 0x8b758178 0x85778179
0xffb515d0  0x867a7e7d 0x867e817e 0x837c8080 0x87838084
0xffb515e0  0x86847f83 0x81867f88 0x82897f8a 0x83917f8b
0xffb515f0  0x828e7f90 0x82917f94 0x82947f95 0x82987f99
0xffb51600  0x819a809d 0x809c809d 0x809f80a1 0x809f80a4
0xffb51610  0x809e80a3 0x80a580a4 0x80a780a6 0x80aa80a9
0xffb51620  0x80ac80ac 0x80b080af 0x80b280b3 0x80b280b5
0xffb51630  0x80b980ba 0x80be80c3 0x80c980c8 0x80d380d2
0xffb51640  0x80cc80c6 0x80c280c5 0x80c880c5 0x80c880ca
0xffb51650  0x80ca80cc 0x80ca80ce 0x80cd80ce 0x80cd80d0
0xffb51660  0x80ca80cf 0x80cf80d0 0x80d080cc 0x80d280cb
0xffb51670  0x80cd80cd 0x80cc80ce 0x80ce80d0 0x80d080d7
0xffb51680  0x80d280cf 0x80d280d4 0x80d280d2 0x80d580d5
0xffb51690  0x80d780d6 0x80d280da 0x80d880d7 0x80d180d1
0xffb516a0  0x80d480ce 0x80b67f9e 0x89827b60 0x913f7e32
0xffb516b0  0x81258d27 0x83268d24 0x7a248f20 0x75249426
0xffb516c0  0x7a249026 0x6c208f27 0x6c269029 0x7e2a8f2c
0xffb516d0  0x85308f2d 0x82289322 0x82259b24 0x7a1d9c23
0xffb516e0  0x77219723 0x78239523 0x801f9523 0x8321941f
0xffb516f0  0x85209417 0x86228e1f 0x7e19911c 0x851b921d
0xffb51700  0x80ac80b0 0x80b080b0 0x80ae80b0 0x80b280b0
0xffb51710  0x80b180b0 0x80b080b3 0x80b180af 0x80b280b3
0xffb51720  0x80b180b4 0x80b380b0 0x80b380b4 0x80b380b5
0xffb51730  0x80b580b3 0x80b280b2 0x80b380b4 0x80b080b2
0xffb51740  0x80b380b3 0x80b380b1 0x80ae80b4 0x80b380b4
0xffb51750  0x80b180b2 0x80b280b4 0x80b380b4 0x80b080b5
0xffb51760  0x80b180b5 0x80b180b2 0x80b180b5 0x80b680b5
0xffb51770  0x80b880b2 0x80b280b3 0x80b280b4 0x7fb080ae
0xffb51780  0x7fae80ac 0x7fab80a8 0x7fa280a3 0x7e9e819c
0xffb51790  0x7d9a8397 0x7e968394 0x7f8d838f 0x7f8b8388
0xffb517a0  0x7f888686 0x7f848785 0x7f848784 0x7f838782
0xffb517b0  0x7f818881 0x7e7f8a82 0x7f7e8b7e 0x7f7f8b7b
0xffb517c0  0x7f808b7e 0x807b877c 0x7f788679 0x7d788976
0xffb517d0  0x7e738977 0x7e728472 0x7d71806e 0x806e836b
0xffb517e0  0x7d6d876b 0x7b67876b 0x7b658767 0x7a628764
0xffb517f0  0x7c608767 0x81628463 0x80638465 0x7e658566
0xffb51800  0x81688465 0x8567876b 0x856e846e 0x856e8071
0xffb51810  0x86718071 0x85748374 0x85758579 0x8478837d
0xffb51820  0x827a817d 0x82818180 0x827e8284 0x82878184
0xffb51830  0x83868189 0x838f808b 0x828f808f 0x8291808f
0xffb51840  0x81928096 0x81957f96 0x8096809a 0x8099809a
0xffb51850  0x809d7f9c 0x809c809e 0x80a180a1 0x80a480a3
0xffb51860  0x80a480a9 0x80a680a9 0x80ad80a9 0x80ae80ad
0xffb51870  0x80b180ae 0x80b480b6 0x80b580b8 0x80b880b9
0xffb51880  0x80bb80bd 0x80bd80c0 0x80c080c5 0x80c180c7
0xffb51890  0x80c780cb 0x80cb80ca 0x80cd80ce 0x80d080cc
0xffb518a0  0x80d380cb 0x80d280d0 0x80d280d2 0x80d380da
0xffb518b0  0x80d980d8 0x80d780d7 0x80d780d7 0x80d780d7
0xffb518c0  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb518d0  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb518e0  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb518f0  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb51900  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb51910  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb51920  0x80d780da 0x80ba80a8 0x888d7a6a 0x94427935
0xffb51930  0x83288c2b 0x7c268a27 0x75228b25 0x73248f22
0xffb51940  0x7d278c25 0x76228e25 0x762a8d27 0x7f2a8c2d
0xffb51950  0x802f8a32 0x7e2a9124 0x7f249b27 0x7c1f9a26
0xffb51960  0x7d239823 0x78209620 0x7e1f9321 0x851d931d
0xffb51970  0x871c931d 0x85208f1c 0x801d921b 0x801d911b
0xffb51980  0x80a880a7 0x80a880a8 0x80a880a6 0x80a680a9
0xffb51990  0x80a880a8 0x80a780a9 0x80ab80ab 0x80a980a9
0xffb519a0  0x80a880ac 0x80a980a9 0x80ab80aa 0x80a980ab
0xffb519b0  0x80ac80ac 0x80aa80ad 0x80ab80ab 0x80ab80ac
0xffb519c0  0x80ad80ac 0x80ac80aa 0x80ad80ab 0x80ab80aa
0xffb519d0  0x80ab80ac 0x80ac80ab 0x80ab80a7 0x80a980a6
0xffb519e0  0x80a380a6 0x80a180a3 0x7ea380a2 0x7e9f80a1
0xffb519f0  0x7d99809b 0x7c988194 0x7890818e 0x738a8185
0xffb51a00  0x7686817e 0x767e827c 0x7379837a 0x717a8877
0xffb51a10  0x72768b76 0x72718872 0x7972886e 0x796e8a6a
0xffb51a20  0x786a8a69 0x7e698865 0x7f688768 0x856a8768
0xffb51a30  0x82688865 0x7b688867 0x7c6d8766 0x7f6a876a
0xffb51a40  0x816b876c 0x846e846d 0x856a836b 0x886e836b
0xffb51a50  0x8b6d8470 0x886b846f 0x846e8471 0x846f8571
0xffb51a60  0x86728572 0x896f836f 0x88768173 0x8576807a
0xffb51a70  0x8578807b 0x887b7e81 0x88807e7f 0x82848082
0xffb51a80  0x83877f87 0x848a7f88 0x828d7f8d 0x828f7f92
0xffb51a90  0x82937e95 0x82957f98 0x82987f9b 0x81997f9c
0xffb51aa0  0x809e809f 0x80a180a0 0x80a380a5 0x80a580a7
0xffb51ab0  0x80aa80a8 0x80ad80ad 0x80af80af 0x80b180b1
0xffb51ac0  0x80b580b5 0x80b880b9 0x80b980bb 0x80c180bd
0xffb51ad0  0x80c180c4 0x80c380c4 0x80c880ca 0x80cd80c8
0xffb51ae0  0x80cc80cd 0x80cc80d1 0x80cf80d5 0x80d380d4
0xffb51af0  0x80d380d8 0x80d680d7 0x80d580d9 0x80d880d7
0xffb51b00  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb51b10  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb51b20  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb51b30  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb51b40  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb51b50  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb51b60  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb51b70  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb51b80  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb51b90  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d5
0xffb51ba0  0x80d180ce 0x80c580a8 0x888e7c6c 0x974e7c2c
0xffb51bb0  0x862c8c27 0x76248d24 0x6f288e24 0x71249026
0xffb51bc0  0x80279024 0x7e279027 0x80289027 0x812a912f
0xffb51bd0  0x7a31922f 0x7c2c9329 0x7e249923 0x80239c25
0xffb51be0  0x83249b23 0x791f9820 0x7f1f9420 0x8a1d9322
0xffb51bf0  0x8b1d9020 0x871f9120 0x85199220 0x7e1c8f1f
0xffb51c00  0x7f948290 0x7f928291 0x7f918291 0x7f8f8290
0xffb51c10  0x7f8e828f 0x8091818f 0x808f828e 0x808f818e
0xffb51c20  0x808f828d 0x808d828b 0x808d838e 0x7f8b838b
0xffb51c30  0x7d91848d 0x7d8f848b 0x7c8c8290 0x7e8e818d
0xffb51c40  0x808d828b 0x7f8b838d 0x7f8b838c 0x7f8b8486
0xffb51c50  0x7f8e838a 0x7f888487 0x7e848589 0x7c838881
0xffb51c60  0x7d82887c 0x7e80887a 0x7c778a76 0x7b768a76
0xffb51c70  0x7c74886f 0x7e6e8770 0x7c6f846c 0x7a6d836c
0xffb51c80  0x7e6d856c 0x7e6a876c 0x7e6b876b 0x7c688869
0xffb51c90  0x7c688867 0x7e698268 0x80658167 0x81668868
0xffb51ca0  0x8167876b 0x826c846d 0x816d8272 0x826f8572
0xffb51cb0  0x87738474 0x86768079 0x847b7f78 0x847b807a
0xffb51cc0  0x827d817f 0x827f7f84 0x82847d83 0x83867e88
0xffb51cd0  0x83867e89 0x8388808a 0x828b808c 0x828b818d
0xffb51ce0  0x82908191 0x828f8196 0x82918095 0x80947f9a
0xffb51cf0  0x80987f9b 0x809e7f9e 0x80a080a1 0x80a380a5
0xffb51d00  0x80a680a9 0x80aa80a7 0x80ae80ab 0x80ae80b3
0xffb51d10  0x80b480b6 0x80b780b8 0x80ba80bc 0x80be80bd
0xffb51d20  0x80c180c3 0x80c980ca 0x80cf80ce 0x80ce80d0
0xffb51d30  0x80d280d1 0x80d280d1 0x80d080d2 0x80d180da
0xffb51d40  0x80d980d8 0x80d780d7 0x80d780d7 0x80d780d7
0xffb51d50  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb51d60  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb51d70  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb51d80  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb51d90  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb51da0  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb51db0  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb51dc0  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb51dd0  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb51de0  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb51df0  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb51e00  0x80d780d7 0x80d780d7 0x80d880d4 0x80c180ce
0xffb51e10  0x80cf80c8 0x80cd80cc 0x80cf80ce 0x80c880ca
0xffb51e20  0x80c680c5 0x80bc80a6 0x87847f69 0x964d8033
0xffb51e30  0x82268926 0x76278f26 0x76258f26 0x77239028
0xffb51e40  0x7d249226 0x7e269026 0x7f259129 0x7b25972d
0xffb51e50  0x7e309831 0x812b9428 0x76219522 0x7b209c23
0xffb51e60  0x86219d22 0x7d1f9724 0x7b21921a 0x85209020
0xffb51e70  0x87208e1c 0x821a931f 0x841d921d 0x831d8d1e
0xffb51e80  0x70728678 0x73768675 0x74758675 0x76788877
0xffb51e90  0x77728775 0x7c788573 0x7c738572 0x7b758572
0xffb51ea0  0x7a708573 0x7d718873 0x81708871 0x7e6e886d
0xffb51eb0  0x786f8869 0x796e886d 0x786c876b 0x756b856d
0xffb51ec0  0x7f6c866d 0x7f6a8769 0x7d6b886a 0x816c876a
0xffb51ed0  0x8068866b 0x816c866a 0x7c698568 0x7a69856e
0xffb51ee0  0x7e69866d 0x846a856b 0x896a856e 0x8567856b
0xffb51ef0  0x876c846d 0x8b6c836e 0x876f816f 0x826e7f72
0xffb51f00  0x86748073 0x86758277 0x8677837b 0x8476807c
0xffb51f10  0x837a7e80 0x82807f7f 0x82817f84 0x85847e84
0xffb51f20  0x82898087 0x818d7f8a 0x808c7f8a 0x808f7f92
0xffb51f30  0x83917f94 0x82957f96 0x82957e95 0x819a7f9a
0xffb51f40  0x809c7f9c 0x809e809d 0x80a280a2 0x80a380a5
0xffb51f50  0x80a480a4 0x80a980a7 0x80a980a9 0x80ad80ae
0xffb51f60  0x80af80b1 0x80af80b2 0x80b680b4 0x80b780bb
0xffb51f70  0x80bf80c1 0x80c080c5 0x80c580cb 0x80ca80ce
0xffb51f80  0x80cd80ca 0x80cd80cf 0x80d380d2 0x80d380d6
0xffb51f90  0x80d980d4 0x80d780d7 0x80d980d7 0x80d680d8
0xffb51fa0  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb51fb0  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb51fc0  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb51fd0  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb51fe0  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb51ff0  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb52000  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb52010  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb52020  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb52030  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb52040  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d8
0xffb52050  0x80d380d9 0x80d880d2 0x80da80d5 0x80d980d8
0xffb52060  0x80d180cf 0x80d480d1 0x80d180d1 0x80ce80ce
0xffb52070  0x80d080ca 0x80ca80cb 0x80cb80c9 0x80c980c9
0xffb52080  0x80c980c7 0x80c880c3 0x80c680c6 0x80c380c2
0xffb52090  0x80c080c6 0x80c480c5 0x80c280bf 0x80bd80ba
0xffb520a0  0x80b680b7 0x80af809b 0x8b7b815c 0x953a8029
0xffb520b0  0x7f278b22 0x77289028 0x7d248f28 0x7b269223
0xffb520c0  0x77259225 0x80268e26 0x8027902c 0x782a912c
0xffb520d0  0x85359331 0x882c9420 0x71219520 0x7a219927
0xffb520e0  0x8b1d9b22 0x8420951a 0x7c208f1f 0x821b8d20
0xffb520f0  0x82198e20 0x8019951d 0x851f9219 0x871c921b
0xffb52100  0x7a668464 0x7c648560 0x7e668664 0x7e638863
0xffb52110  0x7f608766 0x82628562 0x82658561 0x84638262
0xffb52120  0x83618460 0x845f8864 0x8461855f 0x84648161
0xffb52130  0x82618261 0x82668262 0x82688466 0x836b846c
0xffb52140  0x856b836e 0x846a846f 0x836a846f 0x856e8174
0xffb52150  0x85708273 0x84758273 0x85768077 0x84747f7b
0xffb52160  0x85768279 0x867a8081 0x867e7e7d 0x847f8084
0xffb52170  0x82847f85 0x8384808a 0x83887e8c 0x838a7e8d
0xffb52180  0x828a7f91 0x82918091 0x82918095 0x81997f9a
0xffb52190  0x809b7e99 0x809f7f9b 0x809d80a1 0x80a280a0
0xffb521a0  0x80a380a4 0x80aa80a6 0x80a980ad 0x80aa80af
0xffb521b0  0x80b080b2 0x80b280b4 0x80b880ba 0x80bb80be
0xffb521c0  0x80be80c2 0x80c180c3 0x80c480c7 0x80c680ca
0xffb521d0  0x80ca80c9 0x80cb80cc 0x80ce80d0 0x80ce80d1
0xffb521e0  0x80d380d2 0x80d480d1 0x80d280d0 0x80d380cb
0xffb521f0  0x80d280da 0x80da80d8 0x80d780d7 0x80d780d7
0xffb52200  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb52210  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb52220  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb52230  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb52240  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb52250  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb52260  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb52270  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb52280  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb52290  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb522a0  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb522b0  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb522c0  0x80d780d7 0x80d880ce 0x80c980c8 0x80cc80c9
0xffb522d0  0x80cc80ca 0x80c880ca 0x80c980cb 0x80cb80c9
0xffb522e0  0x80c680c6 0x80c480c3 0x80bf80be 0x80bd80bf
0xffb522f0  0x80bb80ba 0x80b980ba 0x80ba80b9 0x80b780b6
0xffb52300  0x80b680b8 0x80b180b2 0x80b380b3 0x80b180b4
0xffb52310  0x80b380b3 0x80b280b4 0x80af80b0 0x80a980aa
0xffb52320  0x80a980a8 0x7fa0818d 0x85768158 0x92388029
0xffb52330  0x7d268a27 0x76268e24 0x7b278e21 0x78269427
0xffb52340  0x7a289125 0x7e288a28 0x79228e2c 0x76268b2d
0xffb52350  0x832d8c31 0x88289326 0x7d239322 0x8020961f
0xffb52360  0x8920991f 0x881f931e 0x83208c20 0x811e8a1e
0xffb52370  0x801c8c1d 0x8319941c 0x851d901d 0x811c9416
0xffb52380  0x85608163 0x84648364 0x88688366 0x86698268
0xffb52390  0x8668816c 0x896d806b 0x896b816f 0x8a6f8071
0xffb523a0  0x8a6f806e 0x8a738071 0x87747f70 0x86737f77
0xffb523b0  0x87797e79 0x86797e7e 0x897c7e79 0x8b817e7f
0xffb523c0  0x88817e80 0x85847d84 0x838a7d86 0x82877e8c
0xffb523d0  0x828a7f8c 0x828b7f8d 0x83917e92 0x838d7e95
0xffb523e0  0x82917f95 0x82987e96 0x81987d9b 0x809b7ea0
0xffb523f0  0x809e7f9f 0x80a080a5 0x80a380a7 0x80aa80a8
0xffb52400  0x80aa80af 0x80af80b1 0x80b280b2 0x80b280b5
0xffb52410  0x80ba80bc 0x80bb80bd 0x80c080c0 0x80c480c4
0xffb52420  0x80c780c5 0x80c980c9 0x80cd80cd 0x80d180cb
0xffb52430  0x80ce80ce 0x80ce80d2 0x80d180d1 0x80d380d2
0xffb52440  0x80d480d4 0x80d580d0 0x80d680d4 0x80d480d5
0xffb52450  0x80d480d3 0x80d780d1 0x80d680d4 0x80d380d4
0xffb52460  0x80d580d8 0x80d380d6 0x80d080d5 0x80d680d8
0xffb52470  0x80d380d7 0x80d980d8 0x80d280da 0x80d880d3
0xffb52480  0x80d980d8 0x80d780d6 0x80d880d7 0x80d780d7
0xffb52490  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb524a0  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb524b0  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb524c0  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb524d0  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb524e0  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb524f0  0x80d380da 0x80d280da 0x80d980ce 0x80da80d0
0xffb52500  0x80d380da 0x80d480ce 0x80d780cf 0x80d580d8
0xffb52510  0x80d180d2 0x80d080d3 0x80d080d5 0x80d180ce
0xffb52520  0x80cf80cf 0x80cf80cf 0x80ce80ce 0x80cd80cf
0xffb52530  0x80cb80cd 0x80cc80cb 0x80cb80cd 0x80c980ca
0xffb52540  0x80cc80cb 0x80c480c7 0x80c680bf 0x80c280bf
0xffb52550  0x80bc80be 0x80bd80bb 0x80bc80bd 0x80bc80bb
0xffb52560  0x80ba80b8 0x80b580b3 0x80b580b5 0x80b080b1
0xffb52570  0x80b180af 0x80ae80ab 0x80af80a9 0x80aa80aa
0xffb52580  0x80a980aa 0x80a880a6 0x80a380a8 0x80a880a4
0xffb52590  0x80a580a6 0x80a580a9 0x80a480a7 0x80a380a4
0xffb525a0  0x809f80a0 0x7b9d8187 0x7d718257 0x91377e26
0xffb525b0  0x7d218c26 0x75289424 0x77279227 0x76269522
0xffb525c0  0x7d2e9222 0x7d2a8f25 0x722a932d 0x73289228
0xffb525d0  0x7f329331 0x892b9425 0x8a22911f 0x86219220
0xffb525e0  0x8820981d 0x8d25951f 0x8a1e921f 0x7f1d911b
0xffb525f0  0x7f208e19 0x871f911d 0x851c9419 0x7d19951d
0xffb52600  0x88737e77 0x87797f78 0x88778079 0x897e7e7f
0xffb52610  0x877a7e7f 0x87807c82 0x86847d81 0x84847e84
0xffb52620  0x83877e84 0x84867a8a 0x838a7c89 0x828d7f8f
0xffb52630  0x838b7f93 0x82907f92 0x82957f95 0x81947f97
0xffb52640  0x81997f9d 0x809f7fa0 0x80a07fa4 0x80a27fa4
0xffb52650  0x80a680a6 0x80a780a8 0x80a980ae 0x80ad80ab
0xffb52660  0x80b080b1 0x80b580b4 0x80b880b6 0x80ba80bb
0xffb52670  0x80bc80bc 0x80be80c3 0x80c080c3 0x80c380c7
0xffb52680  0x80c780c8 0x80c880cc 0x80c980ca 0x80cc80c9
0xffb52690  0x80cc80d0 0x80d080cc 0x80ce80ce 0x80cf80ce
0xffb526a0  0x80ce80cf 0x80ce80cf 0x80cf80d0 0x80cd80cf
0xffb526b0  0x80cd80ca 0x80d480cd 0x80d080cf 0x80cc80d1
0xffb526c0  0x80d180d6 0x80d180c7 0x80ce80da 0x80da80da
0xffb526d0  0x80c780c9 0x80da80c6 0x80d480d3 0x80da80c9
0xffb526e0  0x80c680d5 0x80c880d3 0x80d080da 0x80d980d8
0xffb526f0  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb52700  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb52710  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb52720  0x80d780d7 0x80d880cf 0x80d280ce 0x80c680da
0xffb52730  0x80da80d8 0x80d780d8 0x80d280cf 0x80da80c7
0xffb52740  0x80da80da 0x80cf80c8 0x80da80c4 0x80da80ca
0xffb52750  0x80cc80c7 0x80da80d1 0x80da80c0 0x80cb80d1
0xffb52760  0x80cd80ca 0x80cf80ce 0x80cd80cf 0x80cf80cd
0xffb52770  0x80cc80cb 0x80ce80cb 0x80d080cd 0x80cc80c9
0xffb52780  0x80ce80cd 0x80cd80cb 0x80cc80c9 0x80cc80c9
0xffb52790  0x80c780c8 0x80c780c7 0x80c580c5 0x80c680c3
0xffb527a0  0x80c580c1 0x80c080c4 0x80c180c0 0x80c180be
0xffb527b0  0x80bf80c1 0x80c080c0 0x80be80bf 0x80bf80c0
0xffb527c0  0x80bd80bd 0x80bd80b9 0x80ba80b6 0x80b080b5
0xffb527d0  0x80b280b3 0x80b280b2 0x80b380b0 0x80b080b0
0xffb527e0  0x80b180b0 0x80ac80aa 0x80a880ab 0x80af80ab
0xffb527f0  0x80a880aa 0x80a980aa 0x80a680a4 0x80a580a5
0xffb52800  0x80a280a3 0x809f809f 0x80a080a0 0x80a280a1
0xffb52810  0x80a080a3 0x80a080a1 0x80a380a3 0x80a1809d
0xffb52820  0x809f809c 0x7e988088 0x81728055 0x8e377b29
0xffb52830  0x7b258b25 0x72219726 0x74289424 0x74269425
0xffb52840  0x7b26902a 0x7a289226 0x7129972a 0x732b9822
0xffb52850  0x7b2c9a2c 0x852d9424 0x8d248d1c 0x85228f1b
0xffb52860  0x8122961e 0x86229620 0x8421971b 0x80229720
0xffb52870  0x801e8d1e 0x831c8c1b 0x7e15961d 0x7c1d941c
0xffb52880  0x848d7b88 0x838c7f92 0x828f7f94 0x83947e92
0xffb52890  0x82957f97 0x82977e98 0x819b7f9a 0x819d7f9f
0xffb528a0  0x809f7f9e 0x80a37fa0 0x80a37fa3 0x80a980a6
0xffb528b0  0x80ab80a8 0x80ac80ab 0x80ad80ae 0x80b480b4
0xffb528c0  0x80b480b5 0x80b780b8 0x80ba80bc 0x80bd80bd
0xffb528d0  0x80bf80c0 0x80bf80bf 0x80c080c2 0x80c580c1
0xffb528e0  0x80c280c4 0x80c380c4 0x80c680c8 0x80c680c9
0xffb528f0  0x80c580c7 0x80c780c7 0x80ca80cb 0x80c880cb
0xffb52900  0x80ca80c9 0x80cb80ca 0x80cc80ca 0x80ca80cb
0xffb52910  0x80ca80cc 0x80ce80ca 0x80cc80ca 0x80cc80cd
0xffb52920  0x80ce80c8 0x80cf80cc 0x80cb80ce 0x80cd80ce
0xffb52930  0x80cd80cf 0x80c980cd 0x80cf80ce 0x80cf80cd
0xffb52940  0x80cd80d0 0x80cf80ce 0x80ce80cd 0x80d080cb
0xffb52950  0x80cf80cd 0x80cc80cc 0x80ce80ce 0x80d080cc
0xffb52960  0x80cc80cf 0x80ce80cc 0x80cd80ca 0x80cd80ca
0xffb52970  0x80d180ce 0x80cf80cb 0x80cd80cf 0x80ce80ce
0xffb52980  0x80d080cb 0x80ce80cf 0x80cc80d2 0x80ca80cf
0xffb52990  0x80cc80d0 0x80ce80cd 0x80cc80cd 0x80d080cd
0xffb529a0  0x80cd80cd 0x80cc80cd 0x80ca80c8 0x80ce80cb
0xffb529b0  0x80cc80cc 0x80ca80c9 0x80cd80cd 0x80cc80cc
0xffb529c0  0x80ca80cb 0x80ca80ca 0x80ca80cb 0x80cb80ca
0xffb529d0  0x80c780cc 0x80c980ca 0x80c980c8 0x80c780ca
0xffb529e0  0x80ca80c8 0x80c580c7 0x80c580c8 0x80ca80c4
0xffb529f0  0x80c880c8 0x80c580c5 0x80c580c5 0x80c280c6
0xffb52a00  0x80c580c4 0x80c480c2 0x80c380c3 0x80bf80c3
0xffb52a10  0x80bd80c0 0x80bf80be 0x80bd80b8 0x80bc80ba
0xffb52a20  0x80be80b9 0x80b980bb 0x80bb80b8 0x80b880b7
0xffb52a30  0x80b780b7 0x80b580b8 0x80b880bb 0x80b680b5
0xffb52a40  0x80b680b6 0x80b680b4 0x80b080b1 0x80b180ad
0xffb52a50  0x80ae80ac 0x80b080b1 0x80ae80ac 0x80ad80aa
0xffb52a60  0x80ac80a8 0x80ae80a9 0x80a880ab 0x80a880aa
0xffb52a70  0x80a880aa 0x80ab80a8 0x80a880a7 0x80a580a6
0xffb52a80  0x80a380a2 0x80a180a2 0x80a3809f 0x80a1809f
0xffb52a90  0x80a380a1 0x80a380a3 0x809f80a2 0x80a2809f
0xffb52aa0  0x80a1809e 0x809a7f89 0x85737d52 0x8c308127
0xffb52ab0  0x79248e25 0x7127942b 0x76238f25 0x74259225
0xffb52ac0  0x78269224 0x7b279127 0x7427932a 0x762a9527
0xffb52ad0  0x7b2b952d 0x85269227 0x93228e19 0x821e951f
0xffb52ae0  0x78229c1e 0x7d219821 0x811f9824 0x83209a1f
0xffb52af0  0x821e941f 0x7f1d9221 0x7b1d971b 0x7d20981d
0xffb52b00  0x80a17ea2 0x80a47fa5 0x80a380a6 0x80aa80a7
0xffb52b10  0x80ad80a9 0x80af80ab 0x80b180ad 0x80af80b0
0xffb52b20  0x80b180af 0x80b180b4 0x80b580b6 0x80b580b7
0xffb52b30  0x80b980b9 0x80b880ba 0x80b880bb 0x80bb80b8
0xffb52b40  0x80c080bd 0x80be80bf 0x80c280bf 0x80c180c0
0xffb52b50  0x80c280bd 0x80c080bf 0x80c080be 0x80c080c1
0xffb52b60  0x80c180bd 0x80c280c1 0x80c280c2 0x80c080c3
0xffb52b70  0x80be80c2 0x80c380c1 0x80c280c6 0x80c380c3
0xffb52b80  0x80c780c5 0x80c680c4 0x80c580c1 0x80c880c3
0xffb52b90  0x80c480c5 0x80c380c5 0x80c780c6 0x80c680c6
0xffb52ba0  0x80c280c6 0x80c580c1 0x80c580c3 0x80c780c2
0xffb52bb0  0x80c880c4 0x80c580c6 0x80c880c3 0x80c780c6
0xffb52bc0  0x80c780c6 0x80c580c6 0x80c680c4 0x80c880c5
0xffb52bd0  0x80c580c5 0x80c480c6 0x80c480c4 0x80c580c4
0xffb52be0  0x80c480c5 0x80c280c3 0x80c380be 0x80c280c1
0xffb52bf0  0x80c680c2 0x80c480c4 0x80c080c6 0x80c280c2
0xffb52c00  0x80c180c5 0x80c380c2 0x80c480c3 0x80c380c5
0xffb52c10  0x80c280c5 0x80c280c3 0x80bf80c2 0x80c180c0
0xffb52c20  0x80c380c2 0x80c080c0 0x80c080c1 0x80be80c1
0xffb52c30  0x80bf80c1 0x80bf80c0 0x80c680bc 0x80c180c0
0xffb52c40  0x80c080c2 0x80c180bf 0x80c080be 0x80bd80c1
0xffb52c50  0x80bc80bf 0x80bd80c0 0x80bf80bd 0x80c280be
0xffb52c60  0x80bc80c0 0x80bc80bd 0x80bf80bf 0x80c080bc
0xffb52c70  0x80bc80bd 0x80be80bc 0x80bd80bc 0x80b980bd
0xffb52c80  0x80bd80bc 0x80bd80bc 0x80bc80b7 0x80bb80b9
0xffb52c90  0x80b980b7 0x80b680b7 0x80b880b6 0x80b380b5
0xffb52ca0  0x80b580b7 0x80b380b5 0x80b380b3 0x80b480b1
0xffb52cb0  0x80b280b5 0x80b080b1 0x80b280b4 0x80b380b4
0xffb52cc0  0x80b280b3 0x80b080b1 0x80b080ad 0x80ab80b0
0xffb52cd0  0x80ad80ae 0x80ac80ad 0x80ad80ab 0x80ab80ab
0xffb52ce0  0x80ad80ab 0x80aa80aa 0x80ac80a7 0x80aa80a9
0xffb52cf0  0x80a980ab 0x80aa80a9 0x80a680a8 0x80a680a8
0xffb52d00  0x80a380a3 0x80a180a5 0x80a380a3 0x80a380a2
0xffb52d10  0x809f80a3 0x80a080a1 0x80a280a2 0x80a180a2
0xffb52d20  0x809f809f 0x809c7f8a 0x85767c57 0x88358627
0xffb52d30  0x77258f26 0x71248e2a 0x71258b25 0x6e249024
0xffb52d40  0x72249524 0x79258f2d 0x78268d2a 0x782a902a
0xffb52d50  0x7c2a8f2a 0x82288f24 0x88218f21 0x7e1e9b1d
0xffb52d60  0x761fa022 0x7a209a1f 0x7f1f9923 0x861f9c21
0xffb52d70  0x86209822 0x831a9622 0x8223961a 0x7c1f991f
0xffb52d80  0x80ab80ad 0x80b080af 0x80b180b0 0x80af80b2
0xffb52d90  0x80b080b3 0x80b180b0 0x80b280b0 0x80b280b4
0xffb52da0  0x80b380b2 0x80b180b4 0x80b580b4 0x80b680b7
0xffb52db0  0x80b780b4 0x80b780b5 0x80b880b4 0x80b580b8
0xffb52dc0  0x80b980bc 0x80b980b9 0x80bb80be 0x80ba80bc
0xffb52dd0  0x80bc80bf 0x80bf80bc 0x80b980bd 0x80bc80bd
0xffb52de0  0x80b980c0 0x80bd80be 0x80ba80bf 0x80be80be
0xffb52df0  0x80bc80be 0x80bc80bf 0x80bc80bf 0x80be80be
0xffb52e00  0x80bc80c0 0x80bf80c1 0x80bf80bf 0x80c180bd
0xffb52e10  0x80bc80c0 0x80bf80c3 0x80bf80bd 0x80c280bc
0xffb52e20  0x80bf80bc 0x80bd80bb 0x80be80bd 0x80bd80c0
0xffb52e30  0x80ba80bd 0x80be80bf 0x80bc80bf 0x80be80bc
0xffb52e40  0x80bd80bb 0x80bf80bd 0x80bc80be 0x80bb80bd
0xffb52e50  0x80bb80bb 0x80bb80c0 0x80bb80ba 0x80be80bb
0xffb52e60  0x80bc80bb 0x80ba80b8 0x80b880b9 0x80bb80b9
0xffb52e70  0x80ba80ba 0x80ba80ba 0x80bf80b8 0x80b780bf
0xffb52e80  0x80ba80bb 0x80bb80bb 0x80b880b9 0x80c080b9
0xffb52e90  0x80be80b8 0x80b980bb 0x80b980ba 0x80ba80bd
0xffb52ea0  0x80bb80bb 0x80ba80ba 0x80ba80bd 0x80bb80bb
0xffb52eb0  0x80bc80b9 0x80bc80b8 0x80be80b9 0x80bf80b9
0xffb52ec0  0x80b980bd 0x80bb80b9 0x80bd80bb 0x80bc80bb
0xffb52ed0  0x80bd80b9 0x80bb80bb 0x80bb80b9 0x80ba80bb
0xffb52ee0  0x80b880bb 0x80ba80bc 0x80b780ba 0x80b980bb
0xffb52ef0  0x80bd80bd 0x80ba80b8 0x80ba80b8 0x80be80b9
0xffb52f00  0x80bd80b6 0x80ba80bd 0x80bb80b8 0x80b980b8
0xffb52f10  0x80b680b8 0x80b780b7 0x80b480b6 0x80b480b5
0xffb52f20  0x80b480b6 0x80b480b0 0x80b680b1 0x80b580b3
0xffb52f30  0x80af80b3 0x80b080b3 0x80b280b5 0x80b580b2
0xffb52f40  0x80b480b3 0x80b280b2 0x80b080b1 0x80ac80ae
0xffb52f50  0x80ad80ae 0x80af80ac 0x80ad80ac 0x80ad80ac
0xffb52f60  0x80ab80ab 0x80ac80ae 0x80a980ad 0x80ac80ad
0xffb52f70  0x80af80ab 0x80ad80a9 0x80aa80a8 0x80a880a9
0xffb52f80  0x80a780a8 0x80a480a5 0x80a680a5 0x80a380a5
0xffb52f90  0x80a480a3 0x80a280a4 0x80a380a2 0x80a180a4
0xffb52fa0  0x80a080a2 0x819b7f8b 0x83757e5a 0x85328426
0xffb52fb0  0x76258e27 0x6f278f27 0x6b268f27 0x69249023
0xffb52fc0  0x6e249328 0x78239226 0x7f279129 0x7c2a9328
0xffb52fd0  0x7c27932d 0x7f279126 0x7c209321 0x7a229e20
0xffb52fe0  0x76239d1f 0x79229820 0x8023981f 0x8b239b23
0xffb52ff0  0x8c229e23 0x89209921 0x85239720 0x7c1f971f
0xffb53000  0x80a980aa 0x80ac80ae 0x80ac80ad 0x80ad80ad
0xffb53010  0x80ac80ae 0x80ad80ac 0x80b080ad 0x80b080ae
0xffb53020  0x80ad80b2 0x80ae80af 0x80b180b1 0x80af80b1
0xffb53030  0x80b380b3 0x80b080b0 0x80b180b3 0x80b080b2
0xffb53040  0x80b480b1 0x80b580b6 0x80b880b4 0x80b580b3
0xffb53050  0x80b780b7 0x80b780b3 0x80b480b6 0x80b480b5
0xffb53060  0x80b480b5 0x80b380b7 0x80b780b6 0x80b580b6
0xffb53070  0x80b480b7 0x80b680b6 0x80b680b6 0x80b580b8
0xffb53080  0x80b680b8 0x80b580b7 0x80b880b5 0x80b780b8
0xffb53090  0x80b580b8 0x80b580b4 0x80b680b5 0x80b580b4
0xffb530a0  0x80b780b3 0x80b380b4 0x80b780b5 0x80b680b0
0xffb530b0  0x80b580b5 0x80b680b5 0x80b380b6 0x80b280b7
0xffb530c0  0x80b680b5 0x80b680b3 0x80b680b2 0x80b680b7
0xffb530d0  0x80b280b6 0x80b280b3 0x80b480b5 0x80b380b3
0xffb530e0  0x80b180b1 0x80b280b2 0x80b080ad 0x80b380b3
0xffb530f0  0x80b380b4 0x80b280b5 0x80b380b4 0x80b480b5
0xffb53100  0x80b280b3 0x80b680b7 0x80b480b5 0x80b780b4
0xffb53110  0x80b780b7 0x80b480b7 0x80b380b6 0x80b480b6
0xffb53120  0x80b880b9 0x80b280b6 0x80b680b8 0x80b580b7
0xffb53130  0x80b880b6 0x80b980b6 0x80b480b7 0x80b980b7
0xffb53140  0x80b980b9 0x80b580b7 0x80b880b6 0x80b980b8
0xffb53150  0x80b780ba 0x80b980b9 0x80b880ba 0x80bd80ba
0xffb53160  0x80b880b9 0x80b980bb 0x80ba80b9 0x80b980b8
0xffb53170  0x80ba80ba 0x80ba80b8 0x80b980b9 0x80b880ba
0xffb53180  0x80b880bc 0x80b980b9 0x80bb80ba 0x80b780b7
0xffb53190  0x80ba80b7 0x80b980ba 0x80b580b8 0x80b680b4
0xffb531a0  0x80b480b6 0x80b480b5 0x80b580b4 0x80b380b6
0xffb531b0  0x80b180b4 0x80af80b3 0x80b280b3 0x80b480b5
0xffb531c0  0x80b180b0 0x80b180b1 0x80b080b3 0x80ac80af
0xffb531d0  0x80ad80af 0x80ae80af 0x80ad80ae 0x80ad80ad
0xffb531e0  0x80ab80ac 0x80ac80ac 0x80ac80ae 0x80aa80ac
0xffb531f0  0x80aa80aa 0x80aa80b0 0x80a980a7 0x80a880aa
0xffb53200  0x80a580a7 0x80a480a4 0x80a680a8 0x80a480a4
0xffb53210  0x80a380a3 0x80a680a1 0x80a480a6 0x80a280a2
0xffb53220  0x80a280a0 0x809d7f8c 0x8678805b 0x89408324
0xffb53230  0x75258d26 0x6f289029 0x6c249229 0x69278e26
0xffb53240  0x6d259124 0x7725942a 0x7d249529 0x8029972a
0xffb53250  0x7c2a9629 0x7b2c9228 0x7b229826 0x7a1d9f24
0xffb53260  0x78299721 0x7923971e 0x7b1f9624 0x85229920
0xffb53270  0x8621a121 0x7e289b22 0x7e239624 0x8326921d
0xffb53280  0x80a980a7 0x80a980a9 0x80a980a7 0x80ab80a8
0xffb53290  0x80aa80ab 0x80a880ad 0x80ab80aa 0x80a880ab
0xffb532a0  0x80ab80ab 0x80aa80ab 0x80ac80ae 0x80ad80ad
0xffb532b0  0x80ae80ab 0x80ad80ac 0x80ad80ae 0x80aa80b2
0xffb532c0  0x80ad80ad 0x80ad80b0 0x80b180ae 0x80af80b0
0xffb532d0  0x80ae80af 0x80af80af 0x80ad80af 0x80ad80af
0xffb532e0  0x80ad80b2 0x80ae80b1 0x80ad80ae 0x80b080ae
0xffb532f0  0x80af80b0 0x80af80af 0x80ae80b2 0x80b480b0
0xffb53300  0x80b280b2 0x80af80b2 0x80af80b3 0x80ae80b0
0xffb53310  0x80b180af 0x80b280ae 0x80b080b2 0x80ae80af
0xffb53320  0x80ac80b0 0x80af80af 0x80ae80ae 0x80ac80ad
0xffb53330  0x80ae80b2 0x80af80b1 0x80b080b3 0x80b180b0
0xffb53340  0x80b280ad 0x80af80b2 0x80af80b1 0x80b080b1
0xffb53350  0x80b080af 0x80ae80b2 0x80b080b2 0x80af80ad
0xffb53360  0x80b380ac 0x80ae80ae 0x80ad80b0 0x80b380b2
0xffb53370  0x80af80b1 0x80b480b3 0x80b480b3 0x80b380b6
0xffb53380  0x80b480b4 0x80b480b3 0x80b580b3 0x80b680b6
0xffb53390  0x80b680b4 0x80b580b3 0x80b380b4 0x80b780b5
0xffb533a0  0x80b980b8 0x80b680b8 0x80b780b8 0x80b980b8
0xffb533b0  0x80b780b6 0x80b780b9 0x80b980ba 0x80b880bb
0xffb533c0  0x80b880b9 0x80b780b9 0x80b980ba 0x80b980b8
0xffb533d0  0x80bb80b6 0x80bb80ba 0x80b880b8 0x80bc80b9
0xffb533e0  0x80b980ba 0x80b980b9 0x80b780ba 0x80b980b9
0xffb533f0  0x80b880bc 0x80bb80ba 0x80b980b9 0x80ba80b8
0xffb53400  0x80b980ba 0x80b980bb 0x80bb80b9 0x80b680b9
0xffb53410  0x80b880b8 0x80b780b7 0x80b780b7 0x80b780b5
0xffb53420  0x80b480b2 0x80b380b5 0x80b280b4 0x80b080b2
0xffb53430  0x80b280b1 0x80b080b2 0x80b280b1 0x80b380b3
0xffb53440  0x80b180b0 0x80b080af 0x80b080b0 0x80ac80b0
0xffb53450  0x80ae80af 0x80ad80ae 0x80ad80ab 0x80ad80ad
0xffb53460  0x80ae80ab 0x80ac80ad 0x80ac80ab 0x80aa80ad
0xffb53470  0x80ad80ac 0x80ab80ab 0x80aa80ab 0x80a880a9
0xffb53480  0x80aa80a7 0x80a680a7 0x80a480a4 0x80a580a5
0xffb53490  0x80a380a2 0x80a4809e 0x80a880a3 0x80a380a2
0xffb534a0  0x809e80a2 0x7f9c808f 0x8977815c 0x8d338527
0xffb534b0  0x73248b26 0x73278c28 0x73289122 0x69289025
0xffb534c0  0x6b249024 0x77289426 0x7e279528 0x8730972c
0xffb534d0  0x7d28982b 0x762b9526 0x7c269a26 0x7b27a023
0xffb534e0  0x78259824 0x7b239421 0x771e9420 0x80259b1e
0xffb534f0  0x8225a01b 0x79239725 0x7c22951f 0x8a269622
0xffb53500  0x80a280a3 0x80a480a3 0x80a280a5 0x80a080a5
0xffb53510  0x80a480a4 0x80a580a6 0x80a680a3 0x80a980a3
0xffb53520  0x80a480a6 0x80a480a6 0x80a780a7 0x80a680a5
0xffb53530  0x80a780a6 0x80a880a8 0x80a780a8 0x80a980a6
0xffb53540  0x80aa80a9 0x80aa80ab 0x80aa80a6 0x80a980aa
0xffb53550  0x80a980a7 0x80a980a9 0x80a880a4 0x80ab80aa
0xffb53560  0x80a980ac 0x80a980ab 0x80aa80ac 0x80aa80a9
0xffb53570  0x80ad80ac 0x80ab80ae 0x80ad80ab 0x80ac80ab
0xffb53580  0x80ac80ac 0x80ad80ad 0x80ab80ad 0x80ab80ab
0xffb53590  0x80af80ab 0x80aa80ab 0x80a980a9 0x80ac80ad
0xffb535a0  0x80ad80a8 0x80ac80ad 0x80aa80ac 0x80af80ae
0xffb535b0  0x80ae80ac 0x80ab80ad 0x80ae80ad 0x80ac80ae
0xffb535c0  0x80b080ac 0x80b080ab 0x80b180ad 0x80af80af
0xffb535d0  0x80b080af 0x80af80b0 0x80af80af 0x80b080ae
0xffb535e0  0x80af80b0 0x80b180b0 0x80b080b0 0x80af80b0
0xffb535f0  0x80b180b1 0x80b280b2 0x80b680b4 0x80b480b4
0xffb53600  0x80b580b2 0x80b580b4 0x80b580b4 0x80b480b5
0xffb53610  0x80b680b7 0x80b880b7 0x80b580b6 0x80b380b6
0xffb53620  0x80b680b7 0x80b780b6 0x80b780b7 0x80b780b8
0xffb53630  0x80b780b7 0x80b780b6 0x80bb80b7 0x80b780b8
0xffb53640  0x80b880b8 0x80b980b8 0x80b880b7 0x80b880b8
0xffb53650  0x80b780ba 0x80b880b6 0x80ba80b9 0x80b680bb
0xffb53660  0x80b980ba 0x80ba80b9 0x80b980b5 0x80bc80b6
0xffb53670  0x80b980bb 0x80bc80b7 0x80b980b9 0x80ba80b8
0xffb53680  0x80b880b8 0x80b780bc 0x80b880b8 0x80b880bb
0xffb53690  0x80b580b5 0x80b680b5 0x80b780b4 0x80b380b7
0xffb536a0  0x80b380b1 0x80b580b0 0x80b280b2 0x80b080b0
0xffb536b0  0x80b280af 0x80ae80b0 0x80b180b2 0x80b180b1
0xffb536c0  0x80b080ae 0x80b080ae 0x80ae80b1 0x80ac80ad
0xffb536d0  0x80b080ac 0x80ae80b0 0x80ad80ae 0x80ab80ae
0xffb536e0  0x80a880ad 0x80ae80a7 0x80ae80ac 0x80aa80ac
0xffb536f0  0x80ab80ad 0x80ac80a9 0x80a980aa 0x80a880a7
0xffb53700  0x80aa80a6 0x80a480a5 0x80a580a5 0x80a380a5
0xffb53710  0x80a280a1 0x80a380a3 0x80a480a2 0x80a180a4
0xffb53720  0x809f809f 0x7f9e808e 0x847b835d 0x8b3e8629
0xffb53730  0x7c25892b 0x7a298629 0x6e278e22 0x662a9127
0xffb53740  0x68268e23 0x71289222 0x7f2a952a 0x842c962d
0xffb53750  0x7e2c9929 0x7d2d9629 0x7f289c22 0x7b25a126
0xffb53760  0x7b239923 0x82239121 0x80239220 0x7b1d9d22
0xffb53770  0x7b1e9e20 0x76219225 0x7a219223 0x83229821
0xffb53780  0x7f99809f 0x809d80a2 0x809f80a1 0x809e80a0
0xffb53790  0x80a0809e 0x809e80a2 0x80a180a1 0x80a180a2
0xffb537a0  0x80a280a3 0x80a580a0 0x80a480a4 0x80a380a5
0xffb537b0  0x80a480a3 0x80a580a4 0x80a380a6 0x80a480a6
0xffb537c0  0x80a380a6 0x80a480a6 0x80a680a6 0x80a580a5
0xffb537d0  0x80a880a5 0x80a680a8 0x80a480a5 0x80a680a7
0xffb537e0  0x80a580a8 0x80a480a8 0x80a780a8 0x80a880a8
0xffb537f0  0x80a880ac 0x80aa80a9 0x80aa80aa 0x80aa80aa
0xffb53800  0x80ab80ac 0x80a880ac 0x80ac80ab 0x80aa80ab
0xffb53810  0x80ac80aa 0x80a980ac 0x80a980ab 0x80aa80ab
0xffb53820  0x80a980ac 0x80a880ac 0x80ac80ac 0x80ae80ab
0xffb53830  0x80ad80ab 0x80ab80ae 0x80ad80ab 0x80ad80ae
0xffb53840  0x80b180ad 0x80af80ae 0x80af80af 0x80ae80ae
0xffb53850  0x80b180b0 0x80ae80b1 0x80ae80af 0x80ae80af
0xffb53860  0x80b180b0 0x80b180ad 0x80b180b2 0x80ad80b0
0xffb53870  0x80b180b1 0x80b580b3 0x80b580b5 0x80b480b3
0xffb53880  0x80b380b4 0x80b380b4 0x80b580b3 0x80b680b5
0xffb53890  0x80b580b5 0x80b680b5 0x80b580b6 0x80b780b8
0xffb538a0  0x80b580b6 0x80b780b8 0x80b580b8 0x80b780b8
0xffb538b0  0x80b580b4 0x80bc80b9 0x80b780b7 0x80ba80bb
0xffb538c0  0x80b880b6 0x80b880ba 0x80b680b7 0x80b680b8
0xffb538d0  0x80ba80b5 0x80b980b7 0x80b880b9 0x80b880b9
0xffb538e0  0x80bb80b5 0x80bb80ba 0x80b880b7 0x80b880b8
0xffb538f0  0x80b780b8 0x80b980b8 0x80b680bc 0x80ba80b6
0xffb53900  0x80bc80b8 0x80b980b9 0x80b880b9 0x80b880b7
0xffb53910  0x80b880b7 0x80b780b6 0x80b580b6 0x80b280b6
0xffb53920  0x80b280b4 0x80b280b1 0x80b180b0 0x80b080b2
0xffb53930  0x80af80af 0x80b080af 0x80b180b0 0x80b180af
0xffb53940  0x80af80af 0x80ac80b0 0x80ad80b1 0x80ab80ab
0xffb53950  0x80b080ac 0x80af80ad 0x80ac80ac 0x80aa80aa
0xffb53960  0x80aa80ad 0x80ab80ac 0x80ac80aa 0x80ab80ad
0xffb53970  0x80ac80ab 0x80ab80a9 0x80a980aa 0x80aa80a9
0xffb53980  0x80a980a3 0x80a880a4 0x80a580a7 0x80a380a3
0xffb53990  0x80a080a7 0x80a280a1 0x80a380a4 0x80a080a2
0xffb539a0  0x80a1809f 0x809d808c 0x817b825f 0x8d3d8425
0xffb539b0  0x84238f2c 0x7e278e25 0x69248e29 0x6725902a
0xffb539c0  0x63239126 0x6a26942a 0x7f2a922a 0x842b9428
0xffb539d0  0x822b9829 0x842a9728 0x84289c21 0x7f269e24
0xffb539e0  0x80239923 0x8a259623 0x85259724 0x771d9d20
0xffb539f0  0x78219a20 0x76209322 0x7a219223 0x80229720
0xffb53a00  0x7f9d8098 0x819d809c 0x819c7f9d 0x809d7f9e
0xffb53a10  0x809e809e 0x809e809e 0x809d809f 0x809e80a0
0xffb53a20  0x80a0809f 0x80a1809f 0x80a0809f 0x809f80a0
0xffb53a30  0x80a380a1 0x80a180a1 0x80a080a5 0x80a380a1
0xffb53a40  0x80a380a3 0x80a380a3 0x80a380a3 0x80a380a6
0xffb53a50  0x80a280a5 0x80a380a3 0x80a780a5 0x80a480a3
0xffb53a60  0x80a580a6 0x80a580a5 0x80a680a9 0x80a680aa
0xffb53a70  0x80a780a8 0x80a780a9 0x80a780aa 0x80ab80a9
0xffb53a80  0x80a880ac 0x80ab80ab 0x80aa80aa 0x80aa80ab
0xffb53a90  0x80aa80ab 0x80a980a8 0x80ab80a9 0x80a980a8
0xffb53aa0  0x80ab80ab 0x80aa80aa 0x80ad80ab 0x80a980a9
0xffb53ab0  0x80ac80ab 0x80ab80ab 0x80ab80b0 0x80ad80ac
0xffb53ac0  0x80ad80af 0x80b080ac 0x80af80ae 0x80af80b0
0xffb53ad0  0x80ae80ae 0x80af80b1 0x80af80af 0x80af80af
0xffb53ae0  0x80ad80b0 0x80b180b2 0x80af80af 0x80b380b0
0xffb53af0  0x80b180b2 0x80b480b3 0x80b180b0 0x80b680b2
0xffb53b00  0x80b680b0 0x80b480b6 0x80b280b5 0x80b280b5
0xffb53b10  0x80b480b4 0x80b580b6 0x80b680b1 0x80b480b6
0xffb53b20  0x80b480b7 0x80b580b7 0x80b480b7 0x80b480b9
0xffb53b30  0x80b480b8 0x80b780b4 0x80b680b4 0x80b880b6
0xffb53b40  0x80b780b7 0x80b680b9 0x80b680b6 0x80b780b7
0xffb53b50  0x80b580b7 0x80b680b9 0x80b680b6 0x80bb80b9
0xffb53b60  0x80ba80b6 0x80b980b5 0x80b980b6 0x80b880b4
0xffb53b70  0x80b880b8 0x80b780b5 0x80b780b6 0x80b880b7
0xffb53b80  0x80ba80b5 0x80b780b8 0x80b780b7 0x80b480b9
0xffb53b90  0x80b380b5 0x80b580b4 0x80b680b4 0x80b180b1
0xffb53ba0  0x80b180b2 0x80b480b0 0x80af80ae 0x80ae80ae
0xffb53bb0  0x80ae80af 0x80af80af 0x80b080af 0x80af80af
0xffb53bc0  0x80ae80ac 0x80b080ab 0x80ae80ad 0x80ad80ad
0xffb53bd0  0x80ad80ae 0x80ad80ac 0x80ad80ac 0x80ab80a9
0xffb53be0  0x80ab80ab 0x80aa80a9 0x80a880aa 0x80aa80aa
0xffb53bf0  0x80ac80ab 0x80ab80aa 0x80a980a9 0x80ab80a6
0xffb53c00  0x80ab80a6 0x80a680a6 0x80a580a4 0x80a480a4
0xffb53c10  0x80a180a2 0x80a380a3 0x80a080a2 0x80a0809e
0xffb53c20  0x809d80a2 0x7f9d8090 0x817f805e 0x873e832d
0xffb53c30  0x7a239229 0x7226942e 0x65268f2b 0x662a8f26
0xffb53c40  0x63239327 0x65229427 0x73298f2b 0x7b2b9227
0xffb53c50  0x8027972c 0x86239824 0x85269c25 0x85249a24
0xffb53c60  0x88249724 0x85259923 0x7f259a27 0x7e249a23
0xffb53c70  0x7d20951e 0x7b1f9120 0x7e20911f 0x8021951c
0xffb53c80  0x80988099 0x819b7f9b 0x829b8099 0x819b809a
0xffb53c90  0x809c809a 0x809b809f 0x819c809d 0x809f7f9a
0xffb53ca0  0x809e809d 0x80a1809e 0x80a180a0 0x809f80a0
0xffb53cb0  0x80a080a0 0x80a2809f 0x80a180a0 0x80a280a2
0xffb53cc0  0x80a180a1 0x80a280a3 0x80a180a6 0x80a180a6
0xffb53cd0  0x80a580a3 0x80a780a3 0x80a280a5 0x80a780a6
0xffb53ce0  0x80a980a6 0x80a680a6 0x80a880a9 0x80a780ab
0xffb53cf0  0x80a780a9 0x80a880aa 0x80ab80a9 0x80a780aa
0xffb53d00  0x80ae80aa 0x80ab80aa 0x80ac80aa 0x80ad80aa
0xffb53d10  0x80ab80aa 0x80a980aa 0x80a880aa 0x80aa80ab
0xffb53d20  0x80ab80ab 0x80a880ab 0x80ab80a8 0x80aa80b0
0xffb53d30  0x80ab80ab 0x80b080ab 0x80b080ad 0x80af80af
0xffb53d40  0x80ab80b1 0x80af80b0 0x80af80b0 0x80ae80ae
0xffb53d50  0x80b080b0 0x80b180af 0x80b080af 0x80ae80b1
0xffb53d60  0x80b180b3 0x80b180b0 0x80b280b1 0x80b080b1
0xffb53d70  0x80b480b2 0x80b480b6 0x80b280b5 0x80b180b6
0xffb53d80  0x80b280b2 0x80b580b5 0x80b480b2 0x80b680b4
0xffb53d90  0x80b380b6 0x80b380b4 0x80b580b4 0x80b380b5
0xffb53da0  0x80b680b6 0x80b780b6 0x80b580b5 0x80b480b7
0xffb53db0  0x80b480b4 0x80b580b6 0x80b880b2 0x80b680b7
0xffb53dc0  0x80b480b6 0x80b780b7 0x80b780b4 0x80b680b7
0xffb53dd0  0x80b580b8 0x80b780b7 0x80b580b7 0x80b880bb
0xffb53de0  0x80b280ba 0x80b680ba 0x80b680b9 0x80b680b4
0xffb53df0  0x80b880b5 0x80b580b8 0x80b880b5 0x80b880b6
0xffb53e00  0x80ba80b4 0x80b780b4 0x80b880b6 0x80b680b5
0xffb53e10  0x80b980b2 0x80b780b6 0x80b580b3 0x80b180b2
0xffb53e20  0x80b180b0 0x80ae80af 0x80ad80ad 0x80ab80af
0xffb53e30  0x80ad80ae 0x80ae80b0 0x80ae80ae 0x80ad80ac
0xffb53e40  0x80ae80ad 0x80ac80ad 0x80af80ab 0x80ad80b0
0xffb53e50  0x80ac80ad 0x80ac80ad 0x80af80a8 0x80ab80ab
0xffb53e60  0x80aa80a8 0x80ab80a9 0x80ab80a8 0x80a980aa
0xffb53e70  0x80aa80ac 0x80aa80aa 0x80ac80a9 0x80a980ab
0xffb53e80  0x80a580a5 0x80a580a7 0x80a280a8 0x80a180a3
0xffb53e90  0x80a380a1 0x80a3809f 0x80a480a0 0x80a380a1
0xffb53ea0  0x809d809f 0x7f9c7f92 0x817b805f 0x833e8225
0xffb53eb0  0x74278e26 0x6b279427 0x61299126 0x692d8f29
0xffb53ec0  0x68269227 0x61279425 0x64289026 0x722b9328
0xffb53ed0  0x7f279b25 0x872a9e24 0x86269f26 0x8b249e28
0xffb53ee0  0x8f259c24 0x82269d24 0x7d299b26 0x85239c23
0xffb53ef0  0x80239719 0x80219122 0x821d8f1e 0x8120911f
0xffb53f00  0x8099809a 0x819a7f99 0x819c7f9a 0x819b8099
0xffb53f10  0x819d809c 0x8198819b 0x819c809c 0x809d7f9f
0xffb53f20  0x809d7f9e 0x809e7fa0 0x809e809d 0x80a1809f
0xffb53f30  0x80a180a0 0x809d80a2 0x80a080a1 0x80a180a2
0xffb53f40  0x80a080a4 0x80a180a4 0x80a380a1 0x80a480a4
0xffb53f50  0x80a380a4 0x80a680a2 0x80a780a4 0x80a680a6
0xffb53f60  0x80a880a4 0x80a780a8 0x80a780a5 0x80a680a9
0xffb53f70  0x80a680a8 0x80a980aa 0x80a780a9 0x80aa80a9
0xffb53f80  0x80aa80a9 0x80a980a7 0x80ad80aa 0x80ad80a8
0xffb53f90  0x80ac80ab 0x80a880a7 0x80a980ac 0x80aa80aa
0xffb53fa0  0x80aa80aa 0x80ab80ac 0x80a980ad 0x80ab80ab
0xffb53fb0  0x80ac80ab 0x80b180ad 0x80af80ae 0x80ac80ad
0xffb53fc0  0x80ae80ad 0x80ae80af 0x80ad80b0 0x80af80b1
0xffb53fd0  0x80ac80b0 0x80b280ae 0x80b080ae 0x80aa80b0
0xffb53fe0  0x80b280b2 0x80ae80b1 0x80b180b1 0x80ae80b0
0xffb53ff0  0x80b280b2 0x80b580b3 0x80b080b2 0x80b280b3
0xffb54000  0x80b080b2 0x80b180b5 0x80b380b4 0x80b380b3
0xffb54010  0x80b180b4 0x80b480b4 0x80b280b5 0x80b280b5
0xffb54020  0x80b380b6 0x80b480b4 0x80b780b6 0x80b480b6
0xffb54030  0x80b280b6 0x80b580b3 0x80b380b4 0x80b480b4
0xffb54040  0x80b380b4 0x80b580b4 0x80b580b3 0x80b680b4
0xffb54050  0x80b580b5 0x80b480b5 0x80b680b7 0x80b780b5
0xffb54060  0x80b780b4 0x80b680b6 0x80b680b3 0x80b480b5
0xffb54070  0x80b580b7 0x80b280b6 0x80b780b6 0x80b580b6
0xffb54080  0x80b880b3 0x80b380b6 0x80b480b5 0x80b580b5
0xffb54090  0x80b580b3 0x80b580b5 0x80b280b1 0x80b180af
0xffb540a0  0x80ae80b1 0x80ab80ad 0x80ab80ae 0x80ad80ad
0xffb540b0  0x80ad80ac 0x80ad80ae 0x80ac80aa 0x80ac80ae
0xffb540c0  0x80ad80ab 0x80aa80af 0x80ac80ac 0x80ac80ac
0xffb540d0  0x80ae80ae 0x80ad80ac 0x80ac80ac 0x80aa80ab
0xffb540e0  0x80ab80a8 0x80ac80a8 0x80a880a8 0x80a980aa
0xffb540f0  0x80ab80ab 0x80aa80a9 0x80aa80aa 0x80a980a8
0xffb54100  0x80a880a6 0x80a780a4 0x80a580a4 0x80a380a2
0xffb54110  0x80a180a7 0x80a080a3 0x80a080a4 0x80a3809f
0xffb54120  0x809f80a0 0x809f7f93 0x877c7f63 0x8843802c
0xffb54130  0x76268d24 0x6a289429 0x67289229 0x6f279029
0xffb54140  0x6e279024 0x6b299222 0x6d27902c 0x76279524
0xffb54150  0x7f279f26 0x8526a226 0x8226a12c 0x82249e28
0xffb54160  0x832a9f26 0x7f229f26 0x7c279c24 0x7d249e25
0xffb54170  0x7e229724 0x811e8f1b 0x841f8c1f 0x871b8a1f
0xffb54180  0x809a809a 0x81987f97 0x809a7f9b 0x829b809a
0xffb54190  0x8299809b 0x819b809e 0x809b809f 0x809e7f9e
0xffb541a0  0x809f7f9d 0x80a0809e 0x809e80a0 0x809e80a0
0xffb541b0  0x80a3809d 0x80a0809f 0x80a480a2 0x809f80a2
0xffb541c0  0x80a180a3 0x80a280a4 0x80a380a3 0x80a680a2
0xffb541d0  0x80a580a3 0x80a680a4 0x80a580a5 0x80a580a5
0xffb541e0  0x80a580a5 0x80a580a7 0x80a780a8 0x80a980a8
0xffb541f0  0x80a880a9 0x80a980a8 0x80a980a9 0x80aa80a6
0xffb54200  0x80ac80a9 0x80a980a9 0x80aa80ab 0x80aa80ac
0xffb54210  0x80ad80ac 0x80a880ab 0x80aa80a9 0x80ab80ab
0xffb54220  0x80ab80ae 0x80a780aa 0x80ab80aa 0x80ac80ab
0xffb54230  0x80b080ac 0x80af80ad 0x80ac80b0 0x80ac80af
0xffb54240  0x80ad80b0 0x80af80af 0x80b180af 0x80b080ad
0xffb54250  0x80b080b0 0x80af80b0 0x80b080af 0x80b180b1
0xffb54260  0x80b180b0 0x80ae80b0 0x80b280ae 0x80b080b2
0xffb54270  0x80b380b1 0x80af80b4 0x80b380b3 0x80af80b1
0xffb54280  0x80b380b3 0x80b280b2 0x80b280b3 0x80b480b4
0xffb54290  0x80b380b3 0x80b380b1 0x80b580b0 0x80b680b4
0xffb542a0  0x80b480b3 0x80b580b3 0x80b280b4 0x80b580b8
0xffb542b0  0x80b080b5 0x80b580b7 0x80b180b6 0x80b580b0
0xffb542c0  0x80b780b3 0x80b680b4 0x80b380b6 0x80b480b6
0xffb542d0  0x80b480b5 0x80b680b6 0x80b680b6 0x80b480b5
0xffb542e0  0x80b680b7 0x80b680b8 0x80b680b7 0x80b580b6
0xffb542f0  0x80b680b4 0x80b780b6 0x80b480b4 0x80b680b5
0xffb54300  0x80b380b5 0x80b280b7 0x80b480b7 0x80b380b4
0xffb54310  0x80b480b5 0x80b380b6 0x80b380b0 0x80b380b0
0xffb54320  0x80ae80ae 0x80ae80ad 0x80af80ae 0x80ae80ac
0xffb54330  0x80ad80ae 0x80af80ac 0x80b280b0 0x80ac80ae
0xffb54340  0x80ad80ab 0x80ae80ac 0x80ab80b1 0x80ad80aa
0xffb54350  0x80ae80aa 0x80ad80ac 0x80ad80a9 0x80ab80aa
0xffb54360  0x80a880aa 0x80a880a9 0x80a680a9 0x80a780a7
0xffb54370  0x80a680a8 0x80a580a9 0x80a680a6 0x80a580a5
0xffb54380  0x80a280a4 0x80a380a2 0x80a280a6 0x80a480a3
0xffb54390  0x80a380a7 0x80a480a3 0x80a280a3 0x80a480a3
0xffb543a0  0x809e80a1 0x809c8095 0x8a7e7f62 0x8e3e8128
0xffb543b0  0x7a268d2a 0x6c289229 0x7027912a 0x76279128
0xffb543c0  0x752a9224 0x742a932a 0x76269429 0x7b289826
0xffb543d0  0x82289f2f 0x852aa227 0x7e25a32a 0x7a27a125
0xffb543e0  0x7927a027 0x7e279e24 0x7e219b22 0x79219b22
0xffb543f0  0x7d1f9720 0x831f8e18 0x8a1f8a1f 0x8d198a1b
0xffb54400  0x80988099 0x809a7f99 0x80967f9a 0x819a809a
0xffb54410  0x819c8098 0x819d7f9c 0x819b7f9f 0x809a80a0
0xffb54420  0x809c809f 0x809d809f 0x809f809f 0x809f7fa0
0xffb54430  0x80a080a0 0x80a0809e 0x80a2809d 0x80a180a2
0xffb54440  0x80a180a4 0x80a380a1 0x80a380a4 0x80a180a2
0xffb54450  0x80a680a6 0x80a380a5 0x80a580a6 0x80a480a4
0xffb54460  0x80a680a8 0x80a680a3 0x80a580a9 0x80a780a8
0xffb54470  0x80a780ab 0x80a780a9 0x80a780a7 0x80a980a8
0xffb54480  0x80ad80a9 0x80a980ab 0x80a880ac 0x80ab80aa
0xffb54490  0x80ab80a9 0x80ab80aa 0x80aa80ab 0x80a980ac
0xffb544a0  0x80aa80ac 0x80ac80ab 0x80ab80ab 0x80ad80aa
0xffb544b0  0x80aa80af 0x80ac80ad 0x80ac80ad 0x80ac80ad
0xffb544c0  0x80ae80b1 0x80af80af 0x80ad80af 0x80ae80b2
0xffb544d0  0x80ad80af 0x80ae80af 0x80ad80ae 0x80b180af
0xffb544e0  0x80b080b0 0x80b180ad 0x80af80b2 0x80b180b1
0xffb544f0  0x80b080b1 0x80b180b3 0x80b380b3 0x80b280b5
0xffb54500  0x80b480b2 0x80b280ad 0x80b580b0 0x80b480b3
0xffb54510  0x80b380b2 0x80ae80b5 0x80b180b4 0x80b380b3
0xffb54520  0x80b480b0 0x80b580b4 0x80b080b4 0x80b480b4
0xffb54530  0x80b180b3 0x80b480b5 0x80b280b1 0x80b280b5
0xffb54540  0x80b180b5 0x80b280b3 0x80b580b2 0x80b580b4
0xffb54550  0x80b780b3 0x80b680b2 0x80b880b5 0x80b680b4
0xffb54560  0x80b480b5 0x80b780b7 0x80b480b8 0x80b380b7
0xffb54570  0x80b480b2 0x80b680b6 0x80b480b5 0x80b880b2
0xffb54580  0x80b780b3 0x80b180b5 0x80b380b4 0x80b580b6
0xffb54590  0x80b380b3 0x80b580b3 0x80b580b4 0x80b280b0
0xffb545a0  0x80ad80ab 0x80ac80b1 0x80a980ae 0x80ae80ad
0xffb545b0  0x80ab80af 0x80aa80ad 0x80aa80aa 0x80a980ab
0xffb545c0  0x80a880ab 0x80ab80aa 0x80a980a6 0x80a880a7
0xffb545d0  0x80a480a4 0x80a480a3 0x80a380a3 0x80a080a0
0xffb545e0  0x809e7f9d 0x809d7f9e 0x7fa07f9d 0x7f9a7f9d
0xffb545f0  0x7f9b7f9c 0x7f9a7f9a 0x7f9d8093 0x809a8096
0xffb54600  0x7f987f96 0x7e99809e 0x809f80a3 0x80a380a6
0xffb54610  0x80a480a2 0x80a680a3 0x80a680a5 0x80a480a4
0xffb54620  0x80a080a0 0x80a08095 0x887c8068 0x93478227
0xffb54630  0x81278f28 0x72289029 0x7226902a 0x7324922a
0xffb54640  0x70279326 0x72299327 0x74289626 0x782b9a27
0xffb54650  0x83259d28 0x8729a123 0x7f26a32b 0x7927a425
0xffb54660  0x722b9f25 0x79249d23 0x7e249520 0x7620951d
0xffb54670  0x711d961f 0x7a208e21 0x851b871c 0x8b1c8919
0xffb54680  0x8097809b 0x809a809b 0x80967f9d 0x81987f9c
0xffb54690  0x809b7f9c 0x819c7f9c 0x819b7fa0 0x809b7f9d
0xffb546a0  0x809c7fa1 0x809d809f 0x809e809f 0x809e80a1
0xffb546b0  0x809f80a0 0x80a380a1 0x80a4809f 0x80a180a2
0xffb546c0  0x80a280a1 0x80a580a4 0x80a380a3 0x80a380a4
0xffb546d0  0x80a480a2 0x80a380a7 0x80a480a4 0x80a680a5
0xffb546e0  0x80a780a5 0x80a680a6 0x80aa80a4 0x80a880a9
0xffb546f0  0x80a780a7 0x80aa80a9 0x80aa80aa 0x80a780a9
0xffb54700  0x80ad80ab 0x80a980aa 0x80aa80ac 0x80ab80aa
0xffb54710  0x80aa80ab 0x80ab80ac 0x80ac80ac 0x80a880ab
0xffb54720  0x80aa80ad 0x80ae80a9 0x80ae80ab 0x80ab80ab
0xffb54730  0x80af80ad 0x80ae80ae 0x80ae80b0 0x80ad80ae
0xffb54740  0x80b080af 0x80ad80af 0x80b280b0 0x80b080b1
0xffb54750  0x80af80af 0x80af80b0 0x80b180b1 0x80af80b2
0xffb54760  0x80b180af 0x80b080b0 0x80ae80b2 0x80b180b1
0xffb54770  0x80b280b0 0x80b380b4 0x80b080b2 0x80b380b0
0xffb54780  0x80b180b2 0x80b580b1 0x80b280b3 0x80b380b3
0xffb54790  0x80b180b2 0x80b580b0 0x80b380b4 0x80b580b2
0xffb547a0  0x80b480b2 0x80b180b3 0x80b380b2 0x80b480b4
0xffb547b0  0x80b480b5 0x80b080b5 0x80b280b2 0x80b280b3
0xffb547c0  0x80b580b3 0x80b580b3 0x80b380b4 0x80b380b5
0xffb547d0  0x80b480b6 0x80b380b5 0x80b580b4 0x80b380b5
0xffb547e0  0x80b580b3 0x80b580b4 0x80b480b6 0x80b380b7
0xffb547f0  0x80b280b3 0x80b380b2 0x80b380b0 0x80b280b2
0xffb54800  0x80b180b1 0x80ae80ae 0x80b180ae 0x80b080ac
0xffb54810  0x80ae80ae 0x80ab80ad 0x80ad80aa 0x80a780a6
0xffb54820  0x80a580a3 0x80a880a2 0x80a480a3 0x80a580a4
0xffb54830  0x80a080a0 0x80a180a1 0x809f809f 0x809e7f9d
0xffb54840  0x7f9d7f9c 0x809b7f9b 0x7f9a809c 0x7f978099
0xffb54850  0x80997f95 0x81967f95 0x7f937f93 0x7f91808f
0xffb54860  0x8091808e 0x808f808e 0x7f8e808c 0x7a8b818a
0xffb54870  0x7a8a7f8a 0x7c898089 0x7c868185 0x7e878084
0xffb54880  0x7e888086 0x7f898091 0x7f9a809e 0x80a480a4
0xffb54890  0x80a780a4 0x80a580a6 0x80a780a4 0x80a480a6
0xffb548a0  0x80a380a3 0x819f8096 0x86818068 0x9b458029
0xffb548b0  0x88248b28 0x7429912a 0x74299128 0x72279229
0xffb548c0  0x6f279327 0x71259229 0x76269326 0x7b279627
0xffb548d0  0x88299c29 0x8c279e2a 0x84229c26 0x7c259f28
0xffb548e0  0x6f239e22 0x73229622 0x83208f1b 0x731b921d
0xffb548f0  0x651b951d 0x711d8e20 0x821d841d 0x8b178719
0xffb54900  0x8194809a 0x80978099 0x809b809b 0x809c7f9a
0xffb54910  0x809c7f9b 0x819a8099 0x819e809d 0x809d7f9e
0xffb54920  0x809c7f9e 0x809d809c 0x80a0809f 0x809e80a1
0xffb54930  0x80a080a1 0x80a0809e 0x809f80a3 0x809f80a2
0xffb54940  0x80a280a0 0x80a380a1 0x80a180a3 0x80a280a4
0xffb54950  0x80a480a4 0x80a480a5 0x80a380a4 0x80a480a5
0xffb54960  0x80a680a6 0x80a580a7 0x80a580a9 0x80a780a8
0xffb54970  0x80a880a8 0x80a880a8 0x80ab80a9 0x80aa80a8
0xffb54980  0x80aa80ab 0x80ab80ae 0x80a780ab 0x80aa80ab
0xffb54990  0x80aa80ab 0x80ab80a9 0x80a980aa 0x80a880af
0xffb549a0  0x80aa80a8 0x80ac80ad 0x80ad80a8 0x80ac80ab
0xffb549b0  0x80aa80ad 0x80ae80ad 0x80ab80af 0x80ac80b0
0xffb549c0  0x80ae80af 0x80ae80b1 0x80b080af 0x80ae80af
0xffb549d0  0x80ae80b0 0x80ae80ad 0x80b180b1 0x80b080af
0xffb549e0  0x80af80b2 0x80b080ad 0x80af80b0 0x80af80b1
0xffb549f0  0x80ad80b1 0x80af80b1 0x80af80af 0x80b080b0
0xffb54a00  0x80b080b0 0x80af80b0 0x80af80b0 0x80b080b1
0xffb54a10  0x80ae80af 0x80b480ae 0x80b280ae 0x80b380b4
0xffb54a20  0x80ae80af 0x80b280b1 0x80b180af 0x80b180b2
0xffb54a30  0x80b280b0 0x80b280b1 0x80b080b1 0x80b080af
0xffb54a40  0x80b080af 0x80b180af 0x80b080ad 0x80b080ad
0xffb54a50  0x80af80af 0x80ae80ae 0x80ae80ae 0x80ae80ad
0xffb54a60  0x80ac80ae 0x80ab80a9 0x80ad80a8 0x80ab80a8
0xffb54a70  0x80a880a8 0x80a680a5 0x80a680a3 0x80a480a0
0xffb54a80  0x80a580a1 0x80a380a0 0x809f80a0 0x809d7f9d
0xffb54a90  0x80a07f9d 0x809d7e9b 0x7f9d7f99 0x7f977f96
0xffb54aa0  0x7f987f94 0x7f938093 0x7f948093 0x7d918091
0xffb54ab0  0x7c93808f 0x7c8e818b 0x7c8f818b 0x7b8c808a
0xffb54ac0  0x7887808a 0x7a897f86 0x7b888286 0x7a868287
0xffb54ad0  0x7c857f84 0x7c827f83 0x7b81817f 0x7c7c827c
0xffb54ae0  0x7e7a827a 0x7e798179 0x7a768374 0x73768473
0xffb54af0  0x72718673 0x766f8970 0x786f866d 0x7b6b8269
0xffb54b00  0x776e856e 0x7a778081 0x7f8f7f91 0x809b80a3
0xffb54b10  0x80a480a6 0x80a880a6 0x80a580a7 0x80a480a3
0xffb54b20  0x80a680a5 0x80a17f99 0x8582806b 0x9b4b7c30
0xffb54b30  0x872a8725 0x7225922f 0x7028922c 0x6f299328
0xffb54b40  0x71299124 0x73299027 0x73228d27 0x78269024
0xffb54b50  0x80279a24 0x83259a22 0x80249125 0x7c1d9723
0xffb54b60  0x74219c21 0x7e208f22 0x861e871c 0x7a198f1b
0xffb54b70  0x781b931e 0x811c8c1d 0x81197f1e 0x851a8319
0xffb54b80  0x81988099 0x81988097 0x809a809a 0x809b7f9c
0xffb54b90  0x7f997f9c 0x809c809d 0x819c809c 0x7f9a7fa0
0xffb54ba0  0x809c809f 0x80a0809b 0x809e809e 0x809d80a1
0xffb54bb0  0x809f80a0 0x80a080a2 0x80a080a1 0x80a280a2
0xffb54bc0  0x80a180a2 0x80a280a2 0x80a280a3 0x80a480a4
0xffb54bd0  0x80a180a3 0x80a480a4 0x80a380a7 0x80a580a6
0xffb54be0  0x80a880a6 0x80a680a6 0x80a680a4 0x80a780ab
0xffb54bf0  0x80a780a8 0x80a780aa 0x80a680ab 0x80ab80aa
0xffb54c00  0x80a980ab 0x80ab80ab 0x80ad80a8 0x80ab80a8
0xffb54c10  0x80ab80a9 0x80ab80ac 0x80aa80a8 0x80aa80ab
0xffb54c20  0x80ab80ab 0x80ad80ae 0x80a980ac 0x80aa80a8
0xffb54c30  0x80ab80ad 0x80ae80af 0x80ab80af 0x80aa80ae
0xffb54c40  0x80b080ac 0x80ab80ae 0x80ae80aa 0x80ad80ad
0xffb54c50  0x80ad80b0 0x80ae80ae 0x80ac80af 0x80af80ad
0xffb54c60  0x80b080af 0x80ad80af 0x80af80af 0x80aa80ac
0xffb54c70  0x80af80af 0x80b180ad 0x80ac80ad 0x80b080ad
0xffb54c80  0x80b180ad 0x80ac80ae 0x80ae80ad 0x80ac80af
0xffb54c90  0x80ad80ae 0x80ab80ae 0x80ab80aa 0x80ad80ab
0xffb54ca0  0x80a980ac 0x80ad80a9 0x80aa80a7 0x80aa80a8
0xffb54cb0  0x80a780a7 0x80a580a9 0x80a880a5 0x80a580a5
0xffb54cc0  0x80a180a4 0x80a380a0 0x7f9e80a3 0x809f809f
0xffb54cd0  0x809f7fa1 0x809d7f9f 0x809e7f9e 0x809c7f9c
0xffb54ce0  0x7e9c7f99 0x7f9a809a 0x7f9b8197 0x7f988097
0xffb54cf0  0x80988092 0x80988092 0x7e908094 0x7b908192
0xffb54d00  0x7d8d808f 0x808c7f8b 0x7d8b8288 0x7989828d
0xffb54d10  0x7d858089 0x7d847f84 0x7a878084 0x7c828284
0xffb54d20  0x7e838280 0x7a7c847f 0x7a7b837f 0x78798377
0xffb54d30  0x7577837a 0x79768476 0x79738473 0x776f8372
0xffb54d40  0x6f6a856d 0x726e866e 0x7569866c 0x73698667
0xffb54d50  0x6d668460 0x68648561 0x7160865e 0x775e875b
0xffb54d60  0x78548556 0x7a53854d 0x734e884c 0x664b884b
0xffb54d70  0x62438a40 0x6a3d8b41 0x703d8739 0x703c842f
0xffb54d80  0x63378741 0x6d57866b 0x7c798188 0x819480a0
0xffb54d90  0x80a480a6 0x80a880a7 0x80a680a7 0x80a780a3
0xffb54da0  0x80a480a1 0x80a4809a 0x8582806d 0x9b4b7f2b
0xffb54db0  0x89248928 0x722b932e 0x702a9329 0x72279226
0xffb54dc0  0x76279027 0x76249028 0x6f279123 0x76259023
0xffb54dd0  0x7a249625 0x79269723 0x7a1f931f 0x78239a26
0xffb54de0  0x78199921 0x861e8d1d 0x891d8b1a 0x8217911d
0xffb54df0  0x881a941b 0x8d1b8e1c 0x7d198718 0x80198720
0xffb54e00  0x819a7f9a 0x80987f9b 0x7f96809a 0x809a7f9c
0xffb54e10  0x7f9a809a 0x809c809c 0x809b809f 0x809c809c
0xffb54e20  0x809a819e 0x809e809f 0x809f809e 0x809f809e
0xffb54e30  0x809d809f 0x809f80a0 0x809d80a1 0x80a2809f
0xffb54e40  0x80a180a1 0x80a680a3 0x809f80a2 0x80a280a2
0xffb54e50  0x80a280a4 0x80a180a5 0x80a180a5 0x80a480a5
0xffb54e60  0x80a380a5 0x80a480a5 0x80a680a5 0x80a480ab
0xffb54e70  0x80a280a6 0x80a780a7 0x80a580a9 0x80a780a6
0xffb54e80  0x80a980a8 0x80a880ab 0x80a780aa 0x80a980a8
0xffb54e90  0x80a880a8 0x80ab80a9 0x80a880a9 0x80a980a7
0xffb54ea0  0x80a980a9 0x80a980ab 0x80a980aa 0x80a680ab
0xffb54eb0  0x80ac80a9 0x80ab80a9 0x80a980a9 0x80ab80ae
0xffb54ec0  0x80aa80ac 0x80ac80a9 0x80a880aa 0x80a980ab
0xffb54ed0  0x80ac80a7 0x80ab80a8 0x80aa80a8 0x80aa80a8
0xffb54ee0  0x80a980a9 0x80a580a6 0x80a780a7 0x80a480a5
0xffb54ef0  0x80a780a4 0x80a380a4 0x7fa480a6 0x7fa3809f
0xffb54f00  0x7fa080a1 0x80a1809e 0x7fa0809d 0x7f9f7f9c
0xffb54f10  0x809d7f9d 0x809c809c 0x7f98819f 0x7e9a7f9d
0xffb54f20  0x7e977f99 0x7f987f97 0x7f987f95 0x80958094
0xffb54f30  0x80977f94 0x7f917f93 0x7f927f94 0x7c908092
0xffb54f40  0x7c8d818f 0x7a8d818d 0x778e818c 0x7a8b818b
0xffb54f50  0x7c8a828b 0x7c89818b 0x7b888089 0x7a868288
0xffb54f60  0x78838386 0x7a808484 0x7a82857f 0x787e857f
0xffb54f70  0x7b7c8479 0x7a7c8277 0x73788474 0x71748476
0xffb54f80  0x73728372 0x786f856e 0x776c8a6e 0x6f658d6b
0xffb54f90  0x74658a69 0x78648862 0x735e8a62 0x715d8e59
0xffb54fa0  0x73559555 0x72549452 0x74558e52 0x714b934b
0xffb54fb0  0x744a9343 0x78479039 0x78408c3f 0x783b8a39
0xffb54fc0  0x7134922d 0x76369630 0x792e902f 0x762e8e2e
0xffb54fd0  0x742c8e26 0x72218e25 0x771c9022 0x7c208b1d
0xffb54fe0  0x7c22861b 0x7a168c19 0x78158b1b 0x75138713
0xffb54ff0  0x70128711 0x74168314 0x78178114 0x781a8217
0xffb55000  0x71178617 0x711a8f31 0x795f8679 0x80888097
0xffb55010  0x80a080a5 0x80a880ab 0x80a580a8 0x80a880a6
0xffb55020  0x80a880a6 0x80a37f9c 0x8389806c 0x934d8035
0xffb55030  0x8b238929 0x7529932a 0x6b2a912e 0x6e259129
0xffb55040  0x75288d26 0x75269023 0x6e279424 0x78278c23
0xffb55050  0x7e1f8e25 0x7c1f9421 0x7b229520 0x7a209b1f
0xffb55060  0x7b22961e 0x8820891b 0x861c8e1b 0x7c19921f
0xffb55070  0x841c8f1d 0x881d901b 0x7e1c8d1b 0x811d891b
0xffb55080  0x80977f95 0x7f968097 0x7f99809a 0x809c7f96
0xffb55090  0x7f9b809e 0x7f9a809a 0x8099809a 0x819f809a
0xffb550a0  0x809d819a 0x809e809d 0x809e80a0 0x809c809f
0xffb550b0  0x80a1809c 0x80a1809f 0x80a080a0 0x809e80a0
0xffb550c0  0x809e80a0 0x80a280a0 0x80a280a1 0x80a280a0
0xffb550d0  0x80a380a1 0x80a380a1 0x80a180a3 0x80a180a4
0xffb550e0  0x80a180a5 0x80a380a5 0x80a380a3 0x80a680a3
0xffb550f0  0x80a380a4 0x80a380a6 0x80a480a7 0x80a280a8
0xffb55100  0x80a680a9 0x80a480a8 0x80a880a6 0x80a680a5
0xffb55110  0x80a480a5 0x80a380a5 0x80a380a5 0x80a480a5
0xffb55120  0x80a580a5 0x80a580a6 0x80a480a3 0x7fa480a1
0xffb55130  0x7fa380a2 0x7fa180a3 0x7fa380a0 0x80a37f9f
0xffb55140  0x80a27fa0 0x80a07f9f 0x7e9e809d 0x7f9e809d
0xffb55150  0x7f9d809a 0x7e9a7f9b 0x7e9a7f9a 0x7f987f98
0xffb55160  0x809b7f95 0x80958097 0x7f968094 0x7f928194
0xffb55170  0x80908094 0x7f918093 0x7e908090 0x7f92808f
0xffb55180  0x7c8c818c 0x7d90818c 0x798a8188 0x788f818b
0xffb55190  0x7d8a8189 0x7c8a8487 0x7c898586 0x7a868285
0xffb551a0  0x78848281 0x7b828281 0x797f837e 0x7a80837d
0xffb551b0  0x7f7c827e 0x7c79837c 0x78758379 0x78768374
0xffb551c0  0x79748573 0x79728570 0x7371866b 0x6e6e866b
0xffb551d0  0x70698668 0x6c668564 0x6b618460 0x6c60855d
0xffb551e0  0x6e5a8659 0x75578853 0x6f52894e 0x684b8a48
0xffb551f0  0x6e498943 0x6c3a863f 0x633a8739 0x5a3a882d
0xffb55200  0x52318733 0x602e872d 0x622a8c24 0x56249023
0xffb55210  0x571d8c21 0x67208c1f 0x671e8c1b 0x5a198c1c
0xffb55220  0x5a168f1d 0x69188e1b 0x71198912 0x76168b19
0xffb55230  0x83168a1f 0x7d0e8819 0x78168715 0x811e871b
0xffb55240  0x7e12891d 0x881d8b19 0x881e8920 0x801d891b
0xffb55250  0x801b8a1b 0x811d8920 0x7f188b1e 0x801b8a1c
0xffb55260  0x7a118819 0x70188b1a 0x75138717 0x86168418
0xffb55270  0x7f188615 0x7d17821b 0x80168315 0x821a7f1d
0xffb55280  0x821e8220 0x77178c19 0x75268b5f 0x7c7d848e
0xffb55290  0x7f9b80a4 0x80a680a7 0x80ac80a7 0x80a780a8
0xffb552a0  0x80a880a7 0x81a57f9c 0x8287806d 0x8b4b8131
0xffb552b0  0x8c268a27 0x79299328 0x6928952b 0x6d27932a
0xffb552c0  0x75259128 0x76279425 0x70269423 0x7e258b24
0xffb552d0  0x85208c1d 0x80208e22 0x811f8d24 0x801d9221
0xffb552e0  0x821b9121 0x891c8c20 0x821e911c 0x791d911d
0xffb552f0  0x831d9022 0x85168c22 0x831b8d20 0x831b8b1d
0xffb55300  0x80978098 0x80998095 0x809a7f97 0x80987f96
0xffb55310  0x7f998099 0x7f9a8099 0x7f9b8099 0x809b809a
0xffb55320  0x809c809c 0x7f9c809b 0x8098809e 0x809c809c
0xffb55330  0x819c809d 0x809c7f9c 0x809e7f9b 0x7f9e809e
0xffb55340  0x7f9f80a0 0x7fa0809d 0x80a0809f 0x81a17f9d
0xffb55350  0x80a07f9d 0x7f9f7f9d 0x7f9d7f9f 0x809f7f9c
0xffb55360  0x809f809e 0x809e7f9f 0x819f809d 0x809c809d
0xffb55370  0x809b809e 0x809e7f9c 0x7f9d7f9e 0x7f9c7f9b
0xffb55380  0x7f9c7f9c 0x7f9c809a 0x7f97809a 0x7f998099
0xffb55390  0x7f997f98 0x7e9a7f95 0x7f957f97 0x7f967f94
0xffb553a0  0x7f948096 0x80928094 0x7e948090 0x7a928192
0xffb553b0  0x7a8f808f 0x7992818e 0x7a8f808c 0x7d90808c
0xffb553c0  0x7e8a808b 0x7b8a808a 0x77888287 0x78868288
0xffb553d0  0x79868284 0x78848487 0x7a838182 0x79828083
0xffb553e0  0x7b808081 0x7c7e817f 0x7c7c837c 0x7a7a857b
0xffb553f0  0x7a7a8479 0x777a8575 0x72758875 0x73768574
0xffb55400  0x7573846f 0x7671876d 0x756e866e 0x746a8768
0xffb55410  0x73668b67 0x74638c66 0x73618d5e 0x6f628e5f
0xffb55420  0x6f569157 0x74569052 0x7152934d 0x7545964a
0xffb55430  0x7d439544 0x783c973b 0x753b9434 0x783a9030
0xffb55440  0x7830902a 0x752d9327 0x6f269324 0x6e268d21
0xffb55450  0x75228b1f 0x75208d1a 0x711c8c1d 0x74138c1a
0xffb55460  0x791d8c15 0x7d188c15 0x7d158719 0x77178611
0xffb55470  0x751a8817 0x7414871d 0x7411801b 0x70138117
0xffb55480  0x6c138419 0x74188319 0x78158119 0x76157c18
0xffb55490  0x711d7d17 0x72178917 0x7918871c 0x791a7d19
0xffb554a0  0x731c7d1b 0x741c7c1b 0x77177c1b 0x7f1d771b
0xffb554b0  0x871b7b19 0x821b7b20 0x7b197d1a 0x821b7f1c
0xffb554c0  0x8520791d 0x86237922 0x86207b23 0x83218025
0xffb554d0  0x87207f24 0x831f791f 0x781d7c1b 0x7816831d
0xffb554e0  0x7b188419 0x7b178216 0x80197c14 0x87197d13
0xffb554f0  0x80167e16 0x79137c17 0x7b158112 0x7e197c1c
0xffb55500  0x851e7b1e 0x8422811b 0x77188926 0x796b8683
0xffb55510  0x7e9081a0 0x80a480a7 0x80a980aa 0x80a780a8
0xffb55520  0x80aa80a7 0x80a67f9f 0x83887e6f 0x9153822d
0xffb55530  0x8b248b28 0x77299327 0x6a29972a 0x712b9329
0xffb55540  0x72279426 0x6f249628 0x71269425 0x80288a22
0xffb55550  0x8c22861d 0x8b1e871e 0x85228421 0x84218924
0xffb55560  0x84188c24 0x861f901e 0x831c9420 0x7e21911f
0xffb55570  0x821b8f1f 0x83208921 0x801d8c1e 0x7f1b8c22
0xffb55580  0x80928095 0x8196809a 0x81958097 0x7f937f98
0xffb55590  0x7f968096 0x7f9b8096 0x7f96809a 0x809a8099
0xffb555a0  0x80958098 0x7f978098 0x7f9a809a 0x7f95809a
0xffb555b0  0x80968098 0x80978097 0x7f958095 0x7e978197
0xffb555c0  0x7f987f95 0x7d948096 0x7f978095 0x80948090
0xffb555d0  0x7f937f8e 0x7f927f90 0x7d8b8092 0x8090808f
0xffb555e0  0x7f8e808e 0x7e8d818e 0x7e8c8089 0x7d8d818b
0xffb555f0  0x7d8c808a 0x7c8a7f88 0x7b8a8088 0x7e888088
0xffb55600  0x7d8a8186 0x7a888188 0x7a848289 0x7c858485
0xffb55610  0x7b878280 0x79828184 0x7d84837d 0x7e83827e
0xffb55620  0x7f7e827e 0x7e7d837d 0x76798477 0x7678857a
0xffb55630  0x7b768479 0x78768476 0x75758575 0x77728472
0xffb55640  0x78718470 0x7870846d 0x6c6e8668 0x6968886a
0xffb55650  0x6b658665 0x70648763 0x73608661 0x6b5c865c
0xffb55660  0x6d598459 0x7155834f 0x7552884e 0x7349894a
0xffb55670  0x6f4b8842 0x6b43893f 0x59358b39 0x5a388930
0xffb55680  0x6233872f 0x5d2d872d 0x6e2a862b 0x6a258c24
0xffb55690  0x51209021 0x56238f1b 0x59218e1c 0x57188e17
0xffb556a0  0x631b8f19 0x691b8f12 0x6a189019 0x74158e13
0xffb556b0  0x7d1c8c13 0x7c138b14 0x78198d1b 0x80178c17
0xffb556c0  0x77158b19 0x6f1b8b17 0x6b1c8f15 0x6d198c1b
0xffb556d0  0x7f1f8a17 0x831c8b17 0x761c8915 0x7c1d881d
0xffb556e0  0x851a871b 0x881c871c 0x8b1c861a 0x8519811a
0xffb556f0  0x761b7f1b 0x7a18841e 0x841b841d 0x821b811b
0xffb55700  0x831a8017 0x86218218 0x871c821b 0x8a197c19
0xffb55710  0x81187a19 0x7a19831b 0x8218851b 0x8c1d7e1a
0xffb55720  0x83187d1c 0x761c7f15 0x771c7f1d 0x80177d21
0xffb55730  0x881b7d18 0x811e7d1b 0x7b1b7e1a 0x821b7f1d
0xffb55740  0x851e7d1f 0x7e1d7e1c 0x81298120 0x86228123
0xffb55750  0x8b238222 0x801d7f1a 0x711f7e1a 0x72178019
0xffb55760  0x7c198317 0x81178317 0x84168117 0x8413810f
0xffb55770  0x80178117 0x770f7f16 0x76138119 0x7911801b
0xffb55780  0x861b7f22 0x8d1e801d 0x7a19851e 0x704a8677
0xffb55790  0x7e8e819d 0x80a380a8 0x80a980a9 0x80aa80aa
0xffb557a0  0x80a980a9 0x80a5809d 0x848b7f70 0x984e7f29
0xffb557b0  0x8b238524 0x7728922c 0x7027962b 0x752d9328
0xffb557c0  0x70279226 0x6a239829 0x71289523 0x80278f22
0xffb557d0  0x95218b1f 0x94218c1f 0x891b8b24 0x881a8c25
0xffb557e0  0x88218e19 0x8520921f 0x86209420 0x83208f21
0xffb557f0  0x81228e1e 0x82238b20 0x7a208d20 0x7e219020
0xffb55800  0x7e8e8090 0x7f8c808d 0x7d8e818f 0x7a8d8191
0xffb55810  0x7a8a808d 0x7c8c818c 0x7c8b808a 0x7d8c7f88
0xffb55820  0x7d87818a 0x7e878188 0x7d898185 0x7f888189
0xffb55830  0x7f85808a 0x7e868085 0x7a848485 0x79848584
0xffb55840  0x7b847f84 0x79827f84 0x7b828280 0x7d84807f
0xffb55850  0x7a7f7f7c 0x787e827a 0x757b847b 0x797c8477
0xffb55860  0x7a7c8279 0x7a768378 0x7c788473 0x78768375
0xffb55870  0x76748173 0x75728471 0x76718771 0x78708571
0xffb55880  0x796e836f 0x776d866d 0x756b866b 0x75698966
0xffb55890  0x73658964 0x7266895f 0x735d9060 0x745f915e
0xffb558a0  0x765a9159 0x79549355 0x7152944e 0x6f4e924c
0xffb558b0  0x754c9045 0x76439042 0x74389739 0x76389639
0xffb558c0  0x76349133 0x772d9030 0x732b9124 0x70279324
0xffb558d0  0x6f258e23 0x74248d20 0x7620921c 0x721c911d
0xffb558e0  0x761d861c 0x7a19831b 0x7c178818 0x7b198517
0xffb558f0  0x76148619 0x741b851b 0x7114801b 0x7316801c
0xffb55900  0x77157d1d 0x761e761a 0x77207d1a 0x77118a17
0xffb55910  0x7720851f 0x781d7c1f 0x761c7b1d 0x77207f19
0xffb55920  0x781d831e 0x771b861f 0x7b1a8220 0x7f1f7e1f
0xffb55930  0x80177c1f 0x7d1f7a1d 0x79217f12 0x841d821e
0xffb55940  0x841c7717 0x7c22741c 0x79197f1a 0x7a1d821d
0xffb55950  0x821d821a 0x891c811b 0x821a7c1b 0x7f1a7a1a
0xffb55960  0x851b7b19 0x8d1f7c19 0x8c1b801d 0x821b791d
0xffb55970  0x7819721f 0x7c197d19 0x841a851c 0x801d7d1a
0xffb55980  0x80197a1d 0x811a801b 0x8315821d 0x85197a1d
0xffb55990  0x80177719 0x7b1b7c1b 0x821b821a 0x8b1b7e18
0xffb559a0  0x7d187e16 0x771c8218 0x811f821a 0x85178219
0xffb559b0  0x861d7d1b 0x80167e1d 0x80197d1f 0x87187b1a
0xffb559c0  0x811d7e19 0x791e831b 0x7f1f851b 0x8224801f
0xffb559d0  0x86158622 0x8219861c 0x7b1a7c1b 0x7b177c17
0xffb559e0  0x82168117 0x86178319 0x81168315 0x7c168416
0xffb559f0  0x7a148516 0x79168216 0x7c158014 0x7613831a
0xffb55a00  0x821b841b 0x8b1f7f1a 0x7f1c8015 0x732b856b
0xffb55a10  0x7f858094 0x809e80a9 0x80a980a7 0x80ae80aa
0xffb55a20  0x80ac80ac 0x80a880a0 0x858e7f71 0x97537a33
0xffb55a30  0x8f277e25 0x75269026 0x6b299429 0x742b9128
0xffb55a40  0x742b9126 0x6e239723 0x71289529 0x7d239224
0xffb55a50  0x90238e20 0x941e8f1c 0x8b209226 0x89228e22
0xffb55a60  0x8c208c26 0x88209120 0x8b259321 0x8f238e22
0xffb55a70  0x8c218b26 0x8b1d8f20 0x8c258c20 0x8f209220
0xffb55a80  0x7e7c8080 0x7d7e817d 0x7b7e837b 0x7a7d827d
0xffb55a90  0x7b79817c 0x7e798278 0x7d79827c 0x78778375
0xffb55aa0  0x7e768379 0x7f768275 0x7e778273 0x81768273
0xffb55ab0  0x81738273 0x7d74856e 0x7a728770 0x796e886e
0xffb55ac0  0x7c70866b 0x7a6c846b 0x746a8668 0x716a8665
0xffb55ad0  0x70648463 0x6e63865d 0x675f8960 0x6b5e8b5d
0xffb55ae0  0x6d5a885c 0x74588458 0x7c518554 0x7151884a
0xffb55af0  0x644e864b 0x6646874b 0x6b3d873b 0x6e40843e
0xffb55b00  0x71398337 0x70348634 0x6d32872d 0x652b8b2d
0xffb55b10  0x64288b23 0x6c258924 0x641f8e24 0x601a8d20
0xffb55b20  0x631b8c1a 0x6f229018 0x771d9017 0x6b158e17
0xffb55b30  0x6e158a20 0x7b188b18 0x7d178f1f 0x7b158e18
0xffb55b40  0x75178c18 0x7d188c1c 0x881f8e1b 0x831a8d22
0xffb55b50  0x76178b17 0x771f8a1c 0x7c208a1c 0x771e8a1d
0xffb55b60  0x7e208122 0x83207f1b 0x8621851e 0x811d831e
0xffb55b70  0x7720851a 0x781d8220 0x81207f1f 0x88207f1e
0xffb55b80  0x87207d1f 0x841d7a1e 0x7b1d7d1f 0x7f1f8421
0xffb55b90  0x8d21871a 0x871f8020 0x871f7c19 0x8a23811d
0xffb55ba0  0x851a801f 0x7f1a811f 0x821e841c 0x821e801d
0xffb55bb0  0x7e1d7d1c 0x7a1d7d1b 0x7720831e 0x861c8120
0xffb55bc0  0x89197a1c 0x801f7a1c 0x801d811d 0x831c851a
0xffb55bd0  0x8519831f 0x8c197f1c 0x8a1c7e1a 0x7f177c1b
0xffb55be0  0x81147a22 0x911d7c1a 0x8e1d7e19 0x811a791a
0xffb55bf0  0x79197618 0x7d197f1a 0x881f8319 0x7d178317
0xffb55c00  0x7b1d8118 0x7e198017 0x821b8118 0x7f187f18
0xffb55c10  0x801a7e18 0x7c187f15 0x81177f17 0x87177e18
0xffb55c20  0x78158017 0x7b19821b 0x8d19841a 0x8e198417
0xffb55c30  0x871a8119 0x821a821a 0x871a7d19 0x8b1c7c1a
0xffb55c40  0x7d1a8019 0x741b881c 0x7d22881a 0x80218420
0xffb55c50  0x801d871b 0x831b891a 0x84178319 0x81138218
0xffb55c60  0x88198512 0x8c18851b 0x80178415 0x78138019
0xffb55c70  0x77137f14 0x7d178219 0x83157f16 0x77138215
0xffb55c80  0x8118871d 0x8a1c8019 0x861a8117 0x7a238360
0xffb55c90  0x807f8097 0x809e80a8 0x80a780aa 0x80ae80aa
0xffb55ca0  0x80ab80ac 0x80a980a3 0x868d7e73 0x95527c2a
0xffb55cb0  0x92268425 0x7424902a 0x6a28932a 0x7629952a
0xffb55cc0  0x7a259425 0x78299521 0x74269328 0x7c299024
0xffb55cd0  0x8c288a21 0x94228a1e 0x8f218d21 0x8a268c21
0xffb55ce0  0x90238c26 0x8d248d23 0x90218c23 0x9a29871d
0xffb55cf0  0x951e8720 0x91208821 0x97278820 0x9c218925
0xffb55d00  0x796d846c 0x7a6e826b 0x7868866a 0x736a8769
0xffb55d10  0x70678664 0x75648665 0x71638762 0x6f608b5d
0xffb55d20  0x79618d5e 0x7a5e865c 0x7459885b 0x7b578a59
0xffb55d30  0x7f578a54 0x7a528e4f 0x764c8e4e 0x764d8f45
0xffb55d40  0x79449446 0x753e913b 0x743b8f33 0x73319133
0xffb55d50  0x73318e2b 0x752d8c26 0x74288b22 0x75268f1f
0xffb55d60  0x741e8d21 0x7b20821f 0x821b7e1c 0x7c168916
0xffb55d70  0x741a891b 0x761c8016 0x7b1b7d1a 0x7b147c18
0xffb55d80  0x781c7c1b 0x7a137d1d 0x7f1a7e1f 0x771b801a
0xffb55d90  0x701c8120 0x771d7d1a 0x7d1c7c1d 0x7d1c7c1e
0xffb55da0  0x7c1c7b1f 0x801d851d 0x7f1d871e 0x7a20801e
0xffb55db0  0x781e7f20 0x7a1b8225 0x811e811e 0x841c8224
0xffb55dc0  0x7f21821d 0x7e1f821d 0x831d8220 0x81227a20
0xffb55dd0  0x801c7c20 0x7b1e801f 0x7d207921 0x7e207a1e
0xffb55de0  0x841c7723 0x89207919 0x82207e1f 0x7f1b7c23
0xffb55df0  0x80197d20 0x7e237a19 0x80227c1d 0x851a7f22
0xffb55e00  0x871d7b1e 0x83207e1f 0x781b7e1f 0x7a1f7e18
0xffb55e10  0x851c871c 0x821b8320 0x86217d19 0x871a831b
0xffb55e20  0x831d7c1f 0x7e1c7c1c 0x7e15851f 0x801f7f1b
0xffb55e30  0x7d1c7c1b 0x7b1b7f1b 0x7e1a8416 0x851e7f1c
0xffb55e40  0x81167d1b 0x77177e1a 0x7e1c8116 0x821b8817
0xffb55e50  0x8019821b 0x861b7b19 0x861d8114 0x7e187f1e
0xffb55e60  0x7f177919 0x861b7b18 0x86187e16 0x811b7a1a
0xffb55e70  0x7f187917 0x82177e1a 0x82197f19 0x7b188713
0xffb55e80  0x7d1b8818 0x7f188117 0x7d1d7e15 0x7d168118
0xffb55e90  0x81188418 0x7e168210 0x81197a17 0x87197c12
0xffb55ea0  0x81158016 0x80118119 0x8413861b 0x8716851b
0xffb55eb0  0x7e198417 0x7c1c831a 0x8a1d7c17 0x8b1b7b17
0xffb55ec0  0x7f1d801a 0x7a168c1b 0x831e8819 0x831b861c
0xffb55ed0  0x811d871d 0x82178a19 0x821a891b 0x7d168816
0xffb55ee0  0x8217881b 0x83158717 0x8016821b 0x7c167b19
0xffb55ef0  0x7e177818 0x81178015 0x83147d19 0x7f167d17
0xffb55f00  0x810f8616 0x871f8115 0x8e158019 0x831f8252
0xffb55f10  0x7d767f93 0x809a80a8 0x80ab80ac 0x80ac80ab
0xffb55f20  0x80a980aa 0x80ab80a2 0x85927c75 0x8e567d2f
0xffb55f30  0x8b248925 0x74248e2c 0x6c269228 0x6f27982d
0xffb55f40  0x74259626 0x78279024 0x80249123 0x822c872e
0xffb55f50  0x802d8039 0x80358033 0x80378040 0x803d8040
0xffb55f60  0x803c8049 0x8047804e 0x854e844e 0x8d518453
0xffb55f70  0x89538355 0x875b8357 0x8a5d835c 0x8a618265
0xffb55f80  0x6e4f874c 0x704c864b 0x7a44854a 0x75408743
0xffb55f90  0x6b3a873f 0x6e37883a 0x64318732 0x67348b32
0xffb55fa0  0x79298a29 0x722b8625 0x5d248627 0x6e268625
0xffb55fb0  0x7a218523 0x76238a1f 0x701b8918 0x75268817
0xffb55fc0  0x781f8b17 0x6f178a1b 0x791c8a1b 0x7e1e8b1a
0xffb55fd0  0x7d17891e 0x7e1c871f 0x851b8920 0x86208a17
0xffb55fe0  0x7f208819 0x831f811d 0x88207d20 0x891b8520
0xffb55ff0  0x861b851e 0x841f8020 0x89208220 0x8620811f
0xffb56000  0x7c1d7d1f 0x801f7d20 0x8f1d8129 0x8419811d
0xffb56010  0x741e7f1e 0x7a1f8220 0x8b228120 0x901f7d1d
0xffb56020  0x8b207d1f 0x8a1d8322 0x851f8420 0x841d8023
0xffb56030  0x8020831f 0x7820831d 0x80228120 0x8a208423
0xffb56040  0x841d8220 0x7c1f8122 0x7c1f8021 0x7f217a1e
0xffb56050  0x85217d1f 0x7a20801d 0x79207b20 0x83227d19
0xffb56060  0x891f7b24 0x8e207e1f 0x7e1d7f1d 0x7e1b7c24
0xffb56070  0x881b7f20 0x821d7d1c 0x80227f1b 0x841c7f21
0xffb56080  0x8b1d7c1a 0x851a7f1b 0x781b821d 0x7619811c
0xffb56090  0x7f1f8516 0x7d1a861a 0x8219821d 0x841a851c
0xffb560a0  0x7e15851c 0x7b1c8318 0x7d19841b 0x7d177f18
0xffb560b0  0x7b19811c 0x7e1d8217 0x8717851f 0x86178218
0xffb560c0  0x76148017 0x6f1f7e15 0x801a7e19 0x85178317
0xffb560d0  0x7a1b8011 0x80197e18 0x84198017 0x80138116
0xffb560e0  0x7e177a16 0x7d177b13 0x7d14811a 0x83157c17
0xffb560f0  0x89177e15 0x88198115 0x7e158016 0x7b178215
0xffb56100  0x8216851a 0x81148113 0x79177e13 0x7e148017
0xffb56110  0x83168517 0x7f138413 0x7d117f13 0x83158110
0xffb56120  0x8b158514 0x85158414 0x7c138618 0x8118871c
0xffb56130  0x7a198319 0x7a1a811c 0x8c1f8016 0x8d1d8116
0xffb56140  0x831d8317 0x82198b1a 0x891d871b 0x89168218
0xffb56150  0x861f8410 0x82198719 0x85188614 0x7e1a8118
0xffb56160  0x821a8218 0x7e188615 0x801a841b 0x81177f19
0xffb56170  0x86157e19 0x87198018 0x84188118 0x87198111
0xffb56180  0x82168015 0x84167e18 0x94188219 0x8c1e824e
0xffb56190  0x7a767f8e 0x7f9b80a9 0x80a880ad 0x80aa80af
0xffb561a0  0x80aa80ab 0x80aa80a5 0x828f7e73 0x89587c2e
0xffb561b0  0x86278723 0x74299328 0x6e2a9329 0x6e279529
0xffb561c0  0x6f289526 0x78269123 0x89278944 0x8567837c
0xffb561d0  0x82897f90 0x81917f94 0x82957f94 0x82977f98
0xffb561e0  0x829c7f9b 0x81987fa1 0x819e7f98 0x81997e9a
0xffb561f0  0x81a07ea1 0x809c7fa0 0x80a27fa4 0x81a47da5
0xffb56200  0x77218826 0x7a1a8827 0x801d811f 0x7f1e7f17
0xffb56210  0x781e801d 0x7a207f16 0x771d7f21 0x7618801c
0xffb56220  0x821c7f23 0x7d1b7d1e 0x7123791d 0x7b1f7720
0xffb56230  0x7b217922 0x761b8020 0x7d217d20 0x8324791b
0xffb56240  0x811f7f20 0x7c1e8121 0x801d7f23 0x851d7a24
0xffb56250  0x831f7720 0x7e1f7b1e 0x7e208022 0x811d7e20
0xffb56260  0x7e237c1c 0x7e207d20 0x81207821 0x85217b1b
0xffb56270  0x89207e20 0x87207e20 0x821f8420 0x7b208221
0xffb56280  0x7f217a20 0x80247a1f 0x8620811f 0x821d8020
0xffb56290  0x7a227b21 0x7f1b841f 0x89208321 0x8a1d7b1d
0xffb562a0  0x861c7c20 0x881c7e1f 0x87237e1d 0x871c7f23
0xffb562b0  0x801d841f 0x7a1e801d 0x7c207e1e 0x7d1f841e
0xffb562c0  0x7d1d8220 0x7a1f7e20 0x811b7a1f 0x831d791d
0xffb562d0  0x821d7d1d 0x781d801c 0x781c7d1e 0x80167d1d
0xffb562e0  0x81197f1c 0x841b821b 0x7d1e7f17 0x801d7a1c
0xffb562f0  0x84167e1a 0x811b801b 0x801b811b 0x7e17811a
0xffb56300  0x801d7d16 0x7c1b7f19 0x78178518 0x781a811a
0xffb56310  0x82198117 0x83188718 0x7f178717 0x801d8411
0xffb56320  0x7e178915 0x7f198817 0x821a8115 0x7e177e19
0xffb56330  0x7a118318 0x7f198416 0x82178111 0x7c148217
0xffb56340  0x79138219 0x7b157d15 0x81177b14 0x86137c18
0xffb56350  0x81187d13 0x7d147f10 0x81197e15 0x83108112
0xffb56360  0x80127915 0x7d15790d 0x7c118315 0x83137d17
0xffb56370  0x83138010 0x81158514 0x7a158215 0x7c137d12
0xffb56380  0x7e118213 0x79128213 0x7d157a12 0x7f127f13
0xffb56390  0x82148517 0x7e158310 0x7a148212 0x7f128411
0xffb563a0  0x88118611 0x860f8711 0x7f148517 0x7f1a8719
0xffb563b0  0x831c811d 0x891b7c1a 0x8e1b831d 0x891c8317
0xffb563c0  0x7d1b8421 0x7f1a8819 0x861e841a 0x891c7c1c
0xffb563d0  0x88157f1e 0x891a8218 0x8512811d 0x7e1a7b1d
0xffb563e0  0x841e7b1a 0x7e16851d 0x7d19821d 0x7e1b8117
0xffb563f0  0x8219851c 0x811d7f16 0x7c1c8319 0x7f1e8214
0xffb56400  0x8115781a 0x81167a12 0x8d17810f 0x86218149
0xffb56410  0x7971818a 0x809c80a7 0x80a780aa 0x80ac80ad
0xffb56420  0x80a980ac 0x80a880a1 0x7f917f77 0x895d7a39
0xffb56430  0x8724841e 0x75289526 0x7428942a 0x6b299227
0xffb56440  0x6c279427 0x7d259221 0x8924845b 0x82838098
0xffb56450  0x80ae80b7 0x80bb80c0 0x80bf80bc 0x80c180be
0xffb56460  0x80be80c3 0x80c380c3 0x80c180be 0x80b980c2
0xffb56470  0x80c080c4 0x80c280c1 0x80c480c6 0x80c580c4
0xffb56480  0x82208721 0x87218620 0x851d841f 0x89208121
0xffb56490  0x851f7e21 0x88217d21 0x88217c20 0x831d7c20
0xffb564a0  0x89217e22 0x861d7e1d 0x7f247c1e 0x7f247c20
0xffb564b0  0x76227f21 0x6f218320 0x811f7f27 0x8c1f7721
0xffb564c0  0x88217922 0x84207c20 0x83217e1f 0x8622801f
0xffb564d0  0x84247d20 0x7b217c20 0x76207c1f 0x7a1e7d22
0xffb564e0  0x7b1a7c20 0x7b1f7a20 0x7b207a1d 0x81237f20
0xffb564f0  0x8c23811d 0x8b207f20 0x7c1e7f1f 0x721e8120
0xffb56500  0x80208124 0x7f197b20 0x80207c1d 0x821f831d
0xffb56510  0x8318831e 0x88208315 0x891d811b 0x831f7e18
0xffb56520  0x7f1d821d 0x861e841e 0x8a1b821f 0x8c19811f
0xffb56530  0x83198119 0x7d1f821b 0x791c7f1c 0x76197e1c
0xffb56540  0x7b1c7e1a 0x7a1b8319 0x8620801b 0x88177a1c
0xffb56550  0x801d7e1b 0x7a1a8117 0x78197e1c 0x7a197f16
0xffb56560  0x79188119 0x7a1a8316 0x7d1e8217 0x81188017
0xffb56570  0x80178218 0x82198119 0x82168116 0x7b158215
0xffb56580  0x70158419 0x75128315 0x7d1c8413 0x7d168116
0xffb56590  0x87127f1a 0x8d158314 0x7f148414 0x7d118213
0xffb565a0  0x84188414 0x8913851b 0x86118113 0x7d148213
0xffb565b0  0x77148716 0x80138814 0x7d148711 0x71138613
0xffb565c0  0x80138217 0x86157f14 0x82107d14 0x87148112
0xffb565d0  0x88127f13 0x7b127f11 0x7e0d8213 0x8a178112
0xffb565e0  0x85117b11 0x7d0f7d13 0x7e128311 0x84128213
0xffb565f0  0x81118712 0x7d118711 0x7915850e 0x80118215
0xffb56600  0x7a128411 0x72128613 0x7d138212 0x7e118513
0xffb56610  0x81148916 0x7e15830f 0x7811820d 0x7c138210
0xffb56620  0x8411830d 0x89138413 0x82117f18 0x801b811d
0xffb56630  0x8d1b811f 0x9319821d 0x8f1b8319 0x841d8416
0xffb56640  0x791b861d 0x7f218518 0x84208319 0x871c821f
0xffb56650  0x881f851c 0x901a8115 0x881a7e1d 0x80167e1a
0xffb56660  0x841d851b 0x7f19861a 0x7d1c7f1c 0x7d1a7f1a
0xffb56670  0x7f1a841b 0x7d1a7f1b 0x7817801f 0x791a831b
0xffb56680  0x7d187d18 0x7d167e13 0x84178516 0x7e1c8343
0xffb56690  0x79738088 0x809b80a8 0x80aa80a8 0x80ab80ab
0xffb566a0  0x80ad80a9 0x80a980a4 0x7e8f7e77 0x885a7d37
0xffb566b0  0x86218826 0x77259628 0x7a26952a 0x6a289323
0xffb566c0  0x6a279426 0x8227941f 0x8423865d 0x809780b4
0xffb566d0  0x80d180da 0x80d980d8 0x80d780d7 0x80d780d7
0xffb566e0  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb566f0  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb56700  0x83228220 0x8a228021 0x8222831f 0x82217f21
0xffb56710  0x84217923 0x87227820 0x8d217721 0x8823761c
0xffb56720  0x86207c20 0x82217e23 0x7e227d21 0x7a217f21
0xffb56730  0x78228420 0x78228421 0x82217f20 0x89237323
0xffb56740  0x831f7321 0x82217620 0x82207d1c 0x7f20841e
0xffb56750  0x7e20831d 0x7e217d1d 0x7e1b761d 0x8019791e
0xffb56760  0x801c7a1b 0x7d1b771c 0x7c1d7a1c 0x851b811b
0xffb56770  0x871e8419 0x861c7f1f 0x7f1e781c 0x771d801d
0xffb56780  0x7d18871c 0x851f7b1c 0x841d7816 0x831d8419
0xffb56790  0x83178c18 0x861a831b 0x89187b18 0x81197f1b
0xffb567a0  0x80178915 0x881b891b 0x8b178719 0x881a811c
0xffb567b0  0x811c7f16 0x7e188419 0x79197e18 0x791a7919
0xffb567c0  0x7f197817 0x7b168512 0x7e1c841b 0x7e197918
0xffb567d0  0x811a7c19 0x7d188213 0x7c168116 0x7d198110
0xffb567e0  0x7c158314 0x7e128314 0x7f178212 0x81158416
0xffb567f0  0x81148415 0x7f138015 0x80147f12 0x7a128412
0xffb56800  0x770e8813 0x7b0f8512 0x78118311 0x73128012
0xffb56810  0x80137c10 0x8b117e13 0x8413800e 0x83117f11
0xffb56820  0x88137e10 0x87108418 0x86128012 0x7e128214
0xffb56830  0x75118812 0x7b0f8a17 0x7c0f8e13 0x78148915
0xffb56840  0x82148212 0x80118016 0x79158011 0x7c138213
0xffb56850  0x84117f10 0x7e137e11 0x79128313 0x81137f12
0xffb56860  0x82157d11 0x820f7e15 0x840f8114 0x830f8612
0xffb56870  0x7e0e8714 0x7c0c8615 0x7712870e 0x7911830d
0xffb56880  0x7d16850e 0x78138913 0x7d158814 0x81108a15
0xffb56890  0x7f108914 0x7e148213 0x7a13820e 0x79147f12
0xffb568a0  0x8412800b 0x88128313 0x84157919 0x85177b1c
0xffb568b0  0x8c1f811b 0x8a158819 0x8421831e 0x821d841e
0xffb568c0  0x7b198721 0x791a811a 0x831b811a 0x861c871c
0xffb568d0  0x80178920 0x87177e18 0x851b781b 0x7f1c7f19
0xffb568e0  0x80178c1b 0x7e19871d 0x841d791b 0x87197d1c
0xffb568f0  0x8317821d 0x7b1a801a 0x771d7d1e 0x7814841f
0xffb56900  0x7b18811a 0x79177f16 0x82168613 0x7c158448
0xffb56910  0x7b6e8087 0x809a80a3 0x80a780a9 0x80ac80aa
0xffb56920  0x80aa80a9 0x80a980a5 0x83977d7a 0x8c5e7e3b
0xffb56930  0x821f8a27 0x70229729 0x7626962c 0x70279227
0xffb56940  0x6c269424 0x7e249523 0x811f9a47 0x808a80b5
0xffb56950  0x80da80da 0x80d980d8 0x80d780d7 0x80d780d7
0xffb56960  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb56970  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb56980  0x88208121 0x8d1f8020 0x7f22821d 0x7c208220
0xffb56990  0x84207c1d 0x861f7b1e 0x8d227e1d 0x8b207b1b
0xffb569a0  0x851e7d1f 0x82207f1e 0x7f1d7e21 0x78197f1e
0xffb569b0  0x801e8220 0x851e8220 0x83198220 0x81237e17
0xffb569c0  0x7e1d7918 0x81247715 0x7e1b7e1f 0x7c19821d
0xffb569d0  0x7a1d821a 0x801a821f 0x87177b1b 0x89197e13
0xffb569e0  0x871c801b 0x811a7d18 0x80177f1a 0x8a1b8119
0xffb569f0  0x851d8119 0x801b8114 0x821d811a 0x8219821a
0xffb56a00  0x7e16871a 0x8b19811c 0x8a177718 0x86157f19
0xffb56a10  0x87188713 0x85167f15 0x89177e17 0x83128115
0xffb56a20  0x83168514 0x8e178515 0x8f128115 0x88167d13
0xffb56a30  0x83167d18 0x820f8214 0x7d18820f 0x7f158215
0xffb56a40  0x82158113 0x80178413 0x78118815 0x72158415
0xffb56a50  0x821c8116 0x82178214 0x82138215 0x7e0f7f13
0xffb56a60  0x7f137f12 0x81128211 0x80168212 0x80148511
0xffb56a70  0x84138413 0x810f7d11 0x81167f12 0x7b0e8614
0xffb56a80  0x7f0e8913 0x8613850f 0x7411810f 0x6a158311
0xffb56a90  0x76128215 0x8b147f11 0x8c148211 0x8b108115
0xffb56aa0  0x8c117f12 0x8b15820f 0x88127f11 0x82158211
0xffb56ab0  0x78148817 0x78118a14 0x7f148b13 0x84118412
0xffb56ac0  0x84187e10 0x7d137d15 0x74117f15 0x74118213
0xffb56ad0  0x82147c11 0x83117e12 0x770e8314 0x79137f11
0xffb56ae0  0x80117f11 0x8615840d 0x89148312 0x8513830f
0xffb56af0  0x80128711 0x7c14870f 0x73118810 0x760f8410
0xffb56b00  0x82138414 0x820f8615 0x83128513 0x86128914
0xffb56b10  0x80118714 0x8217810f 0x7f118212 0x790f8311
0xffb56b20  0x83138210 0x8a0e7e10 0x87147d19 0x8915801d
0xffb56b30  0x8a1d7f19 0x831d871c 0x79198519 0x841f821e
0xffb56b40  0x801d841d 0x751a801c 0x831c801f 0x871c871e
0xffb56b50  0x7a198518 0x7e157f1c 0x801f8017 0x7d1f841c
0xffb56b60  0x801a8719 0x7f1a841c 0x8919801a 0x8f1b7f1b
0xffb56b70  0x891c7d1b 0x79157d1d 0x77197d1b 0x7b1d8114
0xffb56b80  0x7d1b8219 0x7b168015 0x82188214 0x7d1f833e
0xffb56b90  0x7d708086 0x809b80a5 0x80a780a9 0x80ac80a8
0xffb56ba0  0x80a880aa 0x80ab80a6 0x87968078 0x905c8337
0xffb56bb0  0x81218a23 0x6e28942e 0x7624952a 0x792a9228
0xffb56bc0  0x73279326 0x7f1d9424 0x7d23924c 0x808580b0
0xffb56bd0  0x80cb80da 0x80da80d8 0x80d780d7 0x80d780d7
0xffb56be0  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb56bf0  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb56c00  0x81217e1d 0x88217e17 0x7d1d8220 0x7d1b831c
0xffb56c10  0x831c7c1b 0x841f7a1d 0x88188319 0x891c801f
0xffb56c20  0x85197c1c 0x82197e1e 0x83197d1d 0x831a7d19
0xffb56c30  0x811a811c 0x7f1b801a 0x7c1d8317 0x7d17881a
0xffb56c40  0x7f197f1b 0x821a7717 0x771b7f13 0x721b8018
0xffb56c50  0x7b178116 0x7f138715 0x7d178016 0x7b158111
0xffb56c60  0x80198314 0x83168316 0x7d118319 0x83167f17
0xffb56c70  0x84167d14 0x861a8113 0x87158813 0x81178315
0xffb56c80  0x7a158713 0x83148716 0x83177615 0x83117810
0xffb56c90  0x8a178011 0x87147a12 0x84137f12 0x7f15840e
0xffb56ca0  0x81158212 0x8c138014 0x86157914 0x7e157811
0xffb56cb0  0x81127812 0x88127e11 0x84128412 0x82138713
0xffb56cc0  0x810d8813 0x7d148215 0x83108812 0x7e198c13
0xffb56cd0  0x7c18851a 0x80167f15 0x8017820f 0x81137c1b
0xffb56ce0  0x82107814 0x7f137f0e 0x7f158016 0x7d14840d
0xffb56cf0  0x83138414 0x82137911 0x80127d0f 0x82128611
0xffb56d00  0x84118910 0x81108311 0x7a0f7f13 0x740f8210
0xffb56d10  0x7a0f850f 0x85138013 0x8112820f 0x80128212
0xffb56d20  0x8514810e 0x89138114 0x880f7c12 0x82128213
0xffb56d30  0x7c0f8815 0x7a118716 0x7c138713 0x80157e13
0xffb56d40  0x83137b14 0x7b137a0f 0x78167c14 0x7d127e12
0xffb56d50  0x84137910 0x81137d11 0x7f108111 0x85157c11
0xffb56d60  0x7f0f830f 0x7d13870f 0x88128313 0x8a118112
0xffb56d70  0x8311840d 0x7d18870f 0x710f8915 0x7b128412
0xffb56d80  0x8716810f 0x800f8217 0x7f158112 0x86128612
0xffb56d90  0x82148414 0x81167f15 0x800d8010 0x7e108412
0xffb56da0  0x8111840d 0x87157815 0x83127e0f 0x851a841b
0xffb56db0  0x891d7c22 0x8018821d 0x7b1c831b 0x821b7f1d
0xffb56dc0  0x821c7f1c 0x821c7c19 0x861f7e1a 0x8018841a
0xffb56dd0  0x7e1d8018 0x86177e1b 0x7e19851c 0x7719851d
0xffb56de0  0x801a801b 0x811b801c 0x8018851d 0x8416831d
0xffb56df0  0x881d781f 0x81177919 0x791b7c1b 0x7c197d1c
0xffb56e00  0x7c178418 0x78178018 0x8b167b17 0x8415813f
0xffb56e10  0x7e6d7e86 0x809580a3 0x80a880a8 0x80aa80ab
0xffb56e20  0x80a980a6 0x80a980a3 0x8494837f 0x8e60863c
0xffb56e30  0x85288724 0x6f269027 0x6e239329 0x752b932a
0xffb56e40  0x7620932a 0x81249224 0x7e1d8f41 0x808480ac
0xffb56e50  0x80c980d9 0x80da80d9 0x80d880d7 0x80d780d7
0xffb56e60  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb56e70  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb56e80  0x7b1a831d 0x811e8517 0x7d167f1b 0x83187f18
0xffb56e90  0x83197f1a 0x81197d15 0x841d8015 0x87128019
0xffb56ea0  0x84167f16 0x81178316 0x85168016 0x8d167d17
0xffb56eb0  0x85118019 0x78138313 0x7a188411 0x7f148614
0xffb56ec0  0x85148115 0x85157d15 0x73138110 0x69158615
0xffb56ed0  0x7b158a15 0x7f148c11 0x7515810d 0x6e148113
0xffb56ee0  0x7b128512 0x88158414 0x7c148411 0x7a158110
0xffb56ef0  0x81178115 0x8c148515 0x92148713 0x83128414
0xffb56f00  0x790d8619 0x7e118613 0x7d157f15 0x82117a15
0xffb56f10  0x8e167b14 0x8813790f 0x81117f15 0x7c14860c
0xffb56f20  0x7d108115 0x8b1a8110 0x7e147d11 0x73117c13
0xffb56f30  0x7d127f14 0x8d128114 0x8c15810f 0x89128013
0xffb56f40  0x84148313 0x7a118312 0x90158815 0x8e198a13
0xffb56f50  0x7a178515 0x791b8316 0x7e168411 0x83148214
0xffb56f60  0x82168310 0x81148317 0x7e118414 0x7b138713
0xffb56f70  0x84118116 0x83117c11 0x7f19820b 0x89168310
0xffb56f80  0x8a118611 0x7f0d8610 0x8311820f 0x820e810f
0xffb56f90  0x840f7e0f 0x7e0f7e10 0x79128311 0x7a0f8310
0xffb56fa0  0x82128013 0x8910810f 0x86158511 0x83128514
0xffb56fb0  0x81168612 0x80138315 0x7d118212 0x7d147f13
0xffb56fc0  0x82127c17 0x7d0f7c13 0x7e128112 0x87128413
0xffb56fd0  0x89137f0f 0x7f118413 0x8610850f 0x91187e0b
0xffb56fe0  0x8312800f 0x760f8513 0x87128315 0x91128214
0xffb56ff0  0x890b8212 0x81158411 0x740d8515 0x83118211
0xffb57000  0x8b138515 0x7c0e8813 0x7c148518 0x8617840e
0xffb57010  0x86148414 0x83147f12 0x81108011 0x84118711
0xffb57020  0x810f8811 0x81107f10 0x7e147e17 0x831b8020
0xffb57030  0x87207e1c 0x801b841f 0x801b831d 0x831b7e1e
0xffb57040  0x87198120 0x8e1e7e1c 0x8b1d7b1c 0x7d19801c
0xffb57050  0x821b8219 0x8e1d7f1d 0x7f1c801b 0x7319821b
0xffb57060  0x7f1b801f 0x821a821a 0x7717851b 0x791a831b
0xffb57070  0x861d7c17 0x861d7f1b 0x7a1a8317 0x7f1b8020
0xffb57080  0x7f148217 0x7d167f17 0x94177d1b 0x8c1a833d
0xffb57090  0x7f6e8084 0x809a80a2 0x80ac80aa 0x80aa80ab
0xffb570a0  0x80a980ac 0x80a780a7 0x8294817d 0x8e618236
0xffb570b0  0x89268921 0x6f239228 0x68299325 0x712a922e
0xffb570c0  0x77239128 0x83249321 0x7e249042 0x7f8280ac
0xffb570d0  0x80ca80da 0x80da80d8 0x80d780d7 0x80d780d7
0xffb570e0  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb570f0  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb57100  0x7e188810 0x81158a14 0x7d1a7d19 0x7c137b14
0xffb57110  0x82178116 0x81148014 0x7f137b13 0x86127e12
0xffb57120  0x80128214 0x7a148414 0x82118015 0x8a157913
0xffb57130  0x86117c15 0x7b13830a 0x7a178511 0x7e128217
0xffb57140  0x810f8012 0x86147f11 0x7d0f8112 0x77118912
0xffb57150  0x7d129110 0x79198d0f 0x71187e14 0x73147c0e
0xffb57160  0x79138514 0x80128413 0x7b128511 0x7a178113
0xffb57170  0x7f178213 0x88118615 0x89128316 0x80168416
0xffb57180  0x7d138415 0x7e118415 0x7c158417 0x7e147b15
0xffb57190  0x87147614 0x83147616 0x7d157d13 0x7e0f8413
0xffb571a0  0x7f177f14 0x820f8017 0x7f127c13 0x7c107d12
0xffb571b0  0x7b158212 0x84118112 0x8a137b15 0x86127614
0xffb571c0  0x82137c11 0x7f138215 0x860d8513 0x821a8717
0xffb571d0  0x7e178419 0x81188717 0x7f188417 0x7e158713
0xffb571e0  0x79128e13 0x7a158515 0x7a0f8813 0x80138917
0xffb571f0  0x86147e0f 0x83157c13 0x7e11850f 0x85157f11
0xffb57200  0x86138111 0x7d0d8911 0x8210840d 0x850f7c11
0xffb57210  0x84107612 0x83127c0f 0x86118411 0x8213840e
0xffb57220  0x80138012 0x85127f13 0x81108a0e 0x7c158913
0xffb57230  0x7d15830e 0x80167d16 0x7e157a11 0x80147f14
0xffb57240  0x84157d15 0x81137d14 0x80128414 0x80138513
0xffb57250  0x83198210 0x7f0e8812 0x7f148812 0x87108012
0xffb57260  0x7f107d11 0x7c128012 0x89118215 0x890f8112
0xffb57270  0x85138013 0x84118012 0x7a127e11 0x7c157f0e
0xffb57280  0x81158611 0x7b128d11 0x77158919 0x7f148213
0xffb57290  0x7f158413 0x81187d12 0x85107f0f 0x83118711
0xffb572a0  0x810e8714 0x7d148214 0x7e187b17 0x88167b1d
0xffb572b0  0x8a1e8017 0x8421861b 0x821b8221 0x82207b1d
0xffb572c0  0x821c8218 0x8620811f 0x851e771e 0x831e7a19
0xffb572d0  0x851b811b 0x88207e21 0x8023791d 0x7f1e7c1f
0xffb572e0  0x87158021 0x851e801d 0x7d1c811a 0x7f1c821a
0xffb572f0  0x811b801d 0x7c17831d 0x7419881b 0x7b1d811b
0xffb57300  0x851c7c18 0x84117c19 0x8b177e17 0x89138434
0xffb57310  0x7e698284 0x7f9680a2 0x80a980aa 0x80ab80ac
0xffb57320  0x80a980a9 0x80ab80a4 0x809a7f7f 0x87617e42
0xffb57330  0x83278924 0x75269325 0x6e299127 0x6c279128
0xffb57340  0x71289127 0x79249220 0x7a1e9234 0x7f7c80a8
0xffb57350  0x80c880d8 0x80da80d9 0x80d880d7 0x80d780d7
0xffb57360  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb57370  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb57380  0x87138114 0x87148713 0x80137e11 0x72147d11
0xffb57390  0x7f138318 0x84138110 0x7b107f0d 0x86118011
0xffb573a0  0x81128112 0x780e8311 0x81137f11 0x87128012
0xffb573b0  0x85138312 0x8212800f 0x7d138111 0x7e128112
0xffb573c0  0x7d0f8419 0x86128614 0x86118114 0x8713841b
0xffb573d0  0x840d8b12 0x76158512 0x6f0b7b12 0x78138017
0xffb573e0  0x7a098518 0x7c158411 0x7f168419 0x7d138215
0xffb573f0  0x80167e14 0x86158414 0x80148511 0x7c138515
0xffb57400  0x81148718 0x7f138515 0x80148418 0x7d0f8118
0xffb57410  0x7d158016 0x7b177e16 0x78137d19 0x83137f0f
0xffb57420  0x83168015 0x7d138015 0x80147f11 0x8619830f
0xffb57430  0x7d118312 0x7e118512 0x85158314 0x84147a13
0xffb57440  0x82137c11 0x84128015 0x7b138412 0x75198419
0xffb57450  0x8317841b 0x89198616 0x80198716 0x7c168917
0xffb57460  0x78178810 0x74138513 0x79158712 0x87128915
0xffb57470  0x8b158114 0x850e8017 0x7f0d8811 0x82128412
0xffb57480  0x86118211 0x7d0d8710 0x810c8215 0x86127c10
0xffb57490  0x820f7b11 0x8a137f15 0x9315850d 0x89128313
0xffb574a0  0x820f7f13 0x83127f13 0x7f138413 0x7a158514
0xffb574b0  0x7b158414 0x7f138214 0x7e118314 0x86138414
0xffb574c0  0x88158015 0x89138213 0x86178610 0x7f148514
0xffb574d0  0x80118516 0x81148a11 0x7e148613 0x81128413
0xffb574e0  0x7d13830f 0x83128117 0x8a17850e 0x7f118412
0xffb574f0  0x800f8212 0x88147e17 0x800c7f0f 0x7811820f
0xffb57500  0x78128712 0x7c128c15 0x75128a16 0x78158213
0xffb57510  0x7a168313 0x7e158113 0x8e167d11 0x880f8513
0xffb57520  0x810f8713 0x7e138219 0x82157f1c 0x8d1d7e1c
0xffb57530  0x8d1a8322 0x89218324 0x84237e24 0x82237a24
0xffb57540  0x80217d24 0x80248020 0x801e7b1d 0x8624791d
0xffb57550  0x87207e21 0x82258121 0x7f247f24 0x86267e27
0xffb57560  0x8e207d23 0x8823801f 0x821f7f1f 0x841b8115
0xffb57570  0x7c1e8219 0x721a831b 0x701a8619 0x781a851d
0xffb57580  0x8a188317 0x8d198116 0x85128117 0x8817813c
0xffb57590  0x7f698185 0x7f9880a3 0x80ac80a8 0x80ad80a9
0xffb575a0  0x80aa80aa 0x80a780a5 0x7f977f7e 0x8162813d
0xffb575b0  0x7f228724 0x7a269426 0x74259427 0x68269228
0xffb575c0  0x6d269227 0x71218f24 0x791e8e36 0x7f7980a8
0xffb575d0  0x80c480d8 0x80da80d9 0x80d880d7 0x80d780d7
0xffb575e0  0x80d780d7 0x80d780d7 0x80d780d8 0x80d080d7
0xffb575f0  0x80d580d6 0x80d880d6 0x80d980d6 0x80d280d2
0xffb57600  0x86167a11 0x8a0e8212 0x85157c16 0x79137b13
0xffb57610  0x81158114 0x84138312 0x7a108310 0x7e0f8010
0xffb57620  0x7f137e0d 0x780f7f11 0x810f7c12 0x8b11830d
0xffb57630  0x850e8812 0x7b137d11 0x76137d12 0x780e8018
0xffb57640  0x7b11850b 0x82138913 0x86157d12 0x83137a12
0xffb57650  0x7d108012 0x7c117c13 0x7917790f 0x7c0f8112
0xffb57660  0x7a148212 0x7e148213 0x7e168215 0x79158115
0xffb57670  0x7e177a1a 0x7c127e14 0x7b158515 