aram>
            <param name="size">The length of the credit card number.</param>
            <returns>A string containing the generated credit card number.</returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.XRLEnumerateEligible">
            <summary>
            Summary description for XRLEnumerateEligible.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.XRLGetPaymentInfo">
             <summary>
            
             </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.XRLGetPostalCode">
            <summary>
            Handles the UACS GetPostalCode API
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.XRLGetSubscriptionStatus">
            <summary>
            Summary description for XRLGetSubscriptionStatus.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.XRLLinkWebAccount">
            <summary>
            Summary description for LinkWebAccount.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.XRLRenewSubscription">
            <summary>
            Summary description for XRLRenewSubscription.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.XRLSetPaymentInfo">
             <summary>
            
             </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.SetUserPIN">
             <summary>
            
             </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.XRLSetUserSettings">
             <summary>
            
             </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.XRLSetUserSettings2">
            <summary>
            Executes the SetUserSettings2 API
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.XRLVerifyBillingPIN">
             <summary>
            
             </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.XRLVerifyVoucher">
             <summary>
            
             </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.XRLVerifyVoucherGetOffer">
             <summary>
            
             </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.XRLWebGetUserSettings">
             <summary>
            
             </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.Offers.GetMigraionOffer(System.UInt64)">
            
             Here, we should be in sync with what's in RawCatalogDB
             
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.Offers.MusicNetOffers">
            <summary>
            MusicNet subscriptions
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.XRLCreateUserAndBillableAccount.Execute">
            <summary> Perform the create request, creating a machine if required </summary>
            <returns>True if the request is successful, False otherwise.</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.XRLGenerateGamertag.Execute">
            <summary> Perform the create request, creating a machine if required </summary>
            <returns>True if the request is successful, False otherwise.</returns>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.ProofData.proofType">
            <summary>
            Enumeration detailing the type of the strong proof
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.ProofData.proofDataLength">
            <summary>
            Protocol element to hold the length of the string
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.ProofData.proofData">
            <summary>
            The actual data of the strong proof.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.ProofStatus.proofType">
            <summary>
            Enumeration detailing the type of the strong proof
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.ProofStatus.proofDataLength">
            <summary>
            Protocol element to hold the length of the string
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.ProofStatus.proofData">
            <summary>
            The actual data of the strong proof.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.ProofStatus.isConfirmed">
            <summary>
            Flag to state if the strong proof has already been confirmed
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.XRLPassportAddProof.userPuid">
            <summary>
            The Xuid of the account that is attempting to perform the operation.
            Since the console can have multiple users attached, need to distinguish
            which user is making the request.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.XRLPassportAddProof.machinePuid">
            <summary>
            The console where the user make the request.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.XRLPassportAddProof.sessionToken">
            <summary>
            Standard Xbox protocol element to state that this operation should be
            password verified.  It represents the signed passport puid of the account
            being accessed.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.XRLPassportAddProof.proofData">
            <summary>
            The strong proof data
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.XRLPassportAddProofResponse.isConfirmed">
            <summary>
            Flag to state if the strong proof has already been confirmed
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.XRLPassportCreateGenerated.Execute">
            <summary> Perform the create request, creating a machine if required </summary>
            <returns>True if the request is successful, False otherwise.</returns>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.XRLPassportGetProofs.userPuid">
            <summary>
            The Xuid of the account that is attempting to perform the operation.
            Since the console can have multiple users attached, need to distinguish
            which user is making the request.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.XRLPassportGetProofs.machinePuid">
            <summary>
            The console where the user make the request.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.XRLPassportGetProofs.sessionToken">
            <summary>
            Standard Xbox protocol element to state that this operation should be
            password verified.  It represents the signed passport puid of the account
            being accessed.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.XRLPassportGetProofsResponse.proofsLength">
            <summary>
            Protocol element to hold the array length.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.XRLPassportGetProofsResponse.proofs">
            <summary>
            The list of strong proofs returned from passport
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.XRLPassportGetProofTypes.userPuid">
            <summary>
            The Xuid of the account that is attempting to perform the operation.
            Since the console can have multiple users attached, need to distinguish
            which user is making the request.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.XRLPassportGetProofTypes.machinePuid">
            <summary>
            The console where the user make the request.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.XRLPassportGetProofTypesResponse.proofTypesLength">
            <summary>
            Protocol element to hold the array length
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.XRLPassportGetProofTypesResponse.proofTypes">
            <summary>
            Array of proof types that are tied to the account that can be
            queried without knowledge of the password.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.PreviewMergeSubscriptionRequest">
            <summary>
            Request class for Preview Merge subscription. Takes primary and secondary puid
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.PreviewMergeSubscriptionResponse">
            <summary>
            Response for PreviewMergeSubscription Request
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.XRLXeRecoverAccount.Execute">
            <summary>
            Execute this XeRecoverAccount request against the xuacs virtual interface
            </summary>
            <returns>True if the request was successful, false otherwise</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.XRLXeRecoverAccount.Execute(System.Net.IPEndPoint)">
            <summary>
            Execute this request using the appropriate request type and reads
            the response as appropriate
            </summary>
            <param name="endPoint">The endpoint against which to execute the request</param>
            <returns>True if the request was successfull, false otherwise.</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.XRLXeRecoverAccount.PopulateSlot(ServerTestFramework.LiveService.FakeSG.CSGInfo@)">
            <summary>
            Populates the appropritate variables in the SG Slot with values from the request
            </summary>
            <param name="slot">The SGSlot to populate</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.XeRecoverAccountRequest60.Execute">
            <summary>
            Execute this XeRecoverAccount request against the xuacs virtual interface
            </summary>
            <returns>True if the request was successful, false otherwise</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.XeRecoverAccountRequest60.Execute(System.Net.IPEndPoint)">
            <summary>
            Execute this request using the appropriate request type and reads
            the response as appropriate
            </summary>
            <param name="endPoint">The endpoint against which to execute the request</param>
            <returns>True if the request was successfull, false otherwise.</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.XeRecoverAccountRequest60.PopulateSlot(ServerTestFramework.LiveService.FakeSG.CSGInfo@)">
            <summary>
            Populates the appropritate variables in the SG Slot with values from the request
            </summary>
            <param name="slot">The SGSlot to populate</param>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.XeRecoverAccountRequest60.Response">
            <summary>
            The response object that the response data will be read into after execution
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.ZuneSignIn.UserAccountService">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.ZuneSignIn.UserAccountService.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.ZuneSignIn.UserAccountService.GetPointsBalance(System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.ZuneSignIn.UserAccountService.BeginGetPointsBalance(System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.ZuneSignIn.UserAccountService.EndGetPointsBalance(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.ZuneSignIn.UserAccountService.GetPointsBalanceAsync(System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.ZuneSignIn.UserAccountService.GetPointsBalanceAsync(System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.ZuneSignIn.UserAccountService.SignIn">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.ZuneSignIn.UserAccountService.BeginSignIn(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.ZuneSignIn.UserAccountService.EndSignIn(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.ZuneSignIn.UserAccountService.SignInAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.ZuneSignIn.UserAccountService.SignInAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.ZuneSignIn.UserAccountService.TestConnection(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.ZuneSignIn.UserAccountService.BeginTestConnection(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.ZuneSignIn.UserAccountService.EndTestConnection(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.ZuneSignIn.UserAccountService.TestConnectionAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.ZuneSignIn.UserAccountService.TestConnectionAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.ZuneSignIn.UserAccountService.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.ZuneSignIn.UserAccountService.GetPointsBalanceCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.ZuneSignIn.UserAccountService.SignInCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.ZuneSignIn.UserAccountService.TestConnectionCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.ZuneSignIn.GetPointsBalanceResults">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.GetPointsBalanceResults.PointsBalance">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.GetPointsBalanceResults.AboveLowBalance">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.GetPointsBalanceResults.DmpAccountStatus">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.ZuneSignIn.SessionInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.SessionInfo.SessionKey">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.SessionInfo.MusicNetAuthToken">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.SessionInfo.GeoCountryCode">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.ZuneSignIn.SubscriptionInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.SubscriptionInfo.XboxOfferId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.SubscriptionInfo.BillingInstanceId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.SubscriptionInfo.Status">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.SubscriptionInfo.HasBillingViolation">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.SubscriptionInfo.HasPendingCancel">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.SubscriptionInfo.MusicNetSku">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.SubscriptionInfo.StartDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.SubscriptionInfo.EndDate">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.ZuneSignIn.AccountInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.AccountInfo.XboxPuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.AccountInfo.LivePuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.AccountInfo.Tag">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.AccountInfo.CountryCode">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.AccountInfo.PostalCode">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.AccountInfo.ParentallyControlled">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.AccountInfo.Privileges">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.AccountInfo.PointsBalance">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.ZuneSignIn.ErrorInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.ErrorInfo.HResult">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.ErrorInfo.TagChangeRequired">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.ErrorInfo.AcceptedTermsOfService">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.ErrorInfo.AccountSuspended">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.ErrorInfo.SubscriptionLapsed">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.ErrorInfo.BillingUnavailable">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.ZuneSignIn.SignInResults">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.SignInResults.ErrorInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.SignInResults.AccountInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.SignInResults.SubscriptionInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.SignInResults.SessionInfo">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.ZuneSignIn.GetPointsBalanceCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.ZuneSignIn.GetPointsBalanceCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.GetPointsBalanceCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.ZuneSignIn.SignInCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.ZuneSignIn.SignInCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.SignInCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.ZuneSignIn.TestConnectionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.ZuneSignIn.TestConnectionCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.TestConnectionCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.Constants">
            <summary>
            All constants that will be used by storage service
            part of it are copied from StorageConstants.cs
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.Constants.StorageDomain">
            <summary>
             Storage Domain Ids: this part got from npdb t_storage_domains table
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.AccessToken">
            <summary>
            basic fields of accessToken that will be shared by all sorts of requests
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.ReadFileToken">
            <summary>
            additional fields for readFile request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.WriteFileToken">
            <summary>
            additional fields for writeFile request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.RemoveFileToken">
            <summary>
            addtional fields for removeFile requests
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.EnumFilesToken">
            <summary>
            additional fields for EnumFiles request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.MyWriteFileToken">
            <summary>
            AccessToken that is used for WriteFile request
            the fields of this class should be in sync with accessToken.cs in
            \\depot\xonline\private\common\mc\storage\accessToken.cs
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.MyReadFileToken">
            <summary>
            AccessToken that is used for ReadFile request
            the fields of this class should be in sync with accessToken.cs in
            \\depot\xonline\private\common\mc\storage\accessToken.cs
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:ServerTestFramework.LiveService.Storage.MyRemoveFileToken" -->
        <!-- Badly formed XML comment ignored for member "T:ServerTestFramework.LiveService.Storage.MyEnumFilesToken" -->
        <member name="T:ServerTestFramework.LiveService.Storage.XRLEnumFiles">
            <summary>
            This class is for emerate files
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.XRLEnumFiles.#ctor(System.String,System.UInt32,System.UInt32,System.UInt32,System.Int64)">
            <summary>
            XRLEnumFiles constructor that takes five parameters
            </summary>
            <param name="pathName">pathName of the files that will be enumerated</param>
            <param name="titleID">titleID of the files that will be enumerated; it should be the same as the one in the pathname</param>
            <param name="rangeStart">zero-based index of the starting file</param>
            <param name="rangeEnd">zero-based index of the ending file</param>
            <param name="lModifiedSince">return files that modified after this time</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.XRLEnumFiles.GenerateHttpHeader(System.Net.IPEndPoint,System.IO.MemoryStream)">
            <summary>
            If this is a dataCenter EnumFile request,then we need append HTTPAuthData header
            </summary>
            <param name="endPoint"></param>
            <param name="reqStream"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.XRLEnumFiles.Execute(System.Net.IPEndPoint,ServerTestFramework.LiveService.Storage.XRLEnumFilesResponse@)">
            <summary>
            send XRLEnumFiles http request to storage front door and get the response back
            </summary>
            <param name="sServer">Storage front door</param>
            <param name="Response">XRLEnumFiles response</param>
            <returns></returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.XRLSingleEnumFileResult">
            <summary>
            This class is for each file returned in the enumFile response
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.XRLSingleEnumFileResult.Compare(ServerTestFramework.LiveService.Storage.XRLWriteFile)">
            <summary>
            Compare each single enumFile response with the writeFile request;
            </summary>
            <param name="other">requests that upload the file</param>
            <returns></returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.XRLEnumFilesResponse">
            <summary>
            enumFiles response
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.XRLGetQuota">
            <summary>
            This class is for get quota data from storage database
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.XRLGetQuota.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt64)">
            <summary>
            default constructor for XRLGetQuota
            normally will be used for negative test cases
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.XRLGetQuota.Execute(ServerTestFramework.LiveService.Storage.XRLGetQuotaResponse@)">
            <summary>
            send GetQuota request to stfd:11140 since it's a datacenter request
            </summary>
            <param name="Response"></param>
            <returns></returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.XRLGetQuotaResponse">
            <summary>
            This class is for XRLGetQuotaResponse
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.XRLNameResolver">
            <summary>
            Summary description for XRLNameResolver.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.XRLReadAchievements">
            <summary>
            This class is for download a file from storage database
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.XRLReadAchievements.Execute(ServerTestFramework.LiveService.Storage.XRLReadAchievementsResponse@)">
            <summary>
            Send XRLReadAchievements requests to the xstorage front door
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.XRLReadAchievements.Execute(System.Net.IPEndPoint,ServerTestFramework.LiveService.Storage.XRLReadAchievementsResponse@)">
            <summary>
            send XRLReadAchievements http request to storage front door and get the response back
            </summary>
            <param name="sServer">Storage front door</param>
            <param name="Response">XRLReadAchievements response</param>
            <returns></returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.XRLReadAchievementsResponse">
            <summary>
            This class is for XRLReadAchievementsResponse
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.XRLReadFile">
            <summary>
            This class is for download a file from storage database
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.XRLReadFile.#ctor">
            <summary>
            default constructor for XRLReadFile
            normally will be used for negative test cases
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.XRLReadFile.#ctor(System.String)">
            <summary>
            XRLReadFile constructor that takes one parameter
            </summary>
            <param name="pathName">pathName of the file that will be downloaded</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.XRLReadFile.Execute(ServerTestFramework.LiveService.Storage.XRLReadFileResponse@)">
            <summary>
            Send XRLReadFile requests to the xstorage front door
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.XRLReadFile.Execute(System.Net.IPEndPoint,ServerTestFramework.LiveService.Storage.XRLReadFileResponse@)">
            <summary>
            send XRLReadFile http request to storage front door and get the response back
            </summary>
            <param name="sServer">Storage front door</param>
            <param name="Response">XRLReadFile response</param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.XRLReadFile.Execute(System.Boolean,System.Net.IPEndPoint,ServerTestFramework.LiveService.Storage.XRLReadFileResponse@)">
            <summary>
            During stress, I found out it spend lots of time in deserializing when reading response
            since stress doesn't care the response, we will just ignore it for stress tests.
            </summary>
            <param name="sServer"></param>
            <param name="Response"></param>
            <returns></returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.XRLReadFileResponse">
            <summary>
            This class is for XRLReadFileResponse
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.XRLReadFileResponse.Compare(ServerTestFramework.LiveService.Storage.XRLWriteFile)">
            <summary>
            Compare the readFile response with the writeFile request;
            This method can be used to check if all columns are set up correctly
            in the database for upload file request
            </summary>
            <param name="other">requests that upload the file</param>
            <returns></returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.XRLRemoveFile">
            <summary>
            This class is for delete a file from storage database
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.XRLRemoveFile.#ctor(System.String,System.UInt32,System.String)">
            <summary>
            XRLRemoveFile constructor that takes two parameters
            </summary>
            <param name="pathName">pathName of the file that need to be removed</param>
            <param name="TitleID">titleID of the file that need to be removed</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.XRLRemoveFile.GenerateHttpHeader(System.Net.IPEndPoint,System.IO.MemoryStream)">
            <summary>
            If this is a dataCenter RemoveFile request,then we need append HTTPAuthData header
            </summary>
            <param name="endPoint"></param>
            <param name="reqStream"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.XRLRemoveFile.Execute">
            <summary>
            Send XRLRemoveFile http request to stfd
            </summary>
            <param name="sServer">storage front door</param>
            <returns></returns>
        </member>
        <member name="P:ServerTestFramework.LiveService.Storage.XRLRemoveFile.Server">
            <summary>
            Set or get Storage Front door
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.XRLReportBrokenLink">
            <summary>
            Summary description for XRLReportBrokenLink.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.XRLWriteFile">
            <summary>
            This class is used to upload a file to storage database
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.XRLWriteFile.#ctor">
            <summary>
            default constructor for XRLWriteFile
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.XRLWriteFile.#ctor(System.UInt32,System.UInt32,System.String,System.UInt64)">
            <summary>
            XRLWriteFile constructor that takes four parameters
            Can be used together with stats API to upload a file
            </summary>
            <param name="titleID">titleID of the upload file</param>
            <param name="uiFileSize">filesize of the upload file in byte</param>
            <param name="pathName">stats generated pathName of the upload file</param>
            <param name="UserPuid">userPUID that upload the file</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.XRLWriteFile.#ctor(System.String,System.String)">
            <summary>
            Tsunami testing: different domain has different permission type
            </summary>
            <param name="permissionType">None/All/Owner/Team/UserToken/ServiceToken/ServiceAddr</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.XRLWriteFile.Verify">
            <summary>
            connect to STDB to check columns that cannot be checked by ReadFileResponse
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.XRLWriteFile.GenerateHttpHeader(System.Net.IPEndPoint,System.IO.MemoryStream)">
            <summary>
            If this is a dataCenter WriteFile request,then we need append HTTPAuthData header
            </summary>
            <param name="endPoint"></param>
            <param name="reqStream"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.XRLWriteFile.Execute">
            <summary>
            send XRLWriteFile requests to the xstorage front door
            </summary>
            <param name="sServer"></param>
            <returns></returns>
        </member>
        <member name="P:ServerTestFramework.LiveService.Storage.XRLWriteFile.Server">
            <summary>
            Set or get Storage Front door
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.Azure.BlobClient">
            <summary>
            This class is used to retrieve or upload a file to Azure Storage
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.Azure.BlobTableClient">
            <summary>
            This class is used to retrieve or upload table data to Azure Storage
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.Azure.TableClient">
            <summary>
            This class is used to retrieve or upload table data to Azure Storage
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.Azure.BlobTableClient.GetStoragePath(System.UInt64,System.String,System.Guid)">
            <summary>
            Single location to use for calculating the Blob Path. If the Blob path changes in design
            it only needs to be changed here to avoid massive test updates. All tests should use these
            functions rather than calculating the path themselves
            </summary>
            <param name="xuid"></param>
            <param name="fileName"></param>
            <param name="transactionGuid"></param>
            <returns>String BlobPath for BlobStorage</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.Azure.BlobTableClient.GetSASUrl(System.String,System.String,System.UInt64,System.String,System.String,System.String)">
            <summary>
            Generates an SAS query URL that is equivalent to what the Client FrontDoor would return. 
            This URL can be used to directly download a file without needing any managed code
            </summary>
            <param name="storageUri"></param>
            <param name="container"></param>
            <param name="xuid"></param>
            <param name="fileName"></param>
            <param name="transactionId"></param>
            <param name="signature"></param>
            <returns>URL for direct file access using the provided SAS signature</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.Azure.BlobTableClient.GetListFromIEnumerable(System.Collections.Generic.IEnumerable{xonline.server.xlfs.common.BlobTableEntry})">
            <summary>
            Wrapper function to protect agains server exceptions. If the table has only been created with no entries
            the first Select will throw rather than return a null/empty list. Catch that error and return an empty list
            </summary>
            <param name="blobEnum">IEnumerable parameter result from query</param>
            <returns>IEnumerable.ToList()</returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.Azure.FileTableClient">
            <summary>
            This class is used to retrieve or upload table data to Azure Storage
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.Azure.FileTableClient.GetListFromIEnumerable(System.Collections.Generic.IEnumerable{xonline.server.xlfs.common.FileTableEntry})">
            <summary>
            Wrapper function to protect agains server exceptions. If the table has only been created with no entries
            the first Select will throw rather than return a null/empty list. Catch that error and return an empty list
            </summary>
            <param name="fileEnum">IEnumerable parameter result from query</param>
            <returns>IEnumerable.ToList()</returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.Azure.FileTableLastUpdateClient">
            <summary>
            This class is used to retrieve or upload table data to Azure Storage
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.Azure.FileTableLastUpdateClient.GetListFromIEnumerable(System.Collections.Generic.IEnumerable{xonline.server.xlfs.common.FileTableLastUpdateEntry})">
            <summary>
            Wrapper function to protect agains server exceptions. If the table has only been created with no entries
            the first Select will throw rather than return a null/empty list. Catch that error and return an empty list
            </summary>
            <param name="fileEnum">IEnumerable parameter result from query</param>
            <returns>IEnumerable.ToList()</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.Azure.FileTableLastUpdateClient.SelectCount(System.DateTime@,System.DateTime@)">
            <summary>
            Not recommended for large tables. Use the more efficient SelectCount providing a startDate to avoid using lots of memory
            The resultsSegment itself will "cache" older entries rather than freeing the memory after use.
            </summary>
            <param name="oldest">out param returning the Oldest record found (if records found). DateTime.UtcNow if no records found.</param>
            <param name="newest">out param returning the Newest record found. DateTime.UtcNow if no records found.</param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.Azure.FileTableLastUpdateClient.SelectCount(System.DateTime,System.DateTime@,System.DateTime@)">
            <summary>
            More efficient search (but slower) to find the total count and start and end DateTime for Performance test
            resuming. Avoids caching used by most of the managed code to avoid large memory use when the table size
            is large
            </summary>
            <param name="startSearch">DateTime to start searching forward from. Suggested is 1/1/2010</param>
            <param name="oldest">out param returning the Oldest record found (if records found).</param>
            <param name="newest">out param returning the Newest record found prior to startSearch. Max newest is DateTime.Maxvalue.</param>
            <returns></returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.Azure.QueueClient">
            <summary>
            This class is used to retrieve or upload queue data to Azure Storage
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.Azure.StorageAccountTableClient">
            <summary>
            This class is used to retrieve or upload table data to Azure Storage
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.Azure.StorageAccountTableClient.GetListFromIEnumerable(System.Collections.Generic.IEnumerable{xonline.server.xlfs.common.StorageAccountTableEntry})">
            <summary>
            Wrapper function to protect agains server exceptions. If the table has only been created with no entries
            the first Select will throw rather than return a null/empty list. Catch that error and return an empty list
            </summary>
            <param name="fileEnum">IEnumerable parameter result from query</param>
            <returns>IEnumerable.ToList()</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.Azure.XlfsWebRequest.GetCertificateBySubjectName(System.String,System.Boolean)">
            <summary>
            Retrieve a certificate from based on it's subject name
            </summary>
            <param name="certSubject">The subject name of the certificate to find</param>
            <param name="privateKeyRequired">If true, the certificate must have a private key</param>
            <returns>An instance of the certificate with the requested subject</returns>
            <remarks>
            This method checks in the CurrentUser store for the certificate.  If
            it's not found, it will check the LocalMachine store.
            </remarks>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.Azure.XlfsWebRequest.GetCertificateBySubjectName(System.String,System.Boolean,System.Security.Cryptography.X509Certificates.StoreLocation)">
            <summary>
            Retrieve a certificate from the specified certificate store based on
            it's subject name
            </summary>
            <param name="certSubject">The subject name of the certificate to find</param>
            <param name="privateKeyRequired">If true, the certificate must have a private key</param>
            <returns>An instance of the certificate with the requested subject</returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.Azure.XLFSClient">
            <summary>
            This class is used to retrieve or upload a file to XLFS Azure Storage
            
            See http://xblwiki/default.aspx/XboxLive/XboxLiveFileSystem.html for design
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.Azure.XLFSClient.ReadFile(System.UInt64,System.String,System.UInt32)">
            <summary>
            ReadFile to access the Cloud directly to read the file rather than the Admin FD
            Searches for the file accross all partitions (slow)
            </summary>
            <param name="xuid"></param>
            <param name="fileName"></param>
            <param name="titleID"></param>
            <returns>Stream to access the file in blob storage</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.Azure.XLFSClient.ReadFile(System.UInt64,System.String,System.UInt32,System.DateTime)">
            <summary>
            ReadFile to access the Cloud directly to read the file rather than the Admin FD
            This version will only search in a single partition for the file rather than accross all partitions
            </summary>
            <param name="xuid"></param>
            <param name="fileName"></param>
            <param name="titleID"></param>
            <param name="lastUpdate">UTC DateTime partition to search for the file</param>
            <returns>Stream to access the file in blob storage</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.Azure.XLFSClient.ReadFileProperties(System.UInt64,System.String,System.UInt32)">
            <summary>
            Read Properties to access the Cloud directly to read the file rather than the Admin FD
            </summary>
            <param name="xuid"></param>
            <param name="fileName"></param>
            <param name="titleID"></param>
            <returns>Stream to access the file in blob storage</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.Azure.XLFSClient.ReadFileMD5(System.UInt64,System.String,System.UInt32)">
            <summary>
            Read Properties to access the Cloud directly to read the file rather than the Admin FD
            </summary>
            <param name="xuid"></param>
            <param name="fileName"></param>
            <param name="titleID"></param>
            <returns>Stream to access the file in blob storage</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.Azure.XLFSClient.ReadFileTransactionId(System.UInt64,System.String,System.UInt32)">
            <summary>
            Read the transactionId specific to a FileEntry
            </summary>
            <param name="xuid"></param>
            <param name="fileName"></param>
            <param name="titleID"></param>
            <returns>Stream to access the file in blob storage</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.Azure.XLFSClient.WriteFile(System.UInt64,System.String,System.UInt32,System.IO.Stream)">
            <summary>
            WriteFile to simulate the Write done by the front door
            </summary>
            <param name="xuid"></param>
            <param name="fileName"></param>
            <param name="titleID"></param>
            <param name="fileStream"></param>
            <returns>bool indicating success if true</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.Azure.XLFSClient.WriteFile(System.UInt64,System.String,System.UInt32,System.String,System.DateTime,System.IO.Stream)">
            <summary>
            WriteFile to simulate the Write done by the front door
            </summary>
            <param name="xuid"></param>
            <param name="fileName"></param>
            <param name="titleID"></param>
            <param name="lastUpdate"></param>
            <param name="fileStream"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.Azure.XLFSClient.WriteFile(System.UInt64,System.String,System.String,System.UInt32,System.String,System.Int64,System.DateTime,System.IO.Stream)">
            <summary>
            Full Parameter suite to allow "incorrect" parameters (ex. rowKey filename not the same as the FileName column in the XUID table)
            </summary>
            <returns>bool indicating success if true</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.Azure.XLFSClient.RemoveFile(System.UInt64,System.String,System.UInt32)">
            <summary>
            Removes a file from storage.
            Searches accross all partitions and may be slow.
            </summary>
            <param name="xuid"></param>
            <param name="fileName"></param>
            <param name="titleID"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.Azure.XLFSClient.RemoveFile(System.UInt64,System.String,System.UInt32,System.DateTime)">
            <summary>
            Removes a file from XLFS Storage from a specific partition
            Faster search that only removes from a specific UTC DateTime partition
            </summary>
            <param name="xuid"></param>
            <param name="fileName"></param>
            <param name="titleID"></param>
            <param name="lastUpdate">UTC DateTime specifying the file partition to search</param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.Azure.XLFSClient.SafeRemoveFile(System.UInt64,System.String,System.UInt32)">
            <summary>
            "Safe" version of the function above that catches errors. Useful for test clean up when a failure to remove
            doesn't mean a test case failure.
            </summary>
            <param name="xuid"></param>
            <param name="fileName"></param>
            <param name="titleID"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.Azure.XLFSClient.SafeRemoveFile(System.UInt64,System.String,System.UInt32,System.DateTime)">
            <summary>
            "Safe" version of the function above that catches errors. Useful for test clean up when a failure to remove
            doesn't mean a test case failure.
            </summary>
            <param name="xuid"></param>
            <param name="fileName"></param>
            <param name="titleID"></param>
            <param name="lastUpdate"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.Azure.XLFSClient.ClearFileList">
            <summary>
            Iterates through all files in the file table removing the blob and table entry.
            Will be slow for large tables
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.Azure.XLFSClient.ClearFileList(System.DateTime,System.DateTime)">
            <summary>
            Iterates through all files in the file table removing the blob and table entry.
            Will be slow for large tables
            </summary>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.Azure.XLFSClient.ClearStorage">
            <summary>
            Fast clearing of storage rather than walking the File and Blob Tables
            Clears all blob storage that has containers that are valid titleIds
            and drops and recreates the Blob and File Tables
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.Azure.XLFSClient.WriteBlobFile(System.UInt64,System.String,System.String,System.UInt32,System.String,System.IO.Stream)">
            <summary>
            BlobTable is the "temporary" table for uploads to be stored during upload. UploadEnd() will move the entries to the FileTable
            The rowKey in this table is a Guid transaction ID
            </summary>
            <returns>bool indicating success if true</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.Azure.XlfsUploadBegin.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.Azure.XlfsUploadBegin.#ctor(ServerTestFramework.LiveService.Storage.Azure.XlfsUploadBegin)">
            <summary>
            Copy constructor.
            </summary>
            <param name="beginReq"></param>
        </member>
        <member name="M:xonline.server.xlfs.common.FileTableLastUpdateDataSource.Enum(System.DateTime,System.DateTime,System.Int32,System.Int32,Microsoft.WindowsAzure.StorageClient.ResultContinuation@)">
            <summary>
            Returns all of the files in the specified partition that match the given titleid
            </summary>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <param name="titleId"></param>
            <param name="maxResults"></param>
            <param name="continuationToken"></param>
            <returns></returns>
        </member>
        <member name="M:xonline.server.xlfs.common.FileTableLastUpdateDataSource.DeleteFileTableEntries(System.Collections.Generic.IEnumerable{xonline.server.xlfs.common.FileTableLastUpdateEntry})">
            <summary>
            Bulk-delete a bunch of rows from the FileTableLastUpdateEntry table.
            </summary>
            <param name="entries"></param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Matchmaking.MatchSessionMgr">
            <summary>
            MatchSessionMgr keeps track of all sessions created by Create and Split.
            It can then check the expected delay in time for a session ID to be deleted and
            verify the session no longer exists after that inverval has elapsed.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Matchmaking.MatchSessionMgr.sessionIdsByTitleId">
            <summary>
            Stores all registered sessions' IDs bucketed by Title ID
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.MatchSessionMgr.RegisterSession(System.UInt32,System.Int64)">
            <summary>
            RegisterSession stores the title and session IDs of a newly created/split session in order to 
            confirm the session's subsequent deferred deletion
            </summary>
            <param name="titleId">The title ID; used to get the expected delete delay seconds for this session ID</param>
            <param name="sessionId">The newly created or split session ID</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.MatchSessionMgr.VerifyAllSessionsDeleted">
            <summary>
            Verifies all sessions registered via RegisterSession() get cleaned up.
            </summary>
            <returns>true: all sessions were cleaned up; false: a session existed after it should have been deleted</returns>
        </member>
        <member name="P:ServerTestFramework.LiveService.Matchmaking.MatchSessionMgr.RegisteredSessionsCount">
            <summary>
            Returns the total number of sessions registered with the session manager
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Matchmaking.MatchSessionMgr.SessionIdList">
            <summary>
            Makes the code in this class a little more legible, otherwise adds nothing new to the conversation
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Matchmaking.XRLxnaddr">
            <summary>
            Summary description for XRLxnaddr.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Matchmaking.Constants.X_ATTRIBUTE_SESSION_ID">
            <summary>
            The following const are system defined context/properties
            </summary>		
        </member>
        <member name="F:ServerTestFramework.LiveService.Matchmaking.Constants.CONTEXT_MYCONTEXT1">
            <summary>
            The following const are copied from xenonmatchTest.spa.h file
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.Constants.getNumDBForTitle(System.UInt32)">
            <summary>
            return the number of database that a particular title resides
            </summary>
            <param name="titleID"></param>
            <returns></returns>
        </member>
        <member name="F:ServerTestFramework.LiveService.Matchmaking.MatchUtil.verifySessionExistsCmd">
            <summary>
            SQL statement template for determining if a session exists in a particular table
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.MatchUtil.CalculateOffsets(System.UInt32,ServerTestFramework.LiveService.Matchmaking.XrlAttributeBase[],System.UInt32[]@,System.UInt32@)">
            <summary>
            Calculate a set of offsets given a base message size and collection of attributes.
            The total message size is and offset collection are returned as out parameters.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.TitleCrossPlatformRevoker.Restore">
            <summary>
            Unlocked should restore a Title ID to it's original cross-platform revocation setting.
            Currently it sets the cross-platform revocation setting to NULL (x-plat allowed).
            If Lock() was not called first, calling Unlock() is a no-op.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.MatchTitleMgr.GetMatchTitle(System.UInt32)">
            <summary>
            Retrieves a single match title's info from NPDB
            </summary>
            <param name="titleId">A valid Match title ID (i.e. defined in the npdb.dbo.t_match_titles table)</param>
            <returns>An instance of MatchTitle initialized with the values retrieve from the NPDB server</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ServerTestFramework.LiveService.Matchmaking.MatchTitleMgr.GetMatchTitles" -->
        <!-- Badly formed XML comment ignored for member "M:ServerTestFramework.LiveService.Matchmaking.MatchTitleMgr.GetMatchTitlesByIds(System.Collections.IEnumerable)" -->
        <member name="T:ServerTestFramework.LiveService.Matchmaking.XRLXeAttribParam">
            <summary>
            This class is used to represent both attributes in schema AND
            search parameters in the search requests.
            In Xenon: 
            Search Parameters:	int32/int64/float32/float64/dateTime are allowed, while string and blobs are not.
            Session Attributes: string/int32/int64/float32/float64/dateTime/null are allowed, blobs are not.
            Search Results: same as Session Attributes.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Matchmaking.XRLXeIntValue">
            <summary>
            can be used represent both int32 and int64 values
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLXeIntValue.#ctor(System.Int64)">
            <summary>
            create an intParam with specified value
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLXeFloatValue.#ctor(System.Single)">
            <summary>
            create an intParam with specified value
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLXeDoubleValue.#ctor(System.Double)">
            <summary>
            create an intParam with specified value
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLXeStringValue.#ctor(System.String)">
            <summary>
            create a stringParam with specified string value
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLXeDateTimeValue.#ctor(System.Int64)">
            <summary>
            create an intParam with specified value
            </summary>
            <param name="val"></param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Matchmaking.XRLXeAttribParamWeighted">
            <summary>
            This class is basically a copy of XRL2AttribParam.  It could inherit, except that all the
            logic is really in constructors, and the write/readstream can't be reused either.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Matchmaking.XRL2CreateUpdateSession">
            <summary>
            Since WireData doesn't support inheritance (it doesn't serialize parent class's fields),
            Instead of inheriting from XRLCreateUpdateSession, we create a wrapper of that
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRL2CreateUpdateSession.#ctor">
            <summary>
            create session with 9 mandatory session attributes.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRL2CreateUpdateSession.#ctor(ServerTestFramework.LiveService.Matchmaking.XRLXeAttribParam[])">
            <summary>
            create session with provided attributes: this might or might not have the above 8 default attribs
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRL2CreateUpdateSession.#ctor(System.Byte[])">
            <summary>
            update session constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRL2CreateUpdateSession.RetrieveCurrentValue(ServerTestFramework.LiveService.Matchmaking.XRLXeAttribParam)">
            <summary>
            Fills in the given XRLXeAttribParam with the value of the current one, if it exists.
            Leaves it unchanged otherwise.
            </summary>
            <param name="attribToFind">An XRLXeAttribParam to look for, and fill with the value.</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRL2CreateUpdateSession.FindAttrib(ServerTestFramework.LiveService.Matchmaking.XRLXeAttribParam)">
            <summary>
            Find a single attribute with the given parameter.  Does not use the passed-in value of
            that attribute.
            </summary>
            <param name="attribToFind">An XRLXeAttribParam to look for</param>
            <returns>A handle to the XRLXeAttribParam that currently exists and matches the name of the
            passed-in attribute.  Think before assigning to this!  Returns null if none is found.</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRL2CreateUpdateSession.UpdateAttrib(ServerTestFramework.LiveService.Matchmaking.XRLXeAttribParam)">
            <summary>
            Updates a single attribute.  Unlike UpdateAttribs(), the attribute must be found in the
            base attribs array
            </summary>
            <param name="updateAttrib"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRL2CreateUpdateSession.Execute(System.Net.IPEndPoint,ServerTestFramework.LiveService.Matchmaking.XRLSessionInfo@)">
            <summary>
            send createSession requests
            </summary>
            <param name="sServer"></param>
            <param name="Response"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRL2CreateUpdateSession.BeginExecute(System.Net.IPEndPoint,System.AsyncCallback)">
            <summary>
            Send CreateSession requests asynchronously.
            </summary>
            <param name="sServer"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRL2CreateUpdateSession.Execute(System.Net.IPEndPoint)">
            <summary>
            send updateSession requests
            </summary>
            <param name="sServer"></param>
            <returns></returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.Matchmaking.XRL2DeleteSession">
            <summary>
            counterPart for XMATCH_DELETE_SESSION
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRL2DeleteSession.#ctor(System.Byte[],System.UInt32)">
            <summary>
            delete session with specified sessionID
            </summary>
            <param name="sessID"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRL2DeleteSession.BeginExecute(System.Net.IPEndPoint,System.AsyncCallback)">
            <summary>
            send deleteSession request to matchmaking front door
            </summary>
            <param name="sServer">matchmaking front door</param>
            <returns></returns>
        </member>
        <member name="F:ServerTestFramework.LiveService.Matchmaking.XRL2SearchSession.AlternatePresenceUrl">
            <summary>
            This is being used for stress test: redirect queryAffiliate call to presence emulator
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Matchmaking.XRL2SearchSession.spoofSchemaVersionNumber">
            <summary>
            This allows you to specify a version to write into the custom header.  This is separate from the
            version that it actually is, allowing you to advertise as this version, but send
            data as a different one.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRL2SearchSession.AddParams(ServerTestFramework.LiveService.Matchmaking.XRLXeAttribParam[])">
            <summary>
            append search parameters at the end of search requests
            </summary>
            <param name="Params"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRL2SearchSession.FindAttrib(ServerTestFramework.LiveService.Matchmaking.XRLXeAttribParam)">
            <summary>
            Find a single attribute with the given parameter.  Does not use the passed-in value of
            that attribute.
            </summary>
            <param name="attribToFind">An XRLXeAttribParam to look for</param>
            <returns>A handle to the XRLXeAttribParam that currently exists and matches the name of the
            passed-in attribute.  Think before assigning to this!  Returns null if none is found.</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRL2SearchSession.Execute(System.Boolean,System.Net.IPEndPoint,ServerTestFramework.LiveService.Matchmaking.XRL2SearchResults@)">
            <summary>
            For stress testing, we don't care what's being returned in the results
            </summary>
            <param name="stress"></param>
            <param name="sServer"></param>
            <param name="Response"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRL2SearchSession.BeginExecute(System.Net.IPEndPoint,System.AsyncCallback)">
            <summary>
            For stress testing, we don't care what's being returned in the results.  This version is
            async, so we can send requests even more aggressively.
            </summary>
            <param name="stress"></param>
            <param name="sServer"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRL2SearchSession.EndExecute(System.IAsyncResult,ServerTestFramework.LiveService.Matchmaking.XRL2SearchResults@)">
            <summary>
            Tha matching EndExecute for the BeginExecute.  Call this to complete a request started
            via BeginExecute.
            </summary>
            <param name="ar"></param>
            <param name="Response"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRL2SearchSession.Execute(System.Net.IPEndPoint,System.UInt32,ServerTestFramework.LiveService.Matchmaking.XRLXeAttribParam[],ServerTestFramework.LiveService.Matchmaking.XRL2SearchResults@)">
            <summary>
            send searchSession http request to matchmaking front door and get results back
            This one is used by functional test to check search results' details.
            </summary>
            <param name="sServer">matchmaking front door</param>
            <param name="dwExpectedNumResults">expected number of sessions in the searchResults</param>
            <param name="ExpectedAttribs">expected number of attributes in the returned session</param>
            <param name="Response">actual response got back from match servers</param>
            <returns></returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.Matchmaking.XRLIntAttribute">
            <summary>
            int attribute when creating or updating a session
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLIntAttribute.#ctor(System.UInt32,System.Int64)">
            <summary>
            XRLIntAttribute constructor
            </summary>
            <param name="attribID"></param>
            <param name="attribValue"></param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Matchmaking.XRLStringAttribute">
            <summary>
            string attribute when creating or updateing a session
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLStringAttribute.#ctor(System.UInt32,System.String)">
            <summary>
            XRLStringAttribute constructor
            </summary>
            <param name="attribID"></param>
            <param name="attribValue"></param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Matchmaking.XRLBlobAttribute">
            <summary>
            blob attribute when creating or updating a session
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLBlobAttribute.#ctor(System.UInt32,System.Byte[])">
            <summary>
            XRLBlobAttribute constructor
            </summary>
            <param name="attribID"></param>
            <param name="attribValue"></param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Matchmaking.XRLBaseSession">
            <summary>
            basic fields of createSession request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Matchmaking.XRLCreateUpdateSession">
            <summary>
            counterPart of XMATCH_SESSION
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLCreateUpdateSession.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLCreateUpdateSession.Execute(System.Net.IPEndPoint,ServerTestFramework.LiveService.Matchmaking.XRLSessionInfo@)">
            <summary>
            send CreateSession requests to matchmaking front door
            </summary>
            <param name="sServer">matchmaking front door</param>
            <param name="Response">createSession response</param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLCreateUpdateSession.Execute(System.Net.IPEndPoint)">
            <summary>
            send updateSession request to matchmaking front door
            </summary>
            <param name="sServer">matchmaking front door</param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLCreateUpdateSession.AddAttribs(ServerTestFramework.WireData[])">
            <summary>
            append title attributes at the end of create/updateSession requests
            </summary>
            <param name="attribs"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLCreateUpdateSession.SetAttribs(ServerTestFramework.WireData[])">
            <summary>
            Change the attributes of a session object
            </summary>
            <param name="attribs"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLCreateUpdateSession.AppendAttribs(ServerTestFramework.LiveService.Matchmaking.XrlAttributeBase[])">
            <summary>
            append title attributes at the end of create/updateSession requests
            </summary>
            <param name="attribs"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLCreateUpdateSession.GetAttribute(System.UInt32)">
            <summary> 
            Retrieve an attribute wiredata based on the ID
            </summary>
            <param name='attributeId'>Match AttributeID to retrieve</param>
            <returns>Attribute wiredata object or null if none exists</returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.Matchmaking.XRLSessionInfo">
            <summary>
            counterPart for XMATCH_SESSIONINFO
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Matchmaking.XRLDeadXBox">
            <summary>
            counterPart for XMATCH_DEAD_XBOX
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLDeadXBox.#ctor">
            <summary>
            create a deadxbox request with random values
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLDeadXBox.Execute(System.Net.IPEndPoint)">
            <summary>
            send individual deadxbox request to matchmaking front door
            </summary>
            <param name="sServer">matchmaking front door</param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLDeadXBox.BeginExecute(System.Net.IPEndPoint,System.AsyncCallback)">
            <summary>
            send individual deadxbox request to matchmaking front door asynchronously
            </summary>
            <param name="sServer">matchmaking front door</param>
            <returns></returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.Matchmaking.XRLDeleteSession">
            <summary>
            counterPart for XMATCH_DELETE_SESSION
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLDeleteSession.#ctor(System.Byte[])">
            <summary>
            delete session with specified sessionID
            </summary>
            <param name="sessID"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLDeleteSession.Execute(System.Net.IPEndPoint)">
            <summary>
            send deleteSession request to matchmaking front door
            </summary>
            <param name="sServer">matchmaking front door</param>
            <returns></returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.Matchmaking.XRLAttribParam">
            <summary>
            This class is used to represent BOTH session attributes returned in search Results
            AND search parameters in the search requests
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLIntParam.#ctor(System.Int64)">
            <summary>
            create an intParam with specified value
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLStringParam.#ctor(System.String)">
            <summary>
            create a stringParam with specified string value
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLBlobParam.#ctor(System.Byte[])">
            <summary>
            create a blob parameter with specified blob value
            </summary>
            <param name="val"></param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Matchmaking.XRLBaseSearchSession">
            <summary>
            basic fields of search session request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Matchmaking.XRLSearchSession">
            <summary>
            counter part of XMATCH_SEARCH_SESSION
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLSearchSession.#ctor(System.UInt32)">
            <summary>
            create a search session request with specified spIndex
            </summary>
            <param name="spIndex">stored procedure index that used for search request</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLSearchSession.AddParams(ServerTestFramework.LiveService.Matchmaking.XRLAttribParam[])">
            <summary>
            append search parameters at the end of search requests
            </summary>
            <param name="Params"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLSearchSession.Execute(System.Net.IPEndPoint,ServerTestFramework.LiveService.Matchmaking.XRLSearchResults@)">
            <summary>
            send searchSession http request to match front door and get response
            This one assumes nothing about search results. i.e. it works for both
            returned session with and without attributes.
            So it can be used by both functional and stress tests
            </summary>
            <param name="sServer">matchmaking front door</param>
            <param name="Response">search result</param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLSearchSession.Execute(System.Boolean,System.Net.IPEndPoint,ServerTestFramework.LiveService.Matchmaking.XRLSearchResults@)">
            <summary>
            For stress test, we don't care what's being returned in the search results
            </summary>
            <param name="sServer"></param>
            <param name="Response"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLSearchSession.Execute(System.Net.IPEndPoint,System.UInt32,ServerTestFramework.WireData[],ServerTestFramework.LiveService.Matchmaking.XRLSearchResults@)">
            <summary>
            send searchSession http request to matchmaking front door and get results back
            This one is used by functional test to check search results' details.
            </summary>
            <param name="sServer">matchmaking front door</param>
            <param name="dwExpectedNumResults">expected number of sessions in the searchResults</param>
            <param name="ExpectedAttribs">expected number of attributes in the returned session</param>
            <param name="Response">actual response got back from match servers</param>
            <returns></returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.Matchmaking.XRLSingleSearchResult">
            <summary>
            counterPart of XMATCH_SEARCH_RESULT
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Matchmaking.XRLSearchResults">
            <summary>
            XMATCH_SEARCHRESULT_HEADER + sessions returned
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Matchmaking.XRLSplitSession">
            <summary>
            XRL for splitting a session during host migration
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLSplitSession.#ctor(System.Byte[],System.UInt32,ServerTestFramework.LiveService.Matchmaking.XRLxnaddr,ServerTestFramework.WireData[])">
            <summary>
            create session with 9 mandatory session attributes.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLSplitSession.#ctor(ServerTestFramework.LiveService.Matchmaking.XRL2CreateUpdateSession)">
            <summary>
            create session with 9 mandatory session attributes.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLSplitSession.Execute(System.Net.IPEndPoint,ServerTestFramework.LiveService.Matchmaking.XRL2SingleSearchResult@)">
            <summary>
            Send SplitSession request
            </summary>
            <param name="sServer"></param>
            <param name="Response"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLSplitSession.BeginExecute(System.Net.IPEndPoint,System.AsyncCallback)">
            <summary>
            Send SplitSession request asynchronously
            </summary>
            <param name="sServer"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.Matchmaking.XRLTitleChange">
            <summary>
            Xenon: 1st new API for Xenon
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLTitleChange.Execute(System.Net.IPEndPoint)">
            <summary>
            send individual deadxbox request to matchmaking front door
            </summary>
            <param name="sServer">matchmaking front door</param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLTitleChange.BeginExecute(System.Net.IPEndPoint,System.AsyncCallback)">
            <summary>
            send individual deadxbox request to matchmaking front door
            </summary>
            <param name="sServer">matchmaking front door</param>
            <returns></returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.StringServer.XRLAddString">
            <summary>
            Summary description for XRLAddString.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.StringServer.XRLGetString">
            <summary>
            Summary description for XRLGetString.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.StringServer.XRLTitleIDRequest">
            <summary>
            Summary description for XRLTitleIDRequest.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.StringServer.XRLLogString">
            <summary>
            Summary description for XRLLogString.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.StringServer.XRLLogBinary">
            <summary>
            Summary description for XRLLogString.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.StringServer.XRLVetString">
            <summary>
            Summary description for XRLVetString.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.GI.Pong">
            Context and properties that are exposed for the pong
            test title ID.
        </member>
        <member name="T:ServerTestFramework.LiveService.GI.Pong.Context">
            Context IDs used for creating contexts
            see named enums below for context values.
        </member>
        <member name="M:ServerTestFramework.LiveService.Diagnostics.SendablePacket.GenerateRandomString(System.Int32)">
            <summary>
            Generate a random string of characters
            </summary>
            <param name="size">Lenght of string</param>
            <returns></returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.Diagnostics.CReflectionRequest">
             <summary>
             Summary description for CReflectionRequest.
            
            
             </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Diagnostics.CReflectionRequest.#ctor(System.UInt16,System.UInt16,System.UInt16,System.String)">
            <summary>
            Reflection Request, use this constructor for making bad packets
            </summary>
            <param name="pv">Protocol version</param>
            <param name="rt">Request type</param>
            <param name="rps">Return packet size</param>
            <param name="pl">Payload</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Diagnostics.CReflectionRequest.#ctor(System.UInt16,System.String)">
            <summary>
            Reflection Request, simple constructor
            </summary>
            <param name="rt">Request type</param>
            <param name="pl">Payload</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Diagnostics.CReflectionRequest.#ctor(System.UInt16,System.Int32)">
            <summary>
            Reflection Request, simple constructor
            </summary>
            <param name="rt">Request type</param>
            <param name="payloadsize">Payload size, automatically generates a random string</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Diagnostics.CReflectionRequest.#ctor(System.Int32)">
            <summary>
            Reflection Request, even simpler constructor
            </summary>
            <param name="payloadsize">Payload size, automatically generates a random string</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Diagnostics.CICMPRequest">
             <summary>
             Summary description for CICMPRequest.
            
            
             </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Diagnostics.CICMPRequest.#ctor(System.UInt16,System.UInt16,System.Byte[],System.UInt64,System.UInt32)">
            <summary>
            ICMP Request constructor, use this for making bad packets
            </summary>
            <param name="pv">Protocol version</param>
            <param name="rt">Request type</param>
            <param name="signature">Signature</param>
            <param name="ts">Timestamp</param>
            <param name="packetsize">Packet size</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Diagnostics.CICMPRequest.#ctor(ServerTestFramework.LiveService.Diagnostics.CReflectionReply)">
            <summary>
            ICMP Request, simple constructor
            </summary>
            <param name="reply">Reply packet from a Reflection Request call</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Diagnostics.CICMPRequest.SetTimestamp(System.Byte[],System.UInt64)">
            <summary>
            Both parameters must come from a CReflectionReply message
            </summary>
            <param name="signature"></param>
            <param name="timestamp"></param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Diagnostics.CReflectionReply">
             <summary>
             Reply packet for Reflection request
            
            
             </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Cleanser.InjectEvent(ServerTestFramework.STFLive.Reporting.ReportingEventType,ServerTestFramework.STFLive.Reporting.ReportingReferenceObject@)">
            <summary>
            API to inject an event
            </summary>
            <param name="type"></param>
            <param name="reportingRefObject"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Cleanser.InjectNextEvent(ServerTestFramework.STFLive.Reporting.ReportingEventType,ServerTestFramework.STFLive.Reporting.ReportingReferenceObject@)">
            <summary>
            API that injects the next event in a series of events
            </summary>
            <param name="type"></param>
            <param name="reportingRefObject"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Cleanser.GetIntPerformanceCounter(System.String)">
            <summary>
            Gets a performance counter that is an integer
            </summary>
            <param name="Counter"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Cleanser.GetFloatPerformanceCounter(System.String)">
            <summary>
            Gets a performance counter that is a floating point number
            </summary>
            <param name="Counter"></param>
            <returns></returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Cleanser.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Cleanser.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.CleanserConnection">
            <summary>
            Encapsulates a connection to the cleanser using the cleanser protocol. Simulates the ReportConnection
            object used by the XomLog system during regular logging from service components. The exception is that
            this class does not simulate the async IO ReportConnection uses. This class is also not threadsafe.
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.CleanserConnection.GetFirstCleanser">
            <summary>
            Helper function to get the remote endpoint of the first available cleanser
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.CleanserConnection.GetVirutalInterface">
            <summary>
            Helper function to find the cleanserinh vip endpoint
            </summary>
            <returns></returns>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.MessageType">
            <summary>
            All currently known messages types fro npdb t_messages table as of 2/25/08
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.MessageGenerator">
            <summary>
            Creates messages for all supported types in the current cleanser.
            These messages are generated from a combination of looking at service source code, 
            the old verification tests, and logs from various production servers.
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.MessageGenerator.LoadComponentToServiceMap">
            <summary>
            Connects to NPDB and loads the componentID for each messageid. This is needed so that when 
            messages are sent to the cleanser we are sending them from the right component (spoofed). If this
            is not done, the cleanser is designed to reject the message.
            Note that this function is only ever called once per instance of the singleton (aka once per process)
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.MessageGenerator.MessageToServiceComponentType(ServerTestFramework.STFLive.Reporting.MessageType)">
            <summary>
            Allows a client to resolve the correct component that a message should come from
            </summary>
            <param name="mt"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ServerTestFramework.STFLive.Reporting.MessageGenerator.BuildContentRefMessage(System.UInt64)" -->
        <member name="M:ServerTestFramework.STFLive.Reporting.MessageGenerator.BuildSNDMessage(System.UInt64)">
            <summary>
            Build an SND message from a prototype found in production logs
            </summary>
            <param name="puid"></param>
            <returns></returns>
            //Tested
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.MessageGenerator.BuildArgoLicenseMsg(System.UInt64)">
            <summary>
            Builds an ARGOLICENSE MESSAGE
            Results in a call to p_add_video_license on FilterDB that inserts into t_video_license_fact
            </summary>
            <param name="puid"></param>
            <returns></returns>
            //Tested
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.MessageGenerator.BuildSGADDMMsg(System.UInt64)">
            <summary>
            Builds an SGADDM Message
            </summary>
            <param name="puid"></param>
            <returns></returns>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportingMachines">
            <summary>
            The current machines that are in some way involved in reporting
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingMachines.Uninitialized">
            <summary>
            Uninitialized value
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingMachines.Client">
            <summary>
            Client - Source for most server side events
            Hey, I can dream, can't I?
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingMachines.Xbos">
            <summary>
            XBOS -
            Content Referral, Argo Licensing, etc.
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingMachines.Xuacs">
            <summary>
            XUACS -
            
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingMachines.Xcbk">
            <summary>
            XCBK -
            Account Provisioning/Deprovisioning
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingMachines.PresenceINH">
            <summary>
            Presence -
            TitleStart/TitleEnd, SessionStart/SessionEnd, GuestChanges, Messaging
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingMachines.StringSvr">
            <summary>
            StringServer -
            Fusion, Banner Click/View/Purchase
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingMachines.WMIS">
            <summary>
            WMIS -
            All argo related metadata
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingMachines.UODB">
            <summary>
            UODB -
            All user related data, achievements, etc.
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingMachines.ProductDB">
            <summary>
            ProductDB -
            All product data, offers, etc.
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingMachines.Cleanser">
            <summary>
            Cleanser -
            Server where all of the INH/Frontdoor data is collected
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingMachines.SSIS">
            <summary>
            SSIS -
            Server where all of the UODB and WMIS data is collected
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingMachines.Filter">
            <summary>
            FilterDB, distribution location for data passing through the cleansers
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingMachines.Reporting">
            <summary>
            Main reporting database
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingMachines.OLAP">
            <summary>
            Main aggregation database
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingMachines.Rosetta">
            <summary>
            IIS Server that serves out reports
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingMachines.Archive">
            <summary>
            Archive database for the reporting database
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingMachines.Realtime">
            <summary>
            Realtime reports database
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.XBLReports">
            <summary>
            Xbox Live Reports
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportingCommon">
            <summary>
            Main class for reporting test code
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingCommon.ClearInstance(System.Boolean)">
            <summary>
            Clears the current singleton
            Should ONLY be done at the beginning of a test group
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingCommon.FindObjectByInterface(System.String)">
            <summary>
            Find the component object (Ex. ReportingDatabase) given an interface name.
            </summary>
            <param name="iFace">Interface name (Ex. reportingdb)</param>
            <returns>A list of all components related to that interface or an empty list if no components were found</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingCommon.Instance">
            <summary>
            Returns the singleton for this class
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingCommon.ReportingDB">
            <summary>
            A reference to the reportingDB
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingCommon.ReportingSSISDB">
            <summary>
            A reference to the SSISDB
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingCommon.ReportingArchiveDB">
            <summary>
            A reference to the Archive DB
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingCommon.ReportingOLAPDB">
            <summary>
            A reference to the OLAPDB
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingCommon.ReportingIIS">
            <summary>
            A reference to the ReportIIS - Report Service
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingCommon.RealtimeDB">
            <summary>
            A reference to the ReportingRealtime database
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingCommon.FilterDBs">
            <summary>
            A reference to ALL of the filterdbs
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingCommon.Cleansers">
            <summary>
            A reference to ALL of the cleansers
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportingData">
            <summary>
            A reference object class representing a data set
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingData.Source">
            <summary>
            Data source: UODB, SSIS, ReportingDB, etc
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingData.ObjectType">
            <summary>
             Get ReportingData object type
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingData.DataType">
            <summary>
            Get internal data type (Queries, Raw, Counts)
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingData.Queries">
            <summary>
            List of queries
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingData.RawData">
            <summary>
            Raw object data (Caller must know how to cast the data)
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingData.TableCounts">
            <summary>
            ReportingData is a series of tables and respective row counts
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportingData.InternalDataType">
            <summary>
            This classifies the data that a ReportingData object contains
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingData.InternalDataType.Query">
            <summary>
             ReportingData object is a query or set of queries
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingData.InternalDataType.RawData">
            <summary>
            ReportingData object contains raw data
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingData.InternalDataType.TableCounts">
            <summary>
            ReportingData object contains a set of tables and respective rowcounts
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportingDataLoader">
            <summary>
            A class containing the logic necessary to load data for a particular type of data
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingDataLoader.InjectSingleData">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportingEvent">
            <summary>
            A reference object representing an individual event
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingHelper.fn_get_i_time(System.DateTime)">
            <summary>
            fn_get_i_time 
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingHelper.fn_get_dt_datetime(System.Int32,System.Int32)">
            <summary>
            fn_get_dt_time 
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingHelper.fn_get_i_date(System.DateTime)">
            <summary>
            fn_get_i_date 
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingHelper.fn_get_dt_date(System.Int32)">
            <summary>
            fn_get_dt_date 
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingHelper.GetTopContent(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            API to get single row from a table
            </summary>
            <param name="sProvider"> SQLDataProvider </param>
            <param name="szTable"></param>
            <returns> SqlDataReader </returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingHelper.GetTopContent(ServerTestFramework.STFLive.Reporting.ReportingDatabase,System.String)">
            <summary>
            API to get single row from a table
            </summary>
            <param name="sProvider"> SQLDataProvider </param>
            <param name="szTable"></param>
            <returns> SqlDataReader </returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingHelper.GetContent(System.Data.SqlClient.SqlConnection,System.String,System.Collections.ArrayList)">
            <summary>
            API to get single row from a table with conditions
            </summary>
            <param name="sProvider"> SQLDataProvider </param>
            <param name="szTable"></param>
            <param name="aList"> ArrayList of ColumnInfo </param>
            <returns> SqlDataReader </returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingHelper.CompareSingleRow(System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>
            CompareSingleRow 
            Compare a row in two tables column by column
            Currently it only cares about Byte, Int16, Int32, Int64, Boolean and String type
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingHelper.FillColumnInfo(System.Data.SqlClient.SqlDataReader)">
            <summary>
            FillColumnInfo 
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingHelper.GetArgumentString(System.Xml.XmlDocument,System.String)">
            <summary>
            GetArgumentString 
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingHelper.GetArgumentInt(System.Xml.XmlDocument,System.String)">
            <summary>
            GetArgumentInt 
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingHelper.GetArgumentBool(System.Xml.XmlDocument,System.String)">
            <summary>
            GetArgumentBool 
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingHelper.CollectionCompare_Equal(System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Compare if two collections are equal. They are considered equal if they have the same number
            of objects and all objects from Data1 are present in Data2
            </summary>
            <param name="Data1">First Name/Value Collection</param>
            <param name="Data2">Second Name/Value Collection</param>
            <returns>True if the 2 sets of data are equal. False for everything else</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingHelper.CollectionCompare_Different(System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Compare if two collections are different. They are considered different if they have the different number
            of objects or objects from Data1 are not present in Data2
            </summary>
            <param name="Data1">First Name/Value Collection</param>
            <param name="Data2">Second Name/Value Collection</param>
            <returns>True if the 2 sets of data are different. False for everything else</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingHelper.CollectionNoRepeatedValues(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Compare the values of a collection against each other to find if any are repeated
            </summary>
            <param name="Data1">Name/Value Collection</param>
            <returns>True if the set of data has repeated values. False for everything else</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingHelper.CollectionCompare_DataPresent(System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Compare if all the elements from Data1 are present in Data2. Note that this DOES NOT mean they are equal
            </summary>
            <param name="Data1">First Name/Value Collection</param>
            <param name="Data2">Second Name/Value Collection</param>
            <returns>True if ALL elements from Data1 are present in Data2 (This does not mean that Data1 = Data2)</returns>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportingHelper.ColumnInfo">
            <summary>
            ColumnInfo 
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DateRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor for DateRange. Set dateMin and dateMax values.
            </summary>        
            <param name="minus">Delta to subtract from current time in seconds</param>
            <param name="plus">Delta to add to current time in seconds</param>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DateRange.#ctor(System.DateTime,System.Int32,System.Int32)">
            <summary>
            Constructor for DateRange. Set dateMin and dateMax values.
            </summary>
            <param name="Seed">Initial Time</param>
            <param name="minus">Delta to subtract from current time in seconds</param>
            <param name="plus">Delta to add to current time in seconds</param>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DateRange.Reset">
            <summary>
            Recenters the date range around the current time.
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DateRange.Reset(System.DateTime)">
            <summary>
            Recenters the date range around the time in 'Seed'
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.TestRefObject">
            <summary>
            Basic Reporting Ref object test class
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.TestRefObject.RunDebugQuery">
            <summary>
            Return RefObject Debug Query
            </summary>
            <returns></returns>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportingJobStatus">
            <summary>
            Job Status
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportingJob">
            <summary>
            
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingJob.m_SQLJob">
            <summary>
            Using .NET built-in Job class internally
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingJob.m_Completed">
            <summary>
            
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingJob.m_HResult">
            <summary>
            
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingJob.m_JobType">
            <summary>
            Job Type
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingJob.m_Parameters">
            <summary>
            Job parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingJob.RunJob">
            <summary>
            Execute the job
            </summary>
            <returns>The constructed SQL script to execute the job</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingJob.StopJob">
            <summary>
            Stop the job if it's currently executing
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingJob.UpdateStatus">
            <summary>
            Update job status
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingJob.InvokeJob">
            <summary>
            Execute the job
            </summary>
            <returns>JobExecutionStatus</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingJob.Completed">
            <summary>
            
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingJob.HResult">
            <summary>
            
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingJob.Results">
            <summary>
            The results of this job
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingJob.StartTime">
            <summary>
            When the job was started
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingJob.RunningTime">
            <summary>
            How long it took this job to run
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingJob.ServerName">
            <summary>
            Name of Server the job runs in
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingJob.JobName">
            <summary>
            Name of the job
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingJob.JobSteps">
            <summary>
            Job Steps
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingJob.Parameters">
            <summary>
            Job Parameters
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportingJobParameters">
            <summary>
            Placeholder class, you cast from this class to your expected job parameters.
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingJobFactory.m_Instance">
            <summary>
            Create a singleton class
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingJobFactory.m_ReportingJobs">
            <summary>
            Contains all reporting jobs in this test run
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingJobFactory.#ctor">
            <summary>
            Constructor
            The class is a singleton because it serves as a central datastore for all jobs in a test run
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingJobFactory.ClearInstance">
            <summary>
            Clears the current singleton        
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingJobFactory.CreateReportingJob(ServerTestFramework.STFLive.Reporting.ReportingJobType,ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Factory method
            </summary>
            <param name="reportingJobType"></param>
            <param name="reportingJobParams"></param>
            <returns></returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingJobFactory.Instance">
            <summary>
            Returns the singleton for this class
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ReportingService">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.#ctor(System.String)">
            Reporting Service constructor
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListSecureMethods">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginListSecureMethods(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndListSecureMethods(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListSecureMethodsAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListSecureMethodsAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateBatch">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginCreateBatch(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndCreateBatch(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateBatchAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateBatchAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CancelBatch">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginCancelBatch(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndCancelBatch(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CancelBatchAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CancelBatchAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ExecuteBatch">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginExecuteBatch(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndExecuteBatch(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ExecuteBatchAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ExecuteBatchAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetSystemProperties(ServerTestFramework.STFLive.Reporting.Service.Property[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginGetSystemProperties(ServerTestFramework.STFLive.Reporting.Service.Property[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndGetSystemProperties(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetSystemPropertiesAsync(ServerTestFramework.STFLive.Reporting.Service.Property[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetSystemPropertiesAsync(ServerTestFramework.STFLive.Reporting.Service.Property[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetSystemProperties(ServerTestFramework.STFLive.Reporting.Service.Property[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginSetSystemProperties(ServerTestFramework.STFLive.Reporting.Service.Property[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndSetSystemProperties(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetSystemPropertiesAsync(ServerTestFramework.STFLive.Reporting.Service.Property[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetSystemPropertiesAsync(ServerTestFramework.STFLive.Reporting.Service.Property[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.DeleteItem(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginDeleteItem(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndDeleteItem(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.DeleteItemAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.DeleteItemAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.MoveItem(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginMoveItem(System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndMoveItem(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.MoveItemAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.MoveItemAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListChildren(System.String,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginListChildren(System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndListChildren(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListChildrenAsync(System.String,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListChildrenAsync(System.String,System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetProperties(System.String,ServerTestFramework.STFLive.Reporting.Service.Property[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginGetProperties(System.String,ServerTestFramework.STFLive.Reporting.Service.Property[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndGetProperties(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetPropertiesAsync(System.String,ServerTestFramework.STFLive.Reporting.Service.Property[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetPropertiesAsync(System.String,ServerTestFramework.STFLive.Reporting.Service.Property[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetProperties(System.String,ServerTestFramework.STFLive.Reporting.Service.Property[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginSetProperties(System.String,ServerTestFramework.STFLive.Reporting.Service.Property[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndSetProperties(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetPropertiesAsync(System.String,ServerTestFramework.STFLive.Reporting.Service.Property[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetPropertiesAsync(System.String,ServerTestFramework.STFLive.Reporting.Service.Property[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetItemType(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginGetItemType(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndGetItemType(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetItemTypeAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetItemTypeAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateFolder(System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.Property[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginCreateFolder(System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.Property[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndCreateFolder(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateFolderAsync(System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.Property[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateFolderAsync(System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.Property[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateReport(System.String,System.String,System.Boolean,System.Byte[],ServerTestFramework.STFLive.Reporting.Service.Property[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginCreateReport(System.String,System.String,System.Boolean,System.Byte[],ServerTestFramework.STFLive.Reporting.Service.Property[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndCreateReport(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateReportAsync(System.String,System.String,System.Boolean,System.Byte[],ServerTestFramework.STFLive.Reporting.Service.Property[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateReportAsync(System.String,System.String,System.Boolean,System.Byte[],ServerTestFramework.STFLive.Reporting.Service.Property[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportDefinition(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginGetReportDefinition(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndGetReportDefinition(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportDefinitionAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportDefinitionAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetReportDefinition(System.String,System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginSetReportDefinition(System.String,System.Byte[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndSetReportDefinition(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetReportDefinitionAsync(System.String,System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetReportDefinitionAsync(System.String,System.Byte[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateResource(System.String,System.String,System.Boolean,System.Byte[],System.String,ServerTestFramework.STFLive.Reporting.Service.Property[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginCreateResource(System.String,System.String,System.Boolean,System.Byte[],System.String,ServerTestFramework.STFLive.Reporting.Service.Property[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndCreateResource(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateResourceAsync(System.String,System.String,System.Boolean,System.Byte[],System.String,ServerTestFramework.STFLive.Reporting.Service.Property[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateResourceAsync(System.String,System.String,System.Boolean,System.Byte[],System.String,ServerTestFramework.STFLive.Reporting.Service.Property[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetResourceContents(System.String,System.Byte[],System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginSetResourceContents(System.String,System.Byte[],System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndSetResourceContents(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetResourceContentsAsync(System.String,System.Byte[],System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetResourceContentsAsync(System.String,System.Byte[],System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetResourceContents(System.String,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginGetResourceContents(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndGetResourceContents(System.IAsyncResult,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetResourceContentsAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetResourceContentsAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportParameters(System.String,System.String,System.Boolean,ServerTestFramework.STFLive.Reporting.Service.ParameterValue[],ServerTestFramework.STFLive.Reporting.Service.DataSourceCredentials[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginGetReportParameters(System.String,System.String,System.Boolean,ServerTestFramework.STFLive.Reporting.Service.ParameterValue[],ServerTestFramework.STFLive.Reporting.Service.DataSourceCredentials[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndGetReportParameters(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportParametersAsync(System.String,System.String,System.Boolean,ServerTestFramework.STFLive.Reporting.Service.ParameterValue[],ServerTestFramework.STFLive.Reporting.Service.DataSourceCredentials[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportParametersAsync(System.String,System.String,System.Boolean,ServerTestFramework.STFLive.Reporting.Service.ParameterValue[],ServerTestFramework.STFLive.Reporting.Service.DataSourceCredentials[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetReportParameters(System.String,ServerTestFramework.STFLive.Reporting.Service.ReportParameter[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginSetReportParameters(System.String,ServerTestFramework.STFLive.Reporting.Service.ReportParameter[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndSetReportParameters(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetReportParametersAsync(System.String,ServerTestFramework.STFLive.Reporting.Service.ReportParameter[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetReportParametersAsync(System.String,ServerTestFramework.STFLive.Reporting.Service.ReportParameter[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateLinkedReport(System.String,System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.Property[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginCreateLinkedReport(System.String,System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.Property[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndCreateLinkedReport(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateLinkedReportAsync(System.String,System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.Property[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateLinkedReportAsync(System.String,System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.Property[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportLink(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginGetReportLink(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndGetReportLink(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportLinkAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportLinkAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetReportLink(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginSetReportLink(System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndSetReportLink(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetReportLinkAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetReportLinkAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListLinkedReports(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginListLinkedReports(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndListLinkedReports(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListLinkedReportsAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListLinkedReportsAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.Render(System.String,System.String,System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.ParameterValue[],ServerTestFramework.STFLive.Reporting.Service.DataSourceCredentials[],System.String,System.String@,System.String@,ServerTestFramework.STFLive.Reporting.Service.ParameterValue[]@,ServerTestFramework.STFLive.Reporting.Service.Warning[]@,System.String[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginRender(System.String,System.String,System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.ParameterValue[],ServerTestFramework.STFLive.Reporting.Service.DataSourceCredentials[],System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndRender(System.IAsyncResult,System.String@,System.String@,ServerTestFramework.STFLive.Reporting.Service.ParameterValue[]@,ServerTestFramework.STFLive.Reporting.Service.Warning[]@,System.String[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.RenderAsync(System.String,System.String,System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.ParameterValue[],ServerTestFramework.STFLive.Reporting.Service.DataSourceCredentials[],System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.RenderAsync(System.String,System.String,System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.ParameterValue[],ServerTestFramework.STFLive.Reporting.Service.DataSourceCredentials[],System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.RenderStream(System.String,System.String,System.String,System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.ParameterValue[],System.String@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginRenderStream(System.String,System.String,System.String,System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.ParameterValue[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndRenderStream(System.IAsyncResult,System.String@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.RenderStreamAsync(System.String,System.String,System.String,System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.ParameterValue[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.RenderStreamAsync(System.String,System.String,System.String,System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.ParameterValue[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetRenderResource(System.String,System.String,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginGetRenderResource(System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndGetRenderResource(System.IAsyncResult,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetRenderResourceAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetRenderResourceAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetExecutionOptions(System.String,ServerTestFramework.STFLive.Reporting.Service.ExecutionSettingEnum,ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinitionOrReference)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginSetExecutionOptions(System.String,ServerTestFramework.STFLive.Reporting.Service.ExecutionSettingEnum,ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinitionOrReference,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndSetExecutionOptions(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetExecutionOptionsAsync(System.String,ServerTestFramework.STFLive.Reporting.Service.ExecutionSettingEnum,ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinitionOrReference)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetExecutionOptionsAsync(System.String,ServerTestFramework.STFLive.Reporting.Service.ExecutionSettingEnum,ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinitionOrReference,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetExecutionOptions(System.String,ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinitionOrReference@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginGetExecutionOptions(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndGetExecutionOptions(System.IAsyncResult,ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinitionOrReference@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetExecutionOptionsAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetExecutionOptionsAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetCacheOptions(System.String,System.Boolean,ServerTestFramework.STFLive.Reporting.Service.ExpirationDefinition)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginSetCacheOptions(System.String,System.Boolean,ServerTestFramework.STFLive.Reporting.Service.ExpirationDefinition,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndSetCacheOptions(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetCacheOptionsAsync(System.String,System.Boolean,ServerTestFramework.STFLive.Reporting.Service.ExpirationDefinition)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetCacheOptionsAsync(System.String,System.Boolean,ServerTestFramework.STFLive.Reporting.Service.ExpirationDefinition,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetCacheOptions(System.String,ServerTestFramework.STFLive.Reporting.Service.ExpirationDefinition@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginGetCacheOptions(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndGetCacheOptions(System.IAsyncResult,ServerTestFramework.STFLive.Reporting.Service.ExpirationDefinition@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetCacheOptionsAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetCacheOptionsAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.UpdateReportExecutionSnapshot(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginUpdateReportExecutionSnapshot(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndUpdateReportExecutionSnapshot(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.UpdateReportExecutionSnapshotAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.UpdateReportExecutionSnapshotAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.FlushCache(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginFlushCache(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndFlushCache(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.FlushCacheAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.FlushCacheAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListJobs">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginListJobs(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndListJobs(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListJobsAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListJobsAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CancelJob(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginCancelJob(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndCancelJob(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CancelJobAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CancelJobAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateDataSource(System.String,System.String,System.Boolean,ServerTestFramework.STFLive.Reporting.Service.DataSourceDefinition,ServerTestFramework.STFLive.Reporting.Service.Property[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginCreateDataSource(System.String,System.String,System.Boolean,ServerTestFramework.STFLive.Reporting.Service.DataSourceDefinition,ServerTestFramework.STFLive.Reporting.Service.Property[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndCreateDataSource(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateDataSourceAsync(System.String,System.String,System.Boolean,ServerTestFramework.STFLive.Reporting.Service.DataSourceDefinition,ServerTestFramework.STFLive.Reporting.Service.Property[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateDataSourceAsync(System.String,System.String,System.Boolean,ServerTestFramework.STFLive.Reporting.Service.DataSourceDefinition,ServerTestFramework.STFLive.Reporting.Service.Property[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetDataSourceContents(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginGetDataSourceContents(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndGetDataSourceContents(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetDataSourceContentsAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetDataSourceContentsAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetDataSourceContents(System.String,ServerTestFramework.STFLive.Reporting.Service.DataSourceDefinition)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginSetDataSourceContents(System.String,ServerTestFramework.STFLive.Reporting.Service.DataSourceDefinition,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndSetDataSourceContents(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetDataSourceContentsAsync(System.String,ServerTestFramework.STFLive.Reporting.Service.DataSourceDefinition)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetDataSourceContentsAsync(System.String,ServerTestFramework.STFLive.Reporting.Service.DataSourceDefinition,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EnableDataSource(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginEnableDataSource(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndEnableDataSource(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EnableDataSourceAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EnableDataSourceAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.DisableDataSource(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginDisableDataSource(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndDisableDataSource(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.DisableDataSourceAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.DisableDataSourceAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListReportsUsingDataSource(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginListReportsUsingDataSource(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndListReportsUsingDataSource(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListReportsUsingDataSourceAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListReportsUsingDataSourceAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetReportDataSources(System.String,ServerTestFramework.STFLive.Reporting.Service.DataSource[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginSetReportDataSources(System.String,ServerTestFramework.STFLive.Reporting.Service.DataSource[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndSetReportDataSources(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetReportDataSourcesAsync(System.String,ServerTestFramework.STFLive.Reporting.Service.DataSource[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetReportDataSourcesAsync(System.String,ServerTestFramework.STFLive.Reporting.Service.DataSource[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportDataSources(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginGetReportDataSources(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndGetReportDataSources(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportDataSourcesAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportDataSourcesAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportDataSourcePrompts(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginGetReportDataSourcePrompts(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndGetReportDataSourcePrompts(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportDataSourcePromptsAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportDataSourcePromptsAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateReportHistorySnapshot(System.String,ServerTestFramework.STFLive.Reporting.Service.Warning[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginCreateReportHistorySnapshot(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndCreateReportHistorySnapshot(System.IAsyncResult,ServerTestFramework.STFLive.Reporting.Service.Warning[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateReportHistorySnapshotAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateReportHistorySnapshotAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetReportHistoryOptions(System.String,System.Boolean,System.Boolean,ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinitionOrReference)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginSetReportHistoryOptions(System.String,System.Boolean,System.Boolean,ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinitionOrReference,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndSetReportHistoryOptions(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetReportHistoryOptionsAsync(System.String,System.Boolean,System.Boolean,ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinitionOrReference)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetReportHistoryOptionsAsync(System.String,System.Boolean,System.Boolean,ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinitionOrReference,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportHistoryOptions(System.String,System.Boolean@,ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinitionOrReference@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginGetReportHistoryOptions(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndGetReportHistoryOptions(System.IAsyncResult,System.Boolean@,ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinitionOrReference@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportHistoryOptionsAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportHistoryOptionsAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetReportHistoryLimit(System.String,System.Boolean,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginSetReportHistoryLimit(System.String,System.Boolean,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndSetReportHistoryLimit(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetReportHistoryLimitAsync(System.String,System.Boolean,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetReportHistoryLimitAsync(System.String,System.Boolean,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportHistoryLimit(System.String,System.Boolean@,System.Int32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginGetReportHistoryLimit(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndGetReportHistoryLimit(System.IAsyncResult,System.Boolean@,System.Int32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportHistoryLimitAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportHistoryLimitAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListReportHistory(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginListReportHistory(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndListReportHistory(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListReportHistoryAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListReportHistoryAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.DeleteReportHistorySnapshot(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginDeleteReportHistorySnapshot(System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndDeleteReportHistorySnapshot(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.DeleteReportHistorySnapshotAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.DeleteReportHistorySnapshotAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.FindItems(System.String,ServerTestFramework.STFLive.Reporting.Service.BooleanOperatorEnum,ServerTestFramework.STFLive.Reporting.Service.SearchCondition[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginFindItems(System.String,ServerTestFramework.STFLive.Reporting.Service.BooleanOperatorEnum,ServerTestFramework.STFLive.Reporting.Service.SearchCondition[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndFindItems(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.FindItemsAsync(System.String,ServerTestFramework.STFLive.Reporting.Service.BooleanOperatorEnum,ServerTestFramework.STFLive.Reporting.Service.SearchCondition[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.FindItemsAsync(System.String,ServerTestFramework.STFLive.Reporting.Service.BooleanOperatorEnum,ServerTestFramework.STFLive.Reporting.Service.SearchCondition[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateSchedule(System.String,ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinition)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginCreateSchedule(System.String,ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinition,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndCreateSchedule(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateScheduleAsync(System.String,ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinition)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateScheduleAsync(System.String,ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinition,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.DeleteSchedule(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginDeleteSchedule(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndDeleteSchedule(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.DeleteScheduleAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.DeleteScheduleAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetScheduleProperties(System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinition)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginSetScheduleProperties(System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinition,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndSetScheduleProperties(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetSchedulePropertiesAsync(System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinition)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetSchedulePropertiesAsync(System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinition,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetScheduleProperties(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginGetScheduleProperties(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndGetScheduleProperties(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetSchedulePropertiesAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetSchedulePropertiesAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListScheduledReports(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginListScheduledReports(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndListScheduledReports(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListScheduledReportsAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListScheduledReportsAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListSchedules">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginListSchedules(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndListSchedules(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListSchedulesAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListSchedulesAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.PauseSchedule(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginPauseSchedule(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndPauseSchedule(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.PauseScheduleAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.PauseScheduleAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ResumeSchedule(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginResumeSchedule(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndResumeSchedule(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ResumeScheduleAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ResumeScheduleAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateSubscription(System.String,ServerTestFramework.STFLive.Reporting.Service.ExtensionSettings,System.String,System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.ParameterValue[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginCreateSubscription(System.String,ServerTestFramework.STFLive.Reporting.Service.ExtensionSettings,System.String,System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.ParameterValue[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndCreateSubscription(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateSubscriptionAsync(System.String,ServerTestFramework.STFLive.Reporting.Service.ExtensionSettings,System.String,System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.ParameterValue[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateSubscriptionAsync(System.String,ServerTestFramework.STFLive.Reporting.Service.ExtensionSettings,System.String,System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.ParameterValue[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateDataDrivenSubscription(System.String,ServerTestFramework.STFLive.Reporting.Service.ExtensionSettings,ServerTestFramework.STFLive.Reporting.Service.DataRetrievalPlan,System.String,System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.ParameterValueOrFieldReference[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginCreateDataDrivenSubscription(System.String,ServerTestFramework.STFLive.Reporting.Service.ExtensionSettings,ServerTestFramework.STFLive.Reporting.Service.DataRetrievalPlan,System.String,System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.ParameterValueOrFieldReference[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndCreateDataDrivenSubscription(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateDataDrivenSubscriptionAsync(System.String,ServerTestFramework.STFLive.Reporting.Service.ExtensionSettings,ServerTestFramework.STFLive.Reporting.Service.DataRetrievalPlan,System.String,System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.ParameterValueOrFieldReference[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateDataDrivenSubscriptionAsync(System.String,ServerTestFramework.STFLive.Reporting.Service.ExtensionSettings,ServerTestFramework.STFLive.Reporting.Service.DataRetrievalPlan,System.String,System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.ParameterValueOrFieldReference[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetSubscriptionProperties(System.String,ServerTestFramework.STFLive.Reporting.Service.ExtensionSettings,System.String,System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.ParameterValue[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginSetSubscriptionProperties(System.String,ServerTestFramework.STFLive.Reporting.Service.ExtensionSettings,System.String,System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.ParameterValue[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndSetSubscriptionProperties(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetSubscriptionPropertiesAsync(System.String,ServerTestFramework.STFLive.Reporting.Service.ExtensionSettings,System.String,System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.ParameterValue[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetSubscriptionPropertiesAsync(System.String,ServerTestFramework.STFLive.Reporting.Service.ExtensionSettings,System.String,System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.ParameterValue[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetDataDrivenSubscriptionProperties(System.String,ServerTestFramework.STFLive.Reporting.Service.ExtensionSettings,ServerTestFramework.STFLive.Reporting.Service.DataRetrievalPlan,System.String,System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.ParameterValueOrFieldReference[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginSetDataDrivenSubscriptionProperties(System.String,ServerTestFramework.STFLive.Reporting.Service.ExtensionSettings,ServerTestFramework.STFLive.Reporting.Service.DataRetrievalPlan,System.String,System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.ParameterValueOrFieldReference[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndSetDataDrivenSubscriptionProperties(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetDataDrivenSubscriptionPropertiesAsync(System.String,ServerTestFramework.STFLive.Reporting.Service.ExtensionSettings,ServerTestFramework.STFLive.Reporting.Service.DataRetrievalPlan,System.String,System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.ParameterValueOrFieldReference[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetDataDrivenSubscriptionPropertiesAsync(System.String,ServerTestFramework.STFLive.Reporting.Service.ExtensionSettings,ServerTestFramework.STFLive.Reporting.Service.DataRetrievalPlan,System.String,System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.ParameterValueOrFieldReference[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetSubscriptionProperties(System.String,ServerTestFramework.STFLive.Reporting.Service.ExtensionSettings@,System.String@,ServerTestFramework.STFLive.Reporting.Service.ActiveState@,System.String@,System.String@,System.String@,ServerTestFramework.STFLive.Reporting.Service.ParameterValue[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginGetSubscriptionProperties(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndGetSubscriptionProperties(System.IAsyncResult,ServerTestFramework.STFLive.Reporting.Service.ExtensionSettings@,System.String@,ServerTestFramework.STFLive.Reporting.Service.ActiveState@,System.String@,System.String@,System.String@,ServerTestFramework.STFLive.Reporting.Service.ParameterValue[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetSubscriptionPropertiesAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetSubscriptionPropertiesAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetDataDrivenSubscriptionProperties(System.String,ServerTestFramework.STFLive.Reporting.Service.ExtensionSettings@,ServerTestFramework.STFLive.Reporting.Service.DataRetrievalPlan@,System.String@,ServerTestFramework.STFLive.Reporting.Service.ActiveState@,System.String@,System.String@,System.String@,ServerTestFramework.STFLive.Reporting.Service.ParameterValueOrFieldReference[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginGetDataDrivenSubscriptionProperties(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndGetDataDrivenSubscriptionProperties(System.IAsyncResult,ServerTestFramework.STFLive.Reporting.Service.ExtensionSettings@,ServerTestFramework.STFLive.Reporting.Service.DataRetrievalPlan@,System.String@,ServerTestFramework.STFLive.Reporting.Service.ActiveState@,System.String@,System.String@,System.String@,ServerTestFramework.STFLive.Reporting.Service.ParameterValueOrFieldReference[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetDataDrivenSubscriptionPropertiesAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetDataDrivenSubscriptionPropertiesAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.DeleteSubscription(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginDeleteSubscription(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndDeleteSubscription(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.DeleteSubscriptionAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.DeleteSubscriptionAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.PrepareQuery(ServerTestFramework.STFLive.Reporting.Service.DataSource,ServerTestFramework.STFLive.Reporting.Service.DataSetDefinition,System.Boolean@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginPrepareQuery(ServerTestFramework.STFLive.Reporting.Service.DataSource,ServerTestFramework.STFLive.Reporting.Service.DataSetDefinition,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndPrepareQuery(System.IAsyncResult,System.Boolean@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.PrepareQueryAsync(ServerTestFramework.STFLive.Reporting.Service.DataSource,ServerTestFramework.STFLive.Reporting.Service.DataSetDefinition)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.PrepareQueryAsync(ServerTestFramework.STFLive.Reporting.Service.DataSource,ServerTestFramework.STFLive.Reporting.Service.DataSetDefinition,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetExtensionSettings(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginGetExtensionSettings(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndGetExtensionSettings(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetExtensionSettingsAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetExtensionSettingsAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ValidateExtensionSettings(System.String,ServerTestFramework.STFLive.Reporting.Service.ParameterValueOrFieldReference[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginValidateExtensionSettings(System.String,ServerTestFramework.STFLive.Reporting.Service.ParameterValueOrFieldReference[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndValidateExtensionSettings(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ValidateExtensionSettingsAsync(System.String,ServerTestFramework.STFLive.Reporting.Service.ParameterValueOrFieldReference[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ValidateExtensionSettingsAsync(System.String,ServerTestFramework.STFLive.Reporting.Service.ParameterValueOrFieldReference[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListSubscriptions(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginListSubscriptions(System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndListSubscriptions(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListSubscriptionsAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListSubscriptionsAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListSubscriptionsUsingDataSource(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginListSubscriptionsUsingDataSource(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndListSubscriptionsUsingDataSource(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListSubscriptionsUsingDataSourceAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListSubscriptionsUsingDataSourceAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListExtensions(ServerTestFramework.STFLive.Reporting.Service.ExtensionTypeEnum)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginListExtensions(ServerTestFramework.STFLive.Reporting.Service.ExtensionTypeEnum,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndListExtensions(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListExtensionsAsync(ServerTestFramework.STFLive.Reporting.Service.ExtensionTypeEnum)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListExtensionsAsync(ServerTestFramework.STFLive.Reporting.Service.ExtensionTypeEnum,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListEvents">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginListEvents(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndListEvents(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListEventsAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListEventsAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.FireEvent(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginFireEvent(System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndFireEvent(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.FireEventAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.FireEventAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListSystemTasks">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginListSystemTasks(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndListSystemTasks(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListSystemTasksAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListSystemTasksAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListTasks">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginListTasks(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndListTasks(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListTasksAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListTasksAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListSystemRoles">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginListSystemRoles(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndListSystemRoles(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListSystemRolesAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListSystemRolesAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListRoles">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginListRoles(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndListRoles(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListRolesAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListRolesAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateRole(System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.Task[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginCreateRole(System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.Task[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndCreateRole(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateRoleAsync(System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.Task[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateRoleAsync(System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.Task[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.DeleteRole(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginDeleteRole(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndDeleteRole(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.DeleteRoleAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.DeleteRoleAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetRoleProperties(System.String,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginGetRoleProperties(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndGetRoleProperties(System.IAsyncResult,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetRolePropertiesAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetRolePropertiesAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetRoleProperties(System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.Task[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginSetRoleProperties(System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.Task[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndSetRoleProperties(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetRolePropertiesAsync(System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.Task[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetRolePropertiesAsync(System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.Task[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetSystemPolicies">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginGetSystemPolicies(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndGetSystemPolicies(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetSystemPoliciesAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetSystemPoliciesAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetSystemPolicies(ServerTestFramework.STFLive.Reporting.Service.Policy[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginSetSystemPolicies(ServerTestFramework.STFLive.Reporting.Service.Policy[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndSetSystemPolicies(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetSystemPoliciesAsync(ServerTestFramework.STFLive.Reporting.Service.Policy[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetSystemPoliciesAsync(ServerTestFramework.STFLive.Reporting.Service.Policy[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetPolicies(System.String,System.Boolean@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginGetPolicies(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndGetPolicies(System.IAsyncResult,System.Boolean@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetPoliciesAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetPoliciesAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetPolicies(System.String,ServerTestFramework.STFLive.Reporting.Service.Policy[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginSetPolicies(System.String,ServerTestFramework.STFLive.Reporting.Service.Policy[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndSetPolicies(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetPoliciesAsync(System.String,ServerTestFramework.STFLive.Reporting.Service.Policy[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetPoliciesAsync(System.String,ServerTestFramework.STFLive.Reporting.Service.Policy[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.InheritParentSecurity(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginInheritParentSecurity(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndInheritParentSecurity(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.InheritParentSecurityAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.InheritParentSecurityAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetSystemPermissions">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginGetSystemPermissions(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndGetSystemPermissions(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetSystemPermissionsAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetSystemPermissionsAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetPermissions(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginGetPermissions(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndGetPermissions(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetPermissionsAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetPermissionsAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.LogonUser(System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginLogonUser(System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndLogonUser(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.LogonUserAsync(System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.LogonUserAsync(System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.Logoff">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginLogoff(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndLogoff(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.LogoffAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.LogoffAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListSecureMethodsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateBatchCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CancelBatchCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ExecuteBatchCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetSystemPropertiesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetSystemPropertiesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.DeleteItemCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.MoveItemCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListChildrenCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetPropertiesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetPropertiesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetItemTypeCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateFolderCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateReportCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportDefinitionCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetReportDefinitionCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateResourceCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetResourceContentsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetResourceContentsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportParametersCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetReportParametersCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateLinkedReportCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportLinkCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetReportLinkCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListLinkedReportsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.RenderCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.RenderStreamCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetRenderResourceCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetExecutionOptionsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetExecutionOptionsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetCacheOptionsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetCacheOptionsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.UpdateReportExecutionSnapshotCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.FlushCacheCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListJobsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CancelJobCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateDataSourceCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetDataSourceContentsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetDataSourceContentsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EnableDataSourceCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.DisableDataSourceCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListReportsUsingDataSourceCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetReportDataSourcesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportDataSourcesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportDataSourcePromptsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateReportHistorySnapshotCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetReportHistoryOptionsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportHistoryOptionsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetReportHistoryLimitCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportHistoryLimitCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListReportHistoryCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.DeleteReportHistorySnapshotCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.FindItemsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateScheduleCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.DeleteScheduleCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetSchedulePropertiesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetSchedulePropertiesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListScheduledReportsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListSchedulesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.PauseScheduleCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ResumeScheduleCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateSubscriptionCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateDataDrivenSubscriptionCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetSubscriptionPropertiesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetDataDrivenSubscriptionPropertiesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetSubscriptionPropertiesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetDataDrivenSubscriptionPropertiesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.DeleteSubscriptionCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.PrepareQueryCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetExtensionSettingsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ValidateExtensionSettingsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListSubscriptionsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListSubscriptionsUsingDataSourceCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListExtensionsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListEventsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.FireEventCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListSystemTasksCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListTasksCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListSystemRolesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListRolesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateRoleCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.DeleteRoleCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetRolePropertiesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetRolePropertiesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetSystemPoliciesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetSystemPoliciesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetPoliciesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetPoliciesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.InheritParentSecurityCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetSystemPermissionsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetPermissionsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.LogonUserCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.LogoffCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ServerInfoHeader">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ServerInfoHeader.ReportServerVersionNumber">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ServerInfoHeader.ReportServerEdition">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.Policy">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Policy.GroupUserName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Policy.Roles">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.Role">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Role.Name">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Role.Description">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.Task">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Task.TaskID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Task.Name">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Task.Description">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.Event">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Event.Type">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.Extension">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Extension.ExtensionType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Extension.Name">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Extension.LocalizedName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Extension.Visible">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ExtensionTypeEnum">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ExtensionTypeEnum.Delivery">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ExtensionTypeEnum.Render">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ExtensionTypeEnum.Data">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ExtensionTypeEnum.All">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.Subscription">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Subscription.SubscriptionID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Subscription.Owner">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Subscription.Path">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Subscription.VirtualPath">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Subscription.Report">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Subscription.DeliverySettings">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Subscription.Description">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Subscription.Status">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Subscription.Active">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Subscription.LastExecuted">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Subscription.LastExecutedSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Subscription.ModifiedBy">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Subscription.ModifiedDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Subscription.EventType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Subscription.IsDataDriven">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ExtensionSettings">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ExtensionSettings.Extension">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ExtensionSettings.ParameterValues">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ParameterFieldReference">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ParameterValueOrFieldReference">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ParameterFieldReference.ParameterName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ParameterFieldReference.FieldAlias">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ParameterValue">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ParameterValue.Name">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ParameterValue.Value">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ParameterValue.Label">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ActiveState">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ActiveState.DeliveryExtensionRemoved">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ActiveState.DeliveryExtensionRemovedSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ActiveState.SharedDataSourceRemoved">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ActiveState.SharedDataSourceRemovedSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ActiveState.MissingParameterValue">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ActiveState.MissingParameterValueSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ActiveState.InvalidParameterValue">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ActiveState.InvalidParameterValueSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ActiveState.UnknownReportParameter">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ActiveState.UnknownReportParameterSpecified">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ExtensionParameter">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ExtensionParameter.Name">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ExtensionParameter.DisplayName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ExtensionParameter.Required">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ExtensionParameter.RequiredSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ExtensionParameter.ReadOnly">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ExtensionParameter.Value">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ExtensionParameter.Error">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ExtensionParameter.Encrypted">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ExtensionParameter.IsPassword">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ExtensionParameter.ValidValues">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ValidValue">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ValidValue.Label">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ValidValue.Value">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.QueryDefinition">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.QueryDefinition.CommandType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.QueryDefinition.CommandText">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.QueryDefinition.Timeout">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.QueryDefinition.TimeoutSpecified">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.Field">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Field.Alias">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Field.Name">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.DataSetDefinition">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSetDefinition.Fields">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSetDefinition.Query">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSetDefinition.CaseSensitivity">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSetDefinition.CaseSensitivitySpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSetDefinition.Collation">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSetDefinition.AccentSensitivity">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSetDefinition.AccentSensitivitySpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSetDefinition.KanatypeSensitivity">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSetDefinition.KanatypeSensitivitySpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSetDefinition.WidthSensitivity">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSetDefinition.WidthSensitivitySpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSetDefinition.Name">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SensitivityEnum">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.SensitivityEnum.True">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.SensitivityEnum.False">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.SensitivityEnum.Auto">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.DataRetrievalPlan">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataRetrievalPlan.Item">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataRetrievalPlan.DataSet">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.DataSourceDefinition">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.DataSourceDefinitionOrReference">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSourceDefinition.Extension">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSourceDefinition.ConnectString">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSourceDefinition.CredentialRetrieval">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSourceDefinition.WindowsCredentials">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSourceDefinition.ImpersonateUser">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSourceDefinition.ImpersonateUserSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSourceDefinition.Prompt">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSourceDefinition.UserName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSourceDefinition.Password">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSourceDefinition.Enabled">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSourceDefinition.EnabledSpecified">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CredentialRetrievalEnum">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.CredentialRetrievalEnum.Prompt">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.CredentialRetrievalEnum.Store">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.CredentialRetrievalEnum.Integrated">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.CredentialRetrievalEnum.None">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.DataSourceReference">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSourceReference.Reference">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.InvalidDataSourceReference">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.Schedule">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Schedule.ScheduleID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Schedule.Name">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Schedule.Definition">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Schedule.Description">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Schedule.Creator">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Schedule.NextRunTime">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Schedule.NextRunTimeSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Schedule.LastRunTime">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Schedule.LastRunTimeSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Schedule.ReferencesPresent">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Schedule.State">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinition">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinitionOrReference">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinition.StartDateTime">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinition.EndDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinition.EndDateSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinition.Item">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.DailyRecurrence">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.RecurrencePattern">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DailyRecurrence.DaysInterval">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.WeeklyRecurrence">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.WeeklyRecurrence.WeeksInterval">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.WeeklyRecurrence.WeeksIntervalSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.WeeklyRecurrence.DaysOfWeek">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.DaysOfWeekSelector">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DaysOfWeekSelector.Sunday">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DaysOfWeekSelector.Monday">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DaysOfWeekSelector.Tuesday">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DaysOfWeekSelector.Wednesday">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DaysOfWeekSelector.Thursday">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DaysOfWeekSelector.Friday">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DaysOfWeekSelector.Saturday">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.MinuteRecurrence">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.MinuteRecurrence.MinutesInterval">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.MonthlyRecurrence">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.MonthlyRecurrence.Days">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.MonthlyRecurrence.MonthsOfYear">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.MonthsOfYearSelector">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.MonthsOfYearSelector.January">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.MonthsOfYearSelector.February">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.MonthsOfYearSelector.March">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.MonthsOfYearSelector.April">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.MonthsOfYearSelector.May">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.MonthsOfYearSelector.June">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.MonthsOfYearSelector.July">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.MonthsOfYearSelector.August">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.MonthsOfYearSelector.September">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.MonthsOfYearSelector.October">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.MonthsOfYearSelector.November">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.MonthsOfYearSelector.December">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.MonthlyDOWRecurrence">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.MonthlyDOWRecurrence.WhichWeek">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.MonthlyDOWRecurrence.WhichWeekSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.MonthlyDOWRecurrence.DaysOfWeek">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.MonthlyDOWRecurrence.MonthsOfYear">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.WeekNumberEnum">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.WeekNumberEnum.FirstWeek">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.WeekNumberEnum.SecondWeek">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.WeekNumberEnum.ThirdWeek">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.WeekNumberEnum.FourthWeek">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.WeekNumberEnum.LastWeek">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ScheduleReference">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ScheduleReference.ScheduleID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ScheduleReference.Definition">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.NoSchedule">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ScheduleStateEnum">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ScheduleStateEnum.Ready">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ScheduleStateEnum.Running">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ScheduleStateEnum.Paused">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ScheduleStateEnum.Expired">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ScheduleStateEnum.Failing">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ReportHistorySnapshot">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportHistorySnapshot.HistoryID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportHistorySnapshot.CreationDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportHistorySnapshot.Size">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.DataSourcePrompt">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSourcePrompt.Name">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSourcePrompt.DataSourceID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSourcePrompt.Prompt">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.DataSource">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSource.Name">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSource.Item">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.Job">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Job.JobID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Job.Name">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Job.Path">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Job.Description">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Job.Machine">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Job.User">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Job.StartDateTime">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Job.Action">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Job.Type">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Job.Status">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.JobActionEnum">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.JobActionEnum.Render">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.JobActionEnum.SnapshotCreation">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.JobActionEnum.ReportHistoryCreation">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.JobTypeEnum">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.JobTypeEnum.User">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.JobTypeEnum.System">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.JobStatusEnum">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.JobStatusEnum.New">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.JobStatusEnum.Running">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.JobStatusEnum.CancelRequested">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ExpirationDefinition">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.TimeExpiration">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.TimeExpiration.Minutes">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ScheduleExpiration">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ScheduleExpiration.Item">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ReportParameter">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.Name">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.Type">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.TypeSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.Nullable">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.NullableSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.AllowBlank">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.AllowBlankSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.MultiValue">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.MultiValueSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.QueryParameter">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.QueryParameterSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.Prompt">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.PromptUser">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.PromptUserSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.Dependencies">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.ValidValuesQueryBased">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.ValidValuesQueryBasedSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.ValidValues">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.DefaultValuesQueryBased">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.DefaultValuesQueryBasedSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.DefaultValues">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.State">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.StateSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.ErrorMessage">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ParameterTypeEnum">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ParameterTypeEnum.Boolean">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ParameterTypeEnum.DateTime">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ParameterTypeEnum.Integer">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ParameterTypeEnum.Float">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ParameterTypeEnum.String">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ParameterStateEnum">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ParameterStateEnum.HasValidValue">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ParameterStateEnum.MissingValidValue">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ParameterStateEnum.HasOutstandingDependencies">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ParameterStateEnum.DynamicValuesUnavailable">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.DataSourceCredentials">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSourceCredentials.DataSourceName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSourceCredentials.UserName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSourceCredentials.Password">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.Warning">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Warning.Code">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Warning.Severity">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Warning.ObjectName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Warning.ObjectType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Warning.Message">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CatalogItem">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CatalogItem.ID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CatalogItem.Name">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CatalogItem.Path">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CatalogItem.VirtualPath">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CatalogItem.Type">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CatalogItem.Size">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CatalogItem.SizeSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CatalogItem.Description">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CatalogItem.Hidden">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CatalogItem.HiddenSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CatalogItem.CreationDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CatalogItem.CreationDateSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CatalogItem.ModifiedDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CatalogItem.ModifiedDateSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CatalogItem.CreatedBy">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CatalogItem.ModifiedBy">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CatalogItem.MimeType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CatalogItem.ExecutionDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CatalogItem.ExecutionDateSpecified">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ItemTypeEnum">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ItemTypeEnum.Unknown">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ItemTypeEnum.Folder">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ItemTypeEnum.Report">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ItemTypeEnum.Resource">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ItemTypeEnum.LinkedReport">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ItemTypeEnum.DataSource">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.Property">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Property.Name">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Property.Value">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SearchCondition">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.SearchCondition.Condition">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.SearchCondition.ConditionSpecified">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ConditionEnum">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ConditionEnum.Contains">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ConditionEnum.Equals">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SessionHeader">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.SessionHeader.SessionId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.SessionHeader.IsNewExecution">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.SessionHeader.ExecutionDateTime">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.SessionHeader.ExpirationDateTime">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ItemNamespaceHeader">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ItemNamespaceHeader.ItemNamespace">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ItemNamespaceEnum">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ItemNamespaceEnum.PathBased">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ItemNamespaceEnum.GUIDBased">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.BatchHeader">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.BatchHeader.BatchID">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ExecutionSettingEnum">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ExecutionSettingEnum.Live">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ExecutionSettingEnum.Snapshot">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.BooleanOperatorEnum">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.BooleanOperatorEnum.And">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.BooleanOperatorEnum.Or">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListSecureMethodsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListSecureMethodsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ListSecureMethodsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CreateBatchCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CreateBatchCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CreateBatchCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CancelBatchCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ExecuteBatchCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetSystemPropertiesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetSystemPropertiesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetSystemPropertiesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SetSystemPropertiesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.DeleteItemCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.MoveItemCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListChildrenCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListChildrenCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ListChildrenCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetPropertiesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetPropertiesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetPropertiesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SetPropertiesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetItemTypeCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetItemTypeCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetItemTypeCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CreateFolderCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CreateReportCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CreateReportCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CreateReportCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetReportDefinitionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetReportDefinitionCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetReportDefinitionCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SetReportDefinitionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SetReportDefinitionCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.SetReportDefinitionCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CreateResourceCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SetResourceContentsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetResourceContentsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetResourceContentsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetResourceContentsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetResourceContentsCompletedEventArgs.MimeType">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetReportParametersCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetReportParametersCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetReportParametersCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SetReportParametersCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CreateLinkedReportCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetReportLinkCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetReportLinkCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetReportLinkCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SetReportLinkCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListLinkedReportsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListLinkedReportsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ListLinkedReportsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.RenderCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.RenderCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.RenderCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.RenderCompletedEventArgs.Encoding">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.RenderCompletedEventArgs.MimeType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.RenderCompletedEventArgs.ParametersUsed">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.RenderCompletedEventArgs.Warnings">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.RenderCompletedEventArgs.StreamIds">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.RenderStreamCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.RenderStreamCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.RenderStreamCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.RenderStreamCompletedEventArgs.Encoding">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.RenderStreamCompletedEventArgs.MimeType">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetRenderResourceCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetRenderResourceCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetRenderResourceCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetRenderResourceCompletedEventArgs.MimeType">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SetExecutionOptionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetExecutionOptionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetExecutionOptionsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetExecutionOptionsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetExecutionOptionsCompletedEventArgs.Item">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SetCacheOptionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetCacheOptionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetCacheOptionsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetCacheOptionsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetCacheOptionsCompletedEventArgs.Item">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.UpdateReportExecutionSnapshotCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.FlushCacheCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListJobsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListJobsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ListJobsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CancelJobCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CancelJobCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CancelJobCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CreateDataSourceCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetDataSourceContentsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetDataSourceContentsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetDataSourceContentsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SetDataSourceContentsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.EnableDataSourceCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.DisableDataSourceCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListReportsUsingDataSourceCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListReportsUsingDataSourceCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ListReportsUsingDataSourceCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SetReportDataSourcesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetReportDataSourcesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetReportDataSourcesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetReportDataSourcesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetReportDataSourcePromptsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetReportDataSourcePromptsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetReportDataSourcePromptsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CreateReportHistorySnapshotCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CreateReportHistorySnapshotCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CreateReportHistorySnapshotCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CreateReportHistorySnapshotCompletedEventArgs.Warnings">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SetReportHistoryOptionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetReportHistoryOptionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetReportHistoryOptionsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetReportHistoryOptionsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetReportHistoryOptionsCompletedEventArgs.KeepExecutionSnapshots">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetReportHistoryOptionsCompletedEventArgs.Item">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SetReportHistoryLimitCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetReportHistoryLimitCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetReportHistoryLimitCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetReportHistoryLimitCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetReportHistoryLimitCompletedEventArgs.IsSystem">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetReportHistoryLimitCompletedEventArgs.SystemLimit">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListReportHistoryCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListReportHistoryCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ListReportHistoryCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.DeleteReportHistorySnapshotCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.FindItemsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.FindItemsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.FindItemsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CreateScheduleCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CreateScheduleCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CreateScheduleCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.DeleteScheduleCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SetSchedulePropertiesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetSchedulePropertiesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetSchedulePropertiesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetSchedulePropertiesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListScheduledReportsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListScheduledReportsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ListScheduledReportsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListSchedulesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListSchedulesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ListSchedulesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.PauseScheduleCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ResumeScheduleCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CreateSubscriptionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CreateSubscriptionCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CreateSubscriptionCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CreateDataDrivenSubscriptionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CreateDataDrivenSubscriptionCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CreateDataDrivenSubscriptionCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SetSubscriptionPropertiesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SetDataDrivenSubscriptionPropertiesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetSubscriptionPropertiesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetSubscriptionPropertiesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetSubscriptionPropertiesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetSubscriptionPropertiesCompletedEventArgs.ExtensionSettings">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetSubscriptionPropertiesCompletedEventArgs.Description">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetSubscriptionPropertiesCompletedEventArgs.Active">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetSubscriptionPropertiesCompletedEventArgs.Status">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetSubscriptionPropertiesCompletedEventArgs.EventType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetSubscriptionPropertiesCompletedEventArgs.MatchData">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetSubscriptionPropertiesCompletedEventArgs.Parameters">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetDataDrivenSubscriptionPropertiesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetDataDrivenSubscriptionPropertiesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetDataDrivenSubscriptionPropertiesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetDataDrivenSubscriptionPropertiesCompletedEventArgs.ExtensionSettings">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetDataDrivenSubscriptionPropertiesCompletedEventArgs.DataRetrievalPlan">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetDataDrivenSubscriptionPropertiesCompletedEventArgs.Description">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetDataDrivenSubscriptionPropertiesCompletedEventArgs.Active">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetDataDrivenSubscriptionPropertiesCompletedEventArgs.Status">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetDataDrivenSubscriptionPropertiesCompletedEventArgs.EventType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetDataDrivenSubscriptionPropertiesCompletedEventArgs.MatchData">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetDataDrivenSubscriptionPropertiesCompletedEventArgs.Parameters">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.DeleteSubscriptionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.PrepareQueryCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.PrepareQueryCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.PrepareQueryCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.PrepareQueryCompletedEventArgs.Changed">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetExtensionSettingsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetExtensionSettingsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetExtensionSettingsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ValidateExtensionSettingsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ValidateExtensionSettingsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ValidateExtensionSettingsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListSubscriptionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListSubscriptionsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ListSubscriptionsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListSubscriptionsUsingDataSourceCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListSubscriptionsUsingDataSourceCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ListSubscriptionsUsingDataSourceCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListExtensionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListExtensionsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ListExtensionsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListEventsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListEventsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ListEventsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.FireEventCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListSystemTasksCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListSystemTasksCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ListSystemTasksCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListTasksCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListTasksCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ListTasksCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListSystemRolesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListSystemRolesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ListSystemRolesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListRolesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListRolesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ListRolesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CreateRoleCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.DeleteRoleCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetRolePropertiesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetRolePropertiesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetRolePropertiesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetRolePropertiesCompletedEventArgs.Description">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SetRolePropertiesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetSystemPoliciesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetSystemPoliciesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetSystemPoliciesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SetSystemPoliciesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetPoliciesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetPoliciesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetPoliciesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetPoliciesCompletedEventArgs.InheritParent">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SetPoliciesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.InheritParentSecurityCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetSystemPermissionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetSystemPermissionsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetSystemPermissionsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetPermissionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetPermissionsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetPermissionsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.LogonUserCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.LogoffCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportingQueryType">
            <summary>
            Type of query to do against a particular table
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportingPair">
            <summary>
            Helper class
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportingSQLQueryRunner">
            <summary>
            Runs a query against a Reporting server
            
            First deconstructs the query, running a count query first
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingSQLQueryRunner.RunQuery(System.Collections.Generic.List{System.String},System.String,System.String,System.Int32@,System.Collections.ArrayList@)">
            <summary>
            Order expected (count query then select query
            </summary>
            <param name="queries">Queries to run against the server</param>
            <param name="ReportingServer">Server to hit</param>
            <param name="ReportingDB">Database to hit</param>
            <param name="count"></param>
            <param name="Results">Results and counts from queries</param>
            <returns>If there were any errors</returns>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportingSQLQueryBuilder">
            <summary>
            Contains helpful utility functions for building SQL queries
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingSQLQueryBuilder.BuildQuery(System.Type,System.Collections.Generic.Queue{ServerTestFramework.STFLive.Reporting.ReportingPair},ServerTestFramework.STFLive.Reporting.ReportingQueryType)">
            <summary>
            
            </summary>
            <param name="ReportingTableType"></param>
            <param name="KnownValues"></param>
            <param name="TypeOfQuery"></param>
            <returns></returns>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportingTable">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingTable.GetMaxUserPUID(System.Data.SqlClient.SqlConnection)">
            <summary>
            GetMaxUserID
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingTable.GetMaxUserPUID(ServerTestFramework.STFLive.Reporting.ReportingDatabase)">
            <summary>
            GetMaxUserID - Using Reporting Database
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingTable.GetMinUserPUID(System.Data.SqlClient.SqlConnection)">
            <summary>
            GetMinUserID
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingTable.GetMinUserPUID(ServerTestFramework.STFLive.Reporting.ReportingDatabase)">
            <summary>
            GetMinUserID - Using Reporting Database
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingTable.FindNextUserID(System.Data.SqlClient.SqlConnection,System.Int64)">
            <summary>
            FindNextUserID
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingTable.FindNextUserID(ServerTestFramework.STFLive.Reporting.ReportingDatabase,System.Int64)">
            <summary>
            Find Next User ID - Using Reporting Database
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingTable.FindNextUserID(System.Data.SqlClient.SqlCommand,System.Int64)">
            <summary>
            FindNextUserID
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingTable.GetRecordCount(ServerTestFramework.STFLive.Reporting.ReportingDatabase)">
            <summary>
            Get Table Record Count
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportingVerification">
            <summary>
            
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingVerification.m_Completed">
            <summary>
            
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingVerification.m_HResult">
            <summary>
            
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingVerification.m_Parameters">
            <summary>
            Job parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingVerification.RunJob">
            <summary>
            Execute the job
            </summary>
            <returns>The constructed SQL script to execute the job</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingVerification.Completed">
            <summary>
            
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingVerification.HResult">
            <summary>
            
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingVerification.Results">
            <summary>
            The results of this job
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingVerification.StartTime">
            <summary>
            When the job was started
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingVerification.RunningTime">
            <summary>
            How long it took this job to run
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingVerification.JobName">
            <summary>
            Name of the job
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingVerification.JobSteps">
            <summary>
            Job Steps
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingVerification.Parameters">
            <summary>
            Job Parameters
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.XBLReport">
            <summary>
            Abstract class for Xbox Live Report objects. Each object will map to a specific report
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.XBLReport.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.XBLReport.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.XBLReport.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.XBLReport.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.XBLReport.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.XBLReport.ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.CdbVideoProcessing_SSIS">
            <summary>
            This is the SSIS Cdb Video Processing job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.SSISJob">
            <summary>
            
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.CdbVideoProcessing_SSIS.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.CdbVideoProcessing_SSIS.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.CdbVideoProcessing_SSIS.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.CdbVideoProcessing_SSIS.CdbVideoProcessing_SSIS_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.CIQDatafeed">
            <summary>
            This is the CIQ Datafeed export job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.CIQDatafeed.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.CIQDatafeed.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.CIQDatafeed.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.CIQDatafeed.CIQDatafeed_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.DailyProcessing_Crux">
            <summary>
            This is the ReportingDB Daily Processing Crux job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailyProcessing_Crux.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailyProcessing_Crux.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailyProcessing_Crux.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailyProcessing_Crux.RunJob">
            <summary>
            Execute the job. If the job contains a valid parameter object then it will create
            the SQL to run the stored procedure for Daily Processing Crux.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailyProcessing_Crux.UpdateStatus">
            <summary>
            Update Job status
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.DailyProcessing_Crux.DailyProcessing_Crux_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.DailyProcessing_GameUsage">
            <summary>
            This is the Game Usage Daily Processing job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailyProcessing_GameUsage.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailyProcessing_GameUsage.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailyProcessing_GameUsage.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailyProcessing_GameUsage.RunJob">
            <summary>
            Execute the job. If the job contains a valid parameter object then it will create
            the SQL to run the stored procedure for Game Usage Daily Processing
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailyProcessing_GameUsage.UpdateStatus">
            <summary>
            Update Job status
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.DailyProcessing_GameUsage.DailyProcessing_GameUsage_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.DailySSAS_AchievementsProcessing">
            <summary>
            This is the OLAP ACHIEVEMENT CUBE daily processing job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.OlapJob">
            <summary>
            OlapJob. From here the SSAS processing jobs will be derived.
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.OlapJob.RunJob">
            <summary>
            Run job. If no parameters are set then default job will be executed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.OlapJob.UpdateStatus">
            <summary>
            Update Olap Job Status
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.OlapJob.OlapJobParameters">
            <summary>
            Parameters for Olap Cube processing jobs
            Default settings are for regular job to run
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailySSAS_AchievementsProcessing.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailySSAS_AchievementsProcessing.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailySSAS_AchievementsProcessing.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.DailySSAS_AchievementsProcessing.DailySSAS_AchievementProcessing_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.DailySSAS_CDBCruxUsageProcessing">
            <summary>
            This is the OLAP CDB CRUXUSAGE CUBE daily processing job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailySSAS_CDBCruxUsageProcessing.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailySSAS_CDBCruxUsageProcessing.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailySSAS_CDBCruxUsageProcessing.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.DailySSAS_CDBCruxUsageProcessing.DailySSAS_CDBCruxUsageProcessing_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.DailySSAS_CruxUsageProcessing">
            <summary>
            This is the OLAP CRUXUSAGE CUBE daily processing job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailySSAS_CruxUsageProcessing.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailySSAS_CruxUsageProcessing.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailySSAS_CruxUsageProcessing.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.DailySSAS_CruxUsageProcessing.DailySSAS_CruxUsageProcessing_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.DailySSAS_GameUsageProcessing">
            <summary>
            This is the OLAP GAMEUSAGE CUBE daily processing job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailySSAS_GameUsageProcessing.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailySSAS_GameUsageProcessing.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailySSAS_GameUsageProcessing.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.DailySSAS_GameUsageProcessing.DailySSAS_GameUsageProcessing_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.DailySSAS_VideoCubeProcessing">
            <summary>
            This is the OLAP CDB CRUXUSAGE CUBE daily processing job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailySSAS_VideoCubeProcessing.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailySSAS_VideoCubeProcessing.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailySSAS_VideoCubeProcessing.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.DailySSAS_VideoCubeProcessing.DailySSAS_VideoCubeProcessing_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.FilterDB_PurgeFactTables">
            <summary>
            This is the FilterDB:Purge Fact Tables job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.FilterDB_PurgeFactTables.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.FilterDB_PurgeFactTables.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.FilterDB_PurgeFactTables.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.FilterDB_PurgeFactTables.FilterDB_PurgeFactTables_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.OlapCubeGeneration">
            <summary>
            This is the Olap Partition tool creation job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.OlapCubeGeneration.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.OlapCubeGeneration.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.OlapCubeGeneration.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.OlapCubeGeneration.OlapCubeGeneration_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.OlapFullProcessGameUsageJob">
            <summary>
            OlapFullProcessGameUsageJob
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.RealtimeDB_PurgeFactTables">
            <summary>
            This is the ReportRealtimeDB: Purge Fact Tables job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.RealtimeDB_PurgeFactTables.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.RealtimeDB_PurgeFactTables.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.RealtimeDB_PurgeFactTables.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.RealtimeDB_PurgeFactTables.RealtimeDB_PurgeFactTables_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.RealtimeDB_RealtimeProcessing">
            <summary>
            This is the ReportRealtimeDB: Realtime Processing job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.RealtimeDB_RealtimeProcessing.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.RealtimeDB_RealtimeProcessing.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.RealtimeDB_RealtimeProcessing.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.RealtimeDB_RealtimeProcessing.RealtimeDB_PurgeFactTables_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportArchiveDB_TransferFactData">
            <summary>
            This is the ReportingDB: Drop Archived Facts job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportArchiveDB_TransferFactData.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportArchiveDB_TransferFactData.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportArchiveDB_TransferFactData.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportArchiveDB_TransferFactData.ReportArchiveDB_TransferFactData_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportArchiveDB_UpdateFilegroups">
            <summary>
            This is the ReportingDB: Drop Archived Facts job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportArchiveDB_UpdateFilegroups.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportArchiveDB_UpdateFilegroups.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportArchiveDB_UpdateFilegroups.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportArchiveDB_UpdateFilegroups.ReportArchiveDB_UpdateFilegroups_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportingDB_DropArchivedFacts">
            <summary>
            This is the ReportingDB: Drop Archived Facts job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingDB_DropArchivedFacts.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingDB_DropArchivedFacts.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingDB_DropArchivedFacts.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportingDB_DropArchivedFacts.ReportingDB_DropArchivedFacts_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportingDB_PurgeFactTables">
            <summary>
            This is the ReportingDB:Purge Fact Tables job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingDB_PurgeFactTables.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingDB_PurgeFactTables.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingDB_PurgeFactTables.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportingDB_PurgeFactTables.ReportingDB_PurgeFactTables_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.SCGExport_SSIS">
            <summary>
            This is the SCGExport SSIS package job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.SCGExport_SSIS.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.SCGExport_SSIS.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.SCGExport_SSIS.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.SCGExport_SSIS.SCGExport_SSIS_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.SCGImportFeed_SSIS">
            <summary>
            This is the SCGImport SSIS package job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.SCGImportFeed_SSIS.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.SCGImportFeed_SSIS.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.SCGImportFeed_SSIS.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.SCGImportFeed_SSIS.SCGImportFeed_SSIS_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.UODB_Accounts_SSIS">
            <summary>
            This is the UODB Accounts SSIS job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Accounts_SSIS.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Accounts_SSIS.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Accounts_SSIS.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.UODB_Accounts_SSIS.UODB_Accounts_SSIS_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.UODB_Music_SSIS">
            <summary>
            This is the UODB Music SSIS job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Music_SSIS.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Music_SSIS.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Music_SSIS.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.UODB_Music_SSIS.UODB_Music_SSIS_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.UODB_Offers_SSIS">
            <summary>
            This is the UODB Offers SSIS job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Offers_SSIS.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Offers_SSIS.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Offers_SSIS.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.UODB_Offers_SSIS.UODB_Offers_SSIS_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.UODB_Primary_SSIS">
            <summary>
            This is the Daily UODB SSIS job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Primary_SSIS.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Primary_SSIS.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Primary_SSIS.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.UODB_Primary_SSIS.UODB_Primary_SSIS_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.UODB_Purchase_SSIS">
            <summary>
            This is the UODB Purchase SSIS job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Purchase_SSIS.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Purchase_SSIS.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Purchase_SSIS.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.UODB_Purchase_SSIS.UODB_Purchase_SSIS_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.UODB_Realtime_SSIS">
            <summary>
            This is the UODB Realtime SSIS job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Realtime_SSIS.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Realtime_SSIS.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Realtime_SSIS.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.UODB_Realtime_SSIS.UODB_Realtime_SSIS_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.UODB_Secondary_SSIS">
            <summary>
            This is the Weekly UODB SSIS job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Secondary_SSIS.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Secondary_SSIS.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Secondary_SSIS.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.UODB_Secondary_SSIS.UODB_Secondary_SSIS_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.UODB_Video_SSIS">
            <summary>
            This is the UODB Video SSIS job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Video_SSIS.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Video_SSIS.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Video_SSIS.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.UODB_Video_SSIS.UODB_Video_SSIS_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.WMIS_Download">
            <summary>
            This is the WMIS Download job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.WMIS_Download.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.WMIS_Download.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.WMIS_Download.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.WMIS_Download.WMIS_Download_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.AchievementSummary.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.AchievementSummary.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.AchievementSummary.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.AchievementSummary.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.AchievementSummary.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.AchievementSummary.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.ContractualPartners.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.ContractualPartners.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.ContractualPartners.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.ContractualPartners.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.ContractualPartners.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.ContractualPartners.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.FirstTitlePlayed.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.FirstTitlePlayed.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.FirstTitlePlayed.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.FirstTitlePlayed.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.FirstTitlePlayed.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.FirstTitlePlayed.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.LastWebActivity.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.LastWebActivity.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.LastWebActivity.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.LastWebActivity.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.LastWebActivity.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.LastWebActivity.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.MarketplaceDownloadSummary.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.MarketplaceDownloadSummary.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.MarketplaceDownloadSummary.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.MarketplaceDownloadSummary.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.MarketplaceDownloadSummary.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.MarketplaceDownloadSummary.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.MarketplaceScorecard.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.MarketplaceScorecard.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.MarketplaceScorecard.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.MarketplaceScorecard.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.MarketplaceScorecard.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.MarketplaceScorecard.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.MarketRedeemedContentTitleOffer.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.MarketRedeemedContentTitleOffer.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.MarketRedeemedContentTitleOffer.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.MarketRedeemedContentTitleOffer.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.MarketRedeemedContentTitleOffer.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.MarketRedeemedContentTitleOffer.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.MarketRedeemedContentTypeTier.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.MarketRedeemedContentTypeTier.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.MarketRedeemedContentTypeTier.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.MarketRedeemedContentTypeTier.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.MarketRedeemedContentTypeTier.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.MarketRedeemedContentTypeTier.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.MusicRoyalty.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.MusicRoyalty.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.MusicRoyalty.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.MusicRoyalty.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.MusicRoyalty.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.MusicRoyalty.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.PublisherTitleUsageDaily.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.PublisherTitleUsageDaily.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.PublisherTitleUsageDaily.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.PublisherTitleUsageDaily.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.PublisherTitleUsageDaily.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.PublisherTitleUsageDaily.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.PublisherTitleUsageMonthly.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.PublisherTitleUsageMonthly.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.PublisherTitleUsageMonthly.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.PublisherTitleUsageMonthly.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.PublisherTitleUsageMonthly.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.PublisherTitleUsageMonthly.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.RealTimeAccounts.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.RealTimeAccounts.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.RealTimeAccounts.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.RealTimeAccounts.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.RealTimeAccounts.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.RealTimeAccounts.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.RealTimeTitleUsage.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.RealTimeTitleUsage.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.RealTimeTitleUsage.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.RealTimeTitleUsage.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.RealTimeTitleUsage.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.RealTimeTitleUsage.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.SubscriberLife.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.SubscriberLife.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.SubscriberLife.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.SubscriberLife.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.SubscriberLife.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.SubscriberLife.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.TitleUsageDetails.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.TitleUsageDetails.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.TitleUsageDetails.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.TitleUsageDetails.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.TitleUsageDetails.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.TitleUsageDetails.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.TitleUsageSummary.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.TitleUsageSummary.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.TitleUsageSummary.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.TitleUsageSummary.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.TitleUsageSummary.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.TitleUsageSummary.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.VideoRoyalty.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.VideoRoyalty.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.VideoRoyalty.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.VideoRoyalty.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.VideoRoyalty.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.VideoRoyalty.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.VideoStudio.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.VideoStudio.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.VideoStudio.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.VideoStudio.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.VideoStudio.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.VideoStudio.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.VisitorFrequency.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.VisitorFrequency.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.VisitorFrequency.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.VisitorFrequency.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.VisitorFrequency.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.VisitorFrequency.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.Xbox1DownloadDetails.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.Xbox1DownloadDetails.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.Xbox1DownloadDetails.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.Xbox1DownloadDetails.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.Xbox1DownloadDetails.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.Xbox1DownloadDetails.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.XboxAccountSummary.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.XboxAccountSummary.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.XboxAccountSummary.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.XboxAccountSummary.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.XboxAccountSummary.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.XboxAccountSummary.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.StagingTable">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_achievements">
            <summary>
            A class representing T_achievements table
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_achievements.AddOneRow(System.Data.SqlClient.SqlConnection,System.Int32,System.Int64,System.Int32)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_achievements.AddOneRow(System.Data.SqlClient.SqlCommand,System.Int32,System.Int64,System.Int32)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_achievements.AddOneRow(System.Data.SqlClient.SqlConnection,System.Int64)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_achievements.UpdateOneRow(System.Data.SqlClient.SqlConnection,System.Int64)">
            <summary>
            UpdateOneRow
            This is a kind of meaningless update only to trigger update flag for replication
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_achievements.UpdateOneRow(System.Data.SqlClient.SqlCommand,System.Int64)">
            <summary>
            UpdateOneRow
            This is a kind of meaningless update only to trigger update flag for replication
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_achievements.GetContent(System.Data.SqlClient.SqlConnection,System.Int64,System.Int32,System.Int32)">
            <summary>
            GetContent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_base_offers">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_content_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_content_package">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_dmp_purchase_transactions">
            <summary>
            A class representing T_dmp_purchase_transactions table
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_dmp_purchase_transactions.AddOneRow(System.Data.SqlClient.SqlConnection,System.Guid,System.Int32)">
            <summary>
            AddOneRow
            if i_purchase_type_id=1 then Xbox Live Offers, if 2 then MusicNet, if 3 then SyncCast
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_dmp_purchase_transactions.GetContent(System.Data.SqlClient.SqlConnection,System.Guid)">
            <summary>
            GetContent
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_dmp_purchase_transactions.GetContent(System.Data.SqlClient.SqlConnection,System.Guid,System.String)">
            <summary>
            GetContent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_dmp_purchase_transactions_music">
            <summary>
            A class representing T_dmp_purchase_transactions_music table
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_dmp_purchase_transactions_music.GetContent(System.Data.SqlClient.SqlConnection,System.Guid)">
            <summary>
            GetContent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_dmp_purchase_transactions_video">
            <summary>
            A class representing T_dmp_purchase_transactions_video table
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_dmp_purchase_transactions_video.GetContent(System.Data.SqlClient.SqlConnection,System.Guid)">
            <summary>
            GetContent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_elite_migration_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_fdb_time">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_guest_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_machines">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_machines.AddOneRow(System.Data.SqlClient.SqlConnection)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_machines.AddOneRow(System.Data.SqlClient.SqlConnection,System.Int64)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_machines.AddOneRow(System.Data.SqlClient.SqlCommand,System.Int64)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_machines.UpdateOneRow(System.Data.SqlClient.SqlConnection,System.Int64)">
            <summary>
            UpdateOneRow
            This is a kind of meaningless update only to trigger update flag for replication
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_machines.UpdateOneRow(System.Data.SqlClient.SqlCommand,System.Int64)">
            <summary>
            UpdateOneRow
            This is a kind of meaningless update only to trigger update flag for replication
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_machines.GetMaxMachinePUID(System.Data.SqlClient.SqlConnection)">
            <summary>
            GetMaxUserID
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_machines.GetMinMachinePUID(System.Data.SqlClient.SqlConnection)">
            <summary>
            GetMaxUserID
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_machines.FindNextMachineID(System.Data.SqlClient.SqlConnection,System.Int64)">
            <summary>
            FindNextUserID
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_machines.FindNextMachineID(System.Data.SqlClient.SqlCommand,System.Int64)">
            <summary>
            FindNextUserID
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_machines.GetContent(System.Data.SqlClient.SqlConnection,System.Int64)">
            <summary>
            GetContent
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_machines.GetContent(System.Data.SqlClient.SqlConnection,System.Int64,System.String)">
            <summary>
            GetContent
            szTable should be "t_machines" or "t_machines_rt"
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_migrate_account_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_msg_snd_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_new_account_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_offers">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_presence_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_provision_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_publisher_titles">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_purchase_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_rdb_content_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_rdb_content_xbox360_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_rdb_guest_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_rdb_migrate_account_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_rdb_msg_snd_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_rdb_new_account_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_rdb_presence_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_rdb_provision_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_rdb_purchase_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_rdb_session_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_session_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_spscustomeraccount">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_spscustomeraccount.#ctor">
            <summary>
            Constructors
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_spscustomeraccount.AddOneRow(System.Data.SqlClient.SqlConnection)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_spscustomeraccount.AddOneRow(System.Data.SqlClient.SqlCommand)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_subscriptions">
            <summary>
            A class representing T_subscriptions table
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_subscriptions.AddOneRow(System.Data.SqlClient.SqlConnection,System.Int64,System.Int64)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_subscriptions.AddOneRow(System.Data.SqlClient.SqlCommand,System.Int64,System.Int64)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_subscriptions.AddOneRow(System.Data.SqlClient.SqlConnection,System.Int64,System.Int64,System.Int32)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_subscriptions.AddOneRow(System.Data.SqlClient.SqlCommand,System.Int64,System.Int64,System.Int32)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_subscriptions.AddOneRow(System.Data.SqlClient.SqlConnection,System.Int64,System.Int64,System.Int32,System.String,System.DateTime)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_subscriptions.UpdateOneRow(System.Data.SqlClient.SqlConnection,System.Int64)">
            <summary>
            UpdateOneRow
            This is a kind of meaningless update only to trigger update flag for replication
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_subscriptions.UpdateOneRow(System.Data.SqlClient.SqlCommand,System.Int64)">
            <summary>
            UpdateOneRow
            This is a kind of meaningless update only to trigger update flag for replication
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_subscriptions.GetContent(System.Data.SqlClient.SqlConnection,System.Int64,System.Int64)">
            <summary>
            GetContent
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_subscriptions.GetContent(System.Data.SqlClient.SqlConnection,System.Int64,System.Int64,System.Int32,System.String,System.DateTime)">
            <summary>
            GetContent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_title_culture_details">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_title_feature_data">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_title_offers">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_titles">
            <summary>
            A class representing T_titles
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_titles.FindNextTitleId(System.Data.SqlClient.SqlCommand,System.Byte)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_titles.FindNextTitleId(System.Data.SqlClient.SqlConnection,System.Byte)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_titles.AddOneRow(System.Data.SqlClient.SqlConnection,System.Byte)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_titles.AddOneRow(System.Data.SqlClient.SqlConnection,System.Byte,System.Int32)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_titles.AddOneRow(System.Data.SqlClient.SqlCommand,System.Byte,System.Int32)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_titles.GetOneTitle(System.Data.SqlClient.SqlConnection,System.Byte)">
            <summary>
            GetOneTitle
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_user_musicnet_accounts">
            <summary>
            A class representing T_user_musicnet_accounts table
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_user_musicnet_accounts.AddOneRow(System.Data.SqlClient.SqlConnection,System.Int64)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_user_musicnet_accounts.AddOneRow(System.Data.SqlClient.SqlCommand,System.Int64)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_user_musicnet_accounts.UpdateOneRow(System.Data.SqlClient.SqlConnection,System.Int64)">
            <summary>
            UpdateOneRow
            This is a kind of meaningless update only to trigger update flag for replication
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_user_musicnet_accounts.UpdateOneRow(System.Data.SqlClient.SqlCommand,System.Int64)">
            <summary>
            UpdateOneRow
            This is a kind of meaningless update only to trigger update flag for replication
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_user_musicnet_accounts.GetContent(System.Data.SqlClient.SqlConnection,System.Int64)">
            <summary>
            GetContent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_user_per_client_type_data">
            <summary>
            A class representing T_user_per_client_type_data table
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_user_per_client_type_data.AddOneRow(System.Data.SqlClient.SqlConnection,System.Int64,System.Byte,System.Byte,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_user_per_client_type_data.AddOneRow(System.Data.SqlClient.SqlCommand,System.Int64,System.Byte,System.Byte,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_user_per_client_type_data_weekly">
            <summary>
            A class representing T_user_per_client_type_data_weekly table
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_user_per_client_type_data_weekly.AddOneRow(System.Data.SqlClient.SqlConnection,System.Int64,System.Byte,System.Byte,System.DateTime,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_user_per_client_type_data_weekly.AddOneRow(System.Data.SqlClient.SqlCommand,System.Int64,System.Byte,System.Byte,System.DateTime,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_user_settings">
            <summary>
            A class representing T_user_settings table
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_user_settings.AddOneRow(System.Data.SqlClient.SqlConnection,System.Int64,System.Int32,System.Int32)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_user_settings.GetContent(System.Data.SqlClient.SqlConnection,System.Int64,System.Int32,System.Int32)">
            <summary>
            GetContent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_users">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_users.#ctor">
            <summary>
            Constructors
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_users.AddOneRow(System.Data.SqlClient.SqlConnection)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_users.AddOneRow(System.Data.SqlClient.SqlCommand)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_users.AddOneRow(System.Data.SqlClient.SqlConnection,System.Int64)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_users.AddOneRow(System.Data.SqlClient.SqlCommand,System.Int64)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_users.AddOneRow(System.Data.SqlClient.SqlConnection,System.Int64,System.Byte)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_users.AddOneRow(System.Data.SqlClient.SqlCommand,System.Int64,System.Byte)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_users.AddOneRow(System.Data.SqlClient.SqlConnection,System.Int64,System.DateTime,System.DateTime,System.Int32)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_users.AddOneRow(System.Data.SqlClient.SqlCommand,System.Int64,System.DateTime,System.DateTime,System.Int32)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_users.AddMultipleRowsInTrans(System.Data.SqlClient.SqlConnection,System.Int64,System.Int32)">
            <summary>
            AddMultipleRowsInTrans
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_users.UpdateMultipleRowsInTrans(System.Data.SqlClient.SqlConnection,System.Int64,System.Int32)">
            <summary>
            AddMultipleRowsInTrans
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_users.UpdateOneRow(System.Data.SqlClient.SqlConnection,System.Int64)">
            <summary>
            UpdateOneRow
            This is a kind of meaningless update only to trigger update flag for replication
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_users.UpdateOneRow(System.Data.SqlClient.SqlCommand,System.Int64)">
            <summary>
            UpdateOneRow
            This is a kind of meaningless update only to trigger update flag for replication
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_users.GetContent(System.Data.SqlClient.SqlConnection,System.Int64)">
            <summary>
            GetContent
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_users.GetContent(System.Data.SqlClient.SqlConnection,System.Int64,System.String)">
            <summary>
            GetContent
            szTable should be "t_users" or "t_users_rt"
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_users_rt">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_users_rt.GetContent(System.Data.SqlClient.SqlConnection,System.Int64)">
            <summary>
            GetContent
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_users_rt.#ctor">
            <summary>
            Constructors
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_xmsg_user_titles">
            <summary>
            A class representing T_xmsg_user_titles table
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_xmsg_user_titles.AddOneRow(System.Data.SqlClient.SqlConnection,System.Int64,System.Int32,System.Int32)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_xmsg_user_titles.AddOneRow(System.Data.SqlClient.SqlCommand,System.Int64,System.Int32,System.Int32)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_xmsg_user_titles.AddOneRow(System.Data.SqlClient.SqlConnection,System.Int64,System.Int32)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_xmsg_user_titles.AddOneRow(System.Data.SqlClient.SqlCommand,System.Int64,System.Int32)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_xmsg_user_titles.AddOneRow(System.Data.SqlClient.SqlConnection,System.Int64)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_xmsg_user_titles.UpdateOneRow(System.Data.SqlClient.SqlConnection,System.Int64)">
            <summary>
            UpdateOneRow
            This is a kind of meaningless update only to trigger update flag for replication
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_xmsg_user_titles.UpdateOneRow(System.Data.SqlClient.SqlCommand,System.Int64)">
            <summary>
            UpdateOneRow
            This is a kind of meaningless update only to trigger update flag for replication
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_xmsg_user_titles.GetContent(System.Data.SqlClient.SqlConnection,System.Int64,System.Int32)">
            <summary>
            GetContent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.DailyProcessing_GameUsage_Verification">
            <summary>
            
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailyProcessing_GameUsage_Verification.#ctor(ServerTestFramework.STFLive.Database.ReportingDB,System.DateTime,System.DateTime)">
            <summary>
            
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailyProcessing_GameUsage_Verification.VerifyFactTableSingle(System.String,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.DailyProcessing_GameUsage_Verification_BVT">
            <summary>
            
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.OlapReportData">
            <summary>
            ReportingData object to submit queries to OlapDB for reports
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.OlapReportData.m_Source">
            <summary>
            Data source: UODB, SSIS, ReportingDB, etc
            </summary>        
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.OlapReportData.m_DataType">
            <summary>
            Get internal data type (Queries, Raw, Counts)
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.OlapReportData.m_Queries">
            <summary>
            List of queries
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.OlapReportData.m_RawData">
            <summary>
            Raw object data (Caller must know how to cast the data)
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.OlapReportData.m_ReportType">
            <summary>
            Report that this data object maps to
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.OlapReportData.RunDebugQuery">
            <summary>
            Run a query in OLAPDB to obtain the raw data
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.OlapReportData.InitializeDataObject(ServerTestFramework.STFLive.Reporting.XBLReports)">
            <summary>
            Initialize ReportingData object.
            ** In the future this should be modified to generate dynamic data **
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.OlapReportData.GetReportDataQueries(System.String)">
            <summary>
            Parse the Report Test Script and extract all OLAP queries with their respective
            report section and test case.
            </summary>
            <param name="TestScriptFileName">Report Test script file</param>
            <returns>Hashtable in the form of (Key)ReportQueryNumber (Value)|ReportSectionNumber|TestCaseNumber|Query|</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.OlapReportData.ObjectType">
            <summary>
             Get ReportingData object type
            </summary>        
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.CleanserTCPEvent">
            <summary>
            CleanserTCPEvent
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.CleanserTCPEvent.#ctor">
            <summary>
            CleanserTCPEvent constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.CleanserTCPEvent.ConnectToCleanser(System.Int32,System.Int32)">
            <summary>
            ConnectToCleanser
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.CleanserTCPEvent.DisconnectFromCleanser(System.Int32)">
            <summary>
            DisconnectFromCleanser
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.CleanserTCPEvent.SocketSend(System.Int32,System.Byte[])">
            <summary>
            SocketSend
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.CleanserTCPEvent.SendMessage(System.Int32,System.Int32,System.String)">
            <summary>
            SendMessage
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.MigrateAccountTCPEvent">
            <summary>
            MigrateAccountTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ProvisionTCPEvent">
            <summary>
            ProvisionTCPEvent 
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.DeprovisionTCPEvent">
            <summary>
            DeprovisionTCPEvent 
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ContentTCPEvent">
            <summary>
            ContentTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ContentXeTCPEvent">
            <summary>
            ContentXeTCPEvent - Not Done
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.PresenceTitleStartTCPEvent">
            <summary>
            PresenceTitleStartTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.PresenceTitleEndTCPEvent">
            <summary>
            PresenceTitleEndTCPEvent 
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.SessionStartTCPEvent">
            <summary>
            SessionStartTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.SessionEndTCPEvent">
            <summary>
            SessionEndTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.PresenceGuestTCPEvent">
            <summary>
            PresenceGuestTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.XePurchaseTCPEvent">
            <summary>
            XePurchaseTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.EliteMigrationTCPEvent">
            <summary>
            EliteMigrationTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.GenericTCPEvent">
            <summary>
            ContentTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ArgonTCPEvent">
            <summary>
            ArgonTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.GeoFenceOfferPurchaseTCPEvent">
            <summary>
            GeoFenceOfferPurchaseTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.GeoFenceContentReferralTCPEvent">
            <summary>
            GeoFenceContentReferralTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.GeoFenceVideoPurchaseTCPEvent">
            <summary>
            GeoFenceVideoPurchaseTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.GeoFenceVideoAcquireURLTCPEvent">
            <summary>
            GeoFenceVideoAcquireURLTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.GeoFenceVideoAcquireLicenseTCPEvent">
            <summary>
            GeoFenceVideoAcquireLicenseTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.BannerViewAggTCPEvent">
            <summary>
            BannerViewAggTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.BannerViewTCPEvent">
            <summary>
            BannerViewTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.BannerClickAggTCPEvent">
            <summary>
            BannerClickAggTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.BannerClickTCPEvent">
            <summary>
            BannerClickTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.BannerPurchaseTCPEvent">
            <summary>
            BannerPurchaseTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.BannerPurchaseAggTCPEvent">
            <summary>
            BannerPurchaseAggTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.FusionTCPEvent">
            <summary>
            FusionTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.FusionAggTCPEvent">
            <summary>
            FusionAggTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.LicenseTCPEvent">
            <summary>
            LicenseTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.PurchaseOfferTCPEvent">
            <summary>
            PurchaseOfferTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.OlapDailyProcessingData">
            <summary>
            GameUsageFactData
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.OlapDailyProcessingData.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.OlapDailyProcessingData.Source">
            <summary>
            Data source: UODB, SSIS, ReportingDB, etc
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.OlapDailyProcessingData.ObjectType">
            <summary>
             Get ReportingData object type
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.OlapDailyProcessingData.DataType">
            <summary>
            Get internal data type (Queries, Raw, Counts)
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.OlapDailyProcessingBVTData">
            <summary>
            GameUsageFactData
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.OlapGenericData">
            <summary>
            Generic Olap Data class
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.OlapGenericData.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.OlapGenericData.Source">
            <summary>
            Data source: UODB, SSIS, ReportingDB, etc
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.OlapGenericData.ObjectType">
            <summary>
             Get ReportingData object type
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.OlapGenericData.DataType">
            <summary>
            Get internal data type (Queries, Raw, Counts)
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.OlapGenericData.TableCounts">
            <summary>
            ReportingData is a series of tables and respective row counts
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.OlapGenericData.RawData">
            <summary>
            Raw object data (Caller must know how to cast the data)
            </summary>
        </member>
        <member name="F:RealtimeDBStressData.m_Source">
            <summary>
            Data source: UODB, SSIS, ReportingDB, etc
            </summary>
        </member>
        <member name="F:RealtimeDBStressData.m_ObjectType">
            <summary>
             Get ReportingData object type
            </summary>
        </member>
        <member name="F:RealtimeDBStressData.m_DataType">
            <summary>
            Get internal data type (Queries, Raw, Counts)
            </summary>
        </member>
        <member name="F:RealtimeDBStressData.m_Queries">
            <summary>
            List of queries
            </summary>
        </member>
        <member name="M:RealtimeDBStressData.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.RealtimeDBStressDataLoader">
            <summary>
            This class contains the logic necessary to load Data objects into the Reporting Realtime Database
            or FilterDB databases that feed the Realtime system.
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.RealtimeDBStressDataLoader.m_MinUserIndex">
            <summary>
            UserPuid index - Puid to use in the next data generation
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.RealtimeDBStressDataLoader.m_Titles">
            <summary>
            Array of titles to use
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.RealtimeDBStressDataLoader.m_Offers">
            <summary>
            Array of offers to use
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.RealtimeDBStressDataLoader.m_TargetTable">
            <summary>
            Target table to insert data into
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.RealtimeDBStressDataLoader.GetSupportedDatabases">
            <summary>
            Get the database names supported by this loader object
            </summary>
            <returns>List of database names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.RealtimeDBStressDataLoader.InjectSingleData">
            <summary>
            This method creates a SQL query to add a single row of data into specific tables of a database.
            </summary>        
            <returns>SQL string to add data</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.RealtimeDBStressDataLoader.IncreaseUserDataIndex">
            <summary>
            Internal function to increase data index
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.RealtimeDBStressDataLoader.MinUserIndex">
            <summary>
            Initialize the data index
            </summary>
            <param name="SeedIndex">Seed value to use</param>
        </member>
        <member name="M:ServerTestFramework.Reporting.RegDB.OpenSQLConnection">
            <summary>
            Asynchronously attempts to connect to all RegDB server IPs and returns as soon as a successful connection is made.
            Once one is found, the server name is cached so subsequent attempts return much quicker.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Reporting.RegDBInfo">
            <summary>
            Get information from RegDB.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Reporting.RegDBInfo.Close">
            <summary>
            close the sql connection
            </summary>
        </member>
        <member name="M:ServerTestFramework.Reporting.RegDBInfo.GetAllSuites">
            <summary>
            Retrieves a list of all suites in RegDB
            </summary>
        </member>
        <member name="M:ServerTestFramework.Reporting.RegDBInfo.GetAllEnvironments">
            <summary>
            Retrieves a list of all environments in RegDB, with an array that can be indexed by environmentID
            </summary>
        </member>
        <member name="M:ServerTestFramework.Reporting.RegDBInfo.GetAllBuilds">
            <summary>
            Retrieves a list of all build runs in RegDB
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Reporting.RegDBInfo.GetSuitePassCountForBuild(System.String,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Gets the pass and total count for a build for a suite
            </summary>
        </member>
        <member name="M:ServerTestFramework.Reporting.RegDBInfo.GetSuiteTree(System.String)">
            <summary>
            Gets RegDB's view of a suite's tree
            </summary>
        </member>
        <member name="M:ServerTestFramework.Reporting.RegDBInfo.GetLeafPassFail(System.String,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Gets whether a test leaf node passed or ran
            </summary>
        </member>
        <member name="M:ServerTestFramework.Reporting.RegDBInfo.GetNodeOutputToReportDestination(System.String,System.Int32,ServerTestFramework.Report.Destination)">
            <summary>
            Retrieves output from RegDB and throws it at a report destination
            </summary>
        </member>
        <member name="T:ServerTestFramework.Reporting.RegDBTreeReader">
            <summary>
            Retrieves a node tree containing every test group and case that RegDB contains for a specific suite.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Reporting.RegDBInquirer">
            <summary>
            Represents a specific component (suite, group or case) on which queries can be performed.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Reporting.RegDBInquirer.#ctor(System.String)">
            <summary>
            This query is about a specific test suite.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Reporting.RegDBInquirer.#ctor(System.String,System.String)">
            <summary>
            This query is about a specific test group.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Reporting.RegDBInquirer.#ctor(System.String,System.String,System.String)">
            <summary>
            This query is about a specific test case.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Reporting.RegDBInquirer.GetHistory">
            <summary>
            Retrieves the history of the component that this object represents.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Reporting.RegDBInquirer.GetLog(ServerTestFramework.Reporting.RegDBInquirer.RegDBHistory)">
            <summary>
            Retrieves the output from a specific build of the component represented by this object.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Reporting.RegDBInquirer.GetLog(ServerTestFramework.Reporting.RegDBInquirer.RegDBHistory,ServerTestFramework.Report.Destination)">
            <summary>
            Retrieves the output from a specific build of the component represented by this object.
            /// if outDst is non-null, then the log is pushed into a specific reporting destination rather than returned as a string
            </summary>
        </member>
        <member name="M:ServerTestFramework.Reporting.RegDBInquirer.GetLog(System.String,System.String,System.UInt32)">
            <summary>
            Retrieves the output from a specific build of the component represented by this object.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Reporting.RegDBInquirer.GetLog(System.UInt32)">
            <summary>
            Retrieves the output from a specific build of the component represented by this object.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Reporting.RegDBInquirer.GetLog(System.UInt32,ServerTestFramework.Report.Destination)">
            <summary>
            Retrieves the output from a specific build of the component represented by this object.
            if outDst is non-null, then the log is pushed into a specific reporting destination rather than returned as a string
            </summary>
        </member>
        <member name="M:ServerTestFramework.Reporting.RegDBInquirer.CancelGetLog">
            <summary>
            Cancels a currently running GetLog() request.
            This blocks until log retrieval is actually halted.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Reporting.RegDBInquirer.RegDBHistory">
            <summary>
            represents a pass/fail entry for as specific build of a component.
            </summary>
        </member>
        <member name="T:ServerTestFramework.TestDB.TestDB">
            <summary> Used to open a connection with TestDB. </summary>
        </member>
        <member name="M:ServerTestFramework.TestDB.TestDB.OpenConnection">
            <summary> Opens a connection to the default TestDB.  You are responsible for closing the returned connection. </summary>
        </member>
        <member name="M:ServerTestFramework.TestDB.TestDB.OpenConnection(System.String)">
            <summary> Opens a connection to a TestDB.  You are responsible for closing the returned connection. </summary>
        </member>
        <member name="T:ServerTestFramework.TestDB.TestDBConnector">
            <summary> Used as a base class for classes that reuse a connection to TestDB. </summary>
        </member>
        <member name="M:ServerTestFramework.TestDB.TestDBConnector.#ctor">
            <summary> Connects to TestDB to prepare to read. </summary>
        </member>
        <member name="M:ServerTestFramework.TestDB.TestDBConnector.Dispose">
            <summary> Closes the connection to TestDB. </summary>
        </member>
        <member name="T:ServerTestFramework.TestDB.TestDBReader">
            <summary> Used to read data from TestDB. </summary>
        </member>
        <member name="M:ServerTestFramework.TestDB.TestDBReader.ClearCache">
            <summary> Clears all cached TestDB data. </summary>
        </member>
        <member name="M:ServerTestFramework.TestDB.TestDBReader.GetRootNodeNames">
            <summary> Gets a list of the names of all root nodes. </summary>
        </member>
        <member name="M:ServerTestFramework.TestDB.TestDBReader.GetVersionList">
            <summary> Gets a list of all versions. </summary>
        </member>
        <member name="M:ServerTestFramework.TestDB.TestDBReader.GetEnvironmentList">
            <summary> Gets a list of all environments. </summary>
        </member>
        <member name="M:ServerTestFramework.TestDB.TestDBReader.GetEnvironment(System.Int32)">
            <summary> Given a specific environment ID, returns information about that enviornment. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetRatingAverages(System.Guid,System.DateTime,System.Boolean,System.String@,System.DateTime@,System.Xml.XmlNode@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.BeginGetRatingAverages(System.Guid,System.DateTime,System.Boolean,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.EndGetRatingAverages(System.IAsyncResult,System.String@,System.DateTime@,System.Xml.XmlNode@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetRatingAveragesAsync(System.Guid,System.DateTime,System.Boolean,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetRatingAveragesAsync(System.Guid,System.DateTime,System.Boolean,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetDeltaRatingAverages(System.Guid,System.DateTime,System.Boolean,System.String@,System.DateTime@,System.Xml.XmlNode@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.BeginGetDeltaRatingAverages(System.Guid,System.DateTime,System.Boolean,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.EndGetDeltaRatingAverages(System.IAsyncResult,System.String@,System.DateTime@,System.Xml.XmlNode@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetDeltaRatingAveragesAsync(System.Guid,System.DateTime,System.Boolean,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetDeltaRatingAveragesAsync(System.Guid,System.DateTime,System.Boolean,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetUnauthRatingAverages(System.Guid,System.DateTime,System.String@,System.DateTime@,System.Xml.XmlNode@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.BeginGetUnauthRatingAverages(System.Guid,System.DateTime,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.EndGetUnauthRatingAverages(System.IAsyncResult,System.String@,System.DateTime@,System.Xml.XmlNode@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetUnauthRatingAveragesAsync(System.Guid,System.DateTime,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetUnauthRatingAveragesAsync(System.Guid,System.DateTime,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetDeltaUnauthRatingAverages(System.Guid,System.DateTime,System.String@,System.DateTime@,System.Xml.XmlNode@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.BeginGetDeltaUnauthRatingAverages(System.Guid,System.DateTime,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.EndGetDeltaUnauthRatingAverages(System.IAsyncResult,System.String@,System.DateTime@,System.Xml.XmlNode@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetDeltaUnauthRatingAveragesAsync(System.Guid,System.DateTime,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetDeltaUnauthRatingAveragesAsync(System.Guid,System.DateTime,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetRatingAveragesWithReviewCount(System.Guid,System.DateTime,System.Boolean,System.String@,System.DateTime@,System.Xml.XmlNode@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.BeginGetRatingAveragesWithReviewCount(System.Guid,System.DateTime,System.Boolean,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.EndGetRatingAveragesWithReviewCount(System.IAsyncResult,System.String@,System.DateTime@,System.Xml.XmlNode@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetRatingAveragesWithReviewCountAsync(System.Guid,System.DateTime,System.Boolean,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetRatingAveragesWithReviewCountAsync(System.Guid,System.DateTime,System.Boolean,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetDeltaRatingAveragesWithReviewCount(System.Guid,System.DateTime,System.Boolean,System.String@,System.DateTime@,System.Xml.XmlNode@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.BeginGetDeltaRatingAveragesWithReviewCount(System.Guid,System.DateTime,System.Boolean,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.EndGetDeltaRatingAveragesWithReviewCount(System.IAsyncResult,System.String@,System.DateTime@,System.Xml.XmlNode@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetDeltaRatingAveragesWithReviewCountAsync(System.Guid,System.DateTime,System.Boolean,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetDeltaRatingAveragesWithReviewCountAsync(System.Guid,System.DateTime,System.Boolean,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetRatingAveragesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetDeltaRatingAveragesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetUnauthRatingAveragesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetDeltaUnauthRatingAveragesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetRatingAveragesWithReviewCountCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetDeltaRatingAveragesWithReviewCountCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.aggregator.GetRatingAveragesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.aggregator.GetRatingAveragesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetRatingAveragesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetRatingAveragesCompletedEventArgs.transactionToken">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetRatingAveragesCompletedEventArgs.transactionStartTime">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetRatingAveragesCompletedEventArgs.results">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.aggregator.GetDeltaRatingAveragesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.aggregator.GetDeltaRatingAveragesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetDeltaRatingAveragesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetDeltaRatingAveragesCompletedEventArgs.transactionToken">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetDeltaRatingAveragesCompletedEventArgs.transactionStartTime">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetDeltaRatingAveragesCompletedEventArgs.results">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.aggregator.GetUnauthRatingAveragesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.aggregator.GetUnauthRatingAveragesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetUnauthRatingAveragesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetUnauthRatingAveragesCompletedEventArgs.transactionToken">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetUnauthRatingAveragesCompletedEventArgs.transactionStartTime">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetUnauthRatingAveragesCompletedEventArgs.results">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.aggregator.GetDeltaUnauthRatingAveragesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.aggregator.GetDeltaUnauthRatingAveragesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetDeltaUnauthRatingAveragesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetDeltaUnauthRatingAveragesCompletedEventArgs.transactionToken">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetDeltaUnauthRatingAveragesCompletedEventArgs.transactionStartTime">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetDeltaUnauthRatingAveragesCompletedEventArgs.results">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.aggregator.GetRatingAveragesWithReviewCountCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.aggregator.GetRatingAveragesWithReviewCountCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetRatingAveragesWithReviewCountCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetRatingAveragesWithReviewCountCompletedEventArgs.transactionToken">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetRatingAveragesWithReviewCountCompletedEventArgs.transactionStartTime">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetRatingAveragesWithReviewCountCompletedEventArgs.results">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.aggregator.GetDeltaRatingAveragesWithReviewCountCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.aggregator.GetDeltaRatingAveragesWithReviewCountCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetDeltaRatingAveragesWithReviewCountCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetDeltaRatingAveragesWithReviewCountCompletedEventArgs.transactionToken">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetDeltaRatingAveragesWithReviewCountCompletedEventArgs.transactionStartTime">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetDeltaRatingAveragesWithReviewCountCompletedEventArgs.results">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.MultiRating">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.AdvanceState(System.Guid,System.Object,System.Int64,System.Guid,System.String[],System.String[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginAdvanceState(System.Guid,System.Object,System.Int64,System.Guid,System.String[],System.String[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndAdvanceState(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.AdvanceStateAsync(System.Guid,System.Object,System.Int64,System.Guid,System.String[],System.String[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.AdvanceStateAsync(System.Guid,System.Object,System.Int64,System.Guid,System.String[],System.String[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetNickname(System.Int64,System.Guid,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginGetNickname(System.Int64,System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndGetNickname(System.IAsyncResult,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetNicknameAsync(System.Int64,System.Guid)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetNicknameAsync(System.Int64,System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetNicknameSuggestions(System.String,System.String[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginGetNicknameSuggestions(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndGetNicknameSuggestions(System.IAsyncResult,System.String[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetNicknameSuggestionsAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetNicknameSuggestionsAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingAverage(System.Guid,System.Object,ServerTestFramework.LiveService.msnrr.multi.Rating@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginGetRatingAverage(System.Guid,System.Object,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndGetRatingAverage(System.IAsyncResult,ServerTestFramework.LiveService.msnrr.multi.Rating@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingAverageAsync(System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingAverageAsync(System.Guid,System.Object,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingAverageRollup(System.Guid,System.Object,ServerTestFramework.LiveService.msnrr.multi.Rating@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginGetRatingAverageRollup(System.Guid,System.Object,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndGetRatingAverageRollup(System.IAsyncResult,ServerTestFramework.LiveService.msnrr.multi.Rating@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingAverageRollupAsync(System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingAverageRollupAsync(System.Guid,System.Object,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingByUser(System.Guid,System.Object,System.Int64,System.Guid,ServerTestFramework.LiveService.msnrr.multi.Rating@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginGetRatingByUser(System.Guid,System.Object,System.Int64,System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndGetRatingByUser(System.IAsyncResult,ServerTestFramework.LiveService.msnrr.multi.Rating@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingByUserAsync(System.Guid,System.Object,System.Int64,System.Guid)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingByUserAsync(System.Guid,System.Object,System.Int64,System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingByUserWithAverage(System.Guid,System.Object,System.Int64,System.Guid,ServerTestFramework.LiveService.msnrr.multi.Rating@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginGetRatingByUserWithAverage(System.Guid,System.Object,System.Int64,System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndGetRatingByUserWithAverage(System.IAsyncResult,ServerTestFramework.LiveService.msnrr.multi.Rating@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingByUserWithAverageAsync(System.Guid,System.Object,System.Int64,System.Guid)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingByUserWithAverageAsync(System.Guid,System.Object,System.Int64,System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetMultipleRatingsByUser(System.Guid,System.Object[],System.Int64,System.Guid,ServerTestFramework.LiveService.msnrr.multi.Rating[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginGetMultipleRatingsByUser(System.Guid,System.Object[],System.Int64,System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndGetMultipleRatingsByUser(System.IAsyncResult,ServerTestFramework.LiveService.msnrr.multi.Rating[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetMultipleRatingsByUserAsync(System.Guid,System.Object[],System.Int64,System.Guid)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetMultipleRatingsByUserAsync(System.Guid,System.Object[],System.Int64,System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingsByUser(System.Guid,System.Int64,System.Guid@,System.Guid,ServerTestFramework.LiveService.msnrr.multi.Rating[]@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginGetRatingsByUser(System.Guid,System.Int64,System.Guid,System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndGetRatingsByUser(System.IAsyncResult,System.Guid@,ServerTestFramework.LiveService.msnrr.multi.Rating[]@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingsByUserAsync(System.Guid,System.Int64,System.Guid,System.Guid)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingsByUserAsync(System.Guid,System.Int64,System.Guid,System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetReviewByUser(System.Guid,System.Object,System.Int64,System.Guid,ServerTestFramework.LiveService.msnrr.multi.Review@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginGetReviewByUser(System.Guid,System.Object,System.Int64,System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndGetReviewByUser(System.IAsyncResult,ServerTestFramework.LiveService.msnrr.multi.Review@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetReviewByUserAsync(System.Guid,System.Object,System.Int64,System.Guid)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetReviewByUserAsync(System.Guid,System.Object,System.Int64,System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetReviews(System.Guid,System.Object,System.Int32@,System.Int32@,System.String@,System.String@,System.Int32@,ServerTestFramework.LiveService.msnrr.multi.Review[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginGetReviews(System.Guid,System.Object,System.Int32,System.Int32,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndGetReviews(System.IAsyncResult,System.Int32@,System.Int32@,System.String@,System.String@,System.Int32@,ServerTestFramework.LiveService.msnrr.multi.Review[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetReviewsAsync(System.Guid,System.Object,System.Int32,System.Int32,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetReviewsAsync(System.Guid,System.Object,System.Int32,System.Int32,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetReviewsByUser(System.Guid,System.Int64,System.Guid,System.Guid,ServerTestFramework.LiveService.msnrr.multi.Review[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginGetReviewsByUser(System.Guid,System.Int64,System.Guid,System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndGetReviewsByUser(System.IAsyncResult,ServerTestFramework.LiveService.msnrr.multi.Review[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetReviewsByUserAsync(System.Guid,System.Int64,System.Guid,System.Guid)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetReviewsByUserAsync(System.Guid,System.Int64,System.Guid,System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetReviewsRollup(System.Guid,System.Object,System.Int32@,System.Int32@,System.String@,System.String@,System.Int32@,ServerTestFramework.LiveService.msnrr.multi.Review[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginGetReviewsRollup(System.Guid,System.Object,System.Int32,System.Int32,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndGetReviewsRollup(System.IAsyncResult,System.Int32@,System.Int32@,System.String@,System.String@,System.Int32@,ServerTestFramework.LiveService.msnrr.multi.Review[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetReviewsRollupAsync(System.Guid,System.Object,System.Int32,System.Int32,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetReviewsRollupAsync(System.Guid,System.Object,System.Int32,System.Int32,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetUnauthRatings(System.Guid,System.Object,System.Guid,System.Int32,System.Int32[]@,System.Int64[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginGetUnauthRatings(System.Guid,System.Object,System.Guid,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndGetUnauthRatings(System.IAsyncResult,System.Int32[]@,System.Int64[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetUnauthRatingsAsync(System.Guid,System.Object,System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetUnauthRatingsAsync(System.Guid,System.Object,System.Guid,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveNickname(System.Int64,System.Guid,System.String,System.String[]@,ServerTestFramework.LiveService.msnrr.multi.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginSaveNickname(System.Int64,System.Guid,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndSaveNickname(System.IAsyncResult,System.String[]@,ServerTestFramework.LiveService.msnrr.multi.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveNicknameAsync(System.Int64,System.Guid,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveNicknameAsync(System.Int64,System.Guid,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveRating(System.Guid,System.Object,System.Int64,System.Guid,System.Guid[],System.Int32[],ServerTestFramework.LiveService.msnrr.multi.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginSaveRating(System.Guid,System.Object,System.Int64,System.Guid,System.Guid[],System.Int32[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndSaveRating(System.IAsyncResult,ServerTestFramework.LiveService.msnrr.multi.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveRatingAsync(System.Guid,System.Object,System.Int64,System.Guid,System.Guid[],System.Int32[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveRatingAsync(System.Guid,System.Object,System.Int64,System.Guid,System.Guid[],System.Int32[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BulkSaveRating(System.Guid,System.Object,System.Int64,System.Guid,System.Guid[],System.Int32[],System.DateTime,ServerTestFramework.LiveService.msnrr.multi.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginBulkSaveRating(System.Guid,System.Object,System.Int64,System.Guid,System.Guid[],System.Int32[],System.DateTime,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndBulkSaveRating(System.IAsyncResult,ServerTestFramework.LiveService.msnrr.multi.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BulkSaveRatingAsync(System.Guid,System.Object,System.Int64,System.Guid,System.Guid[],System.Int32[],System.DateTime)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BulkSaveRatingAsync(System.Guid,System.Object,System.Int64,System.Guid,System.Guid[],System.Int32[],System.DateTime,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveReportViolation(System.Object,System.Guid,System.String,System.String,System.String,ServerTestFramework.LiveService.msnrr.multi.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginSaveReportViolation(System.Object,System.Guid,System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndSaveReportViolation(System.IAsyncResult,ServerTestFramework.LiveService.msnrr.multi.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveReportViolationAsync(System.Object,System.Guid,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveReportViolationAsync(System.Object,System.Guid,System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveReview(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Guid[],System.Int32[],System.String,ServerTestFramework.LiveService.msnrr.multi.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginSaveReview(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Guid[],System.Int32[],System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndSaveReview(System.IAsyncResult,ServerTestFramework.LiveService.msnrr.multi.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveReviewAsync(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Guid[],System.Int32[],System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveReviewAsync(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Guid[],System.Int32[],System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BulkSaveReview(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Guid[],System.Int32[],System.String,System.DateTime,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginBulkSaveReview(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Guid[],System.Int32[],System.String,System.DateTime,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndBulkSaveReview(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BulkSaveReviewAsync(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Guid[],System.Int32[],System.String,System.DateTime,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BulkSaveReviewAsync(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Guid[],System.Int32[],System.String,System.DateTime,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveReviewHelpfulness(System.Object,System.Int64,System.Guid,System.Guid,System.Int32,ServerTestFramework.LiveService.msnrr.multi.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginSaveReviewHelpfulness(System.Object,System.Int64,System.Guid,System.Guid,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndSaveReviewHelpfulness(System.IAsyncResult,ServerTestFramework.LiveService.msnrr.multi.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveReviewHelpfulnessAsync(System.Object,System.Int64,System.Guid,System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveReviewHelpfulnessAsync(System.Object,System.Int64,System.Guid,System.Guid,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveUnauthRatings(System.Guid,System.Object,System.Guid,System.Int32[],System.Int32[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginSaveUnauthRatings(System.Guid,System.Object,System.Guid,System.Int32[],System.Int32[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndSaveUnauthRatings(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveUnauthRatingsAsync(System.Guid,System.Object,System.Guid,System.Int32[],System.Int32[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveUnauthRatingsAsync(System.Guid,System.Object,System.Guid,System.Int32[],System.Int32[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.ValidateReview(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Guid[],System.Int32[],System.String,ServerTestFramework.LiveService.msnrr.multi.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginValidateReview(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Guid[],System.Int32[],System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndValidateReview(System.IAsyncResult,ServerTestFramework.LiveService.msnrr.multi.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.ValidateReviewAsync(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Guid[],System.Int32[],System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.ValidateReviewAsync(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Guid[],System.Int32[],System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.AdvanceStateCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetNicknameCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetNicknameSuggestionsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingAverageCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingAverageRollupCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingByUserCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingByUserWithAverageCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetMultipleRatingsByUserCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingsByUserCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetReviewByUserCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetReviewsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetReviewsByUserCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetReviewsRollupCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetUnauthRatingsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveNicknameCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveRatingCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BulkSaveRatingCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveReportViolationCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveReviewCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BulkSaveReviewCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveReviewHelpfulnessCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveUnauthRatingsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.ValidateReviewCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.ValidationError">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ValidationError.DataField">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ValidationError.Code">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ValidationError.ID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ValidationError.MaxLength">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.Field">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Field.empty">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Field.nickname">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Field.ratingItemID">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Field.reviewFieldID">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Field.title">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Field.customProperty">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Field.name">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Field.email">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Field.comments">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Field.score">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.Type">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Type.RequiredFieldMissing">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Type.TextTooLong">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Type.TextInvalidChars">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Type.TextProfanity">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Type.InvalidFormat">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Type.TooManyChanges">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Type.AlreadyTaken">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Type.ReviewsRequireRatings">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Type.ReviewsRequireOneField">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Type.UserCannotRateOwnReview">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.Helpfulness">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Helpfulness.Count">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Helpfulness.Sum">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Helpfulness.Error">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Helpfulness.ErrorSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Helpfulness.CurrentUser">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Helpfulness.CurrentUserSpecified">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.ReviewField">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ReviewField.Error">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ReviewField.ErrorSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ReviewField.ID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ReviewField.IDSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ReviewField.Label">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ReviewField.MaxLength">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ReviewField.MaxLengthSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ReviewField.Cols">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ReviewField.ColsSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ReviewField.Rows">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ReviewField.RowsSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ReviewField.Rank">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ReviewField.RankSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ReviewField.Required">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ReviewField.RequiredSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ReviewField.Description">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ReviewField.Value">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.User">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.User.Nickname">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.User.ID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.User.IDSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.User.Error">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.User.ErrorSpecified">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.Review">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Review.Item">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Review.Date">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Review.DateSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Review.User">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Review.CustomProperty">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Review.Rating">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Review.Title">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Review.Field">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Review.Helpfulness">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Review.ID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Review.IDSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Review.Error">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Review.ErrorSpecified">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.ItemID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ItemID.StringID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ItemID.LongID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ItemID.GuidID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ItemID.GuidIDSpecified">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.Rating">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Rating.Item">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Rating.RatingItem">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Rating.OverallRating">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Rating.Date">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Rating.DateSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Rating.Error">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Rating.ErrorSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Rating.TotalCount">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Rating.TotalCountSpecified">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.RatingAttribute">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.RatingItem">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.RatingItem.ID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.RatingItem.IDSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.RatingItem.Label">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.RatingItem.Error">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.RatingItem.ErrorSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.RatingItem.Description">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.RatingItem.Rank">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.RatingItem.RankSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.RatingItem.Required">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.RatingItem.RequiredSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.RatingAttribute.AverageValue">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.RatingAttribute.AverageValueSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.RatingAttribute.UserValue">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.RatingAttribute.UserValueSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.RatingAttribute.Count">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.RatingAttribute.CountSpecified">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.OverallRating">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.OverallRating.AverageValue">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.OverallRating.AverageValueSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.OverallRating.UserValue">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.OverallRating.UserValueSpecified">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.AdvanceStateCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.AdvanceStateCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.AdvanceStateCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetNicknameCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetNicknameCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetNicknameCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetNicknameCompletedEventArgs.nickname">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetNicknameSuggestionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetNicknameSuggestionsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetNicknameSuggestionsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetNicknameSuggestionsCompletedEventArgs.suggestionList">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetRatingAverageCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetRatingAverageCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetRatingAverageCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetRatingAverageCompletedEventArgs.rating">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetRatingAverageRollupCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetRatingAverageRollupCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetRatingAverageRollupCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetRatingAverageRollupCompletedEventArgs.rating">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetRatingByUserCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetRatingByUserCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetRatingByUserCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetRatingByUserCompletedEventArgs.rating">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetRatingByUserWithAverageCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetRatingByUserWithAverageCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetRatingByUserWithAverageCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetRatingByUserWithAverageCompletedEventArgs.rating">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetMultipleRatingsByUserCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetMultipleRatingsByUserCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetMultipleRatingsByUserCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetMultipleRatingsByUserCompletedEventArgs.ratings">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetRatingsByUserCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetRatingsByUserCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetRatingsByUserCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetRatingsByUserCompletedEventArgs.userID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetRatingsByUserCompletedEventArgs.ratings">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetRatingsByUserCompletedEventArgs.nickname">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetReviewByUserCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetReviewByUserCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetReviewByUserCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetReviewByUserCompletedEventArgs.review">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetReviewsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetReviewsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetReviewsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetReviewsCompletedEventArgs.pageSize">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetReviewsCompletedEventArgs.pageNum">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetReviewsCompletedEventArgs.sortBy">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetReviewsCompletedEventArgs.sortOrder">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetReviewsCompletedEventArgs.totalCount">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetReviewsCompletedEventArgs.Reviews">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetReviewsByUserCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetReviewsByUserCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetReviewsByUserCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetReviewsByUserCompletedEventArgs.Reviews">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetReviewsRollupCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetReviewsRollupCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetReviewsRollupCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetReviewsRollupCompletedEventArgs.pageSize">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetReviewsRollupCompletedEventArgs.pageNum">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetReviewsRollupCompletedEventArgs.sortBy">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetReviewsRollupCompletedEventArgs.sortOrder">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetReviewsRollupCompletedEventArgs.totalCount">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetReviewsRollupCompletedEventArgs.Reviews">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetUnauthRatingsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetUnauthRatingsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetUnauthRatingsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetUnauthRatingsCompletedEventArgs.ratingScores">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetUnauthRatingsCompletedEventArgs.ratingCounts">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.SaveNicknameCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.SaveNicknameCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.SaveNicknameCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.SaveNicknameCompletedEventArgs.suggestionList">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.SaveNicknameCompletedEventArgs.errors">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.SaveRatingCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.SaveRatingCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.SaveRatingCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.SaveRatingCompletedEventArgs.errors">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.BulkSaveRatingCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.BulkSaveRatingCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.BulkSaveRatingCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.BulkSaveRatingCompletedEventArgs.errors">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.SaveReportViolationCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.SaveReportViolationCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.SaveReportViolationCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.SaveReportViolationCompletedEventArgs.errors">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.SaveReviewCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.SaveReviewCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.SaveReviewCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.SaveReviewCompletedEventArgs.errors">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.BulkSaveReviewCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.BulkSaveReviewCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.BulkSaveReviewCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.SaveReviewHelpfulnessCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.SaveReviewHelpfulnessCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.SaveReviewHelpfulnessCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.SaveReviewHelpfulnessCompletedEventArgs.errors">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.SaveUnauthRatingsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.SaveUnauthRatingsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.SaveUnauthRatingsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.ValidateReviewCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.ValidateReviewCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ValidateReviewCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ValidateReviewCompletedEventArgs.errors">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.SingleRating">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.AdvanceState(System.Guid,System.Object,System.Int64,System.Guid,System.String[],System.String[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginAdvanceState(System.Guid,System.Object,System.Int64,System.Guid,System.String[],System.String[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndAdvanceState(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.AdvanceStateAsync(System.Guid,System.Object,System.Int64,System.Guid,System.String[],System.String[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.AdvanceStateAsync(System.Guid,System.Object,System.Int64,System.Guid,System.String[],System.String[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetNickname(System.Int64,System.Guid,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginGetNickname(System.Int64,System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndGetNickname(System.IAsyncResult,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetNicknameAsync(System.Int64,System.Guid)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetNicknameAsync(System.Int64,System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetNicknameSuggestions(System.String,System.String[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginGetNicknameSuggestions(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndGetNicknameSuggestions(System.IAsyncResult,System.String[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetNicknameSuggestionsAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetNicknameSuggestionsAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingAverage(System.Guid,System.Object,System.Single@,System.Int32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginGetRatingAverage(System.Guid,System.Object,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndGetRatingAverage(System.IAsyncResult,System.Single@,System.Int32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingAverageAsync(System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingAverageAsync(System.Guid,System.Object,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingAverageRollup(System.Guid,System.Object,System.Single@,System.Int32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginGetRatingAverageRollup(System.Guid,System.Object,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndGetRatingAverageRollup(System.IAsyncResult,System.Single@,System.Int32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingAverageRollupAsync(System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingAverageRollupAsync(System.Guid,System.Object,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingByUser(System.Guid,System.Object,System.Int64,System.Guid,System.Int32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginGetRatingByUser(System.Guid,System.Object,System.Int64,System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndGetRatingByUser(System.IAsyncResult,System.Int32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingByUserAsync(System.Guid,System.Object,System.Int64,System.Guid)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingByUserAsync(System.Guid,System.Object,System.Int64,System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingByUserWithAverage(System.Guid,System.Object,System.Int64,System.Guid,System.Int32@,System.Single@,System.Int32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginGetRatingByUserWithAverage(System.Guid,System.Object,System.Int64,System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndGetRatingByUserWithAverage(System.IAsyncResult,System.Int32@,System.Single@,System.Int32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingByUserWithAverageAsync(System.Guid,System.Object,System.Int64,System.Guid)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingByUserWithAverageAsync(System.Guid,System.Object,System.Int64,System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetMultipleRatingsByUser(System.Guid,System.Object[],System.Int64,System.Guid,System.Int32[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginGetMultipleRatingsByUser(System.Guid,System.Object[],System.Int64,System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndGetMultipleRatingsByUser(System.IAsyncResult,System.Int32[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetMultipleRatingsByUserAsync(System.Guid,System.Object[],System.Int64,System.Guid)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetMultipleRatingsByUserAsync(System.Guid,System.Object[],System.Int64,System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingsByUser(System.Guid,System.Int64,System.Guid@,System.Guid,ServerTestFramework.LiveService.msnrr.single.Rating[]@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginGetRatingsByUser(System.Guid,System.Int64,System.Guid,System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndGetRatingsByUser(System.IAsyncResult,System.Guid@,ServerTestFramework.LiveService.msnrr.single.Rating[]@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingsByUserAsync(System.Guid,System.Int64,System.Guid,System.Guid)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingsByUserAsync(System.Guid,System.Int64,System.Guid,System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetReviewByUser(System.Guid,System.Object,System.Int64,System.Guid,ServerTestFramework.LiveService.msnrr.single.Review@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginGetReviewByUser(System.Guid,System.Object,System.Int64,System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndGetReviewByUser(System.IAsyncResult,ServerTestFramework.LiveService.msnrr.single.Review@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetReviewByUserAsync(System.Guid,System.Object,System.Int64,System.Guid)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetReviewByUserAsync(System.Guid,System.Object,System.Int64,System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetReviews(System.Guid,System.Object,System.Int32@,System.Int32@,System.String@,System.String@,System.Int32@,ServerTestFramework.LiveService.msnrr.single.Review[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginGetReviews(System.Guid,System.Object,System.Int32,System.Int32,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndGetReviews(System.IAsyncResult,System.Int32@,System.Int32@,System.String@,System.String@,System.Int32@,ServerTestFramework.LiveService.msnrr.single.Review[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetReviewsAsync(System.Guid,System.Object,System.Int32,System.Int32,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetReviewsAsync(System.Guid,System.Object,System.Int32,System.Int32,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetReviewsByUser(System.Guid,System.Int64,System.Guid,System.Guid,ServerTestFramework.LiveService.msnrr.single.Review[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginGetReviewsByUser(System.Guid,System.Int64,System.Guid,System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndGetReviewsByUser(System.IAsyncResult,ServerTestFramework.LiveService.msnrr.single.Review[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetReviewsByUserAsync(System.Guid,System.Int64,System.Guid,System.Guid)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetReviewsByUserAsync(System.Guid,System.Int64,System.Guid,System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetReviewsRollup(System.Guid,System.Object,System.Int32@,System.Int32@,System.String@,System.String@,System.Int32@,ServerTestFramework.LiveService.msnrr.single.Review[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginGetReviewsRollup(System.Guid,System.Object,System.Int32,System.Int32,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndGetReviewsRollup(System.IAsyncResult,System.Int32@,System.Int32@,System.String@,System.String@,System.Int32@,ServerTestFramework.LiveService.msnrr.single.Review[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetReviewsRollupAsync(System.Guid,System.Object,System.Int32,System.Int32,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetReviewsRollupAsync(System.Guid,System.Object,System.Int32,System.Int32,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetUnauthRatings(System.Guid,System.Object,System.Int32,System.Int32[]@,System.Int64[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginGetUnauthRatings(System.Guid,System.Object,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndGetUnauthRatings(System.IAsyncResult,System.Int32[]@,System.Int64[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetUnauthRatingsAsync(System.Guid,System.Object,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetUnauthRatingsAsync(System.Guid,System.Object,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveNickname(System.Int64,System.Guid,System.String,System.String[]@,ServerTestFramework.LiveService.msnrr.single.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginSaveNickname(System.Int64,System.Guid,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndSaveNickname(System.IAsyncResult,System.String[]@,ServerTestFramework.LiveService.msnrr.single.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveNicknameAsync(System.Int64,System.Guid,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveNicknameAsync(System.Int64,System.Guid,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveRating(System.Guid,System.Object,System.Int64,System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginSaveRating(System.Guid,System.Object,System.Int64,System.Guid,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndSaveRating(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveRatingAsync(System.Guid,System.Object,System.Int64,System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveRatingAsync(System.Guid,System.Object,System.Int64,System.Guid,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BulkSaveRating(System.Guid,System.Object,System.Int64,System.Guid,System.Int32,System.DateTime)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginBulkSaveRating(System.Guid,System.Object,System.Int64,System.Guid,System.Int32,System.DateTime,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndBulkSaveRating(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BulkSaveRatingAsync(System.Guid,System.Object,System.Int64,System.Guid,System.Int32,System.DateTime)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BulkSaveRatingAsync(System.Guid,System.Object,System.Int64,System.Guid,System.Int32,System.DateTime,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveReportViolation(System.Object,System.Guid,System.String,System.String,System.String,ServerTestFramework.LiveService.msnrr.single.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginSaveReportViolation(System.Object,System.Guid,System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndSaveReportViolation(System.IAsyncResult,ServerTestFramework.LiveService.msnrr.single.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveReportViolationAsync(System.Object,System.Guid,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveReportViolationAsync(System.Object,System.Guid,System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveReview(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Int32,System.String,ServerTestFramework.LiveService.msnrr.single.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginSaveReview(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Int32,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndSaveReview(System.IAsyncResult,ServerTestFramework.LiveService.msnrr.single.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveReviewAsync(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Int32,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveReviewAsync(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Int32,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BulkSaveReview(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Int32,System.String,System.DateTime,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginBulkSaveReview(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Int32,System.String,System.DateTime,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndBulkSaveReview(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BulkSaveReviewAsync(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Int32,System.String,System.DateTime,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BulkSaveReviewAsync(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Int32,System.String,System.DateTime,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveReviewHelpfulness(System.Object,System.Int64,System.Guid,System.Guid,System.Int32,ServerTestFramework.LiveService.msnrr.single.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginSaveReviewHelpfulness(System.Object,System.Int64,System.Guid,System.Guid,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndSaveReviewHelpfulness(System.IAsyncResult,ServerTestFramework.LiveService.msnrr.single.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveReviewHelpfulnessAsync(System.Object,System.Int64,System.Guid,System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveReviewHelpfulnessAsync(System.Object,System.Int64,System.Guid,System.Guid,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveUnauthRatings(System.Guid,System.Object,System.Int32[],System.Int32[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginSaveUnauthRatings(System.Guid,System.Object,System.Int32[],System.Int32[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndSaveUnauthRatings(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveUnauthRatingsAsync(System.Guid,System.Object,System.Int32[],System.Int32[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveUnauthRatingsAsync(System.Guid,System.Object,System.Int32[],System.Int32[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.ValidateReview(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Int32,System.String,ServerTestFramework.LiveService.msnrr.single.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginValidateReview(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Int32,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndValidateReview(System.IAsyncResult,ServerTestFramework.LiveService.msnrr.single.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.ValidateReviewAsync(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Int32,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.ValidateReviewAsync(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Int32,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.AdvanceStateCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetNicknameCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetNicknameSuggestionsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingAverageCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingAverageRollupCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingByUserCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingByUserWithAverageCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetMultipleRatingsByUserCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingsByUserCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetReviewByUserCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetReviewsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetReviewsByUserCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetReviewsRollupCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetUnauthRatingsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveNicknameCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveRatingCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.BulkSaveRatingCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveReportViolationCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveReviewCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.BulkSaveReviewCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveReviewHelpfulnessCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveUnauthRatingsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.ValidateReviewCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.ValidationError">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ValidationError.DataField">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ValidationError.Code">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ValidationError.ID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ValidationError.MaxLength">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.Field">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Field.empty">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Field.nickname">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Field.ratingItemID">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Field.reviewFieldID">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Field.title">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Field.customProperty">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Field.name">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Field.email">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Field.comments">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Field.score">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.Type">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Type.RequiredFieldMissing">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Type.TextTooLong">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Type.TextInvalidChars">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Type.TextProfanity">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Type.InvalidFormat">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Type.TooManyChanges">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Type.AlreadyTaken">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Type.ReviewsRequireRatings">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Type.ReviewsRequireOneField">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Type.UserCannotRateOwnReview">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.Helpfulness">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Helpfulness.Count">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Helpfulness.Sum">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Helpfulness.Error">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Helpfulness.ErrorSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Helpfulness.CurrentUser">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Helpfulness.CurrentUserSpecified">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.ReviewField">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ReviewField.Error">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ReviewField.ErrorSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ReviewField.ID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ReviewField.IDSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ReviewField.Label">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ReviewField.MaxLength">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ReviewField.MaxLengthSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ReviewField.Cols">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ReviewField.ColsSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ReviewField.Rows">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ReviewField.RowsSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ReviewField.Rank">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ReviewField.RankSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ReviewField.Required">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ReviewField.RequiredSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ReviewField.Description">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ReviewField.Value">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.User">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.User.Nickname">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.User.ID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.User.IDSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.User.Error">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.User.ErrorSpecified">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.Review">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Review.Item">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Review.Date">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Review.DateSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Review.User">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Review.CustomProperty">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Review.Rating">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Review.Title">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Review.Field">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Review.Helpfulness">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Review.ID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Review.IDSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Review.Error">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Review.ErrorSpecified">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.ItemID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ItemID.StringID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ItemID.LongID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ItemID.GuidID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ItemID.GuidIDSpecified">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.Rating">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Rating.Item">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Rating.RatingItem">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Rating.OverallRating">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Rating.Date">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Rating.DateSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Rating.Error">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Rating.ErrorSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Rating.TotalCount">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Rating.TotalCountSpecified">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.RatingAttribute">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.RatingItem">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.RatingItem.ID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.RatingItem.IDSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.RatingItem.Label">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.RatingItem.Error">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.RatingItem.ErrorSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.RatingItem.Description">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.RatingItem.Rank">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.RatingItem.RankSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.RatingItem.Required">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.RatingItem.RequiredSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.RatingAttribute.AverageValue">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.RatingAttribute.AverageValueSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.RatingAttribute.UserValue">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.RatingAttribute.UserValueSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.RatingAttribute.Count">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.RatingAttribute.CountSpecified">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.OverallRating">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.OverallRating.AverageValue">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.OverallRating.AverageValueSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.OverallRating.UserValue">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.OverallRating.UserValueSpecified">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.AdvanceStateCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.AdvanceStateCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.AdvanceStateCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetNicknameCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetNicknameCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetNicknameCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetNicknameCompletedEventArgs.nickname">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetNicknameSuggestionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetNicknameSuggestionsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetNicknameSuggestionsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetNicknameSuggestionsCompletedEventArgs.suggestionList">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetRatingAverageCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetRatingAverageCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetRatingAverageCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetRatingAverageCompletedEventArgs.rating">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetRatingAverageCompletedEventArgs.count">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetRatingAverageRollupCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetRatingAverageRollupCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetRatingAverageRollupCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetRatingAverageRollupCompletedEventArgs.rating">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetRatingAverageRollupCompletedEventArgs.count">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetRatingByUserCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetRatingByUserCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetRatingByUserCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetRatingByUserCompletedEventArgs.rating">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetRatingByUserWithAverageCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetRatingByUserWithAverageCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetRatingByUserWithAverageCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetRatingByUserWithAverageCompletedEventArgs.userRating">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetRatingByUserWithAverageCompletedEventArgs.averageRating">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetRatingByUserWithAverageCompletedEventArgs.count">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetMultipleRatingsByUserCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetMultipleRatingsByUserCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetMultipleRatingsByUserCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetMultipleRatingsByUserCompletedEventArgs.ratings">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetRatingsByUserCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetRatingsByUserCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetRatingsByUserCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetRatingsByUserCompletedEventArgs.userID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetRatingsByUserCompletedEventArgs.ratings">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetRatingsByUserCompletedEventArgs.nickname">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetReviewByUserCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetReviewByUserCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetReviewByUserCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetReviewByUserCompletedEventArgs.review">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetReviewsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetReviewsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetReviewsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetReviewsCompletedEventArgs.pageSize">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetReviewsCompletedEventArgs.pageNum">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetReviewsCompletedEventArgs.sortBy">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetReviewsCompletedEventArgs.sortOrder">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetReviewsCompletedEventArgs.totalCount">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetReviewsCompletedEventArgs.Reviews">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetReviewsByUserCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetReviewsByUserCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetReviewsByUserCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetReviewsByUserCompletedEventArgs.Reviews">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetReviewsRollupCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetReviewsRollupCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetReviewsRollupCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetReviewsRollupCompletedEventArgs.pageSize">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetReviewsRollupCompletedEventArgs.pageNum">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetReviewsRollupCompletedEventArgs.sortBy">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetReviewsRollupCompletedEventArgs.sortOrder">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetReviewsRollupCompletedEventArgs.totalCount">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetReviewsRollupCompletedEventArgs.Reviews">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetUnauthRatingsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetUnauthRatingsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetUnauthRatingsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetUnauthRatingsCompletedEventArgs.ratingScores">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetUnauthRatingsCompletedEventArgs.ratingCounts">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.SaveNicknameCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.SaveNicknameCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.SaveNicknameCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.SaveNicknameCompletedEventArgs.suggestionList">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.SaveNicknameCompletedEventArgs.errors">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.SaveRatingCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.SaveRatingCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.SaveRatingCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.BulkSaveRatingCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.BulkSaveRatingCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.BulkSaveRatingCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.SaveReportViolationCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.SaveReportViolationCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.SaveReportViolationCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.SaveReportViolationCompletedEventArgs.errors">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.SaveReviewCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.SaveReviewCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.SaveReviewCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.SaveReviewCompletedEventArgs.errors">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.BulkSaveReviewCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.BulkSaveReviewCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.BulkSaveReviewCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.SaveReviewHelpfulnessCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.SaveReviewHelpfulnessCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.SaveReviewHelpfulnessCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.SaveReviewHelpfulnessCompletedEventArgs.errors">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.SaveUnauthRatingsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.SaveUnauthRatingsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.SaveUnauthRatingsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.ValidateReviewCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.ValidateReviewCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ValidateReviewCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ValidateReviewCompletedEventArgs.errors">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Alert.Alerts">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.SubscriberExists(System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.BeginSubscriberExists(System.Byte[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.EndSubscriberExists(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.SubscriberExistsAsync(System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.SubscriberExistsAsync(System.Byte[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.Subscribe(System.Boolean,System.Byte[],System.String,ServerTestFramework.Web.Alert.AddSubscriptions)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.BeginSubscribe(System.Boolean,System.Byte[],System.String,ServerTestFramework.Web.Alert.AddSubscriptions,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.EndSubscribe(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.SubscribeAsync(System.Boolean,System.Byte[],System.String,ServerTestFramework.Web.Alert.AddSubscriptions)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.SubscribeAsync(System.Boolean,System.Byte[],System.String,ServerTestFramework.Web.Alert.AddSubscriptions,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.Unsubscribe(System.Boolean,System.Boolean,System.Byte[],System.String,ServerTestFramework.Web.Alert.ExistingSubscriptions)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.BeginUnsubscribe(System.Boolean,System.Boolean,System.Byte[],System.String,ServerTestFramework.Web.Alert.ExistingSubscriptions,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.EndUnsubscribe(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.UnsubscribeAsync(System.Boolean,System.Boolean,System.Byte[],System.String,ServerTestFramework.Web.Alert.ExistingSubscriptions)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.UnsubscribeAsync(System.Boolean,System.Boolean,System.Byte[],System.String,ServerTestFramework.Web.Alert.ExistingSubscriptions,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.EnumerateSubscriptions(System.Byte[],System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.BeginEnumerateSubscriptions(System.Byte[],System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.EndEnumerateSubscriptions(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.EnumerateSubscriptionsAsync(System.Byte[],System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.EnumerateSubscriptionsAsync(System.Byte[],System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.ScheduleContentAlert(System.Byte[],System.UInt32,System.String,System.String,System.DateTime)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.BeginScheduleContentAlert(System.Byte[],System.UInt32,System.String,System.String,System.DateTime,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.EndScheduleContentAlert(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.ScheduleContentAlertAsync(System.Byte[],System.UInt32,System.String,System.String,System.DateTime)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.ScheduleContentAlertAsync(System.Byte[],System.UInt32,System.String,System.String,System.DateTime,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Alert.Alerts.SubscriberExistsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Alert.Alerts.SubscribeCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Alert.Alerts.UnsubscribeCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Alert.Alerts.EnumerateSubscriptionsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Alert.Alerts.ScheduleContentAlertCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.GeneralInfo.GeneralInfo">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.GeneralInfo.GeneralInfo.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.GeneralInfo.GeneralInfo.GetTitleList(System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.GeneralInfo.GeneralInfo.BeginGetTitleList(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.GeneralInfo.GeneralInfo.EndGetTitleList(System.IAsyncResult,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.GeneralInfo.GeneralInfo.GetTitleListAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.GeneralInfo.GeneralInfo.GetTitleListAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.GeneralInfo.GeneralInfo.LinkedGamerTags(System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.GeneralInfo.GeneralInfo.BeginLinkedGamerTags(System.Byte[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.GeneralInfo.GeneralInfo.EndLinkedGamerTags(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.GeneralInfo.GeneralInfo.LinkedGamerTagsAsync(System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.GeneralInfo.GeneralInfo.LinkedGamerTagsAsync(System.Byte[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.GeneralInfo.GeneralInfo.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.GeneralInfo.GeneralInfo.GetTitleListCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.GeneralInfo.GeneralInfo.LinkedGamerTagsCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.MessagingImpl">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.GetMessageString(System.UInt32,System.UInt32,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.BeginGetMessageString(System.UInt32,System.UInt32,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EndGetMessageString(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.GetMessageStringAsync(System.UInt32,System.UInt32,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.GetMessageStringAsync(System.UInt32,System.UInt32,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.RevokeTitleUserMessage(ServerTestFramework.Web.Messaging.WCRecipientResult[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.BeginRevokeTitleUserMessage(ServerTestFramework.Web.Messaging.WCRecipientResult[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EndRevokeTitleUserMessage(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.RevokeTitleUserMessageAsync(ServerTestFramework.Web.Messaging.WCRecipientResult[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.RevokeTitleUserMessageAsync(ServerTestFramework.Web.Messaging.WCRecipientResult[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.SendTitleUserMessage(System.String,System.UInt64,ServerTestFramework.Web.Messaging.WCMessageFlags,System.UInt32,System.UInt16,ServerTestFramework.Web.Messaging.WCMessageType,System.String[],ServerTestFramework.Web.Messaging.WCMessageDetails,ServerTestFramework.Web.Messaging.WCMessageAttachment[],ServerTestFramework.Web.Messaging.WCRecipientResult[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.BeginSendTitleUserMessage(System.String,System.UInt64,ServerTestFramework.Web.Messaging.WCMessageFlags,System.UInt32,System.UInt16,ServerTestFramework.Web.Messaging.WCMessageType,System.String[],ServerTestFramework.Web.Messaging.WCMessageDetails,ServerTestFramework.Web.Messaging.WCMessageAttachment[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EndSendTitleUserMessage(System.IAsyncResult,ServerTestFramework.Web.Messaging.WCRecipientResult[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.SendTitleUserMessageAsync(System.String,System.UInt64,ServerTestFramework.Web.Messaging.WCMessageFlags,System.UInt32,System.UInt16,ServerTestFramework.Web.Messaging.WCMessageType,System.String[],ServerTestFramework.Web.Messaging.WCMessageDetails,ServerTestFramework.Web.Messaging.WCMessageAttachment[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.SendTitleUserMessageAsync(System.String,System.UInt64,ServerTestFramework.Web.Messaging.WCMessageFlags,System.UInt32,System.UInt16,ServerTestFramework.Web.Messaging.WCMessageType,System.String[],ServerTestFramework.Web.Messaging.WCMessageDetails,ServerTestFramework.Web.Messaging.WCMessageAttachment[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.SendTitleWideMessage(System.String,System.UInt64,System.DateTime,System.UInt32,ServerTestFramework.Web.Messaging.WCMessageFlags,System.UInt32,System.UInt16,ServerTestFramework.Web.Messaging.WCMessageType,System.String,ServerTestFramework.Web.Messaging.WCMessageDetails,ServerTestFramework.Web.Messaging.WCLocalizedString[],ServerTestFramework.Web.Messaging.WCMessageAttachment[],System.UInt16@,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.BeginSendTitleWideMessage(System.String,System.UInt64,System.DateTime,System.UInt32,ServerTestFramework.Web.Messaging.WCMessageFlags,System.UInt32,System.UInt16,ServerTestFramework.Web.Messaging.WCMessageType,System.String,ServerTestFramework.Web.Messaging.WCMessageDetails,ServerTestFramework.Web.Messaging.WCLocalizedString[],ServerTestFramework.Web.Messaging.WCMessageAttachment[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EndSendTitleWideMessage(System.IAsyncResult,System.UInt16@,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.SendTitleWideMessageAsync(System.String,System.UInt64,System.DateTime,System.UInt32,ServerTestFramework.Web.Messaging.WCMessageFlags,System.UInt32,System.UInt16,ServerTestFramework.Web.Messaging.WCMessageType,System.String,ServerTestFramework.Web.Messaging.WCMessageDetails,ServerTestFramework.Web.Messaging.WCLocalizedString[],ServerTestFramework.Web.Messaging.WCMessageAttachment[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.SendTitleWideMessageAsync(System.String,System.UInt64,System.DateTime,System.UInt32,ServerTestFramework.Web.Messaging.WCMessageFlags,System.UInt32,System.UInt16,ServerTestFramework.Web.Messaging.WCMessageType,System.String,ServerTestFramework.Web.Messaging.WCMessageDetails,ServerTestFramework.Web.Messaging.WCLocalizedString[],ServerTestFramework.Web.Messaging.WCMessageAttachment[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.DeleteTitleWideMessage(System.UInt32,System.UInt32,ServerTestFramework.Web.Messaging.WCDeleteSysMsgFlags)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.BeginDeleteTitleWideMessage(System.UInt32,System.UInt32,ServerTestFramework.Web.Messaging.WCDeleteSysMsgFlags,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EndDeleteTitleWideMessage(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.DeleteTitleWideMessageAsync(System.UInt32,System.UInt32,ServerTestFramework.Web.Messaging.WCDeleteSysMsgFlags)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.DeleteTitleWideMessageAsync(System.UInt32,System.UInt32,ServerTestFramework.Web.Messaging.WCDeleteSysMsgFlags,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.GetTitleWideMessageDetails(System.UInt32,System.UInt32,ServerTestFramework.Web.Messaging.WCTitleWideMessageSummary@,ServerTestFramework.Web.Messaging.WCMessageDetails@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.BeginGetTitleWideMessageDetails(System.UInt32,System.UInt32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EndGetTitleWideMessageDetails(System.IAsyncResult,ServerTestFramework.Web.Messaging.WCTitleWideMessageSummary@,ServerTestFramework.Web.Messaging.WCMessageDetails@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.GetTitleWideMessageDetailsAsync(System.UInt32,System.UInt32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.GetTitleWideMessageDetailsAsync(System.UInt32,System.UInt32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EnumTitleWideMessages(System.UInt32,ServerTestFramework.Web.Messaging.WCTitleWideMessageSummary[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.BeginEnumTitleWideMessages(System.UInt32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EndEnumTitleWideMessages(System.IAsyncResult,ServerTestFramework.Web.Messaging.WCTitleWideMessageSummary[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EnumTitleWideMessagesAsync(System.UInt32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EnumTitleWideMessagesAsync(System.UInt32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.SetMessageFlags(System.Byte[],System.String,System.UInt32,ServerTestFramework.Web.Messaging.WCMessageFlags,ServerTestFramework.Web.Messaging.WCMessageFlags)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.BeginSetMessageFlags(System.Byte[],System.String,System.UInt32,ServerTestFramework.Web.Messaging.WCMessageFlags,ServerTestFramework.Web.Messaging.WCMessageFlags,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EndSetMessageFlags(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.SetMessageFlagsAsync(System.Byte[],System.String,System.UInt32,ServerTestFramework.Web.Messaging.WCMessageFlags,ServerTestFramework.Web.Messaging.WCMessageFlags)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.SetMessageFlagsAsync(System.Byte[],System.String,System.UInt32,ServerTestFramework.Web.Messaging.WCMessageFlags,ServerTestFramework.Web.Messaging.WCMessageFlags,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EnumUserTitles(System.Byte[],System.String,ServerTestFramework.Web.Messaging.WCUserTitle[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.BeginEnumUserTitles(System.Byte[],System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EndEnumUserTitles(System.IAsyncResult,ServerTestFramework.Web.Messaging.WCUserTitle[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EnumUserTitlesAsync(System.Byte[],System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EnumUserTitlesAsync(System.Byte[],System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.DeleteUserTitle(System.Byte[],System.String,System.UInt32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.BeginDeleteUserTitle(System.Byte[],System.String,System.UInt32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EndDeleteUserTitle(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.DeleteUserTitleAsync(System.Byte[],System.String,System.UInt32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.DeleteUserTitleAsync(System.Byte[],System.String,System.UInt32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.RevokeMessage(System.Byte[],System.String,ServerTestFramework.Web.Messaging.WCRecipientResult[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.BeginRevokeMessage(System.Byte[],System.String,ServerTestFramework.Web.Messaging.WCRecipientResult[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EndRevokeMessage(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.RevokeMessageAsync(System.Byte[],System.String,ServerTestFramework.Web.Messaging.WCRecipientResult[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.RevokeMessageAsync(System.Byte[],System.String,ServerTestFramework.Web.Messaging.WCRecipientResult[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.SendMessage(System.Byte[],System.String,System.UInt64,ServerTestFramework.Web.Messaging.WCMessageFlags,System.UInt32,System.UInt16,ServerTestFramework.Web.Messaging.WCMessageType,System.String[],ServerTestFramework.Web.Messaging.WCMessageDetails,ServerTestFramework.Web.Messaging.WCMessageAttachment[],ServerTestFramework.Web.Messaging.WCRecipientResult[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.BeginSendMessage(System.Byte[],System.String,System.UInt64,ServerTestFramework.Web.Messaging.WCMessageFlags,System.UInt32,System.UInt16,ServerTestFramework.Web.Messaging.WCMessageType,System.String[],ServerTestFramework.Web.Messaging.WCMessageDetails,ServerTestFramework.Web.Messaging.WCMessageAttachment[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EndSendMessage(System.IAsyncResult,ServerTestFramework.Web.Messaging.WCRecipientResult[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.SendMessageAsync(System.Byte[],System.String,System.UInt64,ServerTestFramework.Web.Messaging.WCMessageFlags,System.UInt32,System.UInt16,ServerTestFramework.Web.Messaging.WCMessageType,System.String[],ServerTestFramework.Web.Messaging.WCMessageDetails,ServerTestFramework.Web.Messaging.WCMessageAttachment[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.SendMessageAsync(System.Byte[],System.String,System.UInt64,ServerTestFramework.Web.Messaging.WCMessageFlags,System.UInt32,System.UInt16,ServerTestFramework.Web.Messaging.WCMessageType,System.String[],ServerTestFramework.Web.Messaging.WCMessageDetails,ServerTestFramework.Web.Messaging.WCMessageAttachment[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.DeleteMessage(System.Byte[],System.String,System.UInt32,ServerTestFramework.Web.Messaging.WCDeleteMsgFlags)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.BeginDeleteMessage(System.Byte[],System.String,System.UInt32,ServerTestFramework.Web.Messaging.WCDeleteMsgFlags,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EndDeleteMessage(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.DeleteMessageAsync(System.Byte[],System.String,System.UInt32,ServerTestFramework.Web.Messaging.WCDeleteMsgFlags)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.DeleteMessageAsync(System.Byte[],System.String,System.UInt32,ServerTestFramework.Web.Messaging.WCDeleteMsgFlags,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.GetMessageDetails(System.Byte[],System.String,System.UInt32,ServerTestFramework.Web.Messaging.WCMessageFlags,ServerTestFramework.Web.Messaging.WCMessageFlags,ServerTestFramework.Web.Messaging.WCMessageSummary@,ServerTestFramework.Web.Messaging.WCMessageDetails@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.BeginGetMessageDetails(System.Byte[],System.String,System.UInt32,ServerTestFramework.Web.Messaging.WCMessageFlags,ServerTestFramework.Web.Messaging.WCMessageFlags,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EndGetMessageDetails(System.IAsyncResult,ServerTestFramework.Web.Messaging.WCMessageSummary@,ServerTestFramework.Web.Messaging.WCMessageDetails@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.GetMessageDetailsAsync(System.Byte[],System.String,System.UInt32,ServerTestFramework.Web.Messaging.WCMessageFlags,ServerTestFramework.Web.Messaging.WCMessageFlags)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.GetMessageDetailsAsync(System.Byte[],System.String,System.UInt32,ServerTestFramework.Web.Messaging.WCMessageFlags,ServerTestFramework.Web.Messaging.WCMessageFlags,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EnumMessages(System.Byte[],System.String,ServerTestFramework.Web.Messaging.WCMessageSummary[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.BeginEnumMessages(System.Byte[],System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EndEnumMessages(System.IAsyncResult,ServerTestFramework.Web.Messaging.WCMessageSummary[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EnumMessagesAsync(System.Byte[],System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EnumMessagesAsync(System.Byte[],System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Messaging.MessagingImpl.GetMessageStringCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Messaging.MessagingImpl.RevokeTitleUserMessageCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Messaging.MessagingImpl.SendTitleUserMessageCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Messaging.MessagingImpl.SendTitleWideMessageCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Messaging.MessagingImpl.DeleteTitleWideMessageCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Messaging.MessagingImpl.GetTitleWideMessageDetailsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Messaging.MessagingImpl.EnumTitleWideMessagesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Messaging.MessagingImpl.SetMessageFlagsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Messaging.MessagingImpl.EnumUserTitlesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Messaging.MessagingImpl.DeleteUserTitleCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Messaging.MessagingImpl.RevokeMessageCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Messaging.MessagingImpl.SendMessageCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Messaging.MessagingImpl.DeleteMessageCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Messaging.MessagingImpl.GetMessageDetailsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Messaging.MessagingImpl.EnumMessagesCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.Presence">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.GetGamertagsFromXUIDS(System.UInt64[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.BeginGetGamertagsFromXUIDS(System.UInt64[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.EndGetGamertagsFromXUIDS(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.GetGamertagsFromXUIDSAsync(System.UInt64[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.GetGamertagsFromXUIDSAsync(System.UInt64[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.GetXUIDSFromGamertags(System.String[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.BeginGetXUIDSFromGamertags(System.String[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.EndGetXUIDSFromGamertags(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.GetXUIDSFromGamertagsAsync(System.String[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.GetXUIDSFromGamertagsAsync(System.String[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.GetPresenceInfo(System.UInt64,System.UInt64,System.UInt16,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.BeginGetPresenceInfo(System.UInt64,System.UInt64,System.UInt16,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.EndGetPresenceInfo(System.IAsyncResult,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.GetPresenceInfoAsync(System.UInt64,System.UInt64,System.UInt16)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.GetPresenceInfoAsync(System.UInt64,System.UInt64,System.UInt16,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.GetFriendsEx(System.UInt64,System.UInt16,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.BeginGetFriendsEx(System.UInt64,System.UInt16,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.EndGetFriendsEx(System.IAsyncResult,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.GetFriendsExAsync(System.UInt64,System.UInt16)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.GetFriendsExAsync(System.UInt64,System.UInt16,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.GetRecentPlayers(System.UInt64,System.UInt16,System.UInt16)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.BeginGetRecentPlayers(System.UInt64,System.UInt16,System.UInt16,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.EndGetRecentPlayers(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.GetRecentPlayersAsync(System.UInt64,System.UInt16,System.UInt16)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.GetRecentPlayersAsync(System.UInt64,System.UInt16,System.UInt16,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.GetFriends(System.Byte[],System.String,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.BeginGetFriends(System.Byte[],System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.EndGetFriends(System.IAsyncResult,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.GetFriendsAsync(System.Byte[],System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.GetFriendsAsync(System.Byte[],System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Presence.Presence.GetGamertagsFromXUIDSCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Presence.Presence.GetXUIDSFromGamertagsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Presence.Presence.GetPresenceInfoCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Presence.Presence.GetFriendsExCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Presence.Presence.GetRecentPlayersCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Presence.Presence.GetFriendsCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Profile.Profile">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Profile.Profile.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Profile.Profile.ReadAchievements(System.UInt64,System.UInt32,System.UInt16,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Profile.Profile.BeginReadAchievements(System.UInt64,System.UInt32,System.UInt16,System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Profile.Profile.EndReadAchievements(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Profile.Profile.ReadAchievementsAsync(System.UInt64,System.UInt32,System.UInt16,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Profile.Profile.ReadAchievementsAsync(System.UInt64,System.UInt32,System.UInt16,System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Profile.Profile.ReadSettings(System.UInt64,System.UInt32,System.UInt16,System.UInt64[],System.UInt32[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Profile.Profile.BeginReadSettings(System.UInt64,System.UInt32,System.UInt16,System.UInt64[],System.UInt32[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Profile.Profile.EndReadSettings(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Profile.Profile.ReadSettingsAsync(System.UInt64,System.UInt32,System.UInt16,System.UInt64[],System.UInt32[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Profile.Profile.ReadSettingsAsync(System.UInt64,System.UInt32,System.UInt16,System.UInt64[],System.UInt32[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Profile.Profile.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Profile.Profile.ReadAchievementsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Profile.Profile.ReadSettingsCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.Query">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.Add(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.BeginAdd(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.EndAdd(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.AddAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.AddAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.Update(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.BeginUpdate(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.EndUpdate(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.UpdateAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.UpdateAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.UpdateId(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt32,System.UInt64,ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.BeginUpdateId(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt32,System.UInt64,ServerTestFramework.Web.Query.QueryAttribute[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.EndUpdateId(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.UpdateIdAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt32,System.UInt64,ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.UpdateIdAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt32,System.UInt64,ServerTestFramework.Web.Query.QueryAttribute[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.Search(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttributeSpec[],ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.BeginSearch(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttributeSpec[],ServerTestFramework.Web.Query.QueryAttribute[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.EndSearch(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.SearchAsync(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttributeSpec[],ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.SearchAsync(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttributeSpec[],ServerTestFramework.Web.Query.QueryAttribute[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.FindFromIds(System.UInt32,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttributeSpec[],System.UInt64[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.BeginFindFromIds(System.UInt32,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttributeSpec[],System.UInt64[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.EndFindFromIds(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.FindFromIdsAsync(System.UInt32,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttributeSpec[],System.UInt64[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.FindFromIdsAsync(System.UInt32,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttributeSpec[],System.UInt64[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.Remove(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.BeginRemove(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.EndRemove(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.RemoveAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.RemoveAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.RemoveId(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.BeginRemoveId(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.EndRemoveId(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.RemoveIdAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.RemoveIdAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.Select(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt64,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.BeginSelect(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt64,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.EndSelect(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.SelectAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt64,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.SelectAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt64,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.GetXQSConfig(System.UInt32,System.Byte[],System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.BeginGetXQSConfig(System.UInt32,System.Byte[],System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.EndGetXQSConfig(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.GetXQSConfigAsync(System.UInt32,System.Byte[],System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.GetXQSConfigAsync(System.UInt32,System.Byte[],System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionCreate(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.BeginCompetitionCreate(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.EndCompetitionCreate(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionCreateAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionCreateAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionCreateSingleElimination(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.DateTime,System.DateTime,System.DateTime,System.DateTime,System.DateTime,System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.BeginCompetitionCreateSingleElimination(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.DateTime,System.DateTime,System.DateTime,System.DateTime,System.DateTime,System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.EndCompetitionCreateSingleElimination(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionCreateSingleEliminationAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.DateTime,System.DateTime,System.DateTime,System.DateTime,System.DateTime,System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionCreateSingleEliminationAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.DateTime,System.DateTime,System.DateTime,System.DateTime,System.DateTime,System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionSearch(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttributeSpec[],ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.BeginCompetitionSearch(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttributeSpec[],ServerTestFramework.Web.Query.QueryAttribute[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.EndCompetitionSearch(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionSearchAsync(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttributeSpec[],ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionSearchAsync(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttributeSpec[],ServerTestFramework.Web.Query.QueryAttribute[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionManageEntrant(System.UInt32,System.Byte[],System.String,System.UInt32,System.String,System.UInt32,System.UInt64,ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.BeginCompetitionManageEntrant(System.UInt32,System.Byte[],System.String,System.UInt32,System.String,System.UInt32,System.UInt64,ServerTestFramework.Web.Query.QueryAttribute[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.EndCompetitionManageEntrant(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionManageEntrantAsync(System.UInt32,System.Byte[],System.String,System.UInt32,System.String,System.UInt32,System.UInt64,ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionManageEntrantAsync(System.UInt32,System.Byte[],System.String,System.UInt32,System.String,System.UInt32,System.UInt64,ServerTestFramework.Web.Query.QueryAttribute[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionCancel(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.BeginCompetitionCancel(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.EndCompetitionCancel(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionCancelAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionCancelAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionTopology(System.UInt32,System.UInt32,System.UInt64,System.UInt32,System.UInt32,System.Int64,System.Int64,ServerTestFramework.Web.Query.QueryAttributeSpec[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.BeginCompetitionTopology(System.UInt32,System.UInt32,System.UInt64,System.UInt32,System.UInt32,System.Int64,System.Int64,ServerTestFramework.Web.Query.QueryAttributeSpec[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.EndCompetitionTopology(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionTopologyAsync(System.UInt32,System.UInt32,System.UInt64,System.UInt32,System.UInt32,System.Int64,System.Int64,ServerTestFramework.Web.Query.QueryAttributeSpec[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionTopologyAsync(System.UInt32,System.UInt32,System.UInt64,System.UInt32,System.UInt32,System.Int64,System.Int64,ServerTestFramework.Web.Query.QueryAttributeSpec[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionTopologySingleElimination(System.UInt32,System.UInt32,System.UInt64,System.UInt64,System.UInt32,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttributeSpec[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.BeginCompetitionTopologySingleElimination(System.UInt32,System.UInt32,System.UInt64,System.UInt64,System.UInt32,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttributeSpec[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.EndCompetitionTopologySingleElimination(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionTopologySingleEliminationAsync(System.UInt32,System.UInt32,System.UInt64,System.UInt64,System.UInt32,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttributeSpec[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionTopologySingleEliminationAsync(System.UInt32,System.UInt32,System.UInt64,System.UInt64,System.UInt32,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttributeSpec[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Query.Query.AddCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Query.Query.UpdateCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Query.Query.UpdateIdCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Query.Query.SearchCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Query.Query.FindFromIdsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Query.Query.RemoveCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Query.Query.RemoveIdCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Query.Query.SelectCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Query.Query.GetXQSConfigCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Query.Query.CompetitionCreateCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Query.Query.CompetitionCreateSingleEliminationCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Query.Query.CompetitionSearchCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Query.Query.CompetitionManageEntrantCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Query.Query.CompetitionCancelCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Query.Query.CompetitionTopologyCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Query.Query.CompetitionTopologySingleEliminationCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.SignatureWidget.Signature">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.VerifySignature(ServerTestFramework.Web.SignatureWidget.XSigVerifySignatureRequest[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.BeginVerifySignature(ServerTestFramework.Web.SignatureWidget.XSigVerifySignatureRequest[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.EndVerifySignature(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.VerifySignatureAsync(ServerTestFramework.Web.SignatureWidget.XSigVerifySignatureRequest[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.VerifySignatureAsync(ServerTestFramework.Web.SignatureWidget.XSigVerifySignatureRequest[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.CreateSignature(System.UInt32,System.String,ServerTestFramework.Web.SignatureWidget.XSigCreateSignatureRequest[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.BeginCreateSignature(System.UInt32,System.String,ServerTestFramework.Web.SignatureWidget.XSigCreateSignatureRequest[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.EndCreateSignature(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.CreateSignatureAsync(System.UInt32,System.String,ServerTestFramework.Web.SignatureWidget.XSigCreateSignatureRequest[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.CreateSignatureAsync(System.UInt32,System.String,ServerTestFramework.Web.SignatureWidget.XSigCreateSignatureRequest[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.TransferUserLicenses(System.UInt64,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.BeginTransferUserLicenses(System.UInt64,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.EndTransferUserLicenses(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.TransferUserLicensesAsync(System.UInt64,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.TransferUserLicensesAsync(System.UInt64,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.BlacklistDigest(System.Byte[],System.Byte,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.BeginBlacklistDigest(System.Byte[],System.Byte,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.EndBlacklistDigest(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.BlacklistDigestAsync(System.Byte[],System.Byte,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.BlacklistDigestAsync(System.Byte[],System.Byte,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.UnBlacklistDigest(System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.BeginUnBlacklistDigest(System.Byte[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.EndUnBlacklistDigest(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.UnBlacklistDigestAsync(System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.UnBlacklistDigestAsync(System.Byte[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.SignatureWidget.Signature.VerifySignatureCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.SignatureWidget.Signature.CreateSignatureCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.SignatureWidget.Signature.TransferUserLicensesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.SignatureWidget.Signature.BlacklistDigestCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.SignatureWidget.Signature.UnBlacklistDigestCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.Stats">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.DeleteXUIDFromLB(System.UInt32,System.UInt32,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.BeginDeleteXUIDFromLB(System.UInt32,System.UInt32,System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EndDeleteXUIDFromLB(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.DeleteXUIDFromLBAsync(System.UInt32,System.UInt32,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.DeleteXUIDFromLBAsync(System.UInt32,System.UInt32,System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.DeleteXUIDFromAllLBs(System.UInt32,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.BeginDeleteXUIDFromAllLBs(System.UInt32,System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EndDeleteXUIDFromAllLBs(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.DeleteXUIDFromAllLBsAsync(System.UInt32,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.DeleteXUIDFromAllLBsAsync(System.UInt32,System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetLBList(System.UInt32,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.BeginGetLBList(System.UInt32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EndGetLBList(System.IAsyncResult,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetLBListAsync(System.UInt32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetLBListAsync(System.UInt32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetLBListByType(System.UInt32,ServerTestFramework.Web.Stats.LBType,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.BeginGetLBListByType(System.UInt32,ServerTestFramework.Web.Stats.LBType,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EndGetLBListByType(System.IAsyncResult,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetLBListByTypeAsync(System.UInt32,ServerTestFramework.Web.Stats.LBType)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetLBListByTypeAsync(System.UInt32,ServerTestFramework.Web.Stats.LBType,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EnumerateLB(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.BeginEnumerateLB(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EndEnumerateLB(System.IAsyncResult,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EnumerateLBAsync(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EnumerateLBAsync(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetLBNearGamerTag(System.UInt32,System.UInt32,System.String,System.UInt32,System.UInt32,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.BeginGetLBNearGamerTag(System.UInt32,System.UInt32,System.String,System.UInt32,System.UInt32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EndGetLBNearGamerTag(System.IAsyncResult,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetLBNearGamerTagAsync(System.UInt32,System.UInt32,System.String,System.UInt32,System.UInt32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetLBNearGamerTagAsync(System.UInt32,System.UInt32,System.String,System.UInt32,System.UInt32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetLBForGamerTags(System.UInt32,System.UInt32,System.String[],System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.BeginGetLBForGamerTags(System.UInt32,System.UInt32,System.String[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EndGetLBForGamerTags(System.IAsyncResult,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetLBForGamerTagsAsync(System.UInt32,System.UInt32,System.String[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetLBForGamerTagsAsync(System.UInt32,System.UInt32,System.String[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetLBDetailsForGamerTags(System.UInt32,System.UInt32,System.String[],System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.BeginGetLBDetailsForGamerTags(System.UInt32,System.UInt32,System.String[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EndGetLBDetailsForGamerTags(System.IAsyncResult,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetLBDetailsForGamerTagsAsync(System.UInt32,System.UInt32,System.String[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetLBDetailsForGamerTagsAsync(System.UInt32,System.UInt32,System.String[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetMLBByXUID(System.UInt32,System.UInt64,System.UInt32[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.BeginGetMLBByXUID(System.UInt32,System.UInt64,System.UInt32[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EndGetMLBByXUID(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetMLBByXUIDAsync(System.UInt32,System.UInt64,System.UInt32[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetMLBByXUIDAsync(System.UInt32,System.UInt64,System.UInt32[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EnumerateTeamLB(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.BeginEnumerateTeamLB(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EndEnumerateTeamLB(System.IAsyncResult,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EnumerateTeamLBAsync(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EnumerateTeamLBAsync(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetTeamLBNearTeamName(System.UInt32,System.UInt32,System.String,System.UInt32,System.UInt32,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.BeginGetTeamLBNearTeamName(System.UInt32,System.UInt32,System.String,System.UInt32,System.UInt32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EndGetTeamLBNearTeamName(System.IAsyncResult,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetTeamLBNearTeamNameAsync(System.UInt32,System.UInt32,System.String,System.UInt32,System.UInt32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetTeamLBNearTeamNameAsync(System.UInt32,System.UInt32,System.String,System.UInt32,System.UInt32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetTeamLBForTeamNames(System.UInt32,System.UInt32,System.String[],System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.BeginGetTeamLBForTeamNames(System.UInt32,System.UInt32,System.String[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EndGetTeamLBForTeamNames(System.IAsyncResult,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetTeamLBForTeamNamesAsync(System.UInt32,System.UInt32,System.String[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetTeamLBForTeamNamesAsync(System.UInt32,System.UInt32,System.String[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetTeamLBDetailsForTeamNames(System.UInt32,System.UInt32,System.String[],System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.BeginGetTeamLBDetailsForTeamNames(System.UInt32,System.UInt32,System.String[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EndGetTeamLBDetailsForTeamNames(System.IAsyncResult,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetTeamLBDetailsForTeamNamesAsync(System.UInt32,System.UInt32,System.String[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetTeamLBDetailsForTeamNamesAsync(System.UInt32,System.UInt32,System.String[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EnumerateLBRaw(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.BeginEnumerateLBRaw(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EndEnumerateLBRaw(System.IAsyncResult,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EnumerateLBRawAsync(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EnumerateLBRawAsync(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Stats.Stats.DeleteXUIDFromLBCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Stats.Stats.DeleteXUIDFromAllLBsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Stats.Stats.GetLBListCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Stats.Stats.GetLBListByTypeCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Stats.Stats.EnumerateLBCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Stats.Stats.GetLBNearGamerTagCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Stats.Stats.GetLBForGamerTagsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Stats.Stats.GetLBDetailsForGamerTagsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Stats.Stats.GetMLBByXUIDCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Stats.Stats.EnumerateTeamLBCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Stats.Stats.GetTeamLBNearTeamNameCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Stats.Stats.GetTeamLBForTeamNamesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Stats.Stats.GetTeamLBDetailsForTeamNamesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Stats.Stats.EnumerateLBRawCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Storage.Storage">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.GetTitleQuota(System.UInt32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.BeginGetTitleQuota(System.UInt32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.EndGetTitleQuota(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.GetTitleQuotaAsync(System.UInt32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.GetTitleQuotaAsync(System.UInt32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.ReadUserFile(System.UInt32,System.Byte[],System.String,System.String,System.DateTime)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.BeginReadUserFile(System.UInt32,System.Byte[],System.String,System.String,System.DateTime,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.EndReadUserFile(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.ReadUserFileAsync(System.UInt32,System.Byte[],System.String,System.String,System.DateTime)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.ReadUserFileAsync(System.UInt32,System.Byte[],System.String,System.String,System.DateTime,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.ReadTitleFile(System.UInt32,System.String,System.DateTime)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.BeginReadTitleFile(System.UInt32,System.String,System.DateTime,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.EndReadTitleFile(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.ReadTitleFileAsync(System.UInt32,System.String,System.DateTime)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.ReadTitleFileAsync(System.UInt32,System.String,System.DateTime,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.WriteUserFile(System.UInt32,System.Byte[],System.String,System.String,ServerTestFramework.Web.Storage.FileContentTypeEnum,System.Byte[],System.DateTime)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.BeginWriteUserFile(System.UInt32,System.Byte[],System.String,System.String,ServerTestFramework.Web.Storage.FileContentTypeEnum,System.Byte[],System.DateTime,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.EndWriteUserFile(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.WriteUserFileAsync(System.UInt32,System.Byte[],System.String,System.String,ServerTestFramework.Web.Storage.FileContentTypeEnum,System.Byte[],System.DateTime)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.WriteUserFileAsync(System.UInt32,System.Byte[],System.String,System.String,ServerTestFramework.Web.Storage.FileContentTypeEnum,System.Byte[],System.DateTime,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.WriteTitleFile(System.UInt32,System.String,ServerTestFramework.Web.Storage.FileContentTypeEnum,System.Byte[],System.DateTime)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.BeginWriteTitleFile(System.UInt32,System.String,ServerTestFramework.Web.Storage.FileContentTypeEnum,System.Byte[],System.DateTime,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.EndWriteTitleFile(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.WriteTitleFileAsync(System.UInt32,System.String,ServerTestFramework.Web.Storage.FileContentTypeEnum,System.Byte[],System.DateTime)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.WriteTitleFileAsync(System.UInt32,System.String,ServerTestFramework.Web.Storage.FileContentTypeEnum,System.Byte[],System.DateTime,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.DeleteUserFile(System.UInt32,System.Byte[],System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.BeginDeleteUserFile(System.UInt32,System.Byte[],System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.EndDeleteUserFile(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.DeleteUserFileAsync(System.UInt32,System.Byte[],System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.DeleteUserFileAsync(System.UInt32,System.Byte[],System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.DeleteTitleFile(System.UInt32,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.BeginDeleteTitleFile(System.UInt32,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.EndDeleteTitleFile(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.DeleteTitleFileAsync(System.UInt32,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.DeleteTitleFileAsync(System.UInt32,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.RevokeTitleFile(System.UInt32,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.BeginRevokeTitleFile(System.UInt32,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.EndRevokeTitleFile(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.RevokeTitleFileAsync(System.UInt32,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.RevokeTitleFileAsync(System.UInt32,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.RevokeUserFile(System.UInt32,System.Byte[],System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.BeginRevokeUserFile(System.UInt32,System.Byte[],System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.EndRevokeUserFile(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.RevokeUserFileAsync(System.UInt32,System.Byte[],System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.RevokeUserFileAsync(System.UInt32,System.Byte[],System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.EnumerateTitleFiles(System.UInt32,System.String,System.DateTime)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.BeginEnumerateTitleFiles(System.UInt32,System.String,System.DateTime,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.EndEnumerateTitleFiles(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.EnumerateTitleFilesAsync(System.UInt32,System.String,System.DateTime)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.EnumerateTitleFilesAsync(System.UInt32,System.String,System.DateTime,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Storage.Storage.GetTitleQuotaCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Storage.Storage.ReadUserFileCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Storage.Storage.ReadTitleFileCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Storage.Storage.WriteUserFileCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Storage.Storage.WriteTitleFileCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Storage.Storage.DeleteUserFileCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Storage.Storage.DeleteTitleFileCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Storage.Storage.RevokeTitleFileCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Storage.Storage.RevokeUserFileCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Storage.Storage.EnumerateTitleFilesCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Teams.Teams">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.CreateTeam(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.String,System.String,System.String,System.Byte[],System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.BeginCreateTeam(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.String,System.String,System.String,System.Byte[],System.Byte[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.EndCreateTeam(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.CreateTeamAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.String,System.String,System.String,System.Byte[],System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.CreateTeamAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.String,System.String,System.String,System.Byte[],System.Byte[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.DeleteTeam(System.UInt32,System.Byte[],System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.BeginDeleteTeam(System.UInt32,System.Byte[],System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.EndDeleteTeam(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.DeleteTeamAsync(System.UInt32,System.Byte[],System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.DeleteTeamAsync(System.UInt32,System.Byte[],System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.RemoveTeamMember(System.UInt32,System.Byte[],System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.BeginRemoveTeamMember(System.UInt32,System.Byte[],System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.EndRemoveTeamMember(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.RemoveTeamMemberAsync(System.UInt32,System.Byte[],System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.RemoveTeamMemberAsync(System.UInt32,System.Byte[],System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.ManageTeam(System.UInt32,System.Byte[],System.String,System.String,System.String,System.String,System.String,System.String,System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.BeginManageTeam(System.UInt32,System.Byte[],System.String,System.String,System.String,System.String,System.String,System.String,System.Byte[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.EndManageTeam(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.ManageTeamAsync(System.UInt32,System.Byte[],System.String,System.String,System.String,System.String,System.String,System.String,System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.ManageTeamAsync(System.UInt32,System.Byte[],System.String,System.String,System.String,System.String,System.String,System.String,System.Byte[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.ManageTeamMember(System.UInt32,System.Byte[],System.String,System.String,System.String,System.UInt32,System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.BeginManageTeamMember(System.UInt32,System.Byte[],System.String,System.String,System.String,System.UInt32,System.Byte[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.EndManageTeamMember(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.ManageTeamMemberAsync(System.UInt32,System.Byte[],System.String,System.String,System.String,System.UInt32,System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.ManageTeamMemberAsync(System.UInt32,System.Byte[],System.String,System.String,System.String,System.UInt32,System.Byte[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.RecruitTeamMember(System.UInt32,System.Byte[],System.String,System.String,System.String,System.UInt32,System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.BeginRecruitTeamMember(System.UInt32,System.Byte[],System.String,System.String,System.String,System.UInt32,System.Byte[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.EndRecruitTeamMember(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.RecruitTeamMemberAsync(System.UInt32,System.Byte[],System.String,System.String,System.String,System.UInt32,System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.RecruitTeamMemberAsync(System.UInt32,System.Byte[],System.String,System.String,System.String,System.UInt32,System.Byte[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.JoinTeam(System.UInt32,System.Byte[],System.String,System.String,System.Byte)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.BeginJoinTeam(System.UInt32,System.Byte[],System.String,System.String,System.Byte,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.EndJoinTeam(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.JoinTeamAsync(System.UInt32,System.Byte[],System.String,System.String,System.Byte)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.JoinTeamAsync(System.UInt32,System.Byte[],System.String,System.String,System.Byte,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.GetTeamInfo(System.UInt32,System.Byte[],System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.BeginGetTeamInfo(System.UInt32,System.Byte[],System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.EndGetTeamInfo(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.GetTeamInfoAsync(System.UInt32,System.Byte[],System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.GetTeamInfoAsync(System.UInt32,System.Byte[],System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.GetTeamMembers(System.UInt32,System.Byte[],System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.BeginGetTeamMembers(System.UInt32,System.Byte[],System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.EndGetTeamMembers(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.GetTeamMembersAsync(System.UInt32,System.Byte[],System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.GetTeamMembersAsync(System.UInt32,System.Byte[],System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Teams.Teams.CreateTeamCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Teams.Teams.DeleteTeamCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Teams.Teams.RemoveTeamMemberCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Teams.Teams.ManageTeamCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Teams.Teams.ManageTeamMemberCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Teams.Teams.RecruitTeamMemberCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Teams.Teams.JoinTeamCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Teams.Teams.GetTeamInfoCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Teams.Teams.GetTeamMembersCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.UserAccount">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.LinkUser(System.Byte[],System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.BeginLinkUser(System.Byte[],System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.EndLinkUser(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.LinkUserAsync(System.Byte[],System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.LinkUserAsync(System.Byte[],System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.LinkedGamerTags(System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.BeginLinkedGamerTags(System.Byte[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.EndLinkedGamerTags(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.LinkedGamerTagsAsync(System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.LinkedGamerTagsAsync(System.Byte[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.GetUserSettings(System.Byte[],System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.BeginGetUserSettings(System.Byte[],System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.EndGetUserSettings(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.GetUserSettingsAsync(System.Byte[],System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.GetUserSettingsAsync(System.Byte[],System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.SetInfoSharing(System.Byte[],System.String,System.Boolean,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.BeginSetInfoSharing(System.Byte[],System.String,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.EndSetInfoSharing(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.SetInfoSharingAsync(System.Byte[],System.String,System.Boolean,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.SetInfoSharingAsync(System.Byte[],System.String,System.Boolean,System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.GetAccountStatus(System.Byte[],System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.BeginGetAccountStatus(System.Byte[],System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.EndGetAccountStatus(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.GetAccountStatusAsync(System.Byte[],System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.GetAccountStatusAsync(System.Byte[],System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.GetUserAuthorization(System.UInt32,System.Byte[],System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.BeginGetUserAuthorization(System.UInt32,System.Byte[],System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.EndGetUserAuthorization(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.GetUserAuthorizationAsync(System.UInt32,System.Byte[],System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.GetUserAuthorizationAsync(System.UInt32,System.Byte[],System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.CreateWholesaleAccount(ServerTestFramework.Web.UserAccount.CreateWholesaleAccountRequest)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.BeginCreateWholesaleAccount(ServerTestFramework.Web.UserAccount.CreateWholesaleAccountRequest,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.EndCreateWholesaleAccount(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.CreateWholesaleAccountAsync(ServerTestFramework.Web.UserAccount.CreateWholesaleAccountRequest)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.CreateWholesaleAccountAsync(ServerTestFramework.Web.UserAccount.CreateWholesaleAccountRequest,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.UserAccount.UserAccount.LinkUserCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.UserAccount.UserAccount.LinkedGamerTagsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.UserAccount.UserAccount.GetUserSettingsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.UserAccount.UserAccount.SetInfoSharingCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.UserAccount.UserAccount.GetAccountStatusCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.UserAccount.UserAccount.GetUserAuthorizationCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.UserAccount.UserAccount.CreateWholesaleAccountCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Teams.TeamInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Teams.TeamInfo.name">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Teams.TeamInfo.description">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Teams.TeamInfo.motto">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Teams.TeamInfo.URL">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Teams.TeamInfo.created">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Teams.TeamInfo.numMembers">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Teams.TeamInfo.data">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Teams.TeamMember">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Teams.TeamMember.gamertag">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Teams.TeamMember.member">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Teams.TeamMember.privileges">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Teams.TeamMember.data">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Teams.TeamMember.joined">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Teams.CreateTeamCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Teams.DeleteTeamCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Teams.RemoveTeamMemberCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Teams.ManageTeamCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Teams.ManageTeamMemberCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Teams.RecruitTeamMemberCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Teams.JoinTeamCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Teams.GetTeamInfoCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Teams.GetTeamInfoCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Teams.GetTeamInfoCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Teams.GetTeamMembersCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Teams.GetTeamMembersCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Teams.GetTeamMembersCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Alert.AddSubscriptions">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Alert.AddSubscriptions.liveSubscriptions">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Alert.AddSubscriptions.contentSubscriptions">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Alert.AlertSubscription">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Alert.AlertSubscription.type">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Alert.AlertSubscription.locale">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Alert.ContentSubscription">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Alert.ContentSubscription.subscriptionID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Alert.ContentSubscription.type">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Alert.ContentSubscription.locale">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Alert.LiveSubscription">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Alert.LiveSubscription.subscriptionID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Alert.LiveSubscription.type">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Alert.LiveSubscription.name">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Alert.LiveSubscription.locale">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Alert.ExistingSubscriptions">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Alert.ExistingSubscriptions.liveSubscriptions">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Alert.ExistingSubscriptions.contentSubscriptions">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Alert.SubscriberExistsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Alert.SubscriberExistsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Alert.SubscriberExistsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Alert.SubscribeCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Alert.SubscribeCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Alert.SubscribeCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Alert.UnsubscribeCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Alert.UnsubscribeCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Alert.UnsubscribeCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Alert.EnumerateSubscriptionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Alert.EnumerateSubscriptionsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Alert.EnumerateSubscriptionsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Alert.ScheduleContentAlertCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Alert.ScheduleContentAlertCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Alert.ScheduleContentAlertCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.GeneralInfo.TitlePrivilegeInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.GeneralInfo.TitlePrivilegeInfo.TitleID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.GeneralInfo.TitlePrivilegeInfo.Privileges">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.GeneralInfo.TitlePrivilegeInfo.Rating">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.GeneralInfo.TitlePrivilegeInfo.DefaultLocale">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.GeneralInfo.TitlePrivilegeInfo.LocalizedName">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.GeneralInfo.TitlePrivilege">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.GeneralInfo.TitlePrivilege.None">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.GeneralInfo.TitlePrivilege.ReadOnly">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.GeneralInfo.TitlePrivilege.ReadWrite">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.GeneralInfo.TitlePrivilege.FullControl">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.GeneralInfo.ESRBRating">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.GeneralInfo.ESRBRating.ALL">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.GeneralInfo.ESRBRating.ADULT">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.GeneralInfo.ESRBRating.MATURE">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.GeneralInfo.ESRBRating.TEEN">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.GeneralInfo.ESRBRating.EVERYONE">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.GeneralInfo.ESRBRating.KIDS_TO_ADULTS">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.GeneralInfo.ESRBRating.EARLY_CHILDHOOD">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.GeneralInfo.ESRBRating.UNSPECIFIED">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.GeneralInfo.LocalizedDisplayName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.GeneralInfo.LocalizedDisplayName.Locale">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.GeneralInfo.LocalizedDisplayName.DisplayName">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.GeneralInfo.LinkInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.GeneralInfo.LinkInfo.GamerTag">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.GeneralInfo.LinkInfo.Owner">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.GeneralInfo.GetTitleListCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.GeneralInfo.GetTitleListCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.GeneralInfo.GetTitleListCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.GeneralInfo.GetTitleListCompletedEventArgs.ValidSeconds">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.GeneralInfo.LinkedGamerTagsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.GeneralInfo.LinkedGamerTagsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.GeneralInfo.LinkedGamerTagsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.LinkInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.LinkInfo.GamerTag">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.LinkInfo.Owner">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountResponse">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountResponse.userPuidHigh">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountResponse.userPuidLow">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountResponse.gamertag">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountResponse.password">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.PhoneInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.PhoneInfo.phonePrefix">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.PhoneInfo.phoneNumber">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.PhoneInfo.phoneExtension">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.AddressInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.AddressInfo.street1">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.AddressInfo.street2">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.AddressInfo.city">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.AddressInfo.district">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.AddressInfo.state">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.AddressInfo.postalCode">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountRequest">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountRequest.offerId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountRequest.firstName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountRequest.lastName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountRequest.addressInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountRequest.phoneInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountRequest.email">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountRequest.countryId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountRequest.languageId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountRequest.birthdate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountRequest.memberName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountRequest.externalReferenceId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountRequest.reservedBytes">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.UserAuthorization">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.UserAuthorization.acceptedTermsOfService">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.UserAuthorization.isVoiceBanned">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.UserAuthorization.isSuspended">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.UserAuthorization.privileges">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.UserAuthorization.services">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.UserAccountStatus">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.UserAccountStatus.acceptMSInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.UserAccountStatus.acceptPartnerInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.UserAccountStatus.forceNameChange">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.UserAccountStatus.voiceBanned">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.UserAccountStatus.voiceBannedUntil">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.UserAccountStatus.nicknameBanned">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.UserAccountStatus.accountSuspended">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.UserAccountStatus.accountSuspendedUntil">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.LinkUserCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.LinkUserCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.LinkUserCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.LinkedGamerTagsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.LinkedGamerTagsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.LinkedGamerTagsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.GetUserSettingsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.GetUserSettingsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.GetUserSettingsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.SetInfoSharingCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.SetInfoSharingCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.SetInfoSharingCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.GetAccountStatusCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.GetAccountStatusCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.GetAccountStatusCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.GetUserAuthorizationCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.GetUserAuthorizationCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.GetUserAuthorizationCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCRecipientResult">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCRecipientResult.User">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCRecipientResult.MessageID">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCMessageSummary">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageSummary.Sender">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageSummary.SenderContext">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageSummary.SentTime">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageSummary.MessageID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageSummary.MessageFlags">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageSummary.SenderTitleID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageSummary.ExpireMinutes">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageSummary.DetailsSize">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageSummary.MessageType">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCMessageFlags">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.Required">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.Recommended">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.HasVoice">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.HasText">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.Read">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.NonExportable">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.TeamContext">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.CompContext">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.AlternateTitle">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.Marketing">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.MSReserved0">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.MSReserved1">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.MSReserved2">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.MSReserved3">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.MSReserved4">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.MSReserved5">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.MSReserved6">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.MSReserved7">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.MSReserved8">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.MSReserved9">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.MSReserved10">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.MSReserved11">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.MSReserved12">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.MSReserved13">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.TitleReserved0">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.TitleReserved1">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.TitleReserved2">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.TitleReserved3">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.TitleReserved4">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.TitleReserved5">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.TitleReserved6">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCMessageType">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageType.Invalid">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageType.TitleCustom">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageType.FriendRequest">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageType.GameInvite">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageType.TeamRecruit">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageType.CompReminder">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageType.CompRequest">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageType.LiveMessage">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageType.PersonalMessage">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageType.VideoMessage">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageType.QuickChatInvite">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageType.VideoChatInvite">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageType.PartyChatInvite">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCUserTitle">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCUserTitle.TitleID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCUserTitle.LastLogonTime">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCUserTitle.Flags">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCUserTitleFlags">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCUserTitleFlags.AcceptMarketing">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCTitleWideMessageSummary">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCTitleWideMessageSummary.TitleID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCTitleWideMessageSummary.SenderContext">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCTitleWideMessageSummary.SentTime">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCTitleWideMessageSummary.Region">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCTitleWideMessageSummary.MessageID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCTitleWideMessageSummary.MessageFlags">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCTitleWideMessageSummary.ExpireMinutes">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCTitleWideMessageSummary.DetailsSize">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCTitleWideMessageSummary.MessageType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCTitleWideMessageSummary.SenderName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCTitleWideMessageSummary.Description">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCLanguageString">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCLanguageString.Locale">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCLanguageString.String">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCLocalizedString">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCLocalizedString.PropID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCLocalizedString.DefaultLocale">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCLocalizedString.LangString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCMessageAttachment">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageAttachment.PropID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageAttachment.Flags">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageAttachment.Data">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCAttachFlags">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCAttachFlags.NonExportable">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCAttachFlags.Directory">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCStringIdProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCStringIdProp.PropID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCStringIdProp.Value">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCBoolProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCBoolProp.PropID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCBoolProp.Value">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCAttachmentProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCAttachmentProp.PropID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCAttachmentProp.AttachSize">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCAttachmentProp.AttachFlags">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCAttachmentProp.AttachUrl">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCBinaryProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCBinaryProp.PropID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCBinaryProp.Value">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCTimeProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCTimeProp.PropID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCTimeProp.Value">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCStringProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCStringProp.PropID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCStringProp.Value">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCQwordProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCQwordProp.PropID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCQwordProp.Value">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCDwordProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCDwordProp.PropID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCDwordProp.Value">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCWordProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCWordProp.PropID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCWordProp.Value">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCByteProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCByteProp.PropID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCByteProp.Value">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCNullProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCNullProp.PropID">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCMessageDetails">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageDetails.NullProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageDetails.ByteProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageDetails.WordProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageDetails.DwordProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageDetails.QwordProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageDetails.StringProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageDetails.TimeProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageDetails.BinaryProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageDetails.AttachmentProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageDetails.BoolProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageDetails.StringIdProp">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCDeleteSysMsgFlags">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCDeleteSysMsgFlags.RevokeAll">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCDeleteMsgFlags">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCDeleteMsgFlags.BlockSender">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.GetMessageStringCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.GetMessageStringCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.GetMessageStringCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.RevokeTitleUserMessageCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.RevokeTitleUserMessageCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.RevokeTitleUserMessageCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.SendTitleUserMessageCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.SendTitleUserMessageCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.SendTitleUserMessageCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.SendTitleUserMessageCompletedEventArgs.RecipResult">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.SendTitleWideMessageCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.SendTitleWideMessageCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.SendTitleWideMessageCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.SendTitleWideMessageCompletedEventArgs.Delay">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.SendTitleWideMessageCompletedEventArgs.MessageID">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.DeleteTitleWideMessageCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.DeleteTitleWideMessageCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.DeleteTitleWideMessageCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.GetTitleWideMessageDetailsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.GetTitleWideMessageDetailsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.GetTitleWideMessageDetailsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.GetTitleWideMessageDetailsCompletedEventArgs.Summary">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.GetTitleWideMessageDetailsCompletedEventArgs.Details">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.EnumTitleWideMessagesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.EnumTitleWideMessagesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.EnumTitleWideMessagesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.EnumTitleWideMessagesCompletedEventArgs.Summary">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.SetMessageFlagsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.SetMessageFlagsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.SetMessageFlagsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.EnumUserTitlesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.EnumUserTitlesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.EnumUserTitlesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.EnumUserTitlesCompletedEventArgs.Title">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.DeleteUserTitleCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.DeleteUserTitleCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.DeleteUserTitleCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.RevokeMessageCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.RevokeMessageCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.RevokeMessageCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.SendMessageCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.SendMessageCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.SendMessageCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.SendMessageCompletedEventArgs.RecipResult">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.DeleteMessageCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.DeleteMessageCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.DeleteMessageCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.GetMessageDetailsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.GetMessageDetailsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.GetMessageDetailsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.GetMessageDetailsCompletedEventArgs.Summary">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.GetMessageDetailsCompletedEventArgs.Details">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.EnumMessagesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.EnumMessagesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.EnumMessagesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.EnumMessagesCompletedEventArgs.Summary">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.PresenceInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.PresenceInfo.XUID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.PresenceInfo.GamerTag">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.PresenceInfo.OnlineState">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.PresenceInfo.LastSeenTitle">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.PresenceInfo.MinutesSinceStateChange">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.PresenceInfo.RichPresenceString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.OfflineFriend">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.OfflineFriend.G">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.OnlineFriend">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.OnlineFriend.G">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.OnlineFriend.T">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.OnlineFriend.S">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.FriendsInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.FriendsInfo.OnlineFriends">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.FriendsInfo.OfflineFriends">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.RecentPlayer">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.RecentPlayer.UserLivepuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.RecentPlayer.Gamertag">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.RecentPlayer.GamerTileUrl">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.RecentPlayer.ReputationBucket">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.RecentPlayer.GamerScore">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.RecentPlayer.GamerZone">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.RecentPlayer.Status">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.RecentPlayer.GameTitleName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.RecentPlayer.LastMetDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.RecentPlayer.GameTitleTileUrl">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.GamercardZones">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Presence.GamercardZones.Unknown">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Presence.GamercardZones.None">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Presence.GamercardZones.Xbox_1">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Presence.GamercardZones.RR">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Presence.GamercardZones.Pro">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Presence.GamercardZones.Family">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Presence.GamercardZones.Underground">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.RecentPlayerStatus">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Presence.RecentPlayerStatus.Neutral">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Presence.RecentPlayerStatus.Preferred">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Presence.RecentPlayerStatus.Avoided">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.FriendEx">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.FriendEx.XUID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.FriendEx.GamerTag">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.FriendEx.FriendStatus">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.FriendEx.OnlineState">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.FriendEx.LastSeenTitle">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.FriendEx.MinutesSinceStateChange">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.FriendEx.RichPresenceString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.GetGamertagsFromXUIDSCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.GetGamertagsFromXUIDSCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.GetGamertagsFromXUIDSCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.GetXUIDSFromGamertagsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.GetXUIDSFromGamertagsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.GetXUIDSFromGamertagsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.GetPresenceInfoCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.GetPresenceInfoCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.GetPresenceInfoCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.GetPresenceInfoCompletedEventArgs.ValidSeconds">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.GetFriendsExCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.GetFriendsExCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.GetFriendsExCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.GetFriendsExCompletedEventArgs.ValidSeconds">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.GetRecentPlayersCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.GetRecentPlayersCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.GetRecentPlayersCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.GetFriendsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.GetFriendsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.GetFriendsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.GetFriendsCompletedEventArgs.ValidSeconds">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Profile.wcAchievement">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Profile.wcAchievement.uiAchievementId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Profile.wcAchievement.dtAchieved">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Profile.wcAchievement.nFlags">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Profile.wcAchievement.byType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Profile.wcAchievement.nCred">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Profile.wcAchievement.nImageId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Profile.wcAchievement.szTitle">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Profile.wcAchievement.szDescription">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Profile.wcAchievement.szHowTo">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Profile.UserSetting">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Profile.UserSetting.ulUserId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Profile.UserSetting.uiSettingId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Profile.UserSetting.value">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Profile.UserSetting.status">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Profile.ReadProfileStatus">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Profile.ReadProfileStatus.SUCCESS_TITLE">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Profile.ReadProfileStatus.SUCCESS_DEFAULT">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Profile.ReadProfileStatus.WARNING_NO_VALUE">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Profile.ReadProfileStatus.ERROR_NO_PERMISSION">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Profile.ReadProfileStatus.ERROR_PUID_INVALID">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Profile.ReadAchievementsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Profile.ReadAchievementsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Profile.ReadAchievementsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Profile.ReadSettingsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Profile.ReadSettingsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Profile.ReadSettingsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.QueryAttribute">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.WireData">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.QueryAttribute.Value">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.QueryAttribute.Id">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.XRLObject2">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.FindFromIdsResponse">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.FindFromIdsResponse.returnedResults">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.FindFromIdsResponse.attribCount">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.FindFromIdsResponse.attribs">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.SearchResponse">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.SearchResponse.totalResults">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.SearchResponse.returnedResults">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.SearchResponse.attribCount">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.SearchResponse.attribs">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.QueryAttributeSpec">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.QueryAttributeSpec.type">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.QueryAttributeSpec.len">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.AddCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.AddCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.AddCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.UpdateCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.UpdateIdCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.SearchCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.SearchCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.SearchCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.FindFromIdsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.FindFromIdsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.FindFromIdsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.RemoveCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.RemoveIdCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.SelectCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.GetXQSConfigCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.GetXQSConfigCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.GetXQSConfigCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.CompetitionCreateCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.CompetitionCreateCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.CompetitionCreateCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.CompetitionCreateSingleEliminationCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.CompetitionCreateSingleEliminationCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.CompetitionCreateSingleEliminationCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.CompetitionSearchCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.CompetitionSearchCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.CompetitionSearchCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.CompetitionManageEntrantCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.CompetitionCancelCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.CompetitionTopologyCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.CompetitionTopologyCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.CompetitionTopologyCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.CompetitionTopologySingleEliminationCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.CompetitionTopologySingleEliminationCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.CompetitionTopologySingleEliminationCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.SignatureWidget.XSigVerifySignatureRequest">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.SignatureWidget.XSigVerifySignatureRequest._digest">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.SignatureWidget.XSigVerifySignatureRequest._signature">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.SignatureWidget.XSigCreateSignatureResponse">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.SignatureWidget.XSigCreateSignatureResponse._hresult">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.SignatureWidget.XSigCreateSignatureResponse._signature">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.SignatureWidget.XSigCreateSignatureRequest">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.SignatureWidget.XSigCreateSignatureRequest._digest">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.SignatureWidget.VerifySignatureCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.SignatureWidget.VerifySignatureCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.SignatureWidget.VerifySignatureCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.SignatureWidget.CreateSignatureCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.SignatureWidget.CreateSignatureCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.SignatureWidget.CreateSignatureCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.SignatureWidget.TransferUserLicensesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.SignatureWidget.BlacklistDigestCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.SignatureWidget.UnBlacklistDigestCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.DeleteXUIDStatus">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.DeleteXUIDStatus.Success">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.DeleteXUIDStatus.Warning_No_OP">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.DeleteXUIDStatus.Error_Invalid_Xuid">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.DeleteXUIDStatus.Error_Invalid_Title">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.DeleteXUIDStatus.Error_Invalid_Lb_ID">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.LBInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.LBInfo.LBID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.LBInfo.ResetType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.LBInfo.LocalizedLBName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.LBInfo.AttributeInfo">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.LBResetType">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.LBResetType.Never">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.LBResetType.Weekly">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.LBResetType.Monthly">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.LBResetType.Bimonthly">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.LBResetType.Quarterly">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.LBResetType.Semiannually">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.LBResetType.Annually">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.StatsLocalizedName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.StatsLocalizedName.Locale">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.StatsLocalizedName.DisplayName">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.RawLBAttribute">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.RawLBAttribute.ID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.RawLBAttribute.V">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.RawLBEntry">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.RawLBEntry.G">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.RawLBEntry.R">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.RawLBEntry.A">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.RawLBResults">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.RawLBResults.Entries">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.RawLBResults.LBLastResetDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.RawLBResults.TotalLBEntries">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.DetailedMLBEntry">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.DetailedMLBEntry.LBID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.DetailedMLBEntry.R">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.DetailedMLBEntry.F">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.DetailedMLBEntry.LBLastResetDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.DetailedMLBEntry.TotalLBEntries">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.LBEntryAttribute">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.LBEntryAttribute.ID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.LBEntryAttribute.V">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.DetailedMLBResults">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.DetailedMLBResults.Entries">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.DetailedMLBResults.G">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.LBEntry">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.LBEntry.G">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.LBEntry.R">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.LBResults">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.LBResults.Entries">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.LBResults.LBLastResetDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.LBResults.TotalLBEntries">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.DetailedLBEntry">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.DetailedLBEntry.G">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.DetailedLBEntry.R">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.DetailedLBEntry.F">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.DetailedLBResults">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.DetailedLBResults.Entries">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.DetailedLBResults.LBLastResetDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.DetailedLBResults.TotalLBEntries">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.LBAttributeInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.LBAttributeInfo.ID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.LBAttributeInfo.Unit">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.LBAttributeInfo.LocalizedAttrName">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.AttributeUnit">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.AttributeUnit.Integer">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.AttributeUnit.Float">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.AttributeUnit.Percent">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.AttributeUnit.GamerTag">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.AttributeUnit.TimeStamp">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.AttributeUnit.MilliSeconds">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.AttributeUnit.TenMilliSeconds">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.AttributeUnit.HundredMilliSeconds">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.AttributeUnit.Seconds">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.AttributeUnit.Minutes">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.AttributeUnit.Hours">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.AttributeUnit.Days">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.AttributeUnit.String">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.AttributeUnit.Team">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.AttributeUnit.MaxAttributeUnit">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.LBType">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.LBType.Regular">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.LBType.RegularTeam">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.LBType.CompetitionTemplate">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.LBType.CompetitionTemplateTeam">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.DeleteXUIDFromLBCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.DeleteXUIDFromLBCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.DeleteXUIDFromLBCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.DeleteXUIDFromAllLBsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.DeleteXUIDFromAllLBsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.DeleteXUIDFromAllLBsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.GetLBListCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.GetLBListCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.GetLBListCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.GetLBListCompletedEventArgs.ValidSeconds">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.GetLBListByTypeCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.GetLBListByTypeCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.GetLBListByTypeCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.GetLBListByTypeCompletedEventArgs.ValidSeconds">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.EnumerateLBCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.EnumerateLBCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.EnumerateLBCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.EnumerateLBCompletedEventArgs.ValidSeconds">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.GetLBNearGamerTagCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.GetLBNearGamerTagCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.GetLBNearGamerTagCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.GetLBNearGamerTagCompletedEventArgs.ValidSeconds">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.GetLBForGamerTagsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.GetLBForGamerTagsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.GetLBForGamerTagsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.GetLBForGamerTagsCompletedEventArgs.ValidSeconds">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.GetLBDetailsForGamerTagsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.GetLBDetailsForGamerTagsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.GetLBDetailsForGamerTagsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.GetLBDetailsForGamerTagsCompletedEventArgs.ValidSeconds">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.GetMLBByXUIDCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.GetMLBByXUIDCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.GetMLBByXUIDCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.EnumerateTeamLBCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.EnumerateTeamLBCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.EnumerateTeamLBCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.EnumerateTeamLBCompletedEventArgs.ValidSeconds">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.GetTeamLBNearTeamNameCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.GetTeamLBNearTeamNameCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.GetTeamLBNearTeamNameCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.GetTeamLBNearTeamNameCompletedEventArgs.ValidSeconds">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.GetTeamLBForTeamNamesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.GetTeamLBForTeamNamesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.GetTeamLBForTeamNamesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.GetTeamLBForTeamNamesCompletedEventArgs.ValidSeconds">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.GetTeamLBDetailsForTeamNamesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.GetTeamLBDetailsForTeamNamesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.GetTeamLBDetailsForTeamNamesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.GetTeamLBDetailsForTeamNamesCompletedEventArgs.ValidSeconds">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.EnumerateLBRawCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.EnumerateLBRawCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.EnumerateLBRawCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.EnumerateLBRawCompletedEventArgs.ValidSeconds">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Storage.QuotaInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.QuotaInfo.MaxFileSize">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.QuotaInfo.TotalBytesMax">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.QuotaInfo.TotalBytesUsed">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.QuotaInfo.TotalFilesMax">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.QuotaInfo.TotalFilesUsed">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Storage.FileEnumerationInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.FileEnumerationInfo.TitleID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.FileEnumerationInfo.TitleVersion">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.FileEnumerationInfo.GamerTag">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.FileEnumerationInfo.UserCountryID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.FileEnumerationInfo.FileSize">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.FileEnumerationInfo.CreationDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.FileEnumerationInfo.ModifiedDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.FileEnumerationInfo.FileName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.FileEnumerationInfo.FileContentType">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Storage.FileContentTypeEnum">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Storage.FileContentTypeEnum.Package">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Storage.FileContentTypeEnum.Blob">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Storage.ReadFileInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.ReadFileInfo.FileNotModified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.ReadFileInfo.TitleID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.ReadFileInfo.TitleVersion">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.ReadFileInfo.GamerTag">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.ReadFileInfo.UserCountryID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.ReadFileInfo.FileSize">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.ReadFileInfo.CreationDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.ReadFileInfo.FileData">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.ReadFileInfo.FileContentType">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Storage.GetTitleQuotaCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Storage.GetTitleQuotaCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.GetTitleQuotaCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Storage.ReadUserFileCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Storage.ReadUserFileCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.ReadUserFileCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Storage.ReadTitleFileCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Storage.ReadTitleFileCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.ReadTitleFileCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Storage.WriteUserFileCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Storage.WriteTitleFileCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Storage.DeleteUserFileCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Storage.DeleteTitleFileCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Storage.RevokeTitleFileCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Storage.RevokeUserFileCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Storage.EnumerateTitleFilesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Storage.EnumerateTitleFilesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.EnumerateTitleFilesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.CXSuppApi">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.ConsoleApplicationsGetByGamerTag(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginConsoleApplicationsGetByGamerTag(System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndConsoleApplicationsGetByGamerTag(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.ConsoleApplicationsGetByGamerTagAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.ConsoleApplicationsGetByGamerTagAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.ConsoleApplicationsGetByUserPuid(System.UInt64,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginConsoleApplicationsGetByUserPuid(System.UInt64,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndConsoleApplicationsGetByUserPuid(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.ConsoleApplicationsGetByUserPuidAsync(System.UInt64,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.ConsoleApplicationsGetByUserPuidAsync(System.UInt64,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.ConsoleApplicationsGetByConsoleId(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginConsoleApplicationsGetByConsoleId(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndConsoleApplicationsGetByConsoleId(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.ConsoleApplicationsGetByConsoleIdAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.ConsoleApplicationsGetByConsoleIdAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.ConsoleApplicationsGetByMachinePuid(System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginConsoleApplicationsGetByMachinePuid(System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndConsoleApplicationsGetByMachinePuid(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.ConsoleApplicationsGetByMachinePuidAsync(System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.ConsoleApplicationsGetByMachinePuidAsync(System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getPuidFromXName(System.String,System.UInt64@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BegingetPuidFromXName(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndgetPuidFromXName(System.IAsyncResult,System.UInt64@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getPuidFromXNameAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getPuidFromXNameAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getAccount(System.UInt64,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BegingetAccount(System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndgetAccount(System.IAsyncResult,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getAccountAsync(System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getAccountAsync(System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.modifyAccount(System.UInt64,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginmodifyAccount(System.UInt64,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndmodifyAccount(System.IAsyncResult,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.modifyAccountAsync(System.UInt64,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.modifyAccountAsync(System.UInt64,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.banAccount(System.UInt64,System.Boolean,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginbanAccount(System.UInt64,System.Boolean,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndbanAccount(System.IAsyncResult,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.banAccountAsync(System.UInt64,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.banAccountAsync(System.UInt64,System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getRelatedAccounts(System.UInt64,System.UInt64[]@,System.String[]@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BegingetRelatedAccounts(System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndgetRelatedAccounts(System.IAsyncResult,System.UInt64[]@,System.String[]@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getRelatedAccountsAsync(System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getRelatedAccountsAsync(System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getSubscriptionCodeStatus(System.String,System.Boolean@,System.Boolean@,System.Boolean@,System.UInt64@,System.String@,System.DateTime@,System.UInt64@,System.String@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BegingetSubscriptionCodeStatus(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndgetSubscriptionCodeStatus(System.IAsyncResult,System.Boolean@,System.Boolean@,System.Boolean@,System.UInt64@,System.String@,System.DateTime@,System.UInt64@,System.String@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getSubscriptionCodeStatusAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getSubscriptionCodeStatusAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getAccountEx(System.UInt64,System.UInt64@,System.DateTime@,System.Int32@,System.DateTime@,System.Int32@,System.Boolean@,System.DateTime@,System.Byte@,System.Boolean@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BegingetAccountEx(System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndgetAccountEx(System.IAsyncResult,System.UInt64@,System.DateTime@,System.Int32@,System.DateTime@,System.Int32@,System.Boolean@,System.DateTime@,System.Byte@,System.Boolean@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getAccountExAsync(System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getAccountExAsync(System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getPassportMemberName(System.UInt64,System.String@,System.String@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BegingetPassportMemberName(System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndgetPassportMemberName(System.IAsyncResult,System.String@,System.String@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getPassportMemberNameAsync(System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getPassportMemberNameAsync(System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.RemoveGamerPicture(System.UInt64,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginRemoveGamerPicture(System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndRemoveGamerPicture(System.IAsyncResult,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.RemoveGamerPictureAsync(System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.RemoveGamerPictureAsync(System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SetUserMotto(System.UInt64,System.String,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginSetUserMotto(System.UInt64,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndSetUserMotto(System.IAsyncResult,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SetUserMottoAsync(System.UInt64,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SetUserMottoAsync(System.UInt64,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SetUserProfileItems(System.UInt64,ServerTestFramework.CUST.ProfileItem[],System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginSetUserProfileItems(System.UInt64,ServerTestFramework.CUST.ProfileItem[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndSetUserProfileItems(System.IAsyncResult,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SetUserProfileItemsAsync(System.UInt64,ServerTestFramework.CUST.ProfileItem[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SetUserProfileItemsAsync(System.UInt64,ServerTestFramework.CUST.ProfileItem[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.IncrementMaximumLicenseCount(System.UInt64,System.Guid)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginIncrementMaximumLicenseCount(System.UInt64,System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndIncrementMaximumLicenseCount(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.IncrementMaximumLicenseCountAsync(System.UInt64,System.Guid)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.IncrementMaximumLicenseCountAsync(System.UInt64,System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.GetXMLFromXName(System.String,System.String@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginGetXMLFromXName(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndGetXMLFromXName(System.IAsyncResult,System.String@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.GetXMLFromXNameAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.GetXMLFromXNameAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SwapUserWLID(System.UInt64,System.String,System.String,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginSwapUserWLID(System.UInt64,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndSwapUserWLID(System.IAsyncResult,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SwapUserWLIDAsync(System.UInt64,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SwapUserWLIDAsync(System.UInt64,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SwapOwnerWLID(System.UInt64,System.String,System.String,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginSwapOwnerWLID(System.UInt64,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndSwapOwnerWLID(System.IAsyncResult,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SwapOwnerWLIDAsync(System.UInt64,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SwapOwnerWLIDAsync(System.UInt64,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SwapUserDateOfBirth(System.UInt64,System.DateTime,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginSwapUserDateOfBirth(System.UInt64,System.DateTime,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndSwapUserDateOfBirth(System.IAsyncResult,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SwapUserDateOfBirthAsync(System.UInt64,System.DateTime)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SwapUserDateOfBirthAsync(System.UInt64,System.DateTime,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.FamilyHistoryGetByPuid(System.UInt64,ServerTestFramework.CUST.FamilyHistoryDetail[]@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginFamilyHistoryGetByPuid(System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndFamilyHistoryGetByPuid(System.IAsyncResult,ServerTestFramework.CUST.FamilyHistoryDetail[]@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.FamilyHistoryGetByPuidAsync(System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.FamilyHistoryGetByPuidAsync(System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.FamilyHistoryGetByGamertag(System.String,ServerTestFramework.CUST.FamilyHistoryDetail[]@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginFamilyHistoryGetByGamertag(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndFamilyHistoryGetByGamertag(System.IAsyncResult,ServerTestFramework.CUST.FamilyHistoryDetail[]@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.FamilyHistoryGetByGamertagAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.FamilyHistoryGetByGamertagAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.GetFamilyMembersByPuid(System.UInt64,ServerTestFramework.CUST.FamilyMember[]@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginGetFamilyMembersByPuid(System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndGetFamilyMembersByPuid(System.IAsyncResult,ServerTestFramework.CUST.FamilyMember[]@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.GetFamilyMembersByPuidAsync(System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.GetFamilyMembersByPuidAsync(System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.GetFamilyMembersByGamertag(System.String,ServerTestFramework.CUST.FamilyMember[]@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginGetFamilyMembersByGamertag(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndGetFamilyMembersByGamertag(System.IAsyncResult,ServerTestFramework.CUST.FamilyMember[]@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.GetFamilyMembersByGamertagAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.GetFamilyMembersByGamertagAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getMachineAccountByConsoleId(System.UInt64,System.String,System.Boolean@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BegingetMachineAccountByConsoleId(System.UInt64,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndgetMachineAccountByConsoleId(System.IAsyncResult,System.Boolean@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getMachineAccountByConsoleIdAsync(System.UInt64,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getMachineAccountByConsoleIdAsync(System.UInt64,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.IsMachinePuidBanned(System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginIsMachinePuidBanned(System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndIsMachinePuidBanned(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.IsMachinePuidBannedAsync(System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.IsMachinePuidBannedAsync(System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.LookupMachineAccountByConsoleIdAndSCode(System.String,System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginLookupMachineAccountByConsoleIdAndSCode(System.String,System.Byte[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndLookupMachineAccountByConsoleIdAndSCode(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.LookupMachineAccountByConsoleIdAndSCodeAsync(System.String,System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.LookupMachineAccountByConsoleIdAndSCodeAsync(System.String,System.Byte[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.LookupMachineAccountByConsoleIdAndXuid(System.String,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginLookupMachineAccountByConsoleIdAndXuid(System.String,System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndLookupMachineAccountByConsoleIdAndXuid(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.LookupMachineAccountByConsoleIdAndXuidAsync(System.String,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.LookupMachineAccountByConsoleIdAndXuidAsync(System.String,System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.MachineHistoryGetByConsoleId(System.String,System.Nullable{System.DateTime})">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginMachineHistoryGetByConsoleId(System.String,System.Nullable{System.DateTime},System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndMachineHistoryGetByConsoleId(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.MachineHistoryGetByConsoleIdAsync(System.String,System.Nullable{System.DateTime})">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.MachineHistoryGetByConsoleIdAsync(System.String,System.Nullable{System.DateTime},System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.MachineHistoryGetByPuid(System.UInt64,System.Nullable{System.DateTime})">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginMachineHistoryGetByPuid(System.UInt64,System.Nullable{System.DateTime},System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndMachineHistoryGetByPuid(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.MachineHistoryGetByPuidAsync(System.UInt64,System.Nullable{System.DateTime})">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.MachineHistoryGetByPuidAsync(System.UInt64,System.Nullable{System.DateTime},System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SetFamilyGoldSeatExemptionByPuid(System.UInt64,System.UInt64,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginSetFamilyGoldSeatExemptionByPuid(System.UInt64,System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndSetFamilyGoldSeatExemptionByPuid(System.IAsyncResult,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SetFamilyGoldSeatExemptionByPuidAsync(System.UInt64,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SetFamilyGoldSeatExemptionByPuidAsync(System.UInt64,System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SetFamilyGoldSeatExemptionByGamertag(System.String,System.String,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginSetFamilyGoldSeatExemptionByGamertag(System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndSetFamilyGoldSeatExemptionByGamertag(System.IAsyncResult,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SetFamilyGoldSeatExemptionByGamertagAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SetFamilyGoldSeatExemptionByGamertagAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SetFreeGamertagEligible(System.UInt64,System.Boolean,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginSetFreeGamertagEligible(System.UInt64,System.Boolean,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndSetFreeGamertagEligible(System.IAsyncResult,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SetFreeGamertagEligibleAsync(System.UInt64,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SetFreeGamertagEligibleAsync(System.UInt64,System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.GamertagHistoryGet(System.String,System.Nullable{System.DateTime})">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginGamertagHistoryGet(System.String,System.Nullable{System.DateTime},System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndGamertagHistoryGet(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.GamertagHistoryGetAsync(System.String,System.Nullable{System.DateTime})">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.GamertagHistoryGetAsync(System.String,System.Nullable{System.DateTime},System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.UserHistoryGetByGamertag(System.String,System.Nullable{System.DateTime})">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginUserHistoryGetByGamertag(System.String,System.Nullable{System.DateTime},System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndUserHistoryGetByGamertag(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.UserHistoryGetByGamertagAsync(System.String,System.Nullable{System.DateTime})">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.UserHistoryGetByGamertagAsync(System.String,System.Nullable{System.DateTime},System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.UserHistoryGetByPuid(System.UInt64,System.Nullable{System.DateTime})">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginUserHistoryGetByPuid(System.UInt64,System.Nullable{System.DateTime},System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndUserHistoryGetByPuid(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.UserHistoryGetByPuidAsync(System.UInt64,System.Nullable{System.DateTime})">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.UserHistoryGetByPuidAsync(System.UInt64,System.Nullable{System.DateTime},System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.ConsoleApplicationsGetByGamerTagCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.ConsoleApplicationsGetByUserPuidCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.ConsoleApplicationsGetByConsoleIdCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.ConsoleApplicationsGetByMachinePuidCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.getPuidFromXNameCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.getAccountCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.modifyAccountCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.banAccountCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.getRelatedAccountsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.getSubscriptionCodeStatusCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.getAccountExCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.getPassportMemberNameCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.RemoveGamerPictureCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.SetUserMottoCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.SetUserProfileItemsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.IncrementMaximumLicenseCountCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.GetXMLFromXNameCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.SwapUserWLIDCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.SwapOwnerWLIDCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.SwapUserDateOfBirthCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.FamilyHistoryGetByPuidCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.FamilyHistoryGetByGamertagCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.GetFamilyMembersByPuidCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.GetFamilyMembersByGamertagCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.getMachineAccountByConsoleIdCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.IsMachinePuidBannedCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.LookupMachineAccountByConsoleIdAndSCodeCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.LookupMachineAccountByConsoleIdAndXuidCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.MachineHistoryGetByConsoleIdCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.MachineHistoryGetByPuidCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.SetFamilyGoldSeatExemptionByPuidCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.SetFamilyGoldSeatExemptionByGamertagCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.SetFreeGamertagEligibleCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.GamertagHistoryGetCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.UserHistoryGetByGamertagCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.UserHistoryGetByPuidCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.ConsoleApplications">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ConsoleApplications.MachinePuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ConsoleApplications.ConsoleId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ConsoleApplications.ApplicationGroups">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.ConsoleApplicationGroup">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ConsoleApplicationGroup.Name">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ConsoleApplicationGroup.SystemOnlineManifestRevision">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ConsoleApplicationGroup.SystemManifestRevision">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ConsoleApplicationGroup.FlashVersion">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ConsoleApplicationGroup.GroupId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ConsoleApplicationGroup.Applications">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.ConsoleApplicationDetail">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ConsoleApplicationDetail.FileName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ConsoleApplicationDetail.FriendlyName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ConsoleApplicationDetail.AppVersion">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ConsoleApplicationDetail.Online">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.UserHistory">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.UserHistory.UserPuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.UserHistory.UserHistoryDetail">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.UserHistory.MachineHistoryDetail">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.UserHistoryDetail">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.UserHistoryDetail.Timestamp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.UserHistoryDetail.UserPuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.UserHistoryDetail.MachinePuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.UserHistoryDetail.IpAddress">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.UserHistoryDetail.Reason">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.UserHistoryDetail.Detail">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.MachineHistoryDetail">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineHistoryDetail.UserPuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineHistoryDetail.MachinePuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineHistoryDetail.FirstSeen">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineHistoryDetail.LastSeen">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineHistoryDetail.DaysSeen">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineHistoryDetail.IpAddress">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.MachineInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineInfo.MachinePuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineInfo.ConsoleId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineInfo.SecondaryIdentifier">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineInfo.ResetDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineInfo.CreateDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineInfo.FlashVersion">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineInfo.FlashDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineInfo.ConsoleRegion">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineInfo.UpdateVersion">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineInfo.UpdateDate">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.MachineHistory">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineHistory.MachinePuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineHistory.UserHistoryDetail">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineHistory.MachineHistoryDetail">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineHistory.MachineConsoleInfo">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.FamilyMember">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.FamilyMember.userPuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.FamilyMember.userFlags">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.FamilyMember.gamertag">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.FamilyHistoryDetail">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.FamilyHistoryDetail.ownerPassportPuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.FamilyHistoryDetail.ownerGamertag">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.FamilyHistoryDetail.dependentPuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.FamilyHistoryDetail.dependentGamertag">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.FamilyHistoryDetail.machinePuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.FamilyHistoryDetail.ipAddress">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.FamilyHistoryDetail.timestamp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.FamilyHistoryDetail.hr">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.FamilyHistoryDetail.reason">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.ProfileItem">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ProfileItem.profileItem">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ProfileItem.profileItemValue">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ProfileItem.titleId">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.ConsoleApplicationsGetByGamerTagCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.ConsoleApplicationsGetByGamerTagCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ConsoleApplicationsGetByGamerTagCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.ConsoleApplicationsGetByUserPuidCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.ConsoleApplicationsGetByUserPuidCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ConsoleApplicationsGetByUserPuidCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.ConsoleApplicationsGetByConsoleIdCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.ConsoleApplicationsGetByConsoleIdCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ConsoleApplicationsGetByConsoleIdCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.ConsoleApplicationsGetByMachinePuidCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.ConsoleApplicationsGetByMachinePuidCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ConsoleApplicationsGetByMachinePuidCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.getPuidFromXNameCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.getPuidFromXNameCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getPuidFromXNameCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getPuidFromXNameCompletedEventArgs.puid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getPuidFromXNameCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.getAccountCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.getAccountCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountCompletedEventArgs.isAccountOwner">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountCompletedEventArgs.isActive">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountCompletedEventArgs.isLockedOut">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountCompletedEventArgs.isVoiceBanned">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountCompletedEventArgs.isNicknameBanned">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountCompletedEventArgs.mustChangeXName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountCompletedEventArgs.isGeofenceExempt">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.modifyAccountCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.modifyAccountCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.modifyAccountCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.modifyAccountCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.banAccountCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.banAccountCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.banAccountCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.banAccountCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.getRelatedAccountsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.getRelatedAccountsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getRelatedAccountsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getRelatedAccountsCompletedEventArgs.relatedAccounts">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getRelatedAccountsCompletedEventArgs.relatedAccountNames">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getRelatedAccountsCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.getSubscriptionCodeStatusCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.getSubscriptionCodeStatusCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getSubscriptionCodeStatusCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getSubscriptionCodeStatusCompletedEventArgs.bValidSubscriptionCode">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getSubscriptionCodeStatusCompletedEventArgs.bUsed">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getSubscriptionCodeStatusCompletedEventArgs.bUsedMaxTimes">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getSubscriptionCodeStatusCompletedEventArgs.ulLastUser">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getSubscriptionCodeStatusCompletedEventArgs.szLastUser">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getSubscriptionCodeStatusCompletedEventArgs.ftLastUsage">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getSubscriptionCodeStatusCompletedEventArgs.ulOfferID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getSubscriptionCodeStatusCompletedEventArgs.szOffer">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getSubscriptionCodeStatusCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.getAccountExCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.getAccountExCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountExCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountExCompletedEventArgs.biOwnerPuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountExCompletedEventArgs.dtAccountResumeDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountExCompletedEventArgs.iSuspensionLength">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountExCompletedEventArgs.dtVoiceResumeDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountExCompletedEventArgs.iVoiceBanLength">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountExCompletedEventArgs.bMustChangeXName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountExCompletedEventArgs.dtAcceptedTOS">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountExCompletedEventArgs.tiCountryID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountExCompletedEventArgs.isGeoFenceExempt">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountExCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.getPassportMemberNameCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.getPassportMemberNameCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getPassportMemberNameCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getPassportMemberNameCompletedEventArgs.userPmn">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getPassportMemberNameCompletedEventArgs.parentPmn">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getPassportMemberNameCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.RemoveGamerPictureCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.RemoveGamerPictureCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.RemoveGamerPictureCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.RemoveGamerPictureCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.SetUserMottoCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.SetUserMottoCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.SetUserMottoCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.SetUserMottoCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.SetUserProfileItemsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.SetUserProfileItemsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.SetUserProfileItemsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.SetUserProfileItemsCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.IncrementMaximumLicenseCountCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.IncrementMaximumLicenseCountCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.IncrementMaximumLicenseCountCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.GetXMLFromXNameCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.GetXMLFromXNameCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.GetXMLFromXNameCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.GetXMLFromXNameCompletedEventArgs.userXML">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.GetXMLFromXNameCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.SwapUserWLIDCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.SwapUserWLIDCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.SwapUserWLIDCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.SwapUserWLIDCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.SwapOwnerWLIDCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.SwapOwnerWLIDCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.SwapOwnerWLIDCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.SwapOwnerWLIDCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.SwapUserDateOfBirthCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.SwapUserDateOfBirthCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.SwapUserDateOfBirthCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.SwapUserDateOfBirthCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.FamilyHistoryGetByPuidCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.FamilyHistoryGetByPuidCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.FamilyHistoryGetByPuidCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.FamilyHistoryGetByPuidCompletedEventArgs.details">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.FamilyHistoryGetByPuidCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.FamilyHistoryGetByGamertagCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.FamilyHistoryGetByGamertagCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.FamilyHistoryGetByGamertagCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.FamilyHistoryGetByGamertagCompletedEventArgs.details">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.FamilyHistoryGetByGamertagCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.GetFamilyMembersByPuidCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.GetFamilyMembersByPuidCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.GetFamilyMembersByPuidCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.GetFamilyMembersByPuidCompletedEventArgs.familyMembers">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.GetFamilyMembersByPuidCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.GetFamilyMembersByGamertagCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.GetFamilyMembersByGamertagCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.GetFamilyMembersByGamertagCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.GetFamilyMembersByGamertagCompletedEventArgs.familyMembers">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.GetFamilyMembersByGamertagCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.getMachineAccountByConsoleIdCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.getMachineAccountByConsoleIdCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getMachineAccountByConsoleIdCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getMachineAccountByConsoleIdCompletedEventArgs.isLockedOut">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getMachineAccountByConsoleIdCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.IsMachinePuidBannedCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.IsMachinePuidBannedCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.IsMachinePuidBannedCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.LookupMachineAccountByConsoleIdAndSCodeCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.LookupMachineAccountByConsoleIdAndSCodeCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.LookupMachineAccountByConsoleIdAndSCodeCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.LookupMachineAccountByConsoleIdAndXuidCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.LookupMachineAccountByConsoleIdAndXuidCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.LookupMachineAccountByConsoleIdAndXuidCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.MachineHistoryGetByConsoleIdCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.MachineHistoryGetByConsoleIdCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineHistoryGetByConsoleIdCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.MachineHistoryGetByPuidCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.MachineHistoryGetByPuidCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineHistoryGetByPuidCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.SetFamilyGoldSeatExemptionByPuidCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.SetFamilyGoldSeatExemptionByPuidCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.SetFamilyGoldSeatExemptionByPuidCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.SetFamilyGoldSeatExemptionByPuidCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.SetFamilyGoldSeatExemptionByGamertagCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.SetFamilyGoldSeatExemptionByGamertagCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.SetFamilyGoldSeatExemptionByGamertagCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.SetFamilyGoldSeatExemptionByGamertagCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.SetFreeGamertagEligibleCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.SetFreeGamertagEligibleCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.SetFreeGamertagEligibleCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.SetFreeGamertagEligibleCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.GamertagHistoryGetCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.GamertagHistoryGetCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.GamertagHistoryGetCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.UserHistoryGetByGamertagCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.UserHistoryGetByGamertagCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.UserHistoryGetByGamertagCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.UserHistoryGetByPuidCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.UserHistoryGetByPuidCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.UserHistoryGetByPuidCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.AccountInfo">
            <summary>
            Summary description for SvcProviderWrapper.
            </summary>
        </member>
        <member name="T:ServerTestFramework.CUST.AccountInfoEx">
            <summary>
            Summary description for SvcProviderWrapper.
            </summary>
        </member>
        <member name="T:ServerTestFramework.CUST.MachineAccountInfo">
            <summary>
            Summary description for SvcProviderWrapper.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.AddCreditCard(System.UInt64,System.UInt64,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Byte,System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.BeginAddCreditCard(System.UInt64,System.UInt64,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Byte,System.String,System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.EndAddCreditCard(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.AddCreditCardAsync(System.UInt64,System.UInt64,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Byte,System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.AddCreditCardAsync(System.UInt64,System.UInt64,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Byte,System.String,System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.GetPointsBalance(System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.BeginGetPointsBalance(System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.EndGetPointsBalance(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.GetPointsBalanceAsync(System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.GetPointsBalanceAsync(System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.SignIn">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.BeginSignIn(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.EndSignIn(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.SignInAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.SignInAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.GetPaymentInstruments(System.UInt64,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.BeginGetPaymentInstruments(System.UInt64,System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.EndGetPaymentInstruments(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.GetPaymentInstrumentsAsync(System.UInt64,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.GetPaymentInstrumentsAsync(System.UInt64,System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.GetUserAuthorization(System.Int32,System.UInt32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.BeginGetUserAuthorization(System.Int32,System.UInt32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.EndGetUserAuthorization(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.GetUserAuthorizationAsync(System.Int32,System.UInt32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.GetUserAuthorizationAsync(System.Int32,System.UInt32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.TestConnection(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.BeginTestConnection(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.EndTestConnection(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.TestConnectionAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.TestConnectionAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.AddCreditCardCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.GetPointsBalanceCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.SignInCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.GetPaymentInstrumentsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.GetUserAuthorizationCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.TestConnectionCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.AddCreditCardResults">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AddCreditCardResults.PaymentInstrumentId">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.SessionInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SessionInfo.MusicNetAuthToken">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SessionInfo.GeoCountryCode">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionInfo.OfferId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionInfo.BillingInstanceId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionInfo.Status">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionInfo.HasBillingViolation">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionInfo.HasPendingCancel">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionInfo.HasLapsed">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionInfo.StartDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionInfo.EndDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionInfo.RenewalOfferId">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.AccountInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AccountInfo.XboxPuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AccountInfo.LivePuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AccountInfo.Tag">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AccountInfo.CountryCode">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AccountInfo.PostalCode">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AccountInfo.ParentallyControlled">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AccountInfo.Privileges">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AccountInfo.Services">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AccountInfo.PointsBalance">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AccountInfo.IsLightweight">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.ErrorInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.ErrorInfo.HResult">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.ErrorInfo.Message">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.ErrorInfo.TagChangeRequired">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.ErrorInfo.AcceptedTermsOfService">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.ErrorInfo.AccountSuspended">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.ErrorInfo.BillingUnavailable">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.GetUserAuthorizationInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.GetUserAuthorizationInfo.ErrorInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.GetUserAuthorizationInfo.AccountInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.GetUserAuthorizationInfo.SubscriptionInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.GetUserAuthorizationInfo.SessionInfo">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.BillingAgreementDetails">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.BillingAgreementDetails.PayerEmail">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.BillingAgreementDetails.BillingAgreementId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.BillingAgreementDetails.FirstName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.BillingAgreementDetails.LastName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.BillingAgreementDetails.MiddleName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.BillingAgreementDetails.PayerBusiness">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.BillingAgreementDetails.PayerCountry">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.BillingAgreementDetails.BillingAgreementDescription">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.PayPalPayinInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.PayPalPayinInfo.BillingAgreementDetails">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.WholesaleInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.WholesaleInfo.AccountHolderName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.WholesaleInfo.ExternalReferenceId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.WholesaleInfo.WholesalePartner">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.WholesaleInfo.EncryptedPassword">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.DirectDebitInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.DirectDebitInfo.AccountHolderName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.DirectDebitInfo.AccountNumber">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.DirectDebitInfo.BankCode">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.DirectDebitInfo.BranchCode">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.DirectDebitInfo.CheckDigits">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.CreditCardInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.CreditCardInfo.CardType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.CreditCardInfo.AccountHolderName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.CreditCardInfo.AccountNumber">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.CreditCardInfo.CcvNumber">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.CreditCardInfo.ExpirationDate">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.PhoneInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.PhoneInfo.PhonePrefix">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.PhoneInfo.PhoneNumber">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.PhoneInfo.PhoneExtension">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.AddressInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AddressInfo.Street1">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AddressInfo.Street2">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AddressInfo.City">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AddressInfo.District">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AddressInfo.State">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AddressInfo.PostalCode">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.PaymentInstrumentInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.PaymentInstrumentInfo.PaymentInstrumentId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.PaymentInstrumentInfo.PaymentInstrumentType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.PaymentInstrumentInfo.AddressInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.PaymentInstrumentInfo.PhoneInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.PaymentInstrumentInfo.CreditCardInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.PaymentInstrumentInfo.DirectDebitInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.PaymentInstrumentInfo.WholesaleInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.PaymentInstrumentInfo.PayPalPayinInfo">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.GetPaymentInstrumentResults">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.GetPaymentInstrumentResults.PaymentInstrumentInfos">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.SessionDetails">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SessionDetails.SessionKey">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SessionDetails.MusicNetAuthToken">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SessionDetails.GeoCountryCode">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionDetails">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionDetails.XboxOfferId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionDetails.BillingInstanceId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionDetails.Status">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionDetails.HasBillingViolation">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionDetails.HasPendingCancel">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionDetails.MusicNetSku">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionDetails.StartDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionDetails.EndDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionDetails.RenewalXboxOfferId">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.AccountDetails">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AccountDetails.XboxPuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AccountDetails.LivePuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AccountDetails.Tag">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AccountDetails.PostalCode">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AccountDetails.CountryCode">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AccountDetails.ParentallyControlled">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AccountDetails.Privileges">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AccountDetails.PointsBalance">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AccountDetails.IsLightweight">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.ErrorDetails">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.ErrorDetails.HResult">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.ErrorDetails.Message">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.ErrorDetails.TagChangeRequired">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.ErrorDetails.AcceptedTermsOfService">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.ErrorDetails.AccountSuspended">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.ErrorDetails.SubscriptionLapsed">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.ErrorDetails.BillingUnavailable">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.SignInResults">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SignInResults.ErrorInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SignInResults.AccountInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SignInResults.SubscriptionInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SignInResults.SessionInfo">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.GetPointsBalanceResults">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.GetPointsBalanceResults.PointsBalance">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.GetPointsBalanceResults.AboveLowBalance">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.GetPointsBalanceResults.DmpAccountStatus">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.AddCreditCardCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.AddCreditCardCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AddCreditCardCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.GetPointsBalanceCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.GetPointsBalanceCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.GetPointsBalanceCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.SignInCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.SignInCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SignInCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.GetPaymentInstrumentsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.GetPaymentInstrumentsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.GetPaymentInstrumentsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.GetUserAuthorizationCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.GetUserAuthorizationCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.GetUserAuthorizationCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.TestConnectionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.TestConnectionCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.TestConnectionCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.AcceptTermsOfService(System.UInt64,System.Byte[],ServerTestFramework.LiveService.UserAccount.WebService2.ServiceTypeEnum)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.BeginAcceptTermsOfService(System.UInt64,System.Byte[],ServerTestFramework.LiveService.UserAccount.WebService2.ServiceTypeEnum,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.EndAcceptTermsOfService(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.AcceptTermsOfServiceAsync(System.UInt64,System.Byte[],ServerTestFramework.LiveService.UserAccount.WebService2.ServiceTypeEnum)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.AcceptTermsOfServiceAsync(System.UInt64,System.Byte[],ServerTestFramework.LiveService.UserAccount.WebService2.ServiceTypeEnum,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.AddCreditCard(System.UInt64,System.UInt64,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Byte,System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.BeginAddCreditCard(System.UInt64,System.UInt64,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Byte,System.String,System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.EndAddCreditCard(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.AddCreditCardAsync(System.UInt64,System.UInt64,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Byte,System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.AddCreditCardAsync(System.UInt64,System.UInt64,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Byte,System.String,System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GetPointsBalance(System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.BeginGetPointsBalance(System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.EndGetPointsBalance(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GetPointsBalanceAsync(System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GetPointsBalanceAsync(System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.SignIn">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.BeginSignIn(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.EndSignIn(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.SignInAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.SignInAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.CreateMobileAccount(System.UInt64,System.Byte[],System.UInt64,System.String,System.Byte,System.UInt16,System.DateTime)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.BeginCreateMobileAccount(System.UInt64,System.Byte[],System.UInt64,System.String,System.Byte,System.UInt16,System.DateTime,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.EndCreateMobileAccount(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.CreateMobileAccountAsync(System.UInt64,System.Byte[],System.UInt64,System.String,System.Byte,System.UInt16,System.DateTime)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.CreateMobileAccountAsync(System.UInt64,System.Byte[],System.UInt64,System.String,System.Byte,System.UInt16,System.DateTime,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GenerateGamertag(System.String,System.UInt64,ServerTestFramework.LiveService.UserAccount.WebService2.GamertagSuggestionType)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.BeginGenerateGamertag(System.String,System.UInt64,ServerTestFramework.LiveService.UserAccount.WebService2.GamertagSuggestionType,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.EndGenerateGamertag(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GenerateGamertagAsync(System.String,System.UInt64,ServerTestFramework.LiveService.UserAccount.WebService2.GamertagSuggestionType)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GenerateGamertagAsync(System.String,System.UInt64,ServerTestFramework.LiveService.UserAccount.WebService2.GamertagSuggestionType,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GetPaymentInstruments(System.UInt64,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.BeginGetPaymentInstruments(System.UInt64,System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.EndGetPaymentInstruments(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GetPaymentInstrumentsAsync(System.UInt64,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GetPaymentInstrumentsAsync(System.UInt64,System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GetSupportedCountries(System.Byte,System.Byte)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.BeginGetSupportedCountries(System.Byte,System.Byte,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.EndGetSupportedCountries(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GetSupportedCountriesAsync(System.Byte,System.Byte)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GetSupportedCountriesAsync(System.Byte,System.Byte,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GetUserAuthorization(System.Int32,System.UInt32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.BeginGetUserAuthorization(System.Int32,System.UInt32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.EndGetUserAuthorization(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GetUserAuthorizationAsync(System.Int32,System.UInt32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GetUserAuthorizationAsync(System.Int32,System.UInt32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.TestConnection(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.BeginTestConnection(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.EndTestConnection(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.TestConnectionAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.TestConnectionAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.ConsoleApplicationsGetByMachinePuid(System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.BeginConsoleApplicationsGetByMachinePuid(System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.EndConsoleApplicationsGetByMachinePuid(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.ConsoleApplicationsGetByMachinePuidAsync(System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.ConsoleApplicationsGetByMachinePuidAsync(System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.AcceptTermsOfServiceCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.AddCreditCardCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GetPointsBalanceCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.SignInCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.CreateMobileAccountCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GenerateGamertagCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GetPaymentInstrumentsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GetSupportedCountriesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GetUserAuthorizationCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.TestConnectionCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.ConsoleApplicationsGetByMachinePuidCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.ServiceTypeEnum">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.WebService2.ServiceTypeEnum.Unknown">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.WebService2.ServiceTypeEnum.XboxLive">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.WebService2.ServiceTypeEnum.Zune">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.AddCreditCardResults">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AddCreditCardResults.PaymentInstrumentId">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.ConsoleApplicationDetail">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ConsoleApplicationDetail.FileName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ConsoleApplicationDetail.FriendlyName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ConsoleApplicationDetail.AppVersion">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ConsoleApplicationDetail.Online">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.ConsoleApplicationGroup">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ConsoleApplicationGroup.Name">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ConsoleApplicationGroup.SystemOnlineManifestRevision">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ConsoleApplicationGroup.SystemManifestRevision">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ConsoleApplicationGroup.FlashVersion">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ConsoleApplicationGroup.GroupId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ConsoleApplicationGroup.Applications">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.ConsoleApplications">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ConsoleApplications.ConsoleId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ConsoleApplications.ApplicationGroups">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.SessionInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SessionInfo.MusicNetAuthToken">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SessionInfo.GeoCountryCode">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionInfo.OfferId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionInfo.BillingInstanceId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionInfo.Status">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionInfo.HasBillingViolation">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionInfo.HasPendingCancel">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionInfo.HasLapsed">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionInfo.StartDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionInfo.EndDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionInfo.RenewalOfferId">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.AccountInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountInfo.XboxPuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountInfo.LivePuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountInfo.Tag">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountInfo.CountryCode">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountInfo.PostalCode">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountInfo.ParentallyControlled">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountInfo.Privileges">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountInfo.Services">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountInfo.PointsBalance">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountInfo.IsLightweight">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountInfo.CultureId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountInfo.ParentalControlGroupId">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.ErrorInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ErrorInfo.HResult">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ErrorInfo.Message">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ErrorInfo.TagChangeRequired">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ErrorInfo.AcceptedTermsOfService">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ErrorInfo.AccountSuspended">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ErrorInfo.BillingUnavailable">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.GetUserAuthorizationInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.GetUserAuthorizationInfo.ErrorInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.GetUserAuthorizationInfo.AccountInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.GetUserAuthorizationInfo.SubscriptionInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.GetUserAuthorizationInfo.SessionInfo">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.CountryInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.CountryInfo.CountryId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.CountryInfo.CountryCode">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.CountryInfo.User">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.CountryInfo.Billing">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.CountryInfo.AllowDirectDebit">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.CountryInfo.AllowPayPal">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.CountryInfo.RequireCCAgeVerification">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.BillingAgreementDetails">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.BillingAgreementDetails.PayerEmail">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.BillingAgreementDetails.BillingAgreementId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.BillingAgreementDetails.FirstName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.BillingAgreementDetails.LastName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.BillingAgreementDetails.MiddleName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.BillingAgreementDetails.PayerBusiness">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.BillingAgreementDetails.PayerCountry">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.BillingAgreementDetails.BillingAgreementDescription">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.PayPalPayinInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.PayPalPayinInfo.BillingAgreementDetails">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.WholesaleInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.WholesaleInfo.AccountHolderName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.WholesaleInfo.ExternalReferenceId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.WholesaleInfo.WholesalePartner">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.WholesaleInfo.EncryptedPassword">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.DirectDebitInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.DirectDebitInfo.AccountHolderName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.DirectDebitInfo.AccountNumber">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.DirectDebitInfo.BankCode">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.DirectDebitInfo.BranchCode">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.DirectDebitInfo.CheckDigits">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.CreditCardInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.CreditCardInfo.CardType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.CreditCardInfo.AccountHolderName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.CreditCardInfo.AccountNumber">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.CreditCardInfo.CcvNumber">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.CreditCardInfo.ExpirationDate">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.PhoneInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.PhoneInfo.PhonePrefix">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.PhoneInfo.PhoneNumber">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.PhoneInfo.PhoneExtension">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.AddressInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AddressInfo.Street1">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AddressInfo.Street2">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AddressInfo.City">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AddressInfo.District">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AddressInfo.State">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AddressInfo.PostalCode">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.PaymentInstrumentInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.PaymentInstrumentInfo.PaymentInstrumentId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.PaymentInstrumentInfo.PaymentInstrumentType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.PaymentInstrumentInfo.AddressInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.PaymentInstrumentInfo.PhoneInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.PaymentInstrumentInfo.CreditCardInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.PaymentInstrumentInfo.DirectDebitInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.PaymentInstrumentInfo.WholesaleInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.PaymentInstrumentInfo.PayPalPayinInfo">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.GetPaymentInstrumentResults">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.GetPaymentInstrumentResults.PaymentInstrumentInfos">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.SessionDetails">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SessionDetails.SessionKey">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SessionDetails.MusicNetAuthToken">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SessionDetails.GeoCountryCode">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionDetails">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionDetails.XboxOfferId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionDetails.BillingInstanceId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionDetails.Status">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionDetails.HasBillingViolation">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionDetails.HasPendingCancel">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionDetails.MusicNetSku">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionDetails.StartDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionDetails.EndDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionDetails.RenewalXboxOfferId">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.AccountDetails">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountDetails.XboxPuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountDetails.LivePuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountDetails.Tag">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountDetails.PostalCode">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountDetails.CountryCode">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountDetails.ParentallyControlled">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountDetails.Privileges">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountDetails.PointsBalance">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountDetails.IsLightweight">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.ErrorDetails">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ErrorDetails.HResult">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ErrorDetails.Message">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ErrorDetails.TagChangeRequired">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ErrorDetails.AcceptedTermsOfService">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ErrorDetails.AccountSuspended">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ErrorDetails.SubscriptionLapsed">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ErrorDetails.BillingUnavailable">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.SignInResults">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SignInResults.ErrorInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SignInResults.AccountInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SignInResults.SubscriptionInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SignInResults.SessionInfo">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.GetPointsBalanceResults">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.GetPointsBalanceResults.PointsBalance">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.GetPointsBalanceResults.AboveLowBalance">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.GetPointsBalanceResults.DmpAccountStatus">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.GamertagSuggestionType">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.WebService2.GamertagSuggestionType.NounAdjectiveSuggestion">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.WebService2.GamertagSuggestionType.SeedSuggestion">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.AcceptTermsOfServiceCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.AddCreditCardCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.AddCreditCardCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AddCreditCardCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.GetPointsBalanceCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.GetPointsBalanceCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.GetPointsBalanceCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.SignInCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.SignInCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SignInCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.CreateMobileAccountCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.GenerateGamertagCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.GenerateGamertagCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.GenerateGamertagCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.GetPaymentInstrumentsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.GetPaymentInstrumentsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.GetPaymentInstrumentsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.GetSupportedCountriesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.GetSupportedCountriesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.GetSupportedCountriesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.GetUserAuthorizationCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.GetUserAuthorizationCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.GetUserAuthorizationCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.TestConnectionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.TestConnectionCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.TestConnectionCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.ConsoleApplicationsGetByMachinePuidCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.ConsoleApplicationsGetByMachinePuidCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ConsoleApplicationsGetByMachinePuidCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.Billing">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.TestConnection(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.BeginTestConnection(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.EndTestConnection(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.TestConnectionAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.TestConnectionAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.PurchaseMediaOffers(System.UInt64,System.UInt64,System.String[],System.Int32[],System.UInt32[],ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum,System.String,System.String,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.BeginPurchaseMediaOffers(System.UInt64,System.UInt64,System.String[],System.Int32[],System.UInt32[],ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum,System.String,System.String,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.EndPurchaseMediaOffers(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.PurchaseMediaOffersAsync(System.UInt64,System.UInt64,System.String[],System.Int32[],System.UInt32[],ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum,System.String,System.String,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.PurchaseMediaOffersAsync(System.UInt64,System.UInt64,System.String[],System.Int32[],System.UInt32[],ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum,System.String,System.String,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.GetPurchaseStatus(System.UInt64,System.String[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.BeginGetPurchaseStatus(System.UInt64,System.String[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.EndGetPurchaseStatus(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.GetPurchaseStatusAsync(System.UInt64,System.String[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.GetPurchaseStatusAsync(System.UInt64,System.String[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.FindMediaInstanceUrls(System.String[],System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.BeginFindMediaInstanceUrls(System.String[],System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.EndFindMediaInstanceUrls(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.FindMediaInstanceUrlsAsync(System.String[],System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.FindMediaInstanceUrlsAsync(System.String[],System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.VerifyToken(System.UInt64,System.UInt64,System.String,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.BeginVerifyToken(System.UInt64,System.UInt64,System.String,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.EndVerifyToken(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.VerifyTokenAsync(System.UInt64,System.UInt64,System.String,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.VerifyTokenAsync(System.UInt64,System.UInt64,System.String,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.CancelSubscription(System.UInt64,System.UInt64,System.UInt64,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.BeginCancelSubscription(System.UInt64,System.UInt64,System.UInt64,System.Boolean,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.EndCancelSubscription(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.CancelSubscriptionAsync(System.UInt64,System.UInt64,System.UInt64,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.CancelSubscriptionAsync(System.UInt64,System.UInt64,System.UInt64,System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.GamertagEnumerate(System.UInt64,ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum,System.UInt32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.BeginGamertagEnumerate(System.UInt64,ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum,System.UInt32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.EndGamertagEnumerate(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.GamertagEnumerateAsync(System.UInt64,ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum,System.UInt32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.GamertagEnumerateAsync(System.UInt64,ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum,System.UInt32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.SubscriptionEnumerate(System.UInt64,System.UInt64,System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.BeginSubscriptionEnumerate(System.UInt64,System.UInt64,System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.EndSubscriptionEnumerate(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.SubscriptionEnumerateAsync(System.UInt64,System.UInt64,System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.SubscriptionEnumerateAsync(System.UInt64,System.UInt64,System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.PurchaseBillingOffer(System.UInt64,System.UInt64,System.UInt64,System.UInt32,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.BeginPurchaseBillingOffer(System.UInt64,System.UInt64,System.UInt64,System.UInt32,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.EndPurchaseBillingOffer(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.PurchaseBillingOfferAsync(System.UInt64,System.UInt64,System.UInt64,System.UInt32,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.PurchaseBillingOfferAsync(System.UInt64,System.UInt64,System.UInt64,System.UInt32,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.PurchaseGamertag(System.UInt64,System.UInt64,System.Guid,ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.BeginPurchaseGamertag(System.UInt64,System.UInt64,System.Guid,ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.EndPurchaseGamertag(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.PurchaseGamertagAsync(System.UInt64,System.UInt64,System.Guid,ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.PurchaseGamertagAsync(System.UInt64,System.UInt64,System.Guid,ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.Billing.WebService2.Billing.TestConnectionCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.Billing.WebService2.Billing.PurchaseMediaOffersCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.Billing.WebService2.Billing.GetPurchaseStatusCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.Billing.WebService2.Billing.FindMediaInstanceUrlsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.Billing.WebService2.Billing.VerifyTokenCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.Billing.WebService2.Billing.CancelSubscriptionCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.Billing.WebService2.Billing.GamertagEnumerateCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.Billing.WebService2.Billing.SubscriptionEnumerateCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.Billing.WebService2.Billing.PurchaseBillingOfferCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.Billing.WebService2.Billing.PurchaseGamertagCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum.CreditCard">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum.Token">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum.Points">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum.Wholesale">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum.Untrusted">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum.All">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum.NoTokens">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.PurchaseStatus">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.PurchaseStatus.offerId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.PurchaseStatus.status">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.PurchaseStatusEnum">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.Billing.WebService2.PurchaseStatusEnum.OfferIdNotFound">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.Billing.WebService2.PurchaseStatusEnum.TransactionPending">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.Billing.WebService2.PurchaseStatusEnum.TransactionSuccessful">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.Billing.WebService2.PurchaseStatusEnum.TransactionFailed">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.PriceInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.PriceInfo.PaymentType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.PriceInfo.TaxType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.PriceInfo.WholePrice">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.PriceInfo.FractionalPrice">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.PriceInfo.PriceText">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo.OfferId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo.OfferName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo.OfferType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo.RelationType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo.ConvertMode">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo.InstanceId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo.TitleId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo.TitleCategory">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo.TitleName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo.GameRating">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo.Duration">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo.Frequency">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo.TierProvided">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo.TierRequired">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo.SellText">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo.RelatedOfferId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo.ResponseFlags">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo.SubscriptionStatusId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo.Price">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionEnumerateResults">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionEnumerateResults.SubscriptionInfos">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionEnumerateResults.OffersTotal">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.XboxOfferInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.XboxOfferInfo.offerId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.XboxOfferInfo.offerTypeId">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.EmsOfferInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.EmsOfferInfo.offerId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.EmsOfferInfo.mediaId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.EmsOfferInfo.mediaType">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.VerifyTokenResults">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.VerifyTokenResults.emsOfferInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.VerifyTokenResults.xboxOfferInfo">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.WireData">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.OfferPrice">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.OfferPrice.paymentType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.OfferPrice.taxType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.OfferPrice.wholePrice">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.OfferPrice.fractionalPrice">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.OfferPrice.priceTextLength">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.OfferPrice.priceText">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.XRLObject2">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.GamertagContentInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.GamertagContentInfo.offerID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.GamertagContentInfo.offerNameLength">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.GamertagContentInfo.offerName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.GamertagContentInfo.offerType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.GamertagContentInfo.sellTextLength">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.GamertagContentInfo.sellText">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.GamertagContentInfo.maxStartDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.GamertagContentInfo.pricesLength">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.GamertagContentInfo.prices">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.GamertagEnumerateResult">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.GamertagEnumerateResult.offersReturned">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.GamertagEnumerateResult.infos">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.GamertagEnumerateResult.offersTotal">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.TypedMediaUrl">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.TypedMediaUrl.type">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.TypedMediaUrl.length">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.TypedMediaUrl.url">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.MediaInstanceUrl">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.MediaInstanceUrl.mediaId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.MediaInstanceUrl.mediaInstanceId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.MediaInstanceUrl.packageSize">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.MediaInstanceUrl.installSize">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.MediaInstanceUrl.symKey">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.MediaInstanceUrl.pubKey">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.MediaInstanceUrl.packageType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.MediaInstanceUrl.fileCount">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.MediaInstanceUrl.urls">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.TestConnectionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.TestConnectionCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.TestConnectionCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.PurchaseMediaOffersCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.GetPurchaseStatusCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.GetPurchaseStatusCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.GetPurchaseStatusCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.FindMediaInstanceUrlsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.FindMediaInstanceUrlsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.FindMediaInstanceUrlsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.VerifyTokenCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.VerifyTokenCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.VerifyTokenCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.CancelSubscriptionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.GamertagEnumerateCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.GamertagEnumerateCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.GamertagEnumerateCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionEnumerateCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionEnumerateCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionEnumerateCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.PurchaseBillingOfferCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.PurchaseGamertagCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.PurchaseGamertagCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.PurchaseGamertagCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.History.WebService.History">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.History.WebService.History.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.History.WebService.History.TestConnection(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.History.WebService.History.BeginTestConnection(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.History.WebService.History.EndTestConnection(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.History.WebService.History.TestConnectionAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.History.WebService.History.TestConnectionAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.History.WebService.History.Execute(System.String,System.String[],System.String[],System.Int32,System.Int32,System.UInt64,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.History.WebService.History.BeginExecute(System.String,System.String[],System.String[],System.Int32,System.Int32,System.UInt64,System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.History.WebService.History.EndExecute(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.History.WebService.History.ExecuteAsync(System.String,System.String[],System.String[],System.Int32,System.Int32,System.UInt64,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.History.WebService.History.ExecuteAsync(System.String,System.String[],System.String[],System.Int32,System.Int32,System.UInt64,System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.History.WebService.History.Query(System.String,System.String[],System.String[],System.UInt64,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.History.WebService.History.BeginQuery(System.String,System.String[],System.String[],System.UInt64,System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.History.WebService.History.EndQuery(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.History.WebService.History.QueryAsync(System.String,System.String[],System.String[],System.UInt64,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.History.WebService.History.QueryAsync(System.String,System.String[],System.String[],System.UInt64,System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.History.WebService.History.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.Billing.History.WebService.History.TestConnectionCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.Billing.History.WebService.History.ExecuteCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.Billing.History.WebService.History.QueryCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.History.WebService.TestConnectionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.History.WebService.TestConnectionCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.History.WebService.TestConnectionCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.History.WebService.ExecuteCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.History.WebService.ExecuteCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.History.WebService.ExecuteCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.History.WebService.QueryCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.History.WebService.QueryCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.History.WebService.QueryCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.sts.WebService.SecurityTicket">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.sts.WebService.SecurityTicket.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.sts.WebService.SecurityTicket.GetPartnerSecurityTicket(System.UInt64,System.UInt32,System.UInt16)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.sts.WebService.SecurityTicket.BeginGetPartnerSecurityTicket(System.UInt64,System.UInt32,System.UInt16,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.sts.WebService.SecurityTicket.EndGetPartnerSecurityTicket(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.sts.WebService.SecurityTicket.GetPartnerSecurityTicketAsync(System.UInt64,System.UInt32,System.UInt16)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.sts.WebService.SecurityTicket.GetPartnerSecurityTicketAsync(System.UInt64,System.UInt32,System.UInt16,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.sts.WebService.SecurityTicket.GetSecurityTicket(System.Byte,System.UInt32,System.UInt16,System.UInt16,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.sts.WebService.SecurityTicket.BeginGetSecurityTicket(System.Byte,System.UInt32,System.UInt16,System.UInt16,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.sts.WebService.SecurityTicket.EndGetSecurityTicket(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.sts.WebService.SecurityTicket.GetSecurityTicketAsync(System.Byte,System.UInt32,System.UInt16,System.UInt16,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.sts.WebService.SecurityTicket.GetSecurityTicketAsync(System.Byte,System.UInt32,System.UInt16,System.UInt16,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.sts.WebService.SecurityTicket.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.sts.WebService.SecurityTicket.GetPartnerSecurityTicketCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.sts.WebService.SecurityTicket.GetSecurityTicketCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.sts.WebService.GetPartnerSecurityTicketCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.sts.WebService.GetPartnerSecurityTicketCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.sts.WebService.GetPartnerSecurityTicketCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.sts.WebService.GetSecurityTicketCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.sts.WebService.GetSecurityTicketCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.sts.WebService.GetSecurityTicketCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:MSRC.Ranking.Game">
            <summary>
            A class to represent a single game between some teams each of which comprised of several players. Each game also has
            to have the date at which it ended. This time is assumed to be the time when the game finsihed as each team will
            know about its scores (which is only possible AFTER the game).
            </summary>
        </member>
        <member name="F:MSRC.Ranking.Game.m_aDate">
            <summary>
            The date at which the game ended.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.Game.m_aTeams">
            <summary>
            A variable sized list of teams.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.Game.#ctor(System.DateTime,System.Int32)">
            <summary>
            Constructs a game that ended at a specified date between at a maximal number of teams. 
            </summary>
            <param name="aDate">Date at which the game ended.</param>
            <param name="iMaxNumberOfTeams">Maximum number of teams.</param>
            <remarks>An exception will be thrown if more than the specified number of teams are added.</remarks>
        </member>
        <member name="M:MSRC.Ranking.Game.#ctor(System.DateTime)">
            <summary>
            Constructs a game that ended at a specified date between an arbitrary number of teams.
            </summary>
            <param name="aDate">Date at which the game ended.</param>
        </member>
        <member name="M:MSRC.Ranking.Game.AddTeam(MSRC.Ranking.Team)">
            <summary>
            Adds a team to the game.
            </summary>
            <param name="aTeam">The team to be added.</param>
            <returns>The team index of the team added.</returns>
            <remarks>The team index is a zero-based internal index used by this class.</remarks>
        </member>
        <member name="M:MSRC.Ranking.Game.GetTeam(System.Int32)">
            <summary>
            Gets the team at a specified index.
            </summary>
            <param name="iTeamIndex">The index of the team.</param>
            <returns>The team at the given index or null, if the index is wrong.</returns>
            <remarks>The team index is a zero-based internal index used by this class.</remarks>
        </member>
        <member name="M:MSRC.Ranking.Game.GetWinner(System.Int32,System.Int32)">
            <summary>
            Gets the winner between two teams.
            </summary>
            <param name="iTeamIndex1">Team index of team 1.</param>
            <param name="iTeamIndex2">Team index of team 2.</param>
            <returns>Returns +1 if team 1 won against team 2, -1 if team 2 won against team 1, and 0 it both teams
            draw.</returns>
            <remarks>The team index is a zero-based internal index used by this class.</remarks>
        </member>
        <member name="M:MSRC.Ranking.Game.RemoveEmptyTeams">
            <summary>
            Removes all empty teams.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.Game.Date">
            <summary>
            The date at which the game ended.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.Game.NumberOfTeams">
            <summary>
            The number of participating teams.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.Game.NumberOfPlayers">
            <summary>
            The total number of players participating in the game.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.Game.PlayerIDs">
            <summary>
            All player IDs of all players in the game.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.Game.TeamIDs">
            <summary>
            All team indicies of all players in the game.
            </summary>
            <remarks>The team index is a zero-based internal index used by this class.</remarks>
        </member>
        <member name="P:MSRC.Ranking.Game.Ranking">
            <summary>
            The full ranking of all teams based on the team scores.
            </summary>
        </member>
        <member name="T:MSRC.Ranking.Numerics.GaussianApproximations">
            <summary>
            A static class that provides some functions for Gaussian integrals. In particular, this class provides
            correction functions for the mean and variance of the truncated Gaussian.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.Numerics.GaussianApproximations.erfc(System.Double)">
            <summary>
            Computes the complementary error function. This function is defined by 2/sqrt(pi) * integral from x to infinity of exp (-t^2) dt.
            </summary>
            <param name="x">The lower boundary of integration.</param>
            <returns>The complementary error function.</returns>
            <remarks>This method uses a Chebyshev series approximation which is exact in the whole range up to 1 * 10^{-7}.</remarks>
        </member>
        <member name="M:MSRC.Ranking.Numerics.GaussianApproximations.erfcinv(System.Double)">
            <summary>
            Computes the inverse of the complementary error function. 
            </summary>
            <param name="y">The point of interest.</param>
            <returns>The inverse of the complementary error function.</returns>
            <remarks>This function uses a polynomial approximation together with one step of Halley's rational method.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the input <c>y</c> is outside [0,2].</exception>
        </member>
        <member name="M:MSRC.Ranking.Numerics.GaussianApproximations.Phi(System.Double)">
            <summary>
            Computes the cummulative Gaussian distribution at a specified point of interest.
            </summary>
            <param name="t">The point of interest.</param>
            <returns>The cummulative Gaussian distribution at the point of interest.</returns>
        </member>
        <member name="M:MSRC.Ranking.Numerics.GaussianApproximations.PhiInverse(System.Double)">
            <summary>
            Computes the inverse of the cummulative Gaussian distribution (qunatile function) at a specified point of interest.
            </summary>
            <param name="p">The cummulative probability or point of interest in [0,1].</param>
            <returns>The quantile at the specified point.</returns>
        </member>
        <member name="M:MSRC.Ranking.Numerics.GaussianApproximations.N(System.Double)">
            <summary>
            Computes the normal density at a specified point of interest.
            </summary>
            <param name="t">The point of interest.</param>
            <returns>The normal density at the point of interest.</returns>
        </member>
        <member name="M:MSRC.Ranking.Numerics.GaussianApproximations.v(System.Double,System.Double)">
            <summary>
            Computes the additive correction of a single-sided truncated Gaussian with unit variance.
            </summary>
            <param name="t">The mean of the non-truncated Gaussian.</param>
            <param name="epsilon">The truncation point.</param>
            <returns>The additive correction.</returns>
        </member>
        <member name="M:MSRC.Ranking.Numerics.GaussianApproximations.w(System.Double,System.Double)">
            <summary>
            Computes the multiplicative correction of a single-sided truncated Gaussian with unit variance.
            </summary>
            <param name="t">The mean of the non-truncated Gaussian.</param>
            <param name="epsilon">The truncation point.</param>
            <returns>The multiplicative correction.</returns>
        </member>
        <member name="M:MSRC.Ranking.Numerics.GaussianApproximations.v0(System.Double,System.Double)">
            <summary>
            Computes the additive correction of a symmetrical double-sided truncated Gaussian with unit variance.
            </summary>
            <param name="t">The mean of the non-truncated Gaussian.</param>
            <param name="epsilon">The truncation point.</param>
            <returns>The additive correction.</returns>
        </member>
        <member name="M:MSRC.Ranking.Numerics.GaussianApproximations.w0(System.Double,System.Double)">
            <summary>
            Computes the multiplicative correction of a symmetrical double-sided truncated Gaussian with unit variance.
            </summary>
            <param name="t">The mean of the non-truncated Gaussian.</param>
            <param name="epsilon">The truncation point.</param>
            <returns>The multiplicative correction.</returns>
        </member>
        <member name="M:MSRC.Ranking.Numerics.GaussianApproximations.v(System.Double,System.Double,System.Double)">
            <summary>
            Computes the additive correction of a general double-sided truncated Gaussian with unit variance.
            </summary>
            <param name="t">The mean of the non-truncated Gaussian.</param>
            <param name="l">The lower truncation point.</param>
            <param name="u">The upper truncation point.</param>
            <returns>The additive correction.</returns>
            <remarks>This routine has not been tested in all regimes of t for a given l and u.</remarks>
            <exception cref="T:System.ArithmeticException">Thrown if the computation is not numerically stable.</exception>
        </member>
        <member name="M:MSRC.Ranking.Numerics.GaussianApproximations.w(System.Double,System.Double,System.Double)">
            <summary>
            Computes the multiplicative correction of a general double-sided truncated Gaussian with unit variance.
            </summary>
            <param name="t">The mean of the non-truncated Gaussian.</param>
            <param name="l">The lower truncation point.</param>
            <param name="u">The upper truncation point.</param>
            <returns>The multiplicative correction.</returns>
            <remarks>This routine has not been tested in all regimes of t for a given l and u.</remarks>
            <exception cref="T:System.ArithmeticException">Thrown if the computation is not numerically stable.</exception>
        </member>
        <member name="M:MSRC.Ranking.Numerics.GaussianApproximations.ComputeNiederreiterSeries(System.Int32)">
            <summary>
            Computes a Niederreither series of coefficients.
            </summary>
            <param name="iNumberOfDimensions">Number of dimensions.</param>
            <returns>A Niederreiter series with as many elements as dimensions.</returns>
        </member>
        <member name="M:MSRC.Ranking.Numerics.GaussianApproximations.TransformSample(MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix,System.Double[],MSRC.Ranking.LinearAlgebra.Matrix@,System.Double@,MSRC.Ranking.LinearAlgebra.Matrix@,MSRC.Ranking.LinearAlgebra.Matrix@)">
            <summary>
            Computes the transformed integrand of a multi-variate Gaussian.
            </summary>
            <param name="mu">Mean of the Gaussian.</param>
            <param name="C">Cholesky factor of the covariance of the Gaussian.</param>
            <param name="a">Lower integration boundary.</param>
            <param name="b">Upper integration boundary.</param>
            <param name="dSample">The uniform random sample.</param>
            <param name="tmp">A temporary matrix of the size of <c>M1</c>.</param>
            <param name="M0">The volume sample (zeroth moment).</param>
            <param name="M1">The mean sample (first moment).</param>
            <param name="M2">The second moment sample.</param>
            <remarks>This function is implemented to minimise the number of allocations of memory and may thus be hard to 
            read.</remarks>
        </member>
        <member name="M:MSRC.Ranking.Numerics.GaussianApproximations.CalculateTGMoments(MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix,System.Int32)">
            <summary>
            Computes a multivariate partial Gaussian integral.
            </summary>
            <param name="mu">Mean of the Gaussian distribution.</param>
            <param name="Sigma">Covariance of the Gaussian distribution.</param>
            <param name="a">Lower integration limits.</param>
            <param name="b">Upper integration limits.</param>
            <param name="iMaxNumberOfPoints">Number of quasi-random points.</param>
            <returns>The normalisation constant, mean and second moment matrix of a multivariate Gaussian density between <c>a</c> and <b>b</b>.</returns>
            <remarks>This function implements a variant of the algorithm as described in <i>A. Genz. Numerical Computation of Multivariate 
            Normal Probabilities.</i> 1992 using a quais-random lattice generator based on Niederreiter point sets. However, for one-dimensional
            integrals of a certain sort if resorts to use the fast <c>v</c>, <c>w</c>, <c>v0</c> and <c>w0</c> function.</remarks>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixTypeException">Thrown if <c>mu</c>, <c>a</c> or <c>b</c> are not vectors
            or if <c>Sigma</c> is not a square matrix.</exception>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixSizeException">Thrown if <c>mu</c>, <c>a</c> or <c>b</c> are not the same number of rows as <c>Sigma</c>.</exception>
            <exception cref="T:System.ArithmeticException">Thrown if the normalisation constant comes out too small.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the number of dimensions is too large (which would lead to unrealiable results).</exception>
        </member>
        <member name="M:MSRC.Ranking.Numerics.GaussianApproximations.Phi(MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix,System.Int32)">
            <summary>
            Computes a multivariate partial Gaussian integral.
            </summary>
            <param name="mu">Mean of the Gaussian distribution.</param>
            <param name="Sigma">Covariance of the Gaussian distribution.</param>
            <param name="a">Lower integration limits.</param>
            <param name="b">Upper integration limits.</param>
            <param name="iMaxNumberOfPoints">Number of quasi-random points.</param>
            <returns>The integal of the multivariate Gaussian density between <c>a</c> and <b>b</b>.</returns>
            <remarks>This function implements a variant of the algorithm as described in <i>A. Genz. Numerical Computation of 
            Multivariate Normal Probabilities.</i> 1992. However, fast functions based on <c>erfc</c> are used for one-dimensional
            integrals.</remarks>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixTypeException">Thrown if <c>mu</c>, <c>a</c> or <c>b</c> are not vectors
            or if <c>Sigma</c> is not a square matrix.</exception>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixSizeException">Thrown if <c>mu</c>, <c>a</c> or <c>b</c> are not the same number of rows as <c>Sigma</c>.</exception>
            <exception cref="T:System.ArithmeticException">Thrown if the normalisation constant comes out too small.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the number of dimensions is too large (which would lead to unrealiable results).</exception>
        </member>
        <member name="M:MSRC.Ranking.Numerics.GaussianApproximations.CalculateTGAParameters(MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix,System.Int32)">
            <summary>
            Computes the parameter of the best Gaussian approximation of a multivariate truncated Gaussian.
            </summary>
            <param name="mu">Mean of the Gaussian distribution.</param>
            <param name="Sigma">Covariance of the Gaussian distribution.</param>
            <param name="l">Lower integration limits.</param>
            <param name="u">Upper integration limits.</param>
            <param name="iNumberOfIterations">Number of iterations over the list of integration limits. Usually, a value of 5 - 10 will work fine.</param>
            <returns>The normalisation constant, mean and covariance matrix of the best Gaussian approxiamtion to the truncated multivariate Gaussian density 
            between <c>l</c> and <b>u</b>.</returns>
            <remarks>This function implements the EP algorithm of Thomas P. Minka described in <i>T. P. Minka. A family of algorithms for approximate Bayesian 
            inference.</i> PhD thesis. MIT. 2001. Note that in the case of scalars, the number of iterations is automatically reduced to 1.</remarks>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixTypeException">Thrown if <c>mu</c>, <c>l</c> or <c>u</c> are not vectors
            or if <c>Sigma</c> is not a square matrix.</exception>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixSizeException">Thrown if <c>mu</c>, <c>l</c> or <c>u</c> are not the same number of rows as <c>Sigma</c>.</exception>
        </member>
        <member name="M:MSRC.Ranking.Numerics.GaussianApproximations.PhiEP(MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix,System.Int32)">
            <summary>
            Approximates a multivariate partial Gaussian integral.
            </summary>
            <param name="mu">Mean of the Gaussian distribution.</param>
            <param name="Sigma">Covariance of the Gaussian distribution.</param>
            <param name="l">Lower integration limits.</param>
            <param name="u">Upper integration limits.</param>
            <param name="iNumberOfIterations">Number of iterations over the list of integration limits. Usually, a value of 5 - 10 will work fine.</param>
            <returns>The integal of the multivariate Gaussian density between <c>l</c> and <b>u</b>.</returns>
            <remarks>This function implements the EP algorithm of Thomas P. Minka described in <i>T. P. Minka. A family of algorithms for approximate Bayesian 
            inference.</i> PhD thesis. MIT. 2001. Note that in the case of scalars, the number of iterations is automatically reduced to 1.</remarks>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixTypeException">Thrown if <c>mu</c>, <c>l</c> or <c>u</c> are not vectors
            or if <c>Sigma</c> is not a square matrix.</exception>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixSizeException">Thrown if <c>mu</c>, <c>l</c> or <c>u</c> are not the same number of rows as <c>Sigma</c>.</exception>
        </member>
        <member name="T:MSRC.Ranking.Numerics.GaussianApproximations.TGMoments">
            <summary>
            A structure holding moments of truncated multi-variate Gaussian. This structure is only used by
            <c>CalculateTGMoments</c>.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.Numerics.GaussianApproximations.TGMoments.M0">
            <summary>
            Normalisation constant of the truncated Gaussian.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.Numerics.GaussianApproximations.TGMoments.M1">
            <summary>
            Vector of first moments.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.Numerics.GaussianApproximations.TGMoments.M2">
            <summary>
            Square matrix of second moments.
            </summary>
        </member>
        <member name="T:MSRC.Ranking.Numerics.GaussianApproximations.TGAParameters">
            <summary>
            A structure holding the parameters of truncated multi-variate Gaussian approximation. This structure is only used by
            <c>CalculateTGAParameters</c>. 
            </summary>
            <remarks>Note that the parameters of a truncated Gaussian approximation are closely related to the moments of a truncated Gaussian. 
            In particular, we have that TGParameters.Z \approx TGMoments.M0, TGParameters.mu \approx TGMoments.M1 and 
            TGParameters.Sigma \approx TGMoments.M2 - TGMoments.M1 * TGMoments.M1.Transpose ().</remarks>
        </member>
        <member name="F:MSRC.Ranking.Numerics.GaussianApproximations.TGAParameters.Z">
            <summary>
            Approximative normalisation constant of the truncated Gaussian.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.Numerics.GaussianApproximations.TGAParameters.mu">
            <summary>
            Mean vector of the Gaussian approximation.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.Numerics.GaussianApproximations.TGAParameters.Sigma">
            <summary>
            Covariance matrix of the Gaussian approximation.
            </summary>
        </member>
        <member name="T:MSRC.Ranking.LinearAlgebra.MatrixType">
            <summary>
            This enumeration represents the different type of matrices.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.LinearAlgebra.MatrixType.RectangularMatrix">
            <summary>
            A rectangular matrix (different number of rows and columns and at least two rows and two columns).
            </summary>
        </member>
        <member name="F:MSRC.Ranking.LinearAlgebra.MatrixType.SquareMatrix">
            <summary>
            A square matrix (same number of rows and columns and at least two rows).
            </summary>
        </member>
        <member name="F:MSRC.Ranking.LinearAlgebra.MatrixType.RowVector">
            <summary>
            A row vector (One row and at least two columns).
            </summary>
        </member>
        <member name="F:MSRC.Ranking.LinearAlgebra.MatrixType.ColumnVector">
            <summary>
            A column vector (One column and at least two rows).
            </summary>
        </member>
        <member name="F:MSRC.Ranking.LinearAlgebra.MatrixType.Scalar">
            <summary>
            A scalar (One row and one column).
            </summary>
        </member>
        <member name="T:MSRC.Ranking.LinearAlgebra.MatrixTypeException">
            <summary>
            This is an exception which is thrown whenever the matrix type does not agree.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.LinearAlgebra.MatrixTypeException.m_aActualMatrixType">
            <summary>
            Actual type of matrix.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.LinearAlgebra.MatrixTypeException.m_aExpectedMatrixType">
            <summary>
            Expected type of matrix.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.MatrixTypeException.#ctor(MSRC.Ranking.LinearAlgebra.MatrixType,MSRC.Ranking.LinearAlgebra.MatrixType)">
            <summary>
            Constructs a new exception for matrix type problems.
            </summary>
            <param name="aActualMatrixType">Actual type of the matrix.</param>
            <param name="aExpectedMatrixType">Expected type of the matrix.</param>
        </member>
        <member name="P:MSRC.Ranking.LinearAlgebra.MatrixTypeException.ActualMatrixType">
            <summary>
            Actual type of the matrix.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.LinearAlgebra.MatrixTypeException.ExpectedMatrixType">
            <summary>
            Expected type of the matrix.
            </summary>
        </member>
        <member name="T:MSRC.Ranking.LinearAlgebra.MatrixSizeException">
            <summary>
            This is an exception which is thrown whenever the matrix size does not agree.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.LinearAlgebra.MatrixSizeException.m_iActualNoRows">
            <summary>
            Actual number of rows.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.LinearAlgebra.MatrixSizeException.m_iActualNoColumns">
            <summary>
            Actual number of columns.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.LinearAlgebra.MatrixSizeException.m_iExpectedNoRows">
            <summary>
            Expected number of rows.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.LinearAlgebra.MatrixSizeException.m_iExpectedNoColumns">
            <summary>
            Expected number of columns.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.MatrixSizeException.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new exception for matrix size problems.
            </summary>
            <param name="iActualNoRows">Actual number of rows.</param>
            <param name="iActualNoColumns">Actual number of columns.</param>
            <param name="iExpectedNoRows">Expected number of rows.</param>
            <param name="iExpectedNoColumns">Expected number of columns.</param>
        </member>
        <member name="P:MSRC.Ranking.LinearAlgebra.MatrixSizeException.ActualNoRows">
            <summary>
            Actual number of rows.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.LinearAlgebra.MatrixSizeException.ActualNoColumns">
            <summary>
            Actual number of columns.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.LinearAlgebra.MatrixSizeException.ExpectedNoRows">
            <summary>
            Expected number of rows.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.LinearAlgebra.MatrixSizeException.ExpectedNoColumns">
            <summary>
            Expected number of columns.
            </summary>
        </member>
        <member name="T:MSRC.Ranking.LinearAlgebra.MatrixNonPositiveDefiniteException">
            <summary>
            This is an exception which is thrown whenever the matrix is not positive definite.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.MatrixNonPositiveDefiniteException.#ctor">
            <summary>
            Constructs a new exception for a non-positive definite matrix problem.
            </summary>
        </member>
        <member name="T:MSRC.Ranking.LinearAlgebra.Matrix">
            <summary>
            A light-weight matrix class for  arbitrary sized matrices. Most of these functions are implemented in a 
            straighforward way and are not optimised for any particular target CPU architecture.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.LinearAlgebra.Matrix.m_dData">
            <summary>
            The raw values of the matrix.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.LinearAlgebra.Matrix.m_aType">
            <summary>
            The type of the matrix.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a matrix with zeros entries.
            </summary>
            <param name="iNoRows">Number of rows.</param>
            <param name="iNoColumns">Number of columns.</param>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.#ctor(System.Int32)">
            <summary>
            Constructs a square matrix.
            </summary>
            <param name="iNoRows">Number of rows and columns.</param>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.#ctor(System.Int32,System.Double)">
            <summary>
            Constructs a square diagonal matrix.
            </summary>
            <param name="iNoRows">Number of rows and columns.</param>
            <param name="dDiagonal">The diagonal entry.</param>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.#ctor(System.Double[])">
            <summary>
            Constructs a square diagonal matrix.
            </summary>
            <param name="dDiagonal">The diagonal of the matrix.</param>
            <remarks>This constructor allows different entries on the diagonal of the matrix.</remarks>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.#ctor(MSRC.Ranking.LinearAlgebra.Matrix)">
            <summary>
            Constructs a deep copy of a matrix.
            </summary>
            <param name="aMatrix">Matrix to be copied.</param>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.#ctor(System.Double[0:,0:])">
            <summary>
            Constructs a shallow copy of a matrix.
            </summary>
            <param name="dData">Matrix data to be used.</param>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.GetMatrixType">
            <summary>
            Determines the type of the matrix by looking at the number of rows and columns.
            </summary>
            <returns>The type of the matrix.</returns>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.Equals(System.Object)">
            <summary>
            Compares with another matrix.
            </summary>
            <param name="aMatrix">Matrix A.</param>
            <returns>Returns true if A is equal to the matrix in every element.</returns>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.GetHashCode">
            <summary>
            Computes a new hash code for the matrix.
            </summary>
            <returns>The hash code as an integer.</returns>
            <remarks>This function simply computes the products of the number of rows and colums and adds the 
            first element (0,0) of the matrix in order to compute a hash code.</remarks>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.ToString">
            <summary>
            Creates a string representation of the matrix.
            </summary>
            <returns>A string showing the matrix elements.</returns>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.op_Implicit(MSRC.Ranking.LinearAlgebra.Matrix)~System.Double[0:,0:]">
            <summary>
            The implicit cast of a matrix into a double array.
            </summary>
            <param name="A">Matrix A.</param>
            <returns>The elements of the matrix A as a double array.</returns>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.op_Explicit(MSRC.Ranking.LinearAlgebra.Matrix)~System.Double">
            <summary>
            An explicit cast of a matrix into a double. 
            </summary>
            <param name="A">Matrix A.</param>
            <returns>The only element of the matrix A as a double.</returns>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixTypeException">Thrown if the matrix is not a scalar (one row and one column).</exception>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.op_Implicit(System.Double[0:,0:])~MSRC.Ranking.LinearAlgebra.Matrix">
            <summary>
            The implicit case of a double array into a matrix.
            </summary>
            <param name="dData">The double array to be casted.</param>
            <returns>A new matrix object whose <c>Data</c> property points to the double array.</returns>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.op_Implicit(System.Double)~MSRC.Ranking.LinearAlgebra.Matrix">
            <summary>
            The implicit cast of a double into a matrix.
            </summary>
            <param name="x">The double to be casted.</param>
            <returns>A 1 x 1 matrix with the only element equal to <c>x</c>.</returns>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.Negate">
            <summary>
            Negates the matrix.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.op_UnaryNegation(MSRC.Ranking.LinearAlgebra.Matrix)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="A">Matrix A.</param>
            <returns>Matrix A negated, that is -A.</returns>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.op_Equality(MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix)">
            <summary>
            Compares two matrices.
            </summary>
            <param name="A">Matrix A.</param>
            <param name="B">Matrix B.</param>
            <returns>Returns true if A is equal to B in every element.</returns>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.op_Inequality(MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix)">
            <summary>
            Compares two matrices.
            </summary>
            <param name="A">Matrix A.</param>
            <param name="B">Matrix B.</param>
            <returns>Returns true if A is not equal to B in every element.</returns>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.Add(MSRC.Ranking.LinearAlgebra.Matrix)">
            <summary>
            Adds a matrix.
            </summary>
            <param name="A">Matrix to be added.</param>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixSizeException">Thrown if the matrix to be added is of different size.</exception>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.op_Addition(MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix)">
            <summary>
            Adds two matrices.
            </summary>
            <param name="A">Matrix A.</param>
            <param name="B">Matrix B.</param>
            <returns>The matrix sum of A and B, that is A + B.</returns>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixSizeException">Thrown if the two matrices are of different size.</exception>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.Subtract(MSRC.Ranking.LinearAlgebra.Matrix)">
            <summary>
            Subtracts a matrix.
            </summary>
            <param name="A">Matrix to be subtracted.</param>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixSizeException">Thrown if the matrix to be subtracted is of different size.</exception>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.op_Subtraction(MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix)">
            <summary>
            Subtracts two matrices.
            </summary>
            <param name="A">Matrix A.</param>
            <param name="B">Matrix B.</param>
            <returns>Matrix B subtracted from matrix B, that is A - B.</returns>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixSizeException">Thrown if the two matrices are of different size.</exception>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.Multiply(MSRC.Ranking.LinearAlgebra.Matrix)">
            <summary>
            Multiplies with a matrix from the right. 
            </summary>
            <param name="A">Matrix to be multiplied from the right.</param>
            <remarks>This will most likely change the size of the matrix.</remarks>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixSizeException">Thrown if the number of rows of <c>A</c> does not match the number of columns.</exception>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.op_Multiply(MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix)">
            <summary>
            Multiplies two matrices.
            </summary>
            <param name="A">Matrix A.</param>
            <param name="B">Matrix B.</param>
            <returns>Matrix A times matrix B, that is A * B.</returns>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixSizeException">Thrown if the number of rows of <c>B</c> does not match the number of columns of <c>A</c>.</exception>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.Mulitply(System.Double)">
            <summary>
            Multiplies with a scalar, that is, each element of the matrix is multiplied by the scalar.
            </summary>
            <param name="x">The scaling factor.</param>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.op_Multiply(MSRC.Ranking.LinearAlgebra.Matrix,System.Double)">
            <summary>
            Multiplies a matrix with a scalar.
            </summary>
            <param name="A">Matrix A.</param>
            <param name="x">Scalar x.</param>
            <returns>Matrix A times scalar x, that is every element of A is multiplied by x.</returns>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.op_Multiply(System.Double,MSRC.Ranking.LinearAlgebra.Matrix)">
            <summary>
            Multiplies a scalar with a matrix.
            </summary>
            <param name="x">Scalar x.</param>
            <param name="A">Matrix A.</param>
            <returns>Matrix A times scalar x, that is every element of A is multiplied by x.</returns>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.Divide(System.Double)">
            <summary>
            Didives by a scalar, that is, every element is divided by the scalar.
            </summary>
            <param name="x">The scalar to be dividing by.</param>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.op_Division(MSRC.Ranking.LinearAlgebra.Matrix,System.Double)">
            <summary>
            Divides a matrix by a scalar.
            </summary>
            <param name="A">Matrix A.</param>
            <param name="x">Scalar x.</param>
            <returns>Matrix A divided by scalar x, that is every element of A is divided by x.</returns>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.Transpose">
            <summary>
            Transposes the matrix.
            </summary>
            <returns>The transposed matrix.</returns>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.Cholesky">
            <summary>
            Computes the Cholesky decomposition. 
            </summary>
            <returns>A lower triangular matrix containing the Cholesky decomposition.</returns>
            <remarks>This method does not check for the symmetry.</remarks>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixTypeException">Thrown if the matrix is not square.</exception>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixNonPositiveDefiniteException">Thrown if the matrix is not-positive definite.</exception>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.Inverse">
            <summary>
            Computes the inverse of a square positive definite matrix. 
            </summary>
            <returns>The inverse of the matrix.</returns>
            <remarks>Note that the method does not check for the symmetry.</remarks>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixTypeException">Thrown if the matrix is not square.</exception>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixNonPositiveDefiniteException">Thrown if the matrix is not-positive definite.</exception>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.InverseCholeskyFactor">
            <summary>
            Computes the inverse of the Cholesky factor of the matrix.  
            </summary>
            <returns>The inverse of the Cholesky factor of the matrix.</returns>
            <remarks>Note that the method does not check for the symmetry.</remarks>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixTypeException">Thrown if the matrix is not square.</exception>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixNonPositiveDefiniteException">Thrown if the matrix is not-positive definite.</exception>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.Determinant">
            <summary>
            Computes the determinant of a positive semidefinite matrix.  
            </summary>
            <returns>The determinant of the matrix.</returns>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixTypeException">Thrown if the matrix is not square.</exception>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixNonPositiveDefiniteException">Thrown if the matrix is not-positive definite.</exception>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.IsNaN">
            <summary>
            Checks if any element of the matrix is not-a-number.
            </summary>
            <returns>Returns true the matrix contains at least one element that is not-a-number.</returns>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.IsInfinity">
            <summary>
            Checks if any element of the matrix is infinity.
            </summary>
            <returns>Returns true the matrix contains at least one element that is infinity.</returns>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.ValidVariableName(System.String)">
            <summary>
            Converts a variable name to a valid variable name by changing all invalid characters with an underscore.
            </summary>
            <param name="szName">Variable name</param>
            <returns>A valid MATLAB variable name.</returns>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.MatlabDataElement(System.String)">
            <summary>
            Generates a Matlab V5 compatiable data element.
            </summary>
            <param name="szName">Name of the matrix.</param>
            <returns>The byte array that can be used as a Matlab V5 data element (in a stream).</returns>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.MatlabHeader(System.String)">
            <summary>
            Generates a Matlab V5 comptabible header byte array.
            </summary>
            <param name="szCreatorComments">The comments that will go into the header of the Matlab file.</param>
            <returns>The header as a byte array.</returns>
        </member>
        <member name="P:MSRC.Ranking.LinearAlgebra.Matrix.Type">
            <summary>
            The type of the matrix (based on number of rows and columns).
            </summary>
        </member>
        <member name="P:MSRC.Ranking.LinearAlgebra.Matrix.IsRowVector">
            <summary>
            Indicator if the matrix is a row vector.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.LinearAlgebra.Matrix.IsColumnVector">
            <summary>
            Indicator if the matrix is a column vector.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.LinearAlgebra.Matrix.IsVector">
            <summary>
            Indicator whether or not the matrix is a vector.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.LinearAlgebra.Matrix.NoRows">
            <summary>
            Number of rows.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.LinearAlgebra.Matrix.NoColumns">
            <summary>
            Number of columns.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.LinearAlgebra.Matrix.NoElements">
            <summary>
            Number of total elements of the matrix.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.LinearAlgebra.Matrix.Item(System.Int32,System.Int32)">
            <summary>
            Element in the zero-based row <c>iRowIndex</c> and zero-based column <c>iColumnIndex</c>.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.LinearAlgebra.Matrix.Item(System.Int32)">
            <summary>
            Element at position <c>iIndex</c> if the matrix is vector. 
            </summary>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixTypeException">Thrown if the matrix is not a vector.</exception>
        </member>
        <member name="T:MSRC.Ranking.RankingSystems.Algorithm">
            <summary>
            Different types of approximation algorithm for the multi-team case.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.Algorithm.GenzAlgorithm">
            <summary>
            Genz' algorithm as described in <i>A. Genz. Numerical Computation of Multivariate 
            Normal Probabilities.</i> 1992.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.Algorithm.EPAlgorithm">
            <summary>
            Gaussian EP algorithm as described in <i>T. P. Minka. A family of algorithms for approximate Bayesian 
            inference.</i> PhD thesis. MIT. 2001.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.Algorithm.EPMessagePassing">
            <summary>
            EP message passing algorithm. This algorithm is two orders of magnitudes faster than <c>EPAlgorithm</c>. 
            </summary>
        </member>
        <member name="T:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem">
            <summary>
            A class that represents the MuSigma ranking system. This class manages a list of player skill lists. 
            Game outcomes will be incorporated by the MuSigma update equation. 
            </summary>
        </member>
        <member name="T:MSRC.Ranking.ProbabilisticRankingSystem">
            <summary>
            The abstract base class that manages a list of player skill lists. A probabilistic ranking system is a ranking system which is
            based on a probabilistic model of the game outcome. Hence, in such a ranking system it is possible to compute the probability of a
            particualr game outcome.
            </summary>
        </member>
        <member name="T:MSRC.Ranking.RankingSystem">
            <summary>
            The abstract base class that manages a list of player skill lists. A ranking system will allow to incorporate a game outcomes 
            an update the inidividual player skills accordingly. Moreover, a ranking system will offer a predicition of the outcome of the 
            game to support matchmaking mechanisms. 
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystem.m_aPlayerSkillsList">
            <summary>
            The list of player skill list.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.RankingSystem.#ctor(MSRC.Ranking.PlayerSkillsList)">
            <summary>
            Constructs a ranking system for a given list of player skill lists.
            </summary>
            <param name="aPlayerSkillsList">A list of player skill lists. If the list is <c>null</c>, a new list of player
            skill lists will be created.</param>
        </member>
        <member name="M:MSRC.Ranking.RankingSystem.#ctor">
            <summary>
            Constructs a ranking system with a new list of player skill lists.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.RankingSystem.ClearPlayerSkills">
            <summary>
            Clears all the chronologically sorted skills of all the players maintained by this ranking system.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.RankingSystem.Update(MSRC.Ranking.Game)">
            <summary>
            Updates the player skills with a particular game.
            </summary>
            <param name="aGame">The game to be incorporated.</param>
            <returns>True, if the update was performed.</returns>
        </member>
        <member name="M:MSRC.Ranking.RankingSystem.PredictedOutcome(MSRC.Ranking.Game)">
            <summary>
            Computes the most likely outcome of a game.
            </summary>
            <param name="aGame">The game for which the outcome should be predicted.</param>
            <returns>The most likely ranking.</returns>
            <remarks>Note that this function ignores the actual game outcome which is contained in the game passed to the method.
            The method is supposed to throw an exception if the outcome cannot be predicted.</remarks>
        </member>
        <member name="M:MSRC.Ranking.RankingSystem.MatchQuality(MSRC.Ranking.Game)">
            <summary>
            Computes the quality of a match.
            </summary>
            <param name="aGame">The game to check.</param>
            <returns>A number between 0 and 1 which indicates the quality of the match (1 is the best possible 
            match and 0 is the worst possible match).</returns>
            <remarks>This function computes the maximum discrepancy between any pair of players using the skills valid 
            at the time of the game. It is conceivable that a derived implementation of this method does a more careful 
            analysis.</remarks>
        </member>
        <member name="M:MSRC.Ranking.RankingSystem.MatchQuality(MSRC.Ranking.Skill,MSRC.Ranking.Skill)">
            <summary>
            Computes the match quality between two players.
            </summary>
            <param name="aPlayer1Skill">Skill of player 1.</param>
            <param name="aPlayer2Skill">Skill of player 2.</param>
            <returns>A number between 0 and 1 which indicates the quality of the match (1 is the best possible 
            match and 0 is the worst possible match).</returns>
        </member>
        <member name="P:MSRC.Ranking.RankingSystem.PlayerSkillsList">
            <summary>
            The list of player skill lists maintained by the ranking system.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.ProbabilisticRankingSystem.#ctor(MSRC.Ranking.PlayerSkillsList)">
            <summary>
            Constructs a probabilistic ranking system for a given list of player skill lists.
            </summary>
            <param name="aPlayerSkillsList">A list of player skill lists. If this list is <c>null</c>, a new list of player
            skill lists will be created.</param>
        </member>
        <member name="M:MSRC.Ranking.ProbabilisticRankingSystem.#ctor">
            <summary>
            Constructs a probabilistic ranking system with a new list of player skill lists.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.ProbabilisticRankingSystem.RankingProbability(MSRC.Ranking.Game,MSRC.Ranking.Ranking[])">
            <summary>
            Computes the probability for some rankings for a given game.
            </summary>
            <param name="aGame">The game for which the ranking probabilities should be computed.</param>
            <param name="aRankings">A list of rankings for which the probability should be computed.</param>
            <returns>The probabilities of the specified rankings for the given game. This method throws an exception if 
            the probabilities cannot be computed.</returns>
        </member>
        <member name="M:MSRC.Ranking.ProbabilisticRankingSystem.Update(MSRC.Ranking.Game)">
            <summary>
            Updates the player skills with a particular game.
            </summary>
            <param name="aGame">The game to be incorporated.</param>
            <returns>True, if the update was performed.</returns>
            <remarks>This method uses the evidence based <c>Update</c> method and should not be overriden!</remarks>
        </member>
        <member name="M:MSRC.Ranking.ProbabilisticRankingSystem.Update(MSRC.Ranking.Game,System.Double@)">
            <summary>
            Updates the player skills with a particular game and computes the evidence of the game.
            </summary>
            <param name="aGame">The game to be incorporated.</param>
            <param name="dEvidence">The evidence of the game (as an output parameter).</param>
            <returns>True, if the update was performed.</returns>
        </member>
        <member name="M:MSRC.Ranking.ProbabilisticRankingSystem.PredictedOutcome(MSRC.Ranking.Game)">
            <summary>
            Computes the most likely game outcome based on the probability for each ranking.
            </summary>
            <param name="aGame">The game for which the outcome should be predicted.</param>
            <returns>The most likely outcome.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the the game has more than two team.</exception>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.m_dBeta">
            <summary>
            The standard deviation of the performance distribution.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.m_dDrawProbability">
            <summary>
            The draw probability between any two teams.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.m_dTau">
            <summary>
            The increase in standard deviation responsible for modelling the dynamics of the skill belief.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.m_iNumberOfIterations">
            <summary>
            The number of iterations of the numerical approximation code.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.m_aApproximationAlgorithm">
            <summary>
            The particular algorithm used.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.m_dPriorMu">
            <summary>
            The mean of the prior skill belief.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.m_dPriorSigma">
            <summary>
            The standard deviation of the prior skill belief.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.#ctor(MSRC.Ranking.PlayerSkillsList,System.Double,System.Double,System.Double,System.Double,System.Double,MSRC.Ranking.RankingSystems.Algorithm,System.Int32)">
            <summary>
            Constructs a new instance of the MuSigma ranking system.
            </summary>
            <param name="aPlayerSkillsList">A list of player skill lists.</param>
            <param name="dPerformanceFactor">The performance in a single game relative to the prior standard deviation.</param>
            <param name="dDrawProbability">The probability that two equally skilled players will draw.</param>
            <param name="dLearningFactor">The change of skill in a single game relative to the prior standard deviation.</param>
            <param name="dNegativeSkillProbability">The prior belief that a player has a negative skill (important for team games).</param>
            <param name="dPriorSigma">The standard deviation of the prior skill belief.</param>
            <param name="aApproximationAlgorithm">The approximation algorithm used.</param>
            <param name="iNumberOfIterations">The number of iterations whenever numerical integration is used.</param>
        </member>
        <member name="M:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new instance of the MuSigma ranking system with an empty player skill list using the EP message 
            passing algorithm.
            </summary>
            <param name="dPerformanceFactor">The performance in a single game relative to the prior standard deviation.</param>
            <param name="dDrawProbability">The probability that two equally skilled players will draw.</param>
            <param name="dLearningFactor">The change of skill in a single game relative to the prior standard deviation.</param>
            <param name="dNegativeSkillProbability">The prior belief that a player has a negative skill (important for team games).</param>
            <param name="dPriorSigma">The standard deviation of the prior skill belief.</param>
        </member>
        <member name="M:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new instance of the MuSigma ranking system with an empty player skill list using the 
            EP message passing algorithm and a unit variance prior skill belief with ~0.1% chance of negative skills.
            </summary>
            <param name="dPerformanceFactor">The performance in a single game relative to the prior standard deviation.</param>
            <param name="dDrawProbability">The probability that two equally skilled players will draw.</param>
            <param name="dLearningFactor">The change of skill in a single game relative to the prior standard deviation.</param>
        </member>
        <member name="M:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.#ctor">
            <summary>
            Constructs a new instance of the MuSigma ranking system with an empty player skill list using the EP 
            message passing algorithm and a unit variance prior skill belief with ~0.1% chance of negative skills. 
            The performance factor is set to 50%, the draw probability to 10% and the learning factor is at 1%.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.ComputeInternalGameRepresentation(MSRC.Ranking.Game,MSRC.Ranking.Ranking)">
            <summary>
            Computes the internal game representation for a particular ranking.
            </summary>
            <param name="aGame">The game to be represented.</param>
            <param name="aRanking">The ranking of the game.</param>
            <returns>The internal game representation.</returns>
            <exception cref="T:System.Exception">Thrown if the game ends in a draw but the draw probability was set to zero.</exception>
        </member>
        <member name="M:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.GetSkillBelief(MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.InternalGameRepresentation,System.DateTime)">
            <summary>
            Gets the skill beliefs of all players participating in a game.
            </summary>
            <param name="aInternalGame">Internal representation of the game.</param>
            <param name="aDate">Date at which we would like to know the skill beliefs. If the time is at zero ticks, the latest 
            skill belief will be used.</param>
            <returns>An internal representation of the skill belief.</returns>
            <remarks>Note that this function already adds the amount of \tau^2 if it is queried for the latest skill beliefs.</remarks>
        </member>
        <member name="M:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.PartialUpdate(MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian,MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian,System.Double)">
            <summary>
            Computes the new skill with partial updates.
            </summary>
            <param name="aBeforeUpdate">Gaussian skill belief before update.</param>
            <param name="aAfterUpdate">Gaussian skill belief after update.</param>
            <param name="dWeight">Partial weighting factor.</param>
            <returns>The interpolated skill.</returns>
        </member>
        <member name="M:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Update(MSRC.Ranking.Game,System.Double@)">
            <summary>
            Updates the player skills given a particular game. This the general update equation for an arbitrary number
            of teams and players per team. This function also computes the evidence of this particular game.
            </summary>
            <param name="aGame">The game to be incorporated.</param>
            <param name="dEvidence">The evidence of the game (as an output parameter).</param>
            <exception cref="T:System.ArithmeticException">Thrown if some of the resulting MuSigma values would be NaN or if
            any other non-stable condition occurs.</exception>
            <returns>True is the update was performed.</returns>
        </member>
        <member name="M:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.EPMessagePassingUpdate(MSRC.Ranking.Game)">
            <summary>
            Updates the player skills given a particular game. This implementation uses message passing and is two
            orders of magnitudes faster than the general the general update equation for an arbitrary number
            of teams and players per team. 
            </summary>
            <param name="aGame">The game to be incorporated.</param>
            <exception cref="T:System.ArithmeticException">Thrown if some of the resulting MuSigma values would be NaN or if
            any other non-stable condition occurs.</exception>
            <returns>True is the update was performed.</returns>
        </member>
        <member name="M:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.UpdateTeamPerformance(MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian[],MSRC.Ranking.Ranking,System.Int32[],System.Double[],System.Double)">
            <summary>
            Implements the chain schedule EP updates.
            </summary>
            <param name="aTeamPerformances">The prior team performances.</param>
            <param name="aRanking">The ranking outcome of the game.</param>
            <param name="iIndex">The pre-computed re-ordering of the teams.</param>
            <param name="dEpsilon">The draw margins between any pair of teams.</param>
            <param name="dConvergenceTolerance">The precision at which to stop the update.</param>
        </member>
        <member name="M:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.RankingProbability(MSRC.Ranking.Game,MSRC.Ranking.Ranking[])">
            <summary>
            Computes the marginalised probability for some rankings for a given game.
            </summary>
            <param name="aGame">The game for which the ranking probabilities should be computed.</param>
            <param name="aRankings">A list of rankings for which the probability should be computed.</param>
            <returns>The probabilities of the specified rankings for the given game.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the probabilities cannot be computed.</exception>
        </member>
        <member name="M:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.MatchQuality(MSRC.Ranking.Game)">
            <summary>
            Computes the quality of a match.
            </summary>
            <param name="aGame">The game to check.</param>
            <returns>A number between 0 and 1 which indicates the quality of the match (1 is the best possible 
            match and 0 is the worst possible match).</returns>
            <remarks>This functions computes the (normalised) probability of a joint draw of all teams.</remarks>
        </member>
        <member name="M:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.MatchQuality(MSRC.Ranking.Skill,MSRC.Ranking.Skill)">
            <summary>
            Computes the match quality between two players in the MuSigma system.
            </summary>
            <param name="aPlayer1Skill">MuSigma skill of player 1.</param>
            <param name="aPlayer2Skill">MuSigma skill of player 2.</param>
            <returns>A number between 0 and 1 which indicates the quality of the match (1 is the best possible 
            match and 0 is the worst possible match).</returns>
            <remarks>This function computes the (normalised) probability of drawing.</remarks>
        </member>
        <member name="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Beta">
            <summary>
            The standard deviation of the performance distribution.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the standard deviation is set to a negative value.</exception>
        </member>
        <member name="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.DrawProbability">
            <summary>
            The draw probability between two equally skilled teams. 
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the draw probability is outside of [0,1).</exception>
        </member>
        <member name="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Tau">
            <summary>
            The increase in standard deviation of the skill belief (dynamics prior).
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the standard deviation in the skill belief is set to a negative value.</exception>
        </member>
        <member name="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.NumberOfIterations">
            <summary>
            Number of iterations of the numerical approximation code.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the number of iterations is smaller than 20.</exception>
        </member>
        <member name="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.ApproximationAlgorithm">
            <summary>
            Approximation algorithm for the multi-team and multi-player case.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.PriorMu">
            <summary>
            The mean of the prior skill belief.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.PriorSigma">
            <summary>
            The standard deviation of the prior skill belief.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the standard deviation is set to a negative value.</exception>
        </member>
        <member name="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.PerformanceFactor">
            <summary>
            The factor of performance variation relative to the prior standard deviation. A value close to zero
            inidicates that the performance in a single game is varying little around the actual skill of the players.
            This value should usually be between 0 and 1. Setting this property changes <seealso cref="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Beta"/> for the current value
            of <seealso cref="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.PriorSigma"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the performance factor is set to a negative value.</exception>
        </member>
        <member name="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.LearningFactor">
            <summary>
            The factor of skill point variation relative to the prior standard deviation. A value close to zero
            inidicates that the true skill in a single game is varying little. This value should be very small; a value
            of more than 0.5 means that the true skill can change up/down by an entire prior standard deviation in a single 
            game. Setting this property changes <seealso cref="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Tau"/> for the current value of <seealso cref="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.PriorSigma"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the learning factor is set to a negative value.</exception>
        </member>
        <member name="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.NegativeSkillProbability">
            <summary>
            The probability that a player has negative skill points. This value should be extremely close to zero. Setting 
            this property changes <seealso cref="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.PriorMu"/> for the current value of <seealso cref="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.PriorSigma"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the negative skill probability is set to a value outside (0,1].</exception>
        </member>
        <member name="T:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.InternalGameRepresentation">
            <summary>
            This struct holds the internal representation of a game in terms of matrices.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.InternalGameRepresentation.A">
            <summary>
            A matrix with as many rows as players and as many column are there are teams (minus one).
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.InternalGameRepresentation.a">
            <summary>
            The lower integration limits.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.InternalGameRepresentation.b">
            <summary>
            The upper integration limits.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.InternalGameRepresentation.updateFactors">
            <summary>
            The update factors.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.InternalGameRepresentation.iIndexToPlayerID">
            <summary>
            A mapping from the index to the global player ID.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.InternalSkillBelief.mu">
            <summary>
            Means of skill beliefs.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.InternalSkillBelief.Sigma">
            <summary>
            Covariance matrix  of skill beliefs.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian.m_dPrecisionMean">
            <summary>
            The precision times the mean of the Gaussian.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian.m_dPrecision">
            <summary>
            The precision of the Gaussian.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a Gaussian.
            </summary>
            <param name="dPrecisionMean">Precision times the mean of the Gaussian</param>
            <param name="dPrecison">Precision of the Gaussian.</param>
        </member>
        <member name="M:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian.op_Multiply(MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian,MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian)">
            <summary>
            Multiplies two Gaussians.
            </summary>
            <param name="D1">First Factor.</param>
            <param name="D2">Second Factor.</param>
            <returns>The product of the two Gaussians.</returns>
        </member>
        <member name="M:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian.op_Division(MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian,MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian)">
            <summary>
            Divides two Gaussians.
            </summary>
            <param name="D1">Numerator Gaussian.</param>
            <param name="D2">Denominator Gaussian.</param>
            <returns>The division of the two Gaussians.</returns>
        </member>
        <member name="M:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian.op_Subtraction(MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian,MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian)">
            <summary>
            Computes the absolute difference between two Gaussians.
            </summary>
            <param name="D1">First Gaussian.</param>
            <param name="D2">Second Gaussian.</param>
            <returns>The absolute deviation of the two Gaussians in terms of their parameters.</returns>
        </member>
        <member name="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian.Mean">
            <summary>
            The mean of a Gaussian.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian.PrecisionMean">
            <summary>
            The precision times the mean of the Gaussian.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian.Variance">
            <summary>
            The variance of a Gaussian.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian.StdDev">
            <summary>
            The standard deviation of a Gaussian.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian.Precision">
            <summary>
            The precision of a Gaussian.
            </summary>
        </member>
        <member name="T:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.ChainScheduleEntry">
            <summary>
            This type is used to denote which factors/messages to update in a chain schedule
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.ChainScheduleEntry.DifferenceFactor">
            <summary>
            If true, the difference factor is updated; otherwise the ranking factor.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.ChainScheduleEntry.Factor">
            <summary>
            The factor index.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.ChainScheduleEntry.Message">
            <summary>
            The message index.
            </summary>
        </member>
        <member name="T:MSRC.Ranking.Skills.MuSigmaSkill">
            <summary>
            A class to represent the skill belief in the MuSigma system, that is, the parameters \mu (mean) and \sigma (standard deviation) of 
            the Gaussian skill belief.
            </summary>
        </member>
        <member name="T:MSRC.Ranking.Skill">
            <summary>
            Abstract base class of all skills. Since we are interested in rankings, each skill must be convertible into a (skill) level 
            and a more fine-grained skill point measure. For example, the number of kills, the total ammount of experience points, etc. are valid 
            skill measures. Since we have both levels and skill points, a fractional level will tell us the fractional amount of difference 
            between the level and the skill points.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.Skill.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.Skill.GetLevel(System.Double)">
            <summary>
            A skill level of the player between 0 and 50.
            </summary>
            <param name="dScaling">Scaling factor of the points to map it to levels.</param>
            <returns>A level between 0 and 50.</returns>
            <remarks>Levels are the broad version of the skill points.</remarks>
        </member>
        <member name="M:MSRC.Ranking.Skill.GetFractionalLevel(System.Double)">
            <summary>
            The fractional difference between the level and the points. This value should always be between 0 and 1.
            </summary>
            <returns>The fractional part of the skill points into the current level.</returns>
        </member>
        <member name="P:MSRC.Ranking.Skill.Points">
            <summary>
            The skill points of the player. 
            </summary>
            <remarks>Skill points are the exact, fine-grained summary of skill.</remarks>
        </member>
        <member name="F:MSRC.Ranking.Skills.MuSigmaSkill.m_dMu">
            <summary>
            The mean of the skill belief.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.Skills.MuSigmaSkill.m_dSigma">
            <summary>
            The standard deviation of the skill belief.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.Skills.MuSigmaSkill.#ctor(System.Double,System.Double)">
            <summary>
            Constructor which initialises mean and standard deviation of the skill belief.
            </summary>
            <param name="dMu">Mean of the skill belief.</param>
            <param name="dSigma">Standard deviation of the skill belief.</param>
        </member>
        <member name="M:MSRC.Ranking.Skills.MuSigmaSkill.GetLevel(System.Double)">
            <summary>
            Skill level of the player. The skill level is obtained by mutliplying the skill points by dScaling and making 
            sure it never gets negative or above 50.
            </summary>
            <param name="dScaling">A scaling factor that is applied to the MuSigma skill points.</param>
            <returns>The level between 0 and 50.</returns>
        </member>
        <member name="M:MSRC.Ranking.Skills.MuSigmaSkill.GetFractionalLevel(System.Double)">
            <summary>
            Fractional skill level of the player.
            </summary>
            <param name="dScaling">A scaling factor that is applied to the MuSigma skill points.</param>
            <returns>The fractional part of the skill points into the level.</returns>
        </member>
        <member name="P:MSRC.Ranking.Skills.MuSigmaSkill.Mu">
            <summary>
            The mean of the skill belief.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.Skills.MuSigmaSkill.Sigma">
            <summary>
            The standard deviation of the skill belief.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.Skills.MuSigmaSkill.Points">
            <summary>
            Skill points of the player. 
            </summary>
            <remarks>The skill points of the player is the lower 99% quantile of the skill belief. This is a very conservative 
            estimate of the true skill of a player and should always lower bound the true skill.</remarks>
        </member>
        <member name="T:MSRC.Ranking.PlayerSkills">
            <summary>
            A class which manages a chronological series of skills for a player. The date of a skill 
            will mean that the skill is valid until this date (including it) but nothing will be known 
            afterwards. Note that this class will only allow inserting new skills <c>after</c> the last 
            inserted skill. 
            </summary>
        </member>
        <member name="F:MSRC.Ranking.PlayerSkills.m_aPlayerSkillList">
            <summary>
            A variable sized list of skills.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.PlayerSkills.m_aDatesList">
            <summary>
            A variable sized list of dates at which the skills are valid.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.PlayerSkills.m_iMaxLength">
            <summary>
            The maximal length of the array lists. 
            </summary>
        </member>
        <member name="F:MSRC.Ranking.PlayerSkills.m_iCurrentElementIndex">
            <summary>
            The index of the current element.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.PlayerSkills.#ctor">
            <summary>
            Construcuts a variable sized list of skills of given maximal length.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.PlayerSkills.#ctor(System.Int32)">
            <summary>
            Construcuts a variable sized list of skills of given maximal length.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the skill list is shorter than two elements.</exception>
        </member>
        <member name="M:MSRC.Ranking.PlayerSkills.AddSkill(MSRC.Ranking.Skill,System.DateTime)">
            <summary>
            Adds a new skill valid at a specified date.
            </summary>
            <param name="aSkill">The new skill.</param>
            <param name="aDate">Time at which the skill is valid.</param>
            <remarks>The date of a skill will mean that the skill is valid until this date (including it) but 
            nothing will be known afterwards.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <c>aDate</c>is before or at the latest inserted skill time.</exception>
        </member>
        <member name="M:MSRC.Ranking.PlayerSkills.Clear">
            <summary>
            Clears (empties) the list of player skill.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.PlayerSkills.GetLatestSkill(System.DateTime)">
            <summary>
            Gets the latest skill until (and including) a specific date.
            </summary>
            <param name="aDate">The target date.</param>
            <returns>The skill that is nearest in the past to the target data or null if there is no skill.</returns>
        </member>
        <member name="P:MSRC.Ranking.PlayerSkills.LatestSkill">
            <summary>
            The latest skill (or null if the list of skills is empty).
            </summary>
        </member>
        <member name="P:MSRC.Ranking.PlayerSkills.LatestDate">
            <summary>
            The latest date (or 0 ticks if the list of skills is empty).
            </summary>
        </member>
        <member name="P:MSRC.Ranking.PlayerSkills.NumberOfSkills">
            <summary>
            Total number of skills.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.PlayerSkills.Skills">
            <summary>
            The list of skills sorted by chronologically.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.PlayerSkills.Dates">
            <summary>
            The sorted list of dates.
            </summary>
        </member>
        <member name="T:MSRC.Ranking.PlayerSkillsList">
            <summary>
            A class that manages list of skills indexed by players. Each player will be identified by a unqiue player ID. This
            list is managing a chronologically sorted list of skills for each player. The PlayerSkills class and this class should not be confused: 
            Whereas the PlayerSkills class manages all skills of a single player in time, this class manages a list of PlayerSkills for all players.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.PlayerSkillsList.m_aSkillsList">
            <summary>
            A variable sized mapping between player IDs and player skills.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.PlayerSkillsList.#ctor">
            <summary>
            Constructs a variable sized list of skill lists.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.PlayerSkillsList.Clear">
            <summary>
            Clears (empties) the list of skill lists.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.PlayerSkillsList.ClearPlayerSkills">
            <summary>
            Clears (empties) the chronologically sorted list of skills for each player but retains
            its own internal list of skill lists.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.PlayerSkillsList.AddPlayerSkills(MSRC.Ranking.PlayerSkills,System.Int32)">
            <summary>
            Adds a the chronologically sorted list of skills for a new player with a specified unique player index.
            </summary>
            <param name="aPlayerSkills">A chronologically sorted list of skills for the player.</param>
            <param name="iPlayerID">The unique player ID.</param>
        </member>
        <member name="M:MSRC.Ranking.PlayerSkillsList.GetPlayerSkills(System.Int32)">
            <summary>
            Gets the list of skills for a given player ID.
            </summary>
            <param name="iPlayerID">The unique player ID.</param>
            <returns>The chronologically sorted list of skills for the player with the specified ID or null if 
            the player does not exists.</returns>
        </member>
        <member name="T:MSRC.Ranking.Ranking">
            <summary>
            A class that represents a ranking between n elements. In this class, rank 1 is assumed to be the highest rank. Moreover, it is possible
            that two elements are on the same rank. In this case, no rank gap is introduced; a valid ranking is thus 1,1,2,3 instead of 1,1,3,4.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.Ranking.m_iRanks">
            <summary>
            The ranks of each element. Note that the ranks will always be between 1 and m_iRanks.Length.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.Ranking.#ctor(System.Int32)">
            <summary>
            Constructs an identity ranking between a specified number of elements. The first element will be of highest rank and
            the last element will be of lowest rank.
            </summary>
            <param name="iNumberOfElements">Number of elements.</param>
        </member>
        <member name="M:MSRC.Ranking.Ranking.#ctor(System.Int32[])">
            <summary>
            Constructs a ranking based on the values given in an vector of nunbers.
            </summary>
            <param name="iElements">A list of integers.</param>
            <remarks>This method will have to call sorting routines so it may become slow when passed a long list of integers!</remarks>
        </member>
        <member name="M:MSRC.Ranking.Ranking.Factorial(System.Int32)">
            <summary>
            Computes the factorial of n.
            </summary>
            <param name="n">The parameter <c>n</c>.</param>
            <returns>The factorial of <c>n</c>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <c>n</c> is too large to represent n! as a long.</exception>
        </member>
        <member name="M:MSRC.Ranking.Ranking.GetWinner(System.Int32,System.Int32)">
            <summary>
            Compares the rank of two elements.
            </summary>
            <param name="i">Index of the first element.</param>
            <param name="j">Index of the second element.</param>
            <returns>Returns +1 is the first element is of higher rank than the second element, -1 if the 
            second element is of higher rank than the first element, or 0 if both elements are of same rank.</returns>
        </member>
        <member name="M:MSRC.Ranking.Ranking.Difference(MSRC.Ranking.Ranking)">
            <summary>
            Computes the difference to another ranking.
            </summary>
            <param name="aRanking">Ranking to be compared with.</param>
            <returns>A value between 0 and 1 indicating the difference between the two rankings.</returns>
            <remarks>The ranking difference will be computed as the fraction of pairs of elements where the two rankings disagree. This
            can be seen as the fractional difference between the number of swapping operations that bubble sort would take to sort each
            of the two rankings.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the rankings differ in the number of elements.</exception>
        </member>
        <member name="M:MSRC.Ranking.Ranking.Sort(System.Int32[],System.Int32[])">
            <summary>
            Bubble sort of a list of items relative to a list of keys. 
            </summary>
            <param name="iKeys">List of keys (this will be sorted in ascending order).</param>
            <param name="iItems">List of items (this will be sorted in ascending order relative to the list of keys).</param>
            <remarks>This sort is slow but stable (as opposed to <seealso cref="M:System.Array.Sort(System.Array,System.Array)"/>.</remarks>
        </member>
        <member name="M:MSRC.Ranking.Ranking.Sort(System.Int32[])">
            <summary>
            Bubble sort of a list of keys. 
            </summary>
            <param name="iKeys">List of keys (this will be sorted in ascending order).</param>
            <remarks>This sort is slow but stable (as opposed to <seealso cref="M:System.Array.Sort(System.Array,System.Array)"/>.</remarks>
        </member>
        <member name="P:MSRC.Ranking.Ranking.Indicies">
            <summary>
            Zero-based indicies which reflect the rankings.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.Ranking.NumberOfElements">
            <summary>
            Number of elements in the ranking.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.Ranking.NumberOfEquivalenceClasses">
            <summary>
            Number of equivalent rankings.
            </summary>
        </member>
        <member name="T:MSRC.Ranking.Team">
            <summary>
            A class to represent a team of players together with their scores, the fraction of total game length that the player 
            participated and the amount by which the players's skill should be updated. Each player will be represented by a 
            unique integer ID. The score will be an integer value. The fraction of game time will be a double value between
            0 and 1. The amount by which the players's skill should be updated will be a double value between 0 and 1.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.Team.m_aPlayerID">
            <summary>
            The variable size list of player ID's that form the team.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.Team.m_aScore">
            <summary>
            The variable size list of player scores for each player on the team. 
            </summary>
        </member>
        <member name="F:MSRC.Ranking.Team.m_aGameTimeFraction">
            <summary>
            The variable size list of player's fraction of the total game time that they participated.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.Team.m_aUpdateFactors">
            <summary>
            The variable size list of player's update factors.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.Team.#ctor(System.Int32)">
            <summary>
            Construcuts a new team with a given maximal number of players.
            </summary>
            <param name="iMaxNumberOfPlayers">Maximal number of players.</param>
            <remarks>If more than the specified number of players are added an exception will be thrown.</remarks>
        </member>
        <member name="M:MSRC.Ranking.Team.#ctor">
            <summary>
            Construcuts a new team with a variable number of players.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.Team.AddPlayer(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Adds a new player to the team.
            </summary>
            <param name="iPlayerID">Player ID of the new player.</param>
            <param name="iScore">Score of the new player.</param>
            <param name="dGameTimeFraction">Fraction of total game length that the player participated.</param>
            <param name="dUpdateFactor">Update factor for this player.</param>
            <returns>The player index of the added player.</returns>
            <remarks>The player index must not be confused with the player ID. The player index is a zero-based
            internal index used by this class.</remarks>
        </member>
        <member name="M:MSRC.Ranking.Team.AddPlayer(System.Int32,System.Int32,System.Double)">
            <summary>
            Adds a new player to the team.
            </summary>
            <param name="iPlayerID">Player ID of the new player.</param>
            <param name="iScore">Score of the new player.</param>
            <param name="dGameTimeFraction">Fraction of total game length that the player participated.</param>
            <returns>The player index of the added player.</returns>
            <remarks>The player index must not be confused with the player ID. The player index is a zero-based
            internal index used by this class. The update factor is set to 100%.</remarks>
        </member>
        <member name="M:MSRC.Ranking.Team.AddPlayer(System.Int32,System.Int32)">
            <summary>
            Adds a new player to the team.
            </summary>
            <param name="iPlayerID">Player ID of the new player.</param>
            <param name="iScore">Score of the new player.</param>
            <returns>The player index of the added player.</returns>
            <remarks>The player index must not be confused with the player ID. The player index is a zero-based
            internal index used by this class. The fraction of total game length of participation and the update
            factor are set to 100%.
            </remarks>
        </member>
        <member name="M:MSRC.Ranking.Team.GetPlayerID(System.Int32)">
            <summary>
            Get the player ID for a player at specified index.
            </summary>
            <param name="iPlayer">The player index.</param>
            <returns>The global player ID or -1 if the index is out of range.</returns>
            <remarks>The player index must not be confused with the player ID. The player index is a zero-based
            internal index used by this class and increases everytime a player is added.</remarks>
        </member>
        <member name="M:MSRC.Ranking.Team.GetPlayerScore(System.Int32)">
            <summary>
            Gets the score for the player at a specified index.
            </summary>
            <param name="iPlayer">The player index.</param>
            <returns>The score of the player.</returns>
            <remarks>The player index must not be confused with the player ID. The player index is a zero-based
            internal index used by this class and increases everytime a player is added.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the player index is out of range.</exception>
        </member>
        <member name="M:MSRC.Ranking.Team.GetPlayerGameTimeFraction(System.Int32)">
            <summary>
            Gets the fraction of game length that the player at a specified index participated.
            </summary>
            <param name="iPlayer">The player index.</param>
            <returns>The fraction of total game time of participation.</returns>
            <remarks>The player index must not be confused with the player ID. The player index is a zero-based
            internal index used by this class and increases everytime a player is added.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the player index is out of range.</exception>
        </member>
        <member name="M:MSRC.Ranking.Team.GetUpdateFactor(System.Int32)">
            <summary>
            Gets the update factor of a player.
            </summary>
            <param name="iPlayer">The player index.</param>
            <returns>The update factor.</returns>
            <remarks>The player index must not be confused with the player ID. The player index is a zero-based
            internal index used by this class and increases everytime a player is added.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the player index is out of range.</exception>
        </member>
        <member name="P:MSRC.Ranking.Team.NumberOfPlayers">
            <summary>
            Total number of players in the team.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.Team.TeamScore">
            <summary>
            Score of the team.
            </summary>
            <remarks>The score of a team is always the the sum of the scores of all players in the team.</remarks>
        </member>
        <member name="P:MSRC.Ranking.Team.PlayerIDs">
            <summary>
            All player IDs for the entire team.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.Team.PlayerScores">
            <summary>
            Scores for every player on the team.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.Team.GameTimeFractions">
            <summary>
            Fraction of game length that each player has participated.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.Team.UpdateFactors">
            <summary>
            Update factors for each player.
            </summary>
        </member>
        <member name="T:xonline.common.stfutil.AccountsUtil.CCNumber">
             <summary>
             *** FOR INTERNAL MICROSOFT TEST ONLY ***
             This file will generate and validate credit card numbers based on the checksum.
             The credit card numbers created by this class are for internal test only. They
             will pass the checksum requirement but they are NOT real credit cards and they
             are useless in production or outside of Microsoft.
             NEVER attempt to use these cards in production or outside of Microsoft. You will
             not be able to purchase anything and you will be committing FRAUD.
             Immediately upon completion of testing, you must discard the credit card number.
            
             Vendors under NDA can also use these cards for test purposes only. This generator
             should not used outside of the MS network.
             </summary>
        </member>
        <member name="T:xonline.common.stfutil.DirectDebitRandomizer">
            <summary>
            This class provides properties to generate random credit card numbers
            </summary>
        </member>
        <member name="M:xonline.common.stfutil.DirectDebitRandomizer.#ctor">
            <summary>
            Default constructor - assumes France for the direct debit country
            </summary>
        </member>
        <member name="M:xonline.common.stfutil.DirectDebitRandomizer.#ctor(System.String)">
            <summary>
            Uses the country provided to randomize on
            </summary>
        </member>
        <member name="M:xonline.common.stfutil.DirectDebitRandomizer.#ctor(System.String,System.String)">
            <summary>
            Uses the country provided to randomize on
            </summary>
        </member>
        <member name="M:xonline.common.stfutil.DirectDebitRandomizer.Randomize">
            <summary>
            Generates a random direct debit account number, bank code, branch code, etc.
            These values are in the various properties of this class and are synched with each other to provide a valid direct debit account.
            </summary>
        </member>
        <member name="M:xonline.common.stfutil.DirectDebitRandomizer.RandomizeDirectDebitValues">
            <summary>
            Generates a random direct debit account number, bank code, branch code, etc.
            These values are in the various properties of this class and are synched with each other to provide a valid direct debit account.
            </summary>
        </member>
        <member name="M:xonline.common.stfutil.DirectDebitRandomizer.GetCheckDigitsForFranceAccount">
            <summary>
            Returns the Check Digits value based on the algorithm for a French direct debit account.
            </summary>
            <returns></returns>
        </member>
        <member name="P:xonline.common.stfutil.DirectDebitRandomizer.AccountNumber">
            <summary>
            The account number of the direct debit account
            </summary>
        </member>
        <member name="P:xonline.common.stfutil.DirectDebitRandomizer.AccountNumberLastFour">
            <summary>
            The last four digits of the account number
            </summary>
        </member>
        <member name="P:xonline.common.stfutil.DirectDebitRandomizer.BankCode">
            <summary>
            The bank code of the direct debit account
            </summary>
        </member>
        <member name="P:xonline.common.stfutil.DirectDebitRandomizer.BranchCode">
            <summary>
            The branch code of the direct debit account
            </summary>
        </member>
        <member name="P:xonline.common.stfutil.DirectDebitRandomizer.CheckDigits">
            <summary>
            The checksum of the direct debit account
            </summary>
        </member>
        <member name="P:xonline.common.stfutil.DirectDebitRandomizer.Country">
            <summary>
            The country of the direct debit account
            </summary>
        </member>
        <member name="P:xonline.common.stfutil.DirectDebitRandomizer.Algorithm">
            <summary>
            Alogrithm used to generate acct number
            </summary>
        </member>
        <member name="F:xonline.common.protocol.TestFdReflectorRequest.Action.Reflect">
            <summary>Standard reflection response.</summary>
        </member>
        <member name="F:xonline.common.protocol.TestFdReflectorRequest.Action.ResponseWait">
            <summary>Sleeps for param ms.</summary>
        </member>
        <member name="F:xonline.common.protocol.TestFdReflectorRequest.Action.ThrowUnhandledException">
            <summary>Throws an unhandled exception for IIS to catch.</summary>
        </member>
        <member name="F:xonline.common.protocol.TestFdReflectorRequest.Action.Exit">
            <summary>Call the Exit function, killing the IIS process (maybe).</summary>
        </member>
        <member name="F:xonline.common.protocol.TestFdReflectorRequest.Action.ReturnStatus">
            <summary>Responds with the status code param.</summary>
        </member>
        <member name="F:xonline.common.protocol.TestFdReflectorRequest.Action.NoResponse">
            <summary>Does not send a response.</summary>
        </member>
        <member name="F:xonline.common.protocol.TestFdReflectorRequest.Action.ReflectHeaders">
            <summary>Reflects the headers from the request into the response headers.</summary>
        </member>
        <member name="F:xonline.common.protocol.TestFdReflectorRequest.Action.OutputBody">
            <summary>The response body will be param bytes.</summary>
        </member>
        <member name="F:xonline.common.protocol.TestFdReflectorRequest.Action.Stress">
            <summary>A quick response that only contains the URL and query string.</summary>
        </member>
        <member name="F:xonline.common.protocol.TestFdReflectorRequest.Action.ResponseXMLContentType">
            <summary>Changes the response to text/xml content type.</summary>
        </member>
        <member name="F:xonline.common.protocol.TestFdReflectorRequest.Action.AuthSGNoAAInfo">
            <summary>Does not do the AAInfo lookups for the AuthSG specifics.</summary>
        </member>
        <member name="F:xonline.common.protocol.TestFdReflectorRequest.Action.ReturnStatusAndResponseBody">
            <summary>Responds with the status code param.  Also place specific content in the response body.</summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\libd\AMD64\stfcorehelp.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>STFCore</name>
    </assembly>
    <members>
        <member name="T:ServerTestFramework.TestAttribute">
            <summary>
            allow an alias for Attribute "[TestCase]" to be "[Test]", like NUnit
            Deprecated.
            </summary> 
        </member>
        <member name="T:ServerTestFramework.TestFixtureAttribute">
            <summary>
            allow an alias for Attribute "[TestGroup]" to be "[TestFixture]", like NUnit
            Deprecated.
            </summary>
        </member>
        <member name="T:ServerTestFramework.TestGroupAttribute">
            <summary>
            Indicates that the node contains a group of other nodes, and is not a test by itself.
            </summary>
        </member>
        <member name="T:ServerTestFramework.TestGroupSetupAttribute">
            <summary>
            marks a function as a setup method.  These methods are executed
            just before a set of tests are run.
            </summary> 
        </member>
        <member name="T:ServerTestFramework.TestGroupTearDownAttribute">
            <summary>
            marks a function as an tear-down method.  These methods are executed
            just after a set of tests are run.
            </summary> 
        </member>
        <member name="T:ServerTestFramework.StressTestAttribute">
            <summary>
            Indicates that a test is to be used for stress.
            </summary>
        </member>
        <member name="T:ServerTestFramework.StressInstantiateAttribute">
            <summary>
            Indicates that when running a stress test, that each run should occur on a unique instance of the node.
            </summary>
        </member>
        <member name="T:ServerTestFramework.IgnoreAttribute">
            <summary>
            This feature should be used to temporarily not run a TestCase or TestGroup. 
            This is a better mechanism than commenting out the testCase/testGroup,
            since the tests will be compiled with the rest of the code and there is an 
            indication at run time that a test is not being run. This insures that tests will not be forgotten.
            </summary>
        </member>
        <member name="T:ServerTestFramework.TestTagAttribute">
            <summary>
            A generic marker than can be placed on a test or group.  This can be used for filtering or reporting.
            A tag string may be of the following forms:
               NameOfTag
               NameOfTag=value
               NameOfTag=value0, value1, etc
            </summary>
        </member>
        <member name="T:ServerTestFramework.AsyncGroupAttribute">
            <summary>
            On a test case, tests with the same AsyncGroup value can run at the same time.  On a group this sets the default AsyncGroup value for all tests in that group.
            Test groups with the same AsyncSet value can be run at the same time. (AsyncSet has no meaning for a test case)
            A value of 0 means don't run async.
            </summary>
        </member>
        <member name="T:ServerTestFramework.AsyncThreadCountAttribute">
            <summary>
            Attribute for a test group for how many threads within the group are allowed to run at the same time.
            </summary>
        </member>
        <member name="T:ServerTestFramework.AsyncThreadDelayAttribute">
            <summary>
            Attribute for a test group.  Controls the delay (in ms) between thread creations for tests within the group.
            This can be useful for preventing a ton of tests from slamming the network system at the exact same moment.
            </summary>
        </member>
        <member name="T:ServerTestFramework.DoNotRetryAttribute">
            <summary>
            Attribute for groups and cases.  This specifies that the test case should never be automatically retried if it fails.
            </summary>
        </member>
        <member name="T:ServerTestFramework.CompoundCaseAttribute">
            <summary>
            Attribute for groups and cases.  Each instance of CompoundTestBase class that use this will cause multiple instances of TestBase's to be created.
            </summary>
        </member>
        <member name="T:ServerTestFramework.RunDependencyAttribute">
            <summary>
            Marks a functional test as not being able to run until a specific other test has run.
            The string may be either of:
            - The fully-qualified name of a leaf node or the name of a sibling.
            - The non-qualified name of a sibling node (does not have to be a leaf).
            </summary>
        </member>
        <member name="T:ServerTestFramework.AtomicBranchAttribute">
            <summary>
            Indicates that the node is a test group, and that all direct sub-nodes must all be either enabled or disabled.
            </summary>
        </member>
        <member name="T:ServerTestFramework.RootNodeAttribute">
            <summary>
            This attribute can be placed on the assembly to declare a single group node that is to become the root of the assembly's tree.
            </summary>
        </member>
        <member name="T:ServerTestFramework.TestSuiteException">
            <summary>
            Custom Excption class to convey excpetions at the test suite load and run states.
            Deprecated.
            </summary>
        </member>
        <member name="T:ServerTestFramework.HttpStatusCodeException">
            <summary>
            Custom Exception class to carry and identify failures with an Http Status code
            </summary>
        </member>
        <member name="T:ServerTestFramework.TimeOutException">
            <summary>
            Custom Exception class to identify time out failures
            </summary>
        </member>
        <member name="T:ServerTestFramework.ExpectedValueCheckException">
            <summary>
            Custom Excption class to carry and identify failures matching a named value.
            </summary>
        </member>
        <member name="T:ServerTestFramework.ExpectedNotValueCheckException">
            <summary>
            Custom Excption class to carry and identify failures matching a named value.
            </summary>
        </member>
        <member name="T:ServerTestFramework.StfException">
            <summary>
            Generic exception wrapper, allows parameters in the message string. Think of it as
            an Exception++.
            Deprecated.
            </summary>
        </member>
        <member name="T:ServerTestFramework.DidNotExecuteException">
            <summary> If this exception is thrown by a test then the test will be counted as having not been run at all, rather than failed. </summary>
        </member>
        <member name="T:ServerTestFramework.KnownBugException">
            <summary>
            This exception should be thrown when a test encounters conditions that indicate a known bug.
            </summary>
        </member>
        <member name="F:ServerTestFramework.KnownBugException.DefaultMessageFormat">
            <summary>The default message format string.</summary>
        </member>
        <member name="F:ServerTestFramework.KnownBugException.EmptyBugDatabase">
            <summary>The string to use if the bug database is null.</summary>
        </member>
        <member name="M:ServerTestFramework.KnownBugException.GetDefaultMessage(System.Int32,System.String)">
            <summary>
            Gets the default message for a KnownBugException.
            </summary>
        </member>
        <member name="M:ServerTestFramework.KnownBugException.#ctor(System.Int32,System.String)">
            <summary>
            Creates a KnownBugException from a bug id and database.
            </summary>
        </member>
        <member name="M:ServerTestFramework.KnownBugException.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Creates a KnownBugException from a bug id and database, with a custom message.
            </summary>
        </member>
        <member name="M:ServerTestFramework.KnownBugException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            Creates a KnownBugException from a bug id and database, with an inner exception.
            </summary>
        </member>
        <member name="M:ServerTestFramework.KnownBugException.#ctor(System.Int32,System.String,System.String,System.Exception)">
            <summary>
            Creates a KnownBugException from a bug id and database, with a custom message and inner exception.
            </summary>
        </member>
        <member name="P:ServerTestFramework.KnownBugException.BugID">
            <summary>The bug identifier; ex the PS bug number.</summary>
        </member>
        <member name="P:ServerTestFramework.KnownBugException.BugDatabase">
            <summary>The bug database name; ex the PS database.</summary>
        </member>
        <member name="F:ServerTestFramework.CoreGlobal.DefaultConfigFile">
            <summary>
            The default config file to load.
            </summary>
        </member>
        <member name="F:ServerTestFramework.CoreGlobal.Config">
            <summary>
            The current config set.
            </summary>
        </member>
        <member name="M:ServerTestFramework.CoreGlobal.CallReloadAllTestTrees">
            <summary> Calls ReloadAllTestTrees. </summary>
        </member>
        <member name="M:ServerTestFramework.CoreGlobal.CallTestNodeTreeLoaded(ServerTestFramework.TestNode)">
            <summary> Calls TestNodeTreeLoaded. </summary>
        </member>
        <member name="M:ServerTestFramework.CoreGlobal.CallTestNodeTreeUnload(ServerTestFramework.TestNode)">
            <summary> Calls TestNodeTreeUnloaded to indicate that everything should remove all references to the test node tree. </summary>
        </member>
        <member name="M:ServerTestFramework.CoreGlobal.GetCoreAssembly">
            <summary>
            Returns the assembly of STFCore.
            </summary>
        </member>
        <member name="M:ServerTestFramework.CoreGlobal.CheckAssemblyVersion(System.Reflection.Assembly)">
            <summary>
            Check the versions of other assemblies linked against us, to make sure there's not a mismatch between the version they linked with and our version.
            </summary>
        </member>
        <member name="M:ServerTestFramework.CoreGlobal.Initialize(System.String)">
            <summary>
            Load xml config from a file.
            </summary>
        </member>
        <member name="M:ServerTestFramework.CoreGlobal.Initialize(System.Xml.XmlDocument)">
            <summary>
            Initialize the framework using a pre-created XML config document.
            </summary>
        </member>
        <member name="M:ServerTestFramework.CoreGlobal.Initialize(ServerTestFramework.Runner.StfXmlDoc)">
            <summary>
            Initialize the framework using a pre-created XML config document.
            </summary>
        </member>
        <member name="M:ServerTestFramework.CoreGlobal.Initialize">
            <summary>
            Initialize the framework using the default config file.
            </summary>
        </member>
        <member name="M:ServerTestFramework.CoreGlobal.Uninitialize">
            <summary> Called to uninitialize the framework. </summary>
        </member>
        <member name="M:ServerTestFramework.CoreGlobal.RegisterInitializationCallback(ServerTestFramework.CoreGlobal.VoidFunctionType)">
            <summary> Other libraries that depend on STF being initialized can call this to be notified when initialization occurs </summary>
        </member>
        <member name="M:ServerTestFramework.CoreGlobal.RegisterUninitializationCallback(ServerTestFramework.CoreGlobal.VoidFunctionType)">
            <summary> Other libraries that depend on STF being initialized can call this to be notified when initialization occurs </summary>
        </member>
        <member name="E:ServerTestFramework.CoreGlobal.ReloadAllTestTrees">
            <summary> Provides a way to request that the current application to discard all TestNode trees and recreate them.  Not all applications support this (in which case they will ignore it). </summary>
        </member>
        <member name="E:ServerTestFramework.CoreGlobal.TestNodeTreePreload">
            <summary>
            Called before a TestNode tree is loaded with information about the source of the tree.
            </summary>
        </member>
        <member name="E:ServerTestFramework.CoreGlobal.TestNodeTreeLoaded">
            <summary> This is called whenever a test tree is created.  Note that if nodes are reloaded, a new tree from the same assembly will likely be passed to this. </summary>
        </member>
        <member name="E:ServerTestFramework.CoreGlobal.TestNodeTreeUnloaded">
            <summary> This is called when all references to a test tree should be removed. </summary>
        </member>
        <member name="T:ServerTestFramework.NodeTaggingData">
            <summary> Manages changing and searching for tags on a node or node tree. </summary>
        </member>
        <member name="M:ServerTestFramework.NodeTaggingData.#ctor(ServerTestFramework.TestNode)">
            <summary> Constructs the list of tags and their values for a node. </summary>
        </member>
        <member name="M:ServerTestFramework.NodeTaggingData.Clone(ServerTestFramework.TestNode)">
            <summary> Duplicates the tagging data and assigns a new owner to the duplicate. </summary>
        </member>
        <member name="M:ServerTestFramework.NodeTaggingData.AddTag(System.String)">
            <summary> Adds a new valueless tag. </summary>
        </member>
        <member name="M:ServerTestFramework.NodeTaggingData.AddTagValue(System.String,System.String)">
            <summary> Adds a new value tag. </summary>
        </member>
        <member name="M:ServerTestFramework.NodeTaggingData.AddTagValue(System.String,ServerTestFramework.NodeTaggingData.Value)">
            <summary> Adds a new value tag. </summary>
        </member>
        <member name="M:ServerTestFramework.NodeTaggingData.GetNodeTags">
            <summary> Returns a list of all tags and their values that are assigned directly to this node. </summary>
        </member>
        <member name="M:ServerTestFramework.NodeTaggingData.GetAllTrunkTags">
            <summary> Returns a list of tags and their values in this node and all parent nodes. </summary>
        </member>
        <member name="M:ServerTestFramework.NodeTaggingData.GetAllBranchTags">
            <summary> Returns a list of tags and their values in this node and all child nodes. </summary>
        </member>
        <member name="M:ServerTestFramework.NodeTaggingData.GetAllTreeTags">
            <summary> Returns a list of tags and their values in this node, all parents, and all child nodes. </summary>
        </member>
        <member name="M:ServerTestFramework.NodeTaggingData.GetNearestTrunkTags">
            <summary> Walks up the tree (including the current node) and returns the the nearest values for each type of tag. </summary>
        </member>
        <member name="M:ServerTestFramework.NodeTaggingData.GetNodeValues(System.String)">
            <summary> Returns the values for a tag on a specific node. </summary>
        </member>
        <member name="M:ServerTestFramework.NodeTaggingData.GetAllTrunkValues(System.String)">
            <summary> Returns a list of values in this node and all parent nodes for a specific tag name. </summary>
        </member>
        <member name="M:ServerTestFramework.NodeTaggingData.GetNearestTrunkValues(System.String)">
            <summary> Walks up the tree (including the current node) and returns the values for the first occurance of a tag. </summary>
        </member>
        <member name="M:ServerTestFramework.NodeTaggingData.GetAllBranchValues(System.String)">
            <summary> Returns a list of values in this node and all child nodes for a specific tag name. </summary>
        </member>
        <member name="M:ServerTestFramework.NodeTaggingData.GetAllTreeValues(System.String)">
            <summary> Returns a list of values in this node, all parent nodes, and all child nodes for a specific tag name. </summary>
        </member>
        <member name="T:ServerTestFramework.NodeTaggingData.Value">
            <summary> Represents a value of a tag. </summary>
        </member>
        <member name="T:ServerTestFramework.NodeTaggingData.ValueSet">
            <summary> A collection of values. </summary>
        </member>
        <member name="T:ServerTestFramework.NodeTaggingData.InvalidExpressionException">
            <summary> Thrown when an expression is parsed that is not valid. </summary>
        </member>
        <member name="T:ServerTestFramework.NodeTaggingData.ExpressionEvaluationException">
            <summary> Thrown when an expression cannot be evaluated. </summary>
        </member>
        <member name="T:ServerTestFramework.NodeTaggingData.Expression">
            <summary> An expression that can be evaluated. </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.InfiniteLifetimeMarshalByRefObject">
            <summary>
            This overrides the lease provided on a MarshalByRef object so that it doesn't
            timeout during debugging or otherwise.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Report.DEBUG">
            <summary>
            Bit flags used for specifying the logging level of a report.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Report.GetRoot">
            <summary>
            Get the global root reporting destination.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Report.#ctor(ServerTestFramework.Report,System.String)">
            <summary>
            Create a new report that inherits it's properties (minus filter) from
            a parent report. Name must be specified for every report seperately.
            </summary>
            <param name="parent">Report to inherit properties from</param>
        </member>
        <member name="M:ServerTestFramework.Report.#ctor(System.String)">
            <summary>
            Create a new default style report with a given name and unspecified
            category. This report will automatically be attached to the root 
            reporting object.
            </summary>
            <param name="Name">Name of this report.</param>
        </member>
        <member name="M:ServerTestFramework.Report.AddReportDestination(ServerTestFramework.Report.Destination)">
            <summary>
            Add a new reporting destination to the internal list of reporters.
            </summary>
            <param name="dest">Class conforming to abstract protocol Destination</param>
        </member>
        <member name="M:ServerTestFramework.Report.RemoveReportDestination(ServerTestFramework.Report.Destination)">
            <summary>
            Removeo a new reporting destination by reference.
            </summary>
            <param name="dest">Class conforming to abstract protocol Destination</param>
        </member>
        <member name="M:ServerTestFramework.Report.ContainsReportDestination(ServerTestFramework.Report.Destination)">
            <summary>
            Returns true if this object contains a reference to a specific reporting destination 
            </summary>
            <param name="dest">Class conforming to abstract protocol Destination</param>
        </member>
        <member name="M:ServerTestFramework.Report.ResetDestinations">
            <summary>
            Remove all reporting destinations.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Report.SetLevelFilter(System.UInt32)">
            <summary>
            Change the level of reporting that will be written.
            </summary>
            <param name="filter">Log level bitflags</param>
        </member>
        <member name="M:ServerTestFramework.Report.EnableFilter(System.UInt32)">
            <summary>
            Shortcut to enable only a specific set of filters
            </summary>
            <param name="filter">Log level bitflags</param>
        </member>
        <member name="M:ServerTestFramework.Report.DisableFilter(System.UInt32)">
            <summary>
            Shortcut to disable only a specific set of filters
            </summary>
            <param name="filter">Log level bitflags</param>
        </member>
        <member name="M:ServerTestFramework.Report.Debug(System.String)">
            <summary>
            Log a message at debug priority.
            </summary>
            <param name="message">String to send to logs.</param>
        </member>
        <member name="M:ServerTestFramework.Report.Debug(System.String,System.Object[])">
            <summary>
            Log a message at debug priority.
            </summary>
            <param name="format">Format string applied to objets.</param>
            <param name="arguments">Object paramaters to use in format string.</param>
        </member>
        <member name="M:ServerTestFramework.Report.Info(System.String)">
            <summary>
            Log a message at info priority.
            </summary>
            <param name="message">String to send to logs.</param>
        </member>
        <member name="M:ServerTestFramework.Report.Info(System.String,System.Object[])">
            <summary>
            Log a message at info priority.
            </summary>
            <param name="format">Format string applied to objets.</param>
            <param name="arguments">Object paramaters to use in format string.</param>
        </member>
        <member name="M:ServerTestFramework.Report.Warn(System.String)">
            <summary>
            Log a message at warning priority.
            </summary>
            <param name="message">String to send to logs.</param>
        </member>
        <member name="M:ServerTestFramework.Report.Warn(System.String,System.Object[])">
            <summary>
            Log a message at warning priority.
            </summary>
            <param name="format">Format string applied to objets.</param>
            <param name="arguments">Object paramaters to use in format string.</param>
        </member>
        <member name="M:ServerTestFramework.Report.Error(System.String)">
            <summary>
            Log a message at error priority.
            </summary>
            <param name="message">String to send to logs.</param>
        </member>
        <member name="M:ServerTestFramework.Report.Error(System.String,System.Object[])">
            <summary>
            Log a message at error priority.
            </summary>
            <param name="format">Format string applied to objets.</param>
            <param name="arguments">Object paramaters to use in format string.</param>
        </member>
        <member name="M:ServerTestFramework.Report.Fatal(System.String)">
            <summary>
            Log a message at fatal priority.
            </summary>
            <param name="message">String to send to logs.</param>
        </member>
        <member name="M:ServerTestFramework.Report.Fatal(System.String,System.Object[])">
            <summary>
            Log a message at fatal priority.
            </summary>
            <param name="format">Format string applied to objets.</param>
            <param name="arguments">Object paramaters to use in format string.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ServerTestFramework.Report.Success(System.String)" -->
        <member name="M:ServerTestFramework.Report.Success(System.String,System.Object[])">
            <summary>
            Log a message at success priority.
            </summary>
            <param name="format">Format string applied to objets.</param>
            <param name="arguments">Object paramaters to use in format string.</param>
        </member>
        <member name="M:ServerTestFramework.Report.FormatLogLine(System.UInt32,System.String,System.String)">
            <summary>
            Formats and timestamps a log line nicely.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Report.BlockUntilQueuedLinesAreProcessed">
            <summary> Blocks until all loglines currently queued up have been processed. </summary>
        </member>
        <member name="P:ServerTestFramework.Report.GlobalCustomPrefixFormat">
            <summary>
            This controls the prefix format of log lines.
            Example: "[%level%] [%date%] [%path%] "
            </summary>
        </member>
        <member name="P:ServerTestFramework.Report.GlobalCustomPrefixDateFormat">
            <summary>
            This controls the format of the date used in loglines, using the standard .NET date format specifiers.  Specifying null will use the system default.
            Example: "yyyy'-'M'-'d' 'H':'mm':'ss"
            </summary>
        </member>
        <member name="T:ServerTestFramework.Report.Destination">
            <summary>
            Interfaced needed to a log message sink.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Report.BulkDestination">
            <summary>
            Interfaced to log many lines at once.  This interface is optional.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Report.ReportLine">
            <summary>
            A single line stored from the report output
            </summary>
        </member>
        <member name="T:ServerTestFramework.RUN_TYPE">
            <summary>
            Type of execution being run.
            These should be changed to proper case at some point.
            </summary>
        </member>
        <member name="T:ServerTestFramework.TestNode">
            <summary>
            The fundamental unit that makes up test groups and test cases.
            A node can be either be executed or can contain any number of other nodes as children.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.HasAttribute(System.Type)">
            <summary>
            Returns whether an attribute is present on this node.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.GetAttributes(System.Type)">
            <summary>
            Returns a list of all attributes on this node.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.GetAttributes(System.Type,System.Boolean)">
            <summary>
            Returns a list of all attributes on this node.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.GetAttribute``1">
            <summary>
            Returns a single attribute of the requested type
            </summary>
            <typeparam name="TAttributeType">The type of attribute to get</typeparam>
            <returns>An attribute of the given type if it exists, or null otherwise</returns>
        </member>
        <member name="M:ServerTestFramework.TestNode.GetActualType">
            <summary>
            Returns the type of the class represented by the TestNode (which may be a wrapper around the real class)
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.GetActualInstance">
            <summary>
            /// Returns the class represented by the TestNode (which may be a wrapper around the real class)
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.CreateContextData">
            <summary>
            Creates context data on a node.  This is useful for overiding values for a specific branch of the tree.
            If it already exists it is cleared.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.DestroyContextData">
            <summary>
            Destroys context data on a node.  The context on the root node may not be destroyed
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.GetContextData(System.String)">
            <summary>
            Searches ourself and then up the tree looking for a specifically named piece of data.
            Returns null if not found.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.SetContextData(System.String,System.Object)">
            <summary>
            Sets data into the first context that is found from searching ourself and then up the tree.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.GetFlattenedSubtree(System.Collections.Generic.List{ServerTestFramework.TestNode}@)">
            <summary>
            Retrieves a flattened list of all nodes under this one, including itself.
            </summary>
            <param name="allNodes"></param>
        </member>
        <member name="M:ServerTestFramework.TestNode.#ctor(System.String,System.Collections.Generic.IEnumerable{ServerTestFramework.TestNode},System.Boolean,System.Boolean)">
            <summary>
            Creates a test node with the given children.
            </summary>
            <param name="name">The name of the test node.</param>
            <param name="children">The children to give the test node.</param>
            <param name="addFunctionalData">If true, adds functional data to the nodes.</param>
            <param name="addStressData">If true, adds stress data to the nodes.</param>
            <remarks>
            Attempting to pass the Children from another TestNode may not work, as the enumeration object
            may not function properly when its container is modified by the AddChild function.
            </remarks>
        </member>
        <member name="M:ServerTestFramework.TestNode.GenerateNodeTree(System.String)">
            <summary>
            Returns a list of all top level nodes, which have had all child nodes fully populated.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.PostProcessBranchConstruction">
            <summary>
            This will be called once on all node instances after the full tree has been constructed and linked together.
            A node may use this to make changes to itself or its children.  This includes adding/removing children and changing data members.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.CompoundCaseComparison(ServerTestFramework.CompoundCaseAttribute,ServerTestFramework.CompoundCaseAttribute)">
            <summary>
            Used to sort the compound cases.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.Clone">
            <summary>
            Generates a copy of the node without sharing references.
            This new node is not immediately linked into any tree.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.CloneBranch">
            <summary>
            Constructs a Clone() of this node, and also of all child nodes, which are linked back together as a branch of a new tree.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.Dispose">
            <summary>
            Obliterates the node and all of its children
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.ConstructFromType(System.Type)">
            <summary>
            Constructs a basic node with no linkage and no use-specific data from a type.
            If the type isn't derived from TestNode, it will be wrapped as a fake group.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.AddChild(ServerTestFramework.TestNode,System.Boolean,System.Boolean)">
            <summary>
            Adds a child node to this node's children.
            It optionally adds stress/functional-specific data to the node as well (if it does not already exist).
            Only valid during construction of a node or before that node's children have started populating.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.AddChild(ServerTestFramework.TestNode)">
            <summary>
            Adds a child node to this node's children.
            It optionally adds functional-specific data to the node as well (if it does not already exist).
            Only valid during construction of a node or before that node's children have started populating.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.RemoveChild(ServerTestFramework.TestNode)">
            <summary>
            Removes a child from this node.
            Only valid during construction of a node or before that node's children have started populating.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.FindNode(ServerTestFramework.TestNode,System.String)">
            <summary>
            Searches a tree for a node based on it's name.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.EditInstances(System.Collections.Generic.List{ServerTestFramework.CompoundCaseAttribute}@)">
            <summary>
            This can optionally be implemented to manually tweak how instances are generated.
            It is passed the list of instances that were specified from attributes.  You can then add or remove from this list.
            TODO: This list was meant to be a "linked" list, not a vector.  It would be a breaking change now though...
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.PreRun">
            <summary>
            Called before Run is called and before child nodes are run.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.PreRun(ServerTestFramework.RUN_TYPE)">
            <summary>
            Called before Run is called and before child nodes are run.
            You may optionally implement this INSTEAD of the parameterless PreRun.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.PostRun">
            <summary>
            Called after Run has been called and after child nodes have run.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.PostRun(ServerTestFramework.RUN_TYPE)">
            <summary>
            Called after Run has been called and after child nodes have run.
            You may optionally implement this INSTEAD of the parameterless PostRun.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.OneTimeSetup">
            <summary>
            Similar to and called before Setup, except it is normally only ever called once.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.OneTimeSetup(ServerTestFramework.RUN_TYPE)">
            <summary>
            Similar to and called before Setup, except it is normally only ever called once.
            You may optionally implement this INSTEAD of the parameterless OneTimeSetup.  It may be called once for each type.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.OneTimeCleanup">
            <summary>
            Similar to and called after Cleanup, except it is normally only ever called once.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.OneTimeCleanup(ServerTestFramework.RUN_TYPE)">
            <summary>
            Similar to and called after Cleanup, except it is normally only ever called once.
            You may optionally implement this INSTEAD of the parameterless OneTimeCleanup.  It may be called once for each type.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.Run">
            <summary>
            Called to execute the test.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.Run(ServerTestFramework.RUN_TYPE)">
            <summary>
            Called to execute the test.
            You may optionally implement this INSTEAD of the parameterless Run.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.Prerequisites(System.Collections.Generic.Dictionary{System.String,System.Boolean}@)">
            <summary>
            Functional:
            This is called when a functional run for a suite is started and before Initialize.
            </summary>
        </member>
        <member name="P:ServerTestFramework.TestNode.Parent">
            <summary>
            The parent node of this node in the tree.
            </summary>
        </member>
        <member name="P:ServerTestFramework.TestNode.Children">
            <summary>
            The children nodes of this node in the tree.
            </summary>
        </member>
        <member name="P:ServerTestFramework.TestNode.Desc">
            <summary>
            Description of the test case
            </summary>
        </member>
        <member name="P:ServerTestFramework.TestNode.FullName">
            <summary>
            The fully qualified name of the node, which uniquely identifies it in the tree.
            </summary>
        </member>
        <member name="P:ServerTestFramework.TestNode.ContainingDll">
            <summary>
            Stores the dll that this node belongs to.
            </summary>
        </member>
        <member name="T:ServerTestFramework.TestNodeFunction">
            <summary>
            Wrap a method that represents a test case and present it as a TestNode
            </summary>
        </member>
        <member name="T:ServerTestFramework.AsyncStressTestNode">
            <summary>
            A stress base for doing asynchronous tests.  Derived classes must implement their Begin function
            in a thread safe manner, as only one actual object will ever be created.
            The Run function allows the async tests to run synchronously if the scheduler does not
            have support for async tests.
            </summary>
        </member>
        <member name="F:ServerTestFramework.AsyncStressTestNode.MaximumWaitTimeMilliseconds">
            <summary>
            The maximum time to wait when running synchronously.
            </summary>
        </member>
        <member name="M:ServerTestFramework.AsyncStressTestNode.Run">
            <summary>
            The Run function allows the async tests to run synchronously if the scheduler does not
            have support for async tests.
            </summary>
            <returns>The result of running the test.</returns>
        </member>
        <member name="F:ServerTestFramework.AsyncStressTestNode.WaitEventQ">
            <summary>
            The queue of ManualResetEvents to be used when running synchronously.
            </summary>
        </member>
        <member name="M:ServerTestFramework.AsyncStressTestNode.GetWaitEvent">
            <summary>
            Gets a ManualResetEvent from the queue, or creates one if it is empty.
            </summary>
            <returns>A ManualResetEvent.</returns>
        </member>
        <member name="M:ServerTestFramework.AsyncStressTestNode.ReleaseWaitEvent(System.Threading.ManualResetEvent)">
            <summary>
            Returns a ManualResetEvent to the queue.
            </summary>
            <param name="mre">The ManualResetEvent to return.</param>
        </member>
        <member name="M:ServerTestFramework.AsyncStressTestNode.Begin(System.Object)">
            <summary>
            The main entry point for external callers that are aware of AsyncStressTestBase.
            </summary>
            <param name="state">A state object that will be passed back to the external caller.</param>
        </member>
        <member name="M:ServerTestFramework.AsyncStressTestNode.Begin(ServerTestFramework.AsyncStressTestNode.AsyncStressTracking)">
            <summary>
            This is the entry point for the test case.  Remember that it must be thread safe.
            All tests should call End to report the result of running the test.
            </summary>
            <param name="tracker">The state object used to track this test run.</param>
        </member>
        <member name="F:ServerTestFramework.AsyncStressTestNode.AsyncFinish">
            <summary>
            The function that will be called by the test to report its result.
            The scheduler should set this value on startup to receive callbacks.
            </summary>
        </member>
        <member name="M:ServerTestFramework.AsyncStressTestNode.End(ServerTestFramework.AsyncStressTestNode.AsyncStressTracking)">
            <summary>
            Reports the test result given to it.
            </summary>
            <param name="result">The result of running the test.</param>
            <param name="tracker">The state object used to track this test run.</param>
        </member>
        <member name="M:ServerTestFramework.AsyncStressTestNode.End(System.Exception,ServerTestFramework.AsyncStressTestNode.AsyncStressTracking)">
            <summary>
            Reports the test result and updates the tracker.
            </summary>
            <param name="result">The result of running the test.</param>
            <param name="exc">The exception that occured.</param>
            <param name="tracker">The state object used to track this test run.</param>
        </member>
        <member name="T:ServerTestFramework.AsyncStressTestNode.AsyncStressTracking">
            <summary>
            An object that may be useful for debugging and will be used for running synchronously.
            </summary>
        </member>
        <member name="F:ServerTestFramework.AsyncStressTestNode.AsyncStressTracking.IDVal">
            <summary>
            The ID value position, each tracker gets its own number until we wrap.
            </summary>
        </member>
        <member name="T:ServerTestFramework.AsyncStressTestNode.AsyncCompletion">
            <summary>
            The delegate type that is used to notify the scheduler of the async test completing.
            </summary>
            <param name="state">A state object that will be passed back to the external caller.</param>
            <param name="result">The result of running the test.</param>
            <param name="exc">The exception, if any, that occured.</param>
            <param name="startTime">The time the test was started (from QueryPerformanceCounter).</param>
        </member>
        <member name="T:ServerTestFramework.FunctionalNodeData">
            <summary>
            Data about a node that is specific to functional tests.
            Note that if A node has functional data, its parent is guarenteed to also.
            </summary>
        </member>
        <member name="T:ServerTestFramework.StressNodeData">
            <summary>
            Data about a node that is specific to stress tests.
            </summary>
        </member>
        <member name="T:ServerTestFramework.ThreadMaker">
            <summary>
            Utility function to just create a System.Thread (this internally updates the thread tracker automatically).
            (You must still call .Start() on it like normal)
            </summary>
        </member>
        <member name="T:ServerTestFramework.ThreadBase">
            <summary>
            Represents a class with a worker thread (this internally updates the thread tracker automatically).
            </summary>
        </member>
        <member name="T:ServerTestFramework.ThreadTracker">
            <summary>
            Thread static storage for data that should be used across an individual test case run.
            For use and managed by the framework.
            </summary>
        </member>
        <member name="F:ServerTestFramework.ThreadTracker.TestCaseNameKey">
            <summary>The dictionary key for the current test case full name.</summary>
        </member>
        <member name="M:ServerTestFramework.ThreadTracker.Set(System.String,System.Object)">
            <summary>
            Sets a value within the thread tracking data container.
            </summary>
            <param name="key">The key to use for the value.</param>
            <param name="value">The value to associate with the key.</param>
        </member>
        <member name="M:ServerTestFramework.ThreadTracker.TryGet``1(System.String,``0@)">
            <summary>
            Attempts to get a value out of the thread tracking data container.
            </summary>
            <typeparam name="T">The type of value that is expected.</typeparam>
            <param name="key">The key to use when looking in the container.</param>
            <param name="value">The value will be set to this out parameter.</param>
            <returns>True if the container has the key; false if it does not.</returns>
        </member>
        <member name="M:ServerTestFramework.ThreadTracker.TryGetSetDefault``1(System.String,``0@,``0)">
            <summary>
            Attempts to get a value out of the thread tracking data container; if it does not contain the key, 
            add it (atomically) using the default value provided.
            </summary>
            <typeparam name="T">The type of value that is expected.</typeparam>
            <param name="key">The key to use when looking in the container.</param>
            <param name="value">The value will be set to this out parameter.</param>
            <param name="defaultValue">The default value to use if the key is not present in the container.</param>
            <returns>True if the container already had the key; false if it did not.</returns>
        </member>
        <member name="M:ServerTestFramework.ThreadTracker.Reset">
            <summary>
            Resets the thread tracking data.
            </summary>
        </member>
        <member name="M:ServerTestFramework.ThreadTracker.GetThreadTrackerData">
            <summary>
            Gets the thread tracking data container, for use in passing data to another thread.
            </summary>
            <returns>The thread tracking data object.</returns>
        </member>
        <member name="M:ServerTestFramework.ThreadTracker.SetThreadTrackerData(System.Object)">
            <summary>
            Sets the thread tracking data, for use in passing data to another thread.
            </summary>
            <param name="data">The thread tracking data object.</param>
        </member>
        <member name="F:ServerTestFramework.ThreadTracker._threadDataCreationLock">
            <summary>Keeps dictionary creation thread safe.</summary>
        </member>
        <member name="F:ServerTestFramework.ThreadTracker._threadTrackData">
            <summary>Backing for ThreadTrackData.</summary>
        </member>
        <member name="P:ServerTestFramework.ThreadTracker.ThreadTrackData">
            <summary>
            The thread tracking data dictionary.
            </summary>
        </member>
        <member name="T:ServerTestFramework.TEST_RESULTS">
            <summary>
            The result of a single execution of a run.
            These should be changed to proper case at some point.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.FunctionalSchedulerNodeData">
            <summary>
            Information that each node needs to be used by the functional scheduler.
            This is reset everytime a new run is started.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.FuncSchedulerEvents">
            <summary>
            Sends events for the functional scehduler.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.FuncSchedulerHelpers">
            <summary>
            Misc helpers for the functional scheduler.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.FunctionalSchedulerSettings">
            <summary>
            Overall parameters to the functional scheduler.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.FuncScheduler">
            <summary>
            The functional scheduler.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.TestScheduler">
            <summary>
            Functional test schedular interface.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.TestScheduler.Initialize(ServerTestFramework.Runner.FunctionalSchedulerSettings,ServerTestFramework.Runner.TestEventListener,System.Collections.Generic.IEnumerable{ServerTestFramework.TestNode})">
            <summary>
            Called to set up the scheduler.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.TestScheduler.Run">
            <summary>
            This call will block and run tests and block until either someone calls Stop or the tests finish.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.TestScheduler.Stop">
            <summary>
            Stop running tests.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.TestScheduler.ValidateParameters">
            <summary>
            Validates that the current scheduler settings are valid.
            </summary>
            <returns>true if they are valid</returns>
        </member>
        <member name="M:ServerTestFramework.Runner.FuncScheduler.GetSerializableFunctionalData(ServerTestFramework.TestNode)">
            <summary>
            Returns a serializable dictionary which contains the contents of the functional
            scheduler node data of a subtree which is passed in.
            </summary>
            <param name="rootNode"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Runner.FuncScheduler.SerializeRun">
            <summary>
            Takes the first node's name (for convenience and assuming that most runs are a single-dll)
            and serializes the current run's results to a file in the format 
            SuiteNameSerializedRunResultsTimestamp.xml. Saves into the FuncOutput\SerializedRunResults path.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.FuncScheduler.SerializeRun(System.String)">
            <summary>
            Takes the root loglines and the test case functional scheduler node data and serializes them into a file.        
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:ServerTestFramework.Runner.FuncScheduler.CollectNodePrerequisitesData(ServerTestFramework.TestNode)">
            <summary>
            Collect Prerequisites Data.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.FuncScheduler.CollectNodePrerequisitesDataRecurse(System.Collections.Generic.IEnumerable{ServerTestFramework.TestNode})">
            <summary>
            Traverse the nodes tree to populate NodePrerequisitesData.
            </summary>
            <param name="nodes"></param>
        </member>
        <member name="T:ServerTestFramework.Runner.SerializedRunResults">
            <summary>
            Used to serialize a single run's worth of data to a file.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressJob.#ctor(ServerTestFramework.TestNode,System.Single,System.String,ServerTestFramework.Runner.TestResultCollection)">
            <summary>
            Constructor for dynamic test cases
            </summary>
            <param name="suiteName"></param>
            <param name="type"></param>
            <param name="priority"></param>
            <param name="testname"></param>
            <param name="allResults"></param>
        </member>
        <member name="M:ServerTestFramework.Runner.StressJob.#ctor(ServerTestFramework.TestNode,System.Single,ServerTestFramework.Runner.TestResultCollection)">
            <summary>
            Regular constructor
            </summary>
            <param name="suiteName"></param>
            <param name="type"></param>
            <param name="priority"></param>
            <param name="allResults"></param>
        </member>
        <member name="M:ServerTestFramework.Runner.StressJob.#ctor(System.Type,ServerTestFramework.Runner.TestResultCollection)">
            <summary>
            Regular constructor
            </summary>
            <param name="suiteName"></param>
            <param name="type"></param>
            <param name="allResults"></param>
        </member>
        <member name="M:ServerTestFramework.Runner.StressJobList.#ctor">
            <summary>
            Creates an empty job list.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressJobList.AddNode(ServerTestFramework.TestNode)">
            <summary>
            Adds a node to this job list.
            </summary>
            <param name="node">The node to add.</param>
            <returns>A List of the StressJobs added.</returns>
        </member>
        <member name="M:ServerTestFramework.Runner.StressJobList.AddNodes(System.Collections.Generic.IEnumerable{ServerTestFramework.TestNode})">
            <summary>
            Adds nodes to this job list.
            </summary>
            <param name="rootNodes">The nodes to add.</param>
            <returns>A List of the StressJobs added.</returns>
        </member>
        <member name="M:ServerTestFramework.Runner.StressJobList.RemoveNode(ServerTestFramework.TestNode)">
            <summary> Removes a specific root node and all children from the list. </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressJobList.FindStressCases(ServerTestFramework.TestNode,System.Collections.Generic.List{ServerTestFramework.TestNode})">
            <summary>
            Recursively finds the stress tests for the given node, adding them to the list.
            </summary>
            <param name="node">The node to search.</param>
            <param name="list">The place to add stress nodes to.</param>
        </member>
        <member name="P:ServerTestFramework.Runner.StressJobList.TestResults">
            <summary>
            The test results used by this job list.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.StressSchedulerStage">
            <summary> Current state of the scheduler. </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.StressTestScheduler">
            <summary>
            Interface for stress test schedulers.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressTestScheduler.Initialize(ServerTestFramework.Runner.StfXmlDoc,ServerTestFramework.Runner.StressJobList,ServerTestFramework.Runner.StressSettingsCommon)">
            <summary>
            Called to set up the scheduler.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressTestScheduler.Shutdown">
            <summary>
            Shuts down the scheduler.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressTestScheduler.Run">
            <summary>
            This call will block and run tests and block until someone calls Stop.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressTestScheduler.Stop">
            <summary>
            Stop running tests.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressTestScheduler.Tick">
            <summary>
            May be called regularly by anything using the scheduler.  For instance can be used to update the
            control with status information.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressTestScheduler.GetScaleValue(ServerTestFramework.Runner.StressJob)">
            <summary>
            Gets a scale value from a stress job.
            </summary>
            <param name="job">The job to get from.</param>
            <returns>The scale value from the stress job.</returns>
        </member>
        <member name="M:ServerTestFramework.Runner.StressTestScheduler.SetScaleValue(ServerTestFramework.Runner.StressJob,System.Single)">
            <summary>
            Sets a scale value on a stress job.
            </summary>
            <param name="job">The job to set on.</param>
            <param name="val">The scale value to set.</param>
        </member>
        <member name="M:ServerTestFramework.Runner.StressTestScheduler.LoadSettings(System.Xml.XmlNode)">
            <summary>
            Load settings from an xml fragment.
            </summary>
            <param name="node">The root of the settings.</param>
        </member>
        <member name="M:ServerTestFramework.Runner.StressTestScheduler.SaveSettings(System.Xml.XmlNode)">
            <summary>
            Save settings to an xml fragment.
            </summary>
            <param name="node">The root of the settings.</param>
        </member>
        <member name="M:ServerTestFramework.Runner.StressTestScheduler.GetSettings">
            <summary> Returns the settings used by the current scheduler. </summary>
        </member>
        <member name="P:ServerTestFramework.Runner.StressTestScheduler.SchedulerControl">
            <summary>
            Gets the control associated with the scheduler.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Runner.StressTestScheduler.ScaleName">
            <summary>
            The name of the scale value used by this scheduler.  Displayed on GUI elements.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Runner.StressTestScheduler.ActiveThreads">
            <summary>
            Number of threads in use by this scheduler that are currently active (not stopped)
            </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.StressSettingsCommon">
            <summary> Settings shared by all stress schedulers. </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSettingsCommon.CopyFrom(ServerTestFramework.Runner.StressSettingsCommon)">
            <summary> Copies all our members in from another settings object. </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.StressSchedulerHelpers">
            <summary> Helpers for doing things with the stress schedulers. </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerHelpers.RunScheduler(ServerTestFramework.Runner.StressTestScheduler,ServerTestFramework.Runner.StressJobList)">
            <summary> Starts a stress scheduler and blocks until it stops running. </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerHelpers.StopScheduler(ServerTestFramework.Runner.StressTestScheduler)">
            <summary> Stop a scheduler that is running.  This blocks until the scheduler is finished stopping. </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerHelpers.VerifyOrPerformPreRun(ServerTestFramework.TestNode,ServerTestFramework.Runner.StressSettingsCommon)">
            <summary> Verifies and performs if needed the PreRun steps for a node and any of its parents. </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerHelpers.PerformPostRun(ServerTestFramework.Runner.StressJobList,ServerTestFramework.Runner.StressSettingsCommon)">
            <summary> Performs PostRun steps for all jobs. </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.StressSettingsDestroyer">
            <summary>
            Settings for the Destroyer Scheduler
            </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.StressSettingsTPS">
            <summary>
            Settings and Status for the TPS based scheduler.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Runner.StressSettingsTPS.SinWavePeriod">
            <summary>
            Period of the sine wave, in seconds.
            </summary>
            <remarks>
            Should be a factor of 60*60*24; in other words an integral number of periods should pass in a 
            single day.  Thus, 24 hours, 12 hours, 8 hours, 6 hours, etc.  If this assumption is not held,
            the wave will not stay consistent when the day resets (midnight).
            </remarks>
        </member>
        <member name="T:ServerTestFramework.Runner.StressSchedulerDestroyer">
            <summary>
            The destroyer scheduler is based on the TPS scheduler.
            It is designed to increase load until a set amount of failures occur.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.StressSchedulerTPS">
            <summary>
            The TPS based stress scheduler.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerTPS.Tick">
            <summary>
            Timer services provided by our owner.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerTPS.GetScaleValue(ServerTestFramework.Runner.StressJob)">
            <summary>
            Gets a scale value from a stress job.
            </summary>
            <param name="job">The job to get from.</param>
            <returns>The scale value from the stress job.</returns>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerTPS.SetScaleValue(ServerTestFramework.Runner.StressJob,System.Single)">
            <summary>
            Sets a scale value on a stress job.
            </summary>
            <param name="job">The job to set on.</param>
            <param name="val">The scale value to set.</param>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerTPS.LoadSettings(System.Xml.XmlNode)">
            <summary>
            Load settings from an xml fragment.
            </summary>
            <param name="node">The root of the settings.</param>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerTPS.SaveSettings(System.Xml.XmlNode)">
            <summary>
            Save settings to an xml fragment.
            </summary>
            <param name="node">The root of the settings.</param>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerTPS.TestCallback(System.Object,System.Exception,System.Int64)">
            <summary>
            The callback used by async tests to report success or failure.
            </summary>
            <param name="state">The state object that was passed to Begin.</param>
            <param name="result">The result of running the test.</param>
            <param name="exc">The exception, if any, that occured during the asynchronous portions of the test.</param>
            <param name="startTime">Time the test started (from QueryPerformanceCounter).</param>
        </member>
        <member name="P:ServerTestFramework.Runner.StressSchedulerTPS.IsInProgress">
            <summary>
            Checks the job list for in progress tests, if there are any, return true.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Runner.StressSchedulerTPS.SchedulerControl">
            <summary>
            Gets the StressSchedulerTPSControl.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Runner.StressSchedulerTPS.ScaleName">
            <summary>
            The name of the scale value used by this scheduler.  Displayed on GUI elements.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.StressSettingsPriority">
            <summary>
            Settings for the ancient scheduler.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.StressThread">
            <summary>
            Ye Aulde stress schedular apparently uses this.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressThread.SoftTerminate">
            <summary>
            Sets the terminate flag, the thread will stop after the current job is complete.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressThread.Terminate">
            <summary>
            Kills the thread.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.StressSchedulerPriority">
            <summary>
            The ancient priority-based stress scheduler.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerPriority.GetScaleValue(ServerTestFramework.Runner.StressJob)">
            <summary>
            Gets a scale value from a stress job.
            </summary>
            <param name="job">The job to get from.</param>
            <returns>The scale value from the stress job.</returns>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerPriority.SetScaleValue(ServerTestFramework.Runner.StressJob,System.Single)">
            <summary>
            Sets a scale value on a stress job.
            </summary>
            <param name="job">The job to set on.</param>
            <param name="val">The scale value to set.</param>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerPriority.LoadSettings(System.Xml.XmlNode)">
            <summary>
            Load settings from an xml fragment.
            </summary>
            <param name="node">The root of the settings.</param>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerPriority.SaveSettings(System.Xml.XmlNode)">
            <summary>
            Save settings to an xml fragment.
            </summary>
            <param name="node">The root of the settings.</param>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerPriority.BeginStress">
            <summary>
            Called by AsyncButtonClickAction when Start button is clicked. This is when we
            actually start doing the stress test work.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerPriority.TerminateThreads(System.Int32)">
            <summary>
            Terminate some number of threads gently. 
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerPriority.TerminateAllThreads">
            <summary>
            Terminate all threads, used when stopping stress run.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Runner.StressSchedulerPriority.ScaleName">
            <summary>
            The name of the scale value used by this scheduler.  Displayed on GUI elements.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Runner.StressSchedulerPriControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerPriControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerPriControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerTPSControl.SyncWithSettings">
            <summary>
            Syncs the various child controls with the settings object.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerTPSControl.SyncWithSettingsStatus">
            <summary>
            Syncs the status labels with the settings values.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Runner.StressSchedulerTPSControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerTPSControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerTPSControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Runner.StressSchedulerTPSControl.Settings">
            <summary>
            The settings object used by the scheduler that owns this control.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.TestAction">
            <summary>
            Specific types of events that occur inside of the test scheduler.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Runner.TestAction.Start">
            Test case started pre-run.
        </member>
        <member name="F:ServerTestFramework.Runner.TestAction.PostStart">
            Test case started running the actual test.
        </member>
        <member name="F:ServerTestFramework.Runner.TestAction.Pause">
            Test case started post-run.
        </member>
        <member name="F:ServerTestFramework.Runner.TestAction.Resume">
            Test run paused on a node.
        </member>
        <member name="F:ServerTestFramework.Runner.TestAction.Pass">
            Test run resumed on a node.
        </member>
        <member name="F:ServerTestFramework.Runner.TestAction.Fail">
            Test returned a passed result.
        </member>
        <member name="F:ServerTestFramework.Runner.TestAction.Timeout">
            Test case returned a failed result.
        </member>
        <member name="F:ServerTestFramework.Runner.TestAction.PreFail">
            Test case timed out.
        </member>
        <member name="F:ServerTestFramework.Runner.TestAction.PostFail">
            Prerun setup steps for the test failed.
        </member>
        <member name="F:ServerTestFramework.Runner.TestAction.Retry">
            Postrun cleanup steps for the test failed.
        </member>
        <member name="F:ServerTestFramework.Runner.TestAction.Ignore">
            A test case that previously failed is now being re-run.
        </member>
        <member name="F:ServerTestFramework.Runner.TestAction.Finish">
            Test case was not completely executed (or returned not executed).
        </member>
        <member name="F:ServerTestFramework.Runner.TestAction.StartAll">
            Test case completely finished.
        </member>
        <member name="F:ServerTestFramework.Runner.TestAction.StopAll">
            Tests begin running. Details will contain a count of running tests.  Node will be null for this.
        </member>
        <member name="T:ServerTestFramework.Runner.TestEventArgs">
            <summary>
            Event arguments notifying listeners of a test result.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.TestEventListener">
            <summary>
            This interface should be implemented by any class that would be notified by a functional test scheduler of events
            as it is running tests.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.MultiTestEventListener">
            <summary>
            Allows test events to be distributed to multiple destinations.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.TestResult">
            <summary>
            All stats-related variables and calculations for stress testing should go in this class.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.TestResult.Start">
            <summary>
            Start counting elapsed time.  The counter is stopped when End is called.  The Elapsed time is cumulative through Start/End pairs.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.TestResult.BeginInProgress">
            <summary>
            Increases the count of in progress test runs.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.TestResult.EndInProgress">
            <summary>
            Decreases the count of in progress test runs.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.TestResultCollection">
            <summary>
            Represents a collection of TestResult objects and provides methods for calculating summary values
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.TestResultCollection.CreateTestResult(System.String)">
            <summary>
            Creates a new TestResult and adds it to the collection
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Runner.TestResultCollection.AddTestResult(ServerTestFramework.Runner.TestResult)">
            <summary>
            Add existing TestResult to collection
            </summary>
            <param name="r"></param>
        </member>
        <member name="M:ServerTestFramework.ArrayEx.Equals``1(``0[],``0[])">
            <summary>
            Check i two arrays of the same type are equal.  Much faster than the non-generic version
            </summary>
            <typeparam name="T">The type of array to compare</typeparam>
            <param name="a">The first array to compare</param>
            <param name="b">The second array to compare</param>
            <returns>True if the arrays are equal, false otherwise</returns>
        </member>
        <member name="M:ServerTestFramework.ArrayEx.Reverse``1(``0[])">
            <summary>
            Reverses the bytes in the array
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.ArrayEx.ByteComparison(System.Byte,System.Byte)">
            <summary>
            Implementation of the System.Comparison delegate for byte values
            </summary>
            <param name="left">First byte to compare</param>
            <param name="right">Second byte to compare</param>
            <returns>
            Less than 0: x is less than y.
            0: x equals y.
            Greater than 0: x is greater than y.
            </returns>
        </member>
        <member name="M:ServerTestFramework.ArrayEx.SearchByteArray(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            searches an array for another array and returns the index of the start of the found block, or -1 if not found
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:ServerTestFramework.ArrayComparer`1" -->
        <member name="M:ServerTestFramework.ArrayComparer`1.#ctor(System.Comparison{`0})">
            <summary>
            Constructor
            </summary>
            <param name="elementComparer">A System.Comparison delegate capable of comparing
            two values/objects of type T</param>
        </member>
        <member name="M:ServerTestFramework.ArrayComparer`1.Compare(System.Array,System.Array)">
            <summary>
            Compares two arrays
            </summary>
            <param name="left">First array to compare</param>
            <param name="right">Second array to compare</param>
            <returns>
            Less than 0: x is less than y.
            0: x equals y.
            Greater than 0: x is greater than y.
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "P:ServerTestFramework.ArrayComparer`1.ElementComparer" -->
        <member name="M:ServerTestFramework.Utilities.AssemblyUtils.LoadAssemblyUsingDefaultMethod(System.String)">
            <summary> Uses DefaultToLoadingAssemblyDirectly to decide whether to load an assembly directly from a file like normal, or whether to load it into memory first to avoid a file lock. </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.AssemblyUtils.LoadAssemblyBytesAndReferences(System.String)">
            <summary> Loads the bytes for an assembly file then creates the assembly from that, so windows doesn't hold a lock on the file.  The referenced assemblies are then resolved like normal (which WILL lock those files).  The downside is this sometimes confuses debuggers. </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.AsyncUtils.ParallelRunner.Run(ServerTestFramework.Utilities.AsyncUtils.PRFuncToCall,System.UInt32,System.UInt32,System.Object,System.UInt32)">
            <summary>
            Starts a set of parallel function calls and waits for them to finish.
            Exceptions are rethrown on to caller if thrown on a thread.
            </summary>
            <param name="fToCall">the function to call</param>
            <param name="count">total number of calls to make (the value passed to your function is incremented each time starting from 0)</param>
            <param name="maxAtOnce">max number of threads to run at once</param>
            <param name="userData">any user-defined information to pass on (note that it is passed by referance, so all threads share the same copy)</param>
            <param name="threadDelay">Delay in ms between thread creations (default 0).  This is useful to prevent a ton of operations that start all at once from trying to hammer a network interface silmutaneously, which can cause packets to be dropped.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.AsyncUtils.ParallelRunner.RunAsync(ServerTestFramework.Utilities.AsyncUtils.PRFuncToCall,System.UInt32,System.UInt32,System.Object,System.UInt32)">
            <summary>
            Same as Run(), only returns immediately.  The returned Status object can be used to monitor the progress.
            If an exception occurs, it is stored in the status object.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.AsyncUtils.ParallelRunner.Status">
            <summary>
            represents the status of an asynchronous run
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.ByteEncoding">
            <summary>
            Encoding to just get the gosh dern bytes out of the string, and visa versa
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.ConsoleX">
            <summary>
            <p>class ConsoleX: Extends standard Console  with kbhit() and getch() methods and colored output.</p>
            
            <p>uses MSVCR70.DLL Runtime library for kbhit() and getch()</p>
            <p>uses kernel32.dll and Win32 Console API for colored output</p>
             
            contacts: VladiP
            </summary>
            <example>
            <code>
            // write colored output for arg list without brackets {},  see comments in CC class  for color output details
            ConsoleX.WriteLine(CC.BLUE, " Simple colored output: ", CC.GREEN, " int: ",i, "  float: ", f);
            ConsoleX.Write(CC.WHITE, "\n Formatted output: ", CC.GREEN, "f= ", f.ToString("000.0")); 
            
            // kbhit example
            while (27 != c)
            {
            	if (ConsoleX.kbhit())
            	{
            		c = ConsoleX.getch();
            		ConsoleX.WriteLine(CC.GREEN,"Key: ", c, "  code: ", CC.WHITE, ((int)c).ToString("d") );
            	}
            }
            </code>
            </example>
            
        </member>
        <member name="M:ServerTestFramework.Utilities.ConsoleX.Write(System.Object[])">
            <summary>
            writes arg list to console, parameters with byte type will set color options for the next output items
            see comments in CC class  for color output details
            </summary>
            <param name="olist"> parameter list with optional byte type color modifiers </param>
            <returns> byte value - old default console color </returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.ConsoleX.WriteLine(System.Object[])">
            <summary>
            WriteLine: works as Write with new line at the end of parameter list
            </summary>
            <param name="olist"></param>
            <returns> byte value - old default console color </returns>
        </member>
        <member name="T:ServerTestFramework.Utilities.CC">
            <summary>
            class CC - contains color constants to be used with ConsoleX output methods.
            Thanks to Keith Stutler (KeithSt) -- he suggested to put all constants into public class
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.COORD">
            <summary>
            Win32 API struct
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.SMALL_RECT">
            <summary>
            Win32 API struct
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.CONSOLE_SCREEN_BUFFER_INFO">
            <summary>
            Win32 API struct
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.Events">
            <summary>
            Works with event logs on multiple servers.  Primary use is searching for specific
            events withing logs since the last checkpoint.
            </summary>
            <example>
            // Set up checking event log for the kdc xmacs...
            string[] servers = Global.XEnv.GetServerListByInterface(xonline.common.config.Interface.kdcsvc);
            Events logs = new Events(servers);
            logs.Source = "XMACS"; //optional
            logs.Init();
            // Run tests...
            ...
            // Check for events by search string in new events.
            if (change.TestForChange("execution failed"))
            ...
            </example>
        </member>
        <member name="M:ServerTestFramework.Utilities.Events.Init">
            <summary>
            Run before your operation to get a base for the log.
            </summary>
            <returns>True if all servers listed responded; false if any did not.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.Events.TestForChange(System.String)">
            <summary>
            Searches new entries since Init() or the last TestForChange* was called.
            </summary>
            <param name="search">String to look for in the log.</param>
            <returns>True if Search string is found in any log since the last advancement.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.Events.TestForChange(System.String,System.Boolean)">
            <summary>
            Searches new entries since Init() or the last TestForChange* was called with advance == true.
            </summary>
            <param name="search">String to look for in the log.</param>
            <param name="advance">If true, advances the search index; if false, does not.</param>
            <returns>True if Search string is found in any log since the last advancement.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.Events.TestForChange(System.Int64)">
            <summary>
            Searches new entries since Init() or the last TestForChange* was called.
            </summary>
            <param name="id">The event id to search for.</param>
            <returns>True if event id is found in any log since the last advancement.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.Events.TestForChange(System.Int64,System.Byte[])">
            <summary>
            Searches new entries since Init() or the last TestForChange* was called.
            </summary>
            <param name="id">The event id to search for.</param>
            <param name="eventData">The event data to check events for.</param>
            <returns>True if event id is found in any log since the last advancement.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.Events.TestForChange(System.Int64,System.Boolean)">
            <summary>
            Searches new entries since Init() or the last TestForChange* was called with advance == true.
            </summary>
            <param name="id">The event id to search for.</param>
            <param name="advance">If true, advances the search index; if false, does not.</param>
            <returns>True if event id is found in any log since the last advancement.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.Events.TestForChange(System.Int64,System.Byte[],System.Boolean)">
            <summary>
            Searches new entries since Init() or the last TestForChange* was called with advance == true.
            </summary>
            <param name="id">The event id to search for.</param>
            <param name="eventData">The event data to check events for.</param>
            <param name="advance">If true, advances the search index; if false, does not.</param>
            <returns>True if event id is found in any log since the last advancement.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.Events.TestForChangeAll(System.String,System.Boolean)">
            <summary>
            Searches new entries since Init() or the last TestForChange* was called.
            </summary>
            <param name="search">The string to search for.</param>
            <param name="expect">True if the string is expected; false if it is not.</param>
            <returns>
            If expect is true: Returns true if the string is found on all servers; false if it is missing from one or more.
            If expect is false: Returns true if the string is not found on all servers; false if it is found on one or more.
            </returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.Events.TestForChangeAll(System.String,System.Boolean,System.Boolean)">
            <summary>
            Searches new entries since Init() or the last TestForChange* was called with advance == true.
            </summary>
            <param name="search">The string to search for.</param>
            <param name="expect">True if the string is expected; false if it is not.</param>
            <param name="advance">If true, advances the last time; if false, does not.</param>
            <returns>
            If expect is true: Returns true if the string is found on all servers; false if it is missing from one or more.
            If expect is false: Returns true if the string is not found on all servers; false if it is found on one or more.
            </returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.Events.TestServerForEvents(System.String,System.String,System.String,System.String,System.DateTime,System.DateTime@)">
            <summary>
            Searches the server log for the search string that occured in an event after begin.
            </summary>
            <param name="server">The server to search.</param>
            <param name="log">The log to search.</param>
            <param name="source">The source of events.</param>
            <param name="search">The string to search for.</param>
            <param name="begin">The earliest the event could occur to be relevant.</param>
            <param name="outLastTime">Output param: The last time value that was checked for events in the log.</param>
            <returns>True if a matching event is found; false if it is not.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.Events.TestServerForEvents(System.String,System.String,System.String,System.String,System.Int32,System.Int32@)">
            <summary>
            Searches the server log for the search string that occured in an event after the given index.
            </summary>
            <param name="server">The server to search.</param>
            <param name="log">The log to search.</param>
            <param name="source">The source of events.</param>
            <param name="search">The string to search for.</param>
            <param name="index">The search will begin after the event with this index.</param>
            <param name="outLastIndex">Output param: The index of the last event that was checked in the log.</param>
            <returns>True if a matching event is found; false if it is not.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.Events.TestServerForEvents(System.String,System.String,System.String,System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Searches the server log for the event id after begin.
            </summary>
            <param name="server">The server to search.</param>
            <param name="log">The log to search.</param>
            <param name="source">The source of events.</param>
            <param name="id">The event id to search for.</param>
            <param name="begin">The earliest the event could occur to be relevant.</param>
            <param name="end">The latest the event could occur to be relevant.</param>
            <returns>True if a matching event is found; false if it is not.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.Events.TestServerForEvents(System.String,System.String,System.String,System.Int64,System.Int32,System.Int32@)">
            <summary>
            Searches the server log for the event id that occured after the given index.
            </summary>
            <param name="server">The server to search.</param>
            <param name="log">The log to search.</param>
            <param name="source">The source of events.</param>
            <param name="id">The event id to search for.</param>
            <param name="index">The search will begin after the event with this index.</param>
            <param name="outLastIndex">Output param: The index of the last event that was checked in the log.</param>
            <returns>True if a matching event is found; false if it is not.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.Events.TestServerForEvents(System.String,System.String,System.String,System.Int64,System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Searches the server log for the event id that occured after the given index.
            </summary>
            <param name="server">The server to search.</param>
            <param name="log">The log to search.</param>
            <param name="source">The source of events.</param>
            <param name="id">The event id to search for.</param>
            <param name="eventData">The binary data that should be included in the event.</param>
            <param name="index">The search will begin after the event with this index.</param>
            <param name="outLastIndex">Output param: The index of the last event that was checked in the log.</param>
            <returns>True if a matching event is found; false if it is not.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.Events.TestServerForEvents(System.String,System.String,System.String,System.Int64,System.String,System.DateTime,System.DateTime)">
            <summary>
            Searches the server log for the event id after begin.
            </summary>
            <param name="server">The server to search.</param>
            <param name="log">The log to search.</param>
            <param name="source">The source of events.</param>
            <param name="id">The event id to search for.</param>
            <param name="search">The string to search for.</param>
            <param name="begin">The earliest the event could occur to be relevant.</param>
            <param name="end">The latest the event could occur to be relevant.</param>
            <returns>True if a matching event is found; false if it is not.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.Events.GetEventsAfter(System.Diagnostics.EventLog,System.DateTime)">
            <summary>
            Gets all of the events after a certain time.  Attempts to compensate for a moving log target.
            </summary>
            <param name="eventLog">The log to get from.</param>
            <param name="begin">The time to start getting events.</param>
            <returns>An array of events from the log after the time.</returns>
            <remarks>
            The change to make this copy out the timed list of entries was due to the fact that when the event log
            becomes too large, it will automatically truncate.  This would cause the end of the list to drop out
            from under the index, throwing an exception.
            
            We now do a binary search to find the oldest entry we care about, then copy out the entries from that
            one to the end.  If the oldest entry in the log hasn't changed, then we continue on.
            </remarks>
        </member>
        <member name="M:ServerTestFramework.Utilities.Events.FindFirstGTE(System.Diagnostics.EventLog,System.DateTime)">
            <summary>
            Does a binary search to find the first entry whose time is >= the time passed in.
            </summary>
            <param name="log">The log to search.</param>
            <param name="time">The time to search for.</param>
            <returns>The index of the entry, or -1 if it all entries are earlier than time.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.Events.GetEventsAfter(System.Diagnostics.EventLog,System.Int32)">
            <summary>
            Gets all of the events after a certain index.  Attempts to compensate for a moving log target.
            </summary>
            <param name="eventLog">The log to get from.</param>
            <param name="index">The index after which to start getting events.</param>
            <returns>An array of events from the log after the index..</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.Events.FindFirstGT(System.Diagnostics.EventLog,System.Int32)">
            <summary>
            Does a binary search to find the first entry whose index is > the index passed in.
            </summary>
            <param name="log">The log to search.</param>
            <param name="index">The index to search for.</param>
            <returns>The index of the entry, or -1 if it all entries are earlier than index.</returns>
        </member>
        <member name="P:ServerTestFramework.Utilities.Events.Servers">
            <summary>
            List of servers to check for events.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Utilities.Events.Source">
            <summary>
            Source of the events.  ie. 'xmatchfd'
            </summary>
        </member>
        <member name="P:ServerTestFramework.Utilities.Events.Log">
            <summary>
            Name of the Log to access.  Default 'Application'
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.EventMonitor">
            <summary>
            Monitors an eventlog for a list of events.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.EventMonitor.Poll">
            <summary>
            Checks eventChecker for an occurance of any event in eventStringList.
            If a logfile was provided, the event will be saved to that file.
            If another Poll on the object is already in progress, it returns immediately with null.
            </summary>
            <returns>A list of events that occured, or null if none (or failure trying to check).</returns>
        </member>
        <member name="T:ServerTestFramework.Utilities.SleepInfo">
            <summary>
            Create new SleepInfo objects to key off some user feedback
            sleep in the GUI/Console/Etc.
            
            E.G: 
            	new SleepInfo("Waiting for server", 15 * 1000);
            	
            	This will sleep for 15 seconds while providing some progress
            	feedback to the user.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.SleepInfo.#ctor(System.String,System.UInt32)">
            <summary>
            Create new sleep info object, this will auto-induce sleep.
            </summary>
            <param name="title">Title of the feedback widget</param>
            <param name="millis">Milliseconds to sleep</param>
        </member>
        <member name="T:ServerTestFramework.Utilities.ProgressInfo">
            <summary>
            ProgressInfo object provide fine grained control over
            the display of an elapsed task. 
            
            E.G.: 
            
            	ProgressInfo progress = new ProgressInfo("Creating objects", 100, 1);
            	
            	for(int i = 0; i &lt; 100; ++i)
            	{
            		progress.Step();
            	}
            	
            	If you are unsure of if your progress is finished you should call Finish()
            	to ensure that the progress handle is cleaned up internally.
            	
            	If you step up to or over the maximum value the progress info handle will 
            	be automatically cleaned up.
            	
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.ProgressInfo.#ctor(System.String,System.UInt32,System.UInt32)">
            <summary>
            Create a new progress info feedback object.
            </summary>
            <param name="title">Title as it should appear to the user</param>
            <param name="total">Total number of items before completion</param>
            <param name="step">Ammount to step per call to Step()</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.ProgressInfo.SetMessage(System.String)">
            <summary>
            Change the user visible message.
            </summary>
            <param name="message">Message as it should appear to the user</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.ProgressInfo.Step">
            <summary>
            Step one 'Step' unit. See the constructor.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.ProgressInfo.UnStep">
            <summary>
            Step back one 'Step' unit. See the constructor.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.ProgressInfo.SetValue(System.UInt32)">
            <summary>
            Explicitly change the internal value.
            </summary>
            <param name="newValue">New value of progress</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.ProgressInfo.Finish">
            <summary>
            Move Value to Maximum and cleanup the progress indicator.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.ProgressFeedbackHandle">
            <summary>
            Feedback Handles are used by the concrete class to implement 
            user visible feedback however the user interface sees fit.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.FeedbackHandleFactory">
            <summary>
            The abstract factory is set on the manager (also a factory) to hand
            out new progress feedback handles. These will be handed out to new instances
            of the feedback info classes.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:ServerTestFramework.Utilities.FeedbackManager" -->
        <member name="M:ServerTestFramework.Utilities.FeedbackManager.SetFactory(ServerTestFramework.Utilities.FeedbackHandleFactory)">
            <summary>
            Set the internal factory. This class acts as a proxy container
            for that factory.
            </summary>
            <param name="factory">Factory to hand out feedback handles</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.FeedbackManager.CreateProgressFeedback(System.String)">
            <summary>
            Create a new progress feedback handles for talking to the user interface.
            </summary>
            <param name="title">User-visible title of the feedback</param>
            <returns>New feedback handle</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.FeedbackManager.ReleaseProgressFeedback(ServerTestFramework.Utilities.ProgressFeedbackHandle)">
            <summary>
            Release a progress feedback handle to the user interface.
            </summary>
            <param name="handle">Handle that was created with CreateProgressFeedback() on the manager</param>
        </member>
        <member name="P:ServerTestFramework.Utilities.FeedbackManager.Instance">
            <summary>
            Access the global instance of the feedback manager.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.NullProgressFeedbackHandle">
            <summary>
            The default class in case you try to use the ProgressInfo without 
            setting a factory, which seems to happen for certain calls within STF 
            when running outside STFRunner.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.NullFeedbackHandleFactory">
            <summary>
            The null factory for handing out null feedback handles. Does nothing.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.FileReportDestination.OutputLimitInBytes">
            <summary> After this many bytes have been written to the file, an error will be written to the file and logging will be stopped.  -1 means no limit. </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.HttpClientException">
            <summary>
            An exception thrown by the HttpClient class.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClientException.#ctor">
            <summary>
            An exception thrown by the HttpClient class.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClientException.#ctor(System.String)">
            <summary>
            An exception thrown by the HttpClient class, with the given message.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.HttpClient">
            <summary>
            A simple generic http client.
            Unlike .NET's wrapper, this does not guarentee that a built request is actually valid, making it useful for negative cases.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.#ctor">
            <summary>
            Creates the socket, used by other constructors.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.#ctor(System.String,System.UInt16)">
            <summary>
            From a hostname/ip and port.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.#ctor(System.String)">
            <summary>
            From a url (only the hostname and port are used).
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.#ctor(System.Net.IPEndPoint)">
            <summary>
            Creates a client that points at the given IP endpoint.
            </summary>
            <param name="endpoint">The location to talk to.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.#ctor(System.Net.Sockets.Socket,System.Net.IPEndPoint)">
            <summary>
            Creates a client using the given socket and IP endpoint.
            </summary>
            <param name="socket">The socket to use for the connection.</param>
            <param name="endpoint">The location to talk to.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.SendRequest(ServerTestFramework.Utilities.HttpClient.Request)">
            <summary>
            Sends a request to the server.
            If we aren't connected, it will attempt to connect.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.GetResponse">
            <summary>
            Receives and parses a single response from the server.  This call will block if required.
            If the request times out or not enough data to form a response comes back, returns null.
            </summary>
            <param name="parseBody">Whether a body should be parsed from the response.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.CheckForResponse(System.Boolean)">
            <summary>
            Checks a data blob to see if it contains a valid response.
            </summary>
            <param name="readBody">
            If true, read the body as specified by the Content-Length header; if false, do not.
            </param>
            <returns>The response if a valid one is found, or null if one is not.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.Connect">
            <summary>
            Connect the socket to the remote server if it is not.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.SendRequestAsync(ServerTestFramework.Utilities.HttpClient.Request)">
            <summary>
            Sends a request asynchronously.
            </summary>
            <param name="request">The request to send.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.SendRequestAsync(System.Byte[])">
            <summary>
            Sends a request asynchronously.
            </summary>
            <param name="request">The request to send.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.GetResponseAsync(System.Boolean,ServerTestFramework.Utilities.HttpClient.AsyncResponseCallback)">
            <summary>
            Gets a response asynchrounously.
            </summary>
            <param name="readBody">If true, read the body of the response; if false, do not.</param>
            <param name="callback">Called when a response is received.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.SendReceiveAsync(ServerTestFramework.Utilities.HttpClient.Request,System.Boolean,ServerTestFramework.Utilities.HttpClient.AsyncResponseCallback)">
            <summary>
            Sends and receives asynchrounously.
            </summary>
            <param name="request">The request to send.</param>
            <param name="readBody">If true, read the body of the response; if false, do not.</param>
            <param name="callback">Called when a response is received.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.SendReceiveAsync(System.Byte[],System.Boolean,ServerTestFramework.Utilities.HttpClient.AsyncResponseCallback)">
            <summary>
            Sends and receives asynchrounously.
            </summary>
            <param name="request">The request to send.</param>
            <param name="readBody">If true, read the body of the response; if false, do not.</param>
            <param name="callback">Called when a response is received.</param>
        </member>
        <member name="F:ServerTestFramework.Utilities.HttpClient._connect_sync">
            <summary>
            Used to keep any other threads from calling BeginConnect while we are waiting to connect.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.ConnectAsync(ServerTestFramework.Utilities.HttpClient.AsyncState)">
            <summary>
            Begins the connect.
            </summary>
            <param name="state">The state to use.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.ConnectAsyncComplete(System.IAsyncResult)">
            <summary>
            Ends the connect.
            </summary>
            <param name="result">The result passed in.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.SendAsync(ServerTestFramework.Utilities.HttpClient.AsyncState)">
            <summary>
            Begins the send.
            </summary>
            <param name="state">The state to use.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.SendAsyncComplete(System.IAsyncResult)">
            <summary>
            Ends the send.
            </summary>
            <param name="result">The result passed in.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.ReceiveAsync(ServerTestFramework.Utilities.HttpClient.AsyncState)">
            <summary>
            Begins the receive.
            </summary>
            <param name="state">The state to use.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.ReceiveAsyncComplete(System.IAsyncResult)">
            <summary>
            Ends the receive.
            </summary>
            <param name="result">The result passed in.</param>
        </member>
        <member name="T:ServerTestFramework.Utilities.HttpClient.Request">
            <summary>
            Used to build a request to the server.
            Any field set to null will not be included in the request.
            Each field is seperated by \r\n.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.Request.GetHeaderString">
            <summary>
            Constructs the header string.
            </summary>
            <returns>The header string.</returns>
        </member>
        <member name="T:ServerTestFramework.Utilities.HttpClient.Response">
            <summary>
            Used to return the response from a server.
            If a field is null, it means there was no response for it.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.HttpClient.Response.Exception">
            <summary>An exception thrown when attempting to retrieve this response.</summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.HttpClient.AsyncResponseCallback">
            <summary>
            Called when a response is received asynchronously.
            </summary>
            <param name="response">The response that was received, or null if timed out.</param>
        </member>
        <member name="T:ServerTestFramework.Utilities.HttpClient.AsyncState">
            <summary>
            The state object passed between the async calls.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.IOCPSocket">
            <summary>
            Summary description for IOCP.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.IpHelper.GetBestInterface(System.Net.IPAddress)">
            <summary>
            Determines the interface out which packets will be routed, given a destination address.
            </summary>
            <param name="destAddr">The destination address to route.</param>
            <returns>The IPAddress of the interface chosen as the routing target.</returns>
        </member>
        <member name="T:ServerTestFramework.Utilities.IpHelperException">
            <summary>
            An exception that is thrown by the IpHelper class.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.LocalInterface">
            <summary>
            Helper methods for LocalInterface.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.LocalInterface.GetBestMatch(System.Net.IPEndPoint,System.Net.IPAddress@)">
            <summary>
            This is where we attempt to divine which of our IPs (many clients are multihomed) the server will attempt to communicate with us on.
            </summary>
            <param name="localIp"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.LocalInterface.GetBestMatchByConnecting(System.Net.IPEndPoint,System.Net.IPAddress@)">
            <summary>
            This is where we attempt to divine which of our IPs (many clients are multihomed) the server will attempt to communicate with us on.
            </summary>
            <param name="localIp"></param>
            <returns></returns>
        </member>
        <member name="T:ServerTestFramework.Utilities.MemoryReportDestination">
            <summary>
            Used to just keep track of loglines in memory, on a List of ReportLine objects.
            </summary>
        </member>
        <member name="T:MemoryMappedFile.MMF">
            <summary>
            Summary description for Class1.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.MultiEnumerator`1">
            <summary>
            An enumerator for enumerating over multiple enumerators simultaneously.
            </summary>
            <typeparam name="T">The type of values over which the base enumerators enumerate.</typeparam>
        </member>
        <member name="F:ServerTestFramework.Utilities.MultiEnumerator`1.Enumerables">
            <summary>Our Enumerables.</summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.MultiEnumerator`1.#ctor(System.Collections.Generic.IEnumerable{`0}[])">
            <summary>
            Creates a MultiEnumerator from the given IEnumerables.
            </summary>
            <param name="enumerables">The IEnumerables to enumerate.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.MultiEnumerator`1.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            Creates a MultiEnumerator from the given IEnumerables.
            </summary>
            <param name="enumerables">The IEnumerables to enumerate.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.MultiEnumerator`1.GetEnumerator">
            <summary>
            Creates an enumerator for this MultiEnumerator.
            </summary>
            <returns>An enumerator for this MultiEnumerator.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.MultiEnumerator`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Creates an enumerator for this MultiEnumerator.
            </summary>
            <returns>An enumerator for this MultiEnumerator.</returns>
        </member>
        <member name="T:ServerTestFramework.Utilities.MultiEnumerator`1.Entry">
            <summary>
            A single value from an enumerable.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Utilities.MultiEnumerator`1.Entry.Value">
            <summary>The value from the enumerable.</summary>
        </member>
        <member name="P:ServerTestFramework.Utilities.MultiEnumerator`1.Entry.Valid">
            <summary>If true, the Value is valid. If false, it is not.</summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.MultiEnumerator`1.Enumerator">
            <summary>
            The Enumerator for a MultiEnumerator.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.MultiEnumerator`1.Enumerator.Enumerators">
            <summary>The enumerators to enumerate over.</summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.MultiEnumerator`1.Enumerator.CurrentValue">
            <summary>The current value of the enumerator.</summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.MultiEnumerator`1.Enumerator.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            Creates an Enumerator for the given enumerables.
            </summary>
            <param name="enumerables">The enumerables to enumerate over.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.MultiEnumerator`1.Enumerator.Dispose">
            <summary>
            Disposes the enumerator.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.MultiEnumerator`1.Enumerator.MoveNext">
            <summary>
            Moves the enumerator to the next value.
            </summary>
            <returns>True if there is a value; false if the end of the list has been reached.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.MultiEnumerator`1.Enumerator.Reset">
            <summary>
            Resets the enumerator to its initial state.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Utilities.MultiEnumerator`1.Enumerator.Current">
            <summary>
            The current value of the enumerator.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Utilities.MultiEnumerator`1.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            The current value of the enumerator.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.ProcessWrapper">
            <summary>
            Provides a way to run a process and capture it's output.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.ProcessWrapper.Run(System.String)">
            <summary>
            Method to run the process with the specified arguments.
            </summary>
            <param name="arguments">The command line arguments to send to the process.</param>
            <returns>The return code from the process.</returns>
            <remarks>
            The following exceptions can be thrown by this method:
                   ArgumentNullException        If the arguments string is null.
                   ProcessException            If the timeout expired waiting for the process to finish.
                   
            These exceptions can be thrown from the Process.Start method:
                   InvalidOperationException
                   Win32Exception
                   ObjectDisposedException
            </remarks>
        </member>
        <member name="P:ServerTestFramework.Utilities.ProcessWrapper.ProcessName">
            <summary>
            Gets or sets the friendly name of the process.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Utilities.ProcessWrapper.ExecutablePath">
            <summary>
            Gets or sets the fully-qualified path to the process executable.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Utilities.ProcessWrapper.WorkingDirectory">
            <summary>
            Gets or sets the name of the working directory.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Utilities.ProcessWrapper.ExecutionTimeout">
            <summary>
            Gets or sets the number of seconds to allow the process to run before abandoning it. Default is 120.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Utilities.ProcessWrapper.Output">
            <summary>
            Gets the text written by the running process to the Standard Output stream.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Utilities.ProcessWrapper.Error">
            <summary>
            Gets the text written by the running process to the Standard Error stream.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.ProcessOutputReader">
            <summary>
            Thread procedure wrapper that allows data to be passed in and out of the procedure.
            Used to read process output.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.PuidPool">
            <summary>
            A static accessor class for the service defined pre-allocated puid pools.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.PuidPool.Type">
            <summary>
            Define your own puid pool enum here if you want to allocate a specific
            type of puid.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Core.Utilities.RandomEx">
            <summary>
            Summary description for Random.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.RandomEx.GenerateRandomString(System.Int32)">
            <summary>
            Generates a random ASCII string
            </summary>
            <param name="MaxLength">Length of string to generate</param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.RandomEx.GenerateRandomString(System.String,System.Int32)">
            <summary>
            Like GenerateRandomString, but with specified prefix.
            </summary>
            <param name="MaxLength"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.RandomEx.GenerateRandomNameString(System.Int32)">
            <summary>
            Unlike GenerateRandomString, there is no prefix with this version.
            </summary>
            <param name="MaxLength"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.RandomEx.GenerateRandomUTFString(System.Int32)">
            <summary>
            Generates a random UTF string
            </summary>
            <param name="MaxLength">Length of string to generate</param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.RandomEx.GenerateRandomUpperAlphaNumericString(System.Int32)">
            <summary>
            Generates a random string comprised of upper case characters and numbers.
            </summary>
            <param name="MaxLength"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.RandomEx.GenerateRandomUpperAlphaNumericString(System.Int32,System.Int32)">
            <summary>
            Generates a random string comprised of upper case characters and numbers.
            </summary>
            <param name="MaxLength"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.RandomEx.GenerateRandomAlphaNumericString(System.Int32,System.Int32)">
            <summary>
            Generates a random string comprised of lower and upper case characters and numbers.
            </summary>
            <param name="MaxLength"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.RandomEx.GenerateTotallyRandomString(System.Int32)">
            <summary>
            This will generate, like, a totally, like, random string, dude.
            
            The entire string is composed of chars in the 32..255 range
            </summary>
            <param name="MaxLength"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.RandomEx.GenerateNumberString(System.Int32)">
            <summary>
            This will generate number strings (0,1,2,....9).
            The entire string is composed of chars in the 48 - 57 range
            </summary>
            <param name="MaxLength"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.RandomEx.GenerateHexString(System.Int32)">
            <summary>
            This will generate hex strings (0,1,2,....e,f) with a prepended 0x
            </summary>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.RandomEx.GenerateIPString">
            <summary>
            Generates a random IP address in human readable dotted form.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.RandomEx.GenerateRandomBlob(System.Int32)">
            <summary>
            This will generate a random blob of bytes ranging from 0x0-0xff
            </summary>
            <param name="MaxLength"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.RandomEx.NextLog">
            <summary>
            Returns an Int32 that logarithmically tends towards 0
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.ReflectionUtils.GetDerivedTypes(System.Collections.Generic.List{System.Type},System.Reflection.Assembly,System.Type)">
            <summary>
            Uses the information passed in to build a list of all the types derived 
            from the baseType within a specific assembly
            </summary>
            <param name="list">The list to add the Types to.</param>
            <param name="asm">The assembly to search through.</param>
            <param name="baseType">The base type you want derived types from.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.ReflectionUtils.GetDerivedTypes(System.Reflection.Assembly,System.Type)">
            <summary>
            Finds all types derived from baseType within the specified assembly.
            </summary>
            <param name="asm">The assembly to search through.</param>
            <param name="baseType">The base type you want derived types from.</param>
            <returns>A list of the types.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.ReflectionUtils.GetDerivedTypes(System.Type)">
            <summary>
            Finds all typed derived from baseType in *ALL* assemblies
            </summary>
            <param name="baseType">The base type you want derived types from.</param>
            <returns>A list of the types.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.ReflectionUtils.GetDerivedTypes(System.Collections.Generic.List{System.Type},System.Type)">
            <summary>
            Finds all types derived from baseType and adds them to the specified List.
            </summary>
            <param name="list">The list to add the found types to.</param>
            <param name="baseType">The base type you want derived types for.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.ReflectionUtils.GetNestedTypesInInheritanceTree(System.Type,System.Reflection.BindingFlags)">
            <summary> This calls System.Type.GetNestedTypes() on the origType and all base classes and returns the combined result. </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.RemoteReportDestination">
            <summary>
            This is a simple pass-through destination so that the destination and/or the report 
            object don't have to marshal their own parameters.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Runner.StfXmlDoc.FileIdentifierXPath">
            <summary>Path of the file identifier element.</summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StfXmlDoc.GetFileIdentifier(System.Xml.XmlDocument,System.String)">
            <summary>Gets the named file identifier XmlNode from a document.</summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StfXmlDoc.TestForFileIdentifier(System.String)">
            <summary>
            Tests for the existence of a named file identifier element.
            </summary>
            <returns>True if the element exists; false otherwise.</returns>
        </member>
        <member name="M:ServerTestFramework.Runner.StfXmlDoc.ConditionalMerge(System.Xml.XmlDocument,System.String,System.String)">
            <summary>
            Conditionally merges the given document, based on whether it has been merged before or not.
            A known element is used to tag the merge.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.StringUtils.MakeDeliminatorSeparatedList(System.Collections.IEnumerable,System.String,ServerTestFramework.Utilities.StringUtils.MakeDeliminatorSeparatedListStringer)">
            <summary> Builds a string separated by a deliminator for a list of items.  Uses the specified delegate to convert each object to a string </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.StringUtils.MakeDeliminatorSeparatedList(System.Collections.IEnumerable,System.String)">
            <summary>
            Builds a string separated by a deliminator for a list of items.  Each element in the list must be usefully convertable to a string.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.StringUtils.MakeCommaSeparatedList(System.Collections.IEnumerable)">
            <summary>
            Builds a string separated by commas for a list of items.  Each element in the list must be usefully convertable to a string.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.SubStatics">
            <summary>
            Used to make class variables class-static, as in each inherited subclass has it's own static instance of the class 
            variable.  Normally, when a field is static in a base class, all subclasses share one instance of this field.  
            Sometimes it is important that each subclass of a particular base class each have its own instance.
            
            To use:
               - Pick a field in a base class for which you want a static instance per sub class.
               - Add a [SubStatic] attribute to that field.
               - Call SubStatics.Initialize(this) in the constructor for the base class.
               
               If the constructor for this field type requires parameters, adjust them on the SubStaticAttribute.
               Example:
                 [SubStatic(ParameterTypes=new Type[] {typeof(int)}, Parameters=new object[] {2})]
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.SubStatics.Initialize(System.Object)">
            <summary>
            Initialize should be called in the constructor of any class that has SubStaticAttributes so that they are 
            actually initialized or set into the appropriate fields.
            </summary>
            <param name="target">A reference to the class containing fields with SubStaticAttributes.  Usually the "this" 
            keyword.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.SubStatics.GetStatic(System.Type,System.String)">
            <summary>
            Use this function to get a SubStatic from a class without having to create an instance of the class.
            </summary>
            <param name="owner">The type of the class that contains the SubStatic.</param>
            <param name="fieldName">The field name of the SubStatic item you are interested in.</param>
            <returns>The SubStatic instance for the supplied field</returns>
        </member>
        <member name="T:ServerTestFramework.Utilities.SubStaticAttribute">
            <summary>
            Add this attribute to a field to make it SubStatic.
            ParameterTypes and Parameters are nescessary to use when constructor for the SubStatic field has parameters
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.SubStaticAttribute.ParameterTypes">
            <summary>
            Array of the parameter types for the constructor of the SubStatic type.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.SubStaticAttribute.Parameters">
            <summary>
            Array of the parameters for the constructor of the SubStatic type.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.TcpRelay">
            <summary>
            Listens for tcp connections on a port, and relays all that traffic to/from the destination.
            You must Dispose() this object when you are done with it, in order to kill the listener thread.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.TcpRelay.AllowOnlyLocalHost">
            <summary>
            Prevent connections from anyone but ourself.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.TcpRelay.Dispose">
            <summary>
            Shuts down the listener thread and connections.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.TcpRelay.ProcessData(ServerTestFramework.Utilities.TcpRelay.Connection,System.Boolean,System.Byte[],System.Byte[]@)">
            <summary>
            Override this in order to alter the data before it is relayed from one side to the other.
            </summary>
            <param name="isRemoteTarget">If true, then the data being processed here is passing from the local side to the remote side.</param>
        </member>
        <member name="P:ServerTestFramework.Utilities.TcpRelay.Destination">
            <summary>
            The remote host to which traffic is relayed.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Utilities.TcpRelay.RemotePort">
            <summary>
            The port on the remote host.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Utilities.TcpRelay.LocalListenPort">
            <summary>
            The local port on which we listen for new connections.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Utilities.TcpRelay.Verbose">
            <summary>
            Spew connections and relayed data.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.TcpRelay.Connection">
            <summary>
            Represents a connection on which we are relaying data
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.TextWriterReportBridge">
            <summary>
            Bridge between text writers and reporting system, used for rerouting console
            output into the report system
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.TimedQueue`1">
            <summary>
            A queue that will only return items placed in it after a certain amount of time has elapsed for that item.
            This queue is thread-safe.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.TimedQueue`1.MinimumReuseTime">
            <summary>
            A object placed in the queue will never be returned until at least this amount of time has passed.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.TimedQueue`1.MinimumQueueSize">
            <summary>
            Minumum number of objects to keep in the cache at any given time before any can be returned.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.TimedQueue`1.MaximumQueueSize">
            <summary>
            Maximum number of entries to allow into the queue, after which more more are ignored.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.TimedQueue`1.UseCachedReadyList">
            <summary>
            Pre-caches a list of ready objects so they can be popped without a lock.
            The downside is if settings are changed, any objects in the cache that do not comply with the new settings will be returned.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.TimedQueue`1.PopFront">
            <summary>
            Returns an object from the queue that is older than MinimumReuseTime.
            If no object is old enough, then null or 0 is returned.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.TimedQueue`1.PushBack(`0)">
            <summary>
            Adds an object to the queue.  Returns false if the queue was full.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Utilities.TimedQueue`1.Count">
            <summary>
            Returns the number of objects in the queue.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.Timing.QueryPerformanceCounter">
            <summary>
            Gets the current value of the hardware performance counter.
            </summary>
            <returns>The current value of the counter.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when the underlying call to QueryPerformanceCounter returns false.</exception>
        </member>
        <member name="M:ServerTestFramework.Utilities.Timing.QueryPerformanceFrequency">
            <summary>
            Gets the frequency at which the hardware performance counter ticks.
            </summary>
            <returns>The frequency at which the counter ticks.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when the underlying call to QueryPerformanceFrequency returns false.</exception>
        </member>
        <member name="M:ServerTestFramework.Utilities.Timing.CalculatePerformanceDelta(System.Int64,System.Int64)">
            <summary>
            Calculates the time between two values of the performance counter, in seconds.
            </summary>
            <param name="start">The sample of the performance counter taken first.</param>
            <param name="end">The sample of the performance counter taken second.</param>
            <returns>The time between the two samples of the counter, in seconds.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when the underlying call to QueryPerformanceFrequency returns false.</exception>
        </member>
        <member name="P:ServerTestFramework.Utilities.Timing.PerformanceFrequency">
            <summary>
            The frequency at which the hardware performance counter ticks.
            </summary>
            <remarks>
            Returns the cached value.  Call QueryPerformanceFrequency() to requery the value from the system.
            </remarks>
            <exception cref="T:System.NotSupportedException">Thrown when the underlying call to QueryPerformanceFrequency returns false.</exception>
        </member>
        <member name="T:ServerTestFramework.Utilities.StopWatch">
            <summary>
            Summary description for Timers.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Core.Utilities.ValueCheck">
            <summary>
            Contains a large number of helper function for validating a variety of condtions
            such as whether two objects are equivalent, greater than, or less than, or if a 
            result is one of any possible valid results.  
            
            All the methods throw ExpectedValueCheckExceptions when the checks fail.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.IsTrue(System.Boolean,System.String)">
            <summary>
            Tests whether the given condition is true
            </summary>
            <param name="cond">The condition to test</param>
            <param name="msg">A descriptive message of the check being performed</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.IsTrue(System.Boolean,System.String,System.Object[])">
            <summary>
            Tests whether the given condition is true
            </summary>
            <param name="cond">The condition to test</param>
            <param name="msg">A descriptive format string of the check being performed</param>
            <param name="args">Parameters to be passed to the format</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.IsFalse(System.Boolean,System.String)">
            <summary>
            Tests whether the given condition is false
            </summary>
            <param name="cond">The condition to test</param>
            <param name="msg">A descriptive message of the check being performed</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.IsFalse(System.Boolean,System.String,System.Object[])">
            <summary>
            Tests whether the given condition is false
            </summary>
            <param name="cond">The condition to test</param>
            <param name="msg">A descriptive format string of the check being performed</param>
            <param name="args">Parameters to be passed to the format</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.Test``2(System.String,``0,``1)">
            <summary>
            Tests whether two objects of the same type are equivalent.
            </summary>
            <param name="msg">A descriptive message of the check being performed</param>
            <param name="exp">The expected value</param>
            <param name="got">The actual value</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.Test(System.String,System.Byte[],System.Byte[])">
            <summary>
            Tests whether every byte in the two arrays is equivalent.
            </summary>
            <param name="msg">A dsecriptive message fo the check being performed</param>
            <param name="expected">The array of expected values</param>
            <param name="got">The array of actual values</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.Test(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.TimeSpan)">
            <summary>
            Verifies that the actual time is approximately equal to the expected 
            time within a given tolerance.
            </summary>
            <param name="msg">A descriptive message of the check being performed</param>
            <param name="expected">The expected time</param>
            <param name="got">The actual time</param>
            <param name="tolerance">The tolerance for a match</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.Test(System.String,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.TimeSpan)">
            <summary>
            Verifies that the actual timespan is approximately equal to the expected 
            time within a given tolerance.
            </summary>
            <param name="msg">A descriptive message of the check being performed</param>
            <param name="expected">The expected time</param>
            <param name="got">The actual time</param>
            <param name="tolerance">The tolerance for a match</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.TestDifferent``2(System.String,``0,``1)">
            <summary>
            Verifies that two objects of the same type are different.
            </summary>
            <param name="msg">A descriptive message of the check being performed</param>
            <param name="exp">The value that should not be</param>
            <param name="got">The actual value</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.TestDifferent(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.TimeSpan)">
            <summary> Verifies that the actual time is approximately not equal to the expected time within a given tolerance. </summary>
            <param name="msg">A descriptive message of the check being performed</param>
            <param name="expected">The expected time</param>
            <param name="got">The actual time</param>
            <param name="tolerance">The tolerance for a match</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.TestAll(System.String,System.Array,System.Array)">
            <summary>
            Checks that the arrays each array is the same length and that each 
            item in the arrays is the same.
            </summary>
            <param name="name">The name of the item that's being tested</param>
            <param name="expected">The array of expected values</param>
            <param name="got">The array of actual values</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.TestNotAll(System.String,System.Array,System.Array)">
            <summary> Checks that each array does not contain exactly the same set of elements (that they are different lengths or that at least one element is different). </summary>
            <param name="name">The name of the item that's being tested</param>
            <param name="expected">The array of expected values</param>
            <param name="got">The array of actual values</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.TestSubset(System.String,System.Array,System.UInt32,System.Array,System.UInt32,System.UInt32)">
            <summary>
            Checks that the arrays each array is the same length and that each 
            item in the arrays is the same.
            </summary>
            <param name="name">The name of the item that's being tested</param>
            <param name="expected">The array of expected values</param>
            <param name="got">The array of actual values</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.TestAny``1(System.String,``0[],``0)">
            <summary>
            Tests whether or not the actual value matches any of the expected values
            </summary>
            <typeparam name="T">The type of value to check</typeparam>
            <param name="msg">A descriptive message of the check being performed</param>
            <param name="exp">The array of possible expected values</param>
            <param name="got">The actual result value</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.TestAllUnordered``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},ServerTestFramework.Core.Utilities.ValueCheck.TestAllUnorderedComparison{``0},ServerTestFramework.Core.Utilities.ValueCheck.TestAllUnorderedStringer{``0})">
            <summary> Validates that two unordered sets contain the same set of elements using a specific comparison function and a specific function to convert the object to a string. </summary>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.TestAllUnordered``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},ServerTestFramework.Core.Utilities.ValueCheck.TestAllUnorderedComparison{``0})">
            <summary> Validates that two unordered sets contain the same set of elements using a specific comparison function. </summary>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.TestAllUnordered``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary> Validates that two unordered sets contain the same set of elements. </summary>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.TestZero``1(System.String,``0)">
            <summary>
            Tests if the value is equal to it's default value.  For most numeric types, this
            is 0.  For reference types this is null.  For other value types it is default(Type)
            </summary>
            <typeparam name="T">The type of the value to check.  default(T) is used to compare</typeparam>
            <param name="msg">A descriptive message of the check being performed</param>
            <param name="value">The value to check</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.TestNonZero``1(System.String,``0)">
            <summary>
            Tests if the value is not equal to it's default value.  For most numeric types, this
            is 0.  For reference types this is null.  For other value types it is default(Type)
            </summary>
            <typeparam name="T">The type of the value to check.  default(T) is used to compare</typeparam>
            <param name="msg">A descriptive message of the check being performed</param>
            <param name="value">The value to check</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.ContainsKey``2(System.String,System.Collections.Generic.Dictionary{``0,``1},``0)">
            <summary>
            Tests if a given dictionary contains a key within it. Useful for cases where an 
            item missing from a dictionary means we need to halt the test case.
            </summary>
            <typeparam name="T1">First type of the dictionary.</typeparam>
            <typeparam name="T2">Second type of the dictionary</typeparam>
            <param name="msg">A descriptive message of the check being performed</param>
            <param name="dict">The dictionary object.</param>
            <param name="key">Key to validate.</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.TestGreaterThan(System.String,System.IComparable,System.Object)">
            <summary>
            Tests whether the actual value is greater than the expected value
            </summary>
            <param name="msg">A descriptive message of the check being performed</param>
            <param name="expected">The expected value to check against</param>
            <param name="got">The actual value</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.TestLessThan(System.String,System.IComparable,System.Object)">
            <summary>
            Tests whether the actual value is less than the expected value
            </summary>
            <param name="msg">A descriptive message of the check being performed</param>
            <param name="expected">The expected value to check against</param>
            <param name="got">The actual value</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.TestNotNull(System.String,System.Object)">
            <summary>
            Tests whether the provided object is non-null
            </summary>
            <param name="name">The name of the object to test</param>
            <param name="o">The object to test</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.TestNull(System.String,System.Object)">
            <summary>
            Tests whether the provided object is null
            </summary>
            <param name="name">The name of the object to test</param>
            <param name="o">The object to test</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.TestBits(System.String,System.UInt32,System.UInt32)">
            <summary>
            Validates that all of the expected bits are set in the actual value
            </summary>
            <param name="msg">A descriptive message of the check being performed</param>
            <param name="expected">The set of expected bits</param>
            <param name="got">The actual result bits</param>
            <remarks>
            It would be nice if this could be expanded to other numeric types, 
            but there's no easy way to provide a comprehensive suite of methods
            for all the different numeric types.
            </remarks>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlConfigFile.#ctor(System.String)">
            <summary>
            Constructor reads in the config file and determines the environment
            to run on based on the "environ" tag
            </summary>
            <param name="Filename">name of the config file</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlConfigFile.ReadNode(System.String)">
            <summary>
            Method used to read the needed data
            </summary>
            <param name="NodeName">name of the config file</param>
            <returns>The node's inner text</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlConfigFile._Parse(System.String)">
            <summary>
            Searches the given string for following keywords and substitutes them:
             o %MACHINE% -- the user's machine
             o %USERNAME% -- the user's name
             o %USERDOMAIN% -- the user's domain
            </summary>
            <param name="InnerText"></param>
            <returns></returns>
        </member>
        <member name="P:ServerTestFramework.Utilities.XmlConfigFile.Item(System.String)">
            <summary>
            Accessor method used to read the needed data, it automatically takes care of
            reading from the right environment.  It's used like this:
            
            XmlConfigFile Config = new Config ("MyConfigFile.xml");
            string SomeSetting = Config["/Auth/Username"];
            
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.SetChildNodeValue(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Sets a the value of a child node of a node.  If it does not exist it is created.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.SetChildNodeValue(System.Xml.XmlNode,System.String,System.Int32)">
            <summary>
            Sets a the value of a child node of a node.  If it does not exist it is created.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.SetChildNodeValue(System.Xml.XmlNode,System.String,System.Single)">
            <summary>
            Sets a the value of a child node of a node.  If it does not exist it is created.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.SetChildNodeValue(System.Xml.XmlNode,System.String,System.Boolean)">
            <summary>
            Sets a the value of a child node of a node.  If it does not exist it is created.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.SetAttributeValue(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Sets an attribute value on a node.  If it does not exist it is created.
            </summary>
            <param name="node">The node to set on.</param>
            <param name="name">The name of the attribute to set.</param>
            <param name="val">The value to set.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.SetAttributeValue(System.Xml.XmlNode,System.String,System.Int32)">
            <summary>
            Sets an attribute value on a node.  If it does not exist it is created.
            </summary>
            <param name="node">The node to set on.</param>
            <param name="name">The name of the attribute to set.</param>
            <param name="val">The value to set.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.SetAttributeValue(System.Xml.XmlNode,System.String,System.Single)">
            <summary>
            Sets an attribute value on a node.  If it does not exist it is created.
            </summary>
            <param name="node">The node to set on.</param>
            <param name="name">The name of the attribute to set.</param>
            <param name="val">The value to set.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.SetAttributeValue(System.Xml.XmlNode,System.String,System.Boolean)">
            <summary>
            Sets an attribute value on a node.  If it does not exist it is created.
            </summary>
            <param name="node">The node to set on.</param>
            <param name="name">The name of the attribute to set.</param>
            <param name="val">The value to set.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.GetChildNodeValue(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Gets a the value of a child node of a node, or a default value if it does not exist.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.GetChildNodeValue(System.Xml.XmlNode,System.String,System.Int32)">
            <summary>
            Gets a the value of a child node of a node, or a default value if it does not exist.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.GetChildNodeValue(System.Xml.XmlNode,System.String,System.Int64)">
            <summary>
            Gets a the value of a child node of a node, or a default value if it does not exist.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.GetChildNodeValue(System.Xml.XmlNode,System.String,System.Single)">
            <summary>
            Gets a the value of a child node of a node, or a default value if it does not exist.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.GetChildNodeValue(System.Xml.XmlNode,System.String,System.Boolean)">
            <summary>
            Gets a the value of a child node of a node, or a default value if it does not exist.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.GetChildNodeValue(System.Xml.XmlNode,System.String,System.Boolean@)">
            <summary>
            Gets the value of a child node of a node.
            Returns true if the value was found, false if it was not.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.GetAttributeValue(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Gets an attribute value on a node.  If it does not exist the default is returned.
            </summary>
            <param name="node">The node to get from.</param>
            <param name="name">The name of the attribute to get.</param>
            <param name="defaultValue">The default value to return if not found.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.GetAttributeValue(System.Xml.XmlNode,System.String,System.Int32)">
            <summary>
            Gets an attribute value on a node.  If it does not exist the default is returned.
            </summary>
            <param name="node">The node to get from.</param>
            <param name="name">The name of the attribute to get.</param>
            <param name="defaultValue">The default value to return if not found.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.GetAttributeValue(System.Xml.XmlNode,System.String,System.Single)">
            <summary>
            Gets an attribute value on a node.  If it does not exist the default is returned.
            </summary>
            <param name="node">The node to get from.</param>
            <param name="name">The name of the attribute to get.</param>
            <param name="defaultValue">The default value to return if not found.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.GetAttributeValue(System.Xml.XmlNode,System.String,System.Boolean)">
            <summary>
            Gets an attribute value on a node.  If it does not exist the default is returned.
            </summary>
            <param name="node">The node to get from.</param>
            <param name="name">The name of the attribute to get.</param>
            <param name="defaultValue">The default value to return if not found.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.GetGroupNode(System.Xml.XmlNode,System.String)">
            <summary>
            Retrieves the child node of a unique group node, or creates it if it does not exist.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.GetGroupNode(System.Xml.XmlDocument,System.String)">
            <summary>
            Retrieves the child node of a unique group node, or creates it if it does not exist.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Plugins.PluginHandler.loadedItems">
            <summary>
            These are the items that have been loaded and setup already
            </summary>
        </member>
        <member name="F:ServerTestFramework.Plugins.PluginHandler.deferredItems">
            <summary>
            These are the items that were found but haven't been loaded yet
            </summary>
        </member>
        <member name="F:ServerTestFramework.Plugins.PluginHandler.pluginParams">
            <summary>
            Command line parameters that are targetted at any plugins;
            </summary>
        </member>
        <member name="F:ServerTestFramework.Plugins.PluginHandler.loadedModuleNames">
            <summary>
            Names of all modules that have already been loaded
            </summary>
        </member>
        <member name="F:ServerTestFramework.Plugins.PluginHandler.loadedSuites">
            <summary>The TestNode roots that we have been notified of.</summary>
        </member>
        <member name="M:ServerTestFramework.Plugins.PluginHandler.NotifyModuleLoading(System.String)">
            <summary>
            Called before a new module is loaded that might contain plugins or suites.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Plugins.PluginHandler.NotifySuiteLoaded(ServerTestFramework.TestNode)">
            <summary>
            Called after a suite is loaded.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Plugins.PluginHandler.NotifySuiteUnloading(ServerTestFramework.TestNode)">
            <summary>
            Called when a suite is being unloaded to tell the plugin to remove all references to it.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Plugins.PluginHandler.UnloadAllPlugins">
            <summary>
            Called whenever the gui is wanting to close.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Plugins.PluginHandler.LoadPluginFiles">
            <summary>
            Loads all configured plugins.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Plugins.PluginHandler.LoadAllPluginsInAssembly(System.Reflection.Assembly)">
            <summary>
            Loads all plugins and other pluggable item types in an assembly
            </summary>
            <param name="asm">The assembly to load the types from</param>
            <returns>True if any plugin types were loaded, false otherwise</returns>
        </member>
        <member name="M:ServerTestFramework.Plugins.PluginHandler.QueuePlugin(System.Type,System.Reflection.Assembly)">
            <summary>
            Creates a PluggableItem from a type (if not already loaded) and adds
            it to the list of items to process.
            </summary>
            <param name="pluginType">The type of item to try to create with</param>
            <param name="asm">The assembly that contains the type</param>
            <returns>The instance of the pluggable item </returns>
        </member>
        <member name="M:ServerTestFramework.Plugins.PluginHandler.DebugMessage(System.String)">
            <summary>
            Outputs debug spec during plugin loading.  Only occurs if 
            DEBUG_PLUGIN_LOADING is enabled.
            </summary>
            <param name="s">The debug string to output</param>
        </member>
        <member name="M:ServerTestFramework.Plugins.PluginHandler.GetDefaultPluginsList">
            <summary>
            Override to generate a list of default plugins that should be loaded.
            Only called when no list is supplied by the settings document.
            </summary>
            <returns>A list of plugin file names.</returns>
        </member>
        <member name="M:ServerTestFramework.Plugins.PluginHandler.NewPluggableItem">
            <summary>
            Override to make your own PluggableItem.
            </summary>
            <returns>A new PluggableItem.</returns>
        </member>
        <member name="M:ServerTestFramework.Plugins.PluginHandler.PreProcessPluggable(ServerTestFramework.Plugins.PluginHandler.PluggableItem)">
            <summary>
            Override to do some work on the PluggableItem before the base handler.
            </summary>
            <param name="item">The PluggableItem to process.</param>
        </member>
        <member name="M:ServerTestFramework.Plugins.PluginHandler.PostSetupProcessPluggable(ServerTestFramework.Plugins.PluginHandler.PluggableItem)">
            <summary>
            Override to do some work on the PluggableItem after the IPluginSetup function is handled.
            </summary>
            <param name="item">The PluggableItem to process.</param>
        </member>
        <member name="M:ServerTestFramework.Plugins.PluginHandler.PostProcessPluggable(ServerTestFramework.Plugins.PluginHandler.PluggableItem)">
            <summary>
            Override to do some work on the PluggableItem after the base handler.
            </summary>
            <param name="item">The PluggableItem to process.</param>
        </member>
        <member name="T:ServerTestFramework.Plugins.PluginHandler.PluggableItem">
            <summary>
            A wrapper around a pluggable item that allows you to find out 
            information about what type of item it is
            </summary>
        </member>
        <member name="F:ServerTestFramework.Plugins.PluginHandler.PluggableItem.AsIPluginSetup">
            <summary>
            The item respreseted by this pluggable object as an IPluginSetup
            </summary>
        </member>
        <member name="F:ServerTestFramework.Plugins.PluginHandler.PluggableItem.AsIPluginExtension">
            <summary>
            The item represented by this pluggable object as an IPluginExtension
            </summary>
        </member>
        <member name="M:ServerTestFramework.Plugins.PluginHandler.PluggableItem.AsIPluginExt``1">
            <summary>
            Returns the pluggable item as a PluginExtension of the requested
            type.  This is required to be a method because the the parameter
            is generic and there is no way to make a generic property
            </summary>
            <typeparam name="PluginType">The type of plugin that this extension extends</typeparam>
            <returns>The item respreseted by this pluggable object as an IPluginExtension</returns>
        </member>
        <member name="F:ServerTestFramework.Plugins.PluginHandler.PluggableItem.AsIPluginModuleLoadNotification">
            <summary>
            The item respreseted by this pluggable object as an IPluginModuleLoadNotification
            </summary>
        </member>
        <member name="F:ServerTestFramework.Plugins.PluginHandler.PluggableItem.DidInit">
            <summary>
            Indicates if IPluginSetup.Initialize has been called yet
            </summary>
        </member>
        <member name="P:ServerTestFramework.Plugins.PluginHandler.PluggableItem.Item">
            <summary>
            Represents the instance of the actual item.  An instance of a 
            class that derives from something we're interested in like 
            Plugin, IPluginPreferences, etc. (defined in Plugins.cs)
            </summary>
        </member>
        <member name="T:ServerTestFramework.Plugins.IPlugin">
            <summary>
            Implement this to add new components or functionality.
            Only one instance of the class will ever be instantiated.  Ever.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Plugins.IPluginExtension">
            <summary>
            Do not implement this, this is used to easily determine if a class 
            extends from the generic IPluginExtension interface.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Plugins.IPluginExtension`1">
            <summary>
            Implement this to extend an existing plugin.  The derived class will 
            only be instantiated if one of the the plugins it extends is loaded.
            Only one instance of a derived class will ever be instantiated (even if
            a class extends multiple plugins).
            </summary>
        </member>
        <member name="M:ServerTestFramework.Plugins.IPluginExtension`1.PluginLoaded(`0)">
            <summary>
            This will be called to inform the extension of the existance of a
            plugin that it extends.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Plugins.IPluginSetup">
            <summary>
            Implement this if you require setup and cleanup steps for your plugin or
            extension, including the ability to save/restore global settings.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Plugins.IPluginSetup.Initialize(System.Xml.XmlNode,System.String[])">
            <summary>
            This will be called after the gui loads, as soon as the class is 
            instantiated. Settings can be loaded from the provided xml object.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Plugins.IPluginSetup.Shutdown(System.Xml.XmlNode)">
            <summary>
            This will be called when the gui is about to close down.
            Settings can be stored in the provided xml object.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Plugins.IPluginModuleLoadNotification">
            <summary>
            Implement this if you require notifications when a module is about to be
            loaded or after a new suite is loaded from a module.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Plugins.IPluginModuleLoadNotification.ModuleLoading(System.String)">
            <summary>
            This is called when a module(which may contain suites or plugins) is
            about to be loaded.  When a plugin is initially created, and already
            loaded modules will also be passed.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Plugins.IPluginModuleLoadNotification.SuiteLoaded(ServerTestFramework.TestNode)">
            <summary>
            This is called after a new suite is loaded from a module.  You will
            be passed the already-constructed tree.  When a plugin is initially
            created, and already-loaded suites will also be passed.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Plugins.IPluginModuleLoadNotification.SuiteUnloading(ServerTestFramework.TestNode)">
            <summary> This is called when a suite is being unloaded. </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\libd\AMD64\stftoolhelp.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>STFLiveTools</name>
    </assembly>
    <members>
        <member name="M:ServerTestFramework.STFTools.ToolsTestBase.CreateUser">
            <summary>
            Create a user.  Returns a UODB.Database.UserInfo, defined in UtilityClasses.cs
            </summary>
            <returns>A UserInfo, defined in UODB.cs</returns>
        </member>
        <member name="M:ServerTestFramework.STFTools.ToolsTestBase.OfferRemove(System.UInt64)">
            <summary>
            Removes an offer from the system, reversing LiveOffer
            </summary>
            <param name="OfferId">OfferId of the offer to be removed</param>
        </member>
        <member name="M:ServerTestFramework.STFTools.ToolsTestBase.ContentRemove(System.UInt32,System.String,System.Int32)">
            <summary>
            Removes Content from a site.  Does not report failure content is missing.
            </summary>
            <param name="titleId"></param>
            <param name="contentId"></param>
            <param name="site"></param>
        </member>
        <member name="M:ServerTestFramework.STFTools.ToolsTestBase.ContentVerify(System.UInt32,System.String,System.Int32)">
            <summary>
            Checks to see if a content package is uploaded to a site
            </summary>
            <param name="titleId"></param>
            <param name="contentId"></param>
            <param name="site"></param>
            <returns>True if package is present</returns>
        </member>
        <member name="M:ServerTestFramework.STFTools.ToolsTestBase.ContentGetPath(System.UInt32,System.String,System.Int32)">
            <summary>
            Returns the expected path to the package stored in the content download directory
            </summary>
            <param name="titleId"></param>
            <param name="contentId"></param>
            <param name="site"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFTools.ToolsTestBase.ContentGetDownloadShare(System.Int32)">
            <summary>
            Returns a UNC path to the share where content downloads are stored.  These are
            referred to by site.
            </summary>
            <remarks>
            This code is directly lifted from the LiveContent tool's DownloadServerList.cs
            </remarks>
            <param name="siteNum">The ID of the content download site.</param>
        </member>
        <member name="M:ServerTestFramework.STFTools.ToolsTestBase.StatsRemove(System.UInt32)">
            <summary>
            Removes all leaderboards for the Title
            </summary>
            <param name="TitleID">unique TitleID in hex 0xXXXXXXXX</param>
            <returns>output of the LiveStats tool</returns>
        </member>
        <member name="M:ServerTestFramework.STFTools.ToolsTestBase.StatsDeployXbox1Stats(System.UInt32,System.Boolean)">
            <summary>
            Deploys Xbox1 Leaderboards
            </summary>
            <param name="TitleID">unique TitleID in hex 0xXXXXXXXX</param>
            <param name="force">determines whether to use /force</param>
            <returns>output of the LiveStats tool</returns>
        </member>
        <member name="M:ServerTestFramework.STFTools.ToolsTestBase.StatsDeployXbox360Stats(System.UInt32,System.Boolean)">
            <summary>
            Deploys Xbox 360 Leaderboards
            </summary>
            <param name="TitleID">unique TitleID in hex 0xXXXXXXXX</param>
            <param name="force">determines whether to use /force</param>
            <returns>output of the LiveStats tool</returns>
        </member>
        <member name="M:ServerTestFramework.STFTools.ToolsTestBase.StatsDeployWebOnlyLeaderboard(System.UInt32)">
            <summary>
            Deploy Web Only Leaderboards
            </summary>
            <param name="TitleID">unique TitleID in hex 0xXXXXXXXX</param>
            <returns>output of the LiveStats tool</returns>
        </member>
        <member name="M:ServerTestFramework.STFTools.ToolsTestBase.StatsMoveLeaderboard(System.UInt32,System.Int32,System.String,System.String)">
            <summary>
            Move a single or ALL leaderboards from one server to another
            </summary>
            <param name="TitleID">unique TitleID in hex 0xXXXXXXXX</param>
            <param name="LeaderboardId">unique ID for a leaderboard</param>
            <param name="SourceServer">name of source server of the leaderboard</param>
            <param name="DestServer">name of the destination server</param>
            <returns>output of the LiveStats tool</returns>
        </member>
        <member name="M:ServerTestFramework.STFTools.ToolsTestBase.StatsReportConfiguration(System.UInt32)">
            <summary>
            Returns the Leaderboard Configuration of a Title
            </summary>
            <param name="TitleID">unique TitleID in hex 0xXXXXXXXX</param>
            <returns>array of strings, each string is a leaderboard information</returns>
        </member>
        <member name="M:ServerTestFramework.STFTools.ToolsTestBase.StatsResetLeaderboard(System.UInt32,System.Int32)">
            <summary>
            Resets the Leaderboard data for a specific Leaderboard
            </summary>
            <param name="TitleID">unique TitleID in hex 0xXXXXXXXX</param>
            <param name="LeaderboardId">unique ID of the leaderboard</param>
            <returns>output of the LiveStats tool</returns>
        </member>
        <member name="M:ServerTestFramework.STFTools.ToolsTestBase.StatsResetAllLeaderboards(System.UInt32)">
            <summary>
            Resets the leaderboard data for all leaderboards of a title
            </summary>
            <param name="TitleID">unique TitleID in hex 0xXXXXXXXX</param>
            <returns>output of the LiveStats tool</returns>
        </member>
        <member name="M:ServerTestFramework.STFTools.ToolsTestBase.StatsReloadFrontDoor">
            <summary>
            Reloads the stats front door
            </summary>
            <returns>output of the LiveStats tool</returns>
        </member>
        <member name="M:ServerTestFramework.STFTools.ToolsTestBase.StatsReloadWebStats">
            <summary>
            Reloads the stats web front door
            </summary>
            <returns>output of the LiveStats tool</returns>
        </member>
        <member name="M:ServerTestFramework.STFTools.ToolsTestBase.MatchClearAllDB(System.UInt32)">
            <summary>
            Used for clearing out the XMatch Databases for a specific titleID
            Currently p_match_title_delete in npdb only works for xbox 1 titles, when that is 
            fixed to also do 360 titles, we can use that instead of duplicating that effort in
            ClearMatchConfiguration.  
            </summary>
            <param name="titleID">The TitleID to have it's Tables and SP's removed from XMatch DB</param>
        </member>
        <member name="M:ServerTestFramework.STFTools.ToolsTestBase.SystemCheckRunSystemCheck(System.String,System.String,System.String,System.String)">
            <summary>
            Runs systemcheck against an inputfile and outputs the result (xml) file
            </summary>
            <param name="ConfigFile">inputfile with 1 healthcheck url per line</param>
            <param name="OutputFile">output file with the returns from the health urls</param>
            <param name="Threads">number of threads to run checks in parallel (must be positive)</param>
            <param name="Timeout">time before the systemcheck tool gives up</param>
            <returns>output of the sytemcheck tool</returns>
        </member>
        <member name="M:ServerTestFramework.STFTools.ToolsTestBase.SystemCheckRunSystemCheck(System.String,System.String)">
            <summary>
            Runs systemcheck against an inputfile and outputs the result (xml) file with default threads and timeout
            </summary>
            <param name="ConfigFile">inputfile with 1 healthcheck url per line</param>
            <param name="OutputFile">output file with the returns from the health urls</param>
            <returns>output of the sytemcheck tool</returns>
        </member>
        <member name="M:ServerTestFramework.STFTools.ToolsTestBase.SystemCheckReloadFrontDoors">
            <summary>
            Reloads all frontdoors
            </summary>
            <returns>output of the sytemcheck tool</returns>
        </member>
        <member name="M:ServerTestFramework.STFTools.ToolsTestBase.SystemCheckReloadFrontDoors(System.String)">
            <summary>
            Reloads all frontdoors (times out if no response after Timeout)
            </summary>
            <param name="Timeout">time before the systemcheck tool gives up</param>
            <returns>output of the sytemcheck tool</returns>
        </member>
        <member name="T:ConfigFileSerializer">
            <summary>
            Utility class for serializing and deserializing various configuration files.
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFTools.ConfigFiles.LiveTitleConfig.FromXml(System.String)">
            <summary>
            Creates a LiveTitleConfig object from an LTC file
            </summary>
            <param name="ltcFile">Path and name of the LTC file to de-serialize.</param>
            <returns>A LiveTitleConfig object that represents the file.</returns>
        </member>
        <member name="M:ServerTestFramework.STFTools.ConfigFiles.LiveTitleConfig.FromXml(System.IO.TextReader)">
            <summary>
            Deserializes LTC XML into a LiveTitleConfig object.
            </summary>
            <param name="xml">A TextReader object that holds the LTC XML.</param>
            <returns>A LiveTitleConfig object that represents the LTC data</returns>
        </member>
        <member name="M:ServerTestFramework.STFTools.ConfigFiles.LiveTitleConfig.ToXml(System.String)">
            <summary>
            Serailizes the LiveTitleConfig object to an LTC file
            </summary>
            <param name="ltcFile">Path and name of the target LTC file</param>
        </member>
        <member name="T:ServerTestFramework.STFTools.ConfigFiles.XboxConfiguration">
            <summary>
            Root class for deserializing an Xbox 1 configuration file (.XBOX).
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFTools.ConfigFiles.XboxConfiguration.FromXml(System.String)">
            <summary>
            Static method to deserialize an XBOX file into a hierarchy of objects.
            </summary>
            <param name="xboxFile">The name of the XBOX file to deserialize.</param>
            <returns>An XboxConfiguration object that describes the XBOX file.</returns>
        </member>
        <member name="M:ServerTestFramework.STFTools.ConfigFiles.XboxConfiguration.FromXml(System.IO.TextReader)">
            <summary>
            Static method to deserialize an XBOX XML stream into a hierarchy of objects.
            </summary>
            <param name="xboxFile">A TextReader object that contains the raw XML of an XBOX file.</param>
            <returns>An XboxConfiguration object that describes the XBOX file.</returns>
        </member>
        <member name="M:ServerTestFramework.STFTools.ConfigFiles.XboxConfiguration.ToXml(System.String)">
            <summary>
            Serializes the object hierarchy out to an XBOX file.
            </summary>
            <param name="xboxFile">The name of the XBOX file to create.</param>
        </member>
        <member name="T:ServerTestFramework.STFTools.ConfigFiles.XmlOfferFile">
            <summary>
            Wrapper for common operations on offer files.
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFTools.ConfigFiles.XmlOfferFile.#ctor(System.String,ServerTestFramework.STFTools.ConfigFiles.XmlOfferFile.platform)">
            <summary>
            Create a representation of an xml offer file which can be accessed through
            XPATH calls.
            </summary>
            <param name="filename">File to open.</param>
            <param name="consoleType">Console type for this xml offer file.  Necessary because
            they use different namespaces.</param>
        </member>
        <member name="M:ServerTestFramework.STFTools.ConfigFiles.XmlOfferFile.getContentId">
            <summary>
            Returns the contentID of this offer.
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFTools.ConfigFiles.XmlOfferFile.MultipleQuery(System.String)">
            <summary>
            Returns a nodelist of nodes that match this xpath query.
            </summary>
            <param name="xpath">XPATH pointing to nodes to select.</param>
            <returns>XMLNodeList containing all nodes matched, or null if there are none.</returns>
        </member>
        <member name="M:ServerTestFramework.STFTools.ConfigFiles.XmlOfferFile.ArbitraryXpath(System.String)">
            <summary>
            Returns the first XmlNode that matches the given XPATH.
            </summary>
            <param name="xpath">XPATH pointing to the node to select.</param>
            <returns>XmlNode of selected node, or null if there is no match.</returns>
        </member>
        <member name="M:ServerTestFramework.STFTools.ConfigFiles.XmlOfferFile.RelativeXpath(System.Xml.XmlNode,System.String)">
            <summary>
            Takes a node already selected from this offer file, and selects from it again.  Required
            here because it needs the namespace manager.
            </summary>
            <param name="node">Node to select from.</param>
            <param name="xpath">XPATH to use relative to this node.</param>
            <returns>New XmlNode, relative from the given one.  Returns null if there is no match.</returns>
        </member>
        <member name="T:ServerTestFramework.STFTools.ConfigFiles.XmlOfferMap">
            <summary>
            Represents a mapping from an XML Offer file to the database entry it should
            correspond to.
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFTools.ConfigFiles.XmlOfferMap.#ctor(System.String)">
            <summary>
            Generate an XmlOfferMap, which will contain a parsed version of the map file.
            </summary>
            <param name="filename">Path to the offer map file.</param>
        </member>
        <member name="M:ServerTestFramework.STFTools.ConfigFiles.XmlOfferMap.ParseMultipleRowsInfo(System.IO.StreamReader,ServerTestFramework.STFTools.ConfigFiles.TableMapping,System.String)">
            <summary>
            Parse the MANYROWS and ONEROW keywords.
            The MANYROWS keyword at the end of a table definition means that there will be
            multiple nodes that match the XPATH.  Each matching node corresponds to a separate
            row in the table.  A ONEROW keyword indicates that each field will be searched once,
            and matched against only one row in the database.
            </summary>
            <param name="offerMapStream">The offer map file</param>
            <param name="test">The table mapping to create</param>
            <param name="keyword">An optional keyword</param>
        </member>
        <member name="M:ServerTestFramework.STFTools.ConfigFiles.XmlOfferMap.CreateQueries(ServerTestFramework.STFTools.ConfigFiles.XmlOfferFile)">
            <summary>
            Combine the stored data of a map with the offer file to create a SELECT query.  This query should
            isolate a row in the database, and is expected to return precisely one entry.
            </summary>
            <param name="offer">The offer file to which this map will be applied.</param>
            <returns>An ArrayList of strings, each one SQL query that should return one row.</returns>
        </member>
        <member name="M:ServerTestFramework.STFTools.ConfigFiles.XmlOfferMap.AddMultipleQueryStrings(ServerTestFramework.STFTools.ConfigFiles.XmlOfferFile,ServerTestFramework.STFTools.ConfigFiles.TableMapping,System.Collections.ArrayList)">
            <summary>
            Given a table described by a MANYROWS keyword, add multiple SQL queries, one for each
            corresponding tag found in the offer file.  Add each of them to queriesToReturn.
            </summary>
            <param name="offer">Offer this map is appliped to.</param>
            <param name="test">Table being checked.</param>
            <param name="queriesToReturn">A list of queries that will have strings added.</param>
        </member>
        <member name="M:ServerTestFramework.STFTools.ConfigFiles.XmlOfferMap.AddSingleQueryString(ServerTestFramework.STFTools.ConfigFiles.XmlOfferFile,ServerTestFramework.STFTools.ConfigFiles.TableMapping,System.Collections.ArrayList)">
            <summary>
            Given a ONEROW table description, add the SQL query string that would be used to verify
            this row is present in the DB.  Add the string to queriesToReturn.
            </summary>
            <param name="offer">Offer this map is appliped to.</param>
            <param name="test">Table being checked.</param>
            <param name="queriesToReturn">A list of queries that will have one string added.</param>
        </member>
        <member name="M:ServerTestFramework.STFTools.ConfigFiles.XmlOfferMap.GenerateOneWhereClause(ServerTestFramework.STFTools.ConfigFiles.XmlOfferFile,ServerTestFramework.STFTools.ConfigFiles.EntryMapping,System.Xml.XmlNode)">
            <summary>
            Used when generating an SQL select query.  This iterates through all the fields that should
            be checked.  For each one it pulls the appropriate data out of the offer file, using the XPATH for
            that field.  It returns a boolean test to determine if the data in the db matches that of the offer file.
            </summary>
            <param name="offer">Offer this map is appliped to.</param>
            <param name="dataMap">A single instance of mapping one XPATH in the offer file to one field in the DB.</param>
            <param name="multipleQueryNode">If the table was defined using MANYROWS, the XPATH is taken relative to this node.</param>
            <returns>A string to be added to a where clause.  e.g. "bi_offer_id = 0xfffe07d100000001"</returns>
        </member>
        <member name="T:ServerTestFramework.STFTools.ConfigFiles.TableMapping">
            <summary>
            A mapping of the fields of one table with the XPATHs that locate those fields in an offer file.
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFTools.ConfigFiles.XboxLeaderboardConfiguration">
            <summary>
            Root class for the Xbox1 Leaderboard Configuration (XSC) file hierarchy.
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFTools.ConfigFiles.XboxLeaderboardConfiguration.FromXml(System.String)">
            <summary>
            Static method to deserialize an XSC file into a class hierarchy
            </summary>
            <param name="xscFile">Full path and filename of the XSC file to deserialize</param>
            <returns>Returns an XboxLeaderboardConfiguration object defining the XSC file</returns>
            <example>
            XboxLeaderboardConfiguration xsc = XboxLeaderboardConfiguration.FromXml("FFFFAB08.XSC");
            </example>
        </member>
        <member name="M:ServerTestFramework.STFTools.ConfigFiles.XboxLeaderboardConfiguration.FromXml(System.IO.TextReader)">
            <summary>
            Static method to deserialize raw XSC xml into a class hierarchy
            </summary>
            <param name="xscXml">A TextReader-derived object that contains the XSC XML to deserialize</param>
            <returns>Returns an XboxLeaderboardConfiguration object defining the XSC XML</returns>
            <example>
            StreamReader reader = new StreamReader("FFFFAB08.XSC");
            XboxLeaderboardConfiguration xsc = XboxLeaderboardConfiguration.FromXml(reader);
            </example>
        </member>
        <member name="M:ServerTestFramework.STFTools.ConfigFiles.XboxLeaderboardConfiguration.ToXml(System.String)">
            <summary>
            Serializes Xbox1 leaderboard configuration data into an XSC file
            </summary>
            <param name="xscFile">Full path and filename to which the XML data should be serialized</param>
        </member>
        <member name="P:ServerTestFramework.STFTools.ConfigFiles.XboxLeaderboardConfiguration.TitleId">
            <summary>
            The value ot the TitleID attribute of the Title element
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.ConfigFiles.XboxLeaderboardConfiguration.UnitLeaderboardDecayConstant">
            <summary>
            The value of the UnitLeaderboardDecayConstant attribute of the Title element
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.ConfigFiles.XboxLeaderboardConfiguration.Version">
            <summary>
            The value of the Version attribute of the Title element
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.ConfigFiles.XboxLeaderboardConfiguration.DefaultLocale">
            <summary>
            The value of the Default_Locale attribute of the Title element
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.ConfigFiles.XboxLeaderboardConfiguration.LeaderboardContainers">
            <summary>
            Collection of XscLeaderboardContainer objects that represent the three possible types of leaderboards in the file
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFTools.ConfigFiles.XscLeaderboardContainerCollection">
            <summary>
            A collection of Leaderboard Containers in an XSC file.
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFTools.ConfigFiles.XscLeaderboardContainerCollection.Add(ServerTestFramework.STFTools.ConfigFiles.XscLeaderboardContainer)">
            <summary>
            Adds an existing XscLeaderboardContainer object to the collection
            </summary>
            <param name="obj">An existing XscLeaderboardContainer object</param>
            <returns>The added object</returns>
        </member>
        <member name="M:ServerTestFramework.STFTools.ConfigFiles.XscLeaderboardContainerCollection.Add">
            <summary>
            Creates a new XscLeaderboardContainer object and adds it to the collection
            </summary>
            <returns>The newly created object</returns>
        </member>
        <member name="M:ServerTestFramework.STFTools.ConfigFiles.XscLeaderboardContainerCollection.Insert(System.Int32,ServerTestFramework.STFTools.ConfigFiles.XscLeaderboardContainer)">
            <summary>
            Inserts an existing XscLeaderboardContainer object into the collection
            </summary>
            <param name="index">0-based index at which the XscLeaderboardContainer object should be inserted</param>
            <param name="obj">The XscLeaderboardContainer object to insert</param>
        </member>
        <member name="M:ServerTestFramework.STFTools.ConfigFiles.XscLeaderboardContainerCollection.Remove(ServerTestFramework.STFTools.ConfigFiles.XscLeaderboardContainer)">
            <summary>
            Removes the first occurance of the specified XscLeaderboardContainer object from the collection
            </summary>
            <param name="obj">The XscLeaderboardContainer object to remove</param>
        </member>
        <member name="M:ServerTestFramework.STFTools.XLASTFactory.AddStatsViewColumn(ServerTestFramework.STFTools.ConfigFiles.XboxLiveSubmissionProject,System.UInt32,System.String,System.Boolean)">
            <summary>
            Adds a Context field to a StatsView (leaderboard)
            </summary>
            <param name="xlast">The xlast file object.</param>
            <param name="viewId">The ID of the StatView to which the column will be added.</param>
            <param name="contextId">The ID of the existing Context to use.</param>
            <param name="hidden">Flag indicating whether this column is hidden.</param>
        </member>
        <member name="M:ServerTestFramework.STFTools.XLASTFactory.AddStatsViewColumn(ServerTestFramework.STFTools.ConfigFiles.XboxLiveSubmissionProject,System.UInt32,System.String,ServerTestFramework.STFTools.ConfigFiles.type,System.Boolean,System.Boolean)">
            <summary>
            Adds a Property field to a StatsView (leaderboard)
            </summary>
            <param name="xlast">The xlast file object.</param>
            <param name="viewId">The ID of the StatView to which the Property will be added.</param>
            <param name="propertyId">The ID of the existing Property to use.</param>
            <param name="aggregationType">The aggregation type to use for this column.</param>
            <param name="hidden">A flag indicating whether this column is hidden.</param>
            <param name="rank">A flag indicating whether this column is used for ranking.</param>
        </member>
        <member name="M:ServerTestFramework.STFTools.XLASTFactory.AddStatsViews(ServerTestFramework.STFTools.ConfigFiles.XboxLiveSubmissionProject,System.UInt32)">
            <summary>
            Adds a number of StatsViews to an XLAST file.
            </summary>
            <param name="xlast">An XLAST file object.</param>
            <param name="count">The number of StatsViews to add to the XLAST file object.</param>
        </member>
        <member name="M:ServerTestFramework.STFTools.XLASTFactory.AddStatsViewColumns(ServerTestFramework.STFTools.ConfigFiles.XboxLiveSubmissionProject,System.UInt32,System.Int32)">
            <summary>
            Adds a number of columns to a specified StatsView.
            </summary>
            <param name="xlast">An XLAST file object.</param>
            <param name="viewId">The ID os the StatsView to which the columns will be added.</param>
            <param name="count">The number of columns to add.</param>
        </member>
        <member name="T:ServerTestFramework.STFTools.ClientToolBase">
            <summary>
            Base class for all client tool wrappers
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFTools.ClientToolBase.GetToolServer">
            <summary>
            Gets the first server for the toolsmgmtsrv interface
            </summary>
            <returns>Server name</returns>
        </member>
        <member name="M:ServerTestFramework.STFTools.ClientToolBase.AcceptPsExecEula">
            <summary>
            Sets the flag in the registry saying that we accepted the PsExec license agreement.
            Without this, the first execution pops up an Accept/Decline UI that currently can't
            be overridden on the command line.
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFTools.ClientToolBase.Run(System.String)">
            <summary>
            Executes the tool with the given arguments
            </summary>
            <param name="args">Arguments for the tool</param>
            <returns>Process exit code</returns>
        </member>
        <member name="M:ServerTestFramework.STFTools.ClientToolBase.RunThrowOnFailure``1(System.String,System.String)">
            <summary>
            Executes the tool with the given arguments and throws an exception if the
            exit code is non-zero.
            </summary>
            <typeparam name="T">Type of exception to throw</typeparam>
            <param name="args">Arguments for the tool</param>
            <param name="message">Error message</param>
        </member>
        <member name="P:ServerTestFramework.STFTools.ClientToolBase.StandardError">
            <summary>
            Standard Error for the completed process
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.ClientToolBase.StandardOutput">
            <summary>
            Standard Output for the completed process
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFTools.EmulatorUtil">
            <summary>
            Utility class for emulator.
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFTools.LiveContent">
            <summary>
            Utility class for running the LiveContent tool.
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveContent.#ctor(System.String)">
            <summary>
            Define a non-default location for the LiveContent exe.  This location includes the exe in the path.
            </summary>
            <param name="liveContentPath">
            Path to the executable, including the exe filename.
            </param>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveContent.setUpdateFlag(ServerTestFramework.STFTools.LiveContent.updateType)">
            <summary>
            Sets the update flag for a future run of LiveContent.
            </summary>
            <param name="type">
            Possible choices for the /update: option.
            </param>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveContent.SetPackageFile(System.String,System.UInt32)">
            <summary>
            Sets the package and associated titleID for a future run of LiveContent.
            </summary>
            <param name="path">
            File path which will be passed in the /package: argument.
            </param>
            <param name="_titleId">
            OfferId which will be passed in the /titleid: argument.
            </param>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveContent.SetOfferFile(System.String,System.UInt64)">
            <summary>
            Sets the optional first offer and its associated offerID
            for a future run of LiveContent.
            </summary>
            <param name="path">
            File path which will be passed in the /offerfile: argument.
            </param>
            <param name="_offerId">
            OfferId which will be passed in the /offerid: argument.
            </param>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveContent.SetOfferFile2(System.String,System.UInt64)">
            <summary>
            Sets the optional second offer and its associated offerID
            for a future run of LiveContent.
            </summary>
            <param name="path">
            File path which will be passed in the /offerfile2: argument.
            </param>
            <param name="_offerId">
            OfferId which will be passed in the /offerid2: argument.
            </param>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveContent.setTargetFlag(ServerTestFramework.STFTools.LiveContent.dbType)">
            <summary>
            Sets the _targetFlag string from the given dbType.
            </summary>
            <param name="selectedDB">
            Possible choices for the /targetDB: option.
            </param>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveContent.CombineFlagsForContent">
            <summary>
            Returns a combined string of all the flags used when propping 
            content(and not autoupdates).  If in the future flags are added, they should be 
            added to this string as well.
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveContent.Deploy360Package">
            <summary>
            Expects SetPackageFile to be set.  Optionally expects SetOfferFile, SetOfferFile2, 
            IsDefaultOffer, etc. to be called to set other parameters.  WARNING:Content files
            require an offer file, and should not be run without them.
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveContent.DeployXbox1Content">
            <summary>
            Expects SetPackageFile to be set.  Optionally expects SetOfferFile and
            IsDefaultOffer to be called to set other parameters.
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveContent.DeployXbox1AutoUpdate">
            <summary>
            Deploys an xbox1 AutoUpdate.  This expects SetPackageFile to be called beforehand.
            Arguments it does not use will be dropped.
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveContent.MakeAutoUpdateFull(System.UInt32,System.UInt32,System.UInt32,ServerTestFramework.STFTools.LiveContent.platformType)">
            <summary>
            Converts a selective update into a global autoupdate.
            </summary>
            <param name="_titleId">
            The titleid to apply this change.
            </param>
            <param name="oldVersion">
            The version number that the selective update begins.
            </param>
            <param name="newVersion">
            The version number to which the selective update will update.
            </param>
            <param name="platform">
            The platform this update applies.
            </param>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveContent.Hex8(System.UInt32)">
            <summary>
            Makes a zero paded hex value.  ie 00000101
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveContent.RunWithOnlyStringArguments(System.String)">
            <summary>
            Runs LiveContent with a string of command-line arguments and nothing else.
            </summary>
            <param name="arguments">
            String of command line arguments.
            </param>
        </member>
        <member name="P:ServerTestFramework.STFTools.LiveContent.Output">
            <summary>
            Gets the output after the LiveContent process has been run.
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.LiveContent.IsDefaultOffer">
            <summary>
            Gets or sets the /_isDefaultOffer flag for a future run of LiveContent.
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.LiveContent.UseDefaultOffer">
            <summary>
            Gets or sets the /usedefaultoffer flag for a future run of LiveContent
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.LiveContent.Sites">
            <summary>
            Gets or sets the site flag for a future run of LiveContent.
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.LiveContent.StartDateFlag">
            <summary>
            Gets or sets the start date flag for a future run of LiveContent.
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.LiveContent.EndDateFlag">
            <summary>
            Gets or sets the end date flag for a future run of LiveContent.
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.LiveContent.Shares">
            <summary>
            Gets or sets the _shares flag for a future run of LiveContent.
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.LiveContent.Xrls">
            <summary>
            Gets or sets the _sites flag for a future run of LiveContent.
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFTools.LiveMatch">
            <summary>
            Utility class for running the LiveMatch tool.
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveMatch.DeployMatchServer(System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Deploys the matchmaking database(s) for the current title.
            </summary>
            <param name="dropTable">
            Flag indicating whether to drop the current match table.
            </param>
            <param name="scriptSQL">
            Flag indicating whether to write the SQL commands to a local file instead of to the databases.
            The name of the file can be specified using the ScriptFile property.
            </param>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveMatch.MatchMigrationBucket(System.UInt32,System.Int32,System.String)">
            <summary>
            Used for different migrations for an interface bucket
            </summary>
            <param name="titleID">TitleId used for migration</param>
            <param name="migrationState">
            0 = StartMigrationForBucket
            1 = MigrationStatusForBucket
            2 = ExpediteMigrationForBucket
            3 = EndMigrationForBucket
            </param>
            <param name="destServerName">Destination server, only required for StartMigrationForBucket</param>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveMatch.MatchMigrationTitle(System.UInt32,System.Int32,System.String,System.String)">
            <summary>
            Used for different title migrations
            </summary>
            <param name="titleID">TitleId used for migration</param>
            <param name="migrationState">
            0 = StartMigrationForTitle
            1 = MigrationStatusForTitle
            2 = ExpediteMigrationForTitle
            3 = EndMigrationForTitle
            </param>
            <param name="destServerName">Destination server, only required for StartMigrationForBucket</param>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveMatch.MatchAddRRBucket(System.UInt32,System.String)">
            <summary>
            Used for adding a RR bucket to an existing type/mode
            </summary>
            <param name="titleID">TitleId used for migration</param>
            <param name="serverName">The server that is going to be added for round robin</param>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveMatch.MatchDrainTopRRBucket(System.UInt32)">
            <summary>
            Used to begin draining the top round robined bucket.  Draining buckets no longer add
            sessions to them.
            </summary>
            <param name="titleID">TitleId used for migration</param>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveMatch.MatchRemoveTopRRBucket(System.UInt32,System.Boolean)">
            <summary>
            Used to begin draining the top round robined bucket.  Draining buckets no longer add
            sessions to them.
            </summary>
            <param name="titleID">TitleId used for migration</param>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveMatch.AddMatchServer(System.UInt32,System.String)">
            <summary>
            Adds a new matchmaking server.
            </summary>
            <param name="serverName">
            Name of the server to which matchmaking tables and queries will be added.
            </param>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveMatch.DeleteMatchServer(System.UInt32,System.String)">
            <summary>
            Deletes an existing matchmaking server.
            </summary>
            <param name="serverName">
            Name of the server to remove from the match titles table.
            </param>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveMatch.RunLiveMatch(System.String)">
            <summary>
            Allows direct passing of Arguments on command line to LiveMatch, primarily used for negative testing.
            </summary>
            <param name="arguments">String to pass to LiveMatch</param>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveMatch.RunLiveMatchDefault(System.UInt32)">
            <summary>
            Static method for running Live Match with the default settings of titleid and the droptable option.
            </summary>
            <param name="titleID">The TitleID to which you want to run LiveMatch for</param>
        </member>
        <member name="P:ServerTestFramework.STFTools.LiveMatch.ScriptFile">
            <summary>
            Gets or sets the name of the SQL file generated when using the /script option.
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.LiveMatch.TypeID">
            <summary>
            Gets or sets the typeid
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.LiveMatch.ModeID">
            <summary>
            Gets or sets the modeid
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.LiveMatch.RRID">
            <summary>
            Gets or sets the rrid
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.LiveMatch.NoReloadFrontDoors">
            <summary>
            Turn on or off the /noreload option.  Defaults at false so that it does not use switch.
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFTools.LiveOffer">
            <summary>
            Utility class for running the LiveOffer tool.
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveOffer.DbTypeToString(ServerTestFramework.STFTools.LiveOffer.dbType)">
            <summary>
            Returns the appropriate string for the given dbType.
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveOffer.ReloadFrontDoors">
            <summary>
            Reloads the front doors.  Offers are cached and will not be seen unless the 
            this occurs--however, LiveOffer will by default reload the front doors after
            every prop.
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveOffer.Validate360Offer(System.String)">
            <summary>
            Checks if the given XML file follows the format given in the file LiveOffer.xsd
            </summary>
            <param name="filePath">File to be validated.</param>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveOffer.ValidateXboxOffer(System.String)">
            <summary>
            Checks if the given XML file follows the format given in the file Xbox1Offer.xsd
            </summary>
            <param name="filePath">File to be validated.</param>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveOffer.CheckIfOfferIsPropped(System.UInt64)">
            <summary>
            Checks if a offer is propped.
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveOffer.Prop360Offer(System.String,System.UInt32,ServerTestFramework.STFTools.LiveOffer.dbType,System.Boolean)">
            <summary>
            Places an Xbox360 offer file on the Live service.  This populates a large number of tables 
            that begin with uodb..t_offer.
            </summary>
            <param name="filePath">Path to the offer file.</param>
            <param name="titleId">Titleid the offer is related to.</param>
            <param name="targetDBs">Flag determining which DBs should be updated</param>
            <param name="overwriteDMPSettings">If they exist, clobber existing DMP settings.</param>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveOffer.PropXboxOffer(System.String,System.UInt32,ServerTestFramework.STFTools.LiveOffer.dbType,System.Boolean)">
            <summary>
            Places an Xbox1 offer file on the Live service.  This populates a distinctly different set of tables
            than in the XBox360 case.
            </summary>
            <param name="filePath">Path to the offer file.</param>
            <param name="titleId">Titleid the offer is related to.</param>
            <param name="targetDBs">Flag determining which DBs should be updated</param>
            <param name="overwriteDMPSettings">If they exist, clobber existing DMP settings.</param>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveOffer.NukeOffer(System.UInt64)">
            <summary>
            Removes an offer from the Live service.  Requires an offerid.  This is only available on the
            debug build of LiveOffer.
            </summary>
            <param name="offerid">The offerId to remove.</param>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveOffer.NukeAllOffers(System.UInt32)">
            <summary>
            Removes all offers from the Live service under a certain title.  Requires a titleid.  This
            is only available on the debug build of LiveOffer.
            </summary>
            <param name="titleid">The titleId whose offers will be removed.</param>
        </member>
        <member name="T:ServerTestFramework.STFTools.LiveStats">
            <summary>
            Utility class for running the LiveStats tool.
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveStats.DeployXbox1Leaderboard(System.UInt32,System.Boolean)">
            <summary>
            Deploys the leaderboards for an Xbox1 title.
            </summary>
            <param name="force">Flag indicating whether or not to include the /force argument.</param>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveStats.DeployXbox360Leaderboard(System.UInt32,System.Boolean)">
            <summary>
            Deploys the leaderboards for an Xbox 360 title.
            </summary>
            <param name="force">Flag indicating whether or not to include the /force argument.</param>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveStats.DeployWebOnlyLeaderboard(System.UInt32)">
            <summary>
            Deletes the leaderboards from the Web DB and re-deploys them.
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveStats.MoveLeaderboard(System.UInt32,System.Int32,System.String,System.String)">
            <summary>
            Moves one or all leaderboards from one server to another.
            </summary>
            <param name="leaderboardId">
            ID of the leaderboard to move. Use the ALL_LEADERBOARDS constant to move all leaderboards.
            </param>
            <param name="sourceServer">
            The name of the server on which the leaderboard currently resides.
            </param>
            <param name="destServer">
            The name of the server to which the leaderboard will be moved.
            </param>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveStats.ReportConfiguration(System.UInt32)">
            <summary>
            Reports the leaderboard configuration for a title.
            </summary>
            <param name="leaderboardId">
            The ID of the leaderboard to report.
            </param>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveStats.ResetLeaderboard(System.UInt32,System.Int32)">
            <summary>
            Resets the data for a single leaderboard.
            </summary>
            <param name="leaderboardId">
            The ID of the leaderboard to reset.
            </param>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveStats.ResetAllLeaderboards(System.UInt32)">
            <summary>
            Resets the data for all leaderboards in the current title.
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveStats.DeleteLeaderboards(System.UInt32)">
            <summary>
            Deletes all stats data and leaderboard definitions for the current title.
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveStats.ReloadFrontDoor">
            <summary>
            Reloads the Stats front door.
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveStats.ReloadWebStats">
            <summary>
            Reloads the Web stats front door.
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveStats.CleanClip(System.UInt32,System.Int32)">
            <summary>
            Sets up a clean clips CRON job for the specified Xbox360 title id
            </summary>
            <param name="titleId">Title ID</param>
            <param name="hoursFromNow">The number of hours to wait before running the CRON job.</param>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveStats.CleanXboxClip(System.UInt32,System.Int32)">
            <summary>
            Sets up a clean clips CRON job for the specified Xbox1 title id
            </summary>
            <param name="titleId">Title ID</param>
            <param name="hoursFromNow">The number of hours to wait before running the CRON job.</param>
        </member>
        <member name="P:ServerTestFramework.STFTools.LiveStats.LiveStatsPath">
            <summary>
            Gets or sets the fully-qualified name of the LiveStats executable.
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.LiveStats.WorkingDirectory">
            <summary>
            Gets or sets the working directory for LiveStats
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.LiveStats.Timeout">
            <summary>
            Gets or sets the number of milliseconds to allow LiveStats to run before killing the process.
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.LiveStats.Output">
            <summary>
            Gets the output text from the most recent run of LiveStats.
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFTools.LiveTitle">
            <summary>
            Utility class for running the LiveTitle tool.
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveTitle.CreateXbox360LTCFile">
            <summary>
            Runs LiveTitle to create an LTC file for an Xbox 360 title.
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveTitle.CreateXbox360LTCFile(System.UInt32,System.UInt32)">
            <summary>
            Runs LiveTitle with a title id and a disc id to create an LTC file for an Xbox 360 title.
            </summary>
            <param name="titleId">Title ID to specify with the /titleid parameter. Optional.</param>
            <param name="discId">Disc ID to specify with the /discid parameter. Optional.</param>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveTitle.DeployXbox360Title(System.UInt32,System.Boolean,System.Boolean,System.UInt32)">
            <summary>
            DeployXbox360Title will run LiveTitle with the /deploy command-line argument.  
            If the
            LTCPath property does not point to an existing LTC file, then 
            CreateXbox360LTCFile
            will be called first to generate the LTC file before trying to deploy.
            </summary>
            <param name="titleId">Title ID</param>
            <param name="deployImages">
            Flag indicating whether the /images argument should appear on the command 
            line.
            It is highly recommended that this be set to True for initial deployments.
            </param>
            <param name="contentUpdate">
            Flag indicating whether the /contentupdate argument should be added to the 
            command line.
            </param>
            <param name="version">
            Initial version of the title.
            </param>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveTitle.DeployXbox360Title(System.UInt32,System.Boolean,System.Boolean)">
            <summary>
            Deploys an Xbox 360 title without the optional /version parameter.
            </summary>
            <param name="titleId">Title ID</param>
            <param name="deployImages">Images parameter flag</param>
            <param name="contentUpdate">Content Update parameter flag</param>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveTitle.DeployXbox360Title(System.UInt32)">
            <summary>
            Deploys an Xbox 360 title with images.
            </summary>
            <param name="titleId">Title ID</param>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveTitle.CreateXbox1LTCFile">
            <summary>
            Creates an LTC file for an Xbox1 title.
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveTitle.DeployXbox1Title(System.UInt32)">
            <summary>
            Deploys an Xbox1 title, creating the default LTC file, if needed.
            </summary>
            <param name="titleId">Title ID</param>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveTitle.DeployMarketplaceOnlyTitle(System.UInt32,System.Boolean)">
            <summary>
            Deploys an Xbox 360 Marketplace-only title.
            </summary>
            <param name="titleId">Title Id</param>
            <param name="images">
            Flag indicating whether the /images parameter should appear on the command line.
            </param>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveTitle.LockTitle">
            <summary>
            Locks the game configuration for an Xbox 360 title.
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveTitle.ReportTitleVersion(System.UInt32)">
            <summary>
            Reports the existing versions for the specified title id.
            </summary>
            <param name="titleId">The title id</param>
            <returns>An array of version strings in the form "base,update,beta"</returns>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveTitle.AddTitleBaseVersion(System.UInt32,System.UInt32,xonline.common.config.ConsoleTypeEnum)">
            <summary>
            Adds a base version entry to UODB for the specified title.
            </summary>
            <param name="titleId">Title ID</param>
            <param name="baseVersion">New base version to add for this title</param>
            <param name="consoleType">The console type. May be Xbox1, Xenon, or PC</param>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveTitle.DeleteTitleBaseVersion(System.UInt32,System.UInt32,xonline.common.config.ConsoleTypeEnum)">
            <summary>
            Deletes a base version entry from UODB for the specified title.
            </summary>
            <param name="titleId">Title ID</param>
            <param name="baseVersion">Base version to remove</param>
            <param name="consoleType">The console type. May be Xbox1, Xenon, or PC</param>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveTitle.AddBaseVersion(System.UInt32,System.UInt32,xonline.common.config.ConsoleTypeEnum)">
            <summary>
            Adds a base version entry to UODB for the specified title.
            </summary>
            <param name="titleId">Title ID</param>
            <param name="baseVersion">New base version to add for this title</param>
            <param name="consoleType">The console type. May be Xbox1, Xenon, or PC</param>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveTitle.DeleteBaseVersion(System.UInt32,System.UInt32,xonline.common.config.ConsoleTypeEnum)">
            <summary>
            Deletes a base version entry from UODB for the specified title.
            </summary>
            <param name="titleId">Title ID</param>
            <param name="baseVersion">Base version to remove</param>
            <param name="consoleType">The console type. May be Xbox1, Xenon, or PC</param>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveTitle.PropTitle(System.UInt32,System.UInt32,ServerTestFramework.LiveService.Auth.AuthContext.ClientTypes)">
            <summary>
            Props a title.  If no path is specified it will be copied from titlevault.
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveTitle.CheckIfTitleIsPropped(System.UInt32)">
            <summary>
            Checks if a title is propped.
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveTitle.CheckAndPropTitle(System.UInt32,System.UInt32,ServerTestFramework.LiveService.Auth.AuthContext.ClientTypes,System.String)">
            <summary>
            Checks if a title is propped, and if not, props it.  If no path is specified it will be copied from stressnet titlevault.
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFTools.LiveTitle.ValidateTitleData(System.UInt32)">
            <summary>
            Performs basic validation that the title deployment succeeded.
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.LiveTitle.LiveTitlePath">
            <summary>
            Gets or sets the fully-qualified name of the LiveTitle executable.
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.LiveTitle.WorkingDirectory">
            <summary>
            Gets or sets the working directory for LiveTitle
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.LiveTitle.LTCPath">
            <summary>
            Gets or sets the fully-qualified name of the LTC file used during title 
            deployment.
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.LiveTitle.XlastPath">
            <summary>
            Xbox 360 LTC file creation and title deployment.
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.LiveTitle.MarketplacePath">
            <summary>
            Gets or sets the fully-qualified name of the Marketplace file used to deploy a Marketplace-only title.
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.LiveTitle.XSCPath">
            <summary>
            Gets or sets the fully-qualified name of the XSC file used during Xbox1 LTC 
            file creation and title deployment.
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.LiveTitle.XBOXPath">
            <summary>
            Gets or sets the fully-qualified name of the XBOX file used during Xbox1 LTC 
            file creation and title deployment.
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.LiveTitle.XMSPath">
            <summary>
            Gets or sets the fully-qualified name of the XMS file used during Xbox1 title 
            deployment (optional).
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.LiveTitle.LeaderboardServer">
            <summary>
            Gets or sets the leaderboard server used during LTC file creation.
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.LiveTitle.MatchServers">
            <summary>
            Gets or sets the semi-colon delimited list of match servers used during LTC 
            file creation.
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.LiveTitle.Output">
            <summary>
            Gets the output text from the most recent run of LiveTitle.
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.LiveTitle.ExecutionTimeout">
            <summary>
            Exposes the Execution Timeout value for the underlying Process wrapper.
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFTools.MsgTool">
            <summary>
            Utility class for running MsgTool.
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFTools.MsgTool.AddString(System.UInt32,System.String,ServerTestFramework.STFTools.StringLanguage)">
            <summary>
            Adds a string to the table.
            </summary>
            <param name="stringID">ID of the string to be added</param>
            <param name="text">The text of the string in the appropriate language.</param>
            <param name="lang">The language of this instance of the message.</param>
            <remarks> Command Line: 
            MSGTOOL /addstring /id:[id] /text:[text] /lang:[language]<br/> 
            You must add a string to the table before you send it via SystemMessage, UserMessage,
            or TitleMessage since these take the ID of the string.<br/>
            Msgtool generates the following for this command line:
            D:\msgtool /addstring /id:50001 /text:"This is a test." /lang:1
            <code>
            Adding string - id:50001,lang:1,text:This is a test.
            String Service address 10.20.1.5:11020
            String Service address 10.20.1.5:11020
            
            
            String added successfully.
            
            </code></remarks>
        </member>
        <member name="M:ServerTestFramework.STFTools.MsgTool.SendSystemMsg(System.UInt32,System.String,System.Boolean)">
            <summary>
            Sends a string to all users when they sign in their language or the default.
            Has the recommended option for sending to Xbox 1.
            </summary>
            <param name="stringID">ID of the string to be sent</param>
            <param name="expiration">When this message will expire from the server</param>
            <param name="recommended">Xbox 1 setting.  No effect on Xbox 360</param>
            <remarks>Add system message generates the following output from the command line:
            msgtool /addsystemmsg /id:50001 /expiration:"5/17/2006"
            <code>
            Checking for existence of string 50001...
            Adding system message - id:50001,expiration:5/17/2006
            System message added successfully.
            
            </code>
            </remarks>
        </member>
        <member name="M:ServerTestFramework.STFTools.MsgTool.SendSystemMsg(System.UInt32,System.String)">
            <summary>
            Sends a string to all users when they sign in their language or the default.
            Defaults as required on Xbox1.
            </summary>
            <param name="stringID">ID of the string to be sent</param>
            <param name="expiration">When this message will expire from the server</param>
            <remarks>Command Line: MSGTOOL /addsystemmsg /id:[id] /expiration:[expiration]<br/>
            Adds the specified string to the table to be sent to all users.
            Add system message generates the following output from the command line:
            msgtool /addsystemmsg /id:50001 /expiration:"5/17/2006"
            <code>
            Checking for existence of string 50001...
            Adding system message - id:50001,expiration:5/17/2006
            System message added successfully.
            
            </code>
            </remarks>
        </member>
        <member name="M:ServerTestFramework.STFTools.MsgTool.EnumSystemMsg">
             <summary>
             Enumerate all the System Messages in the queue
             </summary>
             <returns>MessageEntries collection of the sent messages</returns>
             <remarks>
             Return is formatted like this: (Blank line appears to be output before and after.
             <code>
                 
             Enumerating System Messages...
             
             TitleID, MsgID, Sent, ExpireDate, Description
             0, 1074107393, 5/16/2006 10:45:58 PM, 5/16/2006 11:59:58 PM, Xbox Live
            
             End Enumeration.
                     
             </code> OR <code>
                   
             Enumerating System Messages...
             There were no messages in the system message queue.
                    
             </code>                                         */
             </remarks>
        </member>
        <member name="M:ServerTestFramework.STFTools.MsgTool.SendTitleMsg(System.UInt32,System.UInt32,System.String)">
            <summary>
            Sends a message to all users of a specified title
            </summary>
            <param name="stringID">ID of previously added string to be sent</param>
            <param name="titleID">TitleID</param>
            <param name="expiration">Expiration date of the message</param>
            <remarks>The following was generated from this command line: msgtool /addtitlemsg /id:50001 /title:0xFFFE07D0 /expiration:"5/20/2006"
            <code>
            Checking for existence of string 50001...
            Adding title message - title:0xFFFE07D0,id:50001,expiration:5/20/2006
            Title message added successfully.
            
            </code>
            </remarks>
        </member>
        <member name="M:ServerTestFramework.STFTools.MsgTool.SendTitleMsg(System.UInt32,System.UInt32,System.String,System.Boolean)">
            <summary>
            Sends a message to all users of a specified title
            </summary>
            <param name="stringID">ID of previously added string to be sent</param>
            <param name="titleID">TitleID</param>>
            <param name="expiration">Expiration date of the message</param>
            <param name="recommended">Xbox1 recommended message or required</param>
            <remarks>The following was generated from this command line: msgtool /addtitlemsg /id:50001 /title:0xFFFE07D0 /expiration:"5/20/2006"
            <code>
            Checking for existence of string 50001...
            Adding title message - title:0xFFFE07D0,id:50001,expiration:5/20/2006
            Title message added successfully.
            
            </code>
            </remarks>
        </member>
        <member name="M:ServerTestFramework.STFTools.MsgTool.EnumTitleMsg(System.UInt32)">
             <summary>
             Enumerate all the System Messages in the queue
             </summary>
             <returns>MessageEntries collection of the sent messages</returns>
             <remarks>
             Return is formatted like this: (Blank line appears to be output before and after.
             <code>
                 
             Enumerating System Messages...
             
             TitleID, MsgID, Sent, ExpireDate, Description
             0, 1074107393, 5/16/2006 10:45:58 PM, 5/16/2006 11:59:58 PM, Xbox Live
            
             End Enumeration.
                     
             </code> OR <code>
                   
             Enumerating System Messages...
             There were no messages in the system message queue.
                    
             </code>                                         */
             </remarks>
        </member>
        <member name="M:ServerTestFramework.STFTools.MsgTool.DeleteMsg(System.UInt32,System.UInt32)">
            <summary>
            Deletes a message that was added with the Send functions
            </summary>
            <param name="messageID">ID of the message.  This is returned from the enumMsg methods</param>
            <param name="titleID">TitleID of the Message.  Use 0 for system messages</param>
            <remarks>
            The following message is output, no matter if the message is deleted, the titleID or the Message isn't found.
            <code>
            System or title message was successfully deleted or revoked.
            
            </code>
            </remarks>
        </member>
        <member name="M:ServerTestFramework.STFTools.MsgTool.RevokeMsg(System.UInt32,System.UInt32)">
            <summary>
            Revokes a message that was added with the Send functions.  Removes any sent instances as well.
            </summary>
            <param name="messageID">ID of the message.  This is returned from the enumMsg methods</param>
            <param name="titleID">TitleID of the Message.  Use 0 for system messages</param>
            <remarks>
            The following was generated using this command line: msgtool /revokemsg /id:1074107393 /title:0
            <code>
            System or title message was successfully deleted or revoked.
            
            </code>
            This same output is generated even if the id does not exist.
            </remarks>
        </member>
        <member name="M:ServerTestFramework.STFTools.MsgTool.SendUserMsg(System.UInt32,System.UInt64,System.String)">
            <summary>
            Adds a message for a specified User by PUID
            </summary>
            <param name="stringID">ID of String to be sent to user</param>
            <param name="userPUID">User's PUID</param>
            <param name="expiration">Message Expiration Date</param>
            <remarks>
            The following output was generated from this command line: msgtool /addusermsg /id:50001 /user:2533274801615275 /expiration:"5/24/2006" /recommended
            <code>
            Checking user information ...
            Checking for existence of string 50001...
            Adding user message - user:2533274801615275,id:50001,expiration:5/24/2006
            User message added successfully.
            
            </code>
            </remarks>
        </member>
        <member name="M:ServerTestFramework.STFTools.MsgTool.SendUserMsg(System.UInt32,System.UInt64,System.String,System.Boolean)">
            <summary>
            Send a message for specified user on XBox 1 setting recommended by PUID
            </summary>
            <param name="stringID">ID of String to be sent to user</param>
            <param name="userPUID">User's PUID</param>
            <param name="expiration">Message Expiration Date</param>
            <param name="recommended">XBox 1 switch to make recommended or required</param>
            <remarks>
            The following output was generated from this command line: msgtool /addusermsg /id:50001 /usertag:coerwyn /expiration:"5/24/2006"
            <code>
            Checking user information ...
            Checking for existence of string 50001...
            Adding user message - user:2533274801615275,id:50001,expiration:5/24/2006
            User message added successfully.
            
            </code>
            </remarks>
        </member>
        <member name="M:ServerTestFramework.STFTools.MsgTool.SendUserMsg(System.UInt32,System.String,System.String)">
            <summary>
            Adds a message for a specified User by GamerTag
            </summary>
            <param name="stringID">ID of String to be sent to user</param>
            <param name="gamerTag">User's GamerTag</param>
            <param name="expiration">Message Expiration Date</param>
            <remarks>
            The following output was generated from this command line: msgtool /addusermsg /id:50001 /usertag:coerwyn /expiration:"5/24/2006"
            <code>
            Checking user information ...
            Checking for existence of string 50001...
            Adding user message - user:2533274801615275,id:50001,expiration:5/24/2006
            User message added successfully.
            
            </code>
            </remarks>
        </member>
        <member name="M:ServerTestFramework.STFTools.MsgTool.SendUserMsg(System.UInt32,System.String,System.String,System.Boolean)">
            <summary>
            Send a message for specified user on XBox 1 setting recommended by PUID
            </summary>
            <param name="stringID">ID of String to be sent to user</param>
            <param name="gamerTag">User's PUID</param>
            <param name="expiration">Message Expiration Date</param>
            <param name="recommended">XBox 1 switch to make recommended or required</param>
            <remarks>
            The following output was generated from this command line: msgtool /addusermsg /id:50001 /usertag:coerwyn /expiration:"5/24/2006"
            <code>
            Checking user information ...
            Checking for existence of string 50001...
            Adding user message - user:2533274801615275,id:50001,expiration:5/24/2006
            User message added successfully.
            
            </code>
            </remarks>
        </member>
        <member name="M:ServerTestFramework.STFTools.MsgTool.EnumUserMsg(System.UInt64)">
            <summary>
            Enumerates the messages for a user from their PUID
            </summary>
            <param name="puid">PUID of the user</param>
            <returns>A collection of UserMessages</returns>
            <remarks>The following was returned by the command line: msgtool /enumusermsg /user:2533274801615275
            <code>
            Checking user information ...
            
            SenderID, SentTime, MessageID, MFlg, SenderTitleID, ExpireDate
            0, 5/22/2006 4:52:24 PM, 2, 1, 4294836224, 5/24/2006 12:00:24 AM
            
            End Enumeration.
            
            </code>
            </remarks>
        </member>
        <member name="M:ServerTestFramework.STFTools.MsgTool.EnumUserMsg(System.String)">
            <summary>
            Returns a list of user messages from a specified gamerTag
            </summary>
            <param name="gamerTag">User's gamertag</param>
            <returns>Collection of UserMessages</returns>
            <remarks>The following was returned by the command line: msgtool /enumusermsg /usertag:coerwyn
            <code>
            Checking user information ...
            
            SenderID, SentTime, MessageID, MFlg, SenderTitleID, ExpireDate
            0, 5/22/2006 4:52:24 PM, 2, 1, 4294836224, 5/24/2006 12:00:24 AM
            
            End Enumeration.
            
            </code>
            </remarks>
        </member>
        <member name="M:ServerTestFramework.STFTools.MsgTool.DeleteUserMsg(System.UInt32,System.UInt64)">
            <summary>
            Deletes a user message using the Message ID and PUID.
            </summary>
            <param name="MsgId">Message ID returned from EnumMessage function</param>
            <param name="puid">User's PUID</param>
            <remarks>This command line generated the following output: msgtool /deleteusermsg /id:2 /user:2533274801615275
            <code>
            Checking user information ...
            Successfully deleted message ID 2 from the queue of user 2533274801615275
            
            </code>
            </remarks>
        </member>
        <member name="M:ServerTestFramework.STFTools.MsgTool.DeleteUserMsg(System.UInt32,System.String)">
            <summary>
            Deletes a user message using the Message ID and GamerTag
            </summary>
            <param name="MsgId">Message ID returned from EnumMessage function</param>
            <param name="gamerTag">User's GamerTag</param>
            <remarks>This command line generated the following output: msgtool /deleteusermsg /id:2 /usertag:coerwyn
            <code>
            Checking user information ...
            Successfully deleted message ID 2 from the queue of user 2533274801615275
            
            </code>
            </remarks>
        </member>
        <member name="M:ServerTestFramework.STFTools.MsgTool.RunMsgTool(System.String)">
            <summary>
            Allows running MsgTool with custom argument string.
            Mainly used for negative testing.
            </summary>
            <param name="arguments">Argument string to be used when calling MsgTool.</param>
        </member>
        <member name="M:ServerTestFramework.STFTools.MsgTool.XMLMessage(System.String)">
            <summary>
            Runs MsgTool taking an XML file of messages and recipients.
            </summary>
            <param name="XMLFile">XML File path</param>
        </member>
        <member name="M:ServerTestFramework.STFTools.MsgTool.CheckXMLMessage(System.String)">
            <summary>
            Runs MsgTool taking an XML file of messages and recipients and *only* validates the XML format.
            </summary>
            <param name="XMLFile">XML File path</param>
        </member>
        <member name="P:ServerTestFramework.STFTools.MsgTool.MsgToolPath">
            <summary>
            Gets or sets path to MsgTool
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.MsgTool.Output">
            <summary>
            Gets the output text from the most recent run of MsgTool.
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFTools.StringLanguage">
            <summary>
            Language Enum for the strings in MsgTool
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFTools.MsgToolException">
            <summary>
            Exception class for MsgTool runner
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFTools.MessageEntry">
            <summary>
            A Row returned from the Enum functions of MsgTool of what messages are sent.
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFTools.MessageEntry.#ctor(System.String)">
            <summary>
            Creates a new MsgTool Message line from a string that MsgTool returns.
            </summary>
            <param name="entry">Formatted String from MsgTool</param>
            <remarks>The tool returns each row like "TitleID, MsgID, Sent, ExpireDate, Description"</remarks>
        </member>
        <member name="M:ServerTestFramework.STFTools.MessageEntry.Equals(System.Object)">
            <summary>
            Tests if object is equal to this MessageEntry
            </summary>
            <param name="obj">Object to test</param>
            <returns>True if both objects are the same</returns>
        </member>
        <member name="M:ServerTestFramework.STFTools.MessageEntry.GetHashCode">
            <summary>
            Gets the hashcode for this instance
            </summary>
            <returns>Hashcode</returns>
        </member>
        <member name="T:ServerTestFramework.STFTools.MessageEntries">
            <summary>
            Collection of MessageEntry objects
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFTools.MessageEntries.Add(ServerTestFramework.STFTools.MessageEntry)">
            <summary>
            Adds a MessageEntry to the collection
            </summary>
            <param name="val">MessageEntry to add</param>
            <returns>Index of MessageEntry</returns>
        </member>
        <member name="M:ServerTestFramework.STFTools.MessageEntries.Contains(ServerTestFramework.STFTools.MessageEntry)">
            <summary>
            Tests if MessageEntry is in the collection
            </summary>
            <param name="val">MessageEntry to test</param>
            <returns>True if it is already in the collection</returns>
        </member>
        <member name="M:ServerTestFramework.STFTools.MessageEntries.Remove(ServerTestFramework.STFTools.MessageEntry)">
            <summary>
            Removes a MessageEntry from the collection
            </summary>
            <param name="val">MessageEntry to remove</param>
        </member>
        <member name="P:ServerTestFramework.STFTools.MessageEntries.Item(System.Int32)">
            <summary>
            Indexer for MessageEntries
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFTools.UserMessage">
            <summary>
            A Message for a particular User.  Returned in the collection from the EnumUserMsg function.
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFTools.UserMessage.#ctor(System.String)">
            <summary>
            Creates a new MsgTool User Message line from a string that MsgTool enumUserMsg returns.
            </summary>
            <param name="entry">Formatted String from MsgTool</param>
            <remarks>The tool returns each row like "SenderID, SentTime, MessageID, MFlg, SenderTitleID, ExpireDate"</remarks>
        </member>
        <member name="M:ServerTestFramework.STFTools.UserMessage.Equals(System.Object)">
            <summary>
            Determines if this UserMessage is equal to another object
            </summary>
            <param name="obj">Object to be tested</param>
            <returns>True if they are equal</returns>
        </member>
        <member name="M:ServerTestFramework.STFTools.UserMessage.GetHashCode">
            <summary>
            Gets the hashcode for this object
            </summary>
            <returns>The hashcode</returns>
        </member>
        <member name="T:ServerTestFramework.STFTools.UserMessages">
            <summary>
            Collection of UserMessage objects
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFTools.UserMessages.Add(ServerTestFramework.STFTools.UserMessage)">
            <summary>
            Adds a new UserMessage to the collection
            </summary>
            <param name="val">UserMessage to add</param>
            <returns>Index of message</returns>
        </member>
        <member name="M:ServerTestFramework.STFTools.UserMessages.Contains(ServerTestFramework.STFTools.UserMessage)">
            <summary>
            Tests if a UserMessage is already in the collection
            </summary>
            <param name="val">UserMessage to test</param>
            <returns>True if UserMessage is in the collection</returns>
        </member>
        <member name="M:ServerTestFramework.STFTools.UserMessages.Remove(ServerTestFramework.STFTools.UserMessage)">
            <summary>
            Removes a UserMessage from the collection
            </summary>
            <param name="val">UserMessage to remove</param>
        </member>
        <member name="P:ServerTestFramework.STFTools.UserMessages.Item(System.Int32)">
            <summary>
            Indexer for UserMessage
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFTools.QuickEnforce">
            <summary>
            Utility class for running the QuickEnforce tool.
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFTools.SPAC">
            <summary>
            Utility class that runs the SPA Compiler (SPAC) tool.
            </summary>
            <remarks>
            Unlike many of the other tools, SPAC supports multiple return codes. Therefore, all the
            methods that execute SPAC will not raise exceptions on failure, but rather simply return
            the exit code from the tool itself. It is the caller's responsibility to check this code
            and take the appropriate action.
            </remarks>
        </member>
        <member name="M:ServerTestFramework.STFTools.SPAC.#ctor">
            <summary>
            Creates a SPAC object and initializes the process wrapper to the default SPAC path.
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFTools.SPAC.Compile">
            <summary>
            Compiles an XLAST file using the default parameter values.
            </summary>
            <returns>
            One of the four possible SPAC return codes:
                0       Success
                1       Bad Usage
                2       Non-Fatal Error
                3       Fatal Error
            </returns>
        </member>
        <member name="M:ServerTestFramework.STFTools.SPAC.Compile(System.Boolean,System.Boolean)">
            <summary>
            Allows the default nospa and noh parameter values to be overridden when compiling an XLAST file.
            </summary>
            <param name="noSpa">Flag indicating whether or not a SPA file should be generated.</param>
            <param name="noHeader">Flag indicating whether or not a SPA.H file should be generated.</param>
            <returns>
            One of the four possible SPAC return codes:
                0       Success
                1       Bad Usage
                2       Non-Fatal Error
                3       Fatal Error
            </returns>
        </member>
        <member name="M:ServerTestFramework.STFTools.SPAC.Compile(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Allows all the default flag parameter values to be overridden when compiling an XLAST file.
            </summary>
            <param name="noLogo">Flag indicating whether the copyright message is printed when SPAC is run.</param>
            <param name="verbose">Flag specifying whether the compile output should be normal or verbose.</param>
            <param name="noSpa">Flag indicating whether or not a SPA file should be generated.</param>
            <param name="noHeader">Flag indicating whether or not a SPA.H file should be generated.</param>
            <returns>
            One of the four possible SPAC return codes:
                0       Success
                1       Bad Usage
                2       Non-Fatal Error
                3       Fatal Error
            </returns>
        </member>
        <member name="M:ServerTestFramework.STFTools.SPAC.UnCompile">
            <summary>
            UnCompiles a SPA file using the default parameter values.
            </summary>
            <returns>
            One of the four possible SPAC return codes:
                0       Success
                1       Bad Usage
                2       Non-Fatal Error
                3       Fatal Error
            </returns>
        </member>
        <member name="M:ServerTestFramework.STFTools.SPAC.OutputXSD(System.String)">
            <summary>
            Executes SPAC to output the XSD file it is using to validate XLAST files.
            </summary>
            <param name="xsdFile">Name of the XSD file to create.</param>
            <returns>
            One of the four possible SPAC return codes:
                0       Success
                1       Bad Usage
                2       Non-Fatal Error
                3       Fatal Error
            </returns>
        </member>
        <member name="M:ServerTestFramework.STFTools.SPAC.ReportSPAVersion(System.String)">
            <summary>
            Reports the version information of a given SPA file.
            </summary>
            <param name="spaFile">Name of the SPA file for which version information is to be reported.</param>
            <returns>
            One of the four possible SPAC return codes:
                0       Success
                1       Bad Usage
                2       Non-Fatal Error
                3       Fatal Error
            
            The version information will be found in the output text.
            </returns>
        </member>
        <member name="P:ServerTestFramework.STFTools.SPAC.SpacPath">
            <summary>
            Gets or sets the full path of the SPAC executable.
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.SPAC.WorkingDirectory">
            <summary>
            Gets or sets the name of the working directory under which SPAC will be run.
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.SPAC.XlastPath">
            <summary>
            Gets or sets the name of the XLAST file to compile.
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.SPAC.HeaderFile">
            <summary>
            Gets or sets the optional name of the header file that SPAC outputs when compiling an XLAST file.
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.SPAC.SpaFile">
            <summary>
            Gets or sets the optional name of the SPA file that SPAC outputs when compiling an XLAST file.
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.SPAC.ConfigOverrideFile">
            <summary>
            Gets or sets the optional name of a file containing configuration overrides.
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.SPAC.UncompileOutputFile">
            <summary>
            Gets or sets the name of the decompiled output file 
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.SPAC.Output">
            <summary>
            Gets the output text of SPAC.
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.SPAC.NoLogo">
            <summary>
            Gets or sets the default value for the -nologo option.
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.SPAC.Verbose">
            <summary>
            Gets or sets the default value of the -verbose option.
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.SPAC.NoSpa">
            <summary>
            Gets or sets the default value of the -nospa option.
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.SPAC.NoHeader">
            <summary>
            Gets or sets the default value of the -noh option.
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFTools.SPUT">
            <summary>
            Utility class for running SPUT.
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFTools.SPUT.ChangeTitleID(System.String,System.String)">
            <summary>
            Writes the titleID for the specified serialNum to the table
            </summary>
            <param name="serialNum">The serial number of the Xbox</param>
            <param name="titleID">The title ID or value to set.  Must have length of 1,4 or 8.</param>
        </member>
        <member name="M:ServerTestFramework.STFTools.SPUT.DumpTitleID(System.String)">
            <summary>
            Lookup the titleID associated with an xbox.
            </summary>
            <param name="serialNum">The serial number of the Xbox</param>
            <returns>Output returned from SPUT.</returns>
        </member>
        <member name="M:ServerTestFramework.STFTools.SPUT.RunSPUTFile(System.String)">
            <summary>
            Runs SPUT specifying CSV File
            </summary>
            <param name="fileName">CSV file to be used</param>
        </member>
        <member name="M:ServerTestFramework.STFTools.SPUT.RunSPUTFile">
            <summary>
            Runs SPUT specifying File that is set in CSVFIle Property
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFTools.SPUT.RunSPUTFile(System.String,System.String)">
            <summary>
            Runs SPUT specifying File and TitleID to use
            </summary>
            <param name="fileName">CSV File of Serial numbers</param>
            <param name="titleID">Title ID to use or override</param>
        </member>
        <member name="M:ServerTestFramework.STFTools.SPUT.RunSPUT(System.String)">
            <summary>
            Allows running SPUT with custom argument string.
            Mainly used for negative testing.
            </summary>
            <param name="arguments">Argument string to be used when calling SPUT.</param>
        </member>
        <member name="P:ServerTestFramework.STFTools.SPUT.SPUTPath">
            <summary>
            Gets or sets path to SPUT
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.SPUT.CSVFile">
            <summary>
            Gets or sets the CSV File to use when running SPUT.  Can be NULL.
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.SPUT.Output">
            <summary>
            Gets the output text from the most recent run of SPUT.
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFTools.SystemCheck">
            <summary>
            Utility class for running the SystemCheck tool.
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFTools.SystemCheck.Reloadfd">
            <summary>
            Runs SystemCheck with /reloadfd parameter to reload the front doord.
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFTools.SystemCheck.Reloadfd(System.String)">
            <summary>
            Runs SystemCheck with /reloadfd parameter to reload the front doord.
            </summary>
            <param name="timeout">timeout (in ms) to specify with the /timeout parameter. Optional.</param>
        </member>
        <member name="M:ServerTestFramework.STFTools.SystemCheck.CallUrl">
            <summary>
            Runs SystemCheck with a configfile and outputfile.
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFTools.SystemCheck.CallUrl(System.UInt32,System.UInt32)">
            <summary>
            Runs SystemCheck with a configfile and outputfile.
            </summary>
            <param name="threads"># of threads to speciffy with the /threads parameter. Optional.</param>
            <param name="timeout">timeout (in ms) to specify with the /timeout parameter. Optional.</param>
        </member>
        <member name="M:ServerTestFramework.STFTools.SystemCheck.CallUrl(System.String,System.String)">
            <summary>
            Runs SystemCheck with a configfile, # of threads, timout, and outputfile.
            </summary>
            <param name="threads"># of threads to speciffy with the /threads parameter. Optional.</param>
            <param name="timeout">timeout (in ms) to specify with the /timeout parameter. Optional.</param>
        </member>
        <member name="P:ServerTestFramework.STFTools.SystemCheck.SystemCheckPath">
            <summary>
            Gets or sets the fully-qualified name of the SystemCheck executable.
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.SystemCheck.WorkingDirectory">
            <summary>
            Gets or sets the working directory for SystemCheck
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.SystemCheck.Timeout">
            <summary>
            Gets or sets the number of milliseconds to allow LiveStats to run before killing the process.
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.SystemCheck.ConfigFilePath">
            <summary>
            Gets or sets the fully-qualified name of the Config file used during SystemCheck running 
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.SystemCheck.OutFilePath">
            <summary>
            Gets or sets the fully-qualified name of the Output file used during SystemCheck running 
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.SystemCheck.Output">
            <summary>
            Gets the output text from the most recent run of SystemCheck.
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFTools.VoucherMgr">
            <summary>
            Utility class for running the VoucherMgr tool.
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFTools.WSTRunner">
            <summary>
            Utility class for running the WSTRunner tool.
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFTools.WSTRunner.WSTRunnerSetup(System.String,System.String)">
            <summary>
            Runs WSTRunner to setup a database using the provided manifest and deployment files.
            </summary>
            <param name="manifestFile">Manifest File to be used with the /m parameter. Required.</param>
            <param name="deploymentFile">Deployment File to be used with the /d parameter. Required.</param>
        </member>
        <member name="M:ServerTestFramework.STFTools.WSTRunner.WSTRunnerSetup">
            <summary>
            Runs WSTRunner to setup a database using the provided manifest and deployment files.
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFTools.WSTRunner.WSTRunnerDrop(System.String,System.String)">
            <summary>
            Runs WSTRunner to drop a database using the provided manifest and deployment files.
            </summary>
            <param name="manifestFile">Manifest File to be used with the /m parameter. Required.</param>
            <param name="deploymentFile">Deployment File to be used with the /d parameter. Required.</param>
        </member>
        <member name="M:ServerTestFramework.STFTools.WSTRunner.WSTRunnerDrop">
            <summary>
            Runs WSTRunner to drop a database using the provided manifest and deployment files.
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFTools.WSTRunner.WSTRunnerManualParam(System.Boolean,System.Boolean,System.Boolean,System.String,System.Boolean,System.String)">
            <summary>
            Runs WSTRunner to manually allow invalid parameter variations.
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFTools.WSTRunner.WSTRunnerManualParam(System.String[])">
            <summary>
            Runs WSTRunner to manually allow invalid parameter variations.
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFTools.WSTRunner.WSTRunnerManualParam(System.String)">
            <summary>
            Runs WSTRunner to manually allow invalid parameter variations.
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.WSTRunner.WSTRunnerPath">
            <summary>
            Gets or sets the fully-qualified name of the WSTRunner executable.
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.WSTRunner.WorkingDirectory">
            <summary>
            Gets or sets the working directory for WSTRunner
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.WSTRunner.ManifestFilePath">
            <summary>
            Gets or sets the fully-qualified name of the Manifest file used during database 
            deployment.
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.WSTRunner.DeploymentFilePath">
            <summary>
            Gets or sets the fully-qualified name of the Deployment file used during database 
            deployment.
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.WSTRunner.Output">
            <summary>
            Gets the output text from the most recent run of WSTRunner.
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.WSTRunner.ExecutionTimeout">
            <summary>
            Exposes the Execution Timeout value for the underlying Process wrapper.
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFTools.XblCfg">
            <summary>
            Utility class for running XblCfg
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFTools.XblCfg.AddBlob(System.String,System.Byte[])">
            <summary>
            Add blob to npdb..t_config_blobs
            </summary>
            <param name="name">The name of the blob</param>
            <param name="blob">The blob data</param>
        </member>
        <member name="M:ServerTestFramework.STFTools.XblCfg.DeleteBlob(System.String)">
            <summary>
            Delete blob in npdb..t_config_blobs
            </summary>
            <param name="name">The name of the blob to delete</param>
        </member>
        <member name="M:ServerTestFramework.STFTools.XblCfg.GetBlob(System.String,System.Byte[]@)">
            <summary>
            Gets blob from npdb..t_config_blobs
            </summary>
            <param name="name">The name of the blob</param>
            <param name="blob">The blob data retrieved</param>
        </member>
        <member name="M:ServerTestFramework.STFTools.XblCfg.RunXblCfg(System.String)">
            <summary>
            Allows running XblCfg with custom argument string.
            Mainly used for negative testing.
            </summary>
            <param name="arguments">Argument string to be used when calling XblCfg.</param>
        </member>
        <member name="M:ServerTestFramework.STFTools.XblCfg.ReloadWmdrmSettings">
            <summary>
            Reloads the xbos servers after changing the wmdrm whitelist blob.
            Helper function.
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.XblCfg.XblCfgPath">
            <summary>
            Gets or sets path to XblCfg
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFTools.XblCfg.Output">
            <summary>
            Gets the output text from the most recent run of XblCfg.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\libd\i386\CacheBaseLibrary.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
	<assembly>
		<name>CacheBaseLibrary</name>
	</assembly>
	<members>
		<member name="T:Microsoft.Data.Caching.DataCacheErrorCode">
			<summary>A static class used to store global error codes.</summary>
		</member>
		<member name="F:Microsoft.Data.Caching.DataCacheErrorCode.CacheItemVersionMismatch">
			<summary>The object in the cache does not match with the specified version; integer value equals 1.</summary>
		</member>
		<member name="F:Microsoft.Data.Caching.DataCacheErrorCode.CacheServerUnavailable">
			<summary>One or more specified cache servers are unavailable; integer value equals 19.</summary>
		</member>
		<member name="F:Microsoft.Data.Caching.DataCacheErrorCode.ClientServerVersionMismatch">
			<summary>The cache client assemblies are a different version than the cache host assemblies; integer value equals 24.</summary>
		</member>
		<member name="F:Microsoft.Data.Caching.DataCacheErrorCode.InvalidArgument">
			<summary>The argument is not valid; integer value equals 5.</summary>
		</member>
		<member name="F:Microsoft.Data.Caching.DataCacheErrorCode.InvalidCacheLockHandle">
			<summary>The specified lock handle is not valid; integer value equals 15.</summary>
		</member>
		<member name="F:Microsoft.Data.Caching.DataCacheErrorCode.InvalidEnumerator">
			<summary>An invalid enumerator is specified; integer value equals 16.</summary>
		</member>
		<member name="F:Microsoft.Data.Caching.DataCacheErrorCode.KeyAlreadyExists">
			<summary>The key is already present in the cache or region; integer value equals 10.</summary>
		</member>
		<member name="F:Microsoft.Data.Caching.DataCacheErrorCode.KeyDoesNotExist">
			<summary>An object cached with the specified key does not exist in the cache or region; integer value equals 8.</summary>
		</member>
		<member name="F:Microsoft.Data.Caching.DataCacheErrorCode.MaxNamedCacheCountExceeded">
			<summary>The named cache count exceeded the maximum value; integer value equals 12.</summary>
		</member>
		<member name="F:Microsoft.Data.Caching.DataCacheErrorCode.NamedCacheDoesNotExist">
			<summary>The named cache does not exist; integer value equals 11.</summary>
		</member>
		<member name="F:Microsoft.Data.Caching.DataCacheErrorCode.NotificationNotSupported">
			<summary>Cache notifications are not supported because the cache client is a simple client or the named cache has been created without notifications enabled; integer value equals 20.</summary>
		</member>
		<member name="F:Microsoft.Data.Caching.DataCacheErrorCode.NotPermittedForDefaultRegions">
			<summary>The operation is only supported in regions that you explicitly create with the <see cref="M:Microsoft.Data.Caching.DataCache.CreateRegion(System.String,System.Boolean)" /> method; integer value equals 18.</summary>
		</member>
		<member name="F:Microsoft.Data.Caching.DataCacheErrorCode.NullArgument">
			<summary>A null has been specified as an argument; integer value equals 3.</summary>
		</member>
		<member name="F:Microsoft.Data.Caching.DataCacheErrorCode.ObjectLocked">
			<summary>The cached object has already been locked; integer value equals 13.</summary>
		</member>
		<member name="F:Microsoft.Data.Caching.DataCacheErrorCode.ObjectNotLocked">
			<summary>The object is not locked; integer value equals 14.</summary>
		</member>
		<member name="F:Microsoft.Data.Caching.DataCacheErrorCode.RegionAlreadyExists">
			<summary>The region already exists; integer value equals 9.</summary>
		</member>
		<member name="F:Microsoft.Data.Caching.DataCacheErrorCode.RegionDoesNotExist">
			<summary>The region does not exist; integer value equals 7.</summary>
		</member>
		<member name="F:Microsoft.Data.Caching.DataCacheErrorCode.RetryLater">
			<summary>Temporary failure, retry the operation later; integer value equals 22.</summary>
		</member>
		<member name="F:Microsoft.Data.Caching.DataCacheErrorCode.SerializationException">
			<summary>An exception was encountered during object serialization; integer value equals 25.</summary>
		</member>
		<member name="F:Microsoft.Data.Caching.DataCacheErrorCode.ServerNull">
			<summary>The servers parameter of the <see cref="Overload:Microsoft.Data.Caching.DataCacheFactory.#ctor" /> constructor or one of the items in the array is null; integer value equals 26.</summary>
		</member>
		<member name="F:Microsoft.Data.Caching.DataCacheErrorCode.Timeout">
			<summary>Communications with the cache cluster have experienced a delay past the timeout value; integer value equals 23.</summary>
		</member>
		<member name="F:Microsoft.Data.Caching.DataCacheErrorCode.UndefinedError">
			<summary>Unknown error; integer value equals 6. </summary>
		</member>
		<member name="T:Microsoft.Data.Caching.DataCacheException">
			<summary>Used for cache-related exceptions.</summary>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCacheException.#ctor">
			<summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Caching.DataCacheException" /> class.</summary>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCacheException.#ctor(System.String)">
			<summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Caching.DataCacheException" /> class; allows you to provide a message with the exception.</summary>
			<param name="message">The message describing the exception.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCacheException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
			<summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Caching.DataCacheException" /> class; allows you to provide serialization information with the exception.</summary>
			<param name="info">Stores serialization information about an object.</param>
			<param name="context">Describes the source, destination, and context of a serialized stream.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCacheException.#ctor(System.String,System.Exception)">
			<summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Caching.DataCacheException" /> class; allows you to provide a message and another exception with the exception.</summary>
			<param name="message">The message describing the exception.</param>
			<param name="innerException">Another exception related to this exception.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCacheException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
			<summary>The interface that is used for serialization.</summary>
			<param name="info">The SerializationInfo class used to store all the data that you need to serialize the exception.</param>
			<param name="context">The StreamingContext class used to describe the source and destination of the exception.</param>
		</member>
		<member name="P:Microsoft.Data.Caching.DataCacheException.ErrorCode">
			<summary>The integer used to identify the type of exception encountered.</summary>
			<returns>An integer specifying the type of exception encountered.</returns>
		</member>
		<member name="P:Microsoft.Data.Caching.DataCacheException.Message">
			<summary>The description of the exception encountered.</summary>
			<returns>A string that describes the type of exception encountered.</returns>
		</member>
		<member name="T:Microsoft.Data.Caching.DataCacheItem">
			<summary>Used to retrieve all information associated with the cached object in the cluster.</summary>
		</member>
		<member name="P:Microsoft.Data.Caching.DataCacheItem.CacheName">
			<summary>The name of the cache where the object is stored.</summary>
			<returns>A string value that represents the name of the cache where the object is stored.</returns>
		</member>
		<member name="P:Microsoft.Data.Caching.DataCacheItem.Key">
			<summary>The identifier that is used to distinguish the cached object in the cache or region.</summary>
			<returns>A string value that represents the identifier that is used to distinguish the cached object in the cache or region.</returns>
		</member>
		<member name="P:Microsoft.Data.Caching.DataCacheItem.RegionName">
			<summary>If applicable, the name of the region where the object is stored.</summary>
			<returns>A string value that represents, if applicable, the name of the region where the object is stored.</returns>
		</member>
		<member name="P:Microsoft.Data.Caching.DataCacheItem.Tags">
			<summary>A generic list of tags associated with the cached object.</summary>
			<returns>An generic list of <see cref="T:Microsoft.Data.Caching.DataCacheTag" /> objects associated with the cached object.</returns>
		</member>
		<member name="P:Microsoft.Data.Caching.DataCacheItem.Value">
			<summary>The object stored in cache.</summary>
			<returns>An object representing the deserialized form of the cached object.</returns>
		</member>
		<member name="P:Microsoft.Data.Caching.DataCacheItem.Version">
			<summary>The version of the cached object.</summary>
			<returns>The <see cref="T:Microsoft.Data.Caching.DataCacheItemVersion" /> is updated every time the object is updated. Only the latest version of the object is stored on the cache cluster. Due to the distributed nature of the cluster, the cache client may not have the latest copy of the object. For this reason, the <see cref="T:Microsoft.Data.Caching.DataCacheItemVersion" /> class is essential for concurrency operations. For more information, see Concurrency Models (Velocity) and Concurrency Methods (Velocity).When using cache notifications, the <see cref="T:Microsoft.Data.Caching.DataCacheItemVersion" /> object corresponding to an item-related cache operation can be returned to your application with the version parameter of the <see cref="T:Microsoft.Data.Caching.DataCacheNotificationCallback" /> delegate method. For more information, see <see cref="Cache Notifications (Velocity)" />.Version comparisons are only meaningful when comparing versions of the same item specified with the same key. Comparison methods may return a result, but the result is only valid for versions of the same key. </returns>
		</member>
		<member name="T:Microsoft.Data.Caching.DataCacheItemVersion">
			<summary>Used to represent the version of a cached object.</summary>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCacheItemVersion.CompareTo(Microsoft.Data.Caching.DataCacheItemVersion)">
			<summary>Used to compare two versions of the same item, specified with the same key.</summary>
			<returns>An integer value: 0 if the versions are equal, greater than zero if the instance is greater than the version parameter value, or less than zero if the instance is less than the version parameter value.</returns>
			<param name="version">The <see cref="T:Microsoft.Data.Caching.DataCacheItemVersion" /> to be compared.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCacheItemVersion.Equals(System.Object)">
			<summary>Used to determine whether another object is the same.</summary>
			<returns>A Boolean value: true, if the objects are the same; false, if they are different.</returns>
			<param name="obj">Another object for comparison.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCacheItemVersion.GetHashCode">
			<summary>Returns the hash code of the <see cref="T:Microsoft.Data.Caching.DataCacheItemVersion" /> object.</summary>
			<returns>An integer value that represents the hash code of the <see cref="T:Microsoft.Data.Caching.DataCacheItemVersion" /> object. </returns>
		</member>
		<member name="T:Microsoft.Data.Caching.DataCacheLockHandle">
			<summary>The structure used as a key to lock and unlock cached objects in a pessimistic concurency scenario.</summary>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCacheLockHandle.ToString">
			<summary>Returns the string representation of the lock handle.</summary>
			<returns>A string representing the lock handle.</returns>
		</member>
		<member name="T:Microsoft.Data.Caching.DataCacheLogSink">
			<summary>Used to specify an individual log sink.</summary>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCacheLogSink.#ctor(Microsoft.Data.Caching.DataCacheSinkType)">
			<summary>Defines the type of log sink and assigns a TraceLevel of Warning.</summary>
			<param name="sinkType">The type of log sink, represented by the <see cref="T:Microsoft.Data.Caching.DataCacheSinkType" /> enumeration.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCacheLogSink.#ctor(Microsoft.Data.Caching.DataCacheSinkType,System.Diagnostics.TraceLevel)">
			<summary>Defines the type of log sink and assigns the specified TraceLevel.</summary>
			<param name="sinkType">The type of log sink, represented by the <see cref="T:Microsoft.Data.Caching.DataCacheSinkType" /> enumeration.</param>
			<param name="logLevel">The TraceLevel of the log sink, represented by the <see cref="T:System.Diagnostics.TraceLevel" /> enumeration. Available options include: No tracing, Error, Warning, Information, and Verbose.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCacheLogSink.#ctor(Microsoft.Data.Caching.DataCacheSinkType,System.Diagnostics.TraceLevel,System.String)">
			<summary>Defines the type of log sink and assigns the specified TraceLevel. This overload also enables setting additional log sink parameters.</summary>
			<param name="sinkType">The type of log sink, represented by the <see cref="T:Microsoft.Data.Caching.DataCacheSinkType" /> enumeration.</param>
			<param name="logLevel">The TraceLevel of the log sink, represented by the <see cref="T:System.Diagnostics.TraceLevel" /> enumeration. Available options include: No tracing, Error, Warning, Information, and Verbose.</param>
			<param name="sinkParam">Only used for file-based logging to specify the file naming convention of the log file.</param>
		</member>
		<member name="T:Microsoft.Data.Caching.DataCacheSinkType">
			<summary>Used to specify the type of log sink used to trace events on the cache client.</summary>
		</member>
		<member name="F:Microsoft.Data.Caching.DataCacheSinkType.CONSOLE">
			<summary>Used to specify console-based log sinks. </summary>
		</member>
		<member name="F:Microsoft.Data.Caching.DataCacheSinkType.ETW">
			<summary>Used to specify Event Tracing for Windows (ETW)-based log sinks.</summary>
		</member>
		<member name="F:Microsoft.Data.Caching.DataCacheSinkType.FILE">
			<summary>Used to specify file-based log sinks.</summary>
		</member>
		<member name="T:Microsoft.Data.Caching.DataCacheTag">
			<summary>Represents an optional string-based identifier that you can associate with a cached object.</summary>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCacheTag.#ctor(System.String)">
			<summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Caching.DataCacheTag" /> class.</summary>
			<param name="tag">The string-based identifier to associate with a cached object.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCacheTag.Equals(System.Object)">
			<summary>Compares the current <see cref="T:Microsoft.Data.Caching.DataCacheTag" /> object for equality with the specified <see cref="T:Microsoft.Data.Caching.DataCacheTag" /> object.</summary>
			<returns>True if the object implements the ToString method and its value is the same as the string representation of the current <see cref="T:Microsoft.Data.Caching.DataCacheTag" />; otherwise, false.</returns>
			<param name="obj">The object whose string representation is compared for equality to the current <see cref="T:Microsoft.Data.Caching.DataCacheTag" /> object.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCacheTag.GetHashCode">
			<summary>Returns the hash code for the current <see cref="T:Microsoft.Data.Caching.DataCacheTag" /> object.</summary>
			<returns>An integer representing the hash code for the current <see cref="T:Microsoft.Data.Caching.DataCacheTag" /> object.</returns>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCacheTag.ToString">
			<summary>Returns the string representation of the current <see cref="T:Microsoft.Data.Caching.DataCacheTag" /> object.</summary>
			<returns>A string representing the current value of the <see cref="T:Microsoft.Data.Caching.DataCacheTag" /> object. </returns>
		</member>
	</members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\libd\CTFCore.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CTFCore</name>
    </assembly>
    <members>
        <member name="T:MS.Swi.FCLCoreComponentAttribute">
            <summary>
            This marks the component as part of the FCL core. This should NOT be used by anyone except
            SWI. For everyone else, use the MS.Swi.InstallationManagementAttribute
            </summary>
        </member>
        <member name="T:MS.Swi.Reflection">
            <summary>
            General reflection helper functions, grouped to prevent code duplication
            </summary>
        </member>
        <member name="M:MS.Swi.Reflection.#cctor">
            <summary>
            Add bridging support for loaded assemblies in the LoadFrom() domain being called by Assemblies in the
            Load() domain.
            </summary>
        </member>
        <member name="M:MS.Swi.Reflection.ResolveMissingAssembly(System.Object,System.ResolveEventArgs)">
            <summary>
            Bridge the LoadFrom and Load contexts by searching the whole set of loaded assemblies looking for
            the assembly to resolve
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:MS.Swi.Reflection.#ctor">
            <summary>
            There are no valid Reflection objects
            </summary>
        </member>
        <member name="M:MS.Swi.Reflection.LoadAssembliesFromDirectory(System.String)">
            <summary>
            Load all valid managed assemblies in the specified directory
            </summary>
            <param name="directoryPath">The specified directory</param>
            <returns>True if we loaded any assemblies, false if not</returns>
        </member>
        <member name="M:MS.Swi.Reflection.FindClass(System.String)">
            <summary>
            Search all loaded assemblies for the specified classname
            </summary>
            <param name="className">The full, case sensitive name</param>
            <returns>The matching type, or null</returns>
        </member>
        <member name="M:MS.Swi.Reflection.FindClass(System.String,System.String)">
            <summary>
            Search all loaded assemblies for the specified classname. Note that this does NOT
            limit itself to public classes, because we are asking for the class by name.
            </summary>
            <param name="className">The full, case sensitive name</param>
            <param name="requiredInterface">The required interface, or null, if no interface is required</param>
            <returns>The matching type, or null</returns>
        </member>
        <member name="M:MS.Swi.Reflection.FindClasses(System.String,System.Type)">
            <summary>
            Find the set of all public classes which are non-abstract, and implement the
            specified interface and the specified attribute (if provided)
            </summary>
            <param name="requiredInterface">The required interface</param>
            <param name="requiredAttribute">The required attribute, or null</param>
            <returns>A list of Type objects</returns>
        </member>
        <member name="M:MS.Swi.Reflection.CacheFclAssembly(System.Reflection.Assembly)">
            <summary>
            Cache the assembly into the FCL lookaside cache if it matches
            </summary>
            <param name="loadedAssembly">The loaded assembly</param>
        </member>
        <member name="M:MS.Swi.Reflection.LoadReferencedAssembly(System.String)">
            <summary>
            Load an assembly (which must be referenced by another assembly already loaded) into
            the AppDomain. Note that we will return success if the desired assembly has already been
            loaded, and that we may load more than one assembly with the same simple name.
            </summary>
            <param name="assemblyName">The symbolic name of the assembly we want to load</param>
            <returns>True if the assembly can be loaded, false if not</returns>
        </member>
        <member name="M:MS.Swi.Reflection.FindMethod(System.String,System.Type[])">
            <summary>
            Find a specific method, ignoring privacy 
            </summary>
            <param name="methodFullName">The full (i.e. namespace.class.method) name of the method</param>
            <param name="arguments">The method argument signature to look for or null if there are no arguments</param>
            <returns>The matching method, or null if no method was found</returns>
        </member>
        <member name="T:MS.Swi.Data.Generic.ConstArray`1">
            <summary>
            An uneditable view of an array of objects or value types
            </summary>
            <typeparam name="ContentsType">The underlying array</typeparam>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstArray`1.#ctor(`0[])">
            <summary>
            Construct a const view of an underlying array
            </summary>
            <param name="underlyingArray">The underlying array</param>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstArray`1.Extract(System.Int32,System.Int32)">
            <summary>
            Extract a subset of the source array 
            </summary>
            <param name="startIndex">The start index in the source array</param>
            <param name="length">The length of the subset</param>
            <returns>The newly constructed array</returns>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstArray`1.Copy(System.Int32,System.Int32,System.Int32,`0[])">
            <summary>
            Copy a subset of the contents of the array into another array
            </summary>
            <param name="startIndex">The start index in the source array</param>
            <param name="length">The length of the subset</param>
            <param name="destIndex">The start index in the destination array</param>
            <param name="destination">The destination array</param>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstArray`1.ToArray">
            <summary>
            Create a clone of the underlying array and return it
            </summary>
            <returns>The shallow clone of the underlying array</returns>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstArray`1.GetEnumerator">
            <summary>
            The enumerator for iteration
            </summary>
            <returns>An enumerator</returns>
        </member>
        <member name="P:MS.Swi.Data.Generic.ConstArray`1.Length">
            <summary>
            The length of the array
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Generic.ConstArray`1.Item(System.Int32)">
            <summary>
            The contents at any particular index
            </summary>
            <param name="index">The index into the array</param>
            <returns>The value at that location</returns>
        </member>
        <member name="T:MS.Swi.Data.Generic.ConstList`1">
            <summary>								
            An uneditable view of a list of objects
            </summary>
            <typeparam name="ContentsType">The underlying type</typeparam>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstList`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Construct a read-only view of an existing list
            </summary>
            <param name="underlyingList"></param>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstList`1.#ctor(MS.Swi.Data.Generic.ConstList{`0})">
            <summary>
            Construct a read-only view of an existing list
            </summary>
            <param name="underlyingList"></param>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstList`1.#ctor(`0[])">
            <summary>
            Construct a read-only view of an array as a list
            </summary>
            <param name="underlyingArray">The underlying array</param>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstList`1.GetEnumerator">
            <summary>
            The enumerator for iteration
            </summary>
            <returns>An enumerator</returns>
        </member>
        <member name="P:MS.Swi.Data.Generic.ConstList`1.Count">
            <summary>
            The number of items in the list
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Generic.ConstList`1.Item(System.Int32)">
            <summary>
            The element at the indicated list
            </summary>
            <param name="index">The index</param>
            <returns>The element</returns>
        </member>
        <member name="T:MS.Swi.Data.Generic.ConstList`2">
            <summary>
            An uneditable view of a list of objects which also have const interfaces that can be exposed
            </summary>
            <typeparam name="IConstContentsType">The const interface (should be an IConst...)</typeparam>
            <typeparam name="ContentsType">The underlying implementation (should be an IConst...)</typeparam>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstList`2.#ctor(System.Collections.Generic.List{`1})">
            <summary>
            Construct a read-only view of an existing list
            </summary>
            <param name="underlyingList"></param>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstList`2.#ctor(MS.Swi.Data.Generic.ConstList{`1})">
            <summary>
            Construct a read-only view of an existing list
            </summary>
            <param name="underlyingList"></param>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstList`2.#ctor(MS.Swi.Data.Generic.ConstList{`0,`1})">
            <summary>
            Construct a read-only view of an existing list
            </summary>
            <param name="underlyingList"></param>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstList`2.#ctor(`1[])">
            <summary>
            Construct a read-only view of an array as a list
            </summary>
            <param name="underlyingArray">The underlying array</param>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstList`2.GetEnumerator">
            <summary>
            The enumerator for iteration
            </summary>
            <returns>An enumerator</returns>
        </member>
        <member name="P:MS.Swi.Data.Generic.ConstList`2.Count">
            <summary>
            The number of items in the list
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Generic.ConstList`2.Item(System.Int32)">
            <summary>
            The element at the indicated list
            </summary>
            <param name="index">The index</param>
            <returns>The element</returns>
        </member>
        <member name="T:MS.Swi.Data.Generic.ConstSortedList`2">
            <summary>
            An uneditable view of a sorted list of objects
            </summary>
            <typeparam name="KeyType">The key of the sorted list</typeparam>
            <typeparam name="ContentsType">The underlying implementation (should be an IConst...)</typeparam>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstSortedList`2.#ctor(System.Collections.Generic.SortedList{`0,`1})">
            <summary>
            Construct a read-only view of an existing list
            </summary>
            <param name="underlyingSortedList"></param>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstSortedList`2.#ctor(MS.Swi.Data.Generic.ConstSortedList{`0,`1})">
            <summary>
            Construct a read-only view of an existing list
            </summary>
            <param name="underlyingSortedList"></param>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstSortedList`2.IndexOfKey(`0)">
            <summary>
            The index of the given key
            </summary>
            <param name="key">The key</param>
            <returns>The index</returns>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstSortedList`2.GetByIndex(System.Int32)">
            <summary>
            Get the value based on an index
            </summary>
            <param name="index">The index</param>
            <returns></returns>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstSortedList`2.ContainsKey(`0)">
            <summary>
            Does the list contain the given key
            </summary>
            <param name="key">The key</param>
            <returns>True if it contains the key, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstSortedList`2.GetEnumerator">
            <summary>
            The enumerator for iteration
            </summary>
            <returns>An enumerator</returns>
        </member>
        <member name="P:MS.Swi.Data.Generic.ConstSortedList`2.Count">
            <summary>
            The number of items in the list
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Generic.ConstSortedList`2.Item(`0)">
            <summary>
            The element at the indicated list
            </summary>
            <param name="index">The index</param>
            <returns>The element</returns>
        </member>
        <member name="T:MS.Swi.Data.Generic.ConstSortedList`3">
            <summary>
            An uneditable view of a sorted list of objects which also have const interfaces that can be exposed
            </summary>
            <typeparam name="KeyType">The key of the sorted list</typeparam>
            <typeparam name="IConstContentsType">The const interface (should be an IConst...)</typeparam>
            <typeparam name="ContentsType">The underlying implementation (should be an IConst...)</typeparam>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstSortedList`3.#ctor(System.Collections.Generic.SortedList{`0,`2})">
            <summary>
            Construct a read-only view of an existing list
            </summary>
            <param name="underlyingSortedList"></param>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstSortedList`3.#ctor(MS.Swi.Data.Generic.ConstSortedList{`0,`2})">
            <summary>
            Construct a read-only view of an existing list
            </summary>
            <param name="underlyingSortedList"></param>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstSortedList`3.#ctor(MS.Swi.Data.Generic.ConstSortedList{`0,`1,`2})">
            <summary>
            Construct a read-only view of an existing list
            </summary>
            <param name="underlyingSortedList"></param>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstSortedList`3.IndexOfKey(`0)">
            <summary>
            The index of the given key
            </summary>
            <param name="key">The key</param>
            <returns>The index</returns>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstSortedList`3.GetByIndex(System.Int32)">
            <summary>
            Get the value based on an index
            </summary>
            <param name="index">The index</param>
            <returns></returns>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstSortedList`3.ContainsKey(`0)">
            <summary>
            Does the list contain the given key
            </summary>
            <param name="key">The key</param>
            <returns>True if it contains the key, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstSortedList`3.GetEnumerator">
            <summary>
            The enumerator for iteration
            </summary>
            <returns>An enumerator</returns>
        </member>
        <member name="P:MS.Swi.Data.Generic.ConstSortedList`3.Count">
            <summary>
            The number of items in the list
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Generic.ConstSortedList`3.Item(`0)">
            <summary>
            The element at the indicated list
            </summary>
            <param name="index">The index</param>
            <returns>The element</returns>
        </member>
        <member name="T:MS.Swi.Data.Generic.ConstDictionary`2">
            <summary>
            An uneditable view of a dictionary
            </summary>
            <typeparam name="KeyType">The key type</typeparam>
            <typeparam name="ContentsType">The contents type</typeparam>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstDictionary`2.#ctor(System.Collections.Generic.Dictionary{`0,`1})">
            <summary>
            Construct the view of the underlying dictionary
            </summary>
            <param name="underlyingDictionary">The underlying dictionary</param>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstDictionary`2.#ctor(MS.Swi.Data.Generic.ConstDictionary{`0,`1})">
            <summary>
            Construct the view of the underlying dictionary
            </summary>
            <param name="underlyingDictionary">The underlying dictionary</param>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstDictionary`2.ContainsKey(`0)">
            <summary>
            Does the dictionary contain the given key
            </summary>
            <param name="key">The key</param>
            <returns>True if it contains the key, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstDictionary`2.GetEnumerator">
            <summary>
            Provide an enumeration of the contents
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Generic.ConstDictionary`2.Item(`0)">
            <summary>
            Provide access to the specified element
            </summary>
            <param name="index">The index to use</param>
            <returns>The specified element</returns>
        </member>
        <member name="P:MS.Swi.Data.Generic.ConstDictionary`2.Values">
            <summary>
            Provide direct access to all of the values
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Generic.ConstDictionary`2.Keys">
            <summary>
            Provide direct access to all of the keys
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Generic.ConstDictionary`2.Count">
            <summary>
            The number of elements in the dictionary
            </summary>
        </member>
        <member name="T:MS.Swi.Data.Generic.ConstDictionary`3">
            <summary>
            An uneditable view of the const forms of a dictionary
            </summary>
            <typeparam name="KeyType">The key type</typeparam>
            <typeparam name="IConstContentsType">The const interface type</typeparam>
            <typeparam name="ContentsType">The contents type</typeparam>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstDictionary`3.#ctor(System.Collections.Generic.Dictionary{`0,`2})">
            <summary>
            Construct the view of the underlying dictionary
            </summary>
            <param name="underlyingDictionary">The underlying dictionary</param>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstDictionary`3.#ctor(MS.Swi.Data.Generic.ConstDictionary{`0,`2})">
            <summary>
            Construct the view of the underlying dictionary
            </summary>
            <param name="underlyingDictionary">The underlying dictionary</param>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstDictionary`3.#ctor(MS.Swi.Data.Generic.ConstDictionary{`0,`1,`2})">
            <summary>
            Construct the view of the underlying dictionary
            </summary>
            <param name="underlyingDictionary">The underlying dictionary</param>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstDictionary`3.ContainsKey(`0)">
            <summary>
            Does the dictionary contain the given key
            </summary>
            <param name="key">The key</param>
            <returns>True if it contains the key, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstDictionary`3.GetEnumerator">
            <summary>
            Provide an enumeration of the contents
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Generic.ConstDictionary`3.Item(`0)">
            <summary>
            Provide access to the specified element
            </summary>
            <param name="index">The index to use</param>
            <returns>The element specified as the Const interface</returns>
        </member>
        <member name="P:MS.Swi.Data.Generic.ConstDictionary`3.Values">
            <summary>
            Provide direct access to all of the values
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Generic.ConstDictionary`3.Keys">
            <summary>
            Provide direct access to all of the keys
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Generic.ConstDictionary`3.Count">
            <summary>
            The number of elements in the dictionary
            </summary>
        </member>
        <member name="T:MS.Swi.Utilities">
            <summary>
            General system or utility functions, grouped to prevent code duplication
            </summary>
        </member>
        <member name="M:MS.Swi.Utilities.#ctor">
            <summary>
            There are no valid Utilities objects
            </summary>
        </member>
        <member name="F:MS.Swi.Utilities.ArchitectureIs64Bit">
            <summary>
            Whether or not we are running in a 64 bit CLR
            </summary>
        </member>
        <member name="M:MS.Swi.Utilities.AddToPath(System.String)">
            <summary>
            Add the specified directory to the end of the path, IF it doesn't already exist
            somewhere with in the path
            </summary>
            <param name="directory">The directory to add</param>
        </member>
        <member name="M:MS.Swi.Utilities.AddFclPaths">
            <summary>
            Add the FCL file paths to the path environment variable for this process
            </summary>
        </member>
        <member name="T:MS.Swi.Data.IConstToken">
            <summary>
            The read-only interfaces to the Token object
            </summary>
        </member>
        <member name="M:MS.Swi.Data.IConstToken.GetValidDefinitions">
            <summary>
            Get the complete set of valid definitions we could apply
            </summary>
            <returns>The set</returns>
        </member>
        <member name="M:MS.Swi.Data.IConstToken.GetContents(System.String)">
            <summary>
            Get the associated contents object given an FCL definition name and a 
            native representation. Note that this will NOT go past a split contents if the
            transformation requires all the data to be available before it can be transformed.
            </summary>
            <param name="fclDefinition">The definition to look for or null if the definition should not be checked</param>
            <returns>The matching parent data contents, or null if one could not be found</returns>
        </member>
        <member name="M:MS.Swi.Data.IConstToken.CalculateSignature">
            <summary>
            Calculate a hashed signature for this token
            </summary>
            <returns>The token signature</returns>
        </member>
        <member name="M:MS.Swi.Data.IConstToken.TrimSplitPoints(System.Collections.IEnumerable)">
            <summary>
            Trim out zero length split points from the specified set (including split points at the ends)
            </summary>
            <param name="splitPoints">The split points to analyzer</param>
            <returns>The new set of split points</returns>
        </member>
        <member name="P:MS.Swi.Data.IConstToken.Contents">
            <summary>
            The contents object of the token. Note that for reference types, this will invoke
            a Clone() operation.
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstToken.ContentsNativeType">
            <summary>
            The native type of the token object
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstToken.IsStatic">
            <summary>
            Whether or not this is a static token (i.e. not dependent on other tokens)
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstToken.IsDerived">
            <summary>
            Whether or not this is a derived token (i.e. dependent on one or more other tokens)
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstToken.Definition">
            <summary>
            The definition of the token type
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstToken.Identifier">
            <summary>
            The identifier associated with the token
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstToken.Position">
            <summary>
            The position of the token
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstToken.References">
            <summary>
            The token references associated with the token
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstToken.IsImmutable">
            <summary>
            Whether or not the contents of this token have been defined as being IsImmutable
            </summary>
        </member>
        <member name="T:MS.Swi.Data.Token">
            <summary>
            The representation of data in the DataMap
            </summary>
        </member>
        <member name="M:MS.Swi.Data.Token.#ctor(MS.Swi.Data.ElementDefinition,System.String,MS.Swi.Data.TokenPosition,MS.Swi.Data.DataContents,MS.Swi.Data.TokenRestrictions,System.Collections.Generic.Dictionary{System.String,MS.Swi.Data.TokenReference},MS.Swi.Data.Token.CalculateContentsDelegate)">
            <summary>
            Construct a token based on a definition, position, and contents. 
            </summary>
            <param name="definition">The type of the token</param>
            <param name="identifier">The identifier for the token (null will be silently changed to an empty string)</param>
            <param name="position">The position of the token in the DataMap</param>
            <param name="contents">The contents of the token</param>
            <param name="restrictions">The restrictions that apply to the token (or null).</param>
            <param name="references">The reference table for the token (or null). If there are references, there must be a delegate, and visa versa</param>
            <param name="calculationDelegate">The calculation delegate for the token (or null). If there are references, there must be a delegate, and visa versa</param>
        </member>
        <member name="M:MS.Swi.Data.Token.#ctor(MS.Swi.Data.TokenPosition,MS.Swi.Data.Token)">
            <summary>
            Copy constructor for the Token class, to create a duplicate token with the specified position
            </summary>
            <param name="position">The position of the new token</param>
            <param name="sourceToken">The source token</param>
        </member>
        <member name="M:MS.Swi.Data.Token.GetValidDefinitions">
            <summary>
            Get the complete set of valid definitions we could apply
            </summary>
            <returns>The set</returns>
        </member>
        <member name="M:MS.Swi.Data.Token.MS#Swi#Data#IConstToken#GetContents(System.String)">
            <summary>
            Get the associated contents object given an FCL definition name and a 
            native representation. Note that this will NOT go past a split contents if the
            transformation requires all the data to be available before it can be transformed.
            </summary>
            <param name="fclDefinition">The definition to look for or null if the definition should not be checked</param>
            <returns>The matching parent data contents, or null if one could not be found</returns>
        </member>
        <member name="M:MS.Swi.Data.Token.GetContents(System.String)">
            <summary>
            Get the associated contents object given an FCL definition name and a 
            native representation. Note that this will NOT go past a split contents if the
            transformation requires all the data to be available before it can be transformed.
            </summary>
            <param name="fclDefinition">The definition to look for or null if the definition should not be checked</param>
            <returns>The matching parent data contents, or null if one could not be found</returns>
        </member>
        <member name="M:MS.Swi.Data.Token.CalculateSignature">
            <summary>
            Calculate a hashed signature for this token
            </summary>
            <returns>The token signature</returns>
        </member>
        <member name="M:MS.Swi.Data.Token.TrimSplitPoints(System.Collections.IEnumerable)">
            <summary>
            Trim out zero length split points from the specified set (including split points at the ends)
            </summary>
            <param name="splitPoints">The split points to analyzer</param>
            <returns>The new set of split points</returns>
        </member>
        <member name="M:MS.Swi.Data.Token.AddRestrictions(MS.Swi.Data.IConstTokenRestrictions)">
            <summary>
            Add the new restrictions to the existing restrictions. 
            </summary>
            <param name="newRestrictions">The new restrictions</param>
        </member>
        <member name="M:MS.Swi.Data.Token.AddReferences(System.Collections.Generic.Dictionary{System.String,MS.Swi.Data.TokenReference})">
            <summary>
            Add the new references to the existing reference set. Note that the new references
            must not contradict an existing reference in the existing table
            </summary>
            <param name="newReferences">The new references</param>
        </member>
        <member name="P:MS.Swi.Data.Token.Position">
            <summary>
            The position of the token
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Token.Definition">
            <summary>
            The definition of the token
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Token.Identifier">
            <summary>
            The value associated with the token
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Token.Contents">
            <summary>
            Provide a copy of the contents of the token. Note that for reference types, this will
            invoke a Clone() operation.
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Token.ContentsNativeType">
            <summary>
            The native type of the contents object
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Token.IsStatic">
            <summary>
            Whether or not this is a static token (i.e. not dependent on other tokens)
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Token.IsDerived">
            <summary>
            Whether or not this is a derived token (i.e. dependent on one or more other tokens)
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Token.IsImmutable">
            <summary>
            Whether or not the contents of this token have been defined as being IsImmutable
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Token.IsValid">
            <summary>
            Whether or not this token has valid contents
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Token.AssociatedContents">
            <summary>
            The associated contents object. This is tightly coupled to the 
            contents object (which has a paired associated token)
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Token.MS#Swi#Data#IConstToken#References">
            <summary>
            The read-only view of the const form of the references
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Token.References">
            <summary>
            The read-only view of the references
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Token.CalculationDelegate">
            <summary>
            The calculation delegate
            </summary>
        </member>
        <member name="T:MS.Swi.Data.Token.CalculateContentsDelegate">
            <summary>
            Calculate the contents of an element given the references that the contents are based on
            </summary>
            <param name="informationSource">The contents information source</param>
            <param name="targetContents">The contents object that is being calculated</param>
            <param name="references">The references</param>
            <returns>The new contents</returns>
        </member>
        <member name="T:MS.Swi.Data.IConstDataMap">
            <summary>
            A const (i.e. true Read Only) access interface to a DataMap
            </summary>
        </member>
        <member name="M:MS.Swi.Data.IConstDataMap.TokenIsInMap(MS.Swi.Data.IConstToken)">
            <summary>
            Whether or not the specified token is in the map at its alledged location
            </summary>
            <param name="token">The token</param>
            <returns>True if it is in the map, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.IConstDataMap.FirstToken">
            <summary>
            The first token in the DataMap
            </summary>
            <returns>The first token in the DataMap, or null if the DataMap has no tokens</returns>
        </member>
        <member name="M:MS.Swi.Data.IConstDataMap.NextToken(MS.Swi.Data.IConstToken,System.Boolean)">
            <summary>
            The next token in the DataMap
            </summary>
            <param name="referenceToken">The token this is in reference to</param>
            <param name="spanRootElements">Whether or not to cross root elements</param>
            <returns>The next token, or null if there is no matching next token</returns>
        </member>
        <member name="M:MS.Swi.Data.IConstDataMap.PreviousToken(MS.Swi.Data.IConstToken,System.Boolean)">
            <summary>
            The previous token in the DataMap
            </summary>
            <param name="referenceToken">The token this is in reference to</param>
            <param name="spanRootElements">Whether or not to cross root elements</param>
            <returns>The previous token, or null if there is no matching previous token</returns>
        </member>
        <member name="M:MS.Swi.Data.IConstDataMap.NextToken(MS.Swi.Data.TokenPosition,System.Boolean)">
            <summary>
            The next token in the DataMap. If there is no token at the reference position, the 
            spanRootElements argument will be ignored, and the next token will be returned.
            </summary>
            <param name="referencePosition">The reference position</param>
            <param name="spanRootElements">Whether or not to cross root elements</param>
            <returns>The next token, or null if there is no matching next token</returns>
        </member>
        <member name="M:MS.Swi.Data.IConstDataMap.PreviousToken(MS.Swi.Data.TokenPosition,System.Boolean)">
            <summary>
            The previous token in the DataMap. If there is no token at the reference position, the 
            spanRootElements argument will be ignored, and the previous token will be returned.
            </summary>
            <param name="referencePosition">The reference position</param>
            <param name="spanRootElements">Whether or not to cross root elements</param>
            <returns>The previous token, or null if there is no matching previous token</returns>
        </member>
        <member name="P:MS.Swi.Data.IConstDataMap.Definitions">
            <summary>
            Access to the definitions used by the DataMap
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataMap.Transformations">
            <summary>
            Access to the transformations used by the DataMap
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataMap.Tokens">
            <summary>
            Access to the data tokens found
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataMap.Encapsulations">
            <summary>
            Access to the encapsulations found
            </summary>
        </member>
        <member name="T:MS.Swi.Data.DataMap">
            <summary>
            A DataMap is a mapping of data both according to type, and based on the original DataBuffers
            that it was derived from. The DataMap contains the type definitions, as well as the complete data
            set stored in ordinal order, along with the information as far as the amount of data remaining indexed
            by the original buffer count. 
            </summary>
        </member>
        <member name="M:MS.Swi.Data.DataMap.#ctor(MS.Swi.Data.IConstDataTransformations,MS.Swi.Data.IConstElementDefinitions)">
            <summary>
            Create an empty data map
            </summary>
            <param name="transformations">The valid transformations</param>
            <param name="definitions">The valid definitions</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.#ctor(MS.Swi.Data.IConstDataTransformations,MS.Swi.Data.IConstElementDefinitions,MS.Swi.Data.Generic.ConstList{MS.Swi.Data.IConstDataBuffer,MS.Swi.Data.DataBuffer})">
            <summary>
            Create a data map with simple byte array buffers. Note that this automatically applies 
            size restrictions to the buffers limiting them to the maximum size of the source DataBuffer
            (for all manipulations that conform to size restrictions)
            </summary>
            <param name="transformations">The valid transformations</param>
            <param name="definitions">The valid definitions</param>
            <param name="buffers">The raw data buffers to use</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.#ctor(System.String,System.String)">
            <summary>
            Create an empty data map
            </summary>
            <param name="transformationFileName">The file name for the valid transformation table</param>
            <param name="definitionFileName">The file name for the valid definitions</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.FindTransformations(System.String[])">
            <summary>
            Find the set of transformations defined by name. If a transformation
            cannot be found, this will throw an exception. If the array of names is empty or null,
            it will return a null array.
            </summary>
            <param name="transformationNames">The transformation names</param>
            <returns>The transformation names</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.CreateReferences(System.Object[])">
            <summary>
            Create references, based on a variable string of arguments.
            
            The argument sequence is:
            
            	String: A reference name - Note that this MUST end in a ':'
            	TokenReference.TokenReferenceType: A reference type
            
            	Followed by one or more of any of the following (note that the order IS important):
            	TokenPosition or IConstToken: A reference to the contents of the specified token
            	String (ElementDefinition name),TokenPosition: A reference to the first contents of the specified token of the given type
            
            	OR
            
            	String: A reference name - Note that this MUST end in a ':'
            	Followed by one or more TokenReference objects
            
            Note that MULTIPLE labels can be defined (i.e. the entire sequence can repeat)
            </summary>
            <param name="arguments">The list of arguments for the reference creation</param>
            <returns>The reference table</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.CreateAnonymousReference(MS.Swi.Data.TokenReference.TokenReferenceType,System.Object[])">
            <summary>
            Create references, based on a variable string of arguments.
            
            The argument sequence is:
            
            	One or more of any of the following (note that the order IS important):
            	TokenPosition or IConstToken: A reference to the contents of the specified token
            	String (ElementDefinition name),TokenPosition or IConstToken: A reference to the first contents of the specified token of the given type
            
            An ArgumentException will be thrown if there are no references specified
            </summary>
            <param name="referenceType">The type of reference</param>
            <param name="arguments">The list of arguments for the reference creation</param>
            <returns>The unnamed reference</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.CreateToken(MS.Swi.Data.TokenPosition,MS.Swi.Data.ElementDefinition,System.String,MS.Swi.Data.DataContents,MS.Swi.Data.TokenRestrictions,System.Collections.Generic.Dictionary{System.String,MS.Swi.Data.TokenReference},MS.Swi.Data.Token.CalculateContentsDelegate)">
            <summary>
            Create a token that is not attached to any existing root token in the DataMap
            </summary>
            <param name="position">The token position</param>
            <param name="definition">The token definition</param>
            <param name="identifier">The identifier for the token (null will be silently turned into an empty string)</param>
            <param name="contents">The contents</param>
            <param name="restrictions">The restrictions which apply to the token</param>
            <param name="references">The references which apply to the token</param>
            <param name="calculationDelegate">The calculation delegate to use with the token</param>
            <returns>The constructed token</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.CreateToken(MS.Swi.Data.TokenPosition,System.Object,System.String,System.String,System.String[],MS.Swi.Data.TokenRestrictions,System.Collections.Generic.Dictionary{System.String,MS.Swi.Data.TokenReference},MS.Swi.Data.Token.CalculateContentsDelegate)">
            <summary>
            Create a token that is not attached to any existing root token in the DataMap
            </summary>
            <param name="position">The token position</param>
            <param name="contents">The contents</param>
            <param name="tokenDefinition">The definition to apply</param>
            <param name="identifier">The identifier for the token (null will be silently turned into an empty string)</param>
            <param name="transformationNames">The transformations to apply</param>
            <param name="restrictions">The restrictions which apply to the token</param>
            <param name="references">The references which apply to the token</param>
            <param name="calculationDelegate">The calculation delegate to use with the token</param>
            <returns>The constructed token</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Insert(MS.Swi.Data.TokenPosition,MS.Swi.Data.Token)">
            <summary>
            Use the AttemptToAdd method to try to add a token to the DataMap, throwing an invalid operation
            exception if the token could not be added
            </summary>
            <param name="position">The position</param>
            <param name="token">The token</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.CanInsertToken(MS.Swi.Data.TokenPosition,MS.Swi.Data.Token,MS.Swi.Data.DataContents@,MS.Swi.Data.DataContents@)">
            <summary>
            Determine if we can insert a token at the given position, and if we can, whether or not we will need
            to change the ancestry of the token to make it work
            </summary>
            <param name="position">The selected position</param>
            <param name="token">The token to be inserted</param>
            <param name="selectedChild">The child contents that should be modified for the insertion, or null if no change is needed</param>
            <param name="selectedParent">The parent that should be modified for the insertion, or null if no change is needed</param>
            <returns>True if the token can be inserted in that position, False if not</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.AttemptToInsert(MS.Swi.Data.TokenPosition,MS.Swi.Data.Token)">
            <summary>
            Given a token, insert it into the TokenList.
            </summary>
            <param name="position">The position</param>
            <param name="token">The token</param>
            <returns>True if it could be integrated in, false if there is a conflict</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.AttemptToAdoptSiblingTokenContents(MS.Swi.Data.Token,MS.Swi.Data.Token)">
            <summary>
            Attempt to adopt the token into a common ancestor with its prospective sibling
            </summary>
            <param name="prospectiveSibling">The prospective sibling token</param>
            <param name="token">The token being adopted</param>
            <returns>True if it was adopted, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.CanAdoptSiblingTokenContents(MS.Swi.Data.Token,MS.Swi.Data.Token,MS.Swi.Data.DataContents@,MS.Swi.Data.DataContents@)">
            <summary>
            Determine if a token can descend from an ancestor of its prospective sibling, and if so, where it 
            should descend from
            </summary>
            <param name="prospectiveSibling">The prospective sibling token</param>
            <param name="token">The token being adopted</param>
            <param name="selectedChild">The child that can be adopted, or null if there is no need for adoption. Note that it is possible for null to be returned when we return true.</param>
            <param name="selectedParent">The parent adoption point, or null if there is no need for adoption. Note that it is possible for null to be returned when we return true</param>
            <returns>True if it can be adopted, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.CanAdoptTokenContents(MS.Swi.Data.DataContents,MS.Swi.Data.Token,MS.Swi.Data.DataContents@)">
            <summary>
            Determine if it is possible to adopt the Token to the prospective parent, and if it is possible,
            return the DataContents that should be adopted in to the prospective parent
            </summary>
            <param name="prospectiveParent">The prospective parent</param>
            <param name="token">The token</param>
            <param name="selectedChild">The child that can be adopted, or null if there is no need for adoption. Note that it is possible for null to be returned when we return true.</param>
            <returns>True if the Token can be adopted, False if not</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.AttemptToAdoptTokenContents(MS.Swi.Data.DataContents,MS.Swi.Data.Token)">
            <summary>
            Add the contents of a specific token into a prospective parent token, if we can. We attempt to move
            as much of the parent tree of this token as we can
            </summary>
            <param name="prospectiveParent">The prospective parent</param>
            <param name="token">The token</param>
            <returns>True if the inheritance chain of the token now goes through the prospective parent, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Append(System.Object,System.String,System.String[])">
            <summary>
            Append a token to the end of the DataMap. This is used only in the simple case where we are
            creating a DataMap with a single root node, and are appending onto it.
            </summary>
            <param name="contents">The contents object</param>
            <param name="tokenDefinition">The token definition</param>
            <param name="transformations">The transformations to apply</param>
            <returns>The appended token</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Append(System.Object,System.String,System.String[],MS.Swi.Data.TokenRestrictions)">
            <summary>
            Append a token to the end of the DataMap. This is used only in the simple case where we are
            creating a DataMap with a single root node, and are appending onto it.
            </summary>
            <param name="contents">The contents object</param>
            <param name="tokenDefinition">The token definition</param>
            <param name="transformations">The transformations to apply</param>
            <param name="restrictions">The restrictions to apply</param>
            <returns>The appended token</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.AppendRootToken(System.Object,System.String,System.String[])">
            <summary>
            Append a new root token (i.e. a new root element) to the end of the DataMap
            </summary>
            <param name="contents">The contents</param>
            <param name="tokenDefinition">The token definition to use</param>
            <param name="transformations">The transformations to use</param>
            <returns>The appended token</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.AppendRootToken(System.Object,System.String,System.String[],MS.Swi.Data.TokenRestrictions)">
            <summary>
            Append a new root token (i.e. a new root element) to the end of the DataMap
            </summary>
            <param name="contents">The contents</param>
            <param name="tokenDefinition">The token definition to use</param>
            <param name="transformations">The transformations to use (or null)</param>
            <param name="restrictions">The restrictions to apply to the new token (or null)</param>
            <returns>The appended token</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Append(MS.Swi.Data.TokenPosition,System.Object,System.String,System.String[])">
            <summary>
            Append a token after the token at the position given. Note that this may result
            in the renumber of tokens (for example, if we want to append after 0.1.1 and there is 
            already a 0.1.2, we would end up with 0.1.1.0, and 0.1.1.1 for our two tokens).
            
            If the position does not have a corresponding token, we will throw an exception
            </summary>
            <param name="position">The position</param>
            <param name="contents">The contents</param>
            <param name="tokenDefinition">The token definition to use</param>
            <param name="transformations">The transformations to use</param>
            <returns>The appended token</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Append(MS.Swi.Data.TokenPosition,System.Object,System.String,System.String[],MS.Swi.Data.TokenRestrictions)">
            <summary>
            Append a token after the token at the position given. Note that this may result
            in the renumber of tokens (for example, if we want to append after 0.1.1 and there is 
            already a 0.1.2, we would end up with 0.1.1.0, and 0.1.1.1 for our two tokens).
            
            If the position does not have a corresponding token, we will throw an exception
            </summary>
            <param name="position">The position</param>
            <param name="contents">The contents</param>
            <param name="tokenDefinition">The token definition to use</param>
            <param name="transformations">The transformations to use</param>
            <param name="restrictions">The restrictions to apply</param>
            <returns>The appended token</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Append(MS.Swi.Data.IConstToken,System.Object,System.String,System.String[])">
            <summary>
            Append a token after the token given. Note that this may result
            in the renumber of tokens (for example, if we want to append after 0.1.1 and there is 
            already a 0.1.2, we would end up with 0.1.1.0, and 0.1.1.1 for our two tokens).
            
            If the current token is not part of the DataMap, we will throw an exception
            </summary>
            <param name="currentToken">The corresponding token</param>
            <param name="contents">The contents</param>
            <param name="tokenDefinition">The token definition to use</param>
            <param name="transformations">The transformations to use</param>
            <returns>The appended token</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Append(MS.Swi.Data.IConstToken,System.Object,System.String,System.String[],MS.Swi.Data.TokenRestrictions)">
            <summary>
            Append a token after the token given. Note that this may result
            in the renumber of tokens (for example, if we want to append after 0.1.1 and there is 
            already a 0.1.2, we would end up with 0.1.1.0, and 0.1.1.1 for our two tokens).
            
            If the current token is not part of the DataMap, we will throw an exception
            </summary>
            <param name="currentToken">The corresponding token</param>
            <param name="contents">The contents</param>
            <param name="tokenDefinition">The token definition to use</param>
            <param name="transformations">The transformations to use</param>
            <param name="restrictions">The restrictions to apply</param>
            <returns>The appended token</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Insert(MS.Swi.Data.TokenPosition,System.Object,System.String,System.String[])">
            <summary>
            Insert a token before the specified position. Note that this may result
            in the renumber of tokens (for example, if we want to insert before 0.1.1 and there is 
            already a 0.1.0, we would end up with 0.1.1.0, and 0.1.1.1 for our two tokens).
            
            If the position does not have a corresponding token, we will throw an exception
            </summary>
            <param name="position">The position</param>
            <param name="contents">The contents</param>
            <param name="tokenDefinition">The token definition to use</param>
            <param name="transformations">The transformations to use</param>
            <returns>The inserted token</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Insert(MS.Swi.Data.TokenPosition,System.Object,System.String,System.String[],MS.Swi.Data.TokenRestrictions)">
            <summary>
            Insert a token before the specified position. Note that this may result
            in the renumber of tokens (for example, if we want to insert before 0.1.1 and there is 
            already a 0.1.0, we would end up with 0.1.1.0, and 0.1.1.1 for our two tokens).
            
            If the position does not have a corresponding token, we will throw an exception
            </summary>
            <param name="position">The position</param>
            <param name="contents">The contents</param>
            <param name="tokenDefinition">The token definition to use</param>
            <param name="transformations">The transformations to use</param>
            <param name="restrictions">The restrictions to apply</param>
            <returns>The inserted token</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Insert(MS.Swi.Data.IConstToken,System.Object,System.String,System.String[])">
            <summary>
            Insert a token before the token given. Note that this may result
            in the renumber of tokens (for example, if we want to append after 0.1.1 and there is 
            already a 0.1.2, we would end up with 0.1.1.0, and 0.1.1.1 for our two tokens).
            
            If the current token is not part of the DataMap, we will throw an exception
            </summary>
            <param name="currentToken">The corresponding token</param>
            <param name="contents">The contents</param>
            <param name="tokenDefinition">The token definition to use</param>
            <param name="transformations">The transformations to use</param>
            <returns>The appended token</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Insert(MS.Swi.Data.IConstToken,System.Object,System.String,System.String[],MS.Swi.Data.TokenRestrictions)">
            <summary>
            Insert a token before the token given. Note that this may result
            in the renumber of tokens (for example, if we want to append after 0.1.1 and there is 
            already a 0.1.2, we would end up with 0.1.1.0, and 0.1.1.1 for our two tokens).
            
            If the current token is not part of the DataMap, we will throw an exception
            </summary>
            <param name="currentToken">The corresponding token</param>
            <param name="contents">The contents</param>
            <param name="tokenDefinition">The token definition to use</param>
            <param name="transformations">The transformations to use</param>
            <param name="restrictions">The restrictions to apply</param>
            <returns>The appended token</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Protect(MS.Swi.Data.IConstToken)">
            <summary>
            Mark the specified token contents as immutable, protecting them from any change
            </summary>
            <param name="token">The token being marked immutable</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Protect(MS.Swi.Data.TokenPosition)">
            <summary>
            Mark the specified token contents as immutable, protecting them from any change
            </summary>
            <param name="tokenPosition">The the position of the token being marked immutable</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.ProtectRoot(MS.Swi.Data.IConstToken)">
            <summary>
            Mark the entire root element that the specified token belongs to as immutable
            protecting all tokens with the same RootPosition from modification
            </summary>
            <param name="token">The token whose root element is to be marked as immutable</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.ProtectRoot(MS.Swi.Data.TokenPosition)">
            <summary>
            Mark the entire root element that the specified token position belongs to as immutable
            protecting all tokens with the same RootPosition from modification
            </summary>
            <param name="tokenPosition">The position of the token whose root element is to be marked as immutable</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.ProtectRoot(System.UInt32)">
            <summary>
            Mark the entire root element as immutable protecting all tokens with the same RootPosition
            from modification.
            </summary>
            <param name="rootPosition">The root position</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Duplicate(MS.Swi.Data.IConstToken)">
            <summary>
            Duplicate the specified token, placing the duplicate token after the existing token
            </summary>
            <param name="currentToken">The token to duplicate</param>
            <returns>The constructed token or null if it could not be duplicated</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Duplicate(MS.Swi.Data.TokenPosition)">
            <summary>
            Duplicate the specified token, placing the duplicate token after the existing token
            </summary>
            <param name="position">The position of the token to duplicate</param>
            <returns>The constructed token or null if it could not be duplicated</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Encapsulate(System.String,System.String,System.Object[])">
            <summary>
            Construct an encapsulation given a set of references
            
            The format of the arguments is:
            	Label (String) - Note that this MUST end in a ':'
            	[Optional] Element name for the first contents of the reference that is of the specified definition (String)
            	TokenPosition of the reference (TokenPosition)
                [Repeat as desired]
            </summary>
            <param name="definitionName">The encapsulation definition to use</param>
            <param name="identifier">The identifier for the encapsulation, or null if there is no identifier</param>
            <param name="references">The reference definition as described above</param>
            <returns>The constructed encapsulation, or null if an equivalent encapsulation already existed</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.AddEncapsulationReference(System.Collections.Generic.List{MS.Swi.Data.DataContents},MS.Swi.Data.TokenPosition@,System.String@)">
            <summary>
            Add an encapsulation reference to the list
            </summary>
            <param name="referenceList">The reference list</param>
            <param name="position">The position of the reference</param>
            <param name="definitionName">The target definition, or null if the default should be used</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Split(MS.Swi.Data.TokenPosition,System.UInt32[])">
            <summary>
            Split the existing token up according to the split points, and create the new tokens.
            
            Notes:
            If the token cannot be found at the position given, we will throw an exception.
            This does NOT enforce the Severable attribute of tokens, because the split often occurs before refinements
            Type is preserved to the child tokens
            Restrictions are preserved to the child tokens
            If there is a split point provided which is also the length of the parent contents, it will not
            create a token
            </summary>
            <param name="position">The position of the token to split</param>
            <param name="splitPoints">The split points</param>
            <returns>The list of child tokens in order by split points</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Split(MS.Swi.Data.TokenPosition,System.Collections.IEnumerable)">
            <summary>
            Split the existing token up according to the split points, and create the new tokens.
            
            Notes:
            If the token cannot be found at the position given, we will throw an exception.
            This does NOT enforce the Severable attribute of tokens, because the split often occurs before refinements
            However, it DOES enforce the Singleton attribute
            Type is preserved to the child tokens
            Restrictions are preserved to the child tokens
            </summary>
            <param name="position">The position of the token to split</param>
            <param name="splitPoints">The split points</param>
            <returns>The list of child tokens in order by split points</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Split(MS.Swi.Data.IConstToken,System.UInt32[])">
            <summary>
            Split the existing token up according to the split points, and create the new tokens.
            
            Notes:
            If the token cannot be found at the position given, we will throw an exception.
            This does NOT enforce the Severable attribute of tokens, because the split often occurs before refinements
            However, it DOES enforce the Singleton attribute
            Type is preserved to the child tokens
            Restrictions are preserved to the child tokens
            If there is a split point provided which is also the length of the parent contents, it will not
            create a token
            </summary>
            <param name="token">The token to split</param>
            <param name="splitPoints">The split points</param>
            <returns>The list of child tokens in order by split points</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Split(MS.Swi.Data.IConstToken,System.Collections.IEnumerable)">
            <summary>
            Split the existing token up according to the split points, and create the new tokens.
            
            Notes:
            If the token cannot be found at the position given, we will throw an exception.
            This does NOT enforce the Severable attribute of tokens, because the split often occurs before refinements
            However, it DOES enforce the Singleton attribute
            Type is preserved to the child tokens
            Restrictions are preserved to the child tokens
            </summary>
            <param name="token">The token to split</param>
            <param name="splitPoints">The split points</param>
            <returns>The list of child tokens in order by split points</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Split(MS.Swi.Data.IConstToken)">
            <summary>
            Split the existing token into equally (and minimally) sized sub-tokens.
            
            Notes:
            If the token cannot be found at the position given, we will throw an exception.
            This does NOT enforce the Severable attribute of tokens, because the split often occurs before refinements
            However, it DOES enforce the Singleton attribute
            Type is preserved to the child tokens
            </summary>
            <param name="token">The token to split</param>
            <returns>The list of child tokens in order by split points</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Split(MS.Swi.Data.TokenPosition)">
            <summary>
            Split the existing token into equally (and minimally) sized sub-tokens.
            
            Notes:
            If the token cannot be found at the position given, we will throw an exception.
            This does NOT enforce the Severable attribute of tokens, because the split often occurs before refinements
            However, it DOES enforce the Singleton attribute
            Type is preserved to the child tokens.  
            </summary>
            <param name="position">The position of the token to split</param>
            <returns>The list of child tokens in order by split points</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Refine(MS.Swi.Data.TokenPosition,System.String,System.String[])">
            <summary>
            Change the definition and encoding of the token at the given position
            </summary>
            <param name="position">The position of the token</param>
            <param name="definitionName">The name of the new definition</param>
            <param name="transformationNames">The transformation names to apply</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Refine(MS.Swi.Data.TokenPosition,MS.Swi.Data.TokenRestrictions)">
            <summary>
            Apply additional restrictions to an existing token
            </summary>
            <param name="position">The position of the token</param>
            <param name="restrictions">The new restrictions</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Refine(MS.Swi.Data.TokenPosition,System.String,System.Collections.Generic.Dictionary{System.String,MS.Swi.Data.TokenReference},MS.Swi.Data.Token.CalculateContentsDelegate)">
            <summary>
            Apply a new type and derivation rules to an existing token
            </summary>
            <param name="position">The position of the token</param>
            <param name="definitionName">The name of the new definition</param>
            <param name="references">The references to use</param>
            <param name="calculationDelegate">The calculation delegate to use</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Refine(MS.Swi.Data.TokenPosition,System.String,System.Collections.Generic.Dictionary{System.String,MS.Swi.Data.TokenReference},System.String)">
            <summary>
            Apply a new type and derivation rules to an existing token
            </summary>
            <param name="position">The position of the token</param>
            <param name="definitionName">The name of the new definition</param>
            <param name="references">The references to use</param>
            <param name="calculationDelegateName">The calculation delegate to use</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Refine(MS.Swi.Data.TokenPosition,System.String,System.String[],MS.Swi.Data.TokenRestrictions,System.Collections.Generic.Dictionary{System.String,MS.Swi.Data.TokenReference},System.String)">
            <summary>
            Change the definition of a token at a given position. 
            </summary>
            <param name="position">The position of the token</param>
            <param name="definitionName">The name of the new definition (or null if it is unchanged)</param>
            <param name="transformationNames">The transformation name to apply (or null if it is unchanged) </param>
            <param name="restrictions">Additional restrictions to apply to the token (or null if it is unchanged)</param>
            <param name="references">References to apply to the token (or null if it is unchanged)</param>
            <param name="calculationDelegateName">Calculation delegate to apply to the token (or null if it is unchanged)</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Refine(MS.Swi.Data.TokenPosition,System.String,System.String[],MS.Swi.Data.TokenRestrictions,System.Collections.Generic.Dictionary{System.String,MS.Swi.Data.TokenReference},MS.Swi.Data.Token.CalculateContentsDelegate)">
            <summary>
            Change the definition of a token at a given position. 
            </summary>
            <param name="position">The position of the token</param>
            <param name="definitionName">The name of the new definition (or null if it is unchanged)</param>
            <param name="transformationNames">The transformation name to apply (or null if it is unchanged) </param>
            <param name="restrictions">Additional restrictions to apply to the token (or null if it is unchanged)</param>
            <param name="references">References to apply to the token (or null if it is unchanged)</param>
            <param name="calculationDelegate">Calculation delegate to apply to the token (or null if it is unchanged)</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Refine(MS.Swi.Data.IConstEncapsulation,System.String,System.String)">
            <summary>
            Refine the definition of an existing encapsulation OR its equivalent. Note that the refinement
            will only be applied if the identifier is a refinement of the existing encapsulation. If the 
            encapsulation has already been refined past that point, this will be ignored.
            </summary>
            <param name="encapsulation">The encapsulation to refine</param>
            <param name="identifier">The new identifier for the encapsulation, or null if the previous identifier should be preserved</param>
            <param name="definitionName">The updated definition</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Refine(MS.Swi.Data.IConstToken,System.String,System.String[])">
            <summary>
            Change the definition and encoding of the token
            </summary>
            <param name="token">The token to refine</param>
            <param name="definitionName">The name of the new definition</param>
            <param name="transformationNames">The transformation names to apply</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Refine(MS.Swi.Data.IConstToken,MS.Swi.Data.TokenRestrictions)">
            <summary>
            Apply additional restrictions to an existing token
            </summary>
            <param name="token">The token to refine</param>
            <param name="restrictions">The new restrictions</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Refine(MS.Swi.Data.IConstToken,System.String,System.Collections.Generic.Dictionary{System.String,MS.Swi.Data.TokenReference},MS.Swi.Data.Token.CalculateContentsDelegate)">
            <summary>
            Apply a new type and derivation rules to an existing token
            </summary>
            <param name="token">The token to refine</param>
            <param name="definitionName">The name of the new definition</param>
            <param name="references">The references to use</param>
            <param name="calculationDelegate">The calculation delegate to use</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Refine(MS.Swi.Data.IConstToken,System.String,System.Collections.Generic.Dictionary{System.String,MS.Swi.Data.TokenReference},System.String)">
            <summary>
            Apply a new type and derivation rules to an existing token
            </summary>
            <param name="token">The token to refine</param>
            <param name="definitionName">The name of the new definition</param>
            <param name="references">The references to use</param>
            <param name="calculationDelegateName">The calculation delegate to use</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Refine(MS.Swi.Data.IConstToken,System.String,System.String[],MS.Swi.Data.TokenRestrictions,System.Collections.Generic.Dictionary{System.String,MS.Swi.Data.TokenReference},System.String)">
            <summary>
            Change the definition of a token at a given position. 
            </summary>
            <param name="token">The token to refine</param>
            <param name="definitionName">The name of the new definition (or null if it is unchanged)</param>
            <param name="transformationNames">The transformation name to apply (or null if it is unchanged) </param>
            <param name="restrictions">Additional restrictions to apply to the token (or null if it is unchanged)</param>
            <param name="references">References to apply to the token (or null if it is unchanged)</param>
            <param name="calculationDelegateName">Calculation delegate to apply to the token (or null if it is unchanged)</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Refine(MS.Swi.Data.IConstToken,System.String,System.String[],MS.Swi.Data.TokenRestrictions,System.Collections.Generic.Dictionary{System.String,MS.Swi.Data.TokenReference},MS.Swi.Data.Token.CalculateContentsDelegate)">
            <summary>
            Change the definition of a token. 
            </summary>
            <param name="token">The token to refine</param>
            <param name="definitionName">The name of the new definition (or null if it is unchanged)</param>
            <param name="transformationNames">The transformation name to apply (or null if it is unchanged) </param>
            <param name="restrictions">Additional restrictions to apply to the token (or null if it is unchanged)</param>
            <param name="references">References to apply to the token (or null if it is unchanged)</param>
            <param name="calculationDelegate">Calculation delegate to apply to the token (or null if it is unchanged)</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Extract(MS.Swi.Data.IConstToken,System.String)">
            <summary>
            Transform data into an FCL Container and then extract the results
            </summary>
            <param name="token">The source for the container token</param>
            <param name="transformationName">The transformation to apply</param>
            <returns>The list of extracted tokens</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Extract(MS.Swi.Data.IConstToken)">
            <summary>
            Extract the contents of the FCL Container from the container itself
            </summary>
            <param name="token">The container token</param>
            <returns>The list of extracted tokens</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Extract(MS.Swi.Data.TokenPosition,System.String)">
            <summary>
            Transform data into an FCL Container and then extract the results
            </summary>
            <param name="position">The position of the source for the container token</param>
            <param name="transformationName">The transformation to apply</param>
            <returns>The list of extracted tokens</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Extract(MS.Swi.Data.TokenPosition)">
            <summary>
            Extract the contents of the FCL Container from the container itself
            </summary>
            <param name="position">The position of the container token</param>
            <returns>The list of extracted tokens</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.ApplyIdentifier(MS.Swi.Data.IConstToken,System.String)">
            <summary>
            Set the identifier for the specified token
            </summary>
            <param name="token">The token</param>
            <param name="identifier">The identifier string (null values will be silently changed to empty strings)</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.ApplyIdentifier(MS.Swi.Data.TokenPosition,System.String)">
            <summary>
            Set the identifier for the token at the specified position
            </summary>
            <param name="tokenPosition">The token position</param>
            <param name="identifier">The identifier string (null values will be silently changed to empty strings)</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.SwapTokens(MS.Swi.Data.TokenPosition,MS.Swi.Data.TokenPosition)">
            <summary>
            Swap two tokens
            </summary>
            <param name="firstTokenPosition">The position of the first token</param>
            <param name="secondTokenPosition">The position of the second token</param>
            <returns>True if they could be swapped, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.SwapTokens(MS.Swi.Data.IConstToken,MS.Swi.Data.IConstToken)">
            <summary>
            Swap two tokens
            </summary>
            <param name="firstToken">The first token</param>
            <param name="secondToken">The second token</param>
            <returns>True if they could be swapped, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.MoveToken(MS.Swi.Data.TokenPosition,MS.Swi.Data.TokenPosition)">
            <summary>
            Attempt to move a token from one position to another. If the token cannot be found at the
            specified position, then we will throw an exception
            </summary>
            <param name="oldPosition">The old position</param>
            <param name="newPosition">The new position</param>
            <returns>True if it worked, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.MoveToken(MS.Swi.Data.IConstToken,MS.Swi.Data.TokenPosition)">
            <summary>
            Attempt to move a token from one position to another
            </summary>
            <param name="token">The token to move</param>
            <param name="newPosition">The new position</param>
            <returns>True if it worked, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.AddDefinition(MS.Swi.Data.ElementDefinition)">
            <summary>
            Add a definition to the DataMap
            </summary>
            <param name="definition">The definition to be included</param>
            <returns>True if it was added or already exists, False if a conflicting definition of the same name already exists</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.AddTransformation(MS.Swi.Data.DataTransformation)">
            <summary>
            Add a definition to the DataMap
            </summary>
            <param name="transformation"></param>
            <returns></returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.RemoveOrphanedDefinitions">
            <summary>
            Trim out any definitions in the table which are "orphaned" (i.e. are descendents of
            definitions that don't exist). This should be done after adding a set of definitions if they
            are added dynamically.
            </summary>
        </member>
        <member name="M:MS.Swi.Data.DataMap.TokenIsInMap(MS.Swi.Data.IConstToken)">
            <summary>
            Whether or not the specified token is in the map at its alledged location
            </summary>
            <param name="token">The token</param>
            <returns>True if it is in the map, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.EquivalentEncapsulationIsInMap(MS.Swi.Data.IConstEncapsulation)">
            <summary>
            Whether or not the encapsulation is in the map
            </summary>
            <param name="encapsulation">The encapsulation</param>
            <returns>True if it is in the map, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.EquivalentEncapsulationIsInMap(MS.Swi.Data.Encapsulation)">
            <summary>
            Whether or not the encapsulation is in the map
            </summary>
            <param name="encapsulation">The encapsulation</param>
            <returns>True if it is in the map, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.FindEquivalentEncapsulation(MS.Swi.Data.IConstEncapsulation)">
            <summary>
            Find the equivalent encapsulation in the DataMap to this encapsulation
            </summary>
            <param name="encapsulation">The encapsulation to look for</param>
            <returns>The equivalent encapsulation, or null if none exists</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.FindEquivalentEncapsulation(MS.Swi.Data.Encapsulation)">
            <summary>
            Find the equivalent encapsulation in the DataMap to this encapsulation
            </summary>
            <param name="encapsulation">The encapsulation to look for</param>
            <returns>The equivalent encapsulation, or null if none exists</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.FindTokens(MS.Swi.Data.TokenPosition)">
            <summary>
            Get the sorted sublist of tokens which are "beneath" the given position (i.e.
            a position of 0.0 would include tokens at 0.0.0, 0.0.1, 0.0.2.0, and 0.0.2.1)
            </summary>
            <param name="position">The position</param>
            <returns>The list of descendents</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.FirstToken">
            <summary>
            The first token in the DataMap
            </summary>
            <returns>The first token in the DataMap, or null if the DataMap has no tokens</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.NextToken(MS.Swi.Data.IConstToken,System.Boolean)">
            <summary>
            The next token in the DataMap
            </summary>
            <param name="referenceToken">The token this is in reference to</param>
            <param name="spanRootElements">Whether or not to cross root elements</param>
            <returns>The next token, or null if there is no matching next token</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.PreviousToken(MS.Swi.Data.IConstToken,System.Boolean)">
            <summary>
            The previous token in the DataMap
            </summary>
            <param name="referenceToken">The token this is in reference to</param>
            <param name="spanRootElements">Whether or not to cross root elements</param>
            <returns>The previous token, or null if there is no matching previous token</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.NextToken(MS.Swi.Data.TokenPosition,System.Boolean)">
            <summary>
            The next token in the DataMap. If there is no token at the reference position, the 
            spanRootElements argument will be ignored, and the next token will be returned.
            </summary>
            <param name="referencePosition">The reference position</param>
            <param name="spanRootElements">Whether or not to cross root elements</param>
            <returns>The next token, or null if there is no matching next token</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.PreviousToken(MS.Swi.Data.TokenPosition,System.Boolean)">
            <summary>
            The previous token in the DataMap. If there is no token at the reference position, the 
            spanRootElements argument will be ignored, and the previous token will be returned.
            </summary>
            <param name="referencePosition">The reference position</param>
            <param name="spanRootElements">Whether or not to cross root elements</param>
            <returns>The previous token, or null if there is no matching previous token</returns>
        </member>
        <member name="P:MS.Swi.Data.DataMap.Transformations">
            <summary>
            Access to the available transformations
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataMap.Definitions">
            <summary>
            Access to the token definitions
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataMap.TokenList">
            <summary>
            The actual data token set
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataMap.Tokens">
            <summary>
            Access to the data tokens found
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataMap.EncapsulationList">
            <summary>
            Access to the encapsulations found
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataMap.Encapsulations">
            <summary>
            Access to the encapsulations found
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataMap.MS#Swi#Data#IConstDataMap#Encapsulations">
            <summary>
            Access to the encapsulations found
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataMap.MS#Swi#Data#IConstDataMap#Tokens">
            <summary>
            Access to read-only versions of the data tokens found
            </summary>
        </member>
        <member name="T:MS.Swi.Data.IConstDataBuffer">
            <summary>
            A public constant interface to the DataBuffer, that can be used to
            provide read only access to internal data members
            </summary>
        </member>
        <member name="M:MS.Swi.Data.IConstDataBuffer.CopyTo(System.Byte[],System.UInt32)">
            <summary>
            Copy the entire contents to the specified destination. Note that this requires that
            there is sufficient room
            </summary>
            <param name="destination">The destination buffer</param>
            <param name="position">The position in the destination buffer</param>
        </member>
        <member name="M:MS.Swi.Data.IConstDataBuffer.Clone">
            <summary>
            A clone of the buffer. As all the elements are simple types, this is actually a deep copy.
            </summary>
            <returns>A DataBuffer</returns>
        </member>
        <member name="P:MS.Swi.Data.IConstDataBuffer.Contents">
            <summary>
            A constant copy of the contents
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataBuffer.SizeUsed">
            <summary>
            The amount of the buffer currently used
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataBuffer.Size">
            <summary>
            The current maximum size of the buffer
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataBuffer.Item(System.UInt32)">
            <summary>
            The value at a specific location in the buffer
            </summary>
        </member>
        <member name="T:MS.Swi.Data.DataBuffer">
            <summary>
            Buffer
            	An arbitrary chunk of data, with an implicit maximum size and an explicit size
            </summary>
        </member>
        <member name="M:MS.Swi.Data.DataBuffer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:MS.Swi.Data.DataBuffer.#ctor(System.UInt32)">
            <summary>
            Constructor to create an empty buffer with the specified maximum size
            </summary>
            <param name="maximumSize">The maximum size of the buffer</param>
        </member>
        <member name="M:MS.Swi.Data.DataBuffer.#ctor(System.Byte[],System.UInt32)">
            <summary>
            Constructor to create a buffer based on an existing byte array and the
            amount of that array already in use. Note that the maximum size of the DataBuffer
            is derived in this case from the size of the array.
            </summary>
            <param name="data">The existing byte array (note that null is explicitly handled)</param>
            <param name="sizeUsed">The size of the byte array used.</param>
        </member>
        <member name="M:MS.Swi.Data.DataBuffer.#ctor(System.Byte[],System.UInt32,System.UInt32)">
            <summary>
            Constructor to create a buffer based on an existing byte array and the
            amount of that array already in use.
            </summary>
            <param name="data">The existing byte array (note that null is explicitly handled)</param>
            <param name="sizeUsed">The size of the byte array used.</param>
            <param name="maximumSize">The maximum size of the buffer</param>
        </member>
        <member name="M:MS.Swi.Data.DataBuffer.#ctor(MS.Swi.Data.IConstDataBuffer,System.UInt32,System.UInt32)">
            <summary>
            Constructor to create a buffer based on a fragment of an existing data buffer
            </summary>
            <param name="source">The source buffer</param>
            <param name="startPosition">The start position of the fragment</param>
            <param name="sizeUsed">The size of the fragment</param>
        </member>
        <member name="M:MS.Swi.Data.DataBuffer.#ctor(System.Byte[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Constructor to create a buffer based on a fragment of an existing byte array
            </summary>
            <param name="data">The source buffer</param>
            <param name="startPosition">The start position of the fragment</param>
            <param name="sizeUsed">The size of the byte array used.</param>
            <param name="maximumSize">The maximum size of the buffer</param>
        </member>
        <member name="M:MS.Swi.Data.DataBuffer.ReplaceWithOwnership(System.Byte[])">
            <summary>
            Replace the contents of this DataBuffer by taking ownership of the provided contents. This version
            does NOT change the maximum size of the Buffer, so it allows for auto-truncation.
            </summary>
            <param name="data">The data to adopt</param>
        </member>
        <member name="M:MS.Swi.Data.DataBuffer.ReplaceWithOwnership(System.Byte[],System.UInt32)">
            <summary>
            Replace the contents of this DataBuffer by taking ownership of the provided contents
            </summary>
            <param name="data">The data to adopt</param>
            <param name="maximumSize">The maximum size</param>
        </member>
        <member name="M:MS.Swi.Data.DataBuffer.Replace(MS.Swi.Data.IConstDataBuffer,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Modifier to set the buffer based on an existing data buffer and the
            amount of that array already in use.
            </summary>
            <param name="data">The existing data buffer</param>
            <param name="index">The starting index into the buffer</param>
            <param name="bufferSize">The size of the buffer being created</param>
            <param name="sizeUsed">The size of the byte array used</param>
        </member>
        <member name="M:MS.Swi.Data.DataBuffer.Append(MS.Swi.Data.IConstDataBuffer)">
            <summary>
            Append one DataBuffer onto another
            </summary>
            <param name="data">The data buffer to append</param>
        </member>
        <member name="M:MS.Swi.Data.DataBuffer.Replace(System.Byte[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Modifier to set the buffer based on an existing byte array and the
            amount of that array already in use.
            </summary>
            <param name="data">The existing byte array (note that null is explicitly handled)</param>
            <param name="index">The starting index into the buffer</param>
            <param name="bufferSize">The size of the buffer being created</param>
            <param name="sizeUsed">The size of the byte array used</param>
        </member>
        <member name="M:MS.Swi.Data.DataBuffer.AdjustInternalBuffer(System.UInt32)">
            <summary>
            Adjust the internal buffer to match the size needed
            </summary>
            <param name="sizeNeeded">The size the new buffer should be</param>
        </member>
        <member name="M:MS.Swi.Data.DataBuffer.CopyTo(System.Byte[],System.UInt32)">
            <summary>
            Copy the entire contents to the specified destination. Note that this requires that
            there is sufficient room
            </summary>
            <param name="destination">The destination buffer</param>
            <param name="position">The position in the destination buffer</param>
        </member>
        <member name="M:MS.Swi.Data.DataBuffer.ToString">
            <summary>
            Return a string description of the contents of the DataBuffer
            </summary>
            <returns>A string including the contents</returns>
        </member>
        <member name="M:MS.Swi.Data.DataBuffer.System#ICloneable#Clone">
            <summary>
            A clone of the buffer. As all the elements are simple types, this is actually a deep copy.
            </summary>
            <returns>A new buffer expressed as an object</returns>
        </member>
        <member name="M:MS.Swi.Data.DataBuffer.Clone">
            <summary>
            A clone of the buffer. As all the elements are simple types, this is actually a deep copy.
            </summary>
            <returns>A DataBuffer</returns>
        </member>
        <member name="P:MS.Swi.Data.DataBuffer.Contents">
            <summary>
            Access to deep copy of the contents of the buffer
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataBuffer.SizeUsed">
            <summary>
            The amount of the buffer used
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataBuffer.Size">
            <summary>
            The maximum size of the buffer
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataBuffer.Item(System.UInt32)">
            <summary>
            Access to individual bytes of the buffer (Set and Get). If the location is beyond the
            current size used, the size used will be extended
            </summary>
        </member>
        <member name="T:MS.Swi.Data.IConstDataTransformations">
            <summary>
            A const interface to a DataTransformations
            </summary>
        </member>
        <member name="M:MS.Swi.Data.IConstDataTransformations.Contains(System.String)">
            <summary>
            Whether or not the set of transformations contains the given transformation
            </summary>
            <param name="name">The transformation name to check</param>
            <returns>True if it contains the transformation, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.IConstDataTransformations.Clone">
            <summary>
            Clone the IConstDataTransformations into a new DataTransformations
            </summary>
            <returns>The new DataTransformations</returns>
        </member>
        <member name="M:MS.Swi.Data.IConstDataTransformations.ToXml(System.Xml.XmlDocument)">
            <summary>
            Create an Xml serialization of the object, owned by the specified document
            </summary>
            <param name="owningDocument">The owning document</param>
            <returns>The new XmlElement</returns>
        </member>
        <member name="P:MS.Swi.Data.IConstDataTransformations.Item(System.String)">
            <summary>
            The transformation associated with the name
            </summary>
            <param name="name">The transformation name</param>
            <returns>The transformation</returns>
        </member>
        <member name="T:MS.Swi.Data.DataTransformations">
            <summary>
            The DataTransformations is a mapping of logical names for transformations to
            transformation objects. It is designed to be loaded via Xml, and used in type definitions
            (which are also loaded via Xml)
            </summary>
        </member>
        <member name="M:MS.Swi.Data.DataTransformations.FromXml(MS.Swi.Data.IConstElementDefinitions,System.Xml.XmlElement)">
            <summary>
            Load the Xml serialization into the object, replacing any pre-existing settings.
            </summary>
            <param name="definitions">The token definitions to use in creating the table</param>
            <param name="sourceElement">The XmlElement that contains the object</param>
        </member>
        <member name="M:MS.Swi.Data.DataTransformations.ToXml(System.Xml.XmlDocument)">
            <summary>
            Create an Xml serialization of the object, owned by the specified document
            </summary>
            <param name="owningDocument">The owning document</param>
            <returns>The new XmlElement</returns>
        </member>
        <member name="M:MS.Swi.Data.DataTransformations.LoadFromXml(MS.Swi.Data.IConstElementDefinitions,System.Xml.XmlElement)">
            <summary>
            Add the specified data into the DataTransformation table, generating an exception if
            there are duplicate entries
            </summary>
            <param name="definitions">The token definitions to use in creating the table</param>
            <param name="sourceElement">The XML element</param>
        </member>
        <member name="M:MS.Swi.Data.DataTransformations.LoadTransformations(System.String,MS.Swi.Data.IConstElementDefinitions)">
            <summary>
            Load a set of transformations.  The filename will be searched for first as given,
            then in the local directory, and then in the FCL installation directory.
            </summary>
            <param name="fileName">The filename for the Xml file containing the definitions</param>
            <param name="definitions">The token definitions to use</param>
            <returns>The transformation set</returns>
        </member>
        <member name="M:MS.Swi.Data.DataTransformations.#ctor">
            <summary>
            Default constructors
            </summary>
        </member>
        <member name="M:MS.Swi.Data.DataTransformations.#ctor(MS.Swi.Data.DataTransformations)">
            <summary>
            A private copy constructor used to facilitate the Clone() operation
            </summary>
            <param name="source">The source transformations</param>
        </member>
        <member name="M:MS.Swi.Data.DataTransformations.Contains(System.String)">
            <summary>
            Whether or not the set of transformations contains the given transformation
            </summary>
            <param name="name">The transformation name to check</param>
            <returns>True if it contains the transformation, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.DataTransformations.Add(MS.Swi.Data.IConstDataTransformations)">
            <summary>
            Add another set of DataTransformations into this set
            </summary>
            <param name="transformations">The source transformations</param>
        </member>
        <member name="M:MS.Swi.Data.DataTransformations.Add(MS.Swi.Data.DataTransformations)">
            <summary>
            Add another set of DataTransformations into this set
            </summary>
            <param name="transformations">The source transformations</param>
        </member>
        <member name="M:MS.Swi.Data.DataTransformations.Add(MS.Swi.Data.DataTransformation)">
            <summary>
            Add an individual DataTransformation into this set
            </summary>
            <param name="transformation">The transformation</param>
            <returns>True if it was added, false if a transformation of the same name was already present</returns>
        </member>
        <member name="M:MS.Swi.Data.DataTransformations.Clone">
            <summary>
            The default clone operation
            </summary>
            <returns>The new DataTransformations as an object</returns>
        </member>
        <member name="M:MS.Swi.Data.DataTransformations.MS#Swi#Data#IConstDataTransformations#Clone">
            <summary>
            An explicit clone operation
            </summary>
            <returns>The cloned transformations as a DataTransformations</returns>
        </member>
        <member name="P:MS.Swi.Data.DataTransformations.Item(System.String)">
            <summary>
            The transformation associated with the name
            </summary>
            <param name="name">The transformation name</param>
            <returns>The transformation</returns>
        </member>
        <member name="T:MS.Swi.Data.ContainerElement">
            <summary>
            The ContainerElement class encapsulates the following data about the transformation
            	The output FCL type name
            	The actual output value
            It is used to define the output of a container transformation
            </summary>
        </member>
        <member name="M:MS.Swi.Data.ContainerElement.#ctor(System.String,System.Object)">
            <summary>
            Construct a ContainerElement given the underlying definition and contents. Note that this will
            leave any Identifier associated with the parent token unchanged
            </summary>
            <param name="definitionName">The name of the FCL type definition for the element</param>
            <param name="contents">The actual contents</param>
        </member>
        <member name="M:MS.Swi.Data.ContainerElement.#ctor(System.String,System.Object,System.String)">
            <summary>
            Construct a ContainerElement given the underlying definition and contents, and apply the
            specified Identifier to it when it is extracted. Note that an identifier of null will clear
            any inherited identifier from the parent Token.
            </summary>
            <param name="definitionName">The name of the FCL type definition for the element</param>
            <param name="contents">The actual contents</param>
            <param name="identifier">The identifier, or null if it should be cleared</param>
        </member>
        <member name="P:MS.Swi.Data.ContainerElement.DefinitionName">
            <summary>
            The name of the FCL Definition of the container element
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ContainerElement.Contents">
            <summary>
            The actual contents of the container element
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ContainerElement.IdentifierWasSpecified">
            <summary>
            Whether or not the caller specified an identifier. If an identifier was specified, then
            the resulting child token will have its identifier replaced (if it was non-null) or cleared
            (if it was null)
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ContainerElement.Identifier">
            <summary>
            The identifier associated with the container element
            </summary>
        </member>
        <member name="T:MS.Swi.Data.DataTransformation">
            <summary>
            The DataTransformation class provides the rules and functionality that convert
            data from one internal representation to another. This provides the ability to change
            the encoding and to move from the physical encoding to the logical native type.
            
            In some cases, the internal representation format will be the same (i.e. converting
            from a zipped byte array to an unzipped byte array), and the transformation only changes
            the encoding
            </summary>
        </member>
        <member name="M:MS.Swi.Data.DataTransformation.ToXml(System.Xml.XmlDocument)">
            <summary>
            Write the data transformation to Xml
            </summary>
            <param name="owningDocument"></param>
            <returns></returns>
        </member>
        <member name="M:MS.Swi.Data.DataTransformation.Create(MS.Swi.Data.IConstElementDefinitions,System.Xml.XmlElement)">
            <summary>
            Construct a DataTransformation object from an Xml description
            </summary>
            <param name="definitions">The definition table to use in finding the FCL definitions</param>
            <param name="transformation">The Xml definition of the transformation</param>
            <returns>The constructed object</returns>
        </member>
        <member name="M:MS.Swi.Data.DataTransformation.Create(MS.Swi.Data.IConstElementDefinitions,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Construct a DataTransformation object based on the specified parameters
            </summary>
            <param name="definitions">The definition table to use in finding the FCL definitions</param>
            <param name="name">The name of the transformation</param>
            <param name="sourceDefinitionName">The name of the FCL definition the source implements</param>
            <param name="outputDefinitionName">The name of the FCL definition the source implements</param>
            <param name="characteristics">The characteristics of the transformation</param>
            <param name="elementSize">The size of each output element of this transformation type (in terms of its source type )</param>
            <param name="transformationMethodName">The name of the transformation method to use</param>
            <param name="reverseTransformationMethodName">The name of the reverse transformation method to use</param>
            <returns>The constructed object</returns>
        </member>
        <member name="M:MS.Swi.Data.DataTransformation.Create(MS.Swi.Data.ElementDefinition)">
            <summary>
            Construct a container transformation for the specified output definition
            </summary>
            <param name="outputDefinition">The output definition of the container transformation</param>
            <returns>The transformation</returns>
        </member>
        <member name="M:MS.Swi.Data.DataTransformation.Create(MS.Swi.Data.IConstElementDefinitions,System.String,System.String,System.String,System.String,System.UInt32,System.String,System.String)">
            <summary>
            Construct a DataTransformation object based on the specified parameters
            </summary>
            <param name="definitions">The definition table to use in finding the FCL definitions</param>
            <param name="name">The name of the transformation</param>
            <param name="sourceDefinitionName">The name of the FCL definition the source implements</param>
            <param name="outputDefinitionName">The name of the FCL definition the source implements</param>
            <param name="characteristics">The characteristics of the transformation</param>
            <param name="elementSize">The size of each output element of this transformation type (in terms of its source type )</param>
            <param name="transformationMethodName">The name of the transformation method to use</param>
            <param name="reverseTransformationMethodName">The name of the reverse transformation method to use</param>
            <returns>The constructed object</returns>
        </member>
        <member name="M:MS.Swi.Data.DataTransformation.Equals(System.Object)">
            <summary>
            Determine if two DataTransformations are equal. Because DataTransformation objects
            are immutable, we can do a true Equals override
            </summary>
            <param name="obj">The other object</param>
            <returns>Whether or not they are equal</returns>
        </member>
        <member name="M:MS.Swi.Data.DataTransformation.GetHashCode">
            <summary>
            Create a hash code for the DataTransformation
            </summary>
            <returns>The calculated hash code</returns>
        </member>
        <member name="M:MS.Swi.Data.DataTransformation.HasCharacteristic(MS.Swi.Data.DataTransformation.CharacteristicsFlags)">
            <summary>
            Does the tramsfpr,atopm have the specified characteristic? If the characteristic is a combination of multiple
            characteristics, it will return true only if all of the characteristics are a match
            </summary>
            <param name="characteristic">The characteristic (or characteristics) to check for</param>
            <returns>True if there is an exact match, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.DataTransformation.Transform(System.Object)">
            <summary>
            Transform the source object into the output object
            </summary>
            <param name="source">The source object that is being converted</param>
            <returns>The transformed output object</returns>
        </member>
        <member name="M:MS.Swi.Data.DataTransformation.ReverseTransform(System.Object)">
            <summary>
            Transform the output object into a source object
            </summary>
            <param name="output">The object which is the output of a previous Transform call</param>
            <returns>The inversely transformed source object</returns>
        </member>
        <member name="P:MS.Swi.Data.DataTransformation.Name">
            <summary>
            The name of the transformation
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataTransformation.Characteristics">
            <summary>
            The characteristics of this transformation
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataTransformation.SourceNativeType">
            <summary>
            The native type of the contents that this transformation consumes
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataTransformation.SourceDefinition">
            <summary>
            The name of the FCL definition that this transformation consumes
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataTransformation.OutputNativeType">
            <summary>
            The native type of the contents that this transformation produces
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataTransformation.OutputDefinition">
            <summary>
            The name of the FCL definition that this transformation produces
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataTransformation.TransformationDelegateName">
            <summary>
            The name of the transformation delegate
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataTransformation.ReverseTransformationDelegateName">
            <summary>
            The name of the reverse transformation delegate
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataTransformation.ElementSize">
            <summary>
            The size of an element of this transformation output type (considering strings as char[]) 
            in terms of its source type. Note that this is not valid if the Characteristics include 
            VariableSize
            </summary>
        </member>
        <member name="T:MS.Swi.Data.DataTransformation.CharacteristicsFlags">
            <summary>
            The set of possible characteristics for a DataTransformation
            </summary>
        </member>
        <member name="F:MS.Swi.Data.DataTransformation.CharacteristicsFlags.None">
            <summary>
            No characteristics apply
            </summary>
        </member>
        <member name="F:MS.Swi.Data.DataTransformation.CharacteristicsFlags.VariableSize">
            <summary>
            The transformation will produce differently sized results depending on
            the actual contents
            </summary>
        </member>
        <member name="F:MS.Swi.Data.DataTransformation.CharacteristicsFlags.PartialTransformationValid">
            <summary>
            Sub-elements that use this transformation can be transformed, and the results will
            be the same if sub-element transformations are combined as they would be if the 
            entire element were to be transformed at once
            </summary>
        </member>
        <member name="T:MS.Swi.Data.ContainerTransformation">
            <summary>
            The ContainerTransformation transforms a single length ContainerElement[] into the underlying
            type, and visa-versa. This is used to handle the container transformations
            </summary>
        </member>
        <member name="M:MS.Swi.Data.ContainerTransformation.#ctor(MS.Swi.Data.ElementDefinition)">
            <summary>
            Construct a DataTransformation object
            </summary>
            <param name="outputDefinition">The FCL definition which represents the output</param>
        </member>
        <member name="M:MS.Swi.Data.ContainerTransformation.Transform(System.Object)">
            <summary>
            Transform the source object into the output object
            </summary>
            <param name="source">The source object that is being converted</param>
            <returns>The transformed output object</returns>
        </member>
        <member name="M:MS.Swi.Data.ContainerTransformation.ReverseTransform(System.Object)">
            <summary>
            Transform the output object(s) into a source object
            </summary>
            <param name="output">The object which is the output of a previous Transform call</param>
            <returns>The inversely transformed source object</returns>
        </member>
        <member name="P:MS.Swi.Data.ContainerTransformation.Name">
            <summary>
            The name of the transformation
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ContainerTransformation.Characteristics">
            <summary>
            The characteristics of this transformation
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ContainerTransformation.ElementSize">
            <summary>
            The size of an element of this transformation output type (considering strings as char[]) 
            in terms of its source type. Note that this is not valid if the Characteristics include 
            VariableSize
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ContainerTransformation.SourceNativeType">
            <summary>
            The native type of the contents that this transformation consumes
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ContainerTransformation.SourceDefinition">
            <summary>
            The FCL definition that this transformation consumes
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ContainerTransformation.OutputNativeType">
            <summary>
            The native type of the contents that this transformation produces
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ContainerTransformation.OutputDefinition">
            <summary>
            The name of the FCL definition that this transformation produces
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ContainerTransformation.TransformationDelegateName">
            <summary>
            The name of the transformation delegate, which is not used in a
            container transformation, and so is an empty string
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ContainerTransformation.ReverseTransformationDelegateName">
            <summary>
            The name of the reverse transformation delegate, which is not used in a
            container transformation, and so is an empty string
            </summary>
        </member>
        <member name="T:MS.Swi.Data.DataTransformation`2">
            <summary>
            The DataTransformation class provides the rules and functionality that convert
            data from one internal representation to another. This provides the ability to change
            the encoding and to move from the physical encoding to the logical native type.
            
            In some cases, the internal representation format will be the same (i.e. converting
            from a zipped byte array to an unzipped byte array), and the transformation only changes
            the encoding
            </summary>
        </member>
        <member name="M:MS.Swi.Data.DataTransformation`2.#ctor(System.String,System.String,System.UInt32,MS.Swi.Data.ElementDefinition,MS.Swi.Data.ElementDefinition,System.String,System.String)">
            <summary>
            Construct a DataTransformation object
            </summary>
            <param name="name">The name of the transformation</param>
            <param name="characteristics">The characteristics of the transformation as a string</param>
            <param name="elementSize">The size of an output element in terms of source elements</param>
            <param name="sourceDefinition">The FCL definition which represents the source</param>
            <param name="outputDefinition">The FCL definition which represents the output</param>
            <param name="transformationMethod">The transformation method name</param>
            <param name="reverseTransformationMethod">The reverse transformation method name</param>
        </member>
        <member name="M:MS.Swi.Data.DataTransformation`2.Transform(System.Object)">
            <summary>
            Transform the source object into the output object
            </summary>
            <param name="source">The source object that is being converted</param>
            <returns>The transformed output object</returns>
        </member>
        <member name="M:MS.Swi.Data.DataTransformation`2.Transform(`0)">
            <summary>
            Transform the source object into the output object
            </summary>
            <param name="source">The source object that is being converted</param>
            <returns>The transformed output object</returns>
        </member>
        <member name="M:MS.Swi.Data.DataTransformation`2.ReverseTransform(System.Object)">
            <summary>
            Transform the output object(s) into a source object
            </summary>
            <param name="output">The object which is the output of a previous Transform call</param>
            <returns>The inversely transformed source object</returns>
        </member>
        <member name="M:MS.Swi.Data.DataTransformation`2.ReverseTransform(`1)">
            <summary>
            Transform the output object(s) into a source object
            </summary>
            <param name="output">The objects which are the outputs if a previous Transform call</param>
            <returns>The inversely transformed source object</returns>
        </member>
        <member name="P:MS.Swi.Data.DataTransformation`2.Name">
            <summary>
            The name of the transformation
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataTransformation`2.Characteristics">
            <summary>
            The characteristics of this transformation
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataTransformation`2.ElementSize">
            <summary>
            The size of an element of this transformation output type (considering strings as char[]) 
            in terms of its source type. Note that this is not valid if the Characteristics include 
            VariableSize
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataTransformation`2.SourceNativeType">
            <summary>
            The native type of the contents that this transformation consumes
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataTransformation`2.SourceDefinition">
            <summary>
            The FCL definition that this transformation consumes
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataTransformation`2.OutputNativeType">
            <summary>
            The native type of the contents that this transformation produces
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataTransformation`2.OutputDefinition">
            <summary>
            The name of the FCL definition that this transformation produces
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataTransformation`2.TransformationDelegateName">
            <summary>
            The name of the transformation delegate
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataTransformation`2.ReverseTransformationDelegateName">
            <summary>
            The name of the reverse transformation delegate
            </summary>
        </member>
        <member name="T:MS.Swi.Data.DataTransformation`2.TransformationDelegate">
            <summary>
            A function which transforms the source data into the output object 
            </summary>
            <param name="source">The source object</param>
            <returns>The output object</returns>
        </member>
        <member name="T:MS.Swi.Data.DataTransformation`2.ReverseTransformationDelegate">
            <summary>
            A function which transforms the output object back into the source data
            </summary>
            <param name="output">The previous transformed output data</param>
            <returns>The reconstructed source object</returns>
        </member>
        <member name="T:MS.Swi.Data.TokenPosition">
             <summary>
             The TokenPosition defines the position of a block of data in a buffer in such a way that:
            		Sequences of zero-length fields are valid
                 Sequences of adjacent tokens can be swapped without causing conflicts
            		Insertions of new tokens are always valid
            		The original source buffer can always be determined
            		Any two positions of different lengths MUST differ before the shorter terminates
            
             This replaces the GroupOrdinalPosition and OrdinalPosition fields of all previous CTF
             implementations
             </summary>
        </member>
        <member name="M:MS.Swi.Data.TokenPosition.#ctor">
            <summary>
            Internal constructor for creating the parent and sibling positions
            </summary>
        </member>
        <member name="M:MS.Swi.Data.TokenPosition.#ctor(System.String)">
            <summary>
            Construct a TokenPosition from a dotted string representation. This will throw an
            exception if the string cannot be parsed. Note that all elements both a root and
            a terminal node
            </summary>
            <param name="positionRepresentation">The representation in the #.#.#.#... format</param>
        </member>
        <member name="M:MS.Swi.Data.TokenPosition.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Construct a token position given a root position, and the sequence position of the
            sub-element. This is used when doing top level constructions of data
            </summary>
            <param name="rootPosition">The root element</param>
            <param name="sequencePosition">The sequence of this position among the children of the parent</param>
        </member>
        <member name="M:MS.Swi.Data.TokenPosition.#ctor(MS.Swi.Data.TokenPosition,System.UInt32)">
            <summary>
            Construct a token position given a parent, and the sequence position of the
            sub-element. This is primarily used when splitting or changing data
            </summary>
            <param name="parent">The parent position</param>
            <param name="sequencePosition">The sequence of this position among the children of the parent</param>
        </member>
        <member name="M:MS.Swi.Data.TokenPosition.IsChildOf(MS.Swi.Data.TokenPosition)">
            <summary>
            Whether or not this position is a child of a given token position. For the purposes
            of this test, we will consider a TokenPosition to be a child of itself.
            </summary>
            <param name="position">The token position</param>
            <returns>True if it is a child of that position, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.TokenPosition.IsChildOf(System.UInt32)">
            <summary>
            Whether or not this position is a child of a given root position
            </summary>
            <param name="rootPosition"></param>
            <returns>True if the root position of the node is the same as the given root position</returns>
        </member>
        <member name="M:MS.Swi.Data.TokenPosition.Equals(System.Object)">
            <summary>
            Determine if this is equal to another object
            </summary>
            <param name="obj">The other object</param>
            <returns>True if they are equal, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.TokenPosition.GetHashCode">
            <summary>
            Compute the hash code for the object. Note that two objects which are equal MUST
            have the same Hash Code, so we need to ignore trailing zeros
            </summary>
            <returns>The computed hash code</returns>
        </member>
        <member name="M:MS.Swi.Data.TokenPosition.ToString">
            <summary>
            Convert the TokenPosition to string format
            </summary>
            <returns></returns>
        </member>
        <member name="M:MS.Swi.Data.TokenPosition.CompareTo(System.Object)">
            <summary>
            Compare the TokenPosition to another object. Note that for the sake of comparison x and x.0 are 
            considered equal
            </summary>
            <param name="obj">The object for comparison</param>
            <returns>Negative number if this instance is less than obj, Zero if they are the same, and Positive number of this instance is greater than obj </returns>
        </member>
        <member name="P:MS.Swi.Data.TokenPosition.Parent">
            <summary>
            The parent position of this position, or null if this position cannot have a parent
            </summary>
        </member>
        <member name="P:MS.Swi.Data.TokenPosition.Predecessor">
            <summary>
            The previous token position to this position, or null if there cannot be a predecessor
            node
            </summary>
        </member>
        <member name="P:MS.Swi.Data.TokenPosition.Successor">
            <summary>
            The next token position after this one, or null if we are already at the maximum
            </summary>
        </member>
        <member name="P:MS.Swi.Data.TokenPosition.Vector">
            <summary>
            The underlying vector
            </summary>
        </member>
        <member name="P:MS.Swi.Data.TokenPosition.RootPosition">
            <summary>
            The root position of the token
            </summary>
        </member>
        <member name="P:MS.Swi.Data.TokenPosition.TerminalPosition">
            <summary>
            The terminal position in the node
            </summary>
        </member>
        <member name="P:MS.Swi.Data.TokenPosition.Depth">
            <summary>
            The depth of the position
            </summary>
        </member>
        <member name="P:MS.Swi.Data.TokenPosition.Item(System.Int32)">
            <summary>
            The value it a given sequence position 
            </summary>
            <param name="sequencePosition">The sequence position</param>
            <returns>The value</returns>
        </member>
        <member name="T:MS.Swi.Data.TokenRestriction">
            <summary>
            The TokenRestriction class defines format specific limits for a data token.
            This information is available to the strategy and to manipulations to allow for smarter
            fuzzing of the data.
            </summary>
        </member>
        <member name="M:MS.Swi.Data.TokenRestriction.#ctor(MS.Swi.Data.TokenRestriction)">
            <summary>
            Internal copy constructor for a TokenRestriction object
            </summary>
            <param name="source">The source token</param>
        </member>
        <member name="M:MS.Swi.Data.TokenRestriction.#ctor(System.String,System.Type)">
            <summary>
            Parse the restrictions string into an individual restriction<br/>
            
            The format of the restrictions is:<br/>
            	Value			Single valid value<br/>
            	Min_Max			Exclusive value range<br/>
            	Min+Max			Inclusive value range<br/>
            	Min-Max			Exclusive size range<br/>
            	Min=Max			Inclusive size range<br/>
            	Value|Value		Set of valid values<br/><br/>
            	
            </summary>
            <param name="restriction">The restriction string</param>
            <param name="valueType">The type of the item (for content restrictions). For size restrictions, we always use a uint</param>
            <returns>The restriction</returns>
        </member>
        <member name="M:MS.Swi.Data.TokenRestriction.#ctor(MS.Swi.Data.TokenRestriction.TokenRestrictionType,System.Object,System.Object)">
            <summary>
            Construct a content restriction based on the type and ranges
            </summary>
            <param name="type">The type of restriction</param>
            <param name="minimum">The minimum range endpoint</param>
            <param name="maximum">The maximum range endpoint</param>
        </member>
        <member name="M:MS.Swi.Data.TokenRestriction.#ctor(MS.Swi.Data.TokenRestriction.TokenRestrictionType,System.UInt32,System.UInt32)">
            <summary>
            Construct a size or content restriction based on a range
            </summary>
            <param name="type">The type of restriction</param>
            <param name="minimum">The minimum range endpoint</param>
            <param name="maximum">The maximum range endpoint</param>
        </member>
        <member name="M:MS.Swi.Data.TokenRestriction.#ctor(System.Object[])">
            <summary>
            Construct a content restriction based a set of valid values
            </summary>
            <param name="validValues">The valid values</param>
        </member>
        <member name="M:MS.Swi.Data.TokenRestriction.IsValidValue(System.Object)">
            <summary>
            Determine if an object is a valid value
            </summary>
            <param name="whichValue">The object to check</param>
            <returns>True if it is, false if it is not</returns>
        </member>
        <member name="M:MS.Swi.Data.TokenRestriction.IsTheSameAs(System.Object)">
            <summary>
            Determine if two restrictions are the same
            </summary>
            <param name="otherObject">The compared object</param>
            <returns>True if they are equal, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.TokenRestriction.AddValidValues(MS.Swi.Data.TokenRestriction)">
            <summary>
            Integrate the other valid values. Note that this may have duplicates, we are not filtering
            for them because of the expense
            </summary>
            <param name="restriction">The restriction whose values are being added</param>
        </member>
        <member name="M:MS.Swi.Data.TokenRestriction.System#ICloneable#Clone">
            <summary>
            Clone this token restriction
            </summary>
            <returns>The newly created clone of this token restriction</returns>
        </member>
        <member name="M:MS.Swi.Data.TokenRestriction.Clone">
            <summary>
            Clone this token restriction
            </summary>
            <returns>A newly created clone of this token restriction</returns>
        </member>
        <member name="P:MS.Swi.Data.TokenRestriction.RestrictionType">
            <summary>
            The type of restriction being enforced
            </summary>
        </member>
        <member name="P:MS.Swi.Data.TokenRestriction.Minimum">
            <summary>
            The restricted minimum value
            </summary>
        </member>
        <member name="P:MS.Swi.Data.TokenRestriction.Maximum">
            <summary>
            The restricted maximum value
            </summary>
        </member>
        <member name="P:MS.Swi.Data.TokenRestriction.ValidValues">
            <summary>
            Get a copy of the set of valid values
            </summary>
            <returns>A shallow copy of the set of valid values</returns>
        </member>
        <member name="T:MS.Swi.Data.TokenRestriction.TokenRestrictionType">
            <summary>
            The types of content restrictions. 
            </summary>
        </member>
        <member name="F:MS.Swi.Data.TokenRestriction.TokenRestrictionType.Invalid">
            <summary>
            The default invalid value
            </summary>
        </member>
        <member name="F:MS.Swi.Data.TokenRestriction.TokenRestrictionType.SizeRangeInclusive">
            <summary>
            The content restriction is a size range, inclusive of the end points
            </summary>
        </member>
        <member name="F:MS.Swi.Data.TokenRestriction.TokenRestrictionType.SizeRangeExclusive">
            <summary>
            The content restriction is a size range, exclusive of the end points
            </summary>
        </member>
        <member name="F:MS.Swi.Data.TokenRestriction.TokenRestrictionType.ValueRangeInclusive">
            <summary>
            The content restriction is a value range, inclusive of the end points
            </summary>
        </member>
        <member name="F:MS.Swi.Data.TokenRestriction.TokenRestrictionType.ValueRangeExclusive">
            <summary>
            The content restriction is a value range, exclusive of the end points
            </summary>
        </member>
        <member name="F:MS.Swi.Data.TokenRestriction.TokenRestrictionType.ValidValues">
            <summary>
            The content restriction is a set of valid values
            </summary>
        </member>
        <member name="T:MS.Swi.Data.IConstTokenRestrictions">
            <summary>
            Public const interface to the TokenRestrictions class
            </summary>
        </member>
        <member name="M:MS.Swi.Data.IConstTokenRestrictions.SelectRandomSizeRestriction(System.Random)">
            <summary>
            Select a random valid size restriction and return it to the caller, using the provided 
            random number generator
            </summary>
            <param name="prnGenerator">The generator to use</param>
            <returns>The restriction selected, or null if there are no size restrictions</returns>
        </member>
        <member name="M:MS.Swi.Data.IConstTokenRestrictions.SelectRandomContentRestriction(System.Random)">
            <summary>
            Select a random valid content restriction and return it to the caller, using the provided 
            random number generator
            </summary>
            <param name="prnGenerator">The generator to use</param>
            <returns>The restriction selected, or null if there are no content restrictions</returns>
        </member>
        <member name="P:MS.Swi.Data.IConstTokenRestrictions.SizeRestrictions">
            <summary>
            The list of all size restrictions
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstTokenRestrictions.ValueRangeRestrictions">
            <summary>
            The list of all value range restrictions
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstTokenRestrictions.ValidValuesRestriction">
            <summary>
            The valid values restriction (or null if it does not exist)
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstTokenRestrictions.HasSizeRestrictions">
            <summary>
            Whether or not the restriction set includes size restrictions
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstTokenRestrictions.HasContentRestrictions">
            <summary>
            Whether or not the restriction set includes content restrictions
            </summary>
        </member>
        <member name="T:MS.Swi.Data.TokenRestrictions">
            <summary>
            The set of restrictions that apply to a token
            </summary>
        </member>
        <member name="M:MS.Swi.Data.TokenRestrictions.#ctor(MS.Swi.Data.TokenRestrictions)">
            <summary>
            Private copy constructor
            </summary>
            <param name="source">The source restrictions</param>
        </member>
        <member name="M:MS.Swi.Data.TokenRestrictions.#ctor(System.Type,System.String[])">
            <summary>
            Create restrictions based on a sequence of format strings and value type information
            </summary>
            <param name="valueType">The native type of the object</param>
            <param name="restrictions">The restriction definitions</param>
        </member>
        <member name="M:MS.Swi.Data.TokenRestrictions.#ctor(MS.Swi.Data.TokenRestriction[])">
            <summary>
            Create token restrictions based on a set of existing restrictions
            </summary>
            <param name="restrictions"></param>
        </member>
        <member name="M:MS.Swi.Data.TokenRestrictions.#ctor(MS.Swi.Data.Generic.ConstList{MS.Swi.Data.TokenRestriction},MS.Swi.Data.Generic.ConstList{MS.Swi.Data.TokenRestriction},MS.Swi.Data.TokenRestriction)">
            <summary>
            Construct a set of token restrictions based on the three categories
            </summary>
            <param name="sizeRestrictions">Size restrictions (or null)</param>
            <param name="valueRangeRestrictions">Value range restrictions (or null)</param>
            <param name="validValues">Valid values (or null)</param>
        </member>
        <member name="M:MS.Swi.Data.TokenRestrictions.SelectRandomContentRestriction(System.Random)">
            <summary>
            Select a random valid content restriction and return it to the caller, using the provided 
            random number generator
            </summary>
            <param name="prnGenerator">The generator to use</param>
            <returns>The restriction selected, or null if there are no content restrictions</returns>
        </member>
        <member name="M:MS.Swi.Data.TokenRestrictions.SelectRandomSizeRestriction(System.Random)">
            <summary>
            Select a random valid size restriction and return it to the caller, using the provided 
            random number generator
            </summary>
            <param name="prnGenerator">The generator to use</param>
            <returns>The restriction selected, or null if there are no size restrictions</returns>
        </member>
        <member name="M:MS.Swi.Data.TokenRestrictions.Add(MS.Swi.Data.TokenRestriction)">
            <summary>
            Add a restriction to the set of Token Restrictions
            </summary>
            <param name="restriction">The new restrictions</param>
        </member>
        <member name="M:MS.Swi.Data.TokenRestrictions.Add(MS.Swi.Data.IConstTokenRestrictions)">
            <summary>
            Add the existing restriction set, replacing any current size restrictions
            with new size restrictions if they exist, and preserving the size restrictions
            if not, and adding the content restrictions
            </summary>
            <param name="restrictions">The restrictions</param>
        </member>
        <member name="M:MS.Swi.Data.TokenRestrictions.ReplaceSizeRestrictions(MS.Swi.Data.IConstTokenRestrictions)">
            <summary>
            Replace the existing size restrictions with the size restrictions from the new set
            IF and ONLY IF they exist. If there are no size restrictions in the new
            set, nothing is changed
            </summary>
            <param name="restrictions">The new restrictions</param>
        </member>
        <member name="M:MS.Swi.Data.TokenRestrictions.AddContentRestrictions(MS.Swi.Data.IConstTokenRestrictions)">
            <summary>
            Add the content restrictions
            </summary>
            <param name="restrictions">The restrictions</param>
        </member>
        <member name="M:MS.Swi.Data.TokenRestrictions.System#ICloneable#Clone">
            <summary>
            Clone these token restrictions
            </summary>
            <returns>The newly created clone of these token restrictions</returns>
        </member>
        <member name="M:MS.Swi.Data.TokenRestrictions.Clone">
            <summary>
            Clone these token restrictions
            </summary>
            <returns>A newly created clone of these token restrictions</returns>
        </member>
        <member name="P:MS.Swi.Data.TokenRestrictions.SizeRestrictions">
            <summary>
            The list of all size restrictions
            </summary>
        </member>
        <member name="P:MS.Swi.Data.TokenRestrictions.ValueRangeRestrictions">
            <summary>
            The list of all value range restrictions
            </summary>
        </member>
        <member name="P:MS.Swi.Data.TokenRestrictions.ValidValuesRestriction">
            <summary>
            The valid values restriction (or null if it does not exist)
            </summary>
        </member>
        <member name="P:MS.Swi.Data.TokenRestrictions.HasSizeRestrictions">
            <summary>
            Whether or not the restriction set includes size restrictions
            </summary>
        </member>
        <member name="P:MS.Swi.Data.TokenRestrictions.HasContentRestrictions">
            <summary>
            Whether or not the restriction set includes content restrictions
            </summary>
        </member>
        <member name="T:MS.Swi.InstallationManagement">
            <summary>
            The FCL Management class is a singleton wrapper for FCL installation management functionality
            that is actually implemented in the CTFInstallationManager assembly. It is provided here to allow
            runtime access by the very components that the actual implementation is dependent on. 
            </summary>
        </member>
        <member name="M:MS.Swi.InstallationManagement.#cctor">
            <summary>
            On use of the installation management shim, make sure that we have the
            actual implementation loaded
            </summary>
        </member>
        <member name="M:MS.Swi.InstallationManagement.#ctor">
            <summary>
            FCL Management is a container for static helper functions, and does not
            have a valid instance
            </summary>
        </member>
        <member name="M:MS.Swi.InstallationManagement.LoadAssembliesFromFclDirectories">
            <summary>
            Load the assemblies from the FCL directories for this system
            </summary>
        </member>
        <member name="M:MS.Swi.InstallationManagement.HasDirectoryAssigned">
            <summary>
            Determine if the directory has been assigned for this installation
            </summary>
            <returns>True if one was assigned, false if not </returns>
        </member>
        <member name="M:MS.Swi.InstallationManagement.GetDirectory">
            <summary>
            Get the directory associated with the assembly, or null if it doesn't exist
            </summary>
            <returns>The associated directory, or null if it wasn't set</returns>
        </member>
        <member name="M:MS.Swi.InstallationManagement.SetDirectory(System.String)">
            <summary>
            Set the directory associated with this assembly 
            </summary>
            <param name="directoryPath">The directory path</param>
            <returns>True if it worked, false if not</returns>
        </member>
        <member name="M:MS.Swi.InstallationManagement.ClearDirectory">
            <summary>
            Clear the directory assigned to this installation
            </summary>
        </member>
        <member name="M:MS.Swi.InstallationManagement.InstallFiles(System.String,System.String[])">
            <summary>
            Install files from the source into the managed storage location
            </summary>
            <param name="sourceDirectory">The source directory</param>
            <param name="files">The files (including wildcards) to be installed</param>
            <returns>The set of files installed, or null if they could not all be installed.
            Each subdirectory is a key, and the value is the set of files in that directory.</returns>
        </member>
        <member name="M:MS.Swi.InstallationManagement.UninstallFiles(System.String[])">
            <summary>
            Uninstall files from the managed store location
            </summary>
            <param name="files">The files (including wildcards) to be removed</param>
            <returns>True if none of the named files remain in the storage, false if an error occurred or no storage is defined</returns>
        </member>
        <member name="M:MS.Swi.InstallationManagement.RemoveStorageDirectory">
            <summary>
            Remove the storage directory. Note that this does NOT clear the
            storage directory assignment, that must be done separately, but it
            does delete all of the files in the storage directory and remove
            the directory
            </summary>
        </member>
        <member name="M:MS.Swi.InstallationManagement.DefaultStorageDirectory">
            <summary>
            Build the default storage directory for the current version
            </summary>
            <returns>The calculated storage directory, or null if the attempt to build a directory failed</returns>
        </member>
        <member name="M:MS.Swi.InstallationManagement.IncrementInstallationCount">
            <summary>
            Increment the installation count
            </summary>
            <returns>The installation count, or 0xffffffff if an error occurred</returns>
        </member>
        <member name="M:MS.Swi.InstallationManagement.DecrementInstallationCount">
            <summary>
            Decrement the installation count
            
            </summary>
            <returns>The installation count, or 0xffffffff if an error occurred</returns>
        </member>
        <member name="M:MS.Swi.InstallationManagement.RemoveConfigurationInformation">
            <summary>
            Remove the registry information for this installation
            </summary>
        </member>
        <member name="T:MS.Swi.Data.IConstTokenReference">
            <summary>
            The read-only access definition for the TokenReference class.
            Note that when accessing the referenced tokens, they are unsorted.
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstTokenReference.ReferenceType">
            <summary>
            The type of reference
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstTokenReference.Count">
            <summary>
            The number of elements that make up the reference
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstTokenReference.References">
            <summary>
            The referenced contents
            </summary>
        </member>
        <member name="T:MS.Swi.Data.TokenReference">
            <summary>
            The definition of a reference from one token to another, handling cases where the 
            tokens are split. Note that when accessing the referenced tokens, they are unsorted.
            </summary>
        </member>
        <member name="M:MS.Swi.Data.TokenReference.#ctor(MS.Swi.Data.TokenReference.TokenReferenceType,MS.Swi.Data.Token[])">
            <summary>
            Create a new TokenReference to a specific token
            </summary>
            <param name="referenceType">The reference type</param>
            <param name="referencedTokens">The referenced token</param>
        </member>
        <member name="M:MS.Swi.Data.TokenReference.#ctor(MS.Swi.Data.TokenReference.TokenReferenceType,MS.Swi.Data.DataContents[])">
            <summary>
            Create a new TokenReference to a specific contents
            </summary>
            <param name="referenceType">The reference type</param>
            <param name="referencedContents">The referenced contents</param>
        </member>
        <member name="M:MS.Swi.Data.TokenReference.#ctor(MS.Swi.Data.TokenReference.TokenReferenceType,System.Collections.Generic.List{MS.Swi.Data.Token})">
            <summary>
            Create a new TokenReference to a specific token
            </summary>
            <param name="referenceType">The reference type</param>
            <param name="referencedTokens">The referenced token</param>
        </member>
        <member name="M:MS.Swi.Data.TokenReference.#ctor(MS.Swi.Data.TokenReference.TokenReferenceType,System.Collections.Generic.List{MS.Swi.Data.DataContents})">
            <summary>
            Create a new TokenReference to a specific contents
            </summary>
            <param name="referenceType">The reference type</param>
            <param name="referencedContents">The referenced contents</param>
        </member>
        <member name="M:MS.Swi.Data.TokenReference.CloneReferences">
            <summary>
            Provide a copy of the reference list
            </summary>
            <returns>The copied reference list</returns>
        </member>
        <member name="M:MS.Swi.Data.TokenReference.Apply">
            <summary>
            Apply the reference. This was split out from the original creation of the reference to handle
            the usage pattern in which references are created, but not necessarily applied
            </summary>
        </member>
        <member name="M:MS.Swi.Data.TokenReference.RemoveInvalidReferences(MS.Swi.Data.Token,MS.Swi.Data.IDataContentsInformationSource)">
            <summary>
            Remove from the reference any DataContents which are no longer present in the DataMap, based
            on the information provided, or for which the references are now no longer calculable
            </summary>
            <param name="owner">The Token which owns this reference </param>
            <param name="informationSource">The source of information about the contents</param>
        </member>
        <member name="M:MS.Swi.Data.TokenReference.System#ICloneable#Clone">
            <summary>
            Clone the TokenReference
            </summary>
            <returns>The newly created token reference</returns>
        </member>
        <member name="M:MS.Swi.Data.TokenReference.Clone">
            <summary>
            Clone the TokenReference
            </summary>
            <returns>The newly created token reference</returns>
        </member>
        <member name="P:MS.Swi.Data.TokenReference.ReferenceType">
            <summary>
            The type of reference
            </summary>
        </member>
        <member name="P:MS.Swi.Data.TokenReference.Count">
            <summary>
            The number of tokens that make up the reference
            </summary>
        </member>
        <member name="P:MS.Swi.Data.TokenReference.MS#Swi#Data#IConstTokenReference#References">
            <summary>
            Allow the enumeration of the references
            </summary>
        </member>
        <member name="P:MS.Swi.Data.TokenReference.References">
            <summary>
            Allow the enumeration of the references
            </summary>
        </member>
        <member name="T:MS.Swi.Data.TokenReference.TokenReferenceType">
            <summary>
            The type of reference
            </summary>
        </member>
        <member name="F:MS.Swi.Data.TokenReference.TokenReferenceType.NoReference">
            <summary>
            The requisite zero value, in this case indicating that we have no reference at all
            </summary>
        </member>
        <member name="F:MS.Swi.Data.TokenReference.TokenReferenceType.Position">
            <summary>
            The reference is to the start position of the contents
            </summary>
        </member>
        <member name="F:MS.Swi.Data.TokenReference.TokenReferenceType.RelativePosition">
            <summary>
            The reference is to the start position of the contents relative to the start position of this contents
            </summary>
        </member>
        <member name="F:MS.Swi.Data.TokenReference.TokenReferenceType.Size">
            <summary>
            The reference is to the size of the contents
            </summary>
        </member>
        <member name="F:MS.Swi.Data.TokenReference.TokenReferenceType.Contents">
            <summary>
            The reference is to the contents
            </summary>
        </member>
        <member name="F:MS.Swi.Data.TokenReference.TokenReferenceType.Children">
            <summary>
            The reference is to the number of descendents the contents has
            </summary>
        </member>
        <member name="T:MS.Swi.Data.IConstEncapsulation">
            <summary>
            The cont interface to an Encapsulation. While Encapsulations are themselves immutable (and so
            would not ordinarily require an IConst style interface, this provides interface serves to 
            ensure that all data pulled from an IConstEncapsulation is also either immutable or IConst in nature.
            </summary>
        </member>
        <member name="M:MS.Swi.Data.IConstEncapsulation.FindReferencedTokens(System.String)">
            <summary>
            Find all the tokens referenced as part of the encapsulation, under the given label
            </summary>
            <param name="label">The specified label</param>
            <returns>The list of tokens</returns>
        </member>
        <member name="M:MS.Swi.Data.IConstEncapsulation.FindReferencedTokens">
            <summary>
            Find all tokens referenced as part of the encapsulation
            </summary>
            <returns>The list of tokens</returns>
        </member>
        <member name="M:MS.Swi.Data.IConstEncapsulation.GetValidDefinitions">
            <summary>
            Construct a list of all of the possible valid definitions for this encapsulation
            </summary>
            <returns>The list of valid definitions</returns>
        </member>
        <member name="P:MS.Swi.Data.IConstEncapsulation.References">
            <summary>
            The references of the Encapsulation
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstEncapsulation.ReferenceList">
            <summary>
            All of the references of the encapsulation, expressed as a list
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstEncapsulation.Definition">
            <summary>
            The definition of the Encapsulation
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstEncapsulation.Identifier">
            <summary>
            The identifier associated with the encapsulation
            </summary>
        </member>
        <member name="T:MS.Swi.Data.Encapsulation">
            <summary>
            An encapsulation is a reference
            </summary>
        </member>
        <member name="M:MS.Swi.Data.Encapsulation.#ctor(MS.Swi.Data.ElementDefinition,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{MS.Swi.Data.DataContents}})">
            <summary>
            Construct the encapsulation given a set of references
            </summary>
            <param name="definition">The encapsulation definition to use</param>
            <param name="identifier">The identifier for the encapsulation (null will be silently changed to an empty string)</param>
            <param name="references">The references. Note that the Encapsulation will take ownership of the underlying lists after this is called</param>
        </member>
        <member name="M:MS.Swi.Data.Encapsulation.FindReferencedTokens(System.String)">
            <summary>
            Find all the tokens referenced as part of the encapsulation, under the given label
            </summary>
            <param name="label">The specified label</param>
            <returns>The list of tokens</returns>
        </member>
        <member name="M:MS.Swi.Data.Encapsulation.FindReferencedTokens">
            <summary>
            Find all tokens referenced as part of the encapsulation
            </summary>
            <returns>The list of tokens</returns>
        </member>
        <member name="M:MS.Swi.Data.Encapsulation.GetValidDefinitions">
            <summary>
            Construct a list of all of the possible valid definitions for this encapsulation
            </summary>
            <returns>The list of valid definitions</returns>
        </member>
        <member name="M:MS.Swi.Data.Encapsulation.Equals(System.Object)">
            <summary>
            Do two Encapsulation objects have the same contents
            </summary>
            <param name="otherObject">The encapsulation to compare against</param>
            <returns>True if they have the same contents, False if not</returns>
        </member>
        <member name="M:MS.Swi.Data.Encapsulation.IsEquivalentTo(MS.Swi.Data.Encapsulation)">
            <summary>
            Determine if this encapsulation is equivalent to another. Encapsulations are equivalent if one is a
            refinement of the other and they include the same references. Note that this means that differences
            in identifier are unimportant.
            </summary>
            <param name="otherEncapsulation">The other encapsulation</param>
            <returns>True if they are equivalent, false otherwise</returns>
        </member>
        <member name="M:MS.Swi.Data.Encapsulation.GetHashCode">
            <summary>
            The hashcode for the Encapsulation
            </summary>
            <returns>The calculated hash code</returns>
        </member>
        <member name="M:MS.Swi.Data.Encapsulation.RemoveInvalidReferences(MS.Swi.Data.IDataContentsInformationSource)">
            <summary>
            Remove any references inside of the encapsulation that are to DataContents that no longer exist
            </summary>
            <param name="informationSource">The information source to query for the status of a given DataContents</param>
        </member>
        <member name="P:MS.Swi.Data.Encapsulation.References">
            <summary>
            The references of the Encapsulation
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Encapsulation.ReferenceList">
            <summary>
            All of the references of the encapsulation, expressed as a list
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Encapsulation.MS#Swi#Data#IConstEncapsulation#References">
            <summary>
            The references of the Encapsulation
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Encapsulation.MS#Swi#Data#IConstEncapsulation#ReferenceList">
            <summary>
            All of the references of the encapsulation, expressed as a list
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Encapsulation.Definition">
            <summary>
            The definition of the Encapsulation
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Encapsulation.Identifier">
            <summary>
            The value associated with the encapsulation
            </summary>
        </member>
        <member name="M:MS.Swi.Data.DataContentsStateTable.Add(MS.Swi.Data.DataContents)">
            <summary>
            Add a DataContents element to the state table
            </summary>
            <param name="contents">The contents to add</param>
        </member>
        <member name="M:MS.Swi.Data.DataContentsStateTable.Contains(MS.Swi.Data.DataContents)">
            <summary>
            Whether or not the table already contains the specified contents
            </summary>
            <param name="contents">The contents</param>
            <returns>True if it is already contained, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.DataContentsStateTable.IndexOfPosition(MS.Swi.Data.TokenPosition)">
            <summary>
            The index ordinal for a given token position
            </summary>
            <param name="position">The token position</param>
            <returns>The index ordinal</returns>
        </member>
        <member name="M:MS.Swi.Data.DataContentsStateTable.SetTokenAssociations">
            <summary>
            Set the associations between leaf states and tokens
            </summary>
        </member>
        <member name="M:MS.Swi.Data.DataContentsStateTable.ResolveOrphanedStates(MS.Swi.Data.IConstDataMap)">
            <summary>
            Resolve any states that have been orphaned out
            </summary>
            <param name="sourceMap">The source data map</param>
        </member>
        <member name="M:MS.Swi.Data.DataContentsStateTable.InitializePositionsForResolution">
            <summary>
            Initialize the positions of all known locations in the state table. Note that this should
            only be run once, and it requires that the token associations already be set. This does NOT
            clear other positions, it assumes it is only run once per state table
            </summary>
        </member>
        <member name="M:MS.Swi.Data.DataContentsStateTable.RemoveInvalidReferences(MS.Swi.Data.IDataContentsInformationSource)">
            <summary>
            Fix up any token references to contents that no longer exist in the modified DataMap, or which
            can no longer be handled due to changes in the DataMap
            </summary>
            <param name="informationSource">The information source to use for the fixup</param>
        </member>
        <member name="P:MS.Swi.Data.DataContentsStateTable.Item(MS.Swi.Data.DataContents)">
            <summary>
            Contents state indexed by contents
            </summary>
            <param name="index">The contents</param>
            <returns>The state</returns>
        </member>
        <member name="P:MS.Swi.Data.DataContentsStateTable.Item(MS.Swi.Data.TokenPosition)">
            <summary>
            Contents state of the contents associated with the token position
            </summary>
            <param name="position">The index position</param>
            <returns>The contents state</returns>
        </member>
        <member name="P:MS.Swi.Data.DataContentsStateTable.Item(System.Int32)">
            <summary>
            Contents state indexed by the ordinal associated with the token position
            </summary>
            <param name="index">The index</param>
            <returns>The contents state</returns>
        </member>
        <member name="T:MS.Swi.Data.DataContentsStateTable.State">
            <summary>
            The state information for each contents node
            </summary>
        </member>
        <member name="M:MS.Swi.Data.DataContentsStateTable.State.#ctor(MS.Swi.Data.DataContentsStateTable,MS.Swi.Data.DataContents)">
            <summary>
            Construct a new DataContentsState
            </summary>
            <param name="associatedTable">The table the state is a part of</param>
            <param name="associatedContents">The contents this state is associated with</param>
        </member>
        <member name="M:MS.Swi.Data.DataContentsStateTable.State.IsOrphan(MS.Swi.Data.IConstDataMap)">
            <summary>
            Whether or not this state was orphaned by other manipulations
            </summary>
            <param name="sourceMap">The DataMap to check against</param>
        </member>
        <member name="M:MS.Swi.Data.DataContentsStateTable.State.CalculateRelativePosition(MS.Swi.Data.DataContents)">
            <summary>
            Calculate the relative position between this contents and the referenced contents
            </summary>
            <param name="referencedContents">The referenced contents</param>
            <returns>The relative position</returns>
        </member>
        <member name="M:MS.Swi.Data.DataContentsStateTable.State.IsResolvable">
            <summary>
            Is this data contents element resolvable
            </summary>
            <returns>True if the element is resolvable, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.DataContentsStateTable.State.ClearBaseTokenPosition">
            <summary>
            Reset the BaseTokenPosition to null
            </summary>
        </member>
        <member name="M:MS.Swi.Data.DataContentsStateTable.State.ClearContents">
            <summary>
            Clear the contents, flagging them as cleared, for garbage collection
            </summary>
        </member>
        <member name="M:MS.Swi.Data.DataContentsStateTable.State.SetToInitialPosition(System.Collections.Generic.List{MS.Swi.Data.DataContents})">
            <summary>
            Set the state to its initial position. Note that this REQUIRES that it is called
            in order on the states to function correctly. This works by checking to see if there
            is already a position resolved for this contents PositionBase, and if there is not, 
            setting this position to zero and resolving the position base
            </summary>
            <param name="resolvedBasePositions">The list of already resolved base positions</param>
        </member>
        <member name="M:MS.Swi.Data.DataContentsStateTable.State.RemoveInvalidReferencesInAssociatedToken(MS.Swi.Data.IDataContentsInformationSource)">
            <summary>
            Fixup any references in the associated token
            </summary>
            <param name="informationSource">The information source to use for the fixup</param>
        </member>
        <member name="M:MS.Swi.Data.DataContentsStateTable.State.UpdateSiblingPositions">
            <summary>
            Update the positions of Siblings for the DataContents associated with this State
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContentsStateTable.State.Table">
            <summary>
            The parent state table
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContentsStateTable.State.IsLeaf">
            <summary>
            Whether or not this state is a leaf state (i.e. directly associated with a token)
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContentsStateTable.State.IsSizeDetermined">
            <summary>
            Is the size of the resolved contents known? Note that
            this is the size of the contents object in its native units
            by the type (i.e. if it is a string, the size is in characters)
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContentsStateTable.State.IsPositionDetermined">
            <summary>
            Is the position of the resolved contents known? Note that
            this is the position of the contents object within its root element
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContentsStateTable.State.AreContentsDetermined">
            <summary>
            Are the contents determined?
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContentsStateTable.State.HoldFurtherResolution">
            <summary>
            Whether or not any DataMap resolution should proceed past this DataContents at this time. This
            is used to hold resolution until an Encapsulation can resolve all of its contents
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContentsStateTable.State.SetSizeWhenContentsAreDetermined">
            <summary>
            Whether or not the size of the item should be set when its contents are determined
            (if that is possible).
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContentsStateTable.State.Contents">
            <summary>
            The resolved contents of the contents object
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContentsStateTable.State.Position">
            <summary>
            The position of the contents. Note that
            this is the position of the contents object its root element, indexed
            in bytes
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContentsStateTable.State.Size">
            <summary>
            The size of the contents. Note that this is in bytes, regardless of the actual
            form of the data
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContentsStateTable.State.BaseTokenPosition">
            <summary>
            The base token position for this contents (i.e. the earliest of its child positions)
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContentsStateTable.State.Transformation">
            <summary>
            The transformation associated with this data child
            </summary>
        </member>
        <member name="T:MS.Swi.Data.EncapsulationAttackInformation">
            <summary>
            The attack details for a given encapsulation
            </summary>
        </member>
        <member name="M:MS.Swi.Data.EncapsulationAttackInformation.#ctor(MS.Swi.Data.Encapsulation,MS.Swi.Data.ElementDefinition,MS.Swi.Data.DataContentsStateTable)">
            <summary>
            Construct attack information specifying that the encapsulation should be attacked as the specified
            definition (or null, if the definition is unimportant). Note that if there is an existing encapsulation
            that is being attacked that shares any of the same references, we will silently default to not attack.
            </summary>
            <param name="encapsulation">The encapsulation being attacked</param>
            <param name="definition">The target definition of that encapsulation (or null, to use the default)</param>
            <param name="contentsTable">The content mapping table that is managing the attack results</param>
        </member>
        <member name="M:MS.Swi.Data.EncapsulationAttackInformation.#ctor(MS.Swi.Data.Encapsulation,MS.Swi.Data.DataMapResolver.AttackType)">
            <summary>
            A non-contents attack on the encapsulation (either do not attack, or only attack the 
            structure)
            </summary>
            <param name="encapsulation">The specified encapsulation</param>
            <param name="attackType">The attack type</param>
        </member>
        <member name="M:MS.Swi.Data.EncapsulationAttackInformation.PlaceContentHolds">
            <summary>
            Place holds on the contents that the encapsulation requires, preventing further resolution
            </summary>
        </member>
        <member name="M:MS.Swi.Data.EncapsulationAttackInformation.ReleaseContentHolds">
            <summary>
            Release holds on the contents that the encapsulation requires, allowing further resolution
            </summary>
        </member>
        <member name="M:MS.Swi.Data.EncapsulationAttackInformation.RequiredHoldsConflict">
            <summary>
            Check for existing content holds that would indicate another encapsulation already is 
            attacking some of the values we would be using
            </summary>
        </member>
        <member name="M:MS.Swi.Data.EncapsulationAttackInformation.IsResolvable">
            <summary>
            Determine if the encapsulation is currently resolvable
            </summary>
            <returns>True if all of the required contents are known, and we should attack, and aren't already resolved</returns>
        </member>
        <member name="P:MS.Swi.Data.EncapsulationAttackInformation.Attack">
            <summary>
            Whether or not the target encapsulation should be attacked
            </summary>
        </member>
        <member name="P:MS.Swi.Data.EncapsulationAttackInformation.IsResolved">
            <summary>
            Whether or not the encapsulation is resolved. By definition, if no attack is going to happen,
            it was resolved.
            </summary>
        </member>
        <member name="P:MS.Swi.Data.EncapsulationAttackInformation.TargetEncapsulation">
            <summary>
            The target encapsulation
            </summary>
        </member>
        <member name="P:MS.Swi.Data.EncapsulationAttackInformation.TargetDefinition">
            <summary>
            The target definition to be used for the attack
            </summary>
        </member>
        <member name="T:MS.Swi.Data.TokenAttackInformation">
            <summary>
            The attack details for a given token
            </summary>
        </member>
        <member name="M:MS.Swi.Data.TokenAttackInformation.#ctor(MS.Swi.Data.Token,MS.Swi.Data.ElementDefinition)">
            <summary>
            Construct the attack information for the token. Note that if we cannot get to the requested
            data type, we will turn this into a no-attack
            </summary>
            <param name="token">The token</param>
            <param name="definition">The preferred target definition</param>
        </member>
        <member name="M:MS.Swi.Data.TokenAttackInformation.#ctor(MS.Swi.Data.Token,MS.Swi.Data.DataMapResolver.AttackType)">
            <summary>
            A non-contents attack on the token (either do not attack, or only attack the 
            structure)
            </summary>
            <param name="token">The token</param>
            <param name="attack">The attack type</param>
        </member>
        <member name="P:MS.Swi.Data.TokenAttackInformation.Attack">
            <summary>
            Whether or not we should apply an attack to this token
            </summary>
        </member>
        <member name="P:MS.Swi.Data.TokenAttackInformation.TargetDefinition">
            <summary>
            The name of the object which is our target definition
            </summary>
        </member>
        <member name="P:MS.Swi.Data.TokenAttackInformation.TargetContents">
            <summary>
            The target contents
            </summary>
        </member>
        <member name="T:MS.Swi.Data.DataMapResolver">
            <summary>
            Resolve the contents of a DataMap
            </summary>
        </member>
        <member name="T:MS.Swi.Data.IDataContentsInformationSource">
            <summary>
            An accessor interface to allow the partially resolved values of the data to be extracted
            </summary>
        </member>
        <member name="M:MS.Swi.Data.IDataContentsInformationSource.WasContentsDeleted(MS.Swi.Data.IConstDataContents)">
            <summary>
            Does the specified DataContents still exist in the InformationSource. This is
            to handle cases where a structural manipulation may have removed a referenced Token
            </summary>
            <param name="source">The DataContents object being queried</param>
            <returns>True if the DataContents was deleted, False if not</returns>
        </member>
        <member name="M:MS.Swi.Data.IDataContentsInformationSource.GetContents(MS.Swi.Data.IConstDataContents)">
            <summary>
            Get the resolved contents of the specified IConstDataContents
            </summary>
            <param name="source">The DataContents object being queried</param>
            <returns>The contents</returns>
        </member>
        <member name="M:MS.Swi.Data.IDataContentsInformationSource.GetPosition(MS.Swi.Data.IConstDataContents)">
            <summary>
            Get the position of the resolved contents, relative to its root element, and in bytes
            </summary>
            <param name="source">The DataContents object being queried</param>
            <returns>The position</returns>
        </member>
        <member name="M:MS.Swi.Data.IDataContentsInformationSource.GetSize(MS.Swi.Data.IConstDataContents)">
            <summary>
            Get the size of the resolved contents, in bytes
            </summary>
            <param name="source">The DataContents object being queried</param>
            <returns>The size</returns>
        </member>
        <member name="M:MS.Swi.Data.IDataContentsInformationSource.GetRelativeOffset(MS.Swi.Data.IConstDataContents,MS.Swi.Data.IConstDataContents)">
            <summary>
            Get the relative offset between one item and another.
            </summary>
            <param name="source">The contents which is requesting the relative offset</param>
            <param name="target">The target contents</param>
            <returns>The relative offset</returns>
        </member>
        <member name="M:MS.Swi.Data.IDataContentsInformationSource.CanCalculateRelativeOffset(MS.Swi.Data.IConstDataContents,MS.Swi.Data.IConstDataContents)">
            <summary>
            Determine whether or not a relative position can be calculated between two contents
            </summary>
            <param name="source"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:MS.Swi.Data.DataMapResolver.Resolve(MS.Swi.Data.DataMap)">
            <summary>
            Resolve a DataMap to the core byte arrays, making no changes
            </summary>
            <param name="map">The DataMap</param>
            <returns>The list of byte arrays that correspond to the DataMap root elements</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMapResolver.Resolve(MS.Swi.Data.DataMap,MS.Swi.Data.DataMapResolver.QueryTokenAttackInformationDelegate,MS.Swi.Data.DataMapResolver.QueryEncapsulationAttackInformationDelegate,MS.Swi.Data.DataMapResolver.ResolveTokenContentsDelegate,MS.Swi.Data.DataMapResolver.ResolveEncapsulationContentsDelegate,MS.Swi.Data.DataMapResolver.ResolveTokenStructureDelegate,MS.Swi.Data.DataMapResolver.ResolveEncapsulationStructureDelegate,System.Random)">
            <summary>
            Resolve a DataMap to the core byte arrays, applying the specified changes
            </summary>
            <param name="map">The map to resolve</param>
            <param name="tokenAttackInformationCallback">The callback to use to determine what action should be applied to a Token</param>
            <param name="encapsulationAttackInformationCallback">The callback to use to determine what action should be applied to an Encapsulation</param>
            <param name="tokenResolveContentsCallback">The callback to use to determine the actual contents</param>
            <param name="encapsulationResolveContentsCallback">The callback to use to determine the actual contents</param>
            <param name="tokenResolveStructureCallback">The callback to use to modify the DataMap based on a token</param>
            <param name="encapsulationResolveStructureCallback">The callback to use to modify the DataMap based on an Encapsulation</param>
            <param name="prnGenerator">The random number generator to use</param>
            <returns>The list of byte arrays that correspond to the DataMap root elements</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMapResolver.#ctor(MS.Swi.Data.DataMap,MS.Swi.Data.DataMapResolver.QueryTokenAttackInformationDelegate,MS.Swi.Data.DataMapResolver.QueryEncapsulationAttackInformationDelegate,MS.Swi.Data.DataMapResolver.ResolveTokenContentsDelegate,MS.Swi.Data.DataMapResolver.ResolveEncapsulationContentsDelegate,MS.Swi.Data.DataMapResolver.ResolveTokenStructureDelegate,MS.Swi.Data.DataMapResolver.ResolveEncapsulationStructureDelegate,System.Random)">
            <summary>
            Initialize the data map resolver. Note that this will generate queries to the attack information
            delegates if one is specified
            </summary>
            <param name="map">The map to resolve</param>
            <param name="tokenAttackInformationCallback">The callback to use to determine what action should be applied to a Token</param>
            <param name="encapsulationAttackInformationCallback">The callback to use to determine what action should be applied to an Encapsulation</param>
            <param name="tokenResolveContentsCallback">The callback to use to determine the actual contents</param>
            <param name="encapsulationResolveContentsCallback">The callback to use to determine the actual contents</param>
            <param name="tokenResolveStructureCallback">The callback to use to modify the DataMap based on a token</param>
            <param name="encapsulationResolveStructureCallback">The callback to use to modify the DataMap based on an Encapsulation</param>
            <param name="prnGenerator">The random number generator to use</param>
        </member>
        <member name="M:MS.Swi.Data.DataMapResolver.WasContentsDeleted(MS.Swi.Data.IConstDataContents)">
            <summary>
            Does the specified DataContents still exist in the InformationSource. This is
            to handle cases where a structural manipulation may have removed a referenced Token
            </summary>
            <param name="source">The DataContents object being queried</param>
            <returns>True if the DataContents was deleted, False if not</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMapResolver.GetContents(MS.Swi.Data.IConstDataContents)">
            <summary>
            Get the resolved contents of the specified IConstDataContents
            </summary>
            <param name="source">The DataContents object being queried</param>
            <returns>The contents</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMapResolver.GetPosition(MS.Swi.Data.IConstDataContents)">
            <summary>
            Get the position of the resolved contents, relative to its parent object base, and
            in units based on the type (i.e. arrays are in terms of array elements, strings are in
            terms of characters, everything else would be a singleton)
            </summary>
            <param name="source">The DataContents object being queried</param>
            <returns>The position</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMapResolver.GetSize(MS.Swi.Data.IConstDataContents)">
            <summary>
            Get the size of the resolved contents, in units based on the type (i.e. arrays are in
            terms of array elements, strings are in terms of characters, everything else would be a singleton)
            </summary>
            <param name="source">The DataContents object being queried</param>
            <returns>The size</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMapResolver.GetRelativeOffset(MS.Swi.Data.IConstDataContents,MS.Swi.Data.IConstDataContents)">
            <summary>
            Get the relative offset between one item and another.
            </summary>
            <param name="source">The contents which is requesting the relative offset</param>
            <param name="target">The target contents</param>
            <returns>The relative offset</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMapResolver.CanCalculateRelativeOffset(MS.Swi.Data.IConstDataContents,MS.Swi.Data.IConstDataContents)">
            <summary>
            Determine whether or not a relative position can be calculated between two contents
            </summary>
            <param name="source">The contents which is requesting the relative offset</param>
            <param name="target">The target contents</param>
            <returns>True if a relative offset can be calculated, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMapResolver.Resolve">
            <summary>
            Resolve the entire DataMap, returning the constructed results. Note that this can
            modify the underlying DataMap, if the strategy includes structural manipulations
            </summary>
            <returns>The list of byte[] objects that correspond to the root elements</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMapResolver.ResolveStructuralManipulations">
            <summary>
            Resolve all structural manipulations and update the attack target information to exclude
            the newly created items
            </summary>
        </member>
        <member name="M:MS.Swi.Data.DataMapResolver.ResolveContentManipulations(System.Collections.Generic.List{System.Byte[]})">
            <summary>
            Resolve all scheduled content manipulations
            </summary>
        </member>
        <member name="M:MS.Swi.Data.DataMapResolver.ResolveContents(MS.Swi.Data.EncapsulationAttackInformation)">
            <summary>
            Resolve the contents for the specified encapsulation. Note that the encapsulation must be unresolved,
            and must have been determined to be resolvable.
            </summary>
            <param name="encapsulationAttack">The encapsulation attack</param>
        </member>
        <member name="M:MS.Swi.Data.DataMapResolver.ResolveContents(MS.Swi.Data.Token,MS.Swi.Data.DataContents)">
            <summary>
            Resolve the contents for the specific token. Note that the token must be unresolved, 
            and must have been determined to be resolvable
            </summary>
            <param name="token">The token being resolved</param>
            <param name="contents">The contents being resolved</param>
        </member>
        <member name="T:MS.Swi.Data.DataMapResolver.AttackType">
            <summary>
            What type of attack should be conducted on a given DataMap element
            </summary>
        </member>
        <member name="F:MS.Swi.Data.DataMapResolver.AttackType.None">
            <summary>
            No attack, the element should not be attacked
            </summary>
        </member>
        <member name="F:MS.Swi.Data.DataMapResolver.AttackType.AttackContents">
            <summary>
            The contents of the element should be attacked
            </summary>
        </member>
        <member name="F:MS.Swi.Data.DataMapResolver.AttackType.AttackStructure">
            <summary>
            The structure of the DataMap should be attacked, using the
            element as the reference point
            </summary>
        </member>
        <member name="T:MS.Swi.Data.DataMapResolver.QueryTokenAttackInformationDelegate">
            <summary>
            Query to determine what the desired targetting is for a given token
            </summary>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="token">The token being considered</param>
            <param name="definition">The definition to be used (or null if this is unimportant)</param>
            <returns>The AttackType selected</returns>
        </member>
        <member name="T:MS.Swi.Data.DataMapResolver.QueryEncapsulationAttackInformationDelegate">
            <summary>
            Query to determine what the desired targetting is for a given encapsulation
            </summary>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="encapsulation">The encapsulation being considered</param>
            <param name="definition">The definition to be used (or null if this is unimportant)</param>
            <returns>The AttackType selected</returns>
        </member>
        <member name="T:MS.Swi.Data.DataMapResolver.ResolveTokenContentsDelegate">
            <summary>
            Resolve any changes being made to the token contents
            </summary>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="token">The token being attacked</param>
            <param name="contentsDefinition">The definition of the contents being attacked</param>
            <param name="source">The data contents that the contents came from</param>
            <param name="contents">The contents</param>
            <returns>The modified contents</returns>
        </member>
        <member name="T:MS.Swi.Data.DataMapResolver.ResolveEncapsulationContentsDelegate">
            <summary>
            Resolve any changes being made to the token encapsulation
            </summary>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="encapsulation">The encapsulation being attacked</param>
            <param name="contentsDefinition">The definition of the contents being attacked</param>
            <param name="contents">The contents (which will be modified in place)</param>
        </member>
        <member name="T:MS.Swi.Data.DataMapResolver.ResolveTokenStructureDelegate">
            <summary>
            Resolve any changes being made to the structure focusing on a given token
            </summary>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="sourceMap">The data map being modified</param>
            <param name="token">The token being referenced</param>
        </member>
        <member name="T:MS.Swi.Data.DataMapResolver.ResolveEncapsulationStructureDelegate">
            <summary>
            Resolve any changes being made to the structure focusing on a given encapsulation
            </summary>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="sourceMap">The data map being modified</param>
            <param name="encapsulation">The encapsulation being referenced</param>
        </member>
        <member name="T:MS.Swi.Data.IConstDataContents">
            <summary>
            The read-only version of the internal mapping information for the contents of a data token. 
            </summary>
        </member>
        <member name="M:MS.Swi.Data.IConstDataContents.CanDescendFrom(MS.Swi.Data.DataContents)">
            <summary>
            Whether not one DataContents can descend from another
            </summary>
            <param name="prospectiveParent">The prospective parent data contents</param>
            <returns>True if this contents could descend from that one, otherwise false</returns>
        </member>
        <member name="M:MS.Swi.Data.IConstDataContents.FindAssociatedTokens">
            <summary>
            Find the list of all of the tokens which descend from this DataContents
            </summary>
            <returns>The constructed list</returns>
        </member>
        <member name="M:MS.Swi.Data.IConstDataContents.TrimSplitPoints(System.Collections.IEnumerable)">
            <summary>
            Trim out zero length split points from the specified set (including split points at the ends)
            </summary>
            <param name="splitPoints">The split points to analyzer</param>
            <returns>The new set of split points</returns>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.Parent">
            <summary>
            The parent of this DataContents element
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.Root">
            <summary>
            The root contents for this DataContents object
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.Container">
            <summary>
            The first parent DataContents for this DataContents that contains more than
            one child, or null if there is no container for this DataContents (which would
            make it the only DataContents in the root)
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.PositionBase">
            <summary>
            The DataContents that the position of this contents is relative to, or null, if no position
            can be calculated
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.BaseDefinition">
            <summary>
            The base FCL definition for this contents element
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.IsSplit">
            <summary>
            Whether or not this is a split of the parent object
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.IsRoot">
            <summary>
            Whether or not this is a root container
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.NumberOfChildren">
            <summary>
            The number of children the node has
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.AssociatedToken">
            <summary>
            The token that this DataContents element is associated with, or null if it does
            not have a directly associated token
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.Transformation">
            <summary>
            The transformation that applies to this DataContents
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.Restrictions">
            <summary>
            The restrictions that apply to the contents
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.ContentsNativeType">
            <summary>
            The native type of this DataContents element
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.ReferenceTypesTo">
            <summary>
            The types of references to this contents element
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.Children">
            <summary>
            The child nodes of this node
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.Child">
            <summary>
            The child of this node. This is only valid if there is one and only one child node
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.IsImmutable">
            <summary>
            Whether or not the DataContents is immutable
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.IsSizeDeterminable">
            <summary>
            Whether or not the size of the DataContents can ever be determined
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.IsAbsolutePositionDeterminable">
            <summary>
            Whether or not the absolute position of the DataContents can ever be determined
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.IsPositionDeterminable">
            <summary>
            Whether or not any position can be determined
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.From">
            <summary>
            The transformation which created these contents, if it can be determined
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.SizeMultiplier">
            <summary>
            The size multiplier that can convert from the number of elements in the actual contents
            to the number of bytes they represent, or 0 if there is no constant size multiplier that
            applies
            </summary>
        </member>
        <member name="T:MS.Swi.Data.DataContents">
            <summary>
            The internal mapping information for the contents of a data token. Please note that
            there is no ordering information contained in a DataContents object. All of the ordering
            is in the associated Token.
            </summary>
        </member>
        <member name="M:MS.Swi.Data.DataContents.#ctor">
            <summary>
            Construct an empty data contents element
            </summary>
        </member>
        <member name="M:MS.Swi.Data.DataContents.#ctor(MS.Swi.Data.DataContents)">
            <summary>
            Construct a copy of a DataContents element
            </summary>
            <param name="sourceContents">The source contents to use</param>
        </member>
        <member name="M:MS.Swi.Data.DataContents.#ctor(System.Byte[])">
            <summary>
            Construct a root data contents element
            </summary>
            <param name="data">The source data</param>
        </member>
        <member name="M:MS.Swi.Data.DataContents.#ctor(System.Object,MS.Swi.Data.DataTransformation[])">
            <summary>
            Create a contents leaf element, and build the parent objects automatically
            </summary>
            <param name="contents">The contents</param>
            <param name="transformations">The full set of transformations to apply backwards</param>
        </member>
        <member name="M:MS.Swi.Data.DataContents.#ctor(System.Object,MS.Swi.Data.IConstTokenRestrictions,MS.Swi.Data.DataTransformation[])">
            <summary>
            Create a contents leaf element, and build the parent objects automatically
            </summary>
            <param name="contents">The contents</param>
            <param name="restrictions">New restrictions on the contents, or null if no restrictions are being added</param>
            <param name="transformations">The full set of transformations to apply backwards</param>
        </member>
        <member name="M:MS.Swi.Data.DataContents.#ctor(MS.Swi.Data.DataContents,System.Object)">
            <summary>
            Construct an element that is a subset of the parent element. Note that this is where we handle
            the case in a split operation where we are splitting a field whose transformation is defined as
            f(x) + f(y) = f(x+y), by pushing the Transformation data down. For this to work, after the split,
            the actual parent is responsible for voiding its own Transformation in the Split() function
            </summary>
            <param name="parent">The parent contents</param>
            <param name="contents">These contents</param>
        </member>
        <member name="M:MS.Swi.Data.DataContents.#ctor(MS.Swi.Data.DataContents,MS.Swi.Data.DataTransformation)">
            <summary>
            Construct an element that is a transformation of the parent element
            </summary>
            <param name="parent">The parent contents</param>
            <param name="transformation">The transformation</param>
        </member>
        <member name="M:MS.Swi.Data.DataContents.Split">
            <summary>
            Split the contents into single element subcontents (i.e. the maximum number of
            possible sub-contents)
            </summary>
            <returns>The list of contents</returns>
        </member>
        <member name="M:MS.Swi.Data.DataContents.Split(System.Collections.IEnumerable)">
            <summary>
            Split the contents into sub-contents, given the split points provided. Note that the child
            elements are already added as children of this DataContents node by the time they are returned.
            
            This will create zero length children, if they are specified. To exclude zero-length children, use the
            TrimSplitPoints() function first
            
            The length of the resulting contents will always be the length of the split points + 1. This means that
            an empty set of split points will return a single split of the entire section
            
            The contents object must be an array or a String
            </summary>
            <param name="splitPoints">The array of split points (expressed as elements of the underlying splittable native type)</param>
        </member>
        <member name="M:MS.Swi.Data.DataContents.CanDescendFrom(MS.Swi.Data.DataContents)">
            <summary>
            Whether not one DataContents can descend from another
            </summary>
            <param name="prospectiveParent">The prospective parent data contents</param>
            <returns>True if this contents could descend from that one, otherwise false</returns>
        </member>
        <member name="M:MS.Swi.Data.DataContents.FindAssociatedTokens">
            <summary>
            Find the list of all of the tokens which descend from this DataContents
            </summary>
            <returns>The constructed list</returns>
        </member>
        <member name="M:MS.Swi.Data.DataContents.TrimSplitPoints(System.Collections.IEnumerable)">
            <summary>
            Trim out zero length split points from the specified set (including split points at the ends)
            </summary>
            <param name="splitPoints">The split points to analyzer</param>
            <returns>The new set of split points</returns>
        </member>
        <member name="F:MS.Swi.Data.DataContents.mParent">
            Contents tracking:
            	The parent is the parent DataContents, or null if this is the root
            	The associated token is the token that this contents is currently associated with
            	The transformation is the transformation that applies to the parent node, if any
            	The children are the set of child nodes
        </member>
        <member name="P:MS.Swi.Data.DataContents.MS#Swi#Data#IConstDataContents#Restrictions">
            <summary>
            The restrictions that apply to the token
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.Restrictions">
            <summary>
            The restrictions that apply to the token
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.IsImmutable">
            <summary>
            Whether or not the DataContents is immutable
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.IsRoot">
            <summary>
            Whether or not this is a root DataContents
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.Contents">
            <summary>
            The modifiable contents of the Data
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.ContentsNativeType">
            <summary>
            The native type of the contents
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.SizeMultiplier">
            <summary>
            The size multiplier that can convert from the number of elements in the actual contents
            to the number of bytes they represent, or 0 if there is no constant size multiplier that
            applies
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.IsSizeDeterminable">
            <summary>
            Whether or not the size of the DataContents can ever be determined
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.IsAbsolutePositionDeterminable">
            <summary>
            Whether or not the absolute position of the DataContents can ever be determined
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.IsPositionDeterminable">
            <summary>
            Whether or not any position can be determined
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.MS#Swi#Data#IConstDataContents#AssociatedToken">
            <summary>
            The token which is currently associated with these contents
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.AssociatedToken">
            <summary>
            The token which is currently associated with these contents
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.IsSplit">
            <summary>
            Whether or not this is a split of the parent object
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.NumberOfChildren">
            <summary>
            The number of children the node has
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.Transformation">
            <summary>
            The transformation that is required to transform these contents to their parent type
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.MS#Swi#Data#IConstDataContents#Parent">
            <summary>
            The parent contents for this DataContents
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.Parent">
            <summary>
            The parent contents for this DataContents
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.MS#Swi#Data#IConstDataContents#Children">
            <summary>
            The children of this DataContents element
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.Children">
            <summary>
            The children of this DataContents element
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.MS#Swi#Data#IConstDataContents#Child">
            <summary>
            The child of this node. This will return null if this is a leaf node, and throw an exception if
            this node has multiple children
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.Child">
            <summary>
            The child of this node. This will return null if this is a leaf node, and throw an exception if
            this node has multiple children
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.From">
            <summary>
            The name of the transformation which created this data, if it can be determined, otherwise ""
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.MS#Swi#Data#IConstDataContents#Root">
            <summary>
            The root contents for this DataContents object
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.Root">
            <summary>
            The root contents for this DataContents object
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.MS#Swi#Data#IConstDataContents#PositionBase">
            <summary>
            The DataContents that the position of this contents is relative to, or null, if no position
            can be calculated
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.PositionBase">
            <summary>
            The DataContents that the position of this contents is relative to, or null, if no position
            can be calculated
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.MS#Swi#Data#IConstDataContents#Container">
            <summary>
            The first parent DataContents for this DataContents that contains more than
            one child, or null if there is no container for this DataContents (which would
            make it the only DataContents in the root)
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.Container">
            <summary>
            The first parent DataContents for this DataContents that contains more than
            one child, or null if there is no container for this DataContents (which would
            make it the only DataContents in the root)
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.ReferenceTypesTo">
            <summary>
            The types of references to this contents element
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.BaseDefinition">
            <summary>
            The base FCL definition for this contents element
            </summary>
        </member>
        <member name="T:MS.Swi.CommonStorage.AccessPermissions">
            <summary>
            Access flags for permissions on individual common objects
            </summary>
        </member>
        <member name="F:MS.Swi.CommonStorage.AccessPermissions.OwnerWrite">
            <summary>
            Base Flag:
            Owner can write to/modify the common storage logical object after creation
            </summary>
        </member>
        <member name="F:MS.Swi.CommonStorage.AccessPermissions.OwnerDelete">
            <summary>
            Base Flag:
            Owner can delete the common storage logical object
            </summary>
        </member>
        <member name="F:MS.Swi.CommonStorage.AccessPermissions.AnyWrite">
            <summary>
            Base Flag:
            Any object can write to/modify the common storage logical object after creation
            </summary>
        </member>
        <member name="F:MS.Swi.CommonStorage.AccessPermissions.AnyDelete">
            <summary>
            Base Flag
            Any object can delete the common storage logical object
            </summary>
        </member>
        <member name="F:MS.Swi.CommonStorage.AccessPermissions.None">
            <summary>
            Common Flag Mask:
            No one can modify or delete the common storage logical object
            </summary>
        </member>
        <member name="F:MS.Swi.CommonStorage.AccessPermissions.Default">
            <summary>
            Common Flag Mask:
            Default setting: The owner can delete the common storage logical object, and any object
            can modify it
            </summary>
        </member>
        <member name="F:MS.Swi.CommonStorage.AccessPermissions.ReadOnly">
            <summary>
            Common Flag Mask:
            No one can write to/modify the common storage logical object after creation, but the
            owning object can delete it
            </summary>
        </member>
        <member name="F:MS.Swi.CommonStorage.AccessPermissions.OthersReadOnly">
            <summary>
            Common Flag Mask
            The owning object can write to/modify or delete the common storage logical object, but other
            objects have read-only access
            </summary>
        </member>
        <member name="F:MS.Swi.CommonStorage.AccessPermissions.All">
            <summary>
            Common Flag Mask
            All flag options are set, any object can do anything to the common storage logical object
            </summary>
        </member>
        <member name="T:MS.Swi.CommonStorage.Storage">
            <summary>
            CommonStorage is a forced Singleton class, with the public
            static field Data as an implementation.
            </summary>
        </member>
        <member name="M:MS.Swi.CommonStorage.Storage.#ctor">
            <summary>
            Private constructor to build an individual CommonStorage object, which have no contents
            anyway
            </summary>
        </member>
        <member name="M:MS.Swi.CommonStorage.Storage.RegisterForObjectManagementEvents(MS.Swi.CommonStorage.DataUpdateEventHandler)">
            <summary>
            Register the specified handler for object management (Creation/Deletion) events
            </summary>
            <param name="eventHandler">The specified handler</param>
        </member>
        <member name="M:MS.Swi.CommonStorage.Storage.UnregisterForObjectManagementEvents(MS.Swi.CommonStorage.DataUpdateEventHandler)">
            <summary>
            Unregister the specified handler for object management (Creation/Deletion) events
            </summary>
            <param name="eventHandler">The specified handler</param>
        </member>
        <member name="M:MS.Swi.CommonStorage.Storage.RegisterForObjectUpdateEvents(System.String,MS.Swi.CommonStorage.DataUpdateEventHandler)">
            <summary>
            Register the specified handler for modification events for the specified logical object
            </summary>
            <param name="logicalName">The logical object name</param>
            <param name="eventHandler">The specified handler</param>
        </member>
        <member name="M:MS.Swi.CommonStorage.Storage.UnregisterForObjectUpdateEvents(System.String,MS.Swi.CommonStorage.DataUpdateEventHandler)">
            <summary>
            Unregister the specified handler for modification events for the specified logical object
            </summary>
            <param name="logicalName">The logical object name</param>
            <param name="eventHandler">The specified handler</param>
        </member>
        <member name="M:MS.Swi.CommonStorage.Storage.Contents(System.String)">
            <summary>
            Return the contents associated with the specified logical object
            </summary>
            <param name="logicalName">The name of the logical object</param>
            <returns>The contents of the </returns>
        </member>
        <member name="M:MS.Swi.CommonStorage.Storage.Exists(System.String)">
            <summary>
            Does an object of the given logical name exist in common storage?
            </summary>
            <param name="logicalName">The logical name</param>
            <returns>True if the object already exists, false if not</returns>
        </member>
        <member name="M:MS.Swi.CommonStorage.Storage.Permissions(System.String)">
            <summary>
            What are the permissions for the object
            </summary>
            <param name="logicalName">The object logical name</param>
            <returns>The object permissions, or None if the object does not exist</returns>
        </member>
        <member name="M:MS.Swi.CommonStorage.Storage.Clear">
            <summary>
            Reset the storage completely. Note that this ignores any permissions values
            </summary>
        </member>
        <member name="M:MS.Swi.CommonStorage.Storage.Create(System.Object,System.String,System.Type,System.Object,MS.Swi.CommonStorage.AccessPermissions)">
            <summary>
            Create a logical object. This will fail if the object already exists. If the object is
            created, an ObjectCreated event will be generated for it
            </summary>
            <param name="owner">The object owner</param>
            <param name="logicalName">The object logical name</param>
            <param name="requiredType">The type of the logical object, or null if all types are valid</param>
            <param name="initialValue">The initial object value</param>
            <param name="permissions">The permissions flags for the object</param>
            <returns>True if it worked, false if not</returns>
        </member>
        <member name="M:MS.Swi.CommonStorage.Storage.Modify(System.Object,System.String,System.Object)">
            <summary>
            Modify an already existing logical object. If the object cannot be changed by the accessor, an
            ObjectAccessViolation message will be sent to any listeners who have registered for updates on
            that particular object, otherwise, an ObjectModified message will be sent instead.
            </summary>
            <param name="accessor">The object accessing the logical object</param>
            <param name="logicalName">The logical object name</param>
            <param name="replacementValue">The new object value</param>
            <returns>True if it worked, false if not</returns>
        </member>
        <member name="M:MS.Swi.CommonStorage.Storage.Delete(System.Object)">
            <summary>
            Delete (or attempt to delete) all logical objects owned by the specified owning object. Note
            that objects whose permissions don't allow it will not be removed.
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:MS.Swi.CommonStorage.Storage.Delete(System.Object,System.String)">
            <summary>
            Delete a logical object. If the object cannot be deleted by the accessor, an
            ObjectAccessViolation message will be sent to any listeners who have registered for
            object management events, otherwise, an ObjectDeleted message will be sent instead.
            </summary>
            <param name="accessor">The object deleting the logical object</param>
            <param name="logicalName">The logical object name</param>
            <returns>True if it worked, false if not</returns>
        </member>
        <member name="P:MS.Swi.CommonStorage.Storage.LogicalObjectNames">
            <summary>
            Return an ICollection of the names of all of the logical objects
            </summary>
        </member>
        <member name="T:MS.Swi.CommonStorage.Storage.ContentDefinition">
            <summary>
            The content definition class for the internal hash table. The ContentDefinition fully identify the
            object, owner, permissions, and contents of every logical object in the Common Storage
            </summary>
        </member>
        <member name="M:MS.Swi.CommonStorage.Storage.ContentDefinition.#ctor(System.Object,System.String,System.Type,System.Object,MS.Swi.CommonStorage.AccessPermissions)">
            <summary>
            ContentDefinition constructor
            </summary>
            <param name="owner">Owner of the object</param>
            <param name="logicalName">Full logical name of the object</param>
            <param name="objectType">Type of the object, or null if all types are valid</param>
            <param name="objectValue">The initial contents of the object</param>
            <param name="permissions">Permission flags for the object</param>
        </member>
        <member name="M:MS.Swi.CommonStorage.Storage.ContentDefinition.CheckPermissions(System.Object,MS.Swi.CommonStorage.Storage.ContentDefinition.OperationType)">
            <summary>
            Determine if the accessor has sufficient permissions to perform the operation on the logical object
            </summary>
            <param name="accessor"></param>
            <param name="operation"></param>
            <returns></returns>
        </member>
        <member name="M:MS.Swi.CommonStorage.Storage.ContentDefinition.CheckType(System.Object)">
             <summary>
             Check the proposed value against the type
            
             Values are valid if:
             One: The type restriction for these contents is null, meaning no restrictions OR
             Two: The object is null, and the required type is a reference type or interface OR
             Three: The object is of the same class or a subclass of the required type OR
             Four: The required type is an interface, and the object implements it 
             
             
             </summary>
             <param name="proposedValue">The value to check</param>
             <returns>True if the value was valid for the type restriction, false if not</returns>
        </member>
        <member name="M:MS.Swi.CommonStorage.Storage.ContentDefinition.Modify(System.Object,System.Object)">
            <summary>
            Modify the object contents
            </summary>
            <param name="accessor">The accessor</param>
            <param name="replacementValue">The replacement value</param>
            <returns></returns>
        </member>
        <member name="M:MS.Swi.CommonStorage.Storage.ContentDefinition.Register(MS.Swi.CommonStorage.DataUpdateEventHandler)">
            <summary>
            Register a handler for this particular logical object (and this object only)
            </summary>
            <param name="eventHandler"></param>
        </member>
        <member name="M:MS.Swi.CommonStorage.Storage.ContentDefinition.Unregister(MS.Swi.CommonStorage.DataUpdateEventHandler)">
            <summary>
            Unregister a handler for this particular logical object (and this object only)
            </summary>
            <param name="eventHandler"></param>
        </member>
        <member name="P:MS.Swi.CommonStorage.Storage.ContentDefinition.Owner">
            <summary>
            The owner of the logical object
            </summary>
        </member>
        <member name="P:MS.Swi.CommonStorage.Storage.ContentDefinition.ObjectContents">
            <summary>
            The current contents of the logical object
            </summary>
        </member>
        <member name="P:MS.Swi.CommonStorage.Storage.ContentDefinition.ObjectType">
            <summary>
            The object type (or NULL) of the object
            </summary>
        </member>
        <member name="P:MS.Swi.CommonStorage.Storage.ContentDefinition.ObjectPermissions">
            <summary>
            The permission flags for the logical object
            </summary>
        </member>
        <member name="P:MS.Swi.CommonStorage.Storage.ContentDefinition.ObjectName">
            <summary>
            The logical name of the referenced object
            </summary>
        </member>
        <member name="T:MS.Swi.CommonStorage.Storage.ContentDefinition.OperationType">
            <summary>
            Private enumeration defining the type of operation being considered for permissions checks
            </summary>
        </member>
        <member name="T:MS.Swi.CommonStorage.StorageGroup">
            <summary>
            Helper class providing access to the Common Storage shared objects table
            
            This is used to provide a cleaner, and simpler interface for classes which are only
            concerned with their own Common Storage shared objects, and will not be looking at objects
            used by other modules 
            </summary>
        </member>
        <member name="M:MS.Swi.CommonStorage.StorageGroup.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:MS.Swi.CommonStorage.StorageGroup.#ctor(System.String)">
            <summary>
            Construct the StorageGroup with an initial identifier
            </summary>
            <param name="identifier">The identifier to use</param>
        </member>
        <member name="M:MS.Swi.CommonStorage.StorageGroup.IdentifiedName(System.String)">
            <summary>
            Accessor to construct a string, based on the logical name, that should be
            used for all references in the Common Storage space. 
            </summary>
            <param name="name">Base Logical variable name</param>
            <returns>Constructed global name</returns>
        </member>
        <member name="M:MS.Swi.CommonStorage.StorageGroup.Delete(System.String)">
            <summary>
            Delete the specified logical name from common storage. Note that this is only designed to
            work for variables created as part of the VariableWrapper. While it may work for other variables,
            it will only do so if the identifier is the same, and AccessAnyDelete is set as an access flag. 
            
            In general, anything dealing with variables not defined as part of the VariableWrapper should be
            done via CommonStorage directly.
            
            NOTE: Permission failures will generate an ObjectAccessViolation event from CommonStorage,
            although not an exception.
            
            </summary>
            <param name="name">Base Logical variable name</param>
            <returns>True if the object was deleted, false if not</returns>
        </member>
        <member name="M:MS.Swi.CommonStorage.StorageGroup.Clear">
            <summary>
            Delete all logical objects owned by the StorageWrapper, if they can be deleted.
            </summary>
        </member>
        <member name="M:MS.Swi.CommonStorage.StorageGroup.Exists(System.String)">
            <summary>
            Determine if the specified logical name exists in common storage. Note that this is only designed to
            work for variables created as part of the VariableWrapper. While it may work for other variables,
            it will only do so if the identifier is the same
            </summary>
            <param name="name">Base logical variable name</param>
            <returns>True if the variable exists, false if not</returns>
        </member>
        <member name="M:MS.Swi.CommonStorage.StorageGroup.Create(System.String,System.Object)">
            <summary>
            Simplest variable create, which creates an object in Common Storage based on the
            base name, with the access values set to AccessDefault, and the type restrictions
            based on the initial value
            </summary>
            <param name="name">Base logical name</param>
            <param name="initialValue">Initial value of the logical object</param>
        </member>
        <member name="M:MS.Swi.CommonStorage.StorageGroup.Create(System.String,MS.Swi.CommonStorage.AccessPermissions,System.Object)">
            <summary>
            Create a logical object in Common Storage based on the base name. Note that the
            type restriction will be inferred from the type of the value
            </summary>
            <param name="name">The base name</param>
            <param name="permissions">The permissions to apply</param>
            <param name="initialValue">The initial value</param>
        </member>
        <member name="M:MS.Swi.CommonStorage.StorageGroup.Create(System.String,System.Type,MS.Swi.CommonStorage.AccessPermissions,System.Object)">
            <summary>
            Create a fully specified logical object in Common Storage
            </summary>
            <param name="name">The base name</param>
            <param name="restriction">The type restrictions (or null, for no restrictions)</param>
            <param name="permissions">The permissions to apply</param>
            <param name="initialValue">The initial value</param>
        </member>
        <member name="P:MS.Swi.CommonStorage.StorageGroup.Identifier">
            <summary>
            Method for getting/setting the identification string that is used to 
            access the data. Please note that modifying the identifier after Common Storage elements
            have been created with this StorageGroup will cause problems in finding those elements later.
            </summary>
        </member>
        <member name="P:MS.Swi.CommonStorage.StorageGroup.Item(System.String)">
            <summary>
            Indexing function to provide access to get/set variables in the Common Storage space.
            
            If the variable does not exist, this version (unlike the version in Common Storage) will
            throw an exception, as we do NOT expect to find that variables don't exist.
            </summary>
        </member>
        <member name="T:MS.Swi.CommonStorage.DataUpdateEventArgs">
            <summary>
            DataUpdate Event Argument Definition
            </summary>
        </member>
        <member name="M:MS.Swi.CommonStorage.DataUpdateEventArgs.#ctor(MS.Swi.CommonStorage.DataUpdateEventArgs.UpdateType,System.String)">
            <summary>
            Event Arguments
            </summary>
            <param name="type">The type of event</param>
            <param name="logicalName">The logical object involved</param>
        </member>
        <member name="P:MS.Swi.CommonStorage.DataUpdateEventArgs.Type">
            <summary>
            Property to return the event Type
            </summary>
        </member>
        <member name="P:MS.Swi.CommonStorage.DataUpdateEventArgs.ObjectName">
            <summary>
            Property to return the name of the logical object
            </summary>
        </member>
        <member name="T:MS.Swi.CommonStorage.DataUpdateEventArgs.UpdateType">
            <summary>
            Event Types
            </summary>
        </member>
        <member name="F:MS.Swi.CommonStorage.DataUpdateEventArgs.UpdateType.ObjectCreated">
            <summary>
            Report the creation of a common storage logical object
            </summary>
        </member>
        <member name="F:MS.Swi.CommonStorage.DataUpdateEventArgs.UpdateType.ObjectDeleted">
            <summary>
            Report the deletion of a common storage logical object
            </summary>
        </member>
        <member name="F:MS.Swi.CommonStorage.DataUpdateEventArgs.UpdateType.ObjectModified">
            <summary>
            Report the modification of a common storage logical object
            </summary>
        </member>
        <member name="F:MS.Swi.CommonStorage.DataUpdateEventArgs.UpdateType.ObjectAccessViolation">
            <summary>
            Report that an illegal attempt to modify or delete a common storage logical object occurred
            </summary>
        </member>
        <member name="F:MS.Swi.CommonStorage.DataUpdateEventArgs.UpdateType.AllObjectsDeleted">
            <summary>
            Report that all objects in the storage have been deleted
            </summary>
        </member>
        <member name="T:MS.Swi.CommonStorage.DataUpdateEventHandler">
            <summary>
            DataUpdateEvent Handler Definition
            </summary>
        </member>
        <member name="T:MS.Swi.Mitm.IConstRemoteClassDefinition">
            <summary>
            The read-only (i.e. true const) interface for a RemoteClassDefinition
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.IConstRemoteClassDefinition.ToXml(System.Xml.XmlDocument)">
            <summary>
            Export the definition to Xml
            </summary>
            <param name="owningDocument">The owning document for the XmlNode</param>
            <returns>The constructed Xml node</returns>
        </member>
        <member name="M:MS.Swi.Mitm.IConstRemoteClassDefinition.GetArgumentList">
            <summary>
            Extract the arguments as an argument list
            </summary>
            <returns>A newly created array of strings which is the argument list</returns>
        </member>
        <member name="M:MS.Swi.Mitm.IConstRemoteClassDefinition.AsDefinitionString(System.Char)">
            <summary>
            Extract the entire definition as a definition string for passing to the instrumentation
            </summary>
            <param name="separator">The separator character to use</param>
            <returns>The constructed string</returns>
        </member>
        <member name="M:MS.Swi.Mitm.IConstRemoteClassDefinition.Clone">
            <summary>
            Create a duplicate of the object as a remote class definition
            </summary>
            <returns>The duplicate as a remote class definition</returns>
        </member>
        <member name="P:MS.Swi.Mitm.IConstRemoteClassDefinition.Classname">
            <summary>
            The fully qualified name of the remote class
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.IConstRemoteClassDefinition.Arguments">
            <summary>
            Read-only access to the arguments
            </summary>
        </member>
        <member name="T:MS.Swi.Mitm.RemoteClassDefinition">
            <summary>
            The full definition of a MitmClass, including the fully qualified classname and the arguments to 
            the class on initialization
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.RemoteClassDefinition.#ctor">
            <summary>
            Define a remote class
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.RemoteClassDefinition.#ctor(System.String)">
            <summary>
            Define a remote class with no arguments
            </summary>
            <param name="classname">The name of the IMitmRemoteClass class</param>
        </member>
        <member name="M:MS.Swi.Mitm.RemoteClassDefinition.#ctor(System.String,System.String[])">
            <summary>
            Define a remote class
            </summary>
            <param name="classname">The name of the IMitmRemoteClass class</param>
            <param name="arguments">The arguments for the initialization of that class</param>
        </member>
        <member name="M:MS.Swi.Mitm.RemoteClassDefinition.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Define a remote class
            </summary>
            <param name="classname">The name of the IMitmRemoteClass class</param>
            <param name="arguments">The arguments for the initialization of that class</param>
        </member>
        <member name="M:MS.Swi.Mitm.RemoteClassDefinition.#ctor(System.Xml.XmlElement)">
            <summary>
            Define a remote class from Xml
            </summary>
            <param name="definition">The Xml definition</param>
        </member>
        <member name="M:MS.Swi.Mitm.RemoteClassDefinition.FromXml(System.Xml.XmlElement)">
            <summary>
            Set the contents from the Xml definition
            </summary>
            <param name="definition">The Xml definition to use</param>
        </member>
        <member name="M:MS.Swi.Mitm.RemoteClassDefinition.ToXml(System.Xml.XmlDocument)">
            <summary>
            Export the definition to Xml
            </summary>
            <param name="owningDocument">The owning document for the element</param>
            <returns>The constructed Xml element</returns>
        </member>
        <member name="M:MS.Swi.Mitm.RemoteClassDefinition.GetArgumentList">
            <summary>
            Extract the arguments as an argument list
            </summary>
            <returns>A newly created array of strings which is the argument list</returns>
        </member>
        <member name="M:MS.Swi.Mitm.RemoteClassDefinition.AsDefinitionString(System.Char)">
            <summary>
            Extract the entire definition as a definition string for passing to the instrumentation
            </summary>
            <param name="separator">The separator character to use</param>
            <returns>The constructed string</returns>
        </member>
        <member name="M:MS.Swi.Mitm.RemoteClassDefinition.System#ICloneable#Clone">
            <summary>
            Create a deep copy of the remote class definition as an object
            </summary>
            <returns>The duplicate as an object</returns>
        </member>
        <member name="M:MS.Swi.Mitm.RemoteClassDefinition.MS#Swi#Mitm#IConstRemoteClassDefinition#Clone">
            <summary>
            Create a deep copy of the remote class definition as a const remote class definition
            </summary>
            <returns>The duplicate as a const remote class definition</returns>
        </member>
        <member name="M:MS.Swi.Mitm.RemoteClassDefinition.Clone">
            <summary>
            Create a deep copy of the remote class definition
            </summary>
            <returns>The duplicate as a remote class definition</returns>
        </member>
        <member name="P:MS.Swi.Mitm.RemoteClassDefinition.Classname">
            <summary>
            The fully qualified name of the remote class
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.RemoteClassDefinition.ModifiableArguments">
            <summary>
            The arguments to the remote class
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.RemoteClassDefinition.Arguments">
            <summary>
            Read-only access to the arguments
            </summary>
        </member>
        <member name="T:MS.Swi.Data.ElementCharacteristics">
            <summary>
            Specific characteristics about the type
            </summary>
        </member>
        <member name="F:MS.Swi.Data.ElementCharacteristics.None">
            <summary>
            The requisit flag indicating that no flags are set
            </summary>
        </member>
        <member name="F:MS.Swi.Data.ElementCharacteristics.Severable">
            <summary>
            The token can be split at any point into subtokens of the same type
            </summary>
        </member>
        <member name="F:MS.Swi.Data.ElementCharacteristics.Singleton">
            <summary>
            This definition is a singleton, and cannot be subdivided except by a Transformation
            </summary>
        </member>
        <member name="F:MS.Swi.Data.ElementCharacteristics.ValidAsAncestor">
            <summary>
            The token can validly be treated as its parent. Note that this
            is recursive
            </summary>
        </member>
        <member name="F:MS.Swi.Data.ElementCharacteristics.Encapsulation">
            <summary>
            This definition is an encapsulation. 
            </summary>
        </member>
        <member name="F:MS.Swi.Data.ElementCharacteristics.Token">
            <summary>
            This definition is a token
            </summary>
        </member>
        <member name="F:MS.Swi.Data.ElementCharacteristics.Specific">
            <summary>
            This definition is a specific definition, and should not be included by default by 
            analyzers
            </summary>
        </member>
        <member name="T:MS.Swi.Data.ElementDefinition">
            <summary>
            The token definition class defines the characteristics of each specific token type
            </summary>
        </member>
        <member name="F:MS.Swi.Data.ElementDefinition.BaseTokenDefinitionName">
            <summary>
            The name of the base FCL type
            </summary>
        </member>
        <member name="F:MS.Swi.Data.ElementDefinition.ContainerTokenDefinitionName">
            <summary>
            The name of the special FCL heterogenous container type
            </summary>
        </member>
        <member name="F:MS.Swi.Data.ElementDefinition.ContainerTokenNativeType">
            <summary>
            The type of the special FCL heterogenous container native representation
            </summary>
        </member>
        <member name="F:MS.Swi.Data.ElementDefinition.BaseTokenDefinition">
            <summary>
            The base FCL Definition for data
            </summary>
        </member>
        <member name="F:MS.Swi.Data.ElementDefinition.ContainerTokenDefinition">
            <summary>
            A specialized FCL Definition for Containers
            </summary>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinition.#ctor(System.String,System.Type,MS.Swi.Data.ElementCharacteristics)">
            <summary>
            Constructor for the token definition
            </summary>
            <param name="tokenName">The name of the token</param>
            <param name="nativeType">The native type the token represents</param>
            <param name="characteristics">The characteristics of this type of token</param>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinition.#ctor(System.String,System.String,MS.Swi.Data.ElementCharacteristics)">
            <summary>
            Constructor for the token definition
            </summary>
            <param name="tokenName">The name of the token</param>
            <param name="baseName">The name of the token this token refines</param>
            <param name="characteristics">The characteristics of this type of token</param>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinition.#ctor(System.String,MS.Swi.Data.ElementCharacteristics)">
            <summary>
            Constructor for the encapsulation definition definition
            </summary>
            <param name="tokenName">The name of the token</param>
            <param name="characteristics">The characteristics of this type of token</param>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinition.#ctor(System.Xml.XmlElement)">
            <summary>
            Construct a token definition from an Xml node. Note that it currently only will recognize
            types in the System or current assembly for the associated type. This will change.
            </summary>
            <param name="xmlDefinition">The defined node</param>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinition.CalculateHashCode">
            <summary>
            Calculate the internal hash code
            </summary>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinition.ValidateCharacteristics">
            <summary>
            Validate the characteristics, and fill in any defaults that are blank
            </summary>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinition.GetHashCode">
            <summary>
            Get a hash code for the token definition
            </summary>
            <returns>The calculated hash</returns>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinition.Equals(System.Object)">
            <summary>
            Determine if two objects are equivalent token definitions
            </summary>
            <param name="obj">The other object</param>
            <returns>True if it is an equivalent definition, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinition.ToXmlElement(System.Xml.XmlDocument)">
            <summary>
            Create an Xml element that defines the definition, for the specified owning document
            </summary>
            <param name="owningDocument">The owning document</param>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinition.HasCharacteristic(MS.Swi.Data.ElementCharacteristics)">
            <summary>
            Does the element have the specified characteristic? If the characteristic is a combination of multiple
            characteristics, it will return true only if all of the characteristics are a match
            </summary>
            <param name="characteristic">The characteristic (or characteristics) to check for</param>
            <returns>True if there is an exact match, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinition.IsRefinementOf(System.String)">
            <summary>
            Determine if one token is a refinement of another. Note that we allow for a type
            to be a refinement of itself
            </summary>
            <param name="definitionName">The base definition name</param>
            <returns>True if the definition is a refinement of the definitionName</returns>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinition.CanDescendFrom(System.String)">
            <summary>
            Determine if a token of this type can descend from the specified definition. This handles
            checking for ancestral equivalences (i.e. it uses CanBeTreatedAs)
            </summary>
            <param name="definitionName">The base definition name</param>
            <returns>True if the this definition can descend from the definitionName</returns>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinition.CanBeTreatedAs(System.String)">
            <summary>
            Determine if one token can be treated as another. Note that it is always valid to ask if you
            can be treated as yourself. Note that this is MORE restrictive than checking for inheritance,
            and exists for analyzers that match particular types. In normal usage, the IsRefinementOf 
            accessor is more likely to be the desired accessor
            </summary>
            <param name="baseDefinitionName">The base definition name</param>
            <returns>True if this definition can be treated as the baseDefinitionName</returns>
        </member>
        <member name="P:MS.Swi.Data.ElementDefinition.NativeType">
            <summary>
            The NativeType
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ElementDefinition.Ancestor">
            <summary>
            The token definition instance that this definition refines
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ElementDefinition.Refines">
            <summary>
            The token that this token refines (i.e. XMLString refines String which refines ByteArray)
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ElementDefinition.Defines">
            <summary>
            The token name
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ElementDefinition.Characteristics">
            <summary>
            The known characteristics of this type of token
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ElementDefinition.IsSpecific">
            <summary>
            Whether or not this definition is included only if specifically requested
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ElementDefinition.IsGeneral">
            <summary>
            Whether or not this definition is included by default
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ElementDefinition.IsTokenDefinition">
            <summary>
            Whether or not this definition defines a token
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ElementDefinition.IsEncapsulationDefinition">
            <summary>
            Whether or not this token definition defines an encapsulation
            </summary>
        </member>
        <member name="T:MS.Swi.Data.IConstElementDefinitions">
            <summary>
            The const (i.e. true Read Only) interface definition for ElementDefinitions
            </summary>
        </member>
        <member name="M:MS.Swi.Data.IConstElementDefinitions.IsTheSameAs(MS.Swi.Data.IConstElementDefinitions)">
            <summary>
            Is this set of definitions the same as the other set of definitions
            </summary>
            <param name="otherDefinitions">The comparison set of definitions</param>
            <returns>True if they are the same, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.IConstElementDefinitions.ToXmlElement(System.Xml.XmlDocument)">
            <summary>
            Create an Xml element that defines the definitions, for the specified owning document
            </summary>
            <param name="owningDocument">The owning document</param>
        </member>
        <member name="M:MS.Swi.Data.IConstElementDefinitions.Find(System.String)">
            <summary>
            Find a registered token definition
            </summary>
            <param name="tokenName">The name of the token definition</param>
            <returns>The token definition, or null if it could not be found</returns>
        </member>
        <member name="M:MS.Swi.Data.IConstElementDefinitions.Contains(System.String)">
            <summary>
            Determine if the token definition is contained in this collection
            </summary>
            <param name="tokenName">The name to check</param>
            <returns>True if it is contained, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.IConstElementDefinitions.Clone">
            <summary>
            Return a clone of the IConstElementDefinitions as a new ElementDefinitions object
            </summary>
            <returns>The new ElementDefinitions as ElementDefinitions</returns>
        </member>
        <member name="P:MS.Swi.Data.IConstElementDefinitions.Count">
            <summary>
            The number of definitions 
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstElementDefinitions.Definitions">
            <summary>
            Enumerate the definitions
            </summary>
        </member>
        <member name="T:MS.Swi.Data.ElementDefinitions">
            <summary>
            The token definitions class serves as an encapsulation of a set of registered token
            definitions
            </summary>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinitions.LoadDefinitions(System.String)">
            <summary>
            Load the entire set of token definitions. The filename will be searched for first as given,
            then in the local directory, and then in the FCL installation directory.
            </summary>
            <param name="fileName">The filename for the Xml file containing the definitions</param>
            <returns>The definition set</returns>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinitions.LoadDefinitions(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Load a set of definitions based on a specific whitelist and blacklist.  The filename will be searched for first as given,
            then in the local directory, and then in the FCL installation directory.
            </summary>
            <param name="fileName">The filename for the Xml file containing the definitions</param>
            <param name="whitelist">Whitelisted definitions (regular expressions acceptable), or null</param>
            <param name="blacklist">Blacklisted definitions (regular expressions acceptable), or null</param>
            <returns>The definition set</returns>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinitions.LoadDefinitions(System.Xml.XmlElement)">
            <summary>
            Load the entire set of token definitions
            </summary>
            <param name="tokenDefinitions">The Xml node containing the token definitions, defined by </param>
            <returns>The definition set</returns>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinitions.LoadDefinitions(System.Xml.XmlElement,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Load a set of definitions based on a specific whitelist and blacklist
            </summary>
            <param name="tokenDefinitions">The Xml node containing the token definitions, defined by </param>
            <param name="whitelist">Whitelisted definitions (regular expressions acceptable), or null</param>
            <param name="blacklist">Blacklisted definitions (regular expressions acceptable), or null</param>
            <returns>The definition set</returns>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinitions.#ctor">
            <summary>
            Create the basic token definition table, consisting only of the base data type
            </summary>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinitions.#ctor(MS.Swi.Data.ElementDefinitions)">
            <summary>
            A private copy constructor for efficient handling of the clone
            </summary>
            <param name="definitions">The source definitions</param>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinitions.Add(MS.Swi.Data.ElementDefinition)">
            <summary>
            Add a token definition to the table of token definitions
            </summary>
            <param name="definition">The token definition</param>
            <returns>True if the definition is now in the set, and false if it conflicts with an existing definition</returns>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinitions.Add(MS.Swi.Data.ElementDefinitions)">
            <summary>
            Add another set of definitions into the current set
            </summary>
            <param name="definitions">The token definitions to add</param>
            <returns>True if the definitions could be added, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinitions.RemoveOrphans">
            <summary>
            Remove any orphaned definitions from the set. This should be called after
            all token definitions have been loaded into a set, and it will prune out any
            definitions whose ancestors cannot be traced.
            </summary>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinitions.Clear">
            <summary>
            Clear the set of registered token definitions
            </summary>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinitions.IsTheSameAs(MS.Swi.Data.IConstElementDefinitions)">
            <summary>
            Is this set of token definitions the same as the comparison set
            </summary>
            <param name="otherDefinitions">The comparison definitions</param>
            <returns>True if they are the same, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinitions.ToXmlElement(System.Xml.XmlDocument)">
            <summary>
            Create an Xml element that defines the definitions, for the specified owning document
            </summary>
            <param name="owningDocument">The owning document</param>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinitions.Find(System.String)">
            <summary>
            Find a registered token definition
            </summary>
            <param name="tokenName">The name of the token definition</param>
            <returns>The token definition, or null if it could not be found</returns>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinitions.Contains(System.String)">
            <summary>
            Determine if the token definition is contained in this collection
            </summary>
            <param name="tokenName">The name to check</param>
            <returns>True if it is contained, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinitions.GetEnumerator">
            <summary>
            The enumerator for iteration
            </summary>
            <returns>An enumerator</returns>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinitions.System#ICloneable#Clone">
            <summary>
            Return a clone of the ElementDefinitions
            </summary>
            <returns>The new ElementDefinitions as an object</returns>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinitions.Clone">
            <summary>
            Return a clone of the ElementDefinitions
            </summary>
            <returns>The new ElementDefinitions as ElementDefinitions</returns>
        </member>
        <member name="P:MS.Swi.Data.ElementDefinitions.Count">
            <summary>
            The number of definitions 
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ElementDefinitions.Definitions">
            <summary>
            An enumerator for the set of definitions
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\libd\AMD64\CTFCore.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CTFCore</name>
    </assembly>
    <members>
        <member name="T:MS.Swi.FCLCoreComponentAttribute">
            <summary>
            This marks the component as part of the FCL core. This should NOT be used by anyone except
            SWI. For everyone else, use the MS.Swi.InstallationManagementAttribute
            </summary>
        </member>
        <member name="T:MS.Swi.Reflection">
            <summary>
            General reflection helper functions, grouped to prevent code duplication
            </summary>
        </member>
        <member name="M:MS.Swi.Reflection.#cctor">
            <summary>
            Add bridging support for loaded assemblies in the LoadFrom() domain being called by Assemblies in the
            Load() domain.
            </summary>
        </member>
        <member name="M:MS.Swi.Reflection.ResolveMissingAssembly(System.Object,System.ResolveEventArgs)">
            <summary>
            Bridge the LoadFrom and Load contexts by searching the whole set of loaded assemblies looking for
            the assembly to resolve
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:MS.Swi.Reflection.#ctor">
            <summary>
            There are no valid Reflection objects
            </summary>
        </member>
        <member name="M:MS.Swi.Reflection.LoadAssembliesFromDirectory(System.String)">
            <summary>
            Load all valid managed assemblies in the specified directory
            </summary>
            <param name="directoryPath">The specified directory</param>
            <returns>True if we loaded any assemblies, false if not</returns>
        </member>
        <member name="M:MS.Swi.Reflection.FindClass(System.String)">
            <summary>
            Search all loaded assemblies for the specified classname
            </summary>
            <param name="className">The full, case sensitive name</param>
            <returns>The matching type, or null</returns>
        </member>
        <member name="M:MS.Swi.Reflection.FindClass(System.String,System.String)">
            <summary>
            Search all loaded assemblies for the specified classname. Note that this does NOT
            limit itself to public classes, because we are asking for the class by name.
            </summary>
            <param name="className">The full, case sensitive name</param>
            <param name="requiredInterface">The required interface, or null, if no interface is required</param>
            <returns>The matching type, or null</returns>
        </member>
        <member name="M:MS.Swi.Reflection.FindClasses(System.String,System.Type)">
            <summary>
            Find the set of all public classes which are non-abstract, and implement the
            specified interface and the specified attribute (if provided)
            </summary>
            <param name="requiredInterface">The required interface</param>
            <param name="requiredAttribute">The required attribute, or null</param>
            <returns>A list of Type objects</returns>
        </member>
        <member name="M:MS.Swi.Reflection.CacheFclAssembly(System.Reflection.Assembly)">
            <summary>
            Cache the assembly into the FCL lookaside cache if it matches
            </summary>
            <param name="loadedAssembly">The loaded assembly</param>
        </member>
        <member name="M:MS.Swi.Reflection.LoadReferencedAssembly(System.String)">
            <summary>
            Load an assembly (which must be referenced by another assembly already loaded) into
            the AppDomain. Note that we will return success if the desired assembly has already been
            loaded, and that we may load more than one assembly with the same simple name.
            </summary>
            <param name="assemblyName">The symbolic name of the assembly we want to load</param>
            <returns>True if the assembly can be loaded, false if not</returns>
        </member>
        <member name="M:MS.Swi.Reflection.FindMethod(System.String,System.Type[])">
            <summary>
            Find a specific method, ignoring privacy 
            </summary>
            <param name="methodFullName">The full (i.e. namespace.class.method) name of the method</param>
            <param name="arguments">The method argument signature to look for or null if there are no arguments</param>
            <returns>The matching method, or null if no method was found</returns>
        </member>
        <member name="T:MS.Swi.Data.Generic.ConstArray`1">
            <summary>
            An uneditable view of an array of objects or value types
            </summary>
            <typeparam name="ContentsType">The underlying array</typeparam>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstArray`1.#ctor(`0[])">
            <summary>
            Construct a const view of an underlying array
            </summary>
            <param name="underlyingArray">The underlying array</param>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstArray`1.Extract(System.Int32,System.Int32)">
            <summary>
            Extract a subset of the source array 
            </summary>
            <param name="startIndex">The start index in the source array</param>
            <param name="length">The length of the subset</param>
            <returns>The newly constructed array</returns>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstArray`1.Copy(System.Int32,System.Int32,System.Int32,`0[])">
            <summary>
            Copy a subset of the contents of the array into another array
            </summary>
            <param name="startIndex">The start index in the source array</param>
            <param name="length">The length of the subset</param>
            <param name="destIndex">The start index in the destination array</param>
            <param name="destination">The destination array</param>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstArray`1.ToArray">
            <summary>
            Create a clone of the underlying array and return it
            </summary>
            <returns>The shallow clone of the underlying array</returns>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstArray`1.GetEnumerator">
            <summary>
            The enumerator for iteration
            </summary>
            <returns>An enumerator</returns>
        </member>
        <member name="P:MS.Swi.Data.Generic.ConstArray`1.Length">
            <summary>
            The length of the array
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Generic.ConstArray`1.Item(System.Int32)">
            <summary>
            The contents at any particular index
            </summary>
            <param name="index">The index into the array</param>
            <returns>The value at that location</returns>
        </member>
        <member name="T:MS.Swi.Data.Generic.ConstList`1">
            <summary>								
            An uneditable view of a list of objects
            </summary>
            <typeparam name="ContentsType">The underlying type</typeparam>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstList`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Construct a read-only view of an existing list
            </summary>
            <param name="underlyingList"></param>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstList`1.#ctor(MS.Swi.Data.Generic.ConstList{`0})">
            <summary>
            Construct a read-only view of an existing list
            </summary>
            <param name="underlyingList"></param>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstList`1.#ctor(`0[])">
            <summary>
            Construct a read-only view of an array as a list
            </summary>
            <param name="underlyingArray">The underlying array</param>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstList`1.GetEnumerator">
            <summary>
            The enumerator for iteration
            </summary>
            <returns>An enumerator</returns>
        </member>
        <member name="P:MS.Swi.Data.Generic.ConstList`1.Count">
            <summary>
            The number of items in the list
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Generic.ConstList`1.Item(System.Int32)">
            <summary>
            The element at the indicated list
            </summary>
            <param name="index">The index</param>
            <returns>The element</returns>
        </member>
        <member name="T:MS.Swi.Data.Generic.ConstList`2">
            <summary>
            An uneditable view of a list of objects which also have const interfaces that can be exposed
            </summary>
            <typeparam name="IConstContentsType">The const interface (should be an IConst...)</typeparam>
            <typeparam name="ContentsType">The underlying implementation (should be an IConst...)</typeparam>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstList`2.#ctor(System.Collections.Generic.List{`1})">
            <summary>
            Construct a read-only view of an existing list
            </summary>
            <param name="underlyingList"></param>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstList`2.#ctor(MS.Swi.Data.Generic.ConstList{`1})">
            <summary>
            Construct a read-only view of an existing list
            </summary>
            <param name="underlyingList"></param>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstList`2.#ctor(MS.Swi.Data.Generic.ConstList{`0,`1})">
            <summary>
            Construct a read-only view of an existing list
            </summary>
            <param name="underlyingList"></param>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstList`2.#ctor(`1[])">
            <summary>
            Construct a read-only view of an array as a list
            </summary>
            <param name="underlyingArray">The underlying array</param>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstList`2.GetEnumerator">
            <summary>
            The enumerator for iteration
            </summary>
            <returns>An enumerator</returns>
        </member>
        <member name="P:MS.Swi.Data.Generic.ConstList`2.Count">
            <summary>
            The number of items in the list
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Generic.ConstList`2.Item(System.Int32)">
            <summary>
            The element at the indicated list
            </summary>
            <param name="index">The index</param>
            <returns>The element</returns>
        </member>
        <member name="T:MS.Swi.Data.Generic.ConstSortedList`2">
            <summary>
            An uneditable view of a sorted list of objects
            </summary>
            <typeparam name="KeyType">The key of the sorted list</typeparam>
            <typeparam name="ContentsType">The underlying implementation (should be an IConst...)</typeparam>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstSortedList`2.#ctor(System.Collections.Generic.SortedList{`0,`1})">
            <summary>
            Construct a read-only view of an existing list
            </summary>
            <param name="underlyingSortedList"></param>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstSortedList`2.#ctor(MS.Swi.Data.Generic.ConstSortedList{`0,`1})">
            <summary>
            Construct a read-only view of an existing list
            </summary>
            <param name="underlyingSortedList"></param>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstSortedList`2.IndexOfKey(`0)">
            <summary>
            The index of the given key
            </summary>
            <param name="key">The key</param>
            <returns>The index</returns>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstSortedList`2.GetByIndex(System.Int32)">
            <summary>
            Get the value based on an index
            </summary>
            <param name="index">The index</param>
            <returns></returns>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstSortedList`2.ContainsKey(`0)">
            <summary>
            Does the list contain the given key
            </summary>
            <param name="key">The key</param>
            <returns>True if it contains the key, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstSortedList`2.GetEnumerator">
            <summary>
            The enumerator for iteration
            </summary>
            <returns>An enumerator</returns>
        </member>
        <member name="P:MS.Swi.Data.Generic.ConstSortedList`2.Count">
            <summary>
            The number of items in the list
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Generic.ConstSortedList`2.Item(`0)">
            <summary>
            The element at the indicated list
            </summary>
            <param name="index">The index</param>
            <returns>The element</returns>
        </member>
        <member name="T:MS.Swi.Data.Generic.ConstSortedList`3">
            <summary>
            An uneditable view of a sorted list of objects which also have const interfaces that can be exposed
            </summary>
            <typeparam name="KeyType">The key of the sorted list</typeparam>
            <typeparam name="IConstContentsType">The const interface (should be an IConst...)</typeparam>
            <typeparam name="ContentsType">The underlying implementation (should be an IConst...)</typeparam>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstSortedList`3.#ctor(System.Collections.Generic.SortedList{`0,`2})">
            <summary>
            Construct a read-only view of an existing list
            </summary>
            <param name="underlyingSortedList"></param>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstSortedList`3.#ctor(MS.Swi.Data.Generic.ConstSortedList{`0,`2})">
            <summary>
            Construct a read-only view of an existing list
            </summary>
            <param name="underlyingSortedList"></param>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstSortedList`3.#ctor(MS.Swi.Data.Generic.ConstSortedList{`0,`1,`2})">
            <summary>
            Construct a read-only view of an existing list
            </summary>
            <param name="underlyingSortedList"></param>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstSortedList`3.IndexOfKey(`0)">
            <summary>
            The index of the given key
            </summary>
            <param name="key">The key</param>
            <returns>The index</returns>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstSortedList`3.GetByIndex(System.Int32)">
            <summary>
            Get the value based on an index
            </summary>
            <param name="index">The index</param>
            <returns></returns>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstSortedList`3.ContainsKey(`0)">
            <summary>
            Does the list contain the given key
            </summary>
            <param name="key">The key</param>
            <returns>True if it contains the key, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstSortedList`3.GetEnumerator">
            <summary>
            The enumerator for iteration
            </summary>
            <returns>An enumerator</returns>
        </member>
        <member name="P:MS.Swi.Data.Generic.ConstSortedList`3.Count">
            <summary>
            The number of items in the list
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Generic.ConstSortedList`3.Item(`0)">
            <summary>
            The element at the indicated list
            </summary>
            <param name="index">The index</param>
            <returns>The element</returns>
        </member>
        <member name="T:MS.Swi.Data.Generic.ConstDictionary`2">
            <summary>
            An uneditable view of a dictionary
            </summary>
            <typeparam name="KeyType">The key type</typeparam>
            <typeparam name="ContentsType">The contents type</typeparam>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstDictionary`2.#ctor(System.Collections.Generic.Dictionary{`0,`1})">
            <summary>
            Construct the view of the underlying dictionary
            </summary>
            <param name="underlyingDictionary">The underlying dictionary</param>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstDictionary`2.#ctor(MS.Swi.Data.Generic.ConstDictionary{`0,`1})">
            <summary>
            Construct the view of the underlying dictionary
            </summary>
            <param name="underlyingDictionary">The underlying dictionary</param>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstDictionary`2.ContainsKey(`0)">
            <summary>
            Does the dictionary contain the given key
            </summary>
            <param name="key">The key</param>
            <returns>True if it contains the key, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstDictionary`2.GetEnumerator">
            <summary>
            Provide an enumeration of the contents
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Generic.ConstDictionary`2.Item(`0)">
            <summary>
            Provide access to the specified element
            </summary>
            <param name="index">The index to use</param>
            <returns>The specified element</returns>
        </member>
        <member name="P:MS.Swi.Data.Generic.ConstDictionary`2.Values">
            <summary>
            Provide direct access to all of the values
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Generic.ConstDictionary`2.Keys">
            <summary>
            Provide direct access to all of the keys
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Generic.ConstDictionary`2.Count">
            <summary>
            The number of elements in the dictionary
            </summary>
        </member>
        <member name="T:MS.Swi.Data.Generic.ConstDictionary`3">
            <summary>
            An uneditable view of the const forms of a dictionary
            </summary>
            <typeparam name="KeyType">The key type</typeparam>
            <typeparam name="IConstContentsType">The const interface type</typeparam>
            <typeparam name="ContentsType">The contents type</typeparam>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstDictionary`3.#ctor(System.Collections.Generic.Dictionary{`0,`2})">
            <summary>
            Construct the view of the underlying dictionary
            </summary>
            <param name="underlyingDictionary">The underlying dictionary</param>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstDictionary`3.#ctor(MS.Swi.Data.Generic.ConstDictionary{`0,`2})">
            <summary>
            Construct the view of the underlying dictionary
            </summary>
            <param name="underlyingDictionary">The underlying dictionary</param>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstDictionary`3.#ctor(MS.Swi.Data.Generic.ConstDictionary{`0,`1,`2})">
            <summary>
            Construct the view of the underlying dictionary
            </summary>
            <param name="underlyingDictionary">The underlying dictionary</param>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstDictionary`3.ContainsKey(`0)">
            <summary>
            Does the dictionary contain the given key
            </summary>
            <param name="key">The key</param>
            <returns>True if it contains the key, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstDictionary`3.GetEnumerator">
            <summary>
            Provide an enumeration of the contents
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Generic.ConstDictionary`3.Item(`0)">
            <summary>
            Provide access to the specified element
            </summary>
            <param name="index">The index to use</param>
            <returns>The element specified as the Const interface</returns>
        </member>
        <member name="P:MS.Swi.Data.Generic.ConstDictionary`3.Values">
            <summary>
            Provide direct access to all of the values
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Generic.ConstDictionary`3.Keys">
            <summary>
            Provide direct access to all of the keys
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Generic.ConstDictionary`3.Count">
            <summary>
            The number of elements in the dictionary
            </summary>
        </member>
        <member name="T:MS.Swi.Utilities">
            <summary>
            General system or utility functions, grouped to prevent code duplication
            </summary>
        </member>
        <member name="M:MS.Swi.Utilities.#ctor">
            <summary>
            There are no valid Utilities objects
            </summary>
        </member>
        <member name="F:MS.Swi.Utilities.ArchitectureIs64Bit">
            <summary>
            Whether or not we are running in a 64 bit CLR
            </summary>
        </member>
        <member name="M:MS.Swi.Utilities.AddToPath(System.String)">
            <summary>
            Add the specified directory to the end of the path, IF it doesn't already exist
            somewhere with in the path
            </summary>
            <param name="directory">The directory to add</param>
        </member>
        <member name="M:MS.Swi.Utilities.AddFclPaths">
            <summary>
            Add the FCL file paths to the path environment variable for this process
            </summary>
        </member>
        <member name="T:MS.Swi.Data.IConstToken">
            <summary>
            The read-only interfaces to the Token object
            </summary>
        </member>
        <member name="M:MS.Swi.Data.IConstToken.GetValidDefinitions">
            <summary>
            Get the complete set of valid definitions we could apply
            </summary>
            <returns>The set</returns>
        </member>
        <member name="M:MS.Swi.Data.IConstToken.GetContents(System.String)">
            <summary>
            Get the associated contents object given an FCL definition name and a 
            native representation. Note that this will NOT go past a split contents if the
            transformation requires all the data to be available before it can be transformed.
            </summary>
            <param name="fclDefinition">The definition to look for or null if the definition should not be checked</param>
            <returns>The matching parent data contents, or null if one could not be found</returns>
        </member>
        <member name="M:MS.Swi.Data.IConstToken.CalculateSignature">
            <summary>
            Calculate a hashed signature for this token
            </summary>
            <returns>The token signature</returns>
        </member>
        <member name="M:MS.Swi.Data.IConstToken.TrimSplitPoints(System.Collections.IEnumerable)">
            <summary>
            Trim out zero length split points from the specified set (including split points at the ends)
            </summary>
            <param name="splitPoints">The split points to analyzer</param>
            <returns>The new set of split points</returns>
        </member>
        <member name="P:MS.Swi.Data.IConstToken.Contents">
            <summary>
            The contents object of the token. Note that for reference types, this will invoke
            a Clone() operation.
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstToken.ContentsNativeType">
            <summary>
            The native type of the token object
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstToken.IsStatic">
            <summary>
            Whether or not this is a static token (i.e. not dependent on other tokens)
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstToken.IsDerived">
            <summary>
            Whether or not this is a derived token (i.e. dependent on one or more other tokens)
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstToken.Definition">
            <summary>
            The definition of the token type
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstToken.Identifier">
            <summary>
            The identifier associated with the token
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstToken.Position">
            <summary>
            The position of the token
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstToken.References">
            <summary>
            The token references associated with the token
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstToken.IsImmutable">
            <summary>
            Whether or not the contents of this token have been defined as being IsImmutable
            </summary>
        </member>
        <member name="T:MS.Swi.Data.Token">
            <summary>
            The representation of data in the DataMap
            </summary>
        </member>
        <member name="M:MS.Swi.Data.Token.#ctor(MS.Swi.Data.ElementDefinition,System.String,MS.Swi.Data.TokenPosition,MS.Swi.Data.DataContents,MS.Swi.Data.TokenRestrictions,System.Collections.Generic.Dictionary{System.String,MS.Swi.Data.TokenReference},MS.Swi.Data.Token.CalculateContentsDelegate)">
            <summary>
            Construct a token based on a definition, position, and contents. 
            </summary>
            <param name="definition">The type of the token</param>
            <param name="identifier">The identifier for the token (null will be silently changed to an empty string)</param>
            <param name="position">The position of the token in the DataMap</param>
            <param name="contents">The contents of the token</param>
            <param name="restrictions">The restrictions that apply to the token (or null).</param>
            <param name="references">The reference table for the token (or null). If there are references, there must be a delegate, and visa versa</param>
            <param name="calculationDelegate">The calculation delegate for the token (or null). If there are references, there must be a delegate, and visa versa</param>
        </member>
        <member name="M:MS.Swi.Data.Token.#ctor(MS.Swi.Data.TokenPosition,MS.Swi.Data.Token)">
            <summary>
            Copy constructor for the Token class, to create a duplicate token with the specified position
            </summary>
            <param name="position">The position of the new token</param>
            <param name="sourceToken">The source token</param>
        </member>
        <member name="M:MS.Swi.Data.Token.GetValidDefinitions">
            <summary>
            Get the complete set of valid definitions we could apply
            </summary>
            <returns>The set</returns>
        </member>
        <member name="M:MS.Swi.Data.Token.MS#Swi#Data#IConstToken#GetContents(System.String)">
            <summary>
            Get the associated contents object given an FCL definition name and a 
            native representation. Note that this will NOT go past a split contents if the
            transformation requires all the data to be available before it can be transformed.
            </summary>
            <param name="fclDefinition">The definition to look for or null if the definition should not be checked</param>
            <returns>The matching parent data contents, or null if one could not be found</returns>
        </member>
        <member name="M:MS.Swi.Data.Token.GetContents(System.String)">
            <summary>
            Get the associated contents object given an FCL definition name and a 
            native representation. Note that this will NOT go past a split contents if the
            transformation requires all the data to be available before it can be transformed.
            </summary>
            <param name="fclDefinition">The definition to look for or null if the definition should not be checked</param>
            <returns>The matching parent data contents, or null if one could not be found</returns>
        </member>
        <member name="M:MS.Swi.Data.Token.CalculateSignature">
            <summary>
            Calculate a hashed signature for this token
            </summary>
            <returns>The token signature</returns>
        </member>
        <member name="M:MS.Swi.Data.Token.TrimSplitPoints(System.Collections.IEnumerable)">
            <summary>
            Trim out zero length split points from the specified set (including split points at the ends)
            </summary>
            <param name="splitPoints">The split points to analyzer</param>
            <returns>The new set of split points</returns>
        </member>
        <member name="M:MS.Swi.Data.Token.AddRestrictions(MS.Swi.Data.IConstTokenRestrictions)">
            <summary>
            Add the new restrictions to the existing restrictions. 
            </summary>
            <param name="newRestrictions">The new restrictions</param>
        </member>
        <member name="M:MS.Swi.Data.Token.AddReferences(System.Collections.Generic.Dictionary{System.String,MS.Swi.Data.TokenReference})">
            <summary>
            Add the new references to the existing reference set. Note that the new references
            must not contradict an existing reference in the existing table
            </summary>
            <param name="newReferences">The new references</param>
        </member>
        <member name="P:MS.Swi.Data.Token.Position">
            <summary>
            The position of the token
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Token.Definition">
            <summary>
            The definition of the token
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Token.Identifier">
            <summary>
            The value associated with the token
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Token.Contents">
            <summary>
            Provide a copy of the contents of the token. Note that for reference types, this will
            invoke a Clone() operation.
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Token.ContentsNativeType">
            <summary>
            The native type of the contents object
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Token.IsStatic">
            <summary>
            Whether or not this is a static token (i.e. not dependent on other tokens)
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Token.IsDerived">
            <summary>
            Whether or not this is a derived token (i.e. dependent on one or more other tokens)
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Token.IsImmutable">
            <summary>
            Whether or not the contents of this token have been defined as being IsImmutable
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Token.IsValid">
            <summary>
            Whether or not this token has valid contents
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Token.AssociatedContents">
            <summary>
            The associated contents object. This is tightly coupled to the 
            contents object (which has a paired associated token)
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Token.MS#Swi#Data#IConstToken#References">
            <summary>
            The read-only view of the const form of the references
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Token.References">
            <summary>
            The read-only view of the references
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Token.CalculationDelegate">
            <summary>
            The calculation delegate
            </summary>
        </member>
        <member name="T:MS.Swi.Data.Token.CalculateContentsDelegate">
            <summary>
            Calculate the contents of an element given the references that the contents are based on
            </summary>
            <param name="informationSource">The contents information source</param>
            <param name="targetContents">The contents object that is being calculated</param>
            <param name="references">The references</param>
            <returns>The new contents</returns>
        </member>
        <member name="T:MS.Swi.Data.IConstDataMap">
            <summary>
            A const (i.e. true Read Only) access interface to a DataMap
            </summary>
        </member>
        <member name="M:MS.Swi.Data.IConstDataMap.TokenIsInMap(MS.Swi.Data.IConstToken)">
            <summary>
            Whether or not the specified token is in the map at its alledged location
            </summary>
            <param name="token">The token</param>
            <returns>True if it is in the map, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.IConstDataMap.FirstToken">
            <summary>
            The first token in the DataMap
            </summary>
            <returns>The first token in the DataMap, or null if the DataMap has no tokens</returns>
        </member>
        <member name="M:MS.Swi.Data.IConstDataMap.NextToken(MS.Swi.Data.IConstToken,System.Boolean)">
            <summary>
            The next token in the DataMap
            </summary>
            <param name="referenceToken">The token this is in reference to</param>
            <param name="spanRootElements">Whether or not to cross root elements</param>
            <returns>The next token, or null if there is no matching next token</returns>
        </member>
        <member name="M:MS.Swi.Data.IConstDataMap.PreviousToken(MS.Swi.Data.IConstToken,System.Boolean)">
            <summary>
            The previous token in the DataMap
            </summary>
            <param name="referenceToken">The token this is in reference to</param>
            <param name="spanRootElements">Whether or not to cross root elements</param>
            <returns>The previous token, or null if there is no matching previous token</returns>
        </member>
        <member name="M:MS.Swi.Data.IConstDataMap.NextToken(MS.Swi.Data.TokenPosition,System.Boolean)">
            <summary>
            The next token in the DataMap. If there is no token at the reference position, the 
            spanRootElements argument will be ignored, and the next token will be returned.
            </summary>
            <param name="referencePosition">The reference position</param>
            <param name="spanRootElements">Whether or not to cross root elements</param>
            <returns>The next token, or null if there is no matching next token</returns>
        </member>
        <member name="M:MS.Swi.Data.IConstDataMap.PreviousToken(MS.Swi.Data.TokenPosition,System.Boolean)">
            <summary>
            The previous token in the DataMap. If there is no token at the reference position, the 
            spanRootElements argument will be ignored, and the previous token will be returned.
            </summary>
            <param name="referencePosition">The reference position</param>
            <param name="spanRootElements">Whether or not to cross root elements</param>
            <returns>The previous token, or null if there is no matching previous token</returns>
        </member>
        <member name="P:MS.Swi.Data.IConstDataMap.Definitions">
            <summary>
            Access to the definitions used by the DataMap
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataMap.Transformations">
            <summary>
            Access to the transformations used by the DataMap
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataMap.Tokens">
            <summary>
            Access to the data tokens found
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataMap.Encapsulations">
            <summary>
            Access to the encapsulations found
            </summary>
        </member>
        <member name="T:MS.Swi.Data.DataMap">
            <summary>
            A DataMap is a mapping of data both according to type, and based on the original DataBuffers
            that it was derived from. The DataMap contains the type definitions, as well as the complete data
            set stored in ordinal order, along with the information as far as the amount of data remaining indexed
            by the original buffer count. 
            </summary>
        </member>
        <member name="M:MS.Swi.Data.DataMap.#ctor(MS.Swi.Data.IConstDataTransformations,MS.Swi.Data.IConstElementDefinitions)">
            <summary>
            Create an empty data map
            </summary>
            <param name="transformations">The valid transformations</param>
            <param name="definitions">The valid definitions</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.#ctor(MS.Swi.Data.IConstDataTransformations,MS.Swi.Data.IConstElementDefinitions,MS.Swi.Data.Generic.ConstList{MS.Swi.Data.IConstDataBuffer,MS.Swi.Data.DataBuffer})">
            <summary>
            Create a data map with simple byte array buffers. Note that this automatically applies 
            size restrictions to the buffers limiting them to the maximum size of the source DataBuffer
            (for all manipulations that conform to size restrictions)
            </summary>
            <param name="transformations">The valid transformations</param>
            <param name="definitions">The valid definitions</param>
            <param name="buffers">The raw data buffers to use</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.#ctor(System.String,System.String)">
            <summary>
            Create an empty data map
            </summary>
            <param name="transformationFileName">The file name for the valid transformation table</param>
            <param name="definitionFileName">The file name for the valid definitions</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.FindTransformations(System.String[])">
            <summary>
            Find the set of transformations defined by name. If a transformation
            cannot be found, this will throw an exception. If the array of names is empty or null,
            it will return a null array.
            </summary>
            <param name="transformationNames">The transformation names</param>
            <returns>The transformation names</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.CreateReferences(System.Object[])">
            <summary>
            Create references, based on a variable string of arguments.
            
            The argument sequence is:
            
            	String: A reference name - Note that this MUST end in a ':'
            	TokenReference.TokenReferenceType: A reference type
            
            	Followed by one or more of any of the following (note that the order IS important):
            	TokenPosition or IConstToken: A reference to the contents of the specified token
            	String (ElementDefinition name),TokenPosition: A reference to the first contents of the specified token of the given type
            
            	OR
            
            	String: A reference name - Note that this MUST end in a ':'
            	Followed by one or more TokenReference objects
            
            Note that MULTIPLE labels can be defined (i.e. the entire sequence can repeat)
            </summary>
            <param name="arguments">The list of arguments for the reference creation</param>
            <returns>The reference table</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.CreateAnonymousReference(MS.Swi.Data.TokenReference.TokenReferenceType,System.Object[])">
            <summary>
            Create references, based on a variable string of arguments.
            
            The argument sequence is:
            
            	One or more of any of the following (note that the order IS important):
            	TokenPosition or IConstToken: A reference to the contents of the specified token
            	String (ElementDefinition name),TokenPosition or IConstToken: A reference to the first contents of the specified token of the given type
            
            An ArgumentException will be thrown if there are no references specified
            </summary>
            <param name="referenceType">The type of reference</param>
            <param name="arguments">The list of arguments for the reference creation</param>
            <returns>The unnamed reference</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.CreateToken(MS.Swi.Data.TokenPosition,MS.Swi.Data.ElementDefinition,System.String,MS.Swi.Data.DataContents,MS.Swi.Data.TokenRestrictions,System.Collections.Generic.Dictionary{System.String,MS.Swi.Data.TokenReference},MS.Swi.Data.Token.CalculateContentsDelegate)">
            <summary>
            Create a token that is not attached to any existing root token in the DataMap
            </summary>
            <param name="position">The token position</param>
            <param name="definition">The token definition</param>
            <param name="identifier">The identifier for the token (null will be silently turned into an empty string)</param>
            <param name="contents">The contents</param>
            <param name="restrictions">The restrictions which apply to the token</param>
            <param name="references">The references which apply to the token</param>
            <param name="calculationDelegate">The calculation delegate to use with the token</param>
            <returns>The constructed token</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.CreateToken(MS.Swi.Data.TokenPosition,System.Object,System.String,System.String,System.String[],MS.Swi.Data.TokenRestrictions,System.Collections.Generic.Dictionary{System.String,MS.Swi.Data.TokenReference},MS.Swi.Data.Token.CalculateContentsDelegate)">
            <summary>
            Create a token that is not attached to any existing root token in the DataMap
            </summary>
            <param name="position">The token position</param>
            <param name="contents">The contents</param>
            <param name="tokenDefinition">The definition to apply</param>
            <param name="identifier">The identifier for the token (null will be silently turned into an empty string)</param>
            <param name="transformationNames">The transformations to apply</param>
            <param name="restrictions">The restrictions which apply to the token</param>
            <param name="references">The references which apply to the token</param>
            <param name="calculationDelegate">The calculation delegate to use with the token</param>
            <returns>The constructed token</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Insert(MS.Swi.Data.TokenPosition,MS.Swi.Data.Token)">
            <summary>
            Use the AttemptToAdd method to try to add a token to the DataMap, throwing an invalid operation
            exception if the token could not be added
            </summary>
            <param name="position">The position</param>
            <param name="token">The token</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.CanInsertToken(MS.Swi.Data.TokenPosition,MS.Swi.Data.Token,MS.Swi.Data.DataContents@,MS.Swi.Data.DataContents@)">
            <summary>
            Determine if we can insert a token at the given position, and if we can, whether or not we will need
            to change the ancestry of the token to make it work
            </summary>
            <param name="position">The selected position</param>
            <param name="token">The token to be inserted</param>
            <param name="selectedChild">The child contents that should be modified for the insertion, or null if no change is needed</param>
            <param name="selectedParent">The parent that should be modified for the insertion, or null if no change is needed</param>
            <returns>True if the token can be inserted in that position, False if not</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.AttemptToInsert(MS.Swi.Data.TokenPosition,MS.Swi.Data.Token)">
            <summary>
            Given a token, insert it into the TokenList.
            </summary>
            <param name="position">The position</param>
            <param name="token">The token</param>
            <returns>True if it could be integrated in, false if there is a conflict</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.AttemptToAdoptSiblingTokenContents(MS.Swi.Data.Token,MS.Swi.Data.Token)">
            <summary>
            Attempt to adopt the token into a common ancestor with its prospective sibling
            </summary>
            <param name="prospectiveSibling">The prospective sibling token</param>
            <param name="token">The token being adopted</param>
            <returns>True if it was adopted, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.CanAdoptSiblingTokenContents(MS.Swi.Data.Token,MS.Swi.Data.Token,MS.Swi.Data.DataContents@,MS.Swi.Data.DataContents@)">
            <summary>
            Determine if a token can descend from an ancestor of its prospective sibling, and if so, where it 
            should descend from
            </summary>
            <param name="prospectiveSibling">The prospective sibling token</param>
            <param name="token">The token being adopted</param>
            <param name="selectedChild">The child that can be adopted, or null if there is no need for adoption. Note that it is possible for null to be returned when we return true.</param>
            <param name="selectedParent">The parent adoption point, or null if there is no need for adoption. Note that it is possible for null to be returned when we return true</param>
            <returns>True if it can be adopted, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.CanAdoptTokenContents(MS.Swi.Data.DataContents,MS.Swi.Data.Token,MS.Swi.Data.DataContents@)">
            <summary>
            Determine if it is possible to adopt the Token to the prospective parent, and if it is possible,
            return the DataContents that should be adopted in to the prospective parent
            </summary>
            <param name="prospectiveParent">The prospective parent</param>
            <param name="token">The token</param>
            <param name="selectedChild">The child that can be adopted, or null if there is no need for adoption. Note that it is possible for null to be returned when we return true.</param>
            <returns>True if the Token can be adopted, False if not</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.AttemptToAdoptTokenContents(MS.Swi.Data.DataContents,MS.Swi.Data.Token)">
            <summary>
            Add the contents of a specific token into a prospective parent token, if we can. We attempt to move
            as much of the parent tree of this token as we can
            </summary>
            <param name="prospectiveParent">The prospective parent</param>
            <param name="token">The token</param>
            <returns>True if the inheritance chain of the token now goes through the prospective parent, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Append(System.Object,System.String,System.String[])">
            <summary>
            Append a token to the end of the DataMap. This is used only in the simple case where we are
            creating a DataMap with a single root node, and are appending onto it.
            </summary>
            <param name="contents">The contents object</param>
            <param name="tokenDefinition">The token definition</param>
            <param name="transformations">The transformations to apply</param>
            <returns>The appended token</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Append(System.Object,System.String,System.String[],MS.Swi.Data.TokenRestrictions)">
            <summary>
            Append a token to the end of the DataMap. This is used only in the simple case where we are
            creating a DataMap with a single root node, and are appending onto it.
            </summary>
            <param name="contents">The contents object</param>
            <param name="tokenDefinition">The token definition</param>
            <param name="transformations">The transformations to apply</param>
            <param name="restrictions">The restrictions to apply</param>
            <returns>The appended token</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.AppendRootToken(System.Object,System.String,System.String[])">
            <summary>
            Append a new root token (i.e. a new root element) to the end of the DataMap
            </summary>
            <param name="contents">The contents</param>
            <param name="tokenDefinition">The token definition to use</param>
            <param name="transformations">The transformations to use</param>
            <returns>The appended token</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.AppendRootToken(System.Object,System.String,System.String[],MS.Swi.Data.TokenRestrictions)">
            <summary>
            Append a new root token (i.e. a new root element) to the end of the DataMap
            </summary>
            <param name="contents">The contents</param>
            <param name="tokenDefinition">The token definition to use</param>
            <param name="transformations">The transformations to use (or null)</param>
            <param name="restrictions">The restrictions to apply to the new token (or null)</param>
            <returns>The appended token</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Append(MS.Swi.Data.TokenPosition,System.Object,System.String,System.String[])">
            <summary>
            Append a token after the token at the position given. Note that this may result
            in the renumber of tokens (for example, if we want to append after 0.1.1 and there is 
            already a 0.1.2, we would end up with 0.1.1.0, and 0.1.1.1 for our two tokens).
            
            If the position does not have a corresponding token, we will throw an exception
            </summary>
            <param name="position">The position</param>
            <param name="contents">The contents</param>
            <param name="tokenDefinition">The token definition to use</param>
            <param name="transformations">The transformations to use</param>
            <returns>The appended token</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Append(MS.Swi.Data.TokenPosition,System.Object,System.String,System.String[],MS.Swi.Data.TokenRestrictions)">
            <summary>
            Append a token after the token at the position given. Note that this may result
            in the renumber of tokens (for example, if we want to append after 0.1.1 and there is 
            already a 0.1.2, we would end up with 0.1.1.0, and 0.1.1.1 for our two tokens).
            
            If the position does not have a corresponding token, we will throw an exception
            </summary>
            <param name="position">The position</param>
            <param name="contents">The contents</param>
            <param name="tokenDefinition">The token definition to use</param>
            <param name="transformations">The transformations to use</param>
            <param name="restrictions">The restrictions to apply</param>
            <returns>The appended token</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Append(MS.Swi.Data.IConstToken,System.Object,System.String,System.String[])">
            <summary>
            Append a token after the token given. Note that this may result
            in the renumber of tokens (for example, if we want to append after 0.1.1 and there is 
            already a 0.1.2, we would end up with 0.1.1.0, and 0.1.1.1 for our two tokens).
            
            If the current token is not part of the DataMap, we will throw an exception
            </summary>
            <param name="currentToken">The corresponding token</param>
            <param name="contents">The contents</param>
            <param name="tokenDefinition">The token definition to use</param>
            <param name="transformations">The transformations to use</param>
            <returns>The appended token</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Append(MS.Swi.Data.IConstToken,System.Object,System.String,System.String[],MS.Swi.Data.TokenRestrictions)">
            <summary>
            Append a token after the token given. Note that this may result
            in the renumber of tokens (for example, if we want to append after 0.1.1 and there is 
            already a 0.1.2, we would end up with 0.1.1.0, and 0.1.1.1 for our two tokens).
            
            If the current token is not part of the DataMap, we will throw an exception
            </summary>
            <param name="currentToken">The corresponding token</param>
            <param name="contents">The contents</param>
            <param name="tokenDefinition">The token definition to use</param>
            <param name="transformations">The transformations to use</param>
            <param name="restrictions">The restrictions to apply</param>
            <returns>The appended token</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Insert(MS.Swi.Data.TokenPosition,System.Object,System.String,System.String[])">
            <summary>
            Insert a token before the specified position. Note that this may result
            in the renumber of tokens (for example, if we want to insert before 0.1.1 and there is 
            already a 0.1.0, we would end up with 0.1.1.0, and 0.1.1.1 for our two tokens).
            
            If the position does not have a corresponding token, we will throw an exception
            </summary>
            <param name="position">The position</param>
            <param name="contents">The contents</param>
            <param name="tokenDefinition">The token definition to use</param>
            <param name="transformations">The transformations to use</param>
            <returns>The inserted token</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Insert(MS.Swi.Data.TokenPosition,System.Object,System.String,System.String[],MS.Swi.Data.TokenRestrictions)">
            <summary>
            Insert a token before the specified position. Note that this may result
            in the renumber of tokens (for example, if we want to insert before 0.1.1 and there is 
            already a 0.1.0, we would end up with 0.1.1.0, and 0.1.1.1 for our two tokens).
            
            If the position does not have a corresponding token, we will throw an exception
            </summary>
            <param name="position">The position</param>
            <param name="contents">The contents</param>
            <param name="tokenDefinition">The token definition to use</param>
            <param name="transformations">The transformations to use</param>
            <param name="restrictions">The restrictions to apply</param>
            <returns>The inserted token</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Insert(MS.Swi.Data.IConstToken,System.Object,System.String,System.String[])">
            <summary>
            Insert a token before the token given. Note that this may result
            in the renumber of tokens (for example, if we want to append after 0.1.1 and there is 
            already a 0.1.2, we would end up with 0.1.1.0, and 0.1.1.1 for our two tokens).
            
            If the current token is not part of the DataMap, we will throw an exception
            </summary>
            <param name="currentToken">The corresponding token</param>
            <param name="contents">The contents</param>
            <param name="tokenDefinition">The token definition to use</param>
            <param name="transformations">The transformations to use</param>
            <returns>The appended token</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Insert(MS.Swi.Data.IConstToken,System.Object,System.String,System.String[],MS.Swi.Data.TokenRestrictions)">
            <summary>
            Insert a token before the token given. Note that this may result
            in the renumber of tokens (for example, if we want to append after 0.1.1 and there is 
            already a 0.1.2, we would end up with 0.1.1.0, and 0.1.1.1 for our two tokens).
            
            If the current token is not part of the DataMap, we will throw an exception
            </summary>
            <param name="currentToken">The corresponding token</param>
            <param name="contents">The contents</param>
            <param name="tokenDefinition">The token definition to use</param>
            <param name="transformations">The transformations to use</param>
            <param name="restrictions">The restrictions to apply</param>
            <returns>The appended token</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Protect(MS.Swi.Data.IConstToken)">
            <summary>
            Mark the specified token contents as immutable, protecting them from any change
            </summary>
            <param name="token">The token being marked immutable</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Protect(MS.Swi.Data.TokenPosition)">
            <summary>
            Mark the specified token contents as immutable, protecting them from any change
            </summary>
            <param name="tokenPosition">The the position of the token being marked immutable</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.ProtectRoot(MS.Swi.Data.IConstToken)">
            <summary>
            Mark the entire root element that the specified token belongs to as immutable
            protecting all tokens with the same RootPosition from modification
            </summary>
            <param name="token">The token whose root element is to be marked as immutable</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.ProtectRoot(MS.Swi.Data.TokenPosition)">
            <summary>
            Mark the entire root element that the specified token position belongs to as immutable
            protecting all tokens with the same RootPosition from modification
            </summary>
            <param name="tokenPosition">The position of the token whose root element is to be marked as immutable</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.ProtectRoot(System.UInt32)">
            <summary>
            Mark the entire root element as immutable protecting all tokens with the same RootPosition
            from modification.
            </summary>
            <param name="rootPosition">The root position</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Duplicate(MS.Swi.Data.IConstToken)">
            <summary>
            Duplicate the specified token, placing the duplicate token after the existing token
            </summary>
            <param name="currentToken">The token to duplicate</param>
            <returns>The constructed token or null if it could not be duplicated</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Duplicate(MS.Swi.Data.TokenPosition)">
            <summary>
            Duplicate the specified token, placing the duplicate token after the existing token
            </summary>
            <param name="position">The position of the token to duplicate</param>
            <returns>The constructed token or null if it could not be duplicated</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Encapsulate(System.String,System.String,System.Object[])">
            <summary>
            Construct an encapsulation given a set of references
            
            The format of the arguments is:
            	Label (String) - Note that this MUST end in a ':'
            	[Optional] Element name for the first contents of the reference that is of the specified definition (String)
            	TokenPosition of the reference (TokenPosition)
                [Repeat as desired]
            </summary>
            <param name="definitionName">The encapsulation definition to use</param>
            <param name="identifier">The identifier for the encapsulation, or null if there is no identifier</param>
            <param name="references">The reference definition as described above</param>
            <returns>The constructed encapsulation, or null if an equivalent encapsulation already existed</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.AddEncapsulationReference(System.Collections.Generic.List{MS.Swi.Data.DataContents},MS.Swi.Data.TokenPosition@,System.String@)">
            <summary>
            Add an encapsulation reference to the list
            </summary>
            <param name="referenceList">The reference list</param>
            <param name="position">The position of the reference</param>
            <param name="definitionName">The target definition, or null if the default should be used</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Split(MS.Swi.Data.TokenPosition,System.UInt32[])">
            <summary>
            Split the existing token up according to the split points, and create the new tokens.
            
            Notes:
            If the token cannot be found at the position given, we will throw an exception.
            This does NOT enforce the Severable attribute of tokens, because the split often occurs before refinements
            Type is preserved to the child tokens
            Restrictions are preserved to the child tokens
            If there is a split point provided which is also the length of the parent contents, it will not
            create a token
            </summary>
            <param name="position">The position of the token to split</param>
            <param name="splitPoints">The split points</param>
            <returns>The list of child tokens in order by split points</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Split(MS.Swi.Data.TokenPosition,System.Collections.IEnumerable)">
            <summary>
            Split the existing token up according to the split points, and create the new tokens.
            
            Notes:
            If the token cannot be found at the position given, we will throw an exception.
            This does NOT enforce the Severable attribute of tokens, because the split often occurs before refinements
            However, it DOES enforce the Singleton attribute
            Type is preserved to the child tokens
            Restrictions are preserved to the child tokens
            </summary>
            <param name="position">The position of the token to split</param>
            <param name="splitPoints">The split points</param>
            <returns>The list of child tokens in order by split points</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Split(MS.Swi.Data.IConstToken,System.UInt32[])">
            <summary>
            Split the existing token up according to the split points, and create the new tokens.
            
            Notes:
            If the token cannot be found at the position given, we will throw an exception.
            This does NOT enforce the Severable attribute of tokens, because the split often occurs before refinements
            However, it DOES enforce the Singleton attribute
            Type is preserved to the child tokens
            Restrictions are preserved to the child tokens
            If there is a split point provided which is also the length of the parent contents, it will not
            create a token
            </summary>
            <param name="token">The token to split</param>
            <param name="splitPoints">The split points</param>
            <returns>The list of child tokens in order by split points</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Split(MS.Swi.Data.IConstToken,System.Collections.IEnumerable)">
            <summary>
            Split the existing token up according to the split points, and create the new tokens.
            
            Notes:
            If the token cannot be found at the position given, we will throw an exception.
            This does NOT enforce the Severable attribute of tokens, because the split often occurs before refinements
            However, it DOES enforce the Singleton attribute
            Type is preserved to the child tokens
            Restrictions are preserved to the child tokens
            </summary>
            <param name="token">The token to split</param>
            <param name="splitPoints">The split points</param>
            <returns>The list of child tokens in order by split points</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Split(MS.Swi.Data.IConstToken)">
            <summary>
            Split the existing token into equally (and minimally) sized sub-tokens.
            
            Notes:
            If the token cannot be found at the position given, we will throw an exception.
            This does NOT enforce the Severable attribute of tokens, because the split often occurs before refinements
            However, it DOES enforce the Singleton attribute
            Type is preserved to the child tokens
            </summary>
            <param name="token">The token to split</param>
            <returns>The list of child tokens in order by split points</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Split(MS.Swi.Data.TokenPosition)">
            <summary>
            Split the existing token into equally (and minimally) sized sub-tokens.
            
            Notes:
            If the token cannot be found at the position given, we will throw an exception.
            This does NOT enforce the Severable attribute of tokens, because the split often occurs before refinements
            However, it DOES enforce the Singleton attribute
            Type is preserved to the child tokens.  
            </summary>
            <param name="position">The position of the token to split</param>
            <returns>The list of child tokens in order by split points</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Refine(MS.Swi.Data.TokenPosition,System.String,System.String[])">
            <summary>
            Change the definition and encoding of the token at the given position
            </summary>
            <param name="position">The position of the token</param>
            <param name="definitionName">The name of the new definition</param>
            <param name="transformationNames">The transformation names to apply</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Refine(MS.Swi.Data.TokenPosition,MS.Swi.Data.TokenRestrictions)">
            <summary>
            Apply additional restrictions to an existing token
            </summary>
            <param name="position">The position of the token</param>
            <param name="restrictions">The new restrictions</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Refine(MS.Swi.Data.TokenPosition,System.String,System.Collections.Generic.Dictionary{System.String,MS.Swi.Data.TokenReference},MS.Swi.Data.Token.CalculateContentsDelegate)">
            <summary>
            Apply a new type and derivation rules to an existing token
            </summary>
            <param name="position">The position of the token</param>
            <param name="definitionName">The name of the new definition</param>
            <param name="references">The references to use</param>
            <param name="calculationDelegate">The calculation delegate to use</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Refine(MS.Swi.Data.TokenPosition,System.String,System.Collections.Generic.Dictionary{System.String,MS.Swi.Data.TokenReference},System.String)">
            <summary>
            Apply a new type and derivation rules to an existing token
            </summary>
            <param name="position">The position of the token</param>
            <param name="definitionName">The name of the new definition</param>
            <param name="references">The references to use</param>
            <param name="calculationDelegateName">The calculation delegate to use</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Refine(MS.Swi.Data.TokenPosition,System.String,System.String[],MS.Swi.Data.TokenRestrictions,System.Collections.Generic.Dictionary{System.String,MS.Swi.Data.TokenReference},System.String)">
            <summary>
            Change the definition of a token at a given position. 
            </summary>
            <param name="position">The position of the token</param>
            <param name="definitionName">The name of the new definition (or null if it is unchanged)</param>
            <param name="transformationNames">The transformation name to apply (or null if it is unchanged) </param>
            <param name="restrictions">Additional restrictions to apply to the token (or null if it is unchanged)</param>
            <param name="references">References to apply to the token (or null if it is unchanged)</param>
            <param name="calculationDelegateName">Calculation delegate to apply to the token (or null if it is unchanged)</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Refine(MS.Swi.Data.TokenPosition,System.String,System.String[],MS.Swi.Data.TokenRestrictions,System.Collections.Generic.Dictionary{System.String,MS.Swi.Data.TokenReference},MS.Swi.Data.Token.CalculateContentsDelegate)">
            <summary>
            Change the definition of a token at a given position. 
            </summary>
            <param name="position">The position of the token</param>
            <param name="definitionName">The name of the new definition (or null if it is unchanged)</param>
            <param name="transformationNames">The transformation name to apply (or null if it is unchanged) </param>
            <param name="restrictions">Additional restrictions to apply to the token (or null if it is unchanged)</param>
            <param name="references">References to apply to the token (or null if it is unchanged)</param>
            <param name="calculationDelegate">Calculation delegate to apply to the token (or null if it is unchanged)</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Refine(MS.Swi.Data.IConstEncapsulation,System.String,System.String)">
            <summary>
            Refine the definition of an existing encapsulation OR its equivalent. Note that the refinement
            will only be applied if the identifier is a refinement of the existing encapsulation. If the 
            encapsulation has already been refined past that point, this will be ignored.
            </summary>
            <param name="encapsulation">The encapsulation to refine</param>
            <param name="identifier">The new identifier for the encapsulation, or null if the previous identifier should be preserved</param>
            <param name="definitionName">The updated definition</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Refine(MS.Swi.Data.IConstToken,System.String,System.String[])">
            <summary>
            Change the definition and encoding of the token
            </summary>
            <param name="token">The token to refine</param>
            <param name="definitionName">The name of the new definition</param>
            <param name="transformationNames">The transformation names to apply</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Refine(MS.Swi.Data.IConstToken,MS.Swi.Data.TokenRestrictions)">
            <summary>
            Apply additional restrictions to an existing token
            </summary>
            <param name="token">The token to refine</param>
            <param name="restrictions">The new restrictions</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Refine(MS.Swi.Data.IConstToken,System.String,System.Collections.Generic.Dictionary{System.String,MS.Swi.Data.TokenReference},MS.Swi.Data.Token.CalculateContentsDelegate)">
            <summary>
            Apply a new type and derivation rules to an existing token
            </summary>
            <param name="token">The token to refine</param>
            <param name="definitionName">The name of the new definition</param>
            <param name="references">The references to use</param>
            <param name="calculationDelegate">The calculation delegate to use</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Refine(MS.Swi.Data.IConstToken,System.String,System.Collections.Generic.Dictionary{System.String,MS.Swi.Data.TokenReference},System.String)">
            <summary>
            Apply a new type and derivation rules to an existing token
            </summary>
            <param name="token">The token to refine</param>
            <param name="definitionName">The name of the new definition</param>
            <param name="references">The references to use</param>
            <param name="calculationDelegateName">The calculation delegate to use</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Refine(MS.Swi.Data.IConstToken,System.String,System.String[],MS.Swi.Data.TokenRestrictions,System.Collections.Generic.Dictionary{System.String,MS.Swi.Data.TokenReference},System.String)">
            <summary>
            Change the definition of a token at a given position. 
            </summary>
            <param name="token">The token to refine</param>
            <param name="definitionName">The name of the new definition (or null if it is unchanged)</param>
            <param name="transformationNames">The transformation name to apply (or null if it is unchanged) </param>
            <param name="restrictions">Additional restrictions to apply to the token (or null if it is unchanged)</param>
            <param name="references">References to apply to the token (or null if it is unchanged)</param>
            <param name="calculationDelegateName">Calculation delegate to apply to the token (or null if it is unchanged)</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Refine(MS.Swi.Data.IConstToken,System.String,System.String[],MS.Swi.Data.TokenRestrictions,System.Collections.Generic.Dictionary{System.String,MS.Swi.Data.TokenReference},MS.Swi.Data.Token.CalculateContentsDelegate)">
            <summary>
            Change the definition of a token. 
            </summary>
            <param name="token">The token to refine</param>
            <param name="definitionName">The name of the new definition (or null if it is unchanged)</param>
            <param name="transformationNames">The transformation name to apply (or null if it is unchanged) </param>
            <param name="restrictions">Additional restrictions to apply to the token (or null if it is unchanged)</param>
            <param name="references">References to apply to the token (or null if it is unchanged)</param>
            <param name="calculationDelegate">Calculation delegate to apply to the token (or null if it is unchanged)</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Extract(MS.Swi.Data.IConstToken,System.String)">
            <summary>
            Transform data into an FCL Container and then extract the results
            </summary>
            <param name="token">The source for the container token</param>
            <param name="transformationName">The transformation to apply</param>
            <returns>The list of extracted tokens</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Extract(MS.Swi.Data.IConstToken)">
            <summary>
            Extract the contents of the FCL Container from the container itself
            </summary>
            <param name="token">The container token</param>
            <returns>The list of extracted tokens</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Extract(MS.Swi.Data.TokenPosition,System.String)">
            <summary>
            Transform data into an FCL Container and then extract the results
            </summary>
            <param name="position">The position of the source for the container token</param>
            <param name="transformationName">The transformation to apply</param>
            <returns>The list of extracted tokens</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Extract(MS.Swi.Data.TokenPosition)">
            <summary>
            Extract the contents of the FCL Container from the container itself
            </summary>
            <param name="position">The position of the container token</param>
            <returns>The list of extracted tokens</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.ApplyIdentifier(MS.Swi.Data.IConstToken,System.String)">
            <summary>
            Set the identifier for the specified token
            </summary>
            <param name="token">The token</param>
            <param name="identifier">The identifier string (null values will be silently changed to empty strings)</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.ApplyIdentifier(MS.Swi.Data.TokenPosition,System.String)">
            <summary>
            Set the identifier for the token at the specified position
            </summary>
            <param name="tokenPosition">The token position</param>
            <param name="identifier">The identifier string (null values will be silently changed to empty strings)</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.SwapTokens(MS.Swi.Data.TokenPosition,MS.Swi.Data.TokenPosition)">
            <summary>
            Swap two tokens
            </summary>
            <param name="firstTokenPosition">The position of the first token</param>
            <param name="secondTokenPosition">The position of the second token</param>
            <returns>True if they could be swapped, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.SwapTokens(MS.Swi.Data.IConstToken,MS.Swi.Data.IConstToken)">
            <summary>
            Swap two tokens
            </summary>
            <param name="firstToken">The first token</param>
            <param name="secondToken">The second token</param>
            <returns>True if they could be swapped, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.MoveToken(MS.Swi.Data.TokenPosition,MS.Swi.Data.TokenPosition)">
            <summary>
            Attempt to move a token from one position to another. If the token cannot be found at the
            specified position, then we will throw an exception
            </summary>
            <param name="oldPosition">The old position</param>
            <param name="newPosition">The new position</param>
            <returns>True if it worked, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.MoveToken(MS.Swi.Data.IConstToken,MS.Swi.Data.TokenPosition)">
            <summary>
            Attempt to move a token from one position to another
            </summary>
            <param name="token">The token to move</param>
            <param name="newPosition">The new position</param>
            <returns>True if it worked, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.AddDefinition(MS.Swi.Data.ElementDefinition)">
            <summary>
            Add a definition to the DataMap
            </summary>
            <param name="definition">The definition to be included</param>
            <returns>True if it was added or already exists, False if a conflicting definition of the same name already exists</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.AddTransformation(MS.Swi.Data.DataTransformation)">
            <summary>
            Add a definition to the DataMap
            </summary>
            <param name="transformation"></param>
            <returns></returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.RemoveOrphanedDefinitions">
            <summary>
            Trim out any definitions in the table which are "orphaned" (i.e. are descendents of
            definitions that don't exist). This should be done after adding a set of definitions if they
            are added dynamically.
            </summary>
        </member>
        <member name="M:MS.Swi.Data.DataMap.TokenIsInMap(MS.Swi.Data.IConstToken)">
            <summary>
            Whether or not the specified token is in the map at its alledged location
            </summary>
            <param name="token">The token</param>
            <returns>True if it is in the map, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.EquivalentEncapsulationIsInMap(MS.Swi.Data.IConstEncapsulation)">
            <summary>
            Whether or not the encapsulation is in the map
            </summary>
            <param name="encapsulation">The encapsulation</param>
            <returns>True if it is in the map, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.EquivalentEncapsulationIsInMap(MS.Swi.Data.Encapsulation)">
            <summary>
            Whether or not the encapsulation is in the map
            </summary>
            <param name="encapsulation">The encapsulation</param>
            <returns>True if it is in the map, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.FindEquivalentEncapsulation(MS.Swi.Data.IConstEncapsulation)">
            <summary>
            Find the equivalent encapsulation in the DataMap to this encapsulation
            </summary>
            <param name="encapsulation">The encapsulation to look for</param>
            <returns>The equivalent encapsulation, or null if none exists</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.FindEquivalentEncapsulation(MS.Swi.Data.Encapsulation)">
            <summary>
            Find the equivalent encapsulation in the DataMap to this encapsulation
            </summary>
            <param name="encapsulation">The encapsulation to look for</param>
            <returns>The equivalent encapsulation, or null if none exists</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.FindTokens(MS.Swi.Data.TokenPosition)">
            <summary>
            Get the sorted sublist of tokens which are "beneath" the given position (i.e.
            a position of 0.0 would include tokens at 0.0.0, 0.0.1, 0.0.2.0, and 0.0.2.1)
            </summary>
            <param name="position">The position</param>
            <returns>The list of descendents</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.FirstToken">
            <summary>
            The first token in the DataMap
            </summary>
            <returns>The first token in the DataMap, or null if the DataMap has no tokens</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.NextToken(MS.Swi.Data.IConstToken,System.Boolean)">
            <summary>
            The next token in the DataMap
            </summary>
            <param name="referenceToken">The token this is in reference to</param>
            <param name="spanRootElements">Whether or not to cross root elements</param>
            <returns>The next token, or null if there is no matching next token</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.PreviousToken(MS.Swi.Data.IConstToken,System.Boolean)">
            <summary>
            The previous token in the DataMap
            </summary>
            <param name="referenceToken">The token this is in reference to</param>
            <param name="spanRootElements">Whether or not to cross root elements</param>
            <returns>The previous token, or null if there is no matching previous token</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.NextToken(MS.Swi.Data.TokenPosition,System.Boolean)">
            <summary>
            The next token in the DataMap. If there is no token at the reference position, the 
            spanRootElements argument will be ignored, and the next token will be returned.
            </summary>
            <param name="referencePosition">The reference position</param>
            <param name="spanRootElements">Whether or not to cross root elements</param>
            <returns>The next token, or null if there is no matching next token</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.PreviousToken(MS.Swi.Data.TokenPosition,System.Boolean)">
            <summary>
            The previous token in the DataMap. If there is no token at the reference position, the 
            spanRootElements argument will be ignored, and the previous token will be returned.
            </summary>
            <param name="referencePosition">The reference position</param>
            <param name="spanRootElements">Whether or not to cross root elements</param>
            <returns>The previous token, or null if there is no matching previous token</returns>
        </member>
        <member name="P:MS.Swi.Data.DataMap.Transformations">
            <summary>
            Access to the available transformations
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataMap.Definitions">
            <summary>
            Access to the token definitions
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataMap.TokenList">
            <summary>
            The actual data token set
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataMap.Tokens">
            <summary>
            Access to the data tokens found
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataMap.EncapsulationList">
            <summary>
            Access to the encapsulations found
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataMap.Encapsulations">
            <summary>
            Access to the encapsulations found
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataMap.MS#Swi#Data#IConstDataMap#Encapsulations">
            <summary>
            Access to the encapsulations found
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataMap.MS#Swi#Data#IConstDataMap#Tokens">
            <summary>
            Access to read-only versions of the data tokens found
            </summary>
        </member>
        <member name="T:MS.Swi.Data.IConstDataBuffer">
            <summary>
            A public constant interface to the DataBuffer, that can be used to
            provide read only access to internal data members
            </summary>
        </member>
        <member name="M:MS.Swi.Data.IConstDataBuffer.CopyTo(System.Byte[],System.UInt32)">
            <summary>
            Copy the entire contents to the specified destination. Note that this requires that
            there is sufficient room
            </summary>
            <param name="destination">The destination buffer</param>
            <param name="position">The position in the destination buffer</param>
        </member>
        <member name="M:MS.Swi.Data.IConstDataBuffer.Clone">
            <summary>
            A clone of the buffer. As all the elements are simple types, this is actually a deep copy.
            </summary>
            <returns>A DataBuffer</returns>
        </member>
        <member name="P:MS.Swi.Data.IConstDataBuffer.Contents">
            <summary>
            A constant copy of the contents
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataBuffer.SizeUsed">
            <summary>
            The amount of the buffer currently used
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataBuffer.Size">
            <summary>
            The current maximum size of the buffer
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataBuffer.Item(System.UInt32)">
            <summary>
            The value at a specific location in the buffer
            </summary>
        </member>
        <member name="T:MS.Swi.Data.DataBuffer">
            <summary>
            Buffer
            	An arbitrary chunk of data, with an implicit maximum size and an explicit size
            </summary>
        </member>
        <member name="M:MS.Swi.Data.DataBuffer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:MS.Swi.Data.DataBuffer.#ctor(System.UInt32)">
            <summary>
            Constructor to create an empty buffer with the specified maximum size
            </summary>
            <param name="maximumSize">The maximum size of the buffer</param>
        </member>
        <member name="M:MS.Swi.Data.DataBuffer.#ctor(System.Byte[],System.UInt32)">
            <summary>
            Constructor to create a buffer based on an existing byte array and the
            amount of that array already in use. Note that the maximum size of the DataBuffer
            is derived in this case from the size of the array.
            </summary>
            <param name="data">The existing byte array (note that null is explicitly handled)</param>
            <param name="sizeUsed">The size of the byte array used.</param>
        </member>
        <member name="M:MS.Swi.Data.DataBuffer.#ctor(System.Byte[],System.UInt32,System.UInt32)">
            <summary>
            Constructor to create a buffer based on an existing byte array and the
            amount of that array already in use.
            </summary>
            <param name="data">The existing byte array (note that null is explicitly handled)</param>
            <param name="sizeUsed">The size of the byte array used.</param>
            <param name="maximumSize">The maximum size of the buffer</param>
        </member>
        <member name="M:MS.Swi.Data.DataBuffer.#ctor(MS.Swi.Data.IConstDataBuffer,System.UInt32,System.UInt32)">
            <summary>
            Constructor to create a buffer based on a fragment of an existing data buffer
            </summary>
            <param name="source">The source buffer</param>
            <param name="startPosition">The start position of the fragment</param>
            <param name="sizeUsed">The size of the fragment</param>
        </member>
        <member name="M:MS.Swi.Data.DataBuffer.#ctor(System.Byte[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Constructor to create a buffer based on a fragment of an existing byte array
            </summary>
            <param name="data">The source buffer</param>
            <param name="startPosition">The start position of the fragment</param>
            <param name="sizeUsed">The size of the byte array used.</param>
            <param name="maximumSize">The maximum size of the buffer</param>
        </member>
        <member name="M:MS.Swi.Data.DataBuffer.ReplaceWithOwnership(System.Byte[])">
            <summary>
            Replace the contents of this DataBuffer by taking ownership of the provided contents. This version
            does NOT change the maximum size of the Buffer, so it allows for auto-truncation.
            </summary>
            <param name="data">The data to adopt</param>
        </member>
        <member name="M:MS.Swi.Data.DataBuffer.ReplaceWithOwnership(System.Byte[],System.UInt32)">
            <summary>
            Replace the contents of this DataBuffer by taking ownership of the provided contents
            </summary>
            <param name="data">The data to adopt</param>
            <param name="maximumSize">The maximum size</param>
        </member>
        <member name="M:MS.Swi.Data.DataBuffer.Replace(MS.Swi.Data.IConstDataBuffer,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Modifier to set the buffer based on an existing data buffer and the
            amount of that array already in use.
            </summary>
            <param name="data">The existing data buffer</param>
            <param name="index">The starting index into the buffer</param>
            <param name="bufferSize">The size of the buffer being created</param>
            <param name="sizeUsed">The size of the byte array used</param>
        </member>
        <member name="M:MS.Swi.Data.DataBuffer.Append(MS.Swi.Data.IConstDataBuffer)">
            <summary>
            Append one DataBuffer onto another
            </summary>
            <param name="data">The data buffer to append</param>
        </member>
        <member name="M:MS.Swi.Data.DataBuffer.Replace(System.Byte[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Modifier to set the buffer based on an existing byte array and the
            amount of that array already in use.
            </summary>
            <param name="data">The existing byte array (note that null is explicitly handled)</param>
            <param name="index">The starting index into the buffer</param>
            <param name="bufferSize">The size of the buffer being created</param>
            <param name="sizeUsed">The size of the byte array used</param>
        </member>
        <member name="M:MS.Swi.Data.DataBuffer.AdjustInternalBuffer(System.UInt32)">
            <summary>
            Adjust the internal buffer to match the size needed
            </summary>
            <param name="sizeNeeded">The size the new buffer should be</param>
        </member>
        <member name="M:MS.Swi.Data.DataBuffer.CopyTo(System.Byte[],System.UInt32)">
            <summary>
            Copy the entire contents to the specified destination. Note that this requires that
            there is sufficient room
            </summary>
            <param name="destination">The destination buffer</param>
            <param name="position">The position in the destination buffer</param>
        </member>
        <member name="M:MS.Swi.Data.DataBuffer.ToString">
            <summary>
            Return a string description of the contents of the DataBuffer
            </summary>
            <returns>A string including the contents</returns>
        </member>
        <member name="M:MS.Swi.Data.DataBuffer.System#ICloneable#Clone">
            <summary>
            A clone of the buffer. As all the elements are simple types, this is actually a deep copy.
            </summary>
            <returns>A new buffer expressed as an object</returns>
        </member>
        <member name="M:MS.Swi.Data.DataBuffer.Clone">
            <summary>
            A clone of the buffer. As all the elements are simple types, this is actually a deep copy.
            </summary>
            <returns>A DataBuffer</returns>
        </member>
        <member name="P:MS.Swi.Data.DataBuffer.Contents">
            <summary>
            Access to deep copy of the contents of the buffer
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataBuffer.SizeUsed">
            <summary>
            The amount of the buffer used
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataBuffer.Size">
            <summary>
            The maximum size of the buffer
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataBuffer.Item(System.UInt32)">
            <summary>
            Access to individual bytes of the buffer (Set and Get). If the location is beyond the
            current size used, the size used will be extended
            </summary>
        </member>
        <member name="T:MS.Swi.Data.IConstDataTransformations">
            <summary>
            A const interface to a DataTransformations
            </summary>
        </member>
        <member name="M:MS.Swi.Data.IConstDataTransformations.Contains(System.String)">
            <summary>
            Whether or not the set of transformations contains the given transformation
            </summary>
            <param name="name">The transformation name to check</param>
            <returns>True if it contains the transformation, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.IConstDataTransformations.Clone">
            <summary>
            Clone the IConstDataTransformations into a new DataTransformations
            </summary>
            <returns>The new DataTransformations</returns>
        </member>
        <member name="M:MS.Swi.Data.IConstDataTransformations.ToXml(System.Xml.XmlDocument)">
            <summary>
            Create an Xml serialization of the object, owned by the specified document
            </summary>
            <param name="owningDocument">The owning document</param>
            <returns>The new XmlElement</returns>
        </member>
        <member name="P:MS.Swi.Data.IConstDataTransformations.Item(System.String)">
            <summary>
            The transformation associated with the name
            </summary>
            <param name="name">The transformation name</param>
            <returns>The transformation</returns>
        </member>
        <member name="T:MS.Swi.Data.DataTransformations">
            <summary>
            The DataTransformations is a mapping of logical names for transformations to
            transformation objects. It is designed to be loaded via Xml, and used in type definitions
            (which are also loaded via Xml)
            </summary>
        </member>
        <member name="M:MS.Swi.Data.DataTransformations.FromXml(MS.Swi.Data.IConstElementDefinitions,System.Xml.XmlElement)">
            <summary>
            Load the Xml serialization into the object, replacing any pre-existing settings.
            </summary>
            <param name="definitions">The token definitions to use in creating the table</param>
            <param name="sourceElement">The XmlElement that contains the object</param>
        </member>
        <member name="M:MS.Swi.Data.DataTransformations.ToXml(System.Xml.XmlDocument)">
            <summary>
            Create an Xml serialization of the object, owned by the specified document
            </summary>
            <param name="owningDocument">The owning document</param>
            <returns>The new XmlElement</returns>
        </member>
        <member name="M:MS.Swi.Data.DataTransformations.LoadFromXml(MS.Swi.Data.IConstElementDefinitions,System.Xml.XmlElement)">
            <summary>
            Add the specified data into the DataTransformation table, generating an exception if
            there are duplicate entries
            </summary>
            <param name="definitions">The token definitions to use in creating the table</param>
            <param name="sourceElement">The XML element</param>
        </member>
        <member name="M:MS.Swi.Data.DataTransformations.LoadTransformations(System.String,MS.Swi.Data.IConstElementDefinitions)">
            <summary>
            Load a set of transformations.  The filename will be searched for first as given,
            then in the local directory, and then in the FCL installation directory.
            </summary>
            <param name="fileName">The filename for the Xml file containing the definitions</param>
            <param name="definitions">The token definitions to use</param>
            <returns>The transformation set</returns>
        </member>
        <member name="M:MS.Swi.Data.DataTransformations.#ctor">
            <summary>
            Default constructors
            </summary>
        </member>
        <member name="M:MS.Swi.Data.DataTransformations.#ctor(MS.Swi.Data.DataTransformations)">
            <summary>
            A private copy constructor used to facilitate the Clone() operation
            </summary>
            <param name="source">The source transformations</param>
        </member>
        <member name="M:MS.Swi.Data.DataTransformations.Contains(System.String)">
            <summary>
            Whether or not the set of transformations contains the given transformation
            </summary>
            <param name="name">The transformation name to check</param>
            <returns>True if it contains the transformation, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.DataTransformations.Add(MS.Swi.Data.IConstDataTransformations)">
            <summary>
            Add another set of DataTransformations into this set
            </summary>
            <param name="transformations">The source transformations</param>
        </member>
        <member name="M:MS.Swi.Data.DataTransformations.Add(MS.Swi.Data.DataTransformations)">
            <summary>
            Add another set of DataTransformations into this set
            </summary>
            <param name="transformations">The source transformations</param>
        </member>
        <member name="M:MS.Swi.Data.DataTransformations.Add(MS.Swi.Data.DataTransformation)">
            <summary>
            Add an individual DataTransformation into this set
            </summary>
            <param name="transformation">The transformation</param>
            <returns>True if it was added, false if a transformation of the same name was already present</returns>
        </member>
        <member name="M:MS.Swi.Data.DataTransformations.Clone">
            <summary>
            The default clone operation
            </summary>
            <returns>The new DataTransformations as an object</returns>
        </member>
        <member name="M:MS.Swi.Data.DataTransformations.MS#Swi#Data#IConstDataTransformations#Clone">
            <summary>
            An explicit clone operation
            </summary>
            <returns>The cloned transformations as a DataTransformations</returns>
        </member>
        <member name="P:MS.Swi.Data.DataTransformations.Item(System.String)">
            <summary>
            The transformation associated with the name
            </summary>
            <param name="name">The transformation name</param>
            <returns>The transformation</returns>
        </member>
        <member name="T:MS.Swi.Data.ContainerElement">
            <summary>
            The ContainerElement class encapsulates the following data about the transformation
            	The output FCL type name
            	The actual output value
            It is used to define the output of a container transformation
            </summary>
        </member>
        <member name="M:MS.Swi.Data.ContainerElement.#ctor(System.String,System.Object)">
            <summary>
            Construct a ContainerElement given the underlying definition and contents. Note that this will
            leave any Identifier associated with the parent token unchanged
            </summary>
            <param name="definitionName">The name of the FCL type definition for the element</param>
            <param name="contents">The actual contents</param>
        </member>
        <member name="M:MS.Swi.Data.ContainerElement.#ctor(System.String,System.Object,System.String)">
            <summary>
            Construct a ContainerElement given the underlying definition and contents, and apply the
            specified Identifier to it when it is extracted. Note that an identifier of null will clear
            any inherited identifier from the parent Token.
            </summary>
            <param name="definitionName">The name of the FCL type definition for the element</param>
            <param name="contents">The actual contents</param>
            <param name="identifier">The identifier, or null if it should be cleared</param>
        </member>
        <member name="P:MS.Swi.Data.ContainerElement.DefinitionName">
            <summary>
            The name of the FCL Definition of the container element
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ContainerElement.Contents">
            <summary>
            The actual contents of the container element
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ContainerElement.IdentifierWasSpecified">
            <summary>
            Whether or not the caller specified an identifier. If an identifier was specified, then
            the resulting child token will have its identifier replaced (if it was non-null) or cleared
            (if it was null)
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ContainerElement.Identifier">
            <summary>
            The identifier associated with the container element
            </summary>
        </member>
        <member name="T:MS.Swi.Data.DataTransformation">
            <summary>
            The DataTransformation class provides the rules and functionality that convert
            data from one internal representation to another. This provides the ability to change
            the encoding and to move from the physical encoding to the logical native type.
            
            In some cases, the internal representation format will be the same (i.e. converting
            from a zipped byte array to an unzipped byte array), and the transformation only changes
            the encoding
            </summary>
        </member>
        <member name="M:MS.Swi.Data.DataTransformation.ToXml(System.Xml.XmlDocument)">
            <summary>
            Write the data transformation to Xml
            </summary>
            <param name="owningDocument"></param>
            <returns></returns>
        </member>
        <member name="M:MS.Swi.Data.DataTransformation.Create(MS.Swi.Data.IConstElementDefinitions,System.Xml.XmlElement)">
            <summary>
            Construct a DataTransformation object from an Xml description
            </summary>
            <param name="definitions">The definition table to use in finding the FCL definitions</param>
            <param name="transformation">The Xml definition of the transformation</param>
            <returns>The constructed object</returns>
        </member>
        <member name="M:MS.Swi.Data.DataTransformation.Create(MS.Swi.Data.IConstElementDefinitions,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Construct a DataTransformation object based on the specified parameters
            </summary>
            <param name="definitions">The definition table to use in finding the FCL definitions</param>
            <param name="name">The name of the transformation</param>
            <param name="sourceDefinitionName">The name of the FCL definition the source implements</param>
            <param name="outputDefinitionName">The name of the FCL definition the source implements</param>
            <param name="characteristics">The characteristics of the transformation</param>
            <param name="elementSize">The size of each output element of this transformation type (in terms of its source type )</param>
            <param name="transformationMethodName">The name of the transformation method to use</param>
            <param name="reverseTransformationMethodName">The name of the reverse transformation method to use</param>
            <returns>The constructed object</returns>
        </member>
        <member name="M:MS.Swi.Data.DataTransformation.Create(MS.Swi.Data.ElementDefinition)">
            <summary>
            Construct a container transformation for the specified output definition
            </summary>
            <param name="outputDefinition">The output definition of the container transformation</param>
            <returns>The transformation</returns>
        </member>
        <member name="M:MS.Swi.Data.DataTransformation.Create(MS.Swi.Data.IConstElementDefinitions,System.String,System.String,System.String,System.String,System.UInt32,System.String,System.String)">
            <summary>
            Construct a DataTransformation object based on the specified parameters
            </summary>
            <param name="definitions">The definition table to use in finding the FCL definitions</param>
            <param name="name">The name of the transformation</param>
            <param name="sourceDefinitionName">The name of the FCL definition the source implements</param>
            <param name="outputDefinitionName">The name of the FCL definition the source implements</param>
            <param name="characteristics">The characteristics of the transformation</param>
            <param name="elementSize">The size of each output element of this transformation type (in terms of its source type )</param>
            <param name="transformationMethodName">The name of the transformation method to use</param>
            <param name="reverseTransformationMethodName">The name of the reverse transformation method to use</param>
            <returns>The constructed object</returns>
        </member>
        <member name="M:MS.Swi.Data.DataTransformation.Equals(System.Object)">
            <summary>
            Determine if two DataTransformations are equal. Because DataTransformation objects
            are immutable, we can do a true Equals override
            </summary>
            <param name="obj">The other object</param>
            <returns>Whether or not they are equal</returns>
        </member>
        <member name="M:MS.Swi.Data.DataTransformation.GetHashCode">
            <summary>
            Create a hash code for the DataTransformation
            </summary>
            <returns>The calculated hash code</returns>
        </member>
        <member name="M:MS.Swi.Data.DataTransformation.HasCharacteristic(MS.Swi.Data.DataTransformation.CharacteristicsFlags)">
            <summary>
            Does the tramsfpr,atopm have the specified characteristic? If the characteristic is a combination of multiple
            characteristics, it will return true only if all of the characteristics are a match
            </summary>
            <param name="characteristic">The characteristic (or characteristics) to check for</param>
            <returns>True if there is an exact match, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.DataTransformation.Transform(System.Object)">
            <summary>
            Transform the source object into the output object
            </summary>
            <param name="source">The source object that is being converted</param>
            <returns>The transformed output object</returns>
        </member>
        <member name="M:MS.Swi.Data.DataTransformation.ReverseTransform(System.Object)">
            <summary>
            Transform the output object into a source object
            </summary>
            <param name="output">The object which is the output of a previous Transform call</param>
            <returns>The inversely transformed source object</returns>
        </member>
        <member name="P:MS.Swi.Data.DataTransformation.Name">
            <summary>
            The name of the transformation
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataTransformation.Characteristics">
            <summary>
            The characteristics of this transformation
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataTransformation.SourceNativeType">
            <summary>
            The native type of the contents that this transformation consumes
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataTransformation.SourceDefinition">
            <summary>
            The name of the FCL definition that this transformation consumes
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataTransformation.OutputNativeType">
            <summary>
            The native type of the contents that this transformation produces
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataTransformation.OutputDefinition">
            <summary>
            The name of the FCL definition that this transformation produces
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataTransformation.TransformationDelegateName">
            <summary>
            The name of the transformation delegate
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataTransformation.ReverseTransformationDelegateName">
            <summary>
            The name of the reverse transformation delegate
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataTransformation.ElementSize">
            <summary>
            The size of an element of this transformation output type (considering strings as char[]) 
            in terms of its source type. Note that this is not valid if the Characteristics include 
            VariableSize
            </summary>
        </member>
        <member name="T:MS.Swi.Data.DataTransformation.CharacteristicsFlags">
            <summary>
            The set of possible characteristics for a DataTransformation
            </summary>
        </member>
        <member name="F:MS.Swi.Data.DataTransformation.CharacteristicsFlags.None">
            <summary>
            No characteristics apply
            </summary>
        </member>
        <member name="F:MS.Swi.Data.DataTransformation.CharacteristicsFlags.VariableSize">
            <summary>
            The transformation will produce differently sized results depending on
            the actual contents
            </summary>
        </member>
        <member name="F:MS.Swi.Data.DataTransformation.CharacteristicsFlags.PartialTransformationValid">
            <summary>
            Sub-elements that use this transformation can be transformed, and the results will
            be the same if sub-element transformations are combined as they would be if the 
            entire element were to be transformed at once
            </summary>
        </member>
        <member name="T:MS.Swi.Data.ContainerTransformation">
            <summary>
            The ContainerTransformation transforms a single length ContainerElement[] into the underlying
            type, and visa-versa. This is used to handle the container transformations
            </summary>
        </member>
        <member name="M:MS.Swi.Data.ContainerTransformation.#ctor(MS.Swi.Data.ElementDefinition)">
            <summary>
            Construct a DataTransformation object
            </summary>
            <param name="outputDefinition">The FCL definition which represents the output</param>
        </member>
        <member name="M:MS.Swi.Data.ContainerTransformation.Transform(System.Object)">
            <summary>
            Transform the source object into the output object
            </summary>
            <param name="source">The source object that is being converted</param>
            <returns>The transformed output object</returns>
        </member>
        <member name="M:MS.Swi.Data.ContainerTransformation.ReverseTransform(System.Object)">
            <summary>
            Transform the output object(s) into a source object
            </summary>
            <param name="output">The object which is the output of a previous Transform call</param>
            <returns>The inversely transformed source object</returns>
        </member>
        <member name="P:MS.Swi.Data.ContainerTransformation.Name">
            <summary>
            The name of the transformation
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ContainerTransformation.Characteristics">
            <summary>
            The characteristics of this transformation
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ContainerTransformation.ElementSize">
            <summary>
            The size of an element of this transformation output type (considering strings as char[]) 
            in terms of its source type. Note that this is not valid if the Characteristics include 
            VariableSize
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ContainerTransformation.SourceNativeType">
            <summary>
            The native type of the contents that this transformation consumes
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ContainerTransformation.SourceDefinition">
            <summary>
            The FCL definition that this transformation consumes
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ContainerTransformation.OutputNativeType">
            <summary>
            The native type of the contents that this transformation produces
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ContainerTransformation.OutputDefinition">
            <summary>
            The name of the FCL definition that this transformation produces
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ContainerTransformation.TransformationDelegateName">
            <summary>
            The name of the transformation delegate, which is not used in a
            container transformation, and so is an empty string
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ContainerTransformation.ReverseTransformationDelegateName">
            <summary>
            The name of the reverse transformation delegate, which is not used in a
            container transformation, and so is an empty string
            </summary>
        </member>
        <member name="T:MS.Swi.Data.DataTransformation`2">
            <summary>
            The DataTransformation class provides the rules and functionality that convert
            data from one internal representation to another. This provides the ability to change
            the encoding and to move from the physical encoding to the logical native type.
            
            In some cases, the internal representation format will be the same (i.e. converting
            from a zipped byte array to an unzipped byte array), and the transformation only changes
            the encoding
            </summary>
        </member>
        <member name="M:MS.Swi.Data.DataTransformation`2.#ctor(System.String,System.String,System.UInt32,MS.Swi.Data.ElementDefinition,MS.Swi.Data.ElementDefinition,System.String,System.String)">
            <summary>
            Construct a DataTransformation object
            </summary>
            <param name="name">The name of the transformation</param>
            <param name="characteristics">The characteristics of the transformation as a string</param>
            <param name="elementSize">The size of an output element in terms of source elements</param>
            <param name="sourceDefinition">The FCL definition which represents the source</param>
            <param name="outputDefinition">The FCL definition which represents the output</param>
            <param name="transformationMethod">The transformation method name</param>
            <param name="reverseTransformationMethod">The reverse transformation method name</param>
        </member>
        <member name="M:MS.Swi.Data.DataTransformation`2.Transform(System.Object)">
            <summary>
            Transform the source object into the output object
            </summary>
            <param name="source">The source object that is being converted</param>
            <returns>The transformed output object</returns>
        </member>
        <member name="M:MS.Swi.Data.DataTransformation`2.Transform(`0)">
            <summary>
            Transform the source object into the output object
            </summary>
            <param name="source">The source object that is being converted</param>
            <returns>The transformed output object</returns>
        </member>
        <member name="M:MS.Swi.Data.DataTransformation`2.ReverseTransform(System.Object)">
            <summary>
            Transform the output object(s) into a source object
            </summary>
            <param name="output">The object which is the output of a previous Transform call</param>
            <returns>The inversely transformed source object</returns>
        </member>
        <member name="M:MS.Swi.Data.DataTransformation`2.ReverseTransform(`1)">
            <summary>
            Transform the output object(s) into a source object
            </summary>
            <param name="output">The objects which are the outputs if a previous Transform call</param>
            <returns>The inversely transformed source object</returns>
        </member>
        <member name="P:MS.Swi.Data.DataTransformation`2.Name">
            <summary>
            The name of the transformation
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataTransformation`2.Characteristics">
            <summary>
            The characteristics of this transformation
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataTransformation`2.ElementSize">
            <summary>
            The size of an element of this transformation output type (considering strings as char[]) 
            in terms of its source type. Note that this is not valid if the Characteristics include 
            VariableSize
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataTransformation`2.SourceNativeType">
            <summary>
            The native type of the contents that this transformation consumes
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataTransformation`2.SourceDefinition">
            <summary>
            The FCL definition that this transformation consumes
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataTransformation`2.OutputNativeType">
            <summary>
            The native type of the contents that this transformation produces
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataTransformation`2.OutputDefinition">
            <summary>
            The name of the FCL definition that this transformation produces
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataTransformation`2.TransformationDelegateName">
            <summary>
            The name of the transformation delegate
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataTransformation`2.ReverseTransformationDelegateName">
            <summary>
            The name of the reverse transformation delegate
            </summary>
        </member>
        <member name="T:MS.Swi.Data.DataTransformation`2.TransformationDelegate">
            <summary>
            A function which transforms the source data into the output object 
            </summary>
            <param name="source">The source object</param>
            <returns>The output object</returns>
        </member>
        <member name="T:MS.Swi.Data.DataTransformation`2.ReverseTransformationDelegate">
            <summary>
            A function which transforms the output object back into the source data
            </summary>
            <param name="output">The previous transformed output data</param>
            <returns>The reconstructed source object</returns>
        </member>
        <member name="T:MS.Swi.Data.TokenPosition">
             <summary>
             The TokenPosition defines the position of a block of data in a buffer in such a way that:
            		Sequences of zero-length fields are valid
                 Sequences of adjacent tokens can be swapped without causing conflicts
            		Insertions of new tokens are always valid
            		The original source buffer can always be determined
            		Any two positions of different lengths MUST differ before the shorter terminates
            
             This replaces the GroupOrdinalPosition and OrdinalPosition fields of all previous CTF
             implementations
             </summary>
        </member>
        <member name="M:MS.Swi.Data.TokenPosition.#ctor">
            <summary>
            Internal constructor for creating the parent and sibling positions
            </summary>
        </member>
        <member name="M:MS.Swi.Data.TokenPosition.#ctor(System.String)">
            <summary>
            Construct a TokenPosition from a dotted string representation. This will throw an
            exception if the string cannot be parsed. Note that all elements both a root and
            a terminal node
            </summary>
            <param name="positionRepresentation">The representation in the #.#.#.#... format</param>
        </member>
        <member name="M:MS.Swi.Data.TokenPosition.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Construct a token position given a root position, and the sequence position of the
            sub-element. This is used when doing top level constructions of data
            </summary>
            <param name="rootPosition">The root element</param>
            <param name="sequencePosition">The sequence of this position among the children of the parent</param>
        </member>
        <member name="M:MS.Swi.Data.TokenPosition.#ctor(MS.Swi.Data.TokenPosition,System.UInt32)">
            <summary>
            Construct a token position given a parent, and the sequence position of the
            sub-element. This is primarily used when splitting or changing data
            </summary>
            <param name="parent">The parent position</param>
            <param name="sequencePosition">The sequence of this position among the children of the parent</param>
        </member>
        <member name="M:MS.Swi.Data.TokenPosition.IsChildOf(MS.Swi.Data.TokenPosition)">
            <summary>
            Whether or not this position is a child of a given token position. For the purposes
            of this test, we will consider a TokenPosition to be a child of itself.
            </summary>
            <param name="position">The token position</param>
            <returns>True if it is a child of that position, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.TokenPosition.IsChildOf(System.UInt32)">
            <summary>
            Whether or not this position is a child of a given root position
            </summary>
            <param name="rootPosition"></param>
            <returns>True if the root position of the node is the same as the given root position</returns>
        </member>
        <member name="M:MS.Swi.Data.TokenPosition.Equals(System.Object)">
            <summary>
            Determine if this is equal to another object
            </summary>
            <param name="obj">The other object</param>
            <returns>True if they are equal, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.TokenPosition.GetHashCode">
            <summary>
            Compute the hash code for the object. Note that two objects which are equal MUST
            have the same Hash Code, so we need to ignore trailing zeros
            </summary>
            <returns>The computed hash code</returns>
        </member>
        <member name="M:MS.Swi.Data.TokenPosition.ToString">
            <summary>
            Convert the TokenPosition to string format
            </summary>
            <returns></returns>
        </member>
        <member name="M:MS.Swi.Data.TokenPosition.CompareTo(System.Object)">
            <summary>
            Compare the TokenPosition to another object. Note that for the sake of comparison x and x.0 are 
            considered equal
            </summary>
            <param name="obj">The object for comparison</param>
            <returns>Negative number if this instance is less than obj, Zero if they are the same, and Positive number of this instance is greater than obj </returns>
        </member>
        <member name="P:MS.Swi.Data.TokenPosition.Parent">
            <summary>
            The parent position of this position, or null if this position cannot have a parent
            </summary>
        </member>
        <member name="P:MS.Swi.Data.TokenPosition.Predecessor">
            <summary>
            The previous token position to this position, or null if there cannot be a predecessor
            node
            </summary>
        </member>
        <member name="P:MS.Swi.Data.TokenPosition.Successor">
            <summary>
            The next token position after this one, or null if we are already at the maximum
            </summary>
        </member>
        <member name="P:MS.Swi.Data.TokenPosition.Vector">
            <summary>
            The underlying vector
            </summary>
        </member>
        <member name="P:MS.Swi.Data.TokenPosition.RootPosition">
            <summary>
            The root position of the token
            </summary>
        </member>
        <member name="P:MS.Swi.Data.TokenPosition.TerminalPosition">
            <summary>
            The terminal position in the node
            </summary>
        </member>
        <member name="P:MS.Swi.Data.TokenPosition.Depth">
            <summary>
            The depth of the position
            </summary>
        </member>
        <member name="P:MS.Swi.Data.TokenPosition.Item(System.Int32)">
            <summary>
            The value it a given sequence position 
            </summary>
            <param name="sequencePosition">The sequence position</param>
            <returns>The value</returns>
        </member>
        <member name="T:MS.Swi.Data.TokenRestriction">
            <summary>
            The TokenRestriction class defines format specific limits for a data token.
            This information is available to the strategy and to manipulations to allow for smarter
            fuzzing of the data.
            </summary>
        </member>
        <member name="M:MS.Swi.Data.TokenRestriction.#ctor(MS.Swi.Data.TokenRestriction)">
            <summary>
            Internal copy constructor for a TokenRestriction object
            </summary>
            <param name="source">The source token</param>
        </member>
        <member name="M:MS.Swi.Data.TokenRestriction.#ctor(System.String,System.Type)">
            <summary>
            Parse the restrictions string into an individual restriction<br/>
            
            The format of the restrictions is:<br/>
            	Value			Single valid value<br/>
            	Min_Max			Exclusive value range<br/>
            	Min+Max			Inclusive value range<br/>
            	Min-Max			Exclusive size range<br/>
            	Min=Max			Inclusive size range<br/>
            	Value|Value		Set of valid values<br/><br/>
            	
            </summary>
            <param name="restriction">The restriction string</param>
            <param name="valueType">The type of the item (for content restrictions). For size restrictions, we always use a uint</param>
            <returns>The restriction</returns>
        </member>
        <member name="M:MS.Swi.Data.TokenRestriction.#ctor(MS.Swi.Data.TokenRestriction.TokenRestrictionType,System.Object,System.Object)">
            <summary>
            Construct a content restriction based on the type and ranges
            </summary>
            <param name="type">The type of restriction</param>
            <param name="minimum">The minimum range endpoint</param>
            <param name="maximum">The maximum range endpoint</param>
        </member>
        <member name="M:MS.Swi.Data.TokenRestriction.#ctor(MS.Swi.Data.TokenRestriction.TokenRestrictionType,System.UInt32,System.UInt32)">
            <summary>
            Construct a size or content restriction based on a range
            </summary>
            <param name="type">The type of restriction</param>
            <param name="minimum">The minimum range endpoint</param>
            <param name="maximum">The maximum range endpoint</param>
        </member>
        <member name="M:MS.Swi.Data.TokenRestriction.#ctor(System.Object[])">
            <summary>
            Construct a content restriction based a set of valid values
            </summary>
            <param name="validValues">The valid values</param>
        </member>
        <member name="M:MS.Swi.Data.TokenRestriction.IsValidValue(System.Object)">
            <summary>
            Determine if an object is a valid value
            </summary>
            <param name="whichValue">The object to check</param>
            <returns>True if it is, false if it is not</returns>
        </member>
        <member name="M:MS.Swi.Data.TokenRestriction.IsTheSameAs(System.Object)">
            <summary>
            Determine if two restrictions are the same
            </summary>
            <param name="otherObject">The compared object</param>
            <returns>True if they are equal, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.TokenRestriction.AddValidValues(MS.Swi.Data.TokenRestriction)">
            <summary>
            Integrate the other valid values. Note that this may have duplicates, we are not filtering
            for them because of the expense
            </summary>
            <param name="restriction">The restriction whose values are being added</param>
        </member>
        <member name="M:MS.Swi.Data.TokenRestriction.System#ICloneable#Clone">
            <summary>
            Clone this token restriction
            </summary>
            <returns>The newly created clone of this token restriction</returns>
        </member>
        <member name="M:MS.Swi.Data.TokenRestriction.Clone">
            <summary>
            Clone this token restriction
            </summary>
            <returns>A newly created clone of this token restriction</returns>
        </member>
        <member name="P:MS.Swi.Data.TokenRestriction.RestrictionType">
            <summary>
            The type of restriction being enforced
            </summary>
        </member>
        <member name="P:MS.Swi.Data.TokenRestriction.Minimum">
            <summary>
            The restricted minimum value
            </summary>
        </member>
        <member name="P:MS.Swi.Data.TokenRestriction.Maximum">
            <summary>
            The restricted maximum value
            </summary>
        </member>
        <member name="P:MS.Swi.Data.TokenRestriction.ValidValues">
            <summary>
            Get a copy of the set of valid values
            </summary>
            <returns>A shallow copy of the set of valid values</returns>
        </member>
        <member name="T:MS.Swi.Data.TokenRestriction.TokenRestrictionType">
            <summary>
            The types of content restrictions. 
            </summary>
        </member>
        <member name="F:MS.Swi.Data.TokenRestriction.TokenRestrictionType.Invalid">
            <summary>
            The default invalid value
            </summary>
        </member>
        <member name="F:MS.Swi.Data.TokenRestriction.TokenRestrictionType.SizeRangeInclusive">
            <summary>
            The content restriction is a size range, inclusive of the end points
            </summary>
        </member>
        <member name="F:MS.Swi.Data.TokenRestriction.TokenRestrictionType.SizeRangeExclusive">
            <summary>
            The content restriction is a size range, exclusive of the end points
            </summary>
        </member>
        <member name="F:MS.Swi.Data.TokenRestriction.TokenRestrictionType.ValueRangeInclusive">
            <summary>
            The content restriction is a value range, inclusive of the end points
            </summary>
        </member>
        <member name="F:MS.Swi.Data.TokenRestriction.TokenRestrictionType.ValueRangeExclusive">
            <summary>
            The content restriction is a value range, exclusive of the end points
            </summary>
        </member>
        <member name="F:MS.Swi.Data.TokenRestriction.TokenRestrictionType.ValidValues">
            <summary>
            The content restriction is a set of valid values
            </summary>
        </member>
        <member name="T:MS.Swi.Data.IConstTokenRestrictions">
            <summary>
            Public const interface to the TokenRestrictions class
            </summary>
        </member>
        <member name="M:MS.Swi.Data.IConstTokenRestrictions.SelectRandomSizeRestriction(System.Random)">
            <summary>
            Select a random valid size restriction and return it to the caller, using the provided 
            random number generator
            </summary>
            <param name="prnGenerator">The generator to use</param>
            <returns>The restriction selected, or null if there are no size restrictions</returns>
        </member>
        <member name="M:MS.Swi.Data.IConstTokenRestrictions.SelectRandomContentRestriction(System.Random)">
            <summary>
            Select a random valid content restriction and return it to the caller, using the provided 
            random number generator
            </summary>
            <param name="prnGenerator">The generator to use</param>
            <returns>The restriction selected, or null if there are no content restrictions</returns>
        </member>
        <member name="P:MS.Swi.Data.IConstTokenRestrictions.SizeRestrictions">
            <summary>
            The list of all size restrictions
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstTokenRestrictions.ValueRangeRestrictions">
            <summary>
            The list of all value range restrictions
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstTokenRestrictions.ValidValuesRestriction">
            <summary>
            The valid values restriction (or null if it does not exist)
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstTokenRestrictions.HasSizeRestrictions">
            <summary>
            Whether or not the restriction set includes size restrictions
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstTokenRestrictions.HasContentRestrictions">
            <summary>
            Whether or not the restriction set includes content restrictions
            </summary>
        </member>
        <member name="T:MS.Swi.Data.TokenRestrictions">
            <summary>
            The set of restrictions that apply to a token
            </summary>
        </member>
        <member name="M:MS.Swi.Data.TokenRestrictions.#ctor(MS.Swi.Data.TokenRestrictions)">
            <summary>
            Private copy constructor
            </summary>
            <param name="source">The source restrictions</param>
        </member>
        <member name="M:MS.Swi.Data.TokenRestrictions.#ctor(System.Type,System.String[])">
            <summary>
            Create restrictions based on a sequence of format strings and value type information
            </summary>
            <param name="valueType">The native type of the object</param>
            <param name="restrictions">The restriction definitions</param>
        </member>
        <member name="M:MS.Swi.Data.TokenRestrictions.#ctor(MS.Swi.Data.TokenRestriction[])">
            <summary>
            Create token restrictions based on a set of existing restrictions
            </summary>
            <param name="restrictions"></param>
        </member>
        <member name="M:MS.Swi.Data.TokenRestrictions.#ctor(MS.Swi.Data.Generic.ConstList{MS.Swi.Data.TokenRestriction},MS.Swi.Data.Generic.ConstList{MS.Swi.Data.TokenRestriction},MS.Swi.Data.TokenRestriction)">
            <summary>
            Construct a set of token restrictions based on the three categories
            </summary>
            <param name="sizeRestrictions">Size restrictions (or null)</param>
            <param name="valueRangeRestrictions">Value range restrictions (or null)</param>
            <param name="validValues">Valid values (or null)</param>
        </member>
        <member name="M:MS.Swi.Data.TokenRestrictions.SelectRandomContentRestriction(System.Random)">
            <summary>
            Select a random valid content restriction and return it to the caller, using the provided 
            random number generator
            </summary>
            <param name="prnGenerator">The generator to use</param>
            <returns>The restriction selected, or null if there are no content restrictions</returns>
        </member>
        <member name="M:MS.Swi.Data.TokenRestrictions.SelectRandomSizeRestriction(System.Random)">
            <summary>
            Select a random valid size restriction and return it to the caller, using the provided 
            random number generator
            </summary>
            <param name="prnGenerator">The generator to use</param>
            <returns>The restriction selected, or null if there are no size restrictions</returns>
        </member>
        <member name="M:MS.Swi.Data.TokenRestrictions.Add(MS.Swi.Data.TokenRestriction)">
            <summary>
            Add a restriction to the set of Token Restrictions
            </summary>
            <param name="restriction">The new restrictions</param>
        </member>
        <member name="M:MS.Swi.Data.TokenRestrictions.Add(MS.Swi.Data.IConstTokenRestrictions)">
            <summary>
            Add the existing restriction set, replacing any current size restrictions
            with new size restrictions if they exist, and preserving the size restrictions
            if not, and adding the content restrictions
            </summary>
            <param name="restrictions">The restrictions</param>
        </member>
        <member name="M:MS.Swi.Data.TokenRestrictions.ReplaceSizeRestrictions(MS.Swi.Data.IConstTokenRestrictions)">
            <summary>
            Replace the existing size restrictions with the size restrictions from the new set
            IF and ONLY IF they exist. If there are no size restrictions in the new
            set, nothing is changed
            </summary>
            <param name="restrictions">The new restrictions</param>
        </member>
        <member name="M:MS.Swi.Data.TokenRestrictions.AddContentRestrictions(MS.Swi.Data.IConstTokenRestrictions)">
            <summary>
            Add the content restrictions
            </summary>
            <param name="restrictions">The restrictions</param>
        </member>
        <member name="M:MS.Swi.Data.TokenRestrictions.System#ICloneable#Clone">
            <summary>
            Clone these token restrictions
            </summary>
            <returns>The newly created clone of these token restrictions</returns>
        </member>
        <member name="M:MS.Swi.Data.TokenRestrictions.Clone">
            <summary>
            Clone these token restrictions
            </summary>
            <returns>A newly created clone of these token restrictions</returns>
        </member>
        <member name="P:MS.Swi.Data.TokenRestrictions.SizeRestrictions">
            <summary>
            The list of all size restrictions
            </summary>
        </member>
        <member name="P:MS.Swi.Data.TokenRestrictions.ValueRangeRestrictions">
            <summary>
            The list of all value range restrictions
            </summary>
        </member>
        <member name="P:MS.Swi.Data.TokenRestrictions.ValidValuesRestriction">
            <summary>
            The valid values restriction (or null if it does not exist)
            </summary>
        </member>
        <member name="P:MS.Swi.Data.TokenRestrictions.HasSizeRestrictions">
            <summary>
            Whether or not the restriction set includes size restrictions
            </summary>
        </member>
        <member name="P:MS.Swi.Data.TokenRestrictions.HasContentRestrictions">
            <summary>
            Whether or not the restriction set includes content restrictions
            </summary>
        </member>
        <member name="T:MS.Swi.InstallationManagement">
            <summary>
            The FCL Management class is a singleton wrapper for FCL installation management functionality
            that is actually implemented in the CTFInstallationManager assembly. It is provided here to allow
            runtime access by the very components that the actual implementation is dependent on. 
            </summary>
        </member>
        <member name="M:MS.Swi.InstallationManagement.#cctor">
            <summary>
            On use of the installation management shim, make sure that we have the
            actual implementation loaded
            </summary>
        </member>
        <member name="M:MS.Swi.InstallationManagement.#ctor">
            <summary>
            FCL Management is a container for static helper functions, and does not
            have a valid instance
            </summary>
        </member>
        <member name="M:MS.Swi.InstallationManagement.LoadAssembliesFromFclDirectories">
            <summary>
            Load the assemblies from the FCL directories for this system
            </summary>
        </member>
        <member name="M:MS.Swi.InstallationManagement.HasDirectoryAssigned">
            <summary>
            Determine if the directory has been assigned for this installation
            </summary>
            <returns>True if one was assigned, false if not </returns>
        </member>
        <member name="M:MS.Swi.InstallationManagement.GetDirectory">
            <summary>
            Get the directory associated with the assembly, or null if it doesn't exist
            </summary>
            <returns>The associated directory, or null if it wasn't set</returns>
        </member>
        <member name="M:MS.Swi.InstallationManagement.SetDirectory(System.String)">
            <summary>
            Set the directory associated with this assembly 
            </summary>
            <param name="directoryPath">The directory path</param>
            <returns>True if it worked, false if not</returns>
        </member>
        <member name="M:MS.Swi.InstallationManagement.ClearDirectory">
            <summary>
            Clear the directory assigned to this installation
            </summary>
        </member>
        <member name="M:MS.Swi.InstallationManagement.InstallFiles(System.String,System.String[])">
            <summary>
            Install files from the source into the managed storage location
            </summary>
            <param name="sourceDirectory">The source directory</param>
            <param name="files">The files (including wildcards) to be installed</param>
            <returns>The set of files installed, or null if they could not all be installed.
            Each subdirectory is a key, and the value is the set of files in that directory.</returns>
        </member>
        <member name="M:MS.Swi.InstallationManagement.UninstallFiles(System.String[])">
            <summary>
            Uninstall files from the managed store location
            </summary>
            <param name="files">The files (including wildcards) to be removed</param>
            <returns>True if none of the named files remain in the storage, false if an error occurred or no storage is defined</returns>
        </member>
        <member name="M:MS.Swi.InstallationManagement.RemoveStorageDirectory">
            <summary>
            Remove the storage directory. Note that this does NOT clear the
            storage directory assignment, that must be done separately, but it
            does delete all of the files in the storage directory and remove
            the directory
            </summary>
        </member>
        <member name="M:MS.Swi.InstallationManagement.DefaultStorageDirectory">
            <summary>
            Build the default storage directory for the current version
            </summary>
            <returns>The calculated storage directory, or null if the attempt to build a directory failed</returns>
        </member>
        <member name="M:MS.Swi.InstallationManagement.IncrementInstallationCount">
            <summary>
            Increment the installation count
            </summary>
            <returns>The installation count, or 0xffffffff if an error occurred</returns>
        </member>
        <member name="M:MS.Swi.InstallationManagement.DecrementInstallationCount">
            <summary>
            Decrement the installation count
            
            </summary>
            <returns>The installation count, or 0xffffffff if an error occurred</returns>
        </member>
        <member name="M:MS.Swi.InstallationManagement.RemoveConfigurationInformation">
            <summary>
            Remove the registry information for this installation
            </summary>
        </member>
        <member name="T:MS.Swi.Data.IConstTokenReference">
            <summary>
            The read-only access definition for the TokenReference class.
            Note that when accessing the referenced tokens, they are unsorted.
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstTokenReference.ReferenceType">
            <summary>
            The type of reference
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstTokenReference.Count">
            <summary>
            The number of elements that make up the reference
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstTokenReference.References">
            <summary>
            The referenced contents
            </summary>
        </member>
        <member name="T:MS.Swi.Data.TokenReference">
            <summary>
            The definition of a reference from one token to another, handling cases where the 
            tokens are split. Note that when accessing the referenced tokens, they are unsorted.
            </summary>
        </member>
        <member name="M:MS.Swi.Data.TokenReference.#ctor(MS.Swi.Data.TokenReference.TokenReferenceType,MS.Swi.Data.Token[])">
            <summary>
            Create a new TokenReference to a specific token
            </summary>
            <param name="referenceType">The reference type</param>
            <param name="referencedTokens">The referenced token</param>
        </member>
        <member name="M:MS.Swi.Data.TokenReference.#ctor(MS.Swi.Data.TokenReference.TokenReferenceType,MS.Swi.Data.DataContents[])">
            <summary>
            Create a new TokenReference to a specific contents
            </summary>
            <param name="referenceType">The reference type</param>
            <param name="referencedContents">The referenced contents</param>
        </member>
        <member name="M:MS.Swi.Data.TokenReference.#ctor(MS.Swi.Data.TokenReference.TokenReferenceType,System.Collections.Generic.List{MS.Swi.Data.Token})">
            <summary>
            Create a new TokenReference to a specific token
            </summary>
            <param name="referenceType">The reference type</param>
            <param name="referencedTokens">The referenced token</param>
        </member>
        <member name="M:MS.Swi.Data.TokenReference.#ctor(MS.Swi.Data.TokenReference.TokenReferenceType,System.Collections.Generic.List{MS.Swi.Data.DataContents})">
            <summary>
            Create a new TokenReference to a specific contents
            </summary>
            <param name="referenceType">The reference type</param>
            <param name="referencedContents">The referenced contents</param>
        </member>
        <member name="M:MS.Swi.Data.TokenReference.CloneReferences">
            <summary>
            Provide a copy of the reference list
            </summary>
            <returns>The copied reference list</returns>
        </member>
        <member name="M:MS.Swi.Data.TokenReference.Apply">
            <summary>
            Apply the reference. This was split out from the original creation of the reference to handle
            the usage pattern in which references are created, but not necessarily applied
            </summary>
        </member>
        <member name="M:MS.Swi.Data.TokenReference.RemoveInvalidReferences(MS.Swi.Data.Token,MS.Swi.Data.IDataContentsInformationSource)">
            <summary>
            Remove from the reference any DataContents which are no longer present in the DataMap, based
            on the information provided, or for which the references are now no longer calculable
            </summary>
            <param name="owner">The Token which owns this reference </param>
            <param name="informationSource">The source of information about the contents</param>
        </member>
        <member name="M:MS.Swi.Data.TokenReference.System#ICloneable#Clone">
            <summary>
            Clone the TokenReference
            </summary>
            <returns>The newly created token reference</returns>
        </member>
        <member name="M:MS.Swi.Data.TokenReference.Clone">
            <summary>
            Clone the TokenReference
            </summary>
            <returns>The newly created token reference</returns>
        </member>
        <member name="P:MS.Swi.Data.TokenReference.ReferenceType">
            <summary>
            The type of reference
            </summary>
        </member>
        <member name="P:MS.Swi.Data.TokenReference.Count">
            <summary>
            The number of tokens that make up the reference
            </summary>
        </member>
        <member name="P:MS.Swi.Data.TokenReference.MS#Swi#Data#IConstTokenReference#References">
            <summary>
            Allow the enumeration of the references
            </summary>
        </member>
        <member name="P:MS.Swi.Data.TokenReference.References">
            <summary>
            Allow the enumeration of the references
            </summary>
        </member>
        <member name="T:MS.Swi.Data.TokenReference.TokenReferenceType">
            <summary>
            The type of reference
            </summary>
        </member>
        <member name="F:MS.Swi.Data.TokenReference.TokenReferenceType.NoReference">
            <summary>
            The requisite zero value, in this case indicating that we have no reference at all
            </summary>
        </member>
        <member name="F:MS.Swi.Data.TokenReference.TokenReferenceType.Position">
            <summary>
            The reference is to the start position of the contents
            </summary>
        </member>
        <member name="F:MS.Swi.Data.TokenReference.TokenReferenceType.RelativePosition">
            <summary>
            The reference is to the start position of the contents relative to the start position of this contents
            </summary>
        </member>
        <member name="F:MS.Swi.Data.TokenReference.TokenReferenceType.Size">
            <summary>
            The reference is to the size of the contents
            </summary>
        </member>
        <member name="F:MS.Swi.Data.TokenReference.TokenReferenceType.Contents">
            <summary>
            The reference is to the contents
            </summary>
        </member>
        <member name="F:MS.Swi.Data.TokenReference.TokenReferenceType.Children">
            <summary>
            The reference is to the number of descendents the contents has
            </summary>
        </member>
        <member name="T:MS.Swi.Data.IConstEncapsulation">
            <summary>
            The cont interface to an Encapsulation. While Encapsulations are themselves immutable (and so
            would not ordinarily require an IConst style interface, this provides interface serves to 
            ensure that all data pulled from an IConstEncapsulation is also either immutable or IConst in nature.
            </summary>
        </member>
        <member name="M:MS.Swi.Data.IConstEncapsulation.FindReferencedTokens(System.String)">
            <summary>
            Find all the tokens referenced as part of the encapsulation, under the given label
            </summary>
            <param name="label">The specified label</param>
            <returns>The list of tokens</returns>
        </member>
        <member name="M:MS.Swi.Data.IConstEncapsulation.FindReferencedTokens">
            <summary>
            Find all tokens referenced as part of the encapsulation
            </summary>
            <returns>The list of tokens</returns>
        </member>
        <member name="M:MS.Swi.Data.IConstEncapsulation.GetValidDefinitions">
            <summary>
            Construct a list of all of the possible valid definitions for this encapsulation
            </summary>
            <returns>The list of valid definitions</returns>
        </member>
        <member name="P:MS.Swi.Data.IConstEncapsulation.References">
            <summary>
            The references of the Encapsulation
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstEncapsulation.ReferenceList">
            <summary>
            All of the references of the encapsulation, expressed as a list
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstEncapsulation.Definition">
            <summary>
            The definition of the Encapsulation
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstEncapsulation.Identifier">
            <summary>
            The identifier associated with the encapsulation
            </summary>
        </member>
        <member name="T:MS.Swi.Data.Encapsulation">
            <summary>
            An encapsulation is a reference
            </summary>
        </member>
        <member name="M:MS.Swi.Data.Encapsulation.#ctor(MS.Swi.Data.ElementDefinition,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{MS.Swi.Data.DataContents}})">
            <summary>
            Construct the encapsulation given a set of references
            </summary>
            <param name="definition">The encapsulation definition to use</param>
            <param name="identifier">The identifier for the encapsulation (null will be silently changed to an empty string)</param>
            <param name="references">The references. Note that the Encapsulation will take ownership of the underlying lists after this is called</param>
        </member>
        <member name="M:MS.Swi.Data.Encapsulation.FindReferencedTokens(System.String)">
            <summary>
            Find all the tokens referenced as part of the encapsulation, under the given label
            </summary>
            <param name="label">The specified label</param>
            <returns>The list of tokens</returns>
        </member>
        <member name="M:MS.Swi.Data.Encapsulation.FindReferencedTokens">
            <summary>
            Find all tokens referenced as part of the encapsulation
            </summary>
            <returns>The list of tokens</returns>
        </member>
        <member name="M:MS.Swi.Data.Encapsulation.GetValidDefinitions">
            <summary>
            Construct a list of all of the possible valid definitions for this encapsulation
            </summary>
            <returns>The list of valid definitions</returns>
        </member>
        <member name="M:MS.Swi.Data.Encapsulation.Equals(System.Object)">
            <summary>
            Do two Encapsulation objects have the same contents
            </summary>
            <param name="otherObject">The encapsulation to compare against</param>
            <returns>True if they have the same contents, False if not</returns>
        </member>
        <member name="M:MS.Swi.Data.Encapsulation.IsEquivalentTo(MS.Swi.Data.Encapsulation)">
            <summary>
            Determine if this encapsulation is equivalent to another. Encapsulations are equivalent if one is a
            refinement of the other and they include the same references. Note that this means that differences
            in identifier are unimportant.
            </summary>
            <param name="otherEncapsulation">The other encapsulation</param>
            <returns>True if they are equivalent, false otherwise</returns>
        </member>
        <member name="M:MS.Swi.Data.Encapsulation.GetHashCode">
            <summary>
            The hashcode for the Encapsulation
            </summary>
            <returns>The calculated hash code</returns>
        </member>
        <member name="M:MS.Swi.Data.Encapsulation.RemoveInvalidReferences(MS.Swi.Data.IDataContentsInformationSource)">
            <summary>
            Remove any references inside of the encapsulation that are to DataContents that no longer exist
            </summary>
            <param name="informationSource">The information source to query for the status of a given DataContents</param>
        </member>
        <member name="P:MS.Swi.Data.Encapsulation.References">
            <summary>
            The references of the Encapsulation
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Encapsulation.ReferenceList">
            <summary>
            All of the references of the encapsulation, expressed as a list
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Encapsulation.MS#Swi#Data#IConstEncapsulation#References">
            <summary>
            The references of the Encapsulation
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Encapsulation.MS#Swi#Data#IConstEncapsulation#ReferenceList">
            <summary>
            All of the references of the encapsulation, expressed as a list
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Encapsulation.Definition">
            <summary>
            The definition of the Encapsulation
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Encapsulation.Identifier">
            <summary>
            The value associated with the encapsulation
            </summary>
        </member>
        <member name="M:MS.Swi.Data.DataContentsStateTable.Add(MS.Swi.Data.DataContents)">
            <summary>
            Add a DataContents element to the state table
            </summary>
            <param name="contents">The contents to add</param>
        </member>
        <member name="M:MS.Swi.Data.DataContentsStateTable.Contains(MS.Swi.Data.DataContents)">
            <summary>
            Whether or not the table already contains the specified contents
            </summary>
            <param name="contents">The contents</param>
            <returns>True if it is already contained, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.DataContentsStateTable.IndexOfPosition(MS.Swi.Data.TokenPosition)">
            <summary>
            The index ordinal for a given token position
            </summary>
            <param name="position">The token position</param>
            <returns>The index ordinal</returns>
        </member>
        <member name="M:MS.Swi.Data.DataContentsStateTable.SetTokenAssociations">
            <summary>
            Set the associations between leaf states and tokens
            </summary>
        </member>
        <member name="M:MS.Swi.Data.DataContentsStateTable.ResolveOrphanedStates(MS.Swi.Data.IConstDataMap)">
            <summary>
            Resolve any states that have been orphaned out
            </summary>
            <param name="sourceMap">The source data map</param>
        </member>
        <member name="M:MS.Swi.Data.DataContentsStateTable.InitializePositionsForResolution">
            <summary>
            Initialize the positions of all known locations in the state table. Note that this should
            only be run once, and it requires that the token associations already be set. This does NOT
            clear other positions, it assumes it is only run once per state table
            </summary>
        </member>
        <member name="M:MS.Swi.Data.DataContentsStateTable.RemoveInvalidReferences(MS.Swi.Data.IDataContentsInformationSource)">
            <summary>
            Fix up any token references to contents that no longer exist in the modified DataMap, or which
            can no longer be handled due to changes in the DataMap
            </summary>
            <param name="informationSource">The information source to use for the fixup</param>
        </member>
        <member name="P:MS.Swi.Data.DataContentsStateTable.Item(MS.Swi.Data.DataContents)">
            <summary>
            Contents state indexed by contents
            </summary>
            <param name="index">The contents</param>
            <returns>The state</returns>
        </member>
        <member name="P:MS.Swi.Data.DataContentsStateTable.Item(MS.Swi.Data.TokenPosition)">
            <summary>
            Contents state of the contents associated with the token position
            </summary>
            <param name="position">The index position</param>
            <returns>The contents state</returns>
        </member>
        <member name="P:MS.Swi.Data.DataContentsStateTable.Item(System.Int32)">
            <summary>
            Contents state indexed by the ordinal associated with the token position
            </summary>
            <param name="index">The index</param>
            <returns>The contents state</returns>
        </member>
        <member name="T:MS.Swi.Data.DataContentsStateTable.State">
            <summary>
            The state information for each contents node
            </summary>
        </member>
        <member name="M:MS.Swi.Data.DataContentsStateTable.State.#ctor(MS.Swi.Data.DataContentsStateTable,MS.Swi.Data.DataContents)">
            <summary>
            Construct a new DataContentsState
            </summary>
            <param name="associatedTable">The table the state is a part of</param>
            <param name="associatedContents">The contents this state is associated with</param>
        </member>
        <member name="M:MS.Swi.Data.DataContentsStateTable.State.IsOrphan(MS.Swi.Data.IConstDataMap)">
            <summary>
            Whether or not this state was orphaned by other manipulations
            </summary>
            <param name="sourceMap">The DataMap to check against</param>
        </member>
        <member name="M:MS.Swi.Data.DataContentsStateTable.State.CalculateRelativePosition(MS.Swi.Data.DataContents)">
            <summary>
            Calculate the relative position between this contents and the referenced contents
            </summary>
            <param name="referencedContents">The referenced contents</param>
            <returns>The relative position</returns>
        </member>
        <member name="M:MS.Swi.Data.DataContentsStateTable.State.IsResolvable">
            <summary>
            Is this data contents element resolvable
            </summary>
            <returns>True if the element is resolvable, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.DataContentsStateTable.State.ClearBaseTokenPosition">
            <summary>
            Reset the BaseTokenPosition to null
            </summary>
        </member>
        <member name="M:MS.Swi.Data.DataContentsStateTable.State.ClearContents">
            <summary>
            Clear the contents, flagging them as cleared, for garbage collection
            </summary>
        </member>
        <member name="M:MS.Swi.Data.DataContentsStateTable.State.SetToInitialPosition(System.Collections.Generic.List{MS.Swi.Data.DataContents})">
            <summary>
            Set the state to its initial position. Note that this REQUIRES that it is called
            in order on the states to function correctly. This works by checking to see if there
            is already a position resolved for this contents PositionBase, and if there is not, 
            setting this position to zero and resolving the position base
            </summary>
            <param name="resolvedBasePositions">The list of already resolved base positions</param>
        </member>
        <member name="M:MS.Swi.Data.DataContentsStateTable.State.RemoveInvalidReferencesInAssociatedToken(MS.Swi.Data.IDataContentsInformationSource)">
            <summary>
            Fixup any references in the associated token
            </summary>
            <param name="informationSource">The information source to use for the fixup</param>
        </member>
        <member name="M:MS.Swi.Data.DataContentsStateTable.State.UpdateSiblingPositions">
            <summary>
            Update the positions of Siblings for the DataContents associated with this State
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContentsStateTable.State.Table">
            <summary>
            The parent state table
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContentsStateTable.State.IsLeaf">
            <summary>
            Whether or not this state is a leaf state (i.e. directly associated with a token)
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContentsStateTable.State.IsSizeDetermined">
            <summary>
            Is the size of the resolved contents known? Note that
            this is the size of the contents object in its native units
            by the type (i.e. if it is a string, the size is in characters)
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContentsStateTable.State.IsPositionDetermined">
            <summary>
            Is the position of the resolved contents known? Note that
            this is the position of the contents object within its root element
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContentsStateTable.State.AreContentsDetermined">
            <summary>
            Are the contents determined?
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContentsStateTable.State.HoldFurtherResolution">
            <summary>
            Whether or not any DataMap resolution should proceed past this DataContents at this time. This
            is used to hold resolution until an Encapsulation can resolve all of its contents
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContentsStateTable.State.SetSizeWhenContentsAreDetermined">
            <summary>
            Whether or not the size of the item should be set when its contents are determined
            (if that is possible).
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContentsStateTable.State.Contents">
            <summary>
            The resolved contents of the contents object
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContentsStateTable.State.Position">
            <summary>
            The position of the contents. Note that
            this is the position of the contents object its root element, indexed
            in bytes
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContentsStateTable.State.Size">
            <summary>
            The size of the contents. Note that this is in bytes, regardless of the actual
            form of the data
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContentsStateTable.State.BaseTokenPosition">
            <summary>
            The base token position for this contents (i.e. the earliest of its child positions)
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContentsStateTable.State.Transformation">
            <summary>
            The transformation associated with this data child
            </summary>
        </member>
        <member name="T:MS.Swi.Data.EncapsulationAttackInformation">
            <summary>
            The attack details for a given encapsulation
            </summary>
        </member>
        <member name="M:MS.Swi.Data.EncapsulationAttackInformation.#ctor(MS.Swi.Data.Encapsulation,MS.Swi.Data.ElementDefinition,MS.Swi.Data.DataContentsStateTable)">
            <summary>
            Construct attack information specifying that the encapsulation should be attacked as the specified
            definition (or null, if the definition is unimportant). Note that if there is an existing encapsulation
            that is being attacked that shares any of the same references, we will silently default to not attack.
            </summary>
            <param name="encapsulation">The encapsulation being attacked</param>
            <param name="definition">The target definition of that encapsulation (or null, to use the default)</param>
            <param name="contentsTable">The content mapping table that is managing the attack results</param>
        </member>
        <member name="M:MS.Swi.Data.EncapsulationAttackInformation.#ctor(MS.Swi.Data.Encapsulation,MS.Swi.Data.DataMapResolver.AttackType)">
            <summary>
            A non-contents attack on the encapsulation (either do not attack, or only attack the 
            structure)
            </summary>
            <param name="encapsulation">The specified encapsulation</param>
            <param name="attackType">The attack type</param>
        </member>
        <member name="M:MS.Swi.Data.EncapsulationAttackInformation.PlaceContentHolds">
            <summary>
            Place holds on the contents that the encapsulation requires, preventing further resolution
            </summary>
        </member>
        <member name="M:MS.Swi.Data.EncapsulationAttackInformation.ReleaseContentHolds">
            <summary>
            Release holds on the contents that the encapsulation requires, allowing further resolution
            </summary>
        </member>
        <member name="M:MS.Swi.Data.EncapsulationAttackInformation.RequiredHoldsConflict">
            <summary>
            Check for existing content holds that would indicate another encapsulation already is 
            attacking some of the values we would be using
            </summary>
        </member>
        <member name="M:MS.Swi.Data.EncapsulationAttackInformation.IsResolvable">
            <summary>
            Determine if the encapsulation is currently resolvable
            </summary>
            <returns>True if all of the required contents are known, and we should attack, and aren't already resolved</returns>
        </member>
        <member name="P:MS.Swi.Data.EncapsulationAttackInformation.Attack">
            <summary>
            Whether or not the target encapsulation should be attacked
            </summary>
        </member>
        <member name="P:MS.Swi.Data.EncapsulationAttackInformation.IsResolved">
            <summary>
            Whether or not the encapsulation is resolved. By definition, if no attack is going to happen,
            it was resolved.
            </summary>
        </member>
        <member name="P:MS.Swi.Data.EncapsulationAttackInformation.TargetEncapsulation">
            <summary>
            The target encapsulation
            </summary>
        </member>
        <member name="P:MS.Swi.Data.EncapsulationAttackInformation.TargetDefinition">
            <summary>
            The target definition to be used for the attack
            </summary>
        </member>
        <member name="T:MS.Swi.Data.TokenAttackInformation">
            <summary>
            The attack details for a given token
            </summary>
        </member>
        <member name="M:MS.Swi.Data.TokenAttackInformation.#ctor(MS.Swi.Data.Token,MS.Swi.Data.ElementDefinition)">
            <summary>
            Construct the attack information for the token. Note that if we cannot get to the requested
            data type, we will turn this into a no-attack
            </summary>
            <param name="token">The token</param>
            <param name="definition">The preferred target definition</param>
        </member>
        <member name="M:MS.Swi.Data.TokenAttackInformation.#ctor(MS.Swi.Data.Token,MS.Swi.Data.DataMapResolver.AttackType)">
            <summary>
            A non-contents attack on the token (either do not attack, or only attack the 
            structure)
            </summary>
            <param name="token">The token</param>
            <param name="attack">The attack type</param>
        </member>
        <member name="P:MS.Swi.Data.TokenAttackInformation.Attack">
            <summary>
            Whether or not we should apply an attack to this token
            </summary>
        </member>
        <member name="P:MS.Swi.Data.TokenAttackInformation.TargetDefinition">
            <summary>
            The name of the object which is our target definition
            </summary>
        </member>
        <member name="P:MS.Swi.Data.TokenAttackInformation.TargetContents">
            <summary>
            The target contents
            </summary>
        </member>
        <member name="T:MS.Swi.Data.DataMapResolver">
            <summary>
            Resolve the contents of a DataMap
            </summary>
        </member>
        <member name="T:MS.Swi.Data.IDataContentsInformationSource">
            <summary>
            An accessor interface to allow the partially resolved values of the data to be extracted
            </summary>
        </member>
        <member name="M:MS.Swi.Data.IDataContentsInformationSource.WasContentsDeleted(MS.Swi.Data.IConstDataContents)">
            <summary>
            Does the specified DataContents still exist in the InformationSource. This is
            to handle cases where a structural manipulation may have removed a referenced Token
            </summary>
            <param name="source">The DataContents object being queried</param>
            <returns>True if the DataContents was deleted, False if not</returns>
        </member>
        <member name="M:MS.Swi.Data.IDataContentsInformationSource.GetContents(MS.Swi.Data.IConstDataContents)">
            <summary>
            Get the resolved contents of the specified IConstDataContents
            </summary>
            <param name="source">The DataContents object being queried</param>
            <returns>The contents</returns>
        </member>
        <member name="M:MS.Swi.Data.IDataContentsInformationSource.GetPosition(MS.Swi.Data.IConstDataContents)">
            <summary>
            Get the position of the resolved contents, relative to its root element, and in bytes
            </summary>
            <param name="source">The DataContents object being queried</param>
            <returns>The position</returns>
        </member>
        <member name="M:MS.Swi.Data.IDataContentsInformationSource.GetSize(MS.Swi.Data.IConstDataContents)">
            <summary>
            Get the size of the resolved contents, in bytes
            </summary>
            <param name="source">The DataContents object being queried</param>
            <returns>The size</returns>
        </member>
        <member name="M:MS.Swi.Data.IDataContentsInformationSource.GetRelativeOffset(MS.Swi.Data.IConstDataContents,MS.Swi.Data.IConstDataContents)">
            <summary>
            Get the relative offset between one item and another.
            </summary>
            <param name="source">The contents which is requesting the relative offset</param>
            <param name="target">The target contents</param>
            <returns>The relative offset</returns>
        </member>
        <member name="M:MS.Swi.Data.IDataContentsInformationSource.CanCalculateRelativeOffset(MS.Swi.Data.IConstDataContents,MS.Swi.Data.IConstDataContents)">
            <summary>
            Determine whether or not a relative position can be calculated between two contents
            </summary>
            <param name="source"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:MS.Swi.Data.DataMapResolver.Resolve(MS.Swi.Data.DataMap)">
            <summary>
            Resolve a DataMap to the core byte arrays, making no changes
            </summary>
            <param name="map">The DataMap</param>
            <returns>The list of byte arrays that correspond to the DataMap root elements</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMapResolver.Resolve(MS.Swi.Data.DataMap,MS.Swi.Data.DataMapResolver.QueryTokenAttackInformationDelegate,MS.Swi.Data.DataMapResolver.QueryEncapsulationAttackInformationDelegate,MS.Swi.Data.DataMapResolver.ResolveTokenContentsDelegate,MS.Swi.Data.DataMapResolver.ResolveEncapsulationContentsDelegate,MS.Swi.Data.DataMapResolver.ResolveTokenStructureDelegate,MS.Swi.Data.DataMapResolver.ResolveEncapsulationStructureDelegate,System.Random)">
            <summary>
            Resolve a DataMap to the core byte arrays, applying the specified changes
            </summary>
            <param name="map">The map to resolve</param>
            <param name="tokenAttackInformationCallback">The callback to use to determine what action should be applied to a Token</param>
            <param name="encapsulationAttackInformationCallback">The callback to use to determine what action should be applied to an Encapsulation</param>
            <param name="tokenResolveContentsCallback">The callback to use to determine the actual contents</param>
            <param name="encapsulationResolveContentsCallback">The callback to use to determine the actual contents</param>
            <param name="tokenResolveStructureCallback">The callback to use to modify the DataMap based on a token</param>
            <param name="encapsulationResolveStructureCallback">The callback to use to modify the DataMap based on an Encapsulation</param>
            <param name="prnGenerator">The random number generator to use</param>
            <returns>The list of byte arrays that correspond to the DataMap root elements</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMapResolver.#ctor(MS.Swi.Data.DataMap,MS.Swi.Data.DataMapResolver.QueryTokenAttackInformationDelegate,MS.Swi.Data.DataMapResolver.QueryEncapsulationAttackInformationDelegate,MS.Swi.Data.DataMapResolver.ResolveTokenContentsDelegate,MS.Swi.Data.DataMapResolver.ResolveEncapsulationContentsDelegate,MS.Swi.Data.DataMapResolver.ResolveTokenStructureDelegate,MS.Swi.Data.DataMapResolver.ResolveEncapsulationStructureDelegate,System.Random)">
            <summary>
            Initialize the data map resolver. Note that this will generate queries to the attack information
            delegates if one is specified
            </summary>
            <param name="map">The map to resolve</param>
            <param name="tokenAttackInformationCallback">The callback to use to determine what action should be applied to a Token</param>
            <param name="encapsulationAttackInformationCallback">The callback to use to determine what action should be applied to an Encapsulation</param>
            <param name="tokenResolveContentsCallback">The callback to use to determine the actual contents</param>
            <param name="encapsulationResolveContentsCallback">The callback to use to determine the actual contents</param>
            <param name="tokenResolveStructureCallback">The callback to use to modify the DataMap based on a token</param>
            <param name="encapsulationResolveStructureCallback">The callback to use to modify the DataMap based on an Encapsulation</param>
            <param name="prnGenerator">The random number generator to use</param>
        </member>
        <member name="M:MS.Swi.Data.DataMapResolver.WasContentsDeleted(MS.Swi.Data.IConstDataContents)">
            <summary>
            Does the specified DataContents still exist in the InformationSource. This is
            to handle cases where a structural manipulation may have removed a referenced Token
            </summary>
            <param name="source">The DataContents object being queried</param>
            <returns>True if the DataContents was deleted, False if not</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMapResolver.GetContents(MS.Swi.Data.IConstDataContents)">
            <summary>
            Get the resolved contents of the specified IConstDataContents
            </summary>
            <param name="source">The DataContents object being queried</param>
            <returns>The contents</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMapResolver.GetPosition(MS.Swi.Data.IConstDataContents)">
            <summary>
            Get the position of the resolved contents, relative to its parent object base, and
            in units based on the type (i.e. arrays are in terms of array elements, strings are in
            terms of characters, everything else would be a singleton)
            </summary>
            <param name="source">The DataContents object being queried</param>
            <returns>The position</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMapResolver.GetSize(MS.Swi.Data.IConstDataContents)">
            <summary>
            Get the size of the resolved contents, in units based on the type (i.e. arrays are in
            terms of array elements, strings are in terms of characters, everything else would be a singleton)
            </summary>
            <param name="source">The DataContents object being queried</param>
            <returns>The size</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMapResolver.GetRelativeOffset(MS.Swi.Data.IConstDataContents,MS.Swi.Data.IConstDataContents)">
            <summary>
            Get the relative offset between one item and another.
            </summary>
            <param name="source">The contents which is requesting the relative offset</param>
            <param name="target">The target contents</param>
            <returns>The relative offset</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMapResolver.CanCalculateRelativeOffset(MS.Swi.Data.IConstDataContents,MS.Swi.Data.IConstDataContents)">
            <summary>
            Determine whether or not a relative position can be calculated between two contents
            </summary>
            <param name="source">The contents which is requesting the relative offset</param>
            <param name="target">The target contents</param>
            <returns>True if a relative offset can be calculated, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMapResolver.Resolve">
            <summary>
            Resolve the entire DataMap, returning the constructed results. Note that this can
            modify the underlying DataMap, if the strategy includes structural manipulations
            </summary>
            <returns>The list of byte[] objects that correspond to the root elements</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMapResolver.ResolveStructuralManipulations">
            <summary>
            Resolve all structural manipulations and update the attack target information to exclude
            the newly created items
            </summary>
        </member>
        <member name="M:MS.Swi.Data.DataMapResolver.ResolveContentManipulations(System.Collections.Generic.List{System.Byte[]})">
            <summary>
            Resolve all scheduled content manipulations
            </summary>
        </member>
        <member name="M:MS.Swi.Data.DataMapResolver.ResolveContents(MS.Swi.Data.EncapsulationAttackInformation)">
            <summary>
            Resolve the contents for the specified encapsulation. Note that the encapsulation must be unresolved,
            and must have been determined to be resolvable.
            </summary>
            <param name="encapsulationAttack">The encapsulation attack</param>
        </member>
        <member name="M:MS.Swi.Data.DataMapResolver.ResolveContents(MS.Swi.Data.Token,MS.Swi.Data.DataContents)">
            <summary>
            Resolve the contents for the specific token. Note that the token must be unresolved, 
            and must have been determined to be resolvable
            </summary>
            <param name="token">The token being resolved</param>
            <param name="contents">The contents being resolved</param>
        </member>
        <member name="T:MS.Swi.Data.DataMapResolver.AttackType">
            <summary>
            What type of attack should be conducted on a given DataMap element
            </summary>
        </member>
        <member name="F:MS.Swi.Data.DataMapResolver.AttackType.None">
            <summary>
            No attack, the element should not be attacked
            </summary>
        </member>
        <member name="F:MS.Swi.Data.DataMapResolver.AttackType.AttackContents">
            <summary>
            The contents of the element should be attacked
            </summary>
        </member>
        <member name="F:MS.Swi.Data.DataMapResolver.AttackType.AttackStructure">
            <summary>
            The structure of the DataMap should be attacked, using the
            element as the reference point
            </summary>
        </member>
        <member name="T:MS.Swi.Data.DataMapResolver.QueryTokenAttackInformationDelegate">
            <summary>
            Query to determine what the desired targetting is for a given token
            </summary>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="token">The token being considered</param>
            <param name="definition">The definition to be used (or null if this is unimportant)</param>
            <returns>The AttackType selected</returns>
        </member>
        <member name="T:MS.Swi.Data.DataMapResolver.QueryEncapsulationAttackInformationDelegate">
            <summary>
            Query to determine what the desired targetting is for a given encapsulation
            </summary>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="encapsulation">The encapsulation being considered</param>
            <param name="definition">The definition to be used (or null if this is unimportant)</param>
            <returns>The AttackType selected</returns>
        </member>
        <member name="T:MS.Swi.Data.DataMapResolver.ResolveTokenContentsDelegate">
            <summary>
            Resolve any changes being made to the token contents
            </summary>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="token">The token being attacked</param>
            <param name="contentsDefinition">The definition of the contents being attacked</param>
            <param name="source">The data contents that the contents came from</param>
            <param name="contents">The contents</param>
            <returns>The modified contents</returns>
        </member>
        <member name="T:MS.Swi.Data.DataMapResolver.ResolveEncapsulationContentsDelegate">
            <summary>
            Resolve any changes being made to the token encapsulation
            </summary>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="encapsulation">The encapsulation being attacked</param>
            <param name="contentsDefinition">The definition of the contents being attacked</param>
            <param name="contents">The contents (which will be modified in place)</param>
        </member>
        <member name="T:MS.Swi.Data.DataMapResolver.ResolveTokenStructureDelegate">
            <summary>
            Resolve any changes being made to the structure focusing on a given token
            </summary>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="sourceMap">The data map being modified</param>
            <param name="token">The token being referenced</param>
        </member>
        <member name="T:MS.Swi.Data.DataMapResolver.ResolveEncapsulationStructureDelegate">
            <summary>
            Resolve any changes being made to the structure focusing on a given encapsulation
            </summary>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="sourceMap">The data map being modified</param>
            <param name="encapsulation">The encapsulation being referenced</param>
        </member>
        <member name="T:MS.Swi.Data.IConstDataContents">
            <summary>
            The read-only version of the internal mapping information for the contents of a data token. 
            </summary>
        </member>
        <member name="M:MS.Swi.Data.IConstDataContents.CanDescendFrom(MS.Swi.Data.DataContents)">
            <summary>
            Whether not one DataContents can descend from another
            </summary>
            <param name="prospectiveParent">The prospective parent data contents</param>
            <returns>True if this contents could descend from that one, otherwise false</returns>
        </member>
        <member name="M:MS.Swi.Data.IConstDataContents.FindAssociatedTokens">
            <summary>
            Find the list of all of the tokens which descend from this DataContents
            </summary>
            <returns>The constructed list</returns>
        </member>
        <member name="M:MS.Swi.Data.IConstDataContents.TrimSplitPoints(System.Collections.IEnumerable)">
            <summary>
            Trim out zero length split points from the specified set (including split points at the ends)
            </summary>
            <param name="splitPoints">The split points to analyzer</param>
            <returns>The new set of split points</returns>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.Parent">
            <summary>
            The parent of this DataContents element
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.Root">
            <summary>
            The root contents for this DataContents object
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.Container">
            <summary>
            The first parent DataContents for this DataContents that contains more than
            one child, or null if there is no container for this DataContents (which would
            make it the only DataContents in the root)
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.PositionBase">
            <summary>
            The DataContents that the position of this contents is relative to, or null, if no position
            can be calculated
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.BaseDefinition">
            <summary>
            The base FCL definition for this contents element
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.IsSplit">
            <summary>
            Whether or not this is a split of the parent object
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.IsRoot">
            <summary>
            Whether or not this is a root container
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.NumberOfChildren">
            <summary>
            The number of children the node has
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.AssociatedToken">
            <summary>
            The token that this DataContents element is associated with, or null if it does
            not have a directly associated token
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.Transformation">
            <summary>
            The transformation that applies to this DataContents
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.Restrictions">
            <summary>
            The restrictions that apply to the contents
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.ContentsNativeType">
            <summary>
            The native type of this DataContents element
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.ReferenceTypesTo">
            <summary>
            The types of references to this contents element
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.Children">
            <summary>
            The child nodes of this node
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.Child">
            <summary>
            The child of this node. This is only valid if there is one and only one child node
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.IsImmutable">
            <summary>
            Whether or not the DataContents is immutable
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.IsSizeDeterminable">
            <summary>
            Whether or not the size of the DataContents can ever be determined
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.IsAbsolutePositionDeterminable">
            <summary>
            Whether or not the absolute position of the DataContents can ever be determined
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.IsPositionDeterminable">
            <summary>
            Whether or not any position can be determined
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.From">
            <summary>
            The transformation which created these contents, if it can be determined
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.SizeMultiplier">
            <summary>
            The size multiplier that can convert from the number of elements in the actual contents
            to the number of bytes they represent, or 0 if there is no constant size multiplier that
            applies
            </summary>
        </member>
        <member name="T:MS.Swi.Data.DataContents">
            <summary>
            The internal mapping information for the contents of a data token. Please note that
            there is no ordering information contained in a DataContents object. All of the ordering
            is in the associated Token.
            </summary>
        </member>
        <member name="M:MS.Swi.Data.DataContents.#ctor">
            <summary>
            Construct an empty data contents element
            </summary>
        </member>
        <member name="M:MS.Swi.Data.DataContents.#ctor(MS.Swi.Data.DataContents)">
            <summary>
            Construct a copy of a DataContents element
            </summary>
            <param name="sourceContents">The source contents to use</param>
        </member>
        <member name="M:MS.Swi.Data.DataContents.#ctor(System.Byte[])">
            <summary>
            Construct a root data contents element
            </summary>
            <param name="data">The source data</param>
        </member>
        <member name="M:MS.Swi.Data.DataContents.#ctor(System.Object,MS.Swi.Data.DataTransformation[])">
            <summary>
            Create a contents leaf element, and build the parent objects automatically
            </summary>
            <param name="contents">The contents</param>
            <param name="transformations">The full set of transformations to apply backwards</param>
        </member>
        <member name="M:MS.Swi.Data.DataContents.#ctor(System.Object,MS.Swi.Data.IConstTokenRestrictions,MS.Swi.Data.DataTransformation[])">
            <summary>
            Create a contents leaf element, and build the parent objects automatically
            </summary>
            <param name="contents">The contents</param>
            <param name="restrictions">New restrictions on the contents, or null if no restrictions are being added</param>
            <param name="transformations">The full set of transformations to apply backwards</param>
        </member>
        <member name="M:MS.Swi.Data.DataContents.#ctor(MS.Swi.Data.DataContents,System.Object)">
            <summary>
            Construct an element that is a subset of the parent element. Note that this is where we handle
            the case in a split operation where we are splitting a field whose transformation is defined as
            f(x) + f(y) = f(x+y), by pushing the Transformation data down. For this to work, after the split,
            the actual parent is responsible for voiding its own Transformation in the Split() function
            </summary>
            <param name="parent">The parent contents</param>
            <param name="contents">These contents</param>
        </member>
        <member name="M:MS.Swi.Data.DataContents.#ctor(MS.Swi.Data.DataContents,MS.Swi.Data.DataTransformation)">
            <summary>
            Construct an element that is a transformation of the parent element
            </summary>
            <param name="parent">The parent contents</param>
            <param name="transformation">The transformation</param>
        </member>
        <member name="M:MS.Swi.Data.DataContents.Split">
            <summary>
            Split the contents into single element subcontents (i.e. the maximum number of
            possible sub-contents)
            </summary>
            <returns>The list of contents</returns>
        </member>
        <member name="M:MS.Swi.Data.DataContents.Split(System.Collections.IEnumerable)">
            <summary>
            Split the contents into sub-contents, given the split points provided. Note that the child
            elements are already added as children of this DataContents node by the time they are returned.
            
            This will create zero length children, if they are specified. To exclude zero-length children, use the
            TrimSplitPoints() function first
            
            The length of the resulting contents will always be the length of the split points + 1. This means that
            an empty set of split points will return a single split of the entire section
            
            The contents object must be an array or a String
            </summary>
            <param name="splitPoints">The array of split points (expressed as elements of the underlying splittable native type)</param>
        </member>
        <member name="M:MS.Swi.Data.DataContents.CanDescendFrom(MS.Swi.Data.DataContents)">
            <summary>
            Whether not one DataContents can descend from another
            </summary>
            <param name="prospectiveParent">The prospective parent data contents</param>
            <returns>True if this contents could descend from that one, otherwise false</returns>
        </member>
        <member name="M:MS.Swi.Data.DataContents.FindAssociatedTokens">
            <summary>
            Find the list of all of the tokens which descend from this DataContents
            </summary>
            <returns>The constructed list</returns>
        </member>
        <member name="M:MS.Swi.Data.DataContents.TrimSplitPoints(System.Collections.IEnumerable)">
            <summary>
            Trim out zero length split points from the specified set (including split points at the ends)
            </summary>
            <param name="splitPoints">The split points to analyzer</param>
            <returns>The new set of split points</returns>
        </member>
        <member name="F:MS.Swi.Data.DataContents.mParent">
            Contents tracking:
            	The parent is the parent DataContents, or null if this is the root
            	The associated token is the token that this contents is currently associated with
            	The transformation is the transformation that applies to the parent node, if any
            	The children are the set of child nodes
        </member>
        <member name="P:MS.Swi.Data.DataContents.MS#Swi#Data#IConstDataContents#Restrictions">
            <summary>
            The restrictions that apply to the token
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.Restrictions">
            <summary>
            The restrictions that apply to the token
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.IsImmutable">
            <summary>
            Whether or not the DataContents is immutable
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.IsRoot">
            <summary>
            Whether or not this is a root DataContents
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.Contents">
            <summary>
            The modifiable contents of the Data
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.ContentsNativeType">
            <summary>
            The native type of the contents
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.SizeMultiplier">
            <summary>
            The size multiplier that can convert from the number of elements in the actual contents
            to the number of bytes they represent, or 0 if there is no constant size multiplier that
            applies
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.IsSizeDeterminable">
            <summary>
            Whether or not the size of the DataContents can ever be determined
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.IsAbsolutePositionDeterminable">
            <summary>
            Whether or not the absolute position of the DataContents can ever be determined
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.IsPositionDeterminable">
            <summary>
            Whether or not any position can be determined
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.MS#Swi#Data#IConstDataContents#AssociatedToken">
            <summary>
            The token which is currently associated with these contents
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.AssociatedToken">
            <summary>
            The token which is currently associated with these contents
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.IsSplit">
            <summary>
            Whether or not this is a split of the parent object
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.NumberOfChildren">
            <summary>
            The number of children the node has
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.Transformation">
            <summary>
            The transformation that is required to transform these contents to their parent type
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.MS#Swi#Data#IConstDataContents#Parent">
            <summary>
            The parent contents for this DataContents
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.Parent">
            <summary>
            The parent contents for this DataContents
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.MS#Swi#Data#IConstDataContents#Children">
            <summary>
            The children of this DataContents element
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.Children">
            <summary>
            The children of this DataContents element
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.MS#Swi#Data#IConstDataContents#Child">
            <summary>
            The child of this node. This will return null if this is a leaf node, and throw an exception if
            this node has multiple children
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.Child">
            <summary>
            The child of this node. This will return null if this is a leaf node, and throw an exception if
            this node has multiple children
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.From">
            <summary>
            The name of the transformation which created this data, if it can be determined, otherwise ""
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.MS#Swi#Data#IConstDataContents#Root">
            <summary>
            The root contents for this DataContents object
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.Root">
            <summary>
            The root contents for this DataContents object
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.MS#Swi#Data#IConstDataContents#PositionBase">
            <summary>
            The DataContents that the position of this contents is relative to, or null, if no position
            can be calculated
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.PositionBase">
            <summary>
            The DataContents that the position of this contents is relative to, or null, if no position
            can be calculated
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.MS#Swi#Data#IConstDataContents#Container">
            <summary>
            The first parent DataContents for this DataContents that contains more than
            one child, or null if there is no container for this DataContents (which would
            make it the only DataContents in the root)
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.Container">
            <summary>
            The first parent DataContents for this DataContents that contains more than
            one child, or null if there is no container for this DataContents (which would
            make it the only DataContents in the root)
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.ReferenceTypesTo">
            <summary>
            The types of references to this contents element
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.BaseDefinition">
            <summary>
            The base FCL definition for this contents element
            </summary>
        </member>
        <member name="T:MS.Swi.CommonStorage.AccessPermissions">
            <summary>
            Access flags for permissions on individual common objects
            </summary>
        </member>
        <member name="F:MS.Swi.CommonStorage.AccessPermissions.OwnerWrite">
            <summary>
            Base Flag:
            Owner can write to/modify the common storage logical object after creation
            </summary>
        </member>
        <member name="F:MS.Swi.CommonStorage.AccessPermissions.OwnerDelete">
            <summary>
            Base Flag:
            Owner can delete the common storage logical object
            </summary>
        </member>
        <member name="F:MS.Swi.CommonStorage.AccessPermissions.AnyWrite">
            <summary>
            Base Flag:
            Any object can write to/modify the common storage logical object after creation
            </summary>
        </member>
        <member name="F:MS.Swi.CommonStorage.AccessPermissions.AnyDelete">
            <summary>
            Base Flag
            Any object can delete the common storage logical object
            </summary>
        </member>
        <member name="F:MS.Swi.CommonStorage.AccessPermissions.None">
            <summary>
            Common Flag Mask:
            No one can modify or delete the common storage logical object
            </summary>
        </member>
        <member name="F:MS.Swi.CommonStorage.AccessPermissions.Default">
            <summary>
            Common Flag Mask:
            Default setting: The owner can delete the common storage logical object, and any object
            can modify it
            </summary>
        </member>
        <member name="F:MS.Swi.CommonStorage.AccessPermissions.ReadOnly">
            <summary>
            Common Flag Mask:
            No one can write to/modify the common storage logical object after creation, but the
            owning object can delete it
            </summary>
        </member>
        <member name="F:MS.Swi.CommonStorage.AccessPermissions.OthersReadOnly">
            <summary>
            Common Flag Mask
            The owning object can write to/modify or delete the common storage logical object, but other
            objects have read-only access
            </summary>
        </member>
        <member name="F:MS.Swi.CommonStorage.AccessPermissions.All">
            <summary>
            Common Flag Mask
            All flag options are set, any object can do anything to the common storage logical object
            </summary>
        </member>
        <member name="T:MS.Swi.CommonStorage.Storage">
            <summary>
            CommonStorage is a forced Singleton class, with the public
            static field Data as an implementation.
            </summary>
        </member>
        <member name="M:MS.Swi.CommonStorage.Storage.#ctor">
            <summary>
            Private constructor to build an individual CommonStorage object, which have no contents
            anyway
            </summary>
        </member>
        <member name="M:MS.Swi.CommonStorage.Storage.RegisterForObjectManagementEvents(MS.Swi.CommonStorage.DataUpdateEventHandler)">
            <summary>
            Register the specified handler for object management (Creation/Deletion) events
            </summary>
            <param name="eventHandler">The specified handler</param>
        </member>
        <member name="M:MS.Swi.CommonStorage.Storage.UnregisterForObjectManagementEvents(MS.Swi.CommonStorage.DataUpdateEventHandler)">
            <summary>
            Unregister the specified handler for object management (Creation/Deletion) events
            </summary>
            <param name="eventHandler">The specified handler</param>
        </member>
        <member name="M:MS.Swi.CommonStorage.Storage.RegisterForObjectUpdateEvents(System.String,MS.Swi.CommonStorage.DataUpdateEventHandler)">
            <summary>
            Register the specified handler for modification events for the specified logical object
            </summary>
            <param name="logicalName">The logical object name</param>
            <param name="eventHandler">The specified handler</param>
        </member>
        <member name="M:MS.Swi.CommonStorage.Storage.UnregisterForObjectUpdateEvents(System.String,MS.Swi.CommonStorage.DataUpdateEventHandler)">
            <summary>
            Unregister the specified handler for modification events for the specified logical object
            </summary>
            <param name="logicalName">The logical object name</param>
            <param name="eventHandler">The specified handler</param>
        </member>
        <member name="M:MS.Swi.CommonStorage.Storage.Contents(System.String)">
            <summary>
            Return the contents associated with the specified logical object
            </summary>
            <param name="logicalName">The name of the logical object</param>
            <returns>The contents of the </returns>
        </member>
        <member name="M:MS.Swi.CommonStorage.Storage.Exists(System.String)">
            <summary>
            Does an object of the given logical name exist in common storage?
            </summary>
            <param name="logicalName">The logical name</param>
            <returns>True if the object already exists, false if not</returns>
        </member>
        <member name="M:MS.Swi.CommonStorage.Storage.Permissions(System.String)">
            <summary>
            What are the permissions for the object
            </summary>
            <param name="logicalName">The object logical name</param>
            <returns>The object permissions, or None if the object does not exist</returns>
        </member>
        <member name="M:MS.Swi.CommonStorage.Storage.Clear">
            <summary>
            Reset the storage completely. Note that this ignores any permissions values
            </summary>
        </member>
        <member name="M:MS.Swi.CommonStorage.Storage.Create(System.Object,System.String,System.Type,System.Object,MS.Swi.CommonStorage.AccessPermissions)">
            <summary>
            Create a logical object. This will fail if the object already exists. If the object is
            created, an ObjectCreated event will be generated for it
            </summary>
            <param name="owner">The object owner</param>
            <param name="logicalName">The object logical name</param>
            <param name="requiredType">The type of the logical object, or null if all types are valid</param>
            <param name="initialValue">The initial object value</param>
            <param name="permissions">The permissions flags for the object</param>
            <returns>True if it worked, false if not</returns>
        </member>
        <member name="M:MS.Swi.CommonStorage.Storage.Modify(System.Object,System.String,System.Object)">
            <summary>
            Modify an already existing logical object. If the object cannot be changed by the accessor, an
            ObjectAccessViolation message will be sent to any listeners who have registered for updates on
            that particular object, otherwise, an ObjectModified message will be sent instead.
            </summary>
            <param name="accessor">The object accessing the logical object</param>
            <param name="logicalName">The logical object name</param>
            <param name="replacementValue">The new object value</param>
            <returns>True if it worked, false if not</returns>
        </member>
        <member name="M:MS.Swi.CommonStorage.Storage.Delete(System.Object)">
            <summary>
            Delete (or attempt to delete) all logical objects owned by the specified owning object. Note
            that objects whose permissions don't allow it will not be removed.
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:MS.Swi.CommonStorage.Storage.Delete(System.Object,System.String)">
            <summary>
            Delete a logical object. If the object cannot be deleted by the accessor, an
            ObjectAccessViolation message will be sent to any listeners who have registered for
            object management events, otherwise, an ObjectDeleted message will be sent instead.
            </summary>
            <param name="accessor">The object deleting the logical object</param>
            <param name="logicalName">The logical object name</param>
            <returns>True if it worked, false if not</returns>
        </member>
        <member name="P:MS.Swi.CommonStorage.Storage.LogicalObjectNames">
            <summary>
            Return an ICollection of the names of all of the logical objects
            </summary>
        </member>
        <member name="T:MS.Swi.CommonStorage.Storage.ContentDefinition">
            <summary>
            The content definition class for the internal hash table. The ContentDefinition fully identify the
            object, owner, permissions, and contents of every logical object in the Common Storage
            </summary>
        </member>
        <member name="M:MS.Swi.CommonStorage.Storage.ContentDefinition.#ctor(System.Object,System.String,System.Type,System.Object,MS.Swi.CommonStorage.AccessPermissions)">
            <summary>
            ContentDefinition constructor
            </summary>
            <param name="owner">Owner of the object</param>
            <param name="logicalName">Full logical name of the object</param>
            <param name="objectType">Type of the object, or null if all types are valid</param>
            <param name="objectValue">The initial contents of the object</param>
            <param name="permissions">Permission flags for the object</param>
        </member>
        <member name="M:MS.Swi.CommonStorage.Storage.ContentDefinition.CheckPermissions(System.Object,MS.Swi.CommonStorage.Storage.ContentDefinition.OperationType)">
            <summary>
            Determine if the accessor has sufficient permissions to perform the operation on the logical object
            </summary>
            <param name="accessor"></param>
            <param name="operation"></param>
            <returns></returns>
        </member>
        <member name="M:MS.Swi.CommonStorage.Storage.ContentDefinition.CheckType(System.Object)">
             <summary>
             Check the proposed value against the type
            
             Values are valid if:
             One: The type restriction for these contents is null, meaning no restrictions OR
             Two: The object is null, and the required type is a reference type or interface OR
             Three: The object is of the same class or a subclass of the required type OR
             Four: The required type is an interface, and the object implements it 
             
             
             </summary>
             <param name="proposedValue">The value to check</param>
             <returns>True if the value was valid for the type restriction, false if not</returns>
        </member>
        <member name="M:MS.Swi.CommonStorage.Storage.ContentDefinition.Modify(System.Object,System.Object)">
            <summary>
            Modify the object contents
            </summary>
            <param name="accessor">The accessor</param>
            <param name="replacementValue">The replacement value</param>
            <returns></returns>
        </member>
        <member name="M:MS.Swi.CommonStorage.Storage.ContentDefinition.Register(MS.Swi.CommonStorage.DataUpdateEventHandler)">
            <summary>
            Register a handler for this particular logical object (and this object only)
            </summary>
            <param name="eventHandler"></param>
        </member>
        <member name="M:MS.Swi.CommonStorage.Storage.ContentDefinition.Unregister(MS.Swi.CommonStorage.DataUpdateEventHandler)">
            <summary>
            Unregister a handler for this particular logical object (and this object only)
            </summary>
            <param name="eventHandler"></param>
        </member>
        <member name="P:MS.Swi.CommonStorage.Storage.ContentDefinition.Owner">
            <summary>
            The owner of the logical object
            </summary>
        </member>
        <member name="P:MS.Swi.CommonStorage.Storage.ContentDefinition.ObjectContents">
            <summary>
            The current contents of the logical object
            </summary>
        </member>
        <member name="P:MS.Swi.CommonStorage.Storage.ContentDefinition.ObjectType">
            <summary>
            The object type (or NULL) of the object
            </summary>
        </member>
        <member name="P:MS.Swi.CommonStorage.Storage.ContentDefinition.ObjectPermissions">
            <summary>
            The permission flags for the logical object
            </summary>
        </member>
        <member name="P:MS.Swi.CommonStorage.Storage.ContentDefinition.ObjectName">
            <summary>
            The logical name of the referenced object
            </summary>
        </member>
        <member name="T:MS.Swi.CommonStorage.Storage.ContentDefinition.OperationType">
            <summary>
            Private enumeration defining the type of operation being considered for permissions checks
            </summary>
        </member>
        <member name="T:MS.Swi.CommonStorage.StorageGroup">
            <summary>
            Helper class providing access to the Common Storage shared objects table
            
            This is used to provide a cleaner, and simpler interface for classes which are only
            concerned with their own Common Storage shared objects, and will not be looking at objects
            used by other modules 
            </summary>
        </member>
        <member name="M:MS.Swi.CommonStorage.StorageGroup.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:MS.Swi.CommonStorage.StorageGroup.#ctor(System.String)">
            <summary>
            Construct the StorageGroup with an initial identifier
            </summary>
            <param name="identifier">The identifier to use</param>
        </member>
        <member name="M:MS.Swi.CommonStorage.StorageGroup.IdentifiedName(System.String)">
            <summary>
            Accessor to construct a string, based on the logical name, that should be
            used for all references in the Common Storage space. 
            </summary>
            <param name="name">Base Logical variable name</param>
            <returns>Constructed global name</returns>
        </member>
        <member name="M:MS.Swi.CommonStorage.StorageGroup.Delete(System.String)">
            <summary>
            Delete the specified logical name from common storage. Note that this is only designed to
            work for variables created as part of the VariableWrapper. While it may work for other variables,
            it will only do so if the identifier is the same, and AccessAnyDelete is set as an access flag. 
            
            In general, anything dealing with variables not defined as part of the VariableWrapper should be
            done via CommonStorage directly.
            
            NOTE: Permission failures will generate an ObjectAccessViolation event from CommonStorage,
            although not an exception.
            
            </summary>
            <param name="name">Base Logical variable name</param>
            <returns>True if the object was deleted, false if not</returns>
        </member>
        <member name="M:MS.Swi.CommonStorage.StorageGroup.Clear">
            <summary>
            Delete all logical objects owned by the StorageWrapper, if they can be deleted.
            </summary>
        </member>
        <member name="M:MS.Swi.CommonStorage.StorageGroup.Exists(System.String)">
            <summary>
            Determine if the specified logical name exists in common storage. Note that this is only designed to
            work for variables created as part of the VariableWrapper. While it may work for other variables,
            it will only do so if the identifier is the same
            </summary>
            <param name="name">Base logical variable name</param>
            <returns>True if the variable exists, false if not</returns>
        </member>
        <member name="M:MS.Swi.CommonStorage.StorageGroup.Create(System.String,System.Object)">
            <summary>
            Simplest variable create, which creates an object in Common Storage based on the
            base name, with the access values set to AccessDefault, and the type restrictions
            based on the initial value
            </summary>
            <param name="name">Base logical name</param>
            <param name="initialValue">Initial value of the logical object</param>
        </member>
        <member name="M:MS.Swi.CommonStorage.StorageGroup.Create(System.String,MS.Swi.CommonStorage.AccessPermissions,System.Object)">
            <summary>
            Create a logical object in Common Storage based on the base name. Note that the
            type restriction will be inferred from the type of the value
            </summary>
            <param name="name">The base name</param>
            <param name="permissions">The permissions to apply</param>
            <param name="initialValue">The initial value</param>
        </member>
        <member name="M:MS.Swi.CommonStorage.StorageGroup.Create(System.String,System.Type,MS.Swi.CommonStorage.AccessPermissions,System.Object)">
            <summary>
            Create a fully specified logical object in Common Storage
            </summary>
            <param name="name">The base name</param>
            <param name="restriction">The type restrictions (or null, for no restrictions)</param>
            <param name="permissions">The permissions to apply</param>
            <param name="initialValue">The initial value</param>
        </member>
        <member name="P:MS.Swi.CommonStorage.StorageGroup.Identifier">
            <summary>
            Method for getting/setting the identification string that is used to 
            access the data. Please note that modifying the identifier after Common Storage elements
            have been created with this StorageGroup will cause problems in finding those elements later.
            </summary>
        </member>
        <member name="P:MS.Swi.CommonStorage.StorageGroup.Item(System.String)">
            <summary>
            Indexing function to provide access to get/set variables in the Common Storage space.
            
            If the variable does not exist, this version (unlike the version in Common Storage) will
            throw an exception, as we do NOT expect to find that variables don't exist.
            </summary>
        </member>
        <member name="T:MS.Swi.CommonStorage.DataUpdateEventArgs">
            <summary>
            DataUpdate Event Argument Definition
            </summary>
        </member>
        <member name="M:MS.Swi.CommonStorage.DataUpdateEventArgs.#ctor(MS.Swi.CommonStorage.DataUpdateEventArgs.UpdateType,System.String)">
            <summary>
            Event Arguments
            </summary>
            <param name="type">The type of event</param>
            <param name="logicalName">The logical object involved</param>
        </member>
        <member name="P:MS.Swi.CommonStorage.DataUpdateEventArgs.Type">
            <summary>
            Property to return the event Type
            </summary>
        </member>
        <member name="P:MS.Swi.CommonStorage.DataUpdateEventArgs.ObjectName">
            <summary>
            Property to return the name of the logical object
            </summary>
        </member>
        <member name="T:MS.Swi.CommonStorage.DataUpdateEventArgs.UpdateType">
            <summary>
            Event Types
            </summary>
        </member>
        <member name="F:MS.Swi.CommonStorage.DataUpdateEventArgs.UpdateType.ObjectCreated">
            <summary>
            Report the creation of a common storage logical object
            </summary>
        </member>
        <member name="F:MS.Swi.CommonStorage.DataUpdateEventArgs.UpdateType.ObjectDeleted">
            <summary>
            Report the deletion of a common storage logical object
            </summary>
        </member>
        <member name="F:MS.Swi.CommonStorage.DataUpdateEventArgs.UpdateType.ObjectModified">
            <summary>
            Report the modification of a common storage logical object
            </summary>
        </member>
        <member name="F:MS.Swi.CommonStorage.DataUpdateEventArgs.UpdateType.ObjectAccessViolation">
            <summary>
            Report that an illegal attempt to modify or delete a common storage logical object occurred
            </summary>
        </member>
        <member name="F:MS.Swi.CommonStorage.DataUpdateEventArgs.UpdateType.AllObjectsDeleted">
            <summary>
            Report that all objects in the storage have been deleted
            </summary>
        </member>
        <member name="T:MS.Swi.CommonStorage.DataUpdateEventHandler">
            <summary>
            DataUpdateEvent Handler Definition
            </summary>
        </member>
        <member name="T:MS.Swi.Mitm.IConstRemoteClassDefinition">
            <summary>
            The read-only (i.e. true const) interface for a RemoteClassDefinition
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.IConstRemoteClassDefinition.ToXml(System.Xml.XmlDocument)">
            <summary>
            Export the definition to Xml
            </summary>
            <param name="owningDocument">The owning document for the XmlNode</param>
            <returns>The constructed Xml node</returns>
        </member>
        <member name="M:MS.Swi.Mitm.IConstRemoteClassDefinition.GetArgumentList">
            <summary>
            Extract the arguments as an argument list
            </summary>
            <returns>A newly created array of strings which is the argument list</returns>
        </member>
        <member name="M:MS.Swi.Mitm.IConstRemoteClassDefinition.AsDefinitionString(System.Char)">
            <summary>
            Extract the entire definition as a definition string for passing to the instrumentation
            </summary>
            <param name="separator">The separator character to use</param>
            <returns>The constructed string</returns>
        </member>
        <member name="M:MS.Swi.Mitm.IConstRemoteClassDefinition.Clone">
            <summary>
            Create a duplicate of the object as a remote class definition
            </summary>
            <returns>The duplicate as a remote class definition</returns>
        </member>
        <member name="P:MS.Swi.Mitm.IConstRemoteClassDefinition.Classname">
            <summary>
            The fully qualified name of the remote class
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.IConstRemoteClassDefinition.Arguments">
            <summary>
            Read-only access to the arguments
            </summary>
        </member>
        <member name="T:MS.Swi.Mitm.RemoteClassDefinition">
            <summary>
            The full definition of a MitmClass, including the fully qualified classname and the arguments to 
            the class on initialization
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.RemoteClassDefinition.#ctor">
            <summary>
            Define a remote class
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.RemoteClassDefinition.#ctor(System.String)">
            <summary>
            Define a remote class with no arguments
            </summary>
            <param name="classname">The name of the IMitmRemoteClass class</param>
        </member>
        <member name="M:MS.Swi.Mitm.RemoteClassDefinition.#ctor(System.String,System.String[])">
            <summary>
            Define a remote class
            </summary>
            <param name="classname">The name of the IMitmRemoteClass class</param>
            <param name="arguments">The arguments for the initialization of that class</param>
        </member>
        <member name="M:MS.Swi.Mitm.RemoteClassDefinition.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Define a remote class
            </summary>
            <param name="classname">The name of the IMitmRemoteClass class</param>
            <param name="arguments">The arguments for the initialization of that class</param>
        </member>
        <member name="M:MS.Swi.Mitm.RemoteClassDefinition.#ctor(System.Xml.XmlElement)">
            <summary>
            Define a remote class from Xml
            </summary>
            <param name="definition">The Xml definition</param>
        </member>
        <member name="M:MS.Swi.Mitm.RemoteClassDefinition.FromXml(System.Xml.XmlElement)">
            <summary>
            Set the contents from the Xml definition
            </summary>
            <param name="definition">The Xml definition to use</param>
        </member>
        <member name="M:MS.Swi.Mitm.RemoteClassDefinition.ToXml(System.Xml.XmlDocument)">
            <summary>
            Export the definition to Xml
            </summary>
            <param name="owningDocument">The owning document for the element</param>
            <returns>The constructed Xml element</returns>
        </member>
        <member name="M:MS.Swi.Mitm.RemoteClassDefinition.GetArgumentList">
            <summary>
            Extract the arguments as an argument list
            </summary>
            <returns>A newly created array of strings which is the argument list</returns>
        </member>
        <member name="M:MS.Swi.Mitm.RemoteClassDefinition.AsDefinitionString(System.Char)">
            <summary>
            Extract the entire definition as a definition string for passing to the instrumentation
            </summary>
            <param name="separator">The separator character to use</param>
            <returns>The constructed string</returns>
        </member>
        <member name="M:MS.Swi.Mitm.RemoteClassDefinition.System#ICloneable#Clone">
            <summary>
            Create a deep copy of the remote class definition as an object
            </summary>
            <returns>The duplicate as an object</returns>
        </member>
        <member name="M:MS.Swi.Mitm.RemoteClassDefinition.MS#Swi#Mitm#IConstRemoteClassDefinition#Clone">
            <summary>
            Create a deep copy of the remote class definition as a const remote class definition
            </summary>
            <returns>The duplicate as a const remote class definition</returns>
        </member>
        <member name="M:MS.Swi.Mitm.RemoteClassDefinition.Clone">
            <summary>
            Create a deep copy of the remote class definition
            </summary>
            <returns>The duplicate as a remote class definition</returns>
        </member>
        <member name="P:MS.Swi.Mitm.RemoteClassDefinition.Classname">
            <summary>
            The fully qualified name of the remote class
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.RemoteClassDefinition.ModifiableArguments">
            <summary>
            The arguments to the remote class
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.RemoteClassDefinition.Arguments">
            <summary>
            Read-only access to the arguments
            </summary>
        </member>
        <member name="T:MS.Swi.Data.ElementCharacteristics">
            <summary>
            Specific characteristics about the type
            </summary>
        </member>
        <member name="F:MS.Swi.Data.ElementCharacteristics.None">
            <summary>
            The requisit flag indicating that no flags are set
            </summary>
        </member>
        <member name="F:MS.Swi.Data.ElementCharacteristics.Severable">
            <summary>
            The token can be split at any point into subtokens of the same type
            </summary>
        </member>
        <member name="F:MS.Swi.Data.ElementCharacteristics.Singleton">
            <summary>
            This definition is a singleton, and cannot be subdivided except by a Transformation
            </summary>
        </member>
        <member name="F:MS.Swi.Data.ElementCharacteristics.ValidAsAncestor">
            <summary>
            The token can validly be treated as its parent. Note that this
            is recursive
            </summary>
        </member>
        <member name="F:MS.Swi.Data.ElementCharacteristics.Encapsulation">
            <summary>
            This definition is an encapsulation. 
            </summary>
        </member>
        <member name="F:MS.Swi.Data.ElementCharacteristics.Token">
            <summary>
            This definition is a token
            </summary>
        </member>
        <member name="F:MS.Swi.Data.ElementCharacteristics.Specific">
            <summary>
            This definition is a specific definition, and should not be included by default by 
            analyzers
            </summary>
        </member>
        <member name="T:MS.Swi.Data.ElementDefinition">
            <summary>
            The token definition class defines the characteristics of each specific token type
            </summary>
        </member>
        <member name="F:MS.Swi.Data.ElementDefinition.BaseTokenDefinitionName">
            <summary>
            The name of the base FCL type
            </summary>
        </member>
        <member name="F:MS.Swi.Data.ElementDefinition.ContainerTokenDefinitionName">
            <summary>
            The name of the special FCL heterogenous container type
            </summary>
        </member>
        <member name="F:MS.Swi.Data.ElementDefinition.ContainerTokenNativeType">
            <summary>
            The type of the special FCL heterogenous container native representation
            </summary>
        </member>
        <member name="F:MS.Swi.Data.ElementDefinition.BaseTokenDefinition">
            <summary>
            The base FCL Definition for data
            </summary>
        </member>
        <member name="F:MS.Swi.Data.ElementDefinition.ContainerTokenDefinition">
            <summary>
            A specialized FCL Definition for Containers
            </summary>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinition.#ctor(System.String,System.Type,MS.Swi.Data.ElementCharacteristics)">
            <summary>
            Constructor for the token definition
            </summary>
            <param name="tokenName">The name of the token</param>
            <param name="nativeType">The native type the token represents</param>
            <param name="characteristics">The characteristics of this type of token</param>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinition.#ctor(System.String,System.String,MS.Swi.Data.ElementCharacteristics)">
            <summary>
            Constructor for the token definition
            </summary>
            <param name="tokenName">The name of the token</param>
            <param name="baseName">The name of the token this token refines</param>
            <param name="characteristics">The characteristics of this type of token</param>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinition.#ctor(System.String,MS.Swi.Data.ElementCharacteristics)">
            <summary>
            Constructor for the encapsulation definition definition
            </summary>
            <param name="tokenName">The name of the token</param>
            <param name="characteristics">The characteristics of this type of token</param>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinition.#ctor(System.Xml.XmlElement)">
            <summary>
            Construct a token definition from an Xml node. Note that it currently only will recognize
            types in the System or current assembly for the associated type. This will change.
            </summary>
            <param name="xmlDefinition">The defined node</param>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinition.CalculateHashCode">
            <summary>
            Calculate the internal hash code
            </summary>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinition.ValidateCharacteristics">
            <summary>
            Validate the characteristics, and fill in any defaults that are blank
            </summary>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinition.GetHashCode">
            <summary>
            Get a hash code for the token definition
            </summary>
            <returns>The calculated hash</returns>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinition.Equals(System.Object)">
            <summary>
            Determine if two objects are equivalent token definitions
            </summary>
            <param name="obj">The other object</param>
            <returns>True if it is an equivalent definition, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinition.ToXmlElement(System.Xml.XmlDocument)">
            <summary>
            Create an Xml element that defines the definition, for the specified owning document
            </summary>
            <param name="owningDocument">The owning document</param>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinition.HasCharacteristic(MS.Swi.Data.ElementCharacteristics)">
            <summary>
            Does the element have the specified characteristic? If the characteristic is a combination of multiple
            characteristics, it will return true only if all of the characteristics are a match
            </summary>
            <param name="characteristic">The characteristic (or characteristics) to check for</param>
            <returns>True if there is an exact match, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinition.IsRefinementOf(System.String)">
            <summary>
            Determine if one token is a refinement of another. Note that we allow for a type
            to be a refinement of itself
            </summary>
            <param name="definitionName">The base definition name</param>
            <returns>True if the definition is a refinement of the definitionName</returns>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinition.CanDescendFrom(System.String)">
            <summary>
            Determine if a token of this type can descend from the specified definition. This handles
            checking for ancestral equivalences (i.e. it uses CanBeTreatedAs)
            </summary>
            <param name="definitionName">The base definition name</param>
            <returns>True if the this definition can descend from the definitionName</returns>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinition.CanBeTreatedAs(System.String)">
            <summary>
            Determine if one token can be treated as another. Note that it is always valid to ask if you
            can be treated as yourself. Note that this is MORE restrictive than checking for inheritance,
            and exists for analyzers that match particular types. In normal usage, the IsRefinementOf 
            accessor is more likely to be the desired accessor
            </summary>
            <param name="baseDefinitionName">The base definition name</param>
            <returns>True if this definition can be treated as the baseDefinitionName</returns>
        </member>
        <member name="P:MS.Swi.Data.ElementDefinition.NativeType">
            <summary>
            The NativeType
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ElementDefinition.Ancestor">
            <summary>
            The token definition instance that this definition refines
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ElementDefinition.Refines">
            <summary>
            The token that this token refines (i.e. XMLString refines String which refines ByteArray)
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ElementDefinition.Defines">
            <summary>
            The token name
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ElementDefinition.Characteristics">
            <summary>
            The known characteristics of this type of token
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ElementDefinition.IsSpecific">
            <summary>
            Whether or not this definition is included only if specifically requested
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ElementDefinition.IsGeneral">
            <summary>
            Whether or not this definition is included by default
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ElementDefinition.IsTokenDefinition">
            <summary>
            Whether or not this definition defines a token
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ElementDefinition.IsEncapsulationDefinition">
            <summary>
            Whether or not this token definition defines an encapsulation
            </summary>
        </member>
        <member name="T:MS.Swi.Data.IConstElementDefinitions">
            <summary>
            The const (i.e. true Read Only) interface definition for ElementDefinitions
            </summary>
        </member>
        <member name="M:MS.Swi.Data.IConstElementDefinitions.IsTheSameAs(MS.Swi.Data.IConstElementDefinitions)">
            <summary>
            Is this set of definitions the same as the other set of definitions
            </summary>
            <param name="otherDefinitions">The comparison set of definitions</param>
            <returns>True if they are the same, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.IConstElementDefinitions.ToXmlElement(System.Xml.XmlDocument)">
            <summary>
            Create an Xml element that defines the definitions, for the specified owning document
            </summary>
            <param name="owningDocument">The owning document</param>
        </member>
        <member name="M:MS.Swi.Data.IConstElementDefinitions.Find(System.String)">
            <summary>
            Find a registered token definition
            </summary>
            <param name="tokenName">The name of the token definition</param>
            <returns>The token definition, or null if it could not be found</returns>
        </member>
        <member name="M:MS.Swi.Data.IConstElementDefinitions.Contains(System.String)">
            <summary>
            Determine if the token definition is contained in this collection
            </summary>
            <param name="tokenName">The name to check</param>
            <returns>True if it is contained, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.IConstElementDefinitions.Clone">
            <summary>
            Return a clone of the IConstElementDefinitions as a new ElementDefinitions object
            </summary>
            <returns>The new ElementDefinitions as ElementDefinitions</returns>
        </member>
        <member name="P:MS.Swi.Data.IConstElementDefinitions.Count">
            <summary>
            The number of definitions 
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstElementDefinitions.Definitions">
            <summary>
            Enumerate the definitions
            </summary>
        </member>
        <member name="T:MS.Swi.Data.ElementDefinitions">
            <summary>
            The token definitions class serves as an encapsulation of a set of registered token
            definitions
            </summary>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinitions.LoadDefinitions(System.String)">
            <summary>
            Load the entire set of token definitions. The filename will be searched for first as given,
            then in the local directory, and then in the FCL installation directory.
            </summary>
            <param name="fileName">The filename for the Xml file containing the definitions</param>
            <returns>The definition set</returns>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinitions.LoadDefinitions(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Load a set of definitions based on a specific whitelist and blacklist.  The filename will be searched for first as given,
            then in the local directory, and then in the FCL installation directory.
            </summary>
            <param name="fileName">The filename for the Xml file containing the definitions</param>
            <param name="whitelist">Whitelisted definitions (regular expressions acceptable), or null</param>
            <param name="blacklist">Blacklisted definitions (regular expressions acceptable), or null</param>
            <returns>The definition set</returns>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinitions.LoadDefinitions(System.Xml.XmlElement)">
            <summary>
            Load the entire set of token definitions
            </summary>
            <param name="tokenDefinitions">The Xml node containing the token definitions, defined by </param>
            <returns>The definition set</returns>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinitions.LoadDefinitions(System.Xml.XmlElement,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Load a set of definitions based on a specific whitelist and blacklist
            </summary>
            <param name="tokenDefinitions">The Xml node containing the token definitions, defined by </param>
            <param name="whitelist">Whitelisted definitions (regular expressions acceptable), or null</param>
            <param name="blacklist">Blacklisted definitions (regular expressions acceptable), or null</param>
            <returns>The definition set</returns>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinitions.#ctor">
            <summary>
            Create the basic token definition table, consisting only of the base data type
            </summary>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinitions.#ctor(MS.Swi.Data.ElementDefinitions)">
            <summary>
            A private copy constructor for efficient handling of the clone
            </summary>
            <param name="definitions">The source definitions</param>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinitions.Add(MS.Swi.Data.ElementDefinition)">
            <summary>
            Add a token definition to the table of token definitions
            </summary>
            <param name="definition">The token definition</param>
            <returns>True if the definition is now in the set, and false if it conflicts with an existing definition</returns>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinitions.Add(MS.Swi.Data.ElementDefinitions)">
            <summary>
            Add another set of definitions into the current set
            </summary>
            <param name="definitions">The token definitions to add</param>
            <returns>True if the definitions could be added, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinitions.RemoveOrphans">
            <summary>
            Remove any orphaned definitions from the set. This should be called after
            all token definitions have been loaded into a set, and it will prune out any
            definitions whose ancestors cannot be traced.
            </summary>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinitions.Clear">
            <summary>
            Clear the set of registered token definitions
            </summary>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinitions.IsTheSameAs(MS.Swi.Data.IConstElementDefinitions)">
            <summary>
            Is this set of token definitions the same as the comparison set
            </summary>
            <param name="otherDefinitions">The comparison definitions</param>
            <returns>True if they are the same, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinitions.ToXmlElement(System.Xml.XmlDocument)">
            <summary>
            Create an Xml element that defines the definitions, for the specified owning document
            </summary>
            <param name="owningDocument">The owning document</param>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinitions.Find(System.String)">
            <summary>
            Find a registered token definition
            </summary>
            <param name="tokenName">The name of the token definition</param>
            <returns>The token definition, or null if it could not be found</returns>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinitions.Contains(System.String)">
            <summary>
            Determine if the token definition is contained in this collection
            </summary>
            <param name="tokenName">The name to check</param>
            <returns>True if it is contained, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinitions.GetEnumerator">
            <summary>
            The enumerator for iteration
            </summary>
            <returns>An enumerator</returns>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinitions.System#ICloneable#Clone">
            <summary>
            Return a clone of the ElementDefinitions
            </summary>
            <returns>The new ElementDefinitions as an object</returns>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinitions.Clone">
            <summary>
            Return a clone of the ElementDefinitions
            </summary>
            <returns>The new ElementDefinitions as ElementDefinitions</returns>
        </member>
        <member name="P:MS.Swi.Data.ElementDefinitions.Count">
            <summary>
            The number of definitions 
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ElementDefinitions.Definitions">
            <summary>
            An enumerator for the set of definitions
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\libd\i386\CTFInstallationManager.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CTFInstallationManager</name>
    </assembly>
    <members>
        <member name="T:MS.Swi.InstallationManagementAttribute">
            <summary>
            The installation management attribute is used to force the integration with the FCL, as well
            as (optionally) in XCopy deployed tools, to indicate that all FCL files should be found relative to the
            installation directory of the running tool. The default is not to be an XCopy deployment
            </summary>
        </member>
        <member name="P:MS.Swi.InstallationManagementAttribute.IsXCopyDeployment">
            <summary>
            This property should only be set by the actual application using the FCL (and will in fact
            be ignored in other cases), and is used to indicate a tool that was designed to run in XCopy 
            Deployment mode. This will short-circuit any use of the registry, and instead load everything locally
            </summary>
        </member>
        <member name="T:MS.Swi.InstallationManagementImplementation">
            <summary>
            The InstallationManagementImplementation class provides installation management functionality.
            However, it is not directly invoked, rather it is used by the CTF Core wrapper class, to allow
            easy access to all of the code, without a compile time bounding
            </summary>
        </member>
        <member name="M:MS.Swi.InstallationManagementImplementation.IsXCopyDeployment">
            <summary>
            Whether or not the executing FCL based tool is configured for XCopy deployment
            </summary>
            <returns>True if the entry application specified XCopy deployment, or if no calling entry application can be found AND there is no configured FCL directory on the machine</returns>
        </member>
        <member name="M:MS.Swi.InstallationManagementImplementation.IncrementInstallationCount">
            <summary>
            Increment the installation count
            </summary>
            <returns>The installation count, or 0xffffffff if an error occurred</returns>
        </member>
        <member name="M:MS.Swi.InstallationManagementImplementation.DecrementInstallationCount">
            <summary>
            Decrement the installation count
            
            </summary>
            <returns>The installation count, or 0xffffffff if an error occurred</returns>
        </member>
        <member name="M:MS.Swi.InstallationManagementImplementation.SetDirectory(System.String)">
            <summary>
            Set the directory associated with this assembly 
            </summary>
            <param name="directoryPath">The directory path</param>
            <returns>True if it worked, false if not</returns>
        </member>
        <member name="M:MS.Swi.InstallationManagementImplementation.GetDirectory">
            <summary>
            Get the directory associated with the assembly, or null if it doesn't exist
            </summary>
            <returns>The associated directory, or null if it wasn't set</returns>
        </member>
        <member name="M:MS.Swi.InstallationManagementImplementation.ClearDirectory">
            <summary>
            Clear the directory assigned to this installation
            </summary>
        </member>
        <member name="M:MS.Swi.InstallationManagementImplementation.RemoveConfigurationInformation">
            <summary>
            Remove the registry information for this installation
            </summary>
        </member>
        <member name="M:MS.Swi.InstallationManagementImplementation.SetKey(System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
            <summary>
            Set the value of a key, making sure that the key change is echoed to the WoW subsystem
            if appropriate.
            
            NOTE: This will cause a real problem if this is run from a 32 bit mode application on
            a 64 bit machine, because the 64 bit registry will get out of sync, so we need to fix that ASAP
            
            HOWEVER, this is currently exclusively run from installer tools, which will run in the
            native CLR
            </summary>
            <param name="valueName">The name of the key value</param>
            <param name="value">The value of the key</param>
            <param name="valueKind">The time to use</param>
        </member>
        <member name="M:MS.Swi.InstallationManagementImplementation.GetWoWRegistryKey">
            <summary>
            The registry key that should be used for this installation
            </summary>
            <returns>The specific installation filename</returns>
        </member>
        <member name="M:MS.Swi.InstallationManagementImplementation.GetRegistryKey">
            <summary>
            The registry key that should be used for this installation
            </summary>
            <returns>The specific installation filename</returns>
        </member>
        <member name="M:MS.Swi.InstallationManagementImplementation.GetRegistrySubKey">
            <summary>
            The registry subkey that should be used for this installation
            </summary>
            <returns>The specific installation filename</returns>
        </member>
        <member name="M:MS.Swi.InstallationManagementImplementation.GetWoWRegistrySubKey">
            <summary>
            The registry subkey that should be used for this installation
            </summary>
            <returns>The specific installation filename</returns>
        </member>
        <member name="M:MS.Swi.InstallationManagementImplementation.HasDirectoryAssigned">
            <summary>
            Determine if the directory has been assigned for this installation
            </summary>
            <returns>True if one was assigned, false if not </returns>
        </member>
        <member name="M:MS.Swi.InstallationManagementImplementation.DefaultStorageDirectory">
            <summary>
            Build the default storage directory for the current version
            </summary>
            <returns>The calculated storage directory</returns>
        </member>
        <member name="M:MS.Swi.InstallationManagementImplementation.InstallFiles(System.String,System.String[])">
            <summary>
            Install files from the source into the managed storage location. Note that this WILL
            overwrite an existing file
            </summary>
            <param name="sourceDirectory">The source directory</param>
            <param name="files">The files (including wildcards) to be installed</param>
            <returns>The set of files installed, or null if they could not all be installed</returns>
        </member>
        <member name="M:MS.Swi.InstallationManagementImplementation.GetFilesInDirectory(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}})">
            <summary>
            Get all of the files in a given directory, and load them into a dictionary, build a set
            of entries that can be constructed when the files are moved
            </summary>
            <param name="directory">The directory</param>
            <param name="fileMask">The file mask to use</param>
            <param name="directoryBase">The base of the directory (for the file set dictionary)</param>
            <param name="fileSet">The complete set of files</param>
        </member>
        <member name="M:MS.Swi.InstallationManagementImplementation.UninstallFiles(System.String[])">
            <summary>
            Uninstall files from the managed store location
            </summary>
            <param name="files">The files (including wildcards) to be removed</param>
            <returns>True if none of the named files remain in the storage, false if an error occurred or no storage is defined</returns>
        </member>
        <member name="M:MS.Swi.InstallationManagementImplementation.RemoveStorageDirectory">
            <summary>
            Remove the storage directory. Note that this does NOT clear the
            storage directory assignment, that must be done separately, but it
            does delete all of the files in the storage directory and remove
            the directory
            </summary>
        </member>
        <member name="M:MS.Swi.InstallationManagementImplementation.RemoveDirectory(System.String)">
            <summary>
            Remove a specified directory
            </summary>
            <param name="directory">The directory</param>
        </member>
        <member name="T:MS.Swi.IComInstallationManagement">
            <summary>
            The COM interface for the installation management
            </summary>
        </member>
        <member name="M:MS.Swi.IComInstallationManagement.GetDirectory">
            <summary>
            Get the directory associated with the assembly, or null if it doesn't exist
            </summary>
            <returns>The associated directory, or null if it wasn't set</returns>
        </member>
        <member name="T:MS.Swi.ComInstallationManagement">
            <summary>
            The COM Installation Management object
            </summary>
        </member>
        <member name="M:MS.Swi.ComInstallationManagement.GetDirectory">
            <summary>
            Get the directory associated with the assembly, or null if it doesn't exist
            </summary>
            <returns>The associated directory, or null if it wasn't set</returns>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\libd\i386\FuzzerManipulations.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FuzzerManipulations</name>
    </assembly>
    <members>
        <member name="T:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics">
            <summary>
            The characteristics of the manipulation
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics.None">
            <summary>
            Special case to indicate that no flags are chosen
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics.Replacement">
            <summary>
            Replaces the source with known data
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics.Mutation">
            <summary>
            Mutates the data
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics.Generation">
            <summary>
            Generates new data algorithmically
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics.Smart">
            <summary>
            The attack is "smart" and is based on some knowledge implicit in the token
            or the manipulation
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics.Dumb">
            <summary>
            The attack is "dumb" and is based on random values
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics.MaintainsState">
            <summary>
            The manipulation maintains state information of some manner, which may or may not
            be required
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics.AcceptsArguments">
            <summary>
            The manipulation takes arguments, which may or may not be required
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics.UsesSizeRestrictions">
            <summary>
            The manipulation uses size restrictions, which may or may not be required
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics.UsesContentRestrictions">
            <summary>
            The manipulation uses size restrictions, which may or may not be required
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics.Structural">
            <summary>
            Modifies the structure of the DataMap in some manner. Note that
            structural manipulations will modify the DataMap and will make repeated fuzzing
            using the same DataMap unwise
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics.Encapsulation">
            <summary>
            Attacks encapsulations
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics.Sequential">
            <summary>
            Is designed to to cycle through an entire set of possiblities
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics.RequiresState">
            <summary>
            The manipulation requires that the state information be maintained for useful results
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics.RequiresArguments">
            <summary>
            The manipulation requires additional arguments
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics.RequiresSizeRestrictions">
            <summary>
            The manipulation requires size restriction information
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics.RequiresContentRestrictions">
            <summary>
            The manipulation requires content restriction information
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics.Exclusive">
            <summary>
            This attack should not be combined with another attack on the same token
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics.Last">
            <summary>
            This attack should be the last attack on the token
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics.SizeIncrease">
            <summary>
            The size of the data can or will increase
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics.SizeDecrease">
            <summary>
            The size of the data can or will decrease
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics.KnownVulnerability">
            <summary>
            An implementation of a known vulnerability
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics.BoundaryAttack">
            <summary>
            An attack on boundary conditions (often based on restrictions)
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics.ConformsToSizeRestrictions">
            <summary>
            The results will conform to size restrictions applied to the token
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics.BreaksSizeRestrictions">
            <summary>
            The results will definitely NOT conform to size restrictions applied to the token
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics.ConformsToContentRestrictions">
            <summary>
            The results will conform to size restrictions applied to the token
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics.BreaksContentRestrictions">
            <summary>
            The results will definitely NOT conform to size restrictions applied to the token
            </summary>
        </member>
        <member name="T:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationResult">
            <summary>
            The possible results of applying a manipulation
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationResult.Illegal">
            <summary>
            An illegal (or unset) ManipulationResult
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationResult.Unchanged">
            <summary>
            Nothing was changed
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationResult.ContentsChanged">
            <summary>
            The contents of one or more tokens were altered
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationResult.StructureChanged">
            <summary>
            The structure of the DataMap was altered
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationResult.SequentialManipulationComplete">
            <summary>
            The sequential manipulation has exhausted its set of possible sequences, and will not
            generate new changes
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationResult.Cancelled">
            <summary>
            The manipulation was cancelled before it was run. This should always be seen paired with Unchanged
            </summary>
        </member>
        <member name="T:MS.Swi.FuzzerCommonLibrary.Manipulations.IFuzzerManipulationDetails">
            <summary>
            An read-only interface to the details of a manipulation
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Manipulations.IFuzzerManipulationDetails.Characteristics">
            <summary>
            The characteristics of the manipulation
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Manipulations.IFuzzerManipulationDetails.TargetDefinitionName">
            <summary>
            The name of the target definition (for specific manipulations)
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Manipulations.IFuzzerManipulationDetails.IsUniversal">
            <summary>
            Whether or not this is a Universal manipulation (i.e. one that applies to all
            definitions)
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Manipulations.IFuzzerManipulationDetails.From">
            <summary>
            The name of the transformation that provided the data (or "" if no transformation is involved)
            </summary>
        </member>
        <member name="T:MS.Swi.FuzzerCommonLibrary.Manipulations.FuzzerManipulationAttribute">
            <summary>
            The FuzzerManipulationAttribute defines the characteristics of any given manipulation
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.FuzzerManipulationAttribute.Get(System.Type)">
            <summary>
            Get the ManipulationAttribute for a class if it implements IFuzzerManipulation and has the
            correct attribute(s) defined
            </summary>
            <param name="classType">The type to check</param>
            <returns>The analyzer attribute(s)</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.FuzzerManipulationAttribute.#ctor(System.String)">
            <summary>
            Constructor to create a specific manipulation attribute
            </summary>
            <param name="targetDefinitionName">The name of the targeted token definition</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.FuzzerManipulationAttribute.#ctor">
            <summary>
            Constructor to create a universal manipulation attribute
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Manipulations.FuzzerManipulationAttribute.Characteristics">
            <summary>
            The characteristics of the manipulation
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Manipulations.FuzzerManipulationAttribute.TargetDefinitionName">
            <summary>
            The name of the target definition (for specific manipulations)
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Manipulations.FuzzerManipulationAttribute.IsUniversal">
            <summary>
            Whether or not this is a Universal manipulation (i.e. one that applies to all
            definitions)
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Manipulations.FuzzerManipulationAttribute.From">
            <summary>
            The name of the transformation that provided the data (or "" if no transformation is involved)
            </summary>
        </member>
        <member name="T:MS.Swi.FuzzerCommonLibrary.Manipulations.IFuzzerManipulation">
            <summary>
            IFuzzerManipulation
            
            	Any object which implements the IFuzzerManipulation interface AND defines a FuzzerManipulationAttribute
            	will be usable by the strategy library. 
            	<br/><br/>
            	IMPORTANT: Any state information must be kept in the manipulationState object, NOT in the IFuzzerManipulation object.
            	If state information is required, defaults should be populated if manipulationState is null on entry.
            	Only a default constructor should be defined.
            		
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.IFuzzerManipulation.Manipulate(MS.Swi.Data.IConstDataContents,System.Object@,System.Random,System.Object@,System.String[])">
            <summary>
            Manipulate the target token, changing the contents of the token directly as applicable
            </summary>
            <param name="targetContents">The contents being manipulated</param>
            <param name="targetObject">The value of those contents (the current value is passed in, the new value is passed out)</param>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="manipulationState">The manipulation state to use (or null)</param>
            <param name="manipulationParameters">The parameters for the manipulation if any</param>
            <returns>The results of the manipulation</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.IFuzzerManipulation.ManipulateStructure(MS.Swi.Data.DataMap,MS.Swi.Data.IConstToken,System.Random,System.Object@,System.String[])">
            <summary>
            Manipulate the structure of the DataMap, altering the structure of the DataMap, and focused on a 
            particular token
            </summary>
            <param name="targetDataMap">The data map being altered</param>
            <param name="targetToken">The token the attack is focused on</param>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="manipulationState">The manipulation state to use (or null)</param>
            <param name="manipulationParameters">The parameters for the manipulation if any</param>
            <returns>The results of the manipulation</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.IFuzzerManipulation.ManipulateEncapsulation(MS.Swi.Data.IConstEncapsulation,System.Collections.Generic.Dictionary{MS.Swi.Data.IConstDataContents,System.Object},System.Random,System.Object@,System.String[])">
            <summary>
            Manipulate the contents of an encapsulation. Note that the results will be extracted from the
            provided dictionary when the manipulation is complete.
            </summary>
            <param name="targetEncapsulation">The encapsulation being attacked</param>
            <param name="contents">The dictionary of all of the contents of the encapsulation</param>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="manipulationState">The manipulation state to use (or null)</param>
            <param name="manipulationParameters">The parameters for the manipulation if any</param>
            <returns>The results of the manipulation</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.IFuzzerManipulation.ManipulateEncapsulationStructure(MS.Swi.Data.DataMap,MS.Swi.Data.IConstEncapsulation,System.Random,System.Object@,System.String[])">
            <summary>
            Manipulate the contents of an encapsulation. Note that the results will be extracted from the
            provided dictionary when the manipulation is complete.
            </summary>
            <param name="targetDataMap">The data map being altered</param>
            <param name="targetEncapsulation">The encapsulation being attacked</param>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="manipulationState">The manipulation state to use (or null)</param>
            <param name="manipulationParameters">The parameters for the manipulation if any</param>
            <returns>The results of the manipulation</returns>
        </member>
        <member name="T:MS.Swi.FuzzerCommonLibrary.Manipulations.DataManipulation">
            <summary>
            Parent class for manipulations which only attack the contents of a token
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.DataManipulation.Manipulate(MS.Swi.Data.IConstDataContents,System.Object@,System.Random,System.Object@,System.String[])">
            <summary>
            Manipulate the target token, changing the contents of the token directly as applicable
            </summary>
            <param name="targetContents">The contents being manipulated</param>
            <param name="targetObject">The value of those contents (the current value is passed in, the new value is passed out)</param>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="manipulationState">The manipulation state to use (or null)</param>
            <param name="manipulationParameters">The parameters for the manipulation if any</param>
            <returns>The results of the manipulation</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.DataManipulation.ManipulateStructure(MS.Swi.Data.DataMap,MS.Swi.Data.IConstToken,System.Random,System.Object@,System.String[])">
            <summary>
            Manipulate the structure of the DataMap, altering the structure of the DataMap, and focused on a 
            particular token
            </summary>
            <param name="targetDataMap">The data map being altered</param>
            <param name="targetToken">The token that is the focus of the attack</param>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="manipulationState">The manipulation state to use (or null)</param>
            <param name="manipulationParameters">The parameters for the manipulation if any</param>
            <returns>The results of the manipulation</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.DataManipulation.ManipulateEncapsulation(MS.Swi.Data.IConstEncapsulation,System.Collections.Generic.Dictionary{MS.Swi.Data.IConstDataContents,System.Object},System.Random,System.Object@,System.String[])">
            <summary>
            Manipulate the contents of an encapsulation. Note that the results will be extracted from the
            provided dictionary when the manipulation is complete.
            </summary>
            <param name="targetEncapsulation">The encapsulation being attacked</param>
            <param name="contents">The dictionary of all of the contents of the encapsulation</param>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="manipulationState">The manipulation state to use (or null)</param>
            <param name="manipulationParameters">The parameters for the manipulation if any</param>
            <returns>The results of the manipulation</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.DataManipulation.ManipulateEncapsulationStructure(MS.Swi.Data.DataMap,MS.Swi.Data.IConstEncapsulation,System.Random,System.Object@,System.String[])">
            <summary>
            Manipulate the structure of an encapsulation 
            </summary>
            <param name="targetDataMap">The data map being altered</param>
            <param name="targetEncapsulation">The encapsulation being attacked</param>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="manipulationState">The manipulation state to use (or null)</param>
            <param name="manipulationParameters">The parameters for the manipulation if any</param>
            <returns>The results of the manipulation</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.DataManipulation.CalculateValidSizeRangeInBytes(System.Random,MS.Swi.Data.IConstDataContents,System.Object,System.Boolean,System.Boolean,System.UInt32@,System.UInt32@)">
            <summary>
            Helper function to calculate a valid size range (in bytes) for an object, taking the restrictions on both
            the data and the manipulation into account. If no restrictions apply, minimum will be zero, and the maximum
            will be a random value between 1 and 1 megabyte.
            </summary>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="sourceContents">The source data contents</param>
            <param name="currentObject">The current object</param>
            <param name="allowSizeDecrease">Whether objects should be allowed to decrease in size</param>
            <param name="allowSizeIncrease">Whether objects should be allowed to increase in size</param>
            <param name="minimumSize">The calculated minimum size</param>
            <param name="maximumSize">The calculated maximum size</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.DataManipulation.CalculateValidSizeRangeInElements(System.Random,MS.Swi.Data.IConstDataContents,System.Object,System.Boolean,System.Boolean,System.UInt32@,System.UInt32@)">
            <summary>
            Helper function to calculate a valid size range (in bytes) for an object, taking the restrictions on both
            the data and the manipulation into account.
            
            Note that if we cannot determine the current size of the object, we
            will return the current size in elements.
            </summary>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="sourceContents">The source data contents</param>
            <param name="currentObject">The current object</param>
            <param name="allowSizeDecrease">Whether objects should be allowed to decrease in size</param>
            <param name="allowSizeIncrease">Whether objects should be allowed to increase in size</param>
            <param name="minimumSize">The calculated minimum size</param>
            <param name="maximumSize">The calculated maximum size</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.DataManipulation.CalculateTargetSizeInBytes(System.Random,MS.Swi.Data.IConstDataContents,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Helper function to calculate the target size of the resulting object of the manipulation, conforming to
            restrictions and characteristics. Note that if we cannot determine the current size of the object, we will
            ignore the size increase and decrease flags.
            </summary>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="sourceContents">The source data contents</param>
            <param name="currentObject">The current object</param>
            <param name="allowSizeDecrease">Whether objects should be allowed to decrease in size</param>
            <param name="allowSizeIncrease">Whether objects should be allowed to increase in size</param>
            <returns>The calculated size in bytes</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.DataManipulation.CalculateTargetSizeInElements(System.Random,MS.Swi.Data.IConstDataContents,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Helper function to calculate the target size of the resulting object of the manipulation, conforming to
            restrictions and characteristics. Note that if we cannot determine the current size of the object, we
            will return the current size in elements.
            </summary>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="sourceContents">The source data contents</param>
            <param name="currentObject">The current object</param>
            <param name="allowSizeDecrease">Whether objects should be allowed to decrease in size</param>
            <param name="allowSizeIncrease">Whether objects should be allowed to increase in size</param>
            <returns>The calculated size in terms of the number of elements</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.DataManipulation.CalculateMaximumNumberOfAdditionalElements(System.Random,MS.Swi.Data.IConstDataContents,System.Object)">
            <summary>
            Calculate the maximum number of elements we could add, taking the size restrictions and current contents
            into account
            </summary>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="sourceContents">The source data contents</param>
            <param name="currentObject">The current object</param>
            <returns>The maximum number of additional elements</returns>
        </member>
        <member name="T:MS.Swi.FuzzerCommonLibrary.Manipulations.StructuralManipulation">
            <summary>
            Parent class for manipulations which only attack the structure of the DataMap, focused
            around a specified token
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.StructuralManipulation.Manipulate(MS.Swi.Data.IConstDataContents,System.Object@,System.Random,System.Object@,System.String[])">
            <summary>
            Manipulate the target token, changing the contents of the token directly as applicable
            </summary>
            <param name="targetContents">The contents being manipulated</param>
            <param name="targetObject">The value of those contents (the current value is passed in, the new value is passed out)</param>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="manipulationState">The manipulation state to use (or null)</param>
            <param name="manipulationParameters">The parameters for the manipulation if any</param>
            <returns>The results of the manipulation</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.StructuralManipulation.ManipulateStructure(MS.Swi.Data.DataMap,MS.Swi.Data.IConstToken,System.Random,System.Object@,System.String[])">
            <summary>
            Manipulate the structure of the DataMap, altering the structure of the DataMap, and focused on a 
            particular token
            </summary>
            <param name="targetDataMap">The data map being altered</param>
            <param name="targetToken">The token that is the focus of the attack</param>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="manipulationState">The manipulation state to use (or null)</param>
            <param name="manipulationParameters">The parameters for the manipulation if any</param>
            <returns>The results of the manipulation</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.StructuralManipulation.ManipulateEncapsulation(MS.Swi.Data.IConstEncapsulation,System.Collections.Generic.Dictionary{MS.Swi.Data.IConstDataContents,System.Object},System.Random,System.Object@,System.String[])">
            <summary>
            Manipulate the contents of an encapsulation. Note that the results will be extracted from the
            provided dictionary when the manipulation is complete.
            </summary>
            <param name="targetEncapsulation">The encapsulation being attacked</param>
            <param name="contents">The dictionary of all of the contents of the encapsulation</param>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="manipulationState">The manipulation state to use (or null)</param>
            <param name="manipulationParameters">The parameters for the manipulation if any</param>
            <returns>The results of the manipulation</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.StructuralManipulation.ManipulateEncapsulationStructure(MS.Swi.Data.DataMap,MS.Swi.Data.IConstEncapsulation,System.Random,System.Object@,System.String[])">
            <summary>
            Manipulate the structure of an encapsulation 
            </summary>
            <param name="targetDataMap">The data map being altered</param>
            <param name="targetEncapsulation">The encapsulation being attacked</param>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="manipulationState">The manipulation state to use (or null)</param>
            <param name="manipulationParameters">The parameters for the manipulation if any</param>
            <returns>The results of the manipulation</returns>
        </member>
        <member name="T:MS.Swi.FuzzerCommonLibrary.Manipulations.EncapsulationManipulation">
            <summary>
            Parent class for manipulations which attack the contents of a manipulation
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.EncapsulationManipulation.Manipulate(MS.Swi.Data.IConstDataContents,System.Object@,System.Random,System.Object@,System.String[])">
            <summary>
            Manipulate the target token, changing the contents of the token directly as applicable
            </summary>
            <param name="targetContents">The contents being manipulated</param>
            <param name="targetObject">The value of those contents (the current value is passed in, the new value is passed out)</param>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="manipulationState">The manipulation state to use (or null)</param>
            <param name="manipulationParameters">The parameters for the manipulation if any</param>
            <returns>The results of the manipulation</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.EncapsulationManipulation.ManipulateStructure(MS.Swi.Data.DataMap,MS.Swi.Data.IConstToken,System.Random,System.Object@,System.String[])">
            <summary>
            Manipulate the structure of the DataMap, altering the structure of the DataMap, and focused on a 
            particular token
            </summary>
            <param name="targetDataMap">The data map being altered</param>
            <param name="targetToken">The token that is the focus of the attack</param>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="manipulationState">The manipulation state to use (or null)</param>
            <param name="manipulationParameters">The parameters for the manipulation if any</param>
            <returns>The results of the manipulation</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.EncapsulationManipulation.ManipulateEncapsulation(MS.Swi.Data.IConstEncapsulation,System.Collections.Generic.Dictionary{MS.Swi.Data.IConstDataContents,System.Object},System.Random,System.Object@,System.String[])">
            <summary>
            Manipulate the contents of an encapsulation. Note that the results will be extracted from the
            provided dictionary when the manipulation is complete.
            </summary>
            <param name="targetEncapsulation">The encapsulation being attacked</param>
            <param name="contents">The dictionary of all of the contents of the encapsulation</param>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="manipulationState">The manipulation state to use (or null)</param>
            <param name="manipulationParameters">The parameters for the manipulation if any</param>
            <returns>The results of the manipulation</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.EncapsulationManipulation.ManipulateEncapsulationStructure(MS.Swi.Data.DataMap,MS.Swi.Data.IConstEncapsulation,System.Random,System.Object@,System.String[])">
            <summary>
            Manipulate the structure of an encapsulation 
            </summary>
            <param name="targetDataMap">The data map being altered</param>
            <param name="targetEncapsulation">The encapsulation being attacked</param>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="manipulationState">The manipulation state to use (or null)</param>
            <param name="manipulationParameters">The parameters for the manipulation if any</param>
            <returns>The results of the manipulation</returns>
        </member>
        <member name="T:MS.Swi.FuzzerCommonLibrary.Manipulations.EncapsulationStructuralManipulation">
            <summary>
            Parent class for manipulations which only attack the structure of the DataMap, focused
            around an Encapsulation
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.EncapsulationStructuralManipulation.Manipulate(MS.Swi.Data.IConstDataContents,System.Object@,System.Random,System.Object@,System.String[])">
            <summary>
            Manipulate the target token, changing the contents of the token directly as applicable
            </summary>
            <param name="targetContents">The contents being manipulated</param>
            <param name="targetObject">The value of those contents (the current value is passed in, the new value is passed out)</param>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="manipulationState">The manipulation state to use (or null)</param>
            <param name="manipulationParameters">The parameters for the manipulation if any</param>
            <returns>The results of the manipulation</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.EncapsulationStructuralManipulation.ManipulateStructure(MS.Swi.Data.DataMap,MS.Swi.Data.IConstToken,System.Random,System.Object@,System.String[])">
            <summary>
            Manipulate the structure of the DataMap, altering the structure of the DataMap, and focused on a 
            particular token
            </summary>
            <param name="targetDataMap">The data map being altered</param>
            <param name="targetToken">The token that is the focus of the attack</param>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="manipulationState">The manipulation state to use (or null)</param>
            <param name="manipulationParameters">The parameters for the manipulation if any</param>
            <returns>The results of the manipulation</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.EncapsulationStructuralManipulation.ManipulateEncapsulation(MS.Swi.Data.IConstEncapsulation,System.Collections.Generic.Dictionary{MS.Swi.Data.IConstDataContents,System.Object},System.Random,System.Object@,System.String[])">
            <summary>
            Manipulate the contents of an encapsulation. Note that the results will be extracted from the
            provided dictionary when the manipulation is complete.
            </summary>
            <param name="targetEncapsulation">The encapsulation being attacked</param>
            <param name="contents">The dictionary of all of the contents of the encapsulation</param>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="manipulationState">The manipulation state to use (or null)</param>
            <param name="manipulationParameters">The parameters for the manipulation if any</param>
            <returns>The results of the manipulation</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.EncapsulationStructuralManipulation.ManipulateEncapsulationStructure(MS.Swi.Data.DataMap,MS.Swi.Data.IConstEncapsulation,System.Random,System.Object@,System.String[])">
            <summary>
            Manipulate the structure of an encapsulation 
            </summary>
            <param name="targetDataMap">The data map being altered</param>
            <param name="targetEncapsulation">The encapsulation being attacked</param>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="manipulationState">The manipulation state to use (or null)</param>
            <param name="manipulationParameters">The parameters for the manipulation if any</param>
            <returns>The results of the manipulation</returns>
        </member>
        <member name="T:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationTable">
            <summary>
            The singleton table of all the loaded manipulations
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationTable.#cctor">
            <summary>
            Use reflection to build the manipulation table details
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationTable.#ctor">
            <summary>
            Block individual instances
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationTable.Reload">
            <summary>
            Reload the caches based on reflection
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationTable.FindManipulationDetails(MS.Swi.FuzzerCommonLibrary.Manipulations.IFuzzerManipulation)">
            <summary>
            Find the details on a manipulation given the manipulation
            </summary>
            <param name="manipulation">The manipulation to use</param>
            <returns>The manipulation details, or null if they could not be found</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationTable.FindManipulation(System.String)">
            <summary>
            Find the details on a manipulation by the name of the manipulation
            </summary>
            <param name="manipulationName"></param>
            <returns>The manipulation details, or null if it could not be found</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationTable.FindManipulationsByDefinition(MS.Swi.Data.ElementDefinition)">
            <summary>
            Find all of the manipulations that can apply to a definition by the definition name
            </summary>
            <param name="definition">The definition</param>
            <returns>The list of manipulations (this may be empty)</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationTable.FindUniversalTokenManipulations">
            <summary>
            Find all the manipulations that apply to all tokens
            </summary>
            <returns>The set of matching manipulations</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationTable.FindUniversalEncapsulationManipulations">
            <summary>
            Find all the manipulations that apply to all encapsulations
            </summary>
            <returns>The set of matching manipulations</returns>
        </member>
        <member name="T:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationTable.ManipulationDetails">
            <summary>
            The details of a given manipulation (including an instance of it)
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationTable.ManipulationDetails.#ctor(MS.Swi.FuzzerCommonLibrary.Manipulations.FuzzerManipulationAttribute,System.Type)">
            <summary>
            Construct the details for a manipulation
            </summary>
            <param name="attribute">The attribute</param>
            <param name="manipulationType">The manipulation type</param>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationTable.ManipulationDetails.Details">
            <summary>
            The attribute associated with the manipulation
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationTable.ManipulationDetails.Manipulation">
            <summary>
            The manipulation 
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\libd\i386\ClientLibrary.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
	<assembly>
		<name>ClientLibrary</name>
	</assembly>
	<members>
		<member name="N:Microsoft.Data.Caching">
			<summary>The <see cref="N:MIcrosoft.Data.Caching" /> namespace provides access to an in-memory application cache application for developing scalable, high-performance applications. This namespace can be used to cache any common language runtime (CLR) object and provides access through simple APIs.</summary>
		</member>
		<member name="T:Microsoft.Data.Caching.DataCache">
			<summary>The object that is used by cache-enabled applications for storing and retrieving objects from the cache cluster. An instance of this object is referred to as the cache client. </summary>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.Add(System.String,System.Object)">
			<summary>Adds an object to the cache.</summary>
			<returns>A <see cref="T:Microsoft.Data.Caching.DataCacheItemVersion" /> object that represents the version of the object saved to the cache under the key value.</returns>
			<param name="key">A unique value that is used to store and retrieve the object from the cache.</param>
			<param name="value">The object saved to the cache cluster.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.Add(System.String,System.Object,System.Collections.Generic.List{Microsoft.Data.Caching.DataCacheTag})">
			<summary>Adds an object to the cache. This method enables associating tags with the cached object.</summary>
			<returns>A <see cref="T:Microsoft.Data.Caching.DataCacheItemVersion" /> object that represents the version of the object saved to the cache under the key value.</returns>
			<param name="key">A unique value that is used to store and retrieve the object from the cache.</param>
			<param name="value">The object saved to the cache cluster.</param>
			<param name="tags">An array of <see cref="T:Microsoft.Data.Caching.DataCacheTag" /> objects to associate with the cached object.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.Add(System.String,System.Object,System.String)">
			<summary>Adds an object to a region in the cache.</summary>
			<returns>A <see cref="T:Microsoft.Data.Caching.DataCacheItemVersion" /> object that represents the version of the object saved to the cache under the key value.</returns>
			<param name="key">A unique value that is used to store and retrieve the object from the cache.</param>
			<param name="value">The object saved to the cache cluster.</param>
			<param name="region">The name of the region to save the object in.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.Add(System.String,System.Object,System.TimeSpan)">
			<summary>Adds an object to the cache. This method provides the ability to specify when the object should be expired.</summary>
			<returns>A <see cref="T:Microsoft.Data.Caching.DataCacheItemVersion" /> object that represents the version of the object saved to the cache under the key value.</returns>
			<param name="key">A unique value that is used to store and retrieve the object from the cache.</param>
			<param name="value">The object saved to the cache cluster.</param>
			<param name="timeout">A non-zero value that is used to specify how many minutes the object should reside in the cache before expiration.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.Add(System.String,System.Object,System.Collections.Generic.List{Microsoft.Data.Caching.DataCacheTag},System.String)">
			<summary>Adds an object to a region in the cache. This method enables associating tags with the cached object.</summary>
			<returns>A <see cref="T:Microsoft.Data.Caching.DataCacheItemVersion" /> object that represents the version of the object saved to the cache under the key value.</returns>
			<param name="key">A unique value that is used to store and retrieve the object from the cache.</param>
			<param name="value">The object saved to the cache cluster.</param>
			<param name="tags">An array of <see cref="T:Microsoft.Data.Caching.DataCacheTag" /> objects to associate with the cached object.</param>
			<param name="region">The name of the region to save the object in.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.Add(System.String,System.Object,System.TimeSpan,System.Collections.Generic.List{Microsoft.Data.Caching.DataCacheTag})">
			<summary>Adds an object to the cache. This method enables associating tags with the cached object and specifying when the object should be expired.</summary>
			<returns>A <see cref="T:Microsoft.Data.Caching.DataCacheItemVersion" /> object that represents the version of the object saved to the cache under the key value.</returns>
			<param name="key">A unique value that is used to store and retrieve the object from the cache.</param>
			<param name="value">The object saved to the cache cluster.</param>
			<param name="timeout">A non-zero value that is used to specify how many minutes the object should reside in the cache before expiration.</param>
			<param name="tags">An array of <see cref="T:Microsoft.Data.Caching.DataCacheTag" /> objects to associate with the cached object.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.Add(System.String,System.Object,System.TimeSpan,System.String)">
			<summary>Adds an object to a region in the cache. This method provides the ability to specify when the object should be expired.</summary>
			<returns>A <see cref="T:Microsoft.Data.Caching.DataCacheItemVersion" /> object that represents the version of the object saved to the cache under the key value.</returns>
			<param name="key">A unique value that is used to store and retrieve the object from the cache.</param>
			<param name="value">The object saved to the cache cluster.</param>
			<param name="timeout">A non-zero value that is used to specify how many minutes the object should reside in the cache before expiration.</param>
			<param name="region">The name of the region to save the object.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.Add(System.String,System.Object,System.TimeSpan,System.Collections.Generic.List{Microsoft.Data.Caching.DataCacheTag},System.String)">
			<summary>Adds an object to a region in the cache. This method enables associating tags with the cached object and specifying when the object should be expired.</summary>
			<returns>A <see cref="T:Microsoft.Data.Caching.DataCacheItemVersion" /> object that represents the version of the object saved to the cache under the key value.</returns>
			<param name="key">A unique value that is used to store and retrieve the object from the cache.</param>
			<param name="value">The object saved to the cache cluster.</param>
			<param name="timeout">A non-zero value that is used to specify how many minutes the object should reside in the cache before expiration.</param>
			<param name="tags">An array of <see cref="T:Microsoft.Data.Caching.DataCacheTag" /> objects to associate with the cached object.</param>
			<param name="region">The name of the region to save the object.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.AddCacheLevelCallback(Microsoft.Data.Caching.DataCacheOperation,Microsoft.Data.Caching.DataCacheNotificationCallback)">
			<summary>Adds a cache notification callback for cache operations occurring on all regions and items.</summary>
			<returns>A <see cref="T:Microsoft.Data.Caching.DataCacheNotificationDescriptor" /> object used to identify the cache notification callback. </returns>
			<param name="filter">The type of cache operation(s) that will trigger cache notifications.</param>
			<param name="clientCallback">The name of the method you want to invoke when these notifications occur.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.AddFailureNotificationCallback(Microsoft.Data.Caching.DataCacheFailureNotificationCallback)">
			<summary>Adds a failure notification callback, for notifications indicating that a client has missed one or more cache notifications.</summary>
			<returns>A <see cref="T:Microsoft.Data.Caching.DataCacheNotificationDescriptor" /> object used to identify the cache notification callback.</returns>
			<param name="failureCallback">The name of the method that you want to invoke when the failure notification occurs.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.AddItemLevelCallback(System.String,Microsoft.Data.Caching.DataCacheOperation,Microsoft.Data.Caching.DataCacheNotificationCallback)">
			<summary>Adds a cache notification callback for cache operations occurring on one specific item that is not stored in a region.</summary>
			<returns>A <see cref="T:Microsoft.Data.Caching.DataCacheNotificationDescriptor" /> object used to identify the cache notification callback.</returns>
			<param name="key">The key used to store the object in the cache.</param>
			<param name="filter">The type of cache operation(s) that will trigger cache notifications.</param>
			<param name="clientCallback">The name of the method you want to invoke when these notifications occur.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.AddItemLevelCallback(System.String,Microsoft.Data.Caching.DataCacheOperation,Microsoft.Data.Caching.DataCacheNotificationCallback,System.String)">
			<summary>Adds a cache notification callback for cache operations occurring on one specific item that is stored in region.</summary>
			<returns>A <see cref="T:Microsoft.Data.Caching.DataCacheNotificationDescriptor" /> object used to identify the cache notification callback.</returns>
			<param name="key">The key used to store the object in the cache.</param>
			<param name="filter">The type of cache operation(s) that will trigger cache notifications.</param>
			<param name="clientCallback">The name of the method you want to invoke when these notifications occur.</param>
			<param name="regionName">The name of the region where the object is stored.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.AddRegionLevelCallback(System.String,Microsoft.Data.Caching.DataCacheOperation,Microsoft.Data.Caching.DataCacheNotificationCallback)">
			<summary>Adds a cache notification callback for cache operations occurring on one specific region.</summary>
			<returns>A <see cref="T:Microsoft.Data.Caching.DataCacheNotificationDescriptor" /> object used to identify the cache notification callback.</returns>
			<param name="regionName">The name of the region for which the specified item or region operations can trigger cache notifications.</param>
			<param name="filter">The type of cache operation(s) that will trigger cache notifications.</param>
			<param name="clientCallback">The name of the method you want to invoke when these notifications occur.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.ClearRegion(System.String)">
			<summary>Deletes all objects in the specified region.</summary>
			<param name="region">The name of the region whose objects are removed.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.CreateRegion(System.String,System.Boolean)">
			<summary>Creates a region and specifies if resident objects may be evicted.</summary>
			<param name="region">The name of the region that is created.</param>
			<param name="evictionOn">True if objects in the region can be evicted.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.Get(System.String)">
			<summary>Gets an object from the cache using the specified key.</summary>
			<returns>The object that was cached by using the specified key. Null is returned if the key does not exist.</returns>
			<param name="key">The unique value that is used to identify the object in the cache.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.Get(System.String,Microsoft.Data.Caching.DataCacheItemVersion@)">
			<summary>Gets an object from the cache using the specified key. You may also provide the version to obtain the specific version of a key, if that version is still the most current in the cache.</summary>
			<returns>The object that was cached by using the specified key. Null is returned if the key does not exist. Even if the key does exist, null may also be returned because the object has been updated to a new version.</returns>
			<param name="key">The unique value that is used to identify the object in the cache.</param>
			<param name="version">The version of the desired object. If this parameter is null, the version of the current object is retrieved.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.Get(System.String,System.String)">
			<summary>Gets an object from the specified region by using the specified key.</summary>
			<returns>The object that was cached by using the specified key. Null is returned if the key does not exist.</returns>
			<param name="key">The unique value that is used to identify the object in the region.</param>
			<param name="region">The name of the region where the object resides.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.Get(System.String,Microsoft.Data.Caching.DataCacheItemVersion@,System.String)">
			<summary>Gets an object from the specified region by using the specified key. You may also provide the version to obtain the specific version of a key, if that version is still the most current in the region.</summary>
			<returns>The object that was cached by using the specified key. Null is returned if the key does not exist. Even if the key does exist, null may also be returned because the object has been updated to a new version.</returns>
			<param name="key">The unique value that is used to identify the object in the region.</param>
			<param name="version">The version of the desired object. If this parameter is null, the version of the current object is retrieved.</param>
			<param name="region">The name of the region where the object resides.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.GetAndLock(System.String,System.TimeSpan,Microsoft.Data.Caching.DataCacheLockHandle@)">
			<summary>Returns and locks the cached object (if present).</summary>
			<returns>The object that was cached by using the specified key. Null is returned if the object has already been locked or the key does not exist.</returns>
			<param name="key">The unique value that is used to identify the object in the cache.</param>
			<param name="timeout">A non-zero value indicating how many minutes the object remains locked.</param>
			<param name="lockHandle">The <see cref="T:Microsoft.Data.Caching.DataCacheLockHandle" /> object required to unlock the object. The lockHandle output parameter is passed by reference.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.GetAndLock(System.String,System.TimeSpan,Microsoft.Data.Caching.DataCacheLockHandle@,System.String)">
			<summary>Returns and locks the cached object (if present). For objects stored in regions.</summary>
			<returns>The object that was cached by using the specified key. Null is returned if the object has already been locked or the key does not exist.</returns>
			<param name="key">The unique value that is used to identify the object in the region.</param>
			<param name="timeout">A non-zero value indicating how many minutes the object remains locked.</param>
			<param name="lockHandle">The <see cref="T:Microsoft.Data.Caching.DataCacheLockHandle" /> object required to unlock the object. The lockHandle output parameter is passed by reference.</param>
			<param name="region">The name of the region where the object resides.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.GetCacheItem(System.String)">
			<summary>Gets a <see cref="T:Microsoft.Data.Caching.DataCacheItem" /> object to retrieve all information associated with your cached object in the cluster.</summary>
			<returns>A <see cref="T:Microsoft.Data.Caching.DataCacheItem" /> object that contains all information associated with your cached object. Null is returned if the key does not exist.</returns>
			<param name="key">The unique value that is used to identify the object in the cache.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.GetCacheItem(System.String,System.String)">
			<summary>Gets a <see cref="T:Microsoft.Data.Caching.DataCacheItem" /> object to retrieve all information associated with your cached object in the cluster. For objects stored in regions.</summary>
			<returns>A <see cref="T:Microsoft.Data.Caching.DataCacheItem" /> object that contains all information associated with your cached object. Null is returned if the key does not exist.</returns>
			<param name="key">The unique value that is used to identify the object in the region.</param>
			<param name="region">The name of the region where the object resides.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.GetIfNewer(System.String,Microsoft.Data.Caching.DataCacheItemVersion@)">
			<summary>Gets an object from the cache, but only if a newer version of the object resides in the cache.</summary>
			<returns>If the version in the cache differs from the version parameter, the corresponding cached object is returned. If the version in the cache is the same as the version parameter, null is returned.</returns>
			<param name="key">The unique value that is used to identify the object in the cache. If this parameter is null, an exception is thrown.</param>
			<param name="version">The version of the desired object, passed by reference. If this parameter is null, an exception is thrown.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.GetIfNewer(System.String,Microsoft.Data.Caching.DataCacheItemVersion@,System.String)">
			<summary>Gets an object from the specified region, but only if a newer version of the object resides in the region. </summary>
			<returns>If the version in the region differs from the version parameter, the corresponding cached object is returned. If the version in the region is the same as the version parameter, null is returned.</returns>
			<param name="key">The unique value that is used to identify the object in the cache. If this parameter is null, an exception is thrown.</param>
			<param name="version">The version of the desired object, passed by reference. If this parameter is null, an exception is thrown.</param>
			<param name="region">The name of the region where the object resides.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.GetObjectsByAllTags(System.Collections.Generic.List{Microsoft.Data.Caching.DataCacheTag},System.String)">
			<summary>Gets an enumerable list of all cached objects in the specified region that have all the same tags in common.</summary>
			<returns>An enumerable list of all cached objects in the specified region that have all the same tags in common. Null is returned if no objects in the specified region have all the tags specified.</returns>
			<param name="tags">A list of tags for which to search.</param>
			<param name="region">The name of the region to search. Tags are not supported outside regions. Therefore, a region name is required.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.GetObjectsByAnyTag(System.Collections.Generic.List{Microsoft.Data.Caching.DataCacheTag},System.String)">
			<summary>Gets an enumerable list of all cached objects in the specified region that have any of the same tags in common.</summary>
			<returns>An enumerable list of all cached objects in the specified region that have any of the same tags in common. Null is returned if no objects in the specified region have any of the tags specified.</returns>
			<param name="tags">A list of tags for which to search.</param>
			<param name="region">The name of the region to search. Tags are not supported outside regions. Therefore, a region name is required.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.GetObjectsByTag(Microsoft.Data.Caching.DataCacheTag,System.String)">
			<summary>Gets an enumerable list of all cached objects in the specified region that have the specified tag.</summary>
			<returns>An enumerable list of all cached objects in the specified region that have the specified tag. Null is returned if no objects in the specified region have the tag specified.</returns>
			<param name="tag">The tag for which to search.</param>
			<param name="region">The name of the region to search. Tags are not supported outside regions. Therefore, a region name is required.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.GetObjectsInRegion(System.String)">
			<summary>Gets an enumerable list of all cached objects in the specified region.</summary>
			<returns>An enumerable list of all cached objects in the specified region.</returns>
			<param name="region">The name of the region for which to return a list of all resident objects.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.Put(System.String,System.Object)">
			<summary>Adds or replaces an object in the cache. </summary>
			<returns>A <see cref="T:Microsoft.Data.Caching.DataCacheItemVersion" /> object that represents the version of the object saved to the cache under the key value.</returns>
			<param name="key">The unique value that is used to identify the object in the cache.</param>
			<param name="value">The object to add or replace.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.Put(System.String,System.Object,Microsoft.Data.Caching.DataCacheItemVersion)">
			<summary>Adds or replaces an object in the cache if it is at the specified version.</summary>
			<returns>A <see cref="T:Microsoft.Data.Caching.DataCacheItemVersion" /> object that represents the version of the object saved to the cache under the key value.</returns>
			<param name="key">The unique value that is used to identify the object in the cache.</param>
			<param name="value">The object to add or replace.</param>
			<param name="oldVersion">The <see cref="T:Microsoft.Data.Caching.DataCacheItemVersion" /> object that represents the version of the cached object that is to be replaced.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.Put(System.String,System.Object,System.Collections.Generic.List{Microsoft.Data.Caching.DataCacheTag})">
			<summary>Adds or replaces an object in the cache. Associates tags with the cached object.</summary>
			<returns>A <see cref="T:Microsoft.Data.Caching.DataCacheItemVersion" /> object that represents the version of the object saved to the cache under the key value.</returns>
			<param name="key">The unique value that is used to identify the object in the cache.</param>
			<param name="value">The object to add or replace.</param>
			<param name="tags">A list of tags to associate with the object.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.Put(System.String,System.Object,System.String)">
			<summary>Adds or replaces an object in the specified region.</summary>
			<returns>A <see cref="T:Microsoft.Data.Caching.DataCacheItemVersion" /> object that represents the version of the object saved to the cache under the key value.</returns>
			<param name="key">The unique value that is used to identify the object in the region.</param>
			<param name="value">The object to add or replace.</param>
			<param name="region">The name of the region the object resides in.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.Put(System.String,System.Object,System.TimeSpan)">
			<summary>Adds or replaces an object in the cache. Specifies the timeout value of the cached object. </summary>
			<returns>A <see cref="T:Microsoft.Data.Caching.DataCacheItemVersion" /> object that represents the version of the object saved to the cache under the key value.</returns>
			<param name="key">The unique value that is used to identify the object in the cache.</param>
			<param name="value">The object to add or replace.</param>
			<param name="timeout">A non-zero value that is used to specify how many minutes the object should reside in the cache before expiration.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.Put(System.String,System.Object,Microsoft.Data.Caching.DataCacheItemVersion,System.Collections.Generic.List{Microsoft.Data.Caching.DataCacheTag})">
			<summary>Adds or replaces an object in the cache if it is at the specified version. Associates tags with the cached object.</summary>
			<returns>A <see cref="T:Microsoft.Data.Caching.DataCacheItemVersion" /> object that represents the version of the object saved to the cache under the key value.</returns>
			<param name="key">The unique value that is used to identify the object in the cache.</param>
			<param name="value">The object to add or replace.</param>
			<param name="oldVersion">The <see cref="T:Microsoft.Data.Caching.DataCacheItemVersion" /> object that represents the version of the cached object that is to be replaced.</param>
			<param name="tags">A list of tags to associate with the object.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.Put(System.String,System.Object,Microsoft.Data.Caching.DataCacheItemVersion,System.String)">
			<summary>Adds or replaces an object in the specified region if it is at the specified version.</summary>
			<returns>A <see cref="T:Microsoft.Data.Caching.DataCacheItemVersion" /> object that represents the version of the object saved to the cache under the key value.</returns>
			<param name="key">The unique value that is used to identify the object in the region.</param>
			<param name="value">The object to add or replace.</param>
			<param name="oldVersion">The <see cref="T:Microsoft.Data.Caching.DataCacheItemVersion" /> object that represents the version of the cached object that is to be replaced.</param>
			<param name="region">The name of the region the object resides in.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.Put(System.String,System.Object,Microsoft.Data.Caching.DataCacheItemVersion,System.TimeSpan)">
			<summary>Adds or replaces an object in the cache if it is at the specified version. Specifies the timeout value of the cached object.</summary>
			<returns>A <see cref="T:Microsoft.Data.Caching.DataCacheItemVersion" /> object that represents the version of the object saved to the cache under the key value.</returns>
			<param name="key">The unique value that is used to identify the object in the cache.</param>
			<param name="value">The object to add or replace.</param>
			<param name="oldVersion">The <see cref="T:Microsoft.Data.Caching.DataCacheItemVersion" /> object that represents the version of the cached object that is to be replaced.</param>
			<param name="timeout">A non-zero value that is used to specify how many minutes the object should reside in the cache before expiration.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.Put(System.String,System.Object,System.Collections.Generic.List{Microsoft.Data.Caching.DataCacheTag},System.String)">
			<summary>Adds or replaces an object in the specified region. Associates tags with the cached object.</summary>
			<returns>A <see cref="T:Microsoft.Data.Caching.DataCacheItemVersion" /> object that represents the version of the object saved to the cache under the key value.</returns>
			<param name="key">The unique value that is used to identify the object in the region.</param>
			<param name="value">The object to add or replace.</param>
			<param name="tags">A list of tags to associate with the object.</param>
			<param name="region">The name of the region the object resides in.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.Put(System.String,System.Object,System.TimeSpan,System.Collections.Generic.List{Microsoft.Data.Caching.DataCacheTag})">
			<summary>Adds or replaces an object in the cache. Specifies the timeout value and associates tags with the cached object.</summary>
			<returns>A <see cref="T:Microsoft.Data.Caching.DataCacheItemVersion" /> object that represents the version of the object saved to the cache under the key value.</returns>
			<param name="key">The unique value that is used to identify the object in the cache.</param>
			<param name="value">The object to add or replace.</param>
			<param name="timeout">A non-zero value that is used to specify how many minutes the object should reside in the cache before expiration.</param>
			<param name="tags">A list of tags to associate with the object.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.Put(System.String,System.Object,System.TimeSpan,System.String)">
			<summary>Adds or replaces an object in the specified region. Specifies the timeout value of the cached object.</summary>
			<returns>A <see cref="T:Microsoft.Data.Caching.DataCacheItemVersion" /> object that represents the version of the object saved to the cache under the key value.</returns>
			<param name="key">The unique value that is used to identify the object in the region.</param>
			<param name="value">The object to add or replace.</param>
			<param name="timeout">A non-zero value that is used to specify how many minutes the object should reside in the cache before expiration.</param>
			<param name="region">The name of the region the object resides in.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.Put(System.String,System.Object,Microsoft.Data.Caching.DataCacheItemVersion,System.Collections.Generic.List{Microsoft.Data.Caching.DataCacheTag},System.String)">
			<summary>Adds or replaces an object in the specified region if it is at the specified version. Associates tags with the cached object.</summary>
			<returns>A <see cref="T:Microsoft.Data.Caching.DataCacheItemVersion" /> object that represents the version of the object saved to the cache under the key value.</returns>
			<param name="key">The unique value that is used to identify the object in the region.</param>
			<param name="value">The object to add or replace.</param>
			<param name="oldVersion">The <see cref="T:Microsoft.Data.Caching.DataCacheItemVersion" /> object that represents the version of the cached object that is to be replaced.</param>
			<param name="tags">A list of tags to associate with the object.</param>
			<param name="region">The name of the region the object resides in.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.Put(System.String,System.Object,Microsoft.Data.Caching.DataCacheItemVersion,System.TimeSpan,System.Collections.Generic.List{Microsoft.Data.Caching.DataCacheTag})">
			<summary>Adds or replaces an object in the cache if it is at the specified version. Specifies the timeout value and associates tags with the cached object.</summary>
			<returns>A <see cref="T:Microsoft.Data.Caching.DataCacheItemVersion" /> object that represents the version of the object saved to the cache under the key value.</returns>
			<param name="key">The unique value that is used to identify the object in the cache.</param>
			<param name="value">The object to add or replace.</param>
			<param name="oldVersion">The <see cref="T:Microsoft.Data.Caching.DataCacheItemVersion" /> object that represents the version of the cached object that is to be replaced.</param>
			<param name="timeout">A non-zero value that is used to specify how many minutes the object should reside in the cache before expiration.</param>
			<param name="tags">A list of tags to associate with the object.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.Put(System.String,System.Object,Microsoft.Data.Caching.DataCacheItemVersion,System.TimeSpan,System.String)">
			<summary>Adds or replaces an object in the specified region if it is at the specified version. Specifies the timeout value of the cached object.</summary>
			<returns>A <see cref="T:Microsoft.Data.Caching.DataCacheItemVersion" /> object that represents the version of the object saved to the cache under the key value.</returns>
			<param name="key">The unique value that is used to identify the object in the region.</param>
			<param name="value">The object to add or replace.</param>
			<param name="oldVersion">The <see cref="T:Microsoft.Data.Caching.DataCacheItemVersion" /> object that represents the version of the cached object that is to be replaced.</param>
			<param name="timeout">A non-zero value that is used to specify how many minutes the object should reside in the cache before expiration.</param>
			<param name="region">The name of the region the object resides in.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.Put(System.String,System.Object,System.TimeSpan,System.Collections.Generic.List{Microsoft.Data.Caching.DataCacheTag},System.String)">
			<summary>Adds or replaces an object in the specified region. Specifies the timeout value and associates tags with the cached object.</summary>
			<returns>A <see cref="T:Microsoft.Data.Caching.DataCacheItemVersion" /> object that represents the version of the object saved to the cache under the key value.</returns>
			<param name="key">The unique value that is used to identify the object in the region.</param>
			<param name="value">The object to add or replace.</param>
			<param name="timeout">A non-zero value that is used to specify how many minutes the object should reside in the cache before expiration.</param>
			<param name="tags">A list of tags to associate with the object.</param>
			<param name="region">The name of the region the object resides in.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.Put(System.String,System.Object,Microsoft.Data.Caching.DataCacheItemVersion,System.TimeSpan,System.Collections.Generic.List{Microsoft.Data.Caching.DataCacheTag},System.String)">
			<summary>Adds or replaces an object in the specified region if it is at the specified version. Specifies the timeout value and associates tags with the cached object.</summary>
			<returns>A <see cref="T:Microsoft.Data.Caching.DataCacheItemVersion" /> object that represents the version of the object saved to the cache under the key value.</returns>
			<param name="key">The unique value that is used to identify the object in the region.</param>
			<param name="value">The object to add or replace.</param>
			<param name="oldVersion">The <see cref="T:Microsoft.Data.Caching.DataCacheItemVersion" /> object that represents the version of the cached object that is to be replaced.</param>
			<param name="timeout">A non-zero value that is used to specify how many minutes the object should reside in the cache before expiration.</param>
			<param name="tags">A list of tags to associate with the object.</param>
			<param name="region">The name of the region the object resides in.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.PutAndUnlock(System.String,System.Object,Microsoft.Data.Caching.DataCacheLockHandle)">
			<summary>Replaces and unlocks an object in the cache.</summary>
			<returns>A <see cref="T:Microsoft.Data.Caching.DataCacheItemVersion" /> object that represents the version of the cached object after it has been updated by this method. If the lockHandle parameter is not equal to the <see cref="T:Microsoft.Data.Caching.DataCacheLockHandle" /> object obtained from the method that is used to lock the object, null is returned and the object is not updated.</returns>
			<param name="key">The unique value that is used to identify the object in the cache.</param>
			<param name="value">The object to add or replace.</param>
			<param name="lockHandle">The <see cref="T:Microsoft.Data.Caching.DataCacheLockHandle" /> object that was returned when the object was locked.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.PutAndUnlock(System.String,System.Object,Microsoft.Data.Caching.DataCacheLockHandle,System.Collections.Generic.List{Microsoft.Data.Caching.DataCacheTag})">
			<summary>Replaces and unlocks an object in the cache. Associates tags with the cached object.</summary>
			<returns>A <see cref="T:Microsoft.Data.Caching.DataCacheItemVersion" /> object that represents the version of the cached object after it has been updated by this method. If the lockHandle parameter is not equal to the <see cref="T:Microsoft.Data.Caching.DataCacheLockHandle" /> object obtained from the method that is used to lock the object, null is returned and the object is not updated.</returns>
			<param name="key">The unique value that is used to identify the object in the cache.</param>
			<param name="value">The object to add or replace.</param>
			<param name="lockHandle">The <see cref="T:Microsoft.Data.Caching.DataCacheLockHandle" /> object that was returned when the object was locked.</param>
			<param name="tags">A list of tags to associate with the object.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.PutAndUnlock(System.String,System.Object,Microsoft.Data.Caching.DataCacheLockHandle,System.String)">
			<summary>Replaces and unlocks an object in the specified region.</summary>
			<returns>A <see cref="T:Microsoft.Data.Caching.DataCacheItemVersion" /> object that represents the version of the cached object after it has been updated by this method. If the lockHandle parameter is not equal to the <see cref="T:Microsoft.Data.Caching.DataCacheLockHandle" /> object obtained from the method that is used to lock the object, null is returned and the object is not updated.</returns>
			<param name="key">The unique value that is used to identify the object in the region.</param>
			<param name="value">The object to add or replace.</param>
			<param name="lockHandle">The <see cref="T:Microsoft.Data.Caching.DataCacheLockHandle" /> object that was returned when the object was locked.</param>
			<param name="region">The name of the region the object resides in.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.PutAndUnlock(System.String,System.Object,Microsoft.Data.Caching.DataCacheLockHandle,System.TimeSpan)">
			<summary>Replaces and unlocks an object in the cache. Specifies the timeout value of the cached object.</summary>
			<returns>A <see cref="T:Microsoft.Data.Caching.DataCacheItemVersion" /> object that represents the version of the cached object after it has been updated by this method. If the lockHandle parameter is not equal to the <see cref="T:Microsoft.Data.Caching.DataCacheLockHandle" /> object obtained from the method that is used to lock the object, null is returned and the object is not updated.</returns>
			<param name="key">The unique value that is used to identify the object in the cache.</param>
			<param name="value">The object to add or replace.</param>
			<param name="lockHandle">The <see cref="T:Microsoft.Data.Caching.DataCacheLockHandle" /> object that was returned when the object was locked.</param>
			<param name="timeout">A non-zero value that is used to specify how many minutes the object should reside in the cache before expiration.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.PutAndUnlock(System.String,System.Object,Microsoft.Data.Caching.DataCacheLockHandle,System.Collections.Generic.List{Microsoft.Data.Caching.DataCacheTag},System.String)">
			<summary>Replaces and unlocks an object in the specified region. Associates tags with the cached object.</summary>
			<returns>A <see cref="T:Microsoft.Data.Caching.DataCacheItemVersion" /> object that represents the version of the cached object after it has been updated by this method. If the lockHandle parameter is not equal to the <see cref="T:Microsoft.Data.Caching.DataCacheLockHandle" /> object obtained from the method that is used to lock the object, null is returned and the object is not updated.</returns>
			<param name="key">The unique value that is used to identify the object in the region.</param>
			<param name="value">The object to add or replace.</param>
			<param name="lockHandle">The <see cref="T:Microsoft.Data.Caching.DataCacheLockHandle" /> object that was returned when the object was locked.</param>
			<param name="tags">A list of tags to associate with the object.</param>
			<param name="region">The name of the region the object resides in.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.PutAndUnlock(System.String,System.Object,Microsoft.Data.Caching.DataCacheLockHandle,System.TimeSpan,System.Collections.Generic.List{Microsoft.Data.Caching.DataCacheTag})">
			<summary>Replaces and unlocks an object in the cache. Specifies the timeout value and associates tags with the cached object.</summary>
			<returns>A <see cref="T:Microsoft.Data.Caching.DataCacheItemVersion" /> object that represents the version of the cached object after it has been updated by this method. If the lockHandle parameter is not equal to the <see cref="T:Microsoft.Data.Caching.DataCacheLockHandle" /> object obtained from the method that is used to lock the object, null is returned and the object is not updated.</returns>
			<param name="key">The unique value that is used to identify the object in the cache.</param>
			<param name="value">The object to add or replace.</param>
			<param name="lockHandle">The <see cref="T:Microsoft.Data.Caching.DataCacheLockHandle" /> object that was returned when the object was locked.</param>
			<param name="timeout">A non-zero value that is used to specify how many minutes the object should reside in the cache before expiration.</param>
			<param name="tags">A list of tags to associate with the object.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.PutAndUnlock(System.String,System.Object,Microsoft.Data.Caching.DataCacheLockHandle,System.TimeSpan,System.String)">
			<summary>Replaces and unlocks an object in the specified region. Specifies the timeout value of the cached object.</summary>
			<returns>A <see cref="T:Microsoft.Data.Caching.DataCacheItemVersion" /> object that represents the version of the cached object after it has been updated by this method. If the lockHandle parameter is not equal to the <see cref="T:Microsoft.Data.Caching.DataCacheLockHandle" /> object obtained from the method that is used to lock the object, null is returned and the object is not updated.The timeout value associated with the cached object overrides expiration settings specified in the named cache configuration. For more information, see Expiration and Eviction (Velocity).</returns>
			<param name="key">The unique value that is used to identify the object in the region.</param>
			<param name="value">The object to add or replace.</param>
			<param name="lockHandle">The <see cref="T:Microsoft.Data.Caching.DataCacheLockHandle" /> object that was returned when the object was locked.</param>
			<param name="timeout">A non-zero value that is used to specify how many minutes the object should reside in the cache before expiration.</param>
			<param name="region">The name of the region the object resides in.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.PutAndUnlock(System.String,System.Object,Microsoft.Data.Caching.DataCacheLockHandle,System.TimeSpan,System.Collections.Generic.List{Microsoft.Data.Caching.DataCacheTag},System.String)">
			<summary>Replaces and unlocks an object in the specified region. Specifies the timeout value and associates tags with the cached object.</summary>
			<returns>A <see cref="T:Microsoft.Data.Caching.DataCacheItemVersion" /> object that represents the version of the cached object after it has been updated by this method. If the lockHandle parameter is not equal to the <see cref="T:Microsoft.Data.Caching.DataCacheLockHandle" /> object obtained from the method that is used to lock the object, null is returned and the object is not updated.</returns>
			<param name="key">The unique value that is used to identify the object in the region.</param>
			<param name="value">The object to add or replace.</param>
			<param name="lockHandle">The <see cref="T:Microsoft.Data.Caching.DataCacheLockHandle" /> object that was returned when the object was locked.</param>
			<param name="timeout">A non-zero value that is used to specify how many minutes the object should reside in the cache before expiration.</param>
			<param name="tags">A list of tags to associate with the object.</param>
			<param name="region">The name of the region the object resides in.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.Remove(System.String)">
			<summary>Removes an object from the cache.</summary>
			<param name="key">The unique value that is used to identify the object in the region.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.Remove(System.String,Microsoft.Data.Caching.DataCacheItemVersion)">
			<summary>Removes an object from the cache if it is at the specified version.</summary>
			<param name="key">The unique value that is used to identify the object in the region.</param>
			<param name="version">The <see cref="T:Microsoft.Data.Caching.DataCacheItemVersion" /> object that represents the version of the cached object that is to be removed.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.Remove(System.String,System.String)">
			<summary>Removes an object from the specified region.</summary>
			<param name="key">The unique value that is used to identify the object in the region.</param>
			<param name="region">The name of the region the object resides in.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.Remove(System.String,Microsoft.Data.Caching.DataCacheItemVersion,System.String)">
			<summary>Removes an object from the specified region if it is at the specified version.</summary>
			<param name="key">The unique value that is used to identify the object in the region.</param>
			<param name="version">The <see cref="T:Microsoft.Data.Caching.DataCacheItemVersion" /> object that represents the version of the cached object that is to be removed.</param>
			<param name="region">The name of the region the object resides in.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.RemoveCallback(Microsoft.Data.Caching.DataCacheNotificationDescriptor)">
			<summary>Removes a cache notification callback.</summary>
			<param name="nd">The <see cref="T:Microsoft.Data.Caching.DataCacheNotificationDescriptor" /> object that identifies the callback that should be removed.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.RemoveRegion(System.String)">
			<summary>Deletes a region. All cached objects inside the region are also removed.</summary>
			<param name="region">The name of the region.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.ResetObjectTimeout(System.String,System.TimeSpan)">
			<summary>Resets the object timeout value, defining how long objects reside in the cache before expiring. The value specified for the object overrides the default settings for the cache.</summary>
			<param name="key">The unique value that is used to identify the object in the region.</param>
			<param name="newTimeout">A non-zero value that is used to specify how many minutes the object should reside in the cache before expiration.</param>
		</member>
		<member name="M:Microsoft.Data.Caching.DataCache.ResetObjectTimeout(System.String,System.TimeSpan,System.String)">
			<summary>Resets the object timeout value, defining how long objects reside in the region before expiring. The value specified for the object overrides the default settings for the cache.</summary>
			<param name="key">The unique value that is used to identify the object in the region.</param>
			<param name="newTimeout">A non-zero value that is used to specify how many minutes the object should reside in the cache before expiration.</param>
			<param name="region">The name of the region where the object resides.</param>
		</member>
		<member name="M