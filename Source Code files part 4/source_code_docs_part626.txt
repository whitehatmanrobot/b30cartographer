t.VisualStudio.Text.Editor.MouseHoverAttribute"/> to the event handler.
            If no <see cref="T:Microsoft.VisualStudio.Text.Editor.MouseHoverAttribute"/> is specified on the event handler, the delay will be 150ms.</para>
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.ITextView.Closed">
            <summary>
            Occurs immediately after the text view is closed.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.ITextView.LostAggregateFocus">
            <summary>
            Occurs when the keyboard focus switches away from the view and any of its adornments.
            </summary>
            <remarks>This event will not be raised when keyboard focus transitions from the view to one of its popups.</remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.ITextView.GotAggregateFocus">
            <summary>Occurs when the keyboard focus switches to the view or one of its adornments.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection">
            <summary>
            <para>Represents a helper class for accessing the view's collection of <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> objects. The
            TextViewLines property on the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> is used to get an instance of this interface.</para>
            </summary>
            <remarks>
            <para>The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> disposes its <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection"/>
            and all the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> objects it contains every time it generates a new layout.</para>
            <para>Most properties and parameters that are doubles correspond to coordinates or distances in the text
            rendering coordinate system. In this coordinate system, x = 0.0 corresponds to the left edge of the drawing
            surface onto which text is rendered (x = view.ViewportLeft corresponds to the left edge of the viewport), and y = view.ViewportTop corresponds to the top edge of the viewport. The x-coordinate increases
            from left to right, and the y-coordinate increases from top to bottom. </para>
            <para>The horizontal and vertical axes of the view behave differently. When the text in the view is
            formatted, only the visible lines are formatted. As a result,
            a viewport cannot be scrolled horizontally and vertically in the same way.</para>
            <para>A viewport is scrolled horizontally by changing the left coordinate of the
            viewport so that it moves with respect to the drawing surface.</para>
            <para>A view can be scrolled vertically only by performing a new layout.</para>
            <para>Doing a layout in the view may cause the ViewportTop property of the view to change. For example, scrolling down one line will not translate any of the visible lines.
            Instead it will simply change the view's ViewportTop property (causing the lines to move on the screen even though their y-coordinates have not changed).</para>
            <para>Distances in the text rendering coordinate system correspond to logical pixels. If the text rendering
            surface is displayed without any scaling transform, then 1 unit in the text rendering coordinate system
            corresponds to one pixel on the display.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection.ContainsBufferPosition(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Determines whether the specified buffer position is contained by any of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> objects in the collection.
            </summary>
            <param name="bufferPosition">The buffer position.</param>
            <returns><c>true</c> if <paramref name="bufferPosition"/> is contained by ones of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> objects, otherwise <c>false</c>.</returns>
            <remarks>
            This method handles the special processing required for the last line of the buffer.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection.IntersectsBufferSpan(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Detrmines whether the specified buffer span intersects any of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> objects in the collection.
            </summary>
            <param name="bufferSpan">The buffer span.</param>
            <returns><c>true</c> if <paramref name="bufferSpan"/> is contained by ones of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> objects, otherwise <c>false</c>.</returns>
            <remarks>
            This method handles the special processing required for the last line of the buffer.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection.GetTextViewLineContainingBufferPosition(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> that contains the specified text buffer position.
            </summary>
            <param name="bufferPosition">
            The text buffer position used to search for a text line.
            </param>
            <returns>
            An <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> that contains the position, or null if none exists.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferPosition"/> is not a valid buffer position.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection.GetTextViewLineContainingYCoordinate(System.Double)">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> that contains the specified y-coordinate.
            </summary>
            <param name="y">
            The y-coordinate in the text rendering coordinate.
            </param>
            <returns>
            A text line that contains the y-coordinate, or null if none exists.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="y"/> is NaN.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection.GetTextViewLinesIntersectingSpan(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Gets all of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> objects that intersect <paramref name="bufferSpan"/>.
            </summary>
            <param name="bufferSpan">The span.</param>
            <returns>A sorted collection of <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> objects that intersect the buffer span.</returns>
            <remarks>
            <para>This will return an empty list if there is no intersection between the
            <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> objects in this collection and <paramref name="bufferSpan"/>.</para>
            <para>This method handles the special processing required for the last line of the buffer.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection.GetTextElementSpan(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Gets the span whose text element span contains the given buffer position.
            </summary>
            <param name="bufferPosition">The buffer position.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> that corresponds to the given text element index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferPosition"/> does not correspond to a position on this line.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection.GetCharacterBounds(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Gets the text bounds of the specified text buffer position.
            </summary>
            <param name="bufferPosition">
            The text buffer-based index of the character.
            </param>
            <returns>
            A rectangular <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds"/> structure.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferPosition"/> does not correspond to a position on this line.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection.GetNormalizedTextBounds(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Gets a collection of <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds"/> structures for the text that corresponds to the given span.
            </summary>
            <param name="bufferSpan">
            The buffer span representing the text for which to compute the text bounds.
            </param>
            <returns>
            A read-only collection of <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds"/> structures that contain the text specified in <paramref name="bufferSpan"/>.
            </returns>
            <remarks>
            <para>
            If the line contains bidirectional text, the <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds"/> objects that are returned may be disjoint.
            </para>
            <para>
            The height and top of the bounds will be the maximum of the height and the minimum of the top of all text
            in the line.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSpan"/> is not a legal span in the underlying text buffer.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection.GetIndexOfTextLine(Microsoft.VisualStudio.Text.Formatting.ITextViewLine)">
            <summary>
            Gets the index in the text lines of the given text view line.
            </summary>
            <param name="textLine">The <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> for which to find the index.</param>
            <returns>The index of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> in the view's TextLines list.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="textLine"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="textLine"/> has been disposed.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection.FirstVisibleLine">
            <summary>
            Gets the first line that is not completely hidden.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection.LastVisibleLine">
            <summary>
            Gets the last line that is not completely hidden.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection.FormattedSpan">
            <summary>
            Gets the span of text contained in this <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> collection. 
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection.IsValid">
            <summary>
            Determines whether this <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection"/> object is still valid.
            </summary>
            <remarks>The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> will always invalidate the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection"/>
            when performing a layout.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ITextViewMargin">
            <summary>
            Represents margins that are attached to an edge of an <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewMargin.GetTextViewMargin(System.String)">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewMargin"/> with the given <paramref name="marginName"/>.
            </summary>
            <param name="marginName">The name of the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewMargin"/>.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewMargin"/> named <paramref name="marginName"/>, or null if no match is found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="marginName"/> is null.</exception>
            <remarks>A margin returns itself if it is passed its own name. If the name does not match and it is a container margin, it
            forwards the call to its children. Margin name comparisons are case-insensitive.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextViewMargin.MarginSize">
            <summary>
            Gets the size of the margin. 
            </summary>
            <remarks>For a horizontal margin this is the height of the margin, 
            since the width will be determined by the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>. 
            For a vertical margin this is the width of the margin, since the height will be determined by the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.</remarks>
            <exception cref="T:System.ObjectDisposedException">The margin is disposed.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextViewMargin.Enabled">
            <summary>
            Determines whether the margin is enabled.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The margin is disposed.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ITextViewModel">
            <summary>
            Represents a set of zero or more <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> objects that are unique to the presentation of text
            in a particular <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewModel.IsPointInVisualBuffer(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.PositionAffinity)">
            <summary>
            Determines whether a point in the edit buffer is represented in the visual buffer.
            </summary>
            <param name="editBufferPoint">A point in the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.EditBuffer"/>.</param>
            <param name="affinity">
            If the mapping is ambiguous, this parameter affects the mapping as follows:
            if <paramref name="affinity"/> is <see cref="F:Microsoft.VisualStudio.Text.PositionAffinity.Predecessor"/>, the mapping targets 
            the position immediately after the preceding character in the projection buffer; if <paramref name="affinity"/> is 
            <see cref="F:Microsoft.VisualStudio.Text.PositionAffinity.Successor"/>, the mapping targets the position immediately before the following character
            in the projection buffer. This parameter has no effect if the mapping is unambiguous.</param>
            <returns><c>true</c> if the point is represented in the visual buffer, otherwise <c>false</c>.</returns>
            <remarks>
            A point that is represented in the visual buffer may not be visible on screen, but if the view
            is scrolled to that position, then the point would become visible.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewModel.GetNearestPointInVisualBuffer(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Gets a point in the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.VisualBuffer"/> that corresponds to the specified point in the edit
            buffer. If the point is hidden or has an alternative representation, gets
            the nearest point to it.
            </summary>
            <remarks>The definition of "nearest" depends on the implementation of the text view model.</remarks>
            <param name="editBufferPoint">A point in the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.EditBuffer"/>.</param>
            <returns>A point in the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.VisualBuffer"/> that corresponds to the given point.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewModel.GetNearestPointInVisualSnapshot(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Text.PointTrackingMode)">
            <summary>
            Gets a point in the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.VisualBuffer"/> that corresponds to the specified point in the edit
            buffer. If the point is hidden or has an alternative representation, gets
            the nearest point to it.
            </summary>
            <remarks>The definition of "nearest" depends on the implementation of the text view model.</remarks>
            <param name="editBufferPoint">A point in the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.EditBuffer"/>.</param>
            <param name="targetVisualSnapshot">The snapshot of <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.VisualBuffer"/> to map to.</param>
            <param name="trackingMode">The <see cref="T:Microsoft.VisualStudio.Text.PointTrackingMode"/> to use when translating to targetVisualSnapshot.</param>
            <returns>A point in the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.VisualBuffer"/> that corresponds to the given point in targetVisualSnapshot.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.DataModel">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.ITextDataModel"/> that supplies the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.DataBuffer"/> and the governing <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> for the view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.DataBuffer">
            <summary>
            Represents the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> for the data level. The data level text buffer is the highest buffer in the graph that
            is shared across multiple views and is therefore the base of the view model.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.EditBuffer">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> in which editing positions are tracked and to which edits are applied.
            All the text that appears in the view must reside in this buffer.
            </summary>
            <remarks>
            This text buffer may be the same as the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.DataBuffer"/>, or it may be a projection buffer
            or elision buffer whose ultimate source is the data buffer.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.VisualBuffer">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> whose contents should be presented in the editor. 
            </summary>
            <remarks>
            This text buffer may be the same as the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.EditBuffer"/> or it may be a projection buffer
            or elision buffer whose ultimate source is the edit buffer.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ITextViewModelProvider">
            <summary>
            Provides <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewModel"/> objects.
            </summary>
            <remarks>This is a MEF component part, and should be exported with the following attribute:
            [Export(NameSource=typeof(ITextViewModelProvider))]
            Component exporters must specify at least one ContentTypeAttribute characterizing the data
            models to which they apply and at least one TextViewRoleAttribute characterizing the views to which they apply.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewModelProvider.CreateTextViewModel(Microsoft.VisualStudio.Text.ITextDataModel,Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewModel"/> for the given <see cref="T:Microsoft.VisualStudio.Text.ITextDataModel"/>.
            </summary>
            <param name="dataModel">The <see cref="T:Microsoft.VisualStudio.Text.ITextDataModel"/> for which to create the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewModel"/>.</param>
            <param name="roles">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet"/> for the view that is about to be created.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewModel"/> created for <paramref name="dataModel"/>, 
            or <c>null</c> if the text view model cannot be created.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet">
            <summary>
            Set of text view roles.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet.Contains(System.String)">
            <summary>
            Compute whether the given text view role is a member of the set.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="textViewRole"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet.ContainsAll(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Compute whether the set contains all of the given text view roles.
            </summary>
            <exception cref="T:System.ArgumentNullException"> if <paramref name="textViewRoles"/> is null.</exception>
            <param name="textViewRoles">The list of roles to check for inclusion.</param>
            <remarks>
            Returns <b>true</b> if <paramref name="textViewRoles"/> contains no roles. Null values 
            in <paramref name="textViewRoles"/> are ignored.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet.ContainsAny(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Compute whether the set contains at least one of the given text view roles. 
            </summary>
            <param name="textViewRoles">The list of roles to check for inclusion.</param>
            <exception cref="T:System.ArgumentNullException"> if <paramref name="textViewRoles"/> is null.</exception>
            <remarks>
            Returns <b>false</b> if <paramref name="textViewRoles"/> contains no roles. Null values 
            in <paramref name="textViewRoles"/> are ignored.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet.UnionWith(Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet)">
            <summary>
            Compute the union of the set and another text view role set.
            </summary>
            <param name="roleSet"></param>
            <exception cref="T:System.ArgumentNullException"> if <paramref name="roleSet"/> is null.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IVerticalScrollBar">
            <summary>
            Represents a vertical scroll bar.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IVerticalScrollBar.GetYCoordinateOfBufferPosition(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Gets the y-coordinate in the scrollbar track that corresponds to a buffer position.
            </summary>
            <param name="bufferPosition">Desired position.</param>
            <returns>Corresponding y-coordinate.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IVerticalScrollBar.GetYCoordinateOfScrollMapPosition(System.Double)">
            <summary>
            Gets the y-coordinate in the scrollbar track that corresponds to a position in scroll map coordinates.
            </summary>
            <param name="scrollMapPosition">Desired position.</param>
            <returns>Corresponding y-coordinate.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IVerticalScrollBar.GetBufferPositionOfYCoordinate(System.Double)">
            <summary>
            Gets the buffer position that corresponds to a y-coordinate in the scrollbar track.
            </summary>
            <param name="y">Desired y-coordinate.</param>
            <returns>A position in the buffer, even if <paramref name="y"/> is below or above the mapped range of coordinates.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IVerticalScrollBar.Map">
            <summary>
            Gets the mapping between the text position and the scrollbar coordinate for the scrollbar.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IVerticalScrollBar.ThumbHeight">
            <summary>
            Gets the height of the scrollbar thumb in pixels.
            </summary>
            <remarks>
            The last buffer position maps to the bottom of the scrollbar track minus the thumb height.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IVerticalScrollBar.TrackSpanTop">
            <summary>
            Gets the y-coordinate of the top of the scrollbar track as it is rendered in the display (excluding the scroll buttons
            at the top and bottom).
            </summary>
            <remarks>
            <para>If mapping from scrollbar coordinates to positions in the scrollbar's track, the correct mapping is:</para>
            <para>pixel position = (scrollbar coordinate * TrackSpanHeight / (Map.Maximum + Map.ViewportSize)) + TrackSpanTop</para>
            <para>scrollbar coordinate = (pixel position - TrackSpanTop) * (Map.Maximum + Map.ViewportSize) / TrackSpanHeight</para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IVerticalScrollBar.TrackSpanBottom">
            <summary>
            Gets the y-coordinate of the bottom of the scrollbar track as it is rendered in the display (excluding the scroll buttons
            at the top and bottom).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IVerticalScrollBar.TrackSpanHeight">
            <summary>
            Gets the height of the scrollbar track as it is rendered in the display (excluding the scroll buttons
            at the top and bottom).
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.IVerticalScrollBar.TrackSpanChanged">
            <summary>
            Occurs when the span of the scrollbar track dimensions is changed. For example, they could change as a result of resizing
            the view.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IViewScroller">
            <summary>
            Represents a helper class for the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>, and provides basic functionality for scrolling. The
            <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextView.ViewScroller"/> property of <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> is used to get an instance of the this
            interface.
            </summary>
            <remarks>
            <para>Most properties and parameters that are doubles correspond to coordinates or distances in the text
            rendering coordinate system. In this coordinate system, x = 0.0 corresponds to the left edge of the drawing
            surface onto which text is rendered (x = view.ViewportLeft corresponds to the left edge of the viewport), and y = view.ViewportTop corresponds to the top edge of the viewport. The x-coordinate increases
            from left to right, and the y-coordinate increases from top to bottom. </para>
            <para>The horizontal and vertical axes of the view behave differently. When the text in the view is
            formatted, only the visible lines are formatted. As a result,
            a viewport cannot be scrolled horizontally and vertically in the same way.</para>
            <para>A viewport is scrolled horizontally by changing the left coordinate of the
            viewport so that it moves with respect to the drawing surface.</para>
            <para>A view can be scrolled vertically only by performing a new layout.</para>
            <para>Doing a layout in the view may cause the ViewportTop property of the view to change. For example, scrolling down one line will not translate any of the visible lines.
            Instead it will simply change the view's ViewportTop property (causing the lines to move on the screen even though their y-coordinates have not changed).</para>
            <para>Distances in the text rendering coordinate system correspond to logical pixels. If the text rendering
            surface is displayed without any scaling transform, then 1 unit in the text rendering coordinate system
            corresponds to one pixel on the display.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IViewScroller.ScrollViewportVerticallyByPixels(System.Double)">
            <summary>
            Scrolls the viewport vertically by <paramref name="distanceToScroll"/>.
            </summary>
            <param name="distanceToScroll">
            The distance to scroll in the text rendering coordinate system. Positive values scroll the viewport
            up, and negative values scroll the viewport down.
            </param>
            <remarks>
            <para>This can be very slow for large numbers of pixels. You should avoid
            using this method to scroll more than the height of the viewport in either direction.</para>
            <para>The viewport always contains at least one visible line along its top edge, and the distance
            scrolled will be clipped to ensure that this always remains true.</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="distanceToScroll"/> is NaN.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IViewScroller.ScrollViewportVerticallyByLine(Microsoft.VisualStudio.Text.Editor.ScrollDirection)">
            <summary>
            Scrolls the viewport vertically one line up or down.
            </summary>
            <param name="direction">
            The direction in which to scroll.
            </param>
            <remarks>
            <para>The viewport always contains at least one visible line along its top edge, and the distance
            scrolled is clipped to ensure that this always remains true.</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="direction"/> is not a <see cref="T:Microsoft.VisualStudio.Text.Editor.ScrollDirection"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IViewScroller.ScrollViewportVerticallyByLines(Microsoft.VisualStudio.Text.Editor.ScrollDirection,System.Int32)">
            <summary>
            Scrolls the viewport vertically by multiple lines up or down.
            </summary>
            <param name="direction">
            The direction in which to scroll.
            </param>
            <param name="count">
            The number of lines to scroll up or down.
            </param>
            <remarks>
            <para>The viewport always contains at least one visible line along its top edge, and the distance
            scrolled is clipped to ensure that this always remains true.</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="direction"/> is not a <see cref="T:Microsoft.VisualStudio.Text.Editor.ScrollDirection"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is negative.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IViewScroller.ScrollViewportVerticallyByPage(Microsoft.VisualStudio.Text.Editor.ScrollDirection)">
            <summary>
            Scrolls the viewport vertically one page up or down.
            </summary>
            <param name="direction">
            The direction in which to scroll.
            </param>
            <returns><c>true</c> if the view contains one or more fully visible lines prior to scrolling, otherwise <c>false</c>.</returns>
            <remarks>
            <para>When paging down, this method scrolls the view so that the line below the last fully-visible line
            is even with the top of the view. When paging up, this method scrolls the view so that the line 
            above the first fully visible line is even with or slightly above the bottom of the view. 
            It may be shifted up to prevent a partially-visible line at the top of the view.
            If there are no fully-visible lines in the view because the view is too short, 
            the view is scrolled by exactly the viewport height.</para>
            <para>The view cannot be scrolled so that there is a gap between the top of the view and the first line of text.</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="direction"/> is not a <see cref="T:Microsoft.VisualStudio.Text.Editor.ScrollDirection"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IViewScroller.ScrollViewportHorizontallyByPixels(System.Double)">
            <summary>
            Scrolls the viewport horizontally by <paramref name="distanceToScroll"/>.
            </summary>
            <param name="distanceToScroll">
            The distance to scroll the viewport in the text rendering coordinate system. Positive values
            scroll the viewport to the right, and negative values scroll the viewport to the left.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="distanceToScroll"/> is NaN.</exception>
            <remarks>
            A view cannot be scrolled horizontally if word wrap is enabled.
            If word wrap is disabled, the horizontal offset of the view must be between [0.0, max(0.0, formatted content width - viewport width)].
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IViewScroller.EnsureSpanVisible(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Ensures that all the text in <paramref name="span"/> is entirely visible in the view.
            </summary>
            <param name="span">The span to make visible.</param>
            <remarks>
            This is equivalent to scroller.EnsureSpanVisible(span, EnsureSpanVisibleOptions.None);
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IViewScroller.EnsureSpanVisible(Microsoft.VisualStudio.Text.SnapshotSpan,Microsoft.VisualStudio.Text.Editor.EnsureSpanVisibleOptions)">
            <summary>
            Ensures that all the text in <paramref name="span"/> is entirely visible in the view.
            </summary>
            <param name="span">The span to make visible.</param>
            <param name="options">The <see cref="T:Microsoft.VisualStudio.Text.Editor.EnsureSpanVisibleOptions"/>.</param>
            <remarks>
            The view will not be scrolled if the text in <paramref name="span"/> is completely visible. If the text in <paramref name="span"/> is partially visible,
            then the view will be scrolled as little as possible to make the text completely visible.
            If none of the text in <paramref name="span"/> was visible, then it will be centered in the view.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IViewScroller.EnsureSpanVisible(Microsoft.VisualStudio.Text.VirtualSnapshotSpan,Microsoft.VisualStudio.Text.Editor.EnsureSpanVisibleOptions)">
            <summary>
            Ensures that all the text in <paramref name="span"/> is entirely visible in the view.
            </summary>
            <param name="span">The span to make visible.</param>
            <param name="options">The <see cref="T:Microsoft.VisualStudio.Text.Editor.EnsureSpanVisibleOptions"/>.</param>
            <remarks>
            The view will not be scrolled if the text in <paramref name="span"/> is completely visible. If the text in <paramref name="span"/> is partially visible,
            then the view will be scrolled as little as possible to make the text completely visible.
            If none of the text in <paramref name="span"/> was visible, then it will be centered in the view.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.EnsureSpanVisibleOptions">
            <summary>
            Options to control the behavior of <see cref="T:Microsoft.VisualStudio.Text.Editor.IViewScroller"/> EnsureSpanVisible.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.EnsureSpanVisibleOptions.ShowStart">
            <summary>
            Ensure that the start of the span is visible if it is impossible to display the entire span.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.EnsureSpanVisibleOptions.MinimumScroll">
            <summary>
            Do the minimum amount of scrolling to display the span in the view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.EnsureSpanVisibleOptions.AlwaysCenter">
            <summary>
            Always center the span in the view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.EnsureSpanVisibleOptions.None">
            <summary>
            Ensure that the end of the span is visible if it is impossible to display the entire span. If none of the text
            in the span is currently visible, center the span in the view.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.MarginContainerAttribute">
            <summary>
            Specifies the type of margin container.
            </summary>
            <remarks>The Name attribute is used for associating a name with a component part.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MarginContainerAttribute.#ctor(System.String)">
            <summary>
            Instantiates a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Editor.MarginContainerAttribute"/>.
            </summary>
            <param name="marginContainer">The name of the container for this margin.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="marginContainer"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="marginContainer"/> is an empty string.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.MarginContainerAttribute.MarginContainer">
            <summary>
            The name of the margin container.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.MouseHoverAttribute">
            <summary>
            An attribute to be placed on an event handler for <see cref="E:Microsoft.VisualStudio.Text.Editor.ITextView.MouseHover"/>,
            specifying the delay between the time when the mouse stops moving
            and the generation of the hover event.
            </summary>
            <remarks>The default, if no MouseHoverAttribute is specified, is 150ms.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseHoverAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.MouseHoverAttribute"/>.
            </summary>
            <param name="delay">The time in milliseconds between the time when the mouse stops moving and the generation of the hover event.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.MouseHoverAttribute.Delay">
            <summary>
            Gets the time in milliseconds between the time when the mouse stops moving and the generation of the hover event.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.MouseHoverEventArgs">
            <summary>
            Provides information for a MouseHover event of <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseHoverEventArgs.#ctor(Microsoft.VisualStudio.Text.Editor.ITextView,System.Int32,Microsoft.VisualStudio.Text.IMappingPoint)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Editor.MouseHoverEventArgs"/>.
            </summary>
            <param name="view">The view in which the hover event is being generated.</param>
            <param name="position">The position of the character under the mouse in the snapshot span of the view.</param>
            <param name="textPosition">The position mapped to the buffer graph of the character under the mouse.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="view"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position"/> is negative or greater than the length of the view's buffer.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.MouseHoverEventArgs.View">
            <summary>
            The view for which the hover event is being generated.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.MouseHoverEventArgs.Position">
            <summary>
            The position in the SnapshotSpan of the character under the mouse at the time of the hover.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.MouseHoverEventArgs.TextPosition">
            <summary>
            The position mapped to the buffer graph of the character under the mouse at the time of the hover.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames">
            <summary>
            Specifies the names of the pre-defined margins supplied by Visual Studio.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.Left">
            <summary>
            The margin to the left of the text view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.Right">
            <summary>
            The margin to the right of the text view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.Top">
            <summary>
            The margin above the text view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.Bottom">
            <summary>
            The margin below the text view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.LeftSelection">
            <summary>
            The margin to the left of the text view that implements mouse handlers for line selection.
            This behavior is inherited by margins contained in the left selection margin.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.Outlining">
            <summary>
            The margin to the left of the text view that allows collapsing and expansion of outlining regions.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.LineNumber">
            <summary>
            The margin to the left of the text view that shows line numbers.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.HorizontalScrollBar">
            <summary>
            The standard horizontal scrollbar.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.HorizontalScrollBarContainer">
            <summary>
            The container margin that contains the <see cref="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.HorizontalScrollBar"/> by default.
            </summary>
            <remarks>
            Other margins can be placed to the left or right of the <see cref="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.HorizontalScrollBar"/> depending on their order attribute.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.VerticalScrollBar">
            <summary>
            The standard vertical scrollbar.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.VerticalScrollBarContainer">
            <summary>
            The container margin that contains the <see cref="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.VerticalScrollBar"/> by default.
            </summary>
            <remarks>
            Other margins can be placed above or below the <see cref="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.VerticalScrollBar"/> depending on their order attribute.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.RightControl">
            <summary>
            A vertical margin container in the <see cref="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.Right"/> margin that contains the <see cref="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.VerticalScrollBarContainer"/>.
            </summary>
            <remarks>
            Margins that wish to appear on top or bottom of the vertical scrollbar and all its siblings should be added
            to this container margin.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.BottomControl">
            <summary>
            A horizontal margin container in the <see cref="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.Bottom"/> margin that contains the <see cref="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.HorizontalScrollBarContainer"/>.
            </summary>
            <remarks>
            Margins that wish to appear to the left or right of the horizontal scrollbar and all its siblings should be added to
            this container margin.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.Spacer">
            <summary>
            The margin that appears between the line number and outlining margins and shows which text
            has changed in the current session.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.Glyph">
            <summary>
            The margin to the left of the text view that shows breakpoint and other glyphs.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.ZoomControl">
            <summary>
            The margin to the left of the horizontal scroll bar that hosts a zoom control for zooming the view. 
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles">
            <summary>
            Specifies the names of the pre-defined text view roles supplied by Visual Studio.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles.Document">
            <summary>
            The predefined Document role. Applies to text views of entities, typically stored in files, that have
            a definite first line and last line. This excludes entities such as output logs or textual displays of
            data that are presented in a form.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles.Structured">
            <summary>
            The predefined Structured role. Applies to text views of entities that have internal structure that should
            be exposed by editor facilities such as Outlining.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles.Interactive">
            <summary>
            The predefined Interactive role. Applies to text views with which the user can interact using the mouse and/or
            keyboard. Views that are not interactive cannot display a caret or a selection and cannot have keyboard input.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles.Editable">
            <summary>
            The predefined Editable role. Applies to text views that can be changed using the keyboard.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles.Analyzable">
            <summary>
            The predefined Analyzable role. Applies to text views of entities that can be analyzed for errors or
            other information (such as "quick info").
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles.Zoomable">
            <summary>
            The predefined Zoomable role. Applies to text views of entities that allow the user to perform zooming operations.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles.PrimaryDocument">
            <summary>
            The predefined Primary Document role. Applies to text views of documents that are open for mainline editing,
            excluding auxiliary views of documents.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles.Debuggable">
            <summary>
            The predefined Debuggable role. Applies to text views of entities in which the debugger can display information
            at runtime.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ScrollDirection">
            <summary>
            The direction in which to scroll the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.ScrollDirection.Up">
            <summary>
            Scroll up.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.ScrollDirection.Down">
            <summary>
            Scroll down.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.TextSelectionMode">
            <summary>
            Specifies the text selection mode.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.TextSelectionMode.Stream">
            <summary>
            A simple selection (only one span)
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.TextSelectionMode.Box">
            <summary>
            A box selection (from a start line and column to an end line and column).
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.TextViewCreatedEventArgs">
            <summary>
            Provides information for newly created <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextViewCreatedEventArgs.#ctor(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Constructs a <see cref="T:Microsoft.VisualStudio.Text.Editor.TextViewCreatedEventArgs"/>.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> that was created.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextViewCreatedEventArgs.TextView">
            <summary>
            The newly created <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs">
            <summary>
            Provides information for a Layout Changed event of <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs.#ctor(Microsoft.VisualStudio.Text.Editor.ViewState,Microsoft.VisualStudio.Text.Editor.ViewState,System.Collections.Generic.IList{Microsoft.VisualStudio.Text.Formatting.ITextViewLine},System.Collections.Generic.IList{Microsoft.VisualStudio.Text.Formatting.ITextViewLine})">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs"/>.
            </summary>
            <param name="oldState">
            State of the view prior to the layout.
            </param>
            <param name="newState">
            State of the view after the layout.
            </param>
            <param name="newOrReformattedLines">A list of the new or reformatted <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/>.</param>
            <param name="translatedLines">A list of the translated <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/>.</param>
            <exception name="ArgumentNullException"><paramref name="oldState"/>, <paramref name="newState"/>, <paramref name="translatedLines"/> or <paramref name="newOrReformattedLines"/> is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs.OldViewState">
            <summary>
            State of the view prior to the layout.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs.NewViewState">
            <summary>
            State of the view after the layout.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs.HorizontalTranslation">
            <summary>
            Has the view translated horizontally since the last layout?
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs.VerticalTranslation">
            <summary>
            Has the view translated vertically since the last layout?
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs.OldSnapshot">
            <summary>
            Gets the old snapshot of the view.
            </summary>
            <remarks>Deprecated. Use OldViewState.EditSnapshot instead.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs.NewSnapshot">
            <summary>
            Gets the new snapshot produced by the changed layout.
            </summary>
            <remarks>Deprecated. Use NewViewState.EditSnapshot instead.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs.NewOrReformattedLines">
            <summary>
            Gets a read-only collection of new or reformatted lines.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs.TranslatedLines">
            <summary>
            Gets a read-only collection of translated lines.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs.NewOrReformattedSpans">
            <summary>
            Gets a collection the spans that are either new or have been reformatted.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs.TranslatedSpans">
            <summary>
            Gets a collection spans that have been translated.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.TextViewRoleAttribute">
            <summary>
            Use this attribute to specify the kinds of TextViews to which an extension applies.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextViewRoleAttribute.#ctor(System.String)">
            <summary>
            Construct a new instance of the attribute.
            </summary>
            <param name="role">The case-insensitive name of the role.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="role"/> is null or empty.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextViewRoleAttribute.TextViewRoles">
            <summary>
            The role name.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ViewRelativePosition">
            <summary>
            Defines the meaning of the verticalOffset parameter in the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.DisplayTextLineContaining(...).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.ViewRelativePosition.Top">
            <summary>
            The offset with respect to the top of the view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.ViewRelativePosition.Bottom">
            <summary>
            The offset with respect to the bottom of the view.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ViewState">
            <summary>
            View state at a particular point in time.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ViewState.#ctor(Microsoft.VisualStudio.Text.Editor.ITextView,System.Double,System.Double)">
            <summary>
            Constructs a <see cref="T:Microsoft.VisualStudio.Text.Editor.ViewState"/>.
            </summary>
            <param name="view">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> for this view state.</param>
            <param name="effectiveViewportWidth">The width of the view port for <paramref name="view"/>.</param>
            <param name="effectiveViewportHeight">The height of the view port for <paramref name="view"/>.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ViewState.#ctor(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Constructs a <see cref="T:Microsoft.VisualStudio.Text.Editor.ViewState"/>.
            </summary>
            <param name="view">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> for this view state.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ViewState.ViewportLeft">
            <summary>
            Gets the X-coordinate of the viewport's left edge.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ViewState.ViewportTop">
            <summary>
            Gets the Y-coordinate of the viewport's top edge.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ViewState.ViewportWidth">
            <summary>
            Gets the Width of the viewport.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ViewState.ViewportHeight">
            <summary>
            Gets the Height of the viewport.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ViewState.ViewportRight">
            <summary>
            Gets the X-coordinate of the viewport's right edge.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ViewState.ViewportBottom">
            <summary>
            Gets the Y-coordinate of the viewport's bottom edge.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ViewState.VisualSnapshot">
            <summary>
            Gets the View's visual snapshot.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ViewState.EditSnapshot">
            <summary>
            Gets the view's edit snapshot.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.WordWrapStyles">
            <summary>
            Sets a bitwise combination of enumeration values to specify the word wrap style of an <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>. 
            </summary>
            <remarks>The VisibleGlyphs and AutoIndent bits will have no effect
            unless the WordWrap bit is also set.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.WordWrapStyles.None">
            <summary>
            Word wrap is disabled.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.WordWrapStyles.WordWrap">
            <summary>
            Word wrap is enabled.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.WordWrapStyles.VisibleGlyphs">
            <summary>
            If word wrap is enabled, use visible glyphs.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.WordWrapStyles.AutoIndent">
            <summary>
            If word wrap is enabled, use auto-indent.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ZoomConstants">
            <summary>
            Defines the constants used for zoom operations 
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.ZoomConstants.MaxZoom">
            <summary>
            The maximum zoom allowed on the text view
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.ZoomConstants.MinZoom">
            <summary>
            The minimum zoom allowed on the text view
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.ZoomConstants.DefaultZoom">
            <summary>
            The default zoom level on the text view
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.ZoomConstants.ScalingFactor">
            <summary>
            The scaling factor used for zooming in and out of the view. The view zooms by a factor of 10%
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.IAdornmentElement">
            <summary>
            Represents a sequence element that consists of an adornment.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.ISequenceElement">
            <summary>
            Represents the basic element in a sequence of elements that compose an <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ISequenceElement.Span">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.IMappingSpan"/> of the element.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ISequenceElement.ShouldRenderText">
            <summary>
            Determines whether the text in the span should be rendered in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.IAdornmentElement.Width">
            <summary>
            Gets the width of the adornment (in logical pixels).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.IAdornmentElement.TopSpace">
            <summary>
            Gets the amount of space (in logical pixels) to reserve above top of the text for the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.IAdornmentElement.Baseline">
            <summary>
            The distance (in logical pixel)s between the top of the adornment text and the baseline of the
            <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/>.
            </summary>
            <remarks><para>This property should be equal to <see cref="P:Microsoft.VisualStudio.Text.Formatting.IAdornmentElement.TextHeight"/> unless you plan to draw into the space between the baseline of
            <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> and its TextBottom.</para>
            <para>The size of the baseline affects the amount of space reserved for text on an <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/>, which is used to
            determine the vertical size of the caret.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.IAdornmentElement.TextHeight">
            <summary>
            Gets the height of the adornment text. 
            </summary>
            <remarks><para>This affects the amount of space reserved for text on an <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/>, which is used to
            determine the vertical size of the caret.</para></remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.IAdornmentElement.BottomSpace">
            <summary>
            The amount of space (in logical pixels) to reserve below the bottom of the text in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.IAdornmentElement.IdentityTag">
            <summary>
            Gets the unique identifier associated with this adornment.
            </summary>
            <remarks>This ID can be passed to <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/>.GetAdornmentBounds() to find the location
            of this adornment on a line in the view.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.IAdornmentElement.ProviderTag">
            <summary>
            Gets the unique identifier associated with the provider of the adornment.
            </summary>
            <remarks>This ID can be passed to <see cref="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetAdornmentTags(System.Object)"/> to find the list
            off adornment identity tags located on the line.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.IAdornmentElement.Affinity">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.PositionAffinity"/> of the adornment.
            </summary>
            <remarks>This is used only when the length of the adornment element span in the source buffer is zero.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentCollection">
            <summary>
            Represents a list of <see cref="T:Microsoft.VisualStudio.Text.Formatting.ISequenceElement"/> objects generated by the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentCollection.Sequencer">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer"/> that generated the collection.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer">
            <summary>
            Creates a sequence of text and adornment elements to compose an <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine"/>.  
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer.CreateTextAndAdornmentCollection(Microsoft.VisualStudio.Text.ITextSnapshotLine,Microsoft.VisualStudio.Text.ITextSnapshot)">
            <summary>
            Creates a sequence of text and adornment elements that compose the specified <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine"/>.
            </summary>
            <param name="topLine">The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine"/> in the <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer.TopBuffer"/> to sequence.</param>
            <param name="sourceTextSnapshot">The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> of the <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer.SourceBuffer"/> that corresponds to topLine.</param>
            <returns>A normalized collection of <see cref="T:Microsoft.VisualStudio.Text.Formatting.ISequenceElement"/> objects that contain the text and adornment elements.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer.CreateTextAndAdornmentCollection(Microsoft.VisualStudio.Text.SnapshotSpan,Microsoft.VisualStudio.Text.ITextSnapshot)">
            <summary>
            Creates a sequence of text and adornment elements that compose the specified <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/>.
            </summary>
            <param name="topSpan">The <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> in the <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer.TopBuffer"/> to sequence.</param>
            <param name="sourceTextSnapshot">The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> of the <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer.SourceBuffer"/> that corresponds to topSpan.</param>
            <returns>A normalized collection of <see cref="T:Microsoft.VisualStudio.Text.Formatting.ISequenceElement"/> objects that contain the text and adornment elements.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer.BufferGraph">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Projection.IBufferGraph"/> used by the sequencer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer.TopBuffer">
            <summary>
            Gets the visual <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> of the buffer graph.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer.SourceBuffer">
            <summary>
            Gets the edit buffer of the buffer graph.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer.SequenceChanged">
            <summary>
            Occurs when there has been a change in the data used by the sequencer.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencerFactoryService">
            <summary>
            Service to create an instance of an <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer"/>.
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            ITextAndAdornmentSequencerFactoryService factory = null;
            </remarks>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencerFactoryService.Create(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer"/> for the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </summary>
            <param name="view">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer"/>.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine">
            <summary>
            Represents text that has been formatted for display in a text view.
            </summary>
            <remarks>
            <para>Most properties and parameters that are doubles correspond to coordinates or distances in the text
            rendering coordinate system. In this coordinate system, x = 0.0 corresponds to the left edge of the drawing
            surface onto which text is rendered (x = view.ViewportLeft corresponds to the left edge of the viewport), and y = view.ViewportTop corresponds to the top edge of the viewport. The x-coordinate increases
            from left to right, and the y-coordinate increases from top to bottom. </para>
            <para>The horizontal and vertical axes of the view behave differently. When the text in the view is
            formatted, only the visible lines are formatted. As a result,
            a viewport cannot be scrolled horizontally and vertically in the same way.</para>
            <para>A viewport is scrolled horizontally by changing the left coordinate of the
            viewport so that it moves with respect to the drawing surface.</para>
            <para>A view can be scrolled vertically only by performing a new layout.</para>
            <para>Doing a layout in the view may cause the ViewportTop property of the view to change. For example, scrolling down one line will not translate any of the visible lines.
            Instead it will simply change the view's ViewportTop property (causing the lines to move on the screen even though their y-coordinates have not changed).</para>
            <para>Distances in the text rendering coordinate system correspond to logical pixels. If the text rendering
            surface is displayed without any scaling transform, then 1 unit in the text rendering coordinate system
            corresponds to one pixel on the display.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetBufferPositionFromXCoordinate(System.Double,System.Boolean)">
            <summary>
            Gets the buffer position of the character whose character bounds contains the given x-coordinate.
            </summary>
            <param name="xCoordinate">The x-coordinate of the desired character.</param>
            <param name="textOnly">If true, then this method will return null if <paramref name="xCoordinate"/> is over an adornment.</param>
            <returns>The text buffer-based point of the character at x, or null if there is no character at that position.</returns>
            <remarks>
            <para>
            Please note that the rightmost edge of a character bound is considered to be contained in its following character.
            </para>
            <para>
            The rightmost edge of the last character's bounds don't map to any character.
            </para>
            <para>
            If <paramref name="textOnly"/> is true and <paramref name="xCoordinate"/> is over an adornment, then the text position assoicated with the adornment is returned.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetBufferPositionFromXCoordinate(System.Double)">
            <summary>
            Gets the buffer position of the character whose character bounds contains the given x-coordinate.
            </summary>
            <param name="xCoordinate">The x-coordinate of the desired character.</param>
            <returns>The text buffer-based point of the character at x, or null if there is no character at that position.</returns>
            <remarks>
            <para>
            This is equivalent to GetBufferPositionFromXCoordinate(xCoordinate, false).
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetVirtualBufferPositionFromXCoordinate(System.Double)">
            <summary>
            Gets the buffer position of the character whose character bounds contains the given x-coordinate.
            </summary>
            <param name="xCoordinate">The x-coordinate of the desired character.</param>
            <returns>The text buffer-based point of the character at x</returns>
            <remarks>
            <para>
            If there are no characters at the provided x-coordinate, a point in virtual space will be returned.
            </para>
            <para>
            If the provided x-coordinate is to the left of the start of the line, the buffer position of the line's
            left edge will be returned.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetInsertionBufferPositionFromXCoordinate(System.Double)">
            <summary>
            Gets the buffer position used if new data were to be inserted at the given x-coordinate.
            </summary>
            <param name="xCoordinate">The x-coordinate of the desired point.</param>
            <remarks>
            <para>
            If there are no characters at the provided x-coordinate, a point in virtual space will be returned.
            </para>
            <para>
            If the provided x-coordinate is to the left of the start of the line, the buffer position of the line's
            left edge will be returned.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.ContainsBufferPosition(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Determines whether the specified buffer position lies within this text line.
            </summary>
            <param name="bufferPosition">The buffer position.</param>
            <returns><c>true</c> if <paramref name="bufferPosition"/> lies within this text line, otherwise <c>false</c>.</returns>
            <remarks>
            This method handles the special processing required for the last line of the buffer.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetTextElementSpan(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Gets the span whose text elementindex corresponds to the given buffer position.
            </summary>
            <param name="bufferPosition">The buffer position.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> that corresponds to the given text element.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetCharacterBounds(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Calculates the bounds of the character at the specified buffer position.
            </summary>
            <param name="bufferPosition">
            The text buffer-based index of the character.
            </param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds"/> structure.
            </returns>
            <remarks>Bi-directional text will have a leading edge that lies to the right of its trailing edge.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferPosition"/> does not correspond to a position on this line.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetCharacterBounds(Microsoft.VisualStudio.Text.VirtualSnapshotPoint)">
            <summary>
            Calculates the bounds of the character at the specified buffer position.
            </summary>
            <param name="bufferPosition">
            The text buffer-based index of the character.
            </param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds"/> structure.
            </returns>
            <remarks>Bi-directional text will have a leading edge that lies to the right of its trailing edge.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferPosition"/> does not correspond to a position on this line.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetExtendedCharacterBounds(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Calculates the bounds of the character at the specified buffer position, including any adjacent
            space-negotiating adornments.
            </summary>
            <param name="bufferPosition">
            The text buffer-based index of the character.
            </param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds"/> structure.
            </returns>
            <remarks>Bi-directional text will have a leading edge that lies to the right of its trailing edge.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferPosition"/> does not correspond to a position on this line.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetExtendedCharacterBounds(Microsoft.VisualStudio.Text.VirtualSnapshotPoint)">
            <summary>
            Calculates the bounds of the character at the specified virtual buffer position, including any adjacent
            space-negotiating adornments.
            </summary>
            <param name="bufferPosition">
            The text buffer-based index of the character.
            </param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds"/> structure.
            </returns>
            <remarks>Bi-directional text will have a leading edge that lies to the right of its trailing edge.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferPosition"/> does not correspond to a position on this line.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetAdornmentBounds(System.Object)">
            <summary>
            Calculates the bounds of the specified adornment.
            </summary>
            <param name="identityTag">
            The <c>IAdornmentElement.IdentityTag</c> of the adornment whose bounds should be calculated.
            </param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds"/> structure if this line contains an adornment with the specified <paramref name="identityTag"/>,
            otherwise null.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetNormalizedTextBounds(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Gets a collection of <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds"/> structures for the text that corresponds to the given span.
            </summary>
            <param name="bufferSpan">
            The <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> representing the text for which to compute the text bounds.
            </param>
            <returns>
            A collection of <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds"/> structures that contain the text specified in <paramref name="bufferSpan"/>.
            </returns>
            <remarks>
            <para>
            If the line contains bidirectional text, the <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds"/> structures that are returned may be disjoint.
            </para>
            <para>
            The height and top of the bounds will correspond to the top and bottom of this <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSpan"/> is not a legal span in the underlying text buffer.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.IntersectsBufferSpan(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Determines whether a <paramref name="bufferSpan"/> intersects this text line.
            </summary>
            <param name="bufferSpan">The buffer span.</param>
            <returns><c>true</c> if <paramref name="bufferSpan"/> intersects the text line, otherwise <c>false</c>.</returns>
            <remarks>
            This method handles the special processing required for the last line of the buffer.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetAdornmentTags(System.Object)">
            <summary>
            Gets the adornments positioned on the line.
            </summary>
            <param name="providerTag">The identity tag of the provider.
            This tag should match <c>SpaceNegotiatingAdornmentTag.ProviderTag</c>.</param>
            <returns>A sequence of adornment identity tags in order of their appearance on the line. The collection is always non-null but may be empty.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="providerTag "/> is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.IdentityTag">
            <summary>
            Gets a tag that can be used to track the identity of an <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> across layouts in the view.
            </summary>
            <remarks>
            <para>
            If an <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> has the same identity tag as the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> from an earlier layout,
            then both text view lines correspond to the same text, even when the
            text has been moved without being modifed, or when the text view lines appear at different locations
            in the view.
            </para>
            <para>
            This property can be called even when the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> is invalid.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Snapshot">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> on which this map is based.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.IsFirstTextViewLineForSnapshotLine">
            <summary>
            Determines whether this <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> is the first line in the list of lines formatted for a particular
            <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine"/>.
            </summary>
            <remarks>This property will always be <c>true</c> for lines that are not word-wrapped.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.IsLastTextViewLineForSnapshotLine">
            <summary>
            Determines whether this <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> is the last line in the list of lines formatted for a particular
            <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine"/>.
            </summary>
            <remarks>This property will always be <c>true</c> for lines that are not word-wrapped.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Baseline">
            <summary>
            Gets the distance from the top of the text to the baseline text on the line.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Extent">
            <summary>
            Gets the extent of the line, excluding any line break characters.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.ExtentAsMappingSpan">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.IMappingSpan"/> that corresponds to the <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Extent"/> of the line.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.ExtentIncludingLineBreak">
            <summary>
            Gets the extent of the line, including any line break characters.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.ExtentIncludingLineBreakAsMappingSpan">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.IMappingSpan"/> that corresponds to <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.ExtentIncludingLineBreak"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Start">
            <summary>
            Gets the position in <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Snapshot"/> of the first character in the line.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Length">
            <summary>
            Gets the length of the line, excluding any line break characters.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.LengthIncludingLineBreak">
            <summary>
            Gets the length of the line, including any line break characters.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.End">
            <summary>
             Gets the position of the first character past the end of the line, excluding any
            line break characters. In most cases this property references a line break character, except 
            for the last line in the buffer, in which case it contains a
            position past the end of the buffer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.EndIncludingLineBreak">
            <summary>
            Gets the position of the first character past the end of the line, including any
            line break characters In most cases this property references the first character in 
            the following line, unless this is the last line, in which case it contains a
            position past the end of the buffer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.LineBreakLength">
            <summary>
            Gets the length of the line break sequence (for example, "\r\n") that appears at the end of this line.
            </summary>
            <value>A integer in the range [0..2].</value>
            <remarks>
            If this <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> corresponds to a line that was word-wrapped, then the length of its
            line break will be zero. The length of the line break will also be zero for the last line in the buffer.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Left">
            <summary>
            Gets the position of the left edge of this line in the text rendering coordinate system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Top">
            <summary>
            Gets the position of the top edge of this line in the text rendering coordinate system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Height">
            <summary>
            Gets the distance between the top and bottom edge of this line.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.TextTop">
            <summary>
            Gets the y-coordinate of the top of the text in the rendered line.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.TextBottom">
            <summary>
            Gets the y-coordinate of the bottom of the text in the rendered line.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.TextHeight">
            <summary>
            Gets the vertical distance between the top and bottom of the text in the rendered line.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.TextLeft">
            <summary>
            Gets the x-coordinate of the left edge of the text in the rendered line.
            </summary>
            <remarks>This will always be the same as <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Left"/>.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.TextRight">
            <summary>
            Gets the x-coordinate of the right edge of the text in the rendered line.
            </summary>
            <remarks>This does not include the <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.EndOfLineWidth"/> for lines that have a line break.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.TextWidth">
            <summary>
            Gets the horizontal distance between <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.TextRight"/> and <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.TextLeft"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Width">
            <summary>
            Gets the distance between the left and right edges of this line.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Bottom">
            <summary>
            Gets the position of the bottom edge of this line in the text rendering coordinate system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Right">
            <summary>
            Gets the position of the right edge of this line in the text rendering coordinate system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.EndOfLineWidth">
            <summary>
            Gets the distance from the right edge of the last character in this line to
            the end of the space of this line. This may include padding for line break
            characters or for end of file characters.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.VirtualSpaceWidth">
            <summary>
            Get the width of the virtual spaces at the end of this line.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.IsValid">
            <summary>
            Determines whether this text view line is still valid.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.LineTransform">
            <summary>
            Gets the <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.LineTransform"/> used to render this line.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.DefaultLineTransform">
            <summary>
            Gets the default <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.LineTransform"/> used to render this line.
            </summary>
            <remarks>
            This is the line transform used if no other extension defines a <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.LineTransform"/> for the line.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.VisibilityState">
            <summary>
            Gets the visibility state of this rendered text line with respect to the top and bottom of the view.
            </summary>
            <exception cref="T:System.ObjectDisposedException">This <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> has been disposed.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.DeltaY">
            <summary>
            Gets the change in the top of this rendered textline between between the value of <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Top"/>
            in the current layout and the value of <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Top"/> in the previous layout.
            </summary>
            <remarks>This property is 0.0 for rendered text lines that did not exist in the
            previous layout.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Change">
            <summary>
            Gets the change to this rendered textline between the current layout and
            the previous layout.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.LineTransform">
            <summary>
            Represents the transform from a formatted text line to a rendered text line.
            </summary>
            <remarks>
            <para>Most properties and parameters that are doubles correspond to coordinates or distances in the text
            rendering coordinate system. In this coordinate system, x = 0.0 corresponds to the left edge of the drawing
            surface onto which text is rendered (x = view.ViewportLeft corresponds to the left edge of the viewport), and y = view.ViewportTop corresponds to the top edge of the viewport. The x-coordinate increases
            from left to right, and the y-coordinate increases from top to bottom. </para>
            <para>The horizontal and vertical axes of the view behave differently. When the text in the view is
            formatted, only the visible lines are formatted. As a result,
            a viewport cannot be scrolled horizontally and vertically in the same way.</para>
            <para>A viewport is scrolled horizontally by changing the left coordinate of the
            viewport so that it moves with respect to the drawing surface.</para>
            <para>A view can be scrolled vertically only by performing a new layout.</para>
            <para>Doing a layout in the view may cause the ViewportTop property of the view to change. For example, scrolling down one line will not translate any of the visible lines.
            Instead it will simply change the view's ViewportTop property (causing the lines to move on the screen even though their y-coordinates have not changed).</para>
            <para>Distances in the text rendering coordinate system correspond to logical pixels. If the text rendering
            surface is displayed without any scaling transform, then 1 unit in the text rendering coordinate system
            corresponds to one pixel on the display.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.LineTransform.#ctor(System.Double)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform"/>. 
            </summary>
            <param name="verticalScale">The vertical scale factor to be applied to the text of the line and the space above and below the line.</param>
            <remarks>
            <para>All <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform"/> objects on a formatted line of text are combined using the <see cref="M:Microsoft.VisualStudio.Text.Formatting.LineTransform.Combine(Microsoft.VisualStudio.Text.Formatting.LineTransform,Microsoft.VisualStudio.Text.Formatting.LineTransform)"/> operator below. 
            The resulting <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform"/> determines the placement and scaling of the rendered line of text.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.LineTransform.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform"/>.  
            </summary>
            <param name="topSpace">The amount of space required above the text of the line before applying <paramref name="verticalScale"/>.</param>
            <param name="bottomSpace">The amount of space required below the text of the line before applying <paramref name="verticalScale"/>.</param>
            <param name="verticalScale">The vertical scale factor to be applied to the text of the line and the space above and below the line.</param>
            <remarks>
            <para>All the <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform"/> objects on a formatted line of text are combined
            using the <see cref="M:Microsoft.VisualStudio.Text.Formatting.LineTransform.Combine(Microsoft.VisualStudio.Text.Formatting.LineTransform,Microsoft.VisualStudio.Text.Formatting.LineTransform)"/> operator, and the combined <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform"/> determines 
            the placement and scaling of the rendered line of text.</para>
            <para>Negative <paramref name="topSpace"/> and <paramref name="bottomSpace"/> values will be ignored,
            since they will always be combined with
            at least one <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform"/> with non-negative space requests.</para>
            <para>The rendered height of a line will be 
            ((line text height) + <paramref name="topSpace"/> + <paramref name="bottomSpace"/>) * <paramref name="verticalScale"/>.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.LineTransform.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform"/>.  
            </summary>
            <param name="topSpace">The amount of space required above the text of the line before applying <paramref name="verticalScale"/>.</param>
            <param name="bottomSpace">The amount of space required below the text of the line before applying <paramref name="verticalScale"/>.</param>
            <param name="verticalScale">The vertical scale factor to be applied to the text of the line and the space above and below the line.</param>
            <param name="right">The x-coordinate of the right edge the line (typically the right edge of any adornment on the line that extends to the right of the line's text).</param>
            <remarks>
            <para>All the <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform"/> objects on a formatted line of text are combined
            using the <see cref="M:Microsoft.VisualStudio.Text.Formatting.LineTransform.Combine(Microsoft.VisualStudio.Text.Formatting.LineTransform,Microsoft.VisualStudio.Text.Formatting.LineTransform)"/> operator, and the combined <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform"/> determines 
            the placement and scaling of the rendered line of text.</para>
            <para>Negative <paramref name="topSpace"/> and <paramref name="bottomSpace"/> values will be ignored,
            since they will always be combined with
            at least one <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform"/> with non-negative space requests.</para>
            <para>The rendered height of a line will be 
            ((line text height) + <paramref name="topSpace"/> + <paramref name="bottomSpace"/>) * <paramref name="verticalScale"/>.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.LineTransform.Combine(Microsoft.VisualStudio.Text.Formatting.LineTransform,Microsoft.VisualStudio.Text.Formatting.LineTransform)">
            <summary>
            Combines two <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform"/> objects.
            </summary>
            <param name="transform1">The first <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform"/> to combine.</param>
            <param name="transform2">The second <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform"/> to combine.</param>
            <returns>The combined <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform"/>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.LineTransform.GetHashCode">
            <summary>
            Gets the hash code for this object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.LineTransform.Equals(System.Object)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform"/> objects are the same.
            </summary>
            <param name="obj">The object to compare for equality.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.LineTransform.op_Equality(Microsoft.VisualStudio.Text.Formatting.LineTransform,Microsoft.VisualStudio.Text.Formatting.LineTransform)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform"/> objects are the same.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.LineTransform.op_Inequality(Microsoft.VisualStudio.Text.Formatting.LineTransform,Microsoft.VisualStudio.Text.Formatting.LineTransform)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform"/> objects are different.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.LineTransform.TopSpace">
            <summary>
            Gets the amount of space required above the text of the line before applying the <see cref="P:Microsoft.VisualStudio.Text.Formatting.LineTransform.VerticalScale"/> factor.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.LineTransform.BottomSpace">
            <summary>
            Gets the amount of space required below the text of the line before applying the <see cref="P:Microsoft.VisualStudio.Text.Formatting.LineTransform.VerticalScale"/> factor.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.LineTransform.VerticalScale">
            <summary>
            Gets the vertical scale factor to be applied to the text of the line and the space above and below the line.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.LineTransform.Right">
            <summary>
            Gets the x-coordinate of the effective right edge of the line.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.TextBounds">
            <summary>
            The bounds of a span of text in a given text line.
            </summary>
            <remarks>
            <para>Most properties and parameters that are doubles correspond to coordinates or distances in the text
            rendering coordinate system. In this coordinate system, x = 0.0 corresponds to the left edge of the drawing
            surface onto which text is rendered (x = view.ViewportLeft corresponds to the left edge of the viewport), and y = view.ViewportTop corresponds to the top edge of the viewport. The x-coordinate increases
            from left to right, and the y-coordinate increases from top to bottom. </para>
            <para>The horizontal and vertical axes of the view behave differently. When the text in the view is
            formatted, only the visible lines are formatted. As a result,
            a viewport cannot be scrolled horizontally and vertically in the same way.</para>
            <para>A viewport is scrolled horizontally by changing the left coordinate of the
            viewport so that it moves with respect to the drawing surface.</para>
            <para>A view can be scrolled vertically only by performing a new layout.</para>
            <para>Doing a layout in the view may cause the ViewportTop property of the view to change. For example, scrolling down one line will not translate any of the visible lines.
            Instead it will simply change the view's ViewportTop property (causing the lines to move on the screen even though their y-coordinates have not changed).</para>
            <para>Distances in the text rendering coordinate system correspond to logical pixels. If the text rendering
            surface is displayed without any scaling transform, then 1 unit in the text rendering coordinate system
            corresponds to one pixel on the display.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextBounds.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds"/>.
            </summary>
            <param name="leading">
            The x-coordinate of the leading edge of the bounding rectangle.
            </param>
            <param name="top">
            The y-coordinate of the top edge of the bounding rectangle.
            </param>
            <param name="bidiWidth">;
            The distance between the leading and trailing edges of the bounding rectangle. This can be negative for right-to-left text.
            </param>
            <param name="height">
            The height of the rectangle. The height must be non-negative.
            </param>
            <param name="textTop">
            The top of the text, measured from the line that contains the text.
            </param>
            <param name="textHeight">
            The height of the text, measured from the line that contains the text.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="leading"/> or <paramref name="bidiWidth"/> is not a valid number, or
            <paramref name="height"/> is negative or not a valid number.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextBounds.ToString">
            <summary>
            Converts the <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds"/> object to a string.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextBounds.GetHashCode">
            <summary>
            Gets the hash code of the see cref="TextBounds"/> object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextBounds.Equals(System.Object)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds"/> objects are the same.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextBounds.op_Equality(Microsoft.VisualStudio.Text.Formatting.TextBounds,Microsoft.VisualStudio.Text.Formatting.TextBounds)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds"/> objects are the same.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextBounds.op_Inequality(Microsoft.VisualStudio.Text.Formatting.TextBounds,Microsoft.VisualStudio.Text.Formatting.TextBounds)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds"/> objects are different.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextBounds.Leading">
            <summary>
            Gets the position of the leading edge of the rectangle in the text rendering coordinate system.
            </summary>
            <remarks>
            In right-to-left text, the leading edge is to the right of the trailing edge.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextBounds.Top">
            <summary>
            Gets the position of the top edge of the rectangle in the text rendering coordinate system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextBounds.TextTop">
            <summary>
            Gets the top of the text on the line containing the text.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextBounds.Width">
            <summary>
            Gets the distance between the leading and trailing edges of the rectangle in the text rendering coordinate system.
            </summary>
            <remarks>
            This value will always be non-negative.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextBounds.Height">
            <summary>
            Gets the distance between the top and bottom edges of the rectangle in the text rendering coordinate system.
            </summary>
            <remarks>
            This value will always be positive.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextBounds.TextHeight">
            <summary>
            Gets the height of the text on the line containing the characters.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextBounds.Trailing">
            <summary>
            Gets the position of the trailing edge of the rectangle in the text rendering coordinate system.
            </summary>
            <remarks>
            In right-to-left text, the trailing edge is positioned to the left of the leading edge.
            If the text has a non-zero width end of line glyph, this property includes the 
            width of that character.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextBounds.Bottom">
            <summary>
            Gets the position of the bottom edge of the rectangle in the text rendering coordinate system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextBounds.TextBottom">
            <summary>
            Gets the bottom of the text on the line containing the characters.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextBounds.Left">
            <summary>
            Gets the position of the left edge of the rectangle in the text rendering coordinate system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextBounds.Right">
            <summary>
            Gets the position of the right edge of the rectangle in the text rendering coordinate system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextBounds.IsRightToLeft">
            <summary>
            Returns true if the bounds correspond to a right to left character
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.TextAndAdornmentSequenceChangedEventArgs">
            <summary>
            Provides information for the tag aggregator TagsChanged event,
            and returns the span of changed tags as a mapping span.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextAndAdornmentSequenceChangedEventArgs.#ctor(Microsoft.VisualStudio.Text.IMappingSpan)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextAndAdornmentSequenceChangedEventArgs"/> with the specified <see cref="T:Microsoft.VisualStudio.Text.IMappingSpan"/>.
            </summary>
            <param name="span">The span that changed.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="span"/> is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextAndAdornmentSequenceChangedEventArgs.Span">
            <summary>
            Gets the span over which tags have changed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.TextViewLineChange">
            <summary>
            Defines the possible types of change in a rendered text line between one layout and another.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Formatting.TextViewLineChange.None">
            <summary>
            No change type is specified.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Formatting.TextViewLineChange.NewOrReformatted">
            <summary>
            The line is new or reformatted.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Formatting.TextViewLineChange.Translated">
            <summary>
            The text has not changed, but some change has caused the y-coordinate to change. For example,
            a line was inserted above this line, or the user scrolled the view up or down.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.VisibilityState">
            <summary>
            Specifies the visibility of an <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> with respect to the visible area when the line was rendered.
            </summary>
            <remarks>
            <para>An <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> is considered partially visible when its
            bottom is equal to the top of the visible area.</para>
            <para>Unattached lines are lines that were not formatted as part of a layout in the text view.</para>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Formatting.VisibilityState.Unattached">
            <summary>
            The line is unattached, that is, it was not formatted as part of a layout in the text view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Formatting.VisibilityState.Hidden">
            <summary>
            The line is hidden, that is, not visible inside the view. Lines are also hidden when 
            their bottom edge is even with the top of the view or their top edge is even with the top of the view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Formatting.VisibilityState.PartiallyVisible">
            <summary>
            The line is partially visible, that is, 
            some portion of the line extends above the top of the view and/or below the bottom of the view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Formatting.VisibilityState.FullyVisible">
            <summary>
            The line is fully visible.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch">
            <summary>
            Defines an incremental search operation. 
            </summary>
            <remarks>
            <para>
            The <see cref="T:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch"/> interface is associated
            with a <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </para>
            <para>
            After the Start() method is called, the current caret position is marked as the start of the search, 
            and the <see cref="M:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.AppendCharAndSearch(System.Char)"/> and <see cref="M:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.DeleteCharAndSearch"/> operations can be used to change the search term. 
            The direction of the search is set to forward by default, although this setting can be changed with the <see cref="P:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.SearchDirection"/> property.
            If a matching term is found, it is selected and the caret is moved to the end of the selected word. 
            </para>
            <para>
            Every search operation returns an <see cref="T:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult"/>, which includes 
            information about the search, such as whether the search looped around the start or 
            end of the buffer, whether the search looped around the starting position of the search,
            and whether the item was found. It is the responsibility of the caller
            to pass this information to the end user.
            </para>
            <para>
            Incremental search performs its search on the text snapshot of the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>. As a result, if the
            result falls within a collapsed outlining region, the region will be expanded before the result is selected.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.Start">
            <summary>
            Starts an incremental search operation, and marks the position of the caret
            as the starting position for the search.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            An incremental search session is in progress.
            To avoid raising this exception, check the <see cref="P:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.IsActive"/> property before calling
            <c>Start</c>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.Dismiss">
            <summary>
            Terminates an incremental search operation.
            </summary>
            <exception creg="System.InvalidOperationException">
            <see cref="M:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.Dismiss"/> was called before <see cref="M:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.Start"/>. A search must be
            started before it can be terminated.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.AppendCharAndSearch(System.Char)">
            <summary>
            Extends the current term being searched for by one character. If a new term is matched, it 
            is selected. The selection can be used to access the match.
            </summary>
            <param name="toAppend">
            The character to append to the current search term.
            </param>
            <returns>
            An <see cref="T:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult"/> that contains information about whether the search term was found and whether
            the search wrapped around the beginning or end of the buffer.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.DeleteCharAndSearch">
            <summary>
            Removes the last character of the current search term and updates the
            search results based on the new term. 
            </summary>
            <returns>
            An <see cref="T:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult"/> that indicates whether the new search term was found
            and whether the search wrapped around the beginning or end of 
            the buffer.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The search string is empty. To avoid this exception,
            check the <see cref="P:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.SearchString"/> property before calling this method.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.SelectNextResult">
            <summary>
            Selects the next result in an incremental search operation. 
            The matched term will be selected.
            </summary>
            <returns>
            An <see cref="T:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult"/> indicating whether the newly selected item caused a
            wrap around the end or beginning of the document and whether the search looped around the first item found.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.Clear">
            <summary>
            Clears the existing search term without changing the selection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.SearchString">
            <summary>
            Gets or sets the current search term.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.IsActive">
            <summary>
            Determines whether an incremental search is in process.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.SearchDirection">
            <summary>
            Gets or sets the direction of the incremental search.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.TextView">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> associated with this search.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearchFactoryService">
            <summary>
            Used to get or create an incremental search service for a given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            There will always be a maximum of one <see cref="T:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch"/>
            for a given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </summary>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            IIncrementalSearchFactoryService factory = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearchFactoryService.GetIncrementalSearch(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Gets an <see cref="T:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch"/> for the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            If there is no <see cref="T:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch"/> for the view, one
            will be created.
            </summary>
            <param name="textView">
            The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> over which the incremental search is to be performed.
            </param>
            <returns>
            An <see cref="T:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch"/> associated with the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult">
            <summary>
            Consolidates the result of an incremental search operation.
            </summary>
            <remarks>
            This result indicates whether the item was found, whether the search
            caused the cursor to wrap around the beginning or end of the buffer, and
            the position of the first result.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult"/> with the specified properties.
            </summary>
            <param name="passedEndOfBuffer"></param>
            <param name="passedStartOfBuffer"></param>
            <param name="passedStartOfSearch"></param>
            <param name="resultFound"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult.Equals(System.Object)">
            <summary>
            Determines whether the contents of two <see cref="T:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult"/> objects are the same.
            </summary>
            <param name="obj">The object to be compared.</param>
            <returns><c>true</c> if both objects have the same content, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult.op_Equality(Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult,Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult)">
            <summary>
            Determines whether the contents of two <see cref="T:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult"/> objects are the same.
            </summary>
            <returns><c>true</c> if both objects have the same content, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult.op_Inequality(Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult,Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult)">
            <summary>
            Determines whether the contents of two <see cref="T:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult"/> objects are different.
            </summary>
            <returns><c>true</c> if both objects have different content, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult.GetHashCode">
            <summary>
            Gets the hash code for the object.
            </summary>
            <returns>base class' implementation</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult.PassedStartOfBuffer">
            <summary>
            Determines whether the search wrapped around the start of the buffer to its end.
            </summary>
            <remarks>This is applicable only if the search direction is backward.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult.PassedEndOfBuffer">
            <summary>
            Determines whether the search wrapped around the end of the buffer to its beginning.
            </summary>
            <remarks>This is applicable only if the search direction is forward.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult.PassedStartOfSearch">
            <summary>
            Determines whether the search passed the first item found.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult.ResultFound">
            <summary>
            Determines whether the search for the term was successful.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchDirection">
            <summary>
            Determines the direction of the incremental search.
            See <see cref="T:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch"/> for more information.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchDirection.Forward">
            <summary>
            Forward search.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchDirection.Backward">
             <summary>
            Backward search.
             </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.IEditorOperations">
            <summary>
            Defines operations relating to the editor.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.SelectAndMoveCaret(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.VirtualSnapshotPoint)">
            <summary>
            Selects from the given anchor point to active point, moving the caret to the new active
            point of the selection.  The selected span will be made visible.
            </summary>
            <param name="anchorPoint">The anchor point of the new selection.</param>
            <param name="activePoint">The active point of the new selection and position of the caret.</param>
            <remarks>This puts the selection in stream selection mode and does the minimum amount of required scrolling to ensure the selected span is visible.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.SelectAndMoveCaret(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.Editor.TextSelectionMode)">
            <summary>
            Selects from the given anchor point to active point, moving the caret to the new active
            point of the selection.  Additionally, ensure the selection is in the given selection
            mode, and make the selected span visible.
            </summary>
            <param name="anchorPoint">The anchor point of the new selection.</param>
            <param name="activePoint">The active point of the new selection and position of the caret.</param>
            <param name="selectionMode">The selection mode of the new selection.</param>
            <remarks>This does the minimum amount of required scrolling to ensure the selected span is visible.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.SelectAndMoveCaret(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.Editor.TextSelectionMode,System.Nullable{Microsoft.VisualStudio.Text.Editor.EnsureSpanVisibleOptions})">
            <summary>
            Selects from the given anchor point to active point, moving the caret to the new active
            point of the selection.  Additionally, ensure the selection is in the given selection
            mode, and make the selected span visible.
            </summary>
            <param name="anchorPoint">The anchor point of the new selection.</param>
            <param name="activePoint">The active point of the new selection and position of the caret.</param>
            <param name="selectionMode">The selection mode of the new selection.</param>
            <param name="scrollOptions">What, if any, scrolling is done in the view after the selection is made. If null, no scrolling is done.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToNextCharacter(System.Boolean)">
            <summary>
            Moves the caret to the next character.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToPreviousCharacter(System.Boolean)">
            <summary>
            Moves the caret to the previous character.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToNextWord(System.Boolean)">
            <summary>
            Moves the caret to the next word.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToPreviousWord(System.Boolean)">
            <summary>
            Moves the caret to the previous word.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveLineUp(System.Boolean)">
            <summary>
            Moves the caret one line up.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveLineDown(System.Boolean)">
            <summary>
            Moves the caret one line down.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.PageUp(System.Boolean)">
            <summary>
            Moves the caret one page up.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.PageDown(System.Boolean)">
            <summary>
            Moves the caret one page down.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToEndOfLine(System.Boolean)">
            <summary>
            Moves the caret to the end of the line.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToStartOfLine(System.Boolean)">
            <summary>
            Moves the caret to the first column on the current line.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToHome(System.Boolean)">
            <summary>
            Moves the caret to the first text column on the line; if the caret is already
            at the first text column or there is no text, move the caret to the first column
            on the line.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
            <remarks>This is effectively the behavior of pressing the Home key</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.GotoLine(System.Int32)">
            <summary>
            Moves the caret to the start of the specified line.
            </summary>
            <param name="lineNumber">
            The line number to which to move the caret.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="lineNumber"/> is less than zero 
            or greater than the line number of the last line in the text buffer.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToStartOfDocument(System.Boolean)">
            <summary>
            Moves the caret to the start of the document.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToEndOfDocument(System.Boolean)">
            <summary>
            Moves the caret at the end of the document.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveCurrentLineToTop">
            <summary>
            Moves the current line to the top of the view.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveCurrentLineToBottom">
            <summary>
            Moves the current line to the bottom of the view.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToStartOfLineAfterWhiteSpace(System.Boolean)">
            <summary>
            Moves the caret to the start of the line after all white space.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToStartOfNextLineAfterWhiteSpace(System.Boolean)">
            <summary>
            Moves the caret to the start of the next line after all white space.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
            <remarks>
            <para>
            If the caret is on the last line, this method moves it to the start of the line after all white space.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToStartOfPreviousLineAfterWhiteSpace(System.Boolean)">
            <summary>
            Moves the caret to the start of the previous line after all white space.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
            <remarks>
            <para>
            If the caret is on the first line, this method moves it to the start of the ine after all white space.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToLastNonWhiteSpaceCharacter(System.Boolean)">
            <summary>
            Moves the caret to just before the last non-white space character in the line.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
            <remarks>
            If the line is blank, the caret is moved to the start of the line.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToTopOfView(System.Boolean)">
            <summary>
            Moves the caret to the first fully-visible line of the view.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToBottomOfView(System.Boolean)">
            <summary>
            Moves the caret to the last fully-visible line of the view.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.SwapCaretAndAnchor">
            <summary>
            Swaps the caret from its current position to the other end of the selection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.Backspace">
            <summary>
            Deletes a character to the left of the current caret.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.DeleteWordToRight">
            <summary>
            Deletes the word to the right of the current caret position.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.DeleteWordToLeft">
            <summary>
            Deletes the word to the left of the current caret position.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.DeleteToEndOfLine">
            <summary>
            Deletes the line the caret is on, up to the line break character and the selection, if present.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.DeleteToBeginningOfLine">
            <summary>
            Deletes the line the caret is on, up to the previous line break character and the selection, if present.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.DeleteBlankLines">
            <summary>
            Deletes all empty lines or lines that contain only white space in the selection.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.DeleteHorizontalWhiteSpace">
            <summary>
            Deletes all white space from the beginnings and ends of the selected lines, and trims internal white space.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
            <remarks>
            <para>
            The algorithm for this operation follows these rules:
            </para>
            <para>
            If there is no selection, the white space around the caret is trimmed so that only one space or tab remains.
            If there is only one space or tab, then this operation does nothing.
            </para>
            <para>
            If there is a selection, then the white space at the beginning or end of a line 
            contained within the selection is completely deleted.
            If there is at least one block of contiguous white space longer than one character 
            in the selection, then all white space between the first and last 
            non-white space characters is trimmed so that only one space or tab remains for each contiguous block.
            If there are only contiguous runs of a single space or tab contained within the selection,
            then all spaces and tabs in the selection are deleted.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.InsertNewLine">
            <summary>
            Inserts a new line at the current caret position.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.OpenLineAbove">
            <summary>
            Inserts a new line at the start of the line the caret is on.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.OpenLineBelow">
            <summary>
            Inserts a new line at the end of the line the caret is on.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.Indent">
            <summary>
            If there is a multi-line selection indents the selection, otherwise inserts a tab at the caret location.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.Unindent">
            <summary>
            If there is a multi-line selection, unindents the selection. If there is a single line selection,
            removes up to a tab's worth of white space from before the start of the selection. If there is no selection,
            removes up to a tab's worth of white space from before the caret position.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.IncreaseLineIndent">
            <summary>
            If there is a multi-line selection, adds indentation to every line in the selection, 
            otherwise adds indentation to the line the caret is on.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.DecreaseLineIndent">
            <summary>
            If there is a multi-line selection, removes indentation from every line in the selection, 
            otherwise removes indentation from the line the caret is on.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.InsertText(System.String)">
            <summary>
            Inserts the given text at the current caret position.
            </summary>
            <param name="text">
            The text to be inserted in the buffer.
            </param>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="text"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.InsertTextAsBox(System.String,Microsoft.VisualStudio.Text.VirtualSnapshotPoint@,Microsoft.VisualStudio.Text.VirtualSnapshotPoint@)">
            <summary>
            Inserts the given text at the current caret position as a box.
            </summary>
            <param name="text">
            The text to be inserted in the buffer.  Each "line" from the text
            will be written out a line at a time.
            </param>
            <param name="boxStart">The start of the newly inserted box.</param>
            <param name="boxEnd">The end of the newly inserted box.</param>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="text"/> is null.</exception>
            <remarks>
            This has the same behavior as copying and pasting a box selection.
            In order to insert the text as a box, the <paramref name="text"/> is
            split by newlines and inserted a line at a time, each one on a successive
            line below the line the caret is on (and starting at the caret's x coordinate
            on each line).
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.InsertProvisionalText(System.String)">
            <summary>
            Inserts the given text at the current caret position as provisional text.
            </summary>
            <param name="text">
            The text to be inserted in the buffer.
            </param>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
            <remarks>
            Provisional text is automatically replaced by subsequent InsertText() or InsertProvisionalText() calls.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="text"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.Delete">
            <summary>
            Deletes the selection if there is one, or the next character in the buffer if one exists.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.DeleteFullLine">
            <summary>
            If there is a selection, deletes all the lines touched by the selection, including line break characters.
            Otherwise, deletes the line the caret is on, including the line break characters.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ReplaceSelection(System.String)">
            <summary>
            Replaces the text selection with the new text.
            </summary>
            <param name="text">
            The new text that replaces the old selection.
            </param>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="text"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.TransposeCharacter">
            <summary>
            Transposes the character at the cursor with the next character. 
            Transposes the first two characters when the cursor is at the start of the line. 
            Transposes the last two characters when the cursor is at the end of the line.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.TransposeLine">
            <summary>
            Transposes the line containing the cursor with the next line. Transposes the last two lines when the cursor at the last line.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.TransposeWord">
            <summary>
            Transposes the current word with the next one. White space and punctuation are not treated as words.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MakeLowercase">
            <summary>
            Converts uppercase letters to lowercase in the selection. If the selection is empty, makes the next character lowercase.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MakeUppercase">
            <summary>
            Converts lowercase letters to uppercase in the selection. If the selection is empty, makes the next character uppercase.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ToggleCase">
            <summary>
            Switches the case of each character in the selection. If the selection is empty, changes the case of the next character.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.Capitalize">
            <summary>
            Converts all the characters in the selection to lowercase, 
            then converts the first character in each word in the selection to uppercase.
            If the selection is empty, then it makes the next character uppercase.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ReplaceText(Microsoft.VisualStudio.Text.Span,System.String)">
            <summary>
            Replaces text from the given span with the new text.
            </summary>
            <param name="replaceSpan">The span of text to be replaced.</param>
            <param name="text">
            The new text.
            </param>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ReplaceAllMatches(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Replaces all matching occurrences of the given string.
            </summary>
            <param name="searchText">
            The text to match.
            </param>
            <param name="replaceText">
            The replacement text.
            </param>
            <param name="matchCase">
            <c>true</c> if the search should match case, otherwise <c>false</c>.
            </param>
            <param name="matchWholeWord">
            <c>true</c> if the search should match whole words, otherwise <c>false</c>.
            </param>
            <param name="useRegularExpressions">
            <c>true</c> if the search should use regular expressions, otherwise <c>false</c>.
            </param>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="searchText"/> is null.</exception>
            <exception cref="T:System.ArgumentException"> if <paramref name="useRegularExpressions"/> is true and <paramref name="searchText"/> is an invalid regular expression.</exception>
            <returns>The number of matches found.</returns>
            <remarks>If any of the matches found is read only, none of the matches will be replaced.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.InsertFile(System.String)">
            <summary>
            Inserts a file on disk into the text buffer.
            </summary>
            <param name="filePath">The path of the file on disk.</param>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="filePath"/> is a zero-length string, 
            contains only white space, or contains one or more invalid characters as defined by InvalidPathChars.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. 
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
            <exception cref="T:System.UnauthorizedAccessException"><paramref name="filePath"/> specified a file that is read-only, or
            this operation is not supported on the current platform, or
            <paramref name="filePath"/> specified a directory, or
            the caller does not have the required permission.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="filePath"/> was not found.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="filePath"/> is in an invalid format. </exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.Tabify">
            <summary>
            Converts the leading white space to tabs on all lines touched by the selection and caret.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
            <remarks>
            <para>
            If the column position of the first non-white space character is not evenly divisible by the tab size, there will be
            spaces left at the end of the line equal to the remainder of that division.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.Untabify">
            <summary>
            Converts the leading white space to spaces of all lines touched by the selection and caret.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ConvertSpacesToTabs">
            <summary>
            Converts spaces to tabs in the selection, or on the line the caret is on if the selection is empty.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
            <remarks>
            <para>
            Only spaces immediately preceding a tab stop will be converted to tabs.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ConvertTabsToSpaces">
            <summary>
            Converts tabs to spaces in the selection, or on the line the caret is on if the selection is empty.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
            <remarks>
            <para>
            A tab is replaced by the number of spaces equal to the distance between one tab and the next.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.NormalizeLineEndings(System.String)">
            <summary>
            Replaces all line endings that do not match <paramref name="replacement"/> with <paramref name="replacement"/>.
            </summary>
            <param name="replacement">The character sequence that all line endings will match.</param>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.SelectCurrentWord">
            <summary>
            Selects the current word.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.SelectEnclosing">
            <summary>
            Selects the enclosing parent.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.SelectFirstChild">
            <summary>
            Selects the first child.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.SelectNextSibling(System.Boolean)">
            <summary>
            Selects the next sibling.
            </summary>
            <param name="extendSelection">If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.SelectPreviousSibling(System.Boolean)">
            <summary>
            Selects the previous sibling.
            </summary>
            <param name="extendSelection">If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.SelectLine(Microsoft.VisualStudio.Text.Formatting.ITextViewLine,System.Boolean)">
            <summary>
            Selects the given line.
            </summary>
            <param name="viewLine">
            The line to select.
            </param>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="viewLine"/> is
            <c>null</c></exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.SelectAll">
            <summary>
            Selects all text.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ExtendSelection(System.Int32)">
            <summary>
            Extends the current selection span to the new selection end.
            </summary>
            <param name="newEnd">
            The new character position to which the selection is to be extended.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="newEnd"/> is less than 0.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveCaret(Microsoft.VisualStudio.Text.Formatting.ITextViewLine,System.Double,System.Boolean)">
            <summary>
            Moves the caret to the given <paramref name="textLine"/> at the given <paramref name="horizontalOffset"/>.
            </summary>
            <param name="textLine">The <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> on which to place the caret.</param>
            <param name="horizontalOffset">The horizontal location in the given <paramref name="textLine"/> to which to move the caret.</param>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="textLine"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ResetSelection">
            <summary>
            Resets any selection in the text.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.CopySelection">
            <summary>
            Copies the selected text to the clipboard.
            </summary>
            <returns>
            <c>true</c> if the clipboard operation succeeded, otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.InsufficientMemoryException"> is thrown if there is not sufficient memory to complete the operation.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.CutSelection">
            <summary>
            Cuts the selected text.
            </summary>
            <returns>
            <c>true</c> if the edit and the clipboard operation both succeeded, otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.InsufficientMemoryException"> is thrown if there is not sufficient memory to complete the operation.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.Paste">
            <summary>
            Pastes text from the clipboard to the text buffer.
            </summary>
            <returns>
            <c>true</c> if the edit and the clipboard operation both succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.CutFullLine">
            <summary>
            If there is a selection present, deletes all lines touched by the selection,
            including line break characters, and copies the text to the clipboard.
            Otherwise, deletes the line the caret is on, including the line break characters, and copies the text to the clipboard.
            </summary>
            <returns>
            <c>true</c> if the edit and the clipboard operation both succeeded, otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.InsufficientMemoryException"> is thrown if there is not sufficient memory to complete the operation.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ScrollUpAndMoveCaretIfNecessary">
            <summary>
            Scrolls the view up by one line and repositions the caret, 
            if it is scrolled off the page, to the last fully-visible
            line in the view.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ScrollDownAndMoveCaretIfNecessary">
            <summary>
            Scrolls the view down by one line and repositions the caret, 
            if it is scrolled off the page, to the first fully-visible
            line in the view.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ScrollPageUp">
            <summary>
            Scrolls the view up a page without moving the caret.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ScrollPageDown">
            <summary>
            Scrolls the view down a page without moving the caret.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ScrollColumnLeft">
            <summary>
            Scrolls the view one column to the left.
            </summary>
            <remarks>
            A column is the width of a space in the default font.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ScrollColumnRight">
            <summary>
            Scrolls the view one column to the right.
            </summary>
            <remarks>
            A column is the width of a space in the default font.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ScrollLineBottom">
            <summary>
            Scrolls the line the caret is on, so that it is the last
            fully-visible line in the view.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ScrollLineTop">
            <summary>
            Scroll sthe line the caret is on, so that it is the first
            fully-visible line in the view.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ScrollLineCenter">
            <summary>
            Scrolls the line the caret is on, so that it is centered in the view.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.AddBeforeTextBufferChangePrimitive">
            <summary>
            Adds an <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoPrimitive"/> to the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory"/> for the buffer
            that will revert the selection to the current state when it is undone.
            </summary>
            <remarks>
            When performing edits that will change the selection, you can surround the edits with calls
            to <see cref="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.AddBeforeTextBufferChangePrimitive"/> and 
            <see cref="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.AddAfterTextBufferChangePrimitive"/> to ensure that the selection
            behaves correctly when the edits are undone and redone.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.AddAfterTextBufferChangePrimitive">
            <summary>
            Adds an <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoPrimitive"/> to the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory"/> for the buffer
            that will revert the selection to the current state when it is redone.
            </summary>
            <remarks>
            When performing edits that will change the selection, you can surround the edits with calls
            to <see cref="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.AddBeforeTextBufferChangePrimitive"/> and 
            <see cref="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.AddAfterTextBufferChangePrimitive"/> to ensure that the selection
            behaves correctly when the edits are undone and redone.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ZoomIn">
            <summary>
            Zooms in to the text view by a scaling factor of 10%
            </summary>
            <remarks>
            The maximum zooming scale is 400%
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ZoomOut">
            <summary>
            Zooms out of the text view by a scaling factor of 10%
            </summary>
            <remarks>
            The minimum zooming scale is 20%
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ZoomTo(System.Double)">
            <summary>
            Applies the given zoomLevel to the text view
            </summary>
            <param name="zoomLevel">The zoom level to apply between 20% to 400%</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.GetWhitespaceForVirtualSpace(Microsoft.VisualStudio.Text.VirtualSnapshotPoint)">
            <summary>
            Gets a string composed of whitespace characters that would be inserted to fill the gap between
            a given <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotPoint"/> and the closest <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint"/> on the same line.
            </summary>
            <param name="point">The point in virtual space</param>
            <remarks>
            Returns an empty string if the provided <paramref name="point"/> is not in virtual space.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.IEditorOperations.CanPaste">
            <summary>
            Determines whether a paste operation is possible.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.IEditorOperations.CanDelete">
            <summary>
            Determines whether a delete operation is possible.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.IEditorOperations.CanCut">
            <summary>
            Determines whether  a cut operation is possible.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.IEditorOperations.TextView">
            <summary>
            Gets the text view on which these operations work.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.IEditorOperations.Options">
            <summary>
            Gets the options specific to this view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ProvisionalCompositionSpan">
            <summary>
            Gets the span of the current provisional composition (null if there is no provisional composition).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.IEditorOperations.SelectedText">
            <summary>
            Gets the selected text.
            </summary>
            <remarks>
            In box selection mode, this will have each span of text separated by a newline
            character, with an extra newline at the very end.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.IEditorOperationsFactoryService">
            <summary>
            A service that provides <see cref="T:Microsoft.VisualStudio.Text.Operations.IEditorOperations"/> objects.
            </summary>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            IEditorOperationsFactoryService factory = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperationsFactoryService.GetEditorOperations(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Operations.IEditorOperations"/> objects for the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Operations.IEditorOperations"/>. </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Outlining.ICollapsible">
            <summary>
            Represents a span that may be collapsed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Outlining.ICollapsible.Extent">
            <summary>
            Gets the extent of this collapsible region.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Outlining.ICollapsible.IsCollapsed">
            <summary>
            Determines whether this outlining region is collapsed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Outlining.ICollapsible.IsCollapsible">
            <summary>
            Determines whether this region can be collapsed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Outlining.ICollapsible.CollapsedForm">
            <summary>
            Gets the data object for the collapsed UI.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Outlining.ICollapsible.CollapsedHintForm">
            <summary>
            Gets the data object for the collapsed UI tooltip.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Outlining.ICollapsible.Tag">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Tagging.IOutliningRegionTag"/> that was used to produce this collapsible region.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Outlining.ICollapsed">
            <summary>
            Represents a collapsed <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsible"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Outlining.ICollapsed.CollapsedChildren">
            <summary>
            Enumerates the children of this collapsed region that are also collapsed.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this collapsed region has been expanded.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Outlining.IOutliningManager">
            <summary>
            Provides outlining functionality.
            </summary>
            <remarks>
            <para>Any methods that take <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> objects are spans of the
            edit buffer in the view model of a view. This buffer can also be retrieved from
            the TextBuffer property of an <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.</para>
            <para>This outlining manager is provided by <see cref="T:Microsoft.VisualStudio.Text.Outlining.IOutliningManagerService"/>.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.GetCollapsedRegions(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Gets all the collapsed regions that intersect the given span.
            </summary>
            <param name="span">The span.</param>
            <returns>A sorted sequence of collapsed regions.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.GetCollapsedRegions(Microsoft.VisualStudio.Text.SnapshotSpan,System.Boolean)">
            <summary>
            Gets all the collapsed regions that intersect the given span.
            </summary>
            <param name="span">The span.</param>
            <param name="exposedRegionsOnly">If <c>true</c>, this returns only top-level regions (regions that aren't inside another collapsed region).</param>
            <returns>A sorted sequence of collapsed regions.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.GetCollapsedRegions(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection)">
            <summary>
            Gets all the collapsed regions that intersect the given collection of spans.
            </summary>
            <param name="spans">The collection of spans.</param>
            <returns>A sorted sequence of collapsed regions.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.GetCollapsedRegions(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,System.Boolean)">
            <summary>
            Gets all the collapsed regions that intersect the given collection of spans.
            </summary>
            <param name="spans">The collection of spans.</param>
            <param name="exposedRegionsOnly">If <c>true</c>, this returns only top-level regions (regions that aren't inside another collapsed region).</param>
            <returns>A sorted sequence of collapsed regions.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.GetAllRegions(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Gets all the regions that intersect the given span, whether or not they are collapsed.
            </summary>
            <param name="span">The span.</param>
            <returns>A sorted sequence of all intersecting collapsible regions.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.GetAllRegions(Microsoft.VisualStudio.Text.SnapshotSpan,System.Boolean)">
            <summary>
            Gets all the regions that intersect the given span, whether or not they are collapsed.
            </summary>
            <param name="span">The span.</param>
            <param name="exposedRegionsOnly">If <c>true</c>, this returns only top-level regions (regions that aren't inside another collapsed region).</param>
            <returns>A sorted sequence of all intersecting collapsible regions.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.GetAllRegions(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection)">
            <summary>
            Gets all the regions that intersect the given collection of spans, whether or not they are collapsed.
            </summary>
            <param name="spans">The collection of spans.</param>
            <returns>A sorted sequence of all intersecting collapsible regions.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.GetAllRegions(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,System.Boolean)">
            <summary>
            Gets all the regions that intersect the given collection of spans, whether or not they are collapsed.
            </summary>
            <param name="spans">The collection of spans.</param>
            <param name="exposedRegionsOnly">If <c>true</c>, this returns only top-level regions (regions that aren't inside another collapsed region).</param>
            <returns>A sorted sequence of all intersecting collapsible regions.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.Expand(Microsoft.VisualStudio.Text.Outlining.ICollapsed)">
            <summary>
            Expands the collapsible span.
            </summary>
            <returns>The newly-expanded span.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.TryCollapse(Microsoft.VisualStudio.Text.Outlining.ICollapsible)">
            <summary>
            Tries to collapse a given region.
            </summary>
            <returns>The newly collapsed span if successful, otherwise null.</returns>
            <remarks>
            There are two cases in which this method can fail to collapse the region:
            <para>The region is already collapsed.</para>
            <para>The region is partially obscured because another collapsed region partially covers it.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.CollapseAll(Microsoft.VisualStudio.Text.SnapshotSpan,System.Predicate{Microsoft.VisualStudio.Text.Outlining.ICollapsible})">
            <summary>
            Collapses all regions that match the specified predicate.
            </summary>
            <param name="span">The regions that intersect this span.</param>
            <param name="match">The predicate to match.</param>
            <returns>The newly-collapsed regions.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.ExpandAll(Microsoft.VisualStudio.Text.SnapshotSpan,System.Predicate{Microsoft.VisualStudio.Text.Outlining.ICollapsed})">
            <summary>
            Expands all the regions that match the specified predicate.
            </summary>
            <param name="match">The predicate to match.</param>
            <param name="span">The regions that intersect this span.</param>
            <returns>The newly-expanded regions.</returns>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.RegionsChanged">
            <summary>
            Occurs when the set of <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsible"/> regions on the corresponding elision buffer changes.
            </summary>
            <remarks>Not raised when the collapsed state of any <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsible"/> changes.</remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.RegionsExpanded">
            <summary>
            Occurs when an <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsed"/> region is expanded.
            </summary>
            <remarks>This event is not raised when the set of <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsible"/> regions on the corresponding
            elision buffer changes.</remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.RegionsCollapsed">
            <summary>
            Occurs when an <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsible"/> reguib is collapsed.
            </summary>
            <remarks>Not raised when the set of <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsible"/> regions on the corresponding
            elision buffer changes.</remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.OutliningEnabledChanged">
            <summary>
            Occurs when outlining has been enabled or disabled.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.Enabled">
            <summary>
            Determines whether outlining is enabled.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Outlining.IOutliningManagerService">
            <summary>
            Provides the <see cref="T:Microsoft.VisualStudio.Text.Outlining.IOutliningManager"/> for a given view model.
            </summary>
            <remarks>
            This is a MEF component part, and should be imported as follows:
            [Import]
            IOutliningManagerService outliningManager = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.IOutliningManagerService.GetOutliningManager(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Gets an <see cref="T:Microsoft.VisualStudio.Text.Outlining.IOutliningManager"/> for the given view.
            </summary>
            <remarks>
            The outlining manager is available only for views that have the <see cref="F:Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles.Structured"/> role.
            </remarks>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> from which to get the outlining manager.</param>
            <returns>A valid outlining manager if the view model supports outlining,
            otherwise null.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="textView"/> is null.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Outlining.OutliningEnabledEventArgs">
            <summary>
            Provides information for the <see cref="E:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.OutliningEnabledChanged"/> event.
            </summary>
            <remarks>
            The event is raised when outlining has been enabled or disabled.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.OutliningEnabledEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Outlining.OutliningEnabledEventArgs"/> for the specified change.
            </summary>
            <param name="enabled"><c>true</c> if outlining has been enabled, <c>false</c> if it has been disabled.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Outlining.OutliningEnabledEventArgs.Enabled">
            <summary>
            Determines whether outlining has been enabled or disabled.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Outlining.RegionsCollapsedEventArgs">
            <summary>
            Provides information for the <see cref="E:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.RegionsCollapsed"/> event.
            </summary>
            <remarks>
            Provides the <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsed"/> regions that are now collapsed.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.RegionsCollapsedEventArgs.#ctor(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Text.Outlining.ICollapsed})">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Outlining.RegionsCollapsedEventArgs"/> with the specified <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsed"/> regions.
            </summary>
            <param name="collapsedRegions">The newly-collapsed regions.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Outlining.RegionsCollapsedEventArgs.CollapsedRegions">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsed"/> regions that are now collapsed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Outlining.RegionsExpandedEventArgs">
            <summary>
            Provides information for the <see cref="E:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.RegionsExpanded"/> event.
            </summary>
            <remarks>
            Provides the <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsible"/> regions that are now expanded.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.RegionsExpandedEventArgs.#ctor(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Text.Outlining.ICollapsible})">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Outlining.RegionsExpandedEventArgs"/> with the specified <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsible"/> regions, assuming that they are not also being removed.
            </summary>
            <param name="expandedRegions">The newly-expanded regions.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.RegionsExpandedEventArgs.#ctor(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Text.Outlining.ICollapsible},System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Outlining.RegionsExpandedEventArgs"/> with the specified <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsible"/> regions.
            </summary>
            <param name="expandedRegions">The newly-expanded regions.</param>
            <param name="removalPending">If these regions are being expanded as part of being removed.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Outlining.RegionsExpandedEventArgs.ExpandedRegions">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsible"/> regions which are now expanded.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Outlining.RegionsExpandedEventArgs.RemovalPending">
            <summary>
            <c>true</c> if the regions are being expanded because they are being removed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Outlining.RegionsChangedEventArgs">
            <summary>
            Provides information for the <see cref="E:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.RegionsChanged"/> event.
            </summary>
            <remarks>
            Provides the <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> over which <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsible"/> regions were added or 
            removed. Call GetAllRegions to get the current set of <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsible"/> regions over the affected snapshot span.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.RegionsChangedEventArgs.#ctor(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Outlining.RegionsChangedEventArgs"/> with the specified <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/>.
            </summary>
            <param name="affectedSpan">The <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> over which collapsible regions have changed.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Outlining.RegionsChangedEventArgs.AffectedSpan">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> over which collapsible spans have changed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.IViewTagAggregatorFactoryService">
            <summary>
            A service that creates an <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagAggregator`1"/> for an <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            This is a MEF component part, and should be imported as follows:
            [Import]
            IViewLevelTagAggregatorFactoryService factory = null;
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.IViewTagAggregatorFactoryService.CreateTagAggregator``1(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Creates a tag aggregator for the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> that aggregates
            tags of the given type.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> with which to get the <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagAggregator`1"/>.</param>
            <typeparam name="T">The type of tag to aggregate.</typeparam>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagAggregator`1"/> of the correct type for <paramref name="textView"/>.</returns>
            <remarks>The ITagAggregatorr&lt;T&gt;.DispatchedTagsChanged event will be raised on the thread used to create the tag aggregator.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.IViewTagAggregatorFactoryService.CreateTagAggregator``1(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.Tagging.TagAggregatorOptions)">
            <summary>
            Creates a tag aggregator for the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> and with the given options that aggregates
            tags of the given type.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> with which to get the <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagAggregator`1"/>.</param>
            <param name="options">The options to use for the newly created aggregator.</param>
            <typeparam name="T">The type of tag to aggregate.</typeparam>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagAggregator`1"/> of the correct type for <paramref name="textView"/>.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.IViewTaggerProvider">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagger`1"/> for a given buffer.
            </summary>
            <remarks>This is a MEF component part, and implementers must use the following attributes:
            [Export(nameSource=typeof(ITaggerProvider))]
            Exports must specify at least one content type attribute and at least one tag type attribute.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.IViewTaggerProvider.CreateTagger``1(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Creates a tag provider for the specified view and buffer.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.</param>
            <param name="buffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.</param>
            <typeparam name="T">The type of the tag.</typeparam>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.Strings.BufferMismatch">
            <summary>
              Looks up a localized string similar to Buffer mismatch between oldSnapsnot and newSnapshot..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.Strings.VersionError">
            <summary>
              Looks up a localized string similar to oldSnapshot&apos;s version is not older than newSnapshot&apos;s version..
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.IOutliningRegionTag">
            <summary>
            Provides a tag for outlining regions.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.IOutliningRegionTag.IsDefaultCollapsed">
            <summary>
            Determines whether the region is collapsed by default.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.IOutliningRegionTag.IsImplementation">
            <summary>
            Determines whether a region is an implementation region.
            </summary>
            <remarks>
            Implementation regions are the blocks of code following a method definition. 
            They are used for commands such as the Visual Studio Collapse to Definition command, 
            which hides the implementation region and leaves only the method definition exposed.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.IOutliningRegionTag.CollapsedForm">
            <summary>
            Gets the data object for the collapsed UI. If the default is set, returns null.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.IOutliningRegionTag.CollapsedHintForm">
            <summary>
            Gets the data object for the collapsed UI tooltip. If the default is set, returns null.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.OutliningRegionTag">
            <summary>
            Represents a tag for outlining regions.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.OutliningRegionTag.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Tagging.OutliningRegionTag"/>. 
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.OutliningRegionTag.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Tagging.OutliningRegionTag"/> with the specified objects. 
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.OutliningRegionTag.#ctor(System.Boolean,System.Boolean,System.Object,System.Object)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Tagging.OutliningRegionTag"/> with the specified default collapsed state.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.OutliningRegionTag.IsDefaultCollapsed">
            <summary>
            Determines whether the region is collapsed by default.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.OutliningRegionTag.IsImplementation">
            <summary>
            Determines whether a region is an implementation region. 
            </summary>
            <remarks>
            Implementation regions are the blocks of code following a method definition. 
            They are used for commands such as the Visual Studio Collapse to Definition command, 
            which hides the implementation region and leaves only the method definition exposed.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.OutliningRegionTag.CollapsedForm">
            <summary>
            Gets the data object for the collapsed UI. If the default is set, returns null.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.OutliningRegionTag.CollapsedHintForm">
            <summary>
            Gets the data object for the collapsed UI tooltip. If the default is set, returns null.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.ErrorTag">
            <summary>
            An implementation of <see cref="T:Microsoft.VisualStudio.Text.Tagging.IErrorTag"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.IErrorTag">
            <summary>
            Represents an error, which is used to place squiggle adornments on the view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.IErrorTag.ErrorType">
            <summary>
            Gets the type of error to use.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.IErrorTag.ToolTipContent">
            <summary>
            Gets the content to use when displaying a tooltip for this error.
            This property may be null.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.ErrorTag.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Tagging.ErrorTag"/> of the specified type.
            </summary>
            <param name="errorType">The type of error to use.</param>
            <param name="toolTipContent">The tooltip content to display. May be null.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="errorType"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.ErrorTag.#ctor(System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Tagging.ErrorTag"/> of the specified type with no tooltip content.
            </summary>
            <param name="errorType">The type of error to use,</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.ErrorTag.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Tagging.ErrorTag"/> of type SyntaxError with no tooltip content.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.ErrorTag.ErrorType">
            <summary>
            Gets the type of error to use.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.ErrorTag.ToolTipContent">
            <summary>
            Gets the content to use when displaying a tooltip for this error.
            This property may be null.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.TextMarkerTag">
            <summary>
            Represents the text marker tag, which is used to place text marker adornments on a view.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.ITextMarkerTag">
            <summary>
            Represents the text marker tag, which is used to place text marker adornments on a view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.ITextMarkerTag.Type">
            <summary>
            Gets the type of adornment to use.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.TextMarkerTag.#ctor(System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Tagging.TextMarkerTag"/> of the given type.
            </summary>
            <param name="type">The type of text marker to use.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.TextMarkerTag.Type">
            <summary>
            Gets the type of adornment to use.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.SpaceNegotiatingAdornmentTag">
            <summary>
            Represents a tag for a space-negotiating adornment. The tag is used to provide space
            for positioning the adornment in a view.
            </summary>
            <remarks>
            The units used in properties like <see cref="P:Microsoft.VisualStudio.Text.Tagging.SpaceNegotiatingAdornmentTag.Width"/> and <see cref="P:Microsoft.VisualStudio.Text.Tagging.SpaceNegotiatingAdornmentTag.TopSpace"/> are those used in the presentation technology.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.SpaceNegotiatingAdornmentTag.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualStudio.Text.PositionAffinity,System.Object,System.Object)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Tagging.SpaceNegotiatingAdornmentTag"/> with the specified properties.
            </summary>
            <param name="width">The width of the tag in pixels.</param>
            <param name="topSpace">The space needed between the top of the text in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> and the top of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/>.</param>
            <param name="baseline">The baseline of the space-negotiating adornment.</param>
            <param name="textHeight">The height in pixels of the text portion of the space-negotiating adornment.</param>
            <param name="bottomSpace">The space needed between the bottom of the text in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> and the botton of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/>.</param>
            <param name="affinity">The <see cref="T:Microsoft.VisualStudio.Text.PositionAffinity"/> of the space-negotiating adornment.</param>
            <param name="identityTag">A unique object associated with the space-negotiating adornment, used by <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/>.GetAdornmentBounds.</param>
            <param name="providerTag">A unique object identifying the provider of the adornment, used by <see cref="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetAdornmentTags(System.Object)"/>).</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.SpaceNegotiatingAdornmentTag.Width">
            <summary>
            Gets the width of the adornment.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.SpaceNegotiatingAdornmentTag.TopSpace">
            <summary>
            Gets the amount of space needed between the top of the text in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> and the top of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.SpaceNegotiatingAdornmentTag.Baseline">
            <summary>
            Gets the baseline of the space-negotiating adornment.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.SpaceNegotiatingAdornmentTag.TextHeight">
            <summary>
            Gets the height of the text portion of the space-negotiating adornment.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.SpaceNegotiatingAdornmentTag.BottomSpace">
            <summary>
            Gets the amount of space needed between the bottom of the text in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> and the botton of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.SpaceNegotiatingAdornmentTag.Affinity">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.PositionAffinity"/> of the space-negotiating adornment.
            </summary>
            <remarks>
            This property is only used for adornments that do not replace text.
            An adornment does not replace text if its tag has a zero-length span on the view's text buffer.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.SpaceNegotiatingAdornmentTag.IdentityTag">
            <summary>
            Gets a unique object associated with the space-negotiating adornment, which is used by <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/>.GetAdornmentBounds.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.SpaceNegotiatingAdornmentTag.ProviderTag">
            <summary>
            Gets a unique object that identifies the provider of the adornment.
            </summary>
            <remarks>
            This object is used to get adornments by calling <see cref="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetAdornmentTags(System.Object)"/>.
            </remarks>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\VisualStudio\VS10RTM\VisualStudioIntegration\Common\Assemblies\v4.0\Microsoft.VisualStudio.Text.Logic.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.Text.Logic</name>
    </assembly>
    <members>
        <member name="T:Microsoft.VisualStudio.Text.Classification.ClassificationChangedEventArgs">
            <summary>
            Provides information for the <see cref="E:Microsoft.VisualStudio.Text.Classification.IClassifier.ClassificationChanged"/> event.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.ClassificationChangedEventArgs.#ctor(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Classification.ClassificationChangedEventArgs"/> object.
            </summary>
            <param name="changeSpan">
            The span of the classification that changed.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.ClassificationChangedEventArgs.ChangeSpan">
            <summary>
            Gets the span of the classification that changed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Classification.ClassificationSpan">
            <summary>
            Describes a region of text by an <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/>.
            </summary>
            <remarks>
            This class is immutable.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.ClassificationSpan.#ctor(Microsoft.VisualStudio.Text.SnapshotSpan,Microsoft.VisualStudio.Text.Classification.IClassificationType)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Classification.ClassificationSpan"/>.
            </summary>
            <param name="span">The span of text to which the classification applies.</param>
            <param name="classification">
            The classification type of the span.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="classification"/> is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.ClassificationSpan.ClassificationType">
            <summary>
            Gets the classification type of the text.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.ClassificationSpan.Span">
            <summary>
            Gets the snapshot span of the classified text.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Classification.ClassificationTypeAttribute">
            <summary>
            Used to declare the name for a logical classification
            type and the name of a classification type from which it is derived.
            </summary>
            <remarks>
            <para>This attribute is used to provide metadata for the <see cref="T:Microsoft.VisualStudio.Text.Classification.ClassificationTypeDefinition"/> MEF export.
            The <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationTypeRegistryService"/> service uses this to construct <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"></see> objects.
            </para>
            <para>
            This attribute can be stacked, so that a <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/> can multiply inherit from different base types.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/>
            <seealso cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationTypeRegistryService"/>
            <seealso cref="T:Microsoft.VisualStudio.Text.Classification.ClassificationTypeDefinition"/>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.ClassificationTypeAttribute.ClassificationTypeNames">
            <summary>
            Gets or sets the name of this classification type.
            </summary>
            <remarks>
            The name must be unique across all classification types.  It cannot be null or
            an empty string. Classification type names are case insensitive.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The value is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The value is an empty string.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Classification.IClassificationType">
            <summary>
            The logical classification type of a span of text.
            </summary>
            <remarks>
            <para>
            All classification types are identified by a unique name.
            The <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationTypeRegistryService"></see> can return an <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/> object from this 
            unique name in order to allow clients to access additional information.
            </para>
            <para>
            Classification types can multiply inherit by stacking <see cref="T:Microsoft.VisualStudio.Text.Classification.ClassificationTypeAttribute"/> attributes./&gt;
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IClassificationType.IsOfType(System.String)">
            <summary>
            Determines whether the current <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"></see>
            derives from the classification type named <paramref name="type"/>.
            </summary>
            <param name="type">The name of the base classification type.</param>
            <returns><c>true</c> if the current classification type derives from the one identified by <paramref name="type"/>, otherwise <c>false</c>.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.IClassificationType.Classification">
            <summary>
            Gets the name of the classification type.
            </summary>
            <remarks>All classification types are identified by a unique name.
            The <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationTypeRegistryService"></see> can return an <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/> from this name.</remarks>
            <value>This name is never <c>null</c>.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.IClassificationType.BaseTypes">
            <summary>
            Gets the classification types from which the current <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/> is derived.
            </summary>
            <value>This value is never <c>null</c>, though it may be the empty set.</value>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Classification.ClassificationTypeDefinition">
            <summary>
            Describes a data-only export for declaring classification types.
            </summary>
            <remarks> 
            Because you cannot subclass this type, you can use the [Export] attribute with no type.
            </remarks>
            <example>
            internal sealed class Components
            {
               [Export]
               [Name("keyword")]            // required
               [BaseDefinition("text")]     // zero or more BaseDefinitions are allowed
               internal ClassificationTypeDefinition keywordDefinition;
               
               { other components }
            }
            </example>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Classification.IClassificationTypeRegistryService">
            <summary>
            The service that maintains the collection of all known classification types.
            </summary>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            IClassificationTypeRegistryService registry = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IClassificationTypeRegistryService.GetClassificationType(System.String)">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"></see> object identified by the specified <paramref name="type"/>.
            </summary>
            <param name="type">
            The name of the classification type.
            </param>
            <returns>
            The classification type, <c>null</c> if there is no classification type of that name.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IClassificationTypeRegistryService.CreateClassificationType(System.String,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Text.Classification.IClassificationType})">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/> and adds it to the registry.
            </summary>
            <param name="type">The name of the classification type to create.</param>
            <param name="baseTypes">The base types of the classification.</param>
            <returns>A new <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/>.</returns>
            <exception cref="T:System.InvalidOperationException"><paramref name="type"/> is already in the registry.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IClassificationTypeRegistryService.CreateTransientClassificationType(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Text.Classification.IClassificationType})">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/> that persists only for the duration of
            this session. This <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/> must inherit from at least one
            <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/>.
            </summary>
            <param name="baseTypes">
            The base types for this <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/>.
            </param>
            <returns>
            A new <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/> that inherits from all of <paramref name="baseTypes"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="baseTypes"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="baseTypes"/> has zero items.</exception>
            <remarks>
            <para>
            This function is intended primarily to aid in the runtime display of overlapping classifications.
            </para>
            <para>
            The classification names generated by this function are determined at run time and are subject to
            change in future revisions. The only guarantee made is that if two transient <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/> objects
            are created with the same base types, they will have the same classification name.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IClassificationTypeRegistryService.CreateTransientClassificationType(Microsoft.VisualStudio.Text.Classification.IClassificationType[])">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/> that persists only for the duration of
            this session. This <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/> must inherit from at least one
            <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/>.
            </summary>
            <param name="baseTypes">
            The base types for this <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/>.
            </param>
            <returns>
            A new <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/> which inherits from all <paramref name="baseTypes"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="baseTypes"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="baseTypes"/> has zero items.</exception>
            <remarks>
            <para>
            This function is intended primarily to aid in the runtime display of overlapping classifications.
            </para>
            
            <para>
            The classification names generated by this function are determined at run time and are subject to
            change in future revisions. The only guarantee made is that if two transient <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/> objects
            are created with the same base types, they will have the same classification name.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Classification.IClassifier">
            <summary>
            Assigns <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/> objects to the text in a <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IClassifier.GetClassificationSpans(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Gets all the <see cref="T:Microsoft.VisualStudio.Text.Classification.ClassificationSpan"/> objects that overlap the given range of text.
            </summary>
            <param name="span">
            The snapshot span.
            </param>
            <returns>
            A list of <see cref="T:Microsoft.VisualStudio.Text.Classification.ClassificationSpan"/> objects that intersect with the given range. 
            </returns>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Classification.IClassifier.ClassificationChanged">
            <summary>
            Ocurs when the classification of a span of text has changed. 
            </summary>
            <remarks>
            This event does not need to be raised for newly-inserted text. 
            However, it should be raised if any text other than that which was actually inserted has been reclassified.
            It should also be raised if the deletion of text causes the remaining
            text to be reclassified.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Classification.IClassifierAggregatorService">
            <summary>
            A service that returns an <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassifier"/> that aggregates and normalizes all <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassifier"/>
            contributions for a <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
            <remarks>
            <para>The normalized classifications produced by this aggregator are sorted and do not overlap. If a span of text
            had multiple classifications based on the original classifier contributions, then in the normalized
            classification it has a transient classification (<see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationTypeRegistryService"/>) that corresponds to
            all of the original classifications.</para>
            <para>Classifier aggregators are cached for each <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> object.</para>
            </remarks>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            IClassifierAggregatorService aggregator = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IClassifierAggregatorService.GetClassifier(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Gets the cached <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassifier"/> for the given <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.  
            If one does not exist, an <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassifier"/> will be created and cached with the given <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
            <param name="textBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> with which to retrieve/create the <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassifier"/>.</param>
            <returns>The cached <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassifier"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="textBuffer"/> is null.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Classification.IClassifierProvider">
            <summary>
            Creates a classifier for a given <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
            <remarks>This is a MEF component part, and should be exported with the following attribute:
            [Export(NameSource=typeof(IClassifierProvider))]
            Component exporters must add at least one content type attribute to specify the
            content types for which the component is valid.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IClassifierProvider.GetClassifier(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Gets a classifier for the given text buffer.
            </summary>
            <param name="textBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> to classify.</param>
            <returns>A classifier for the text buffer, or null if the provider cannot do so in its current state.</returns>   
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.EditorOptionKey`1">
            <summary>
            Represents a type-safe key for editor options.
            </summary>
            <typeparam name="T">The type of the option value.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.EditorOptionKey`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.EditorOptionKey`1"/>.
            </summary>
            <param name="name">The name of the option key.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.EditorOptionKey`1.Equals(System.Object)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Editor.EditorOptionKey`1"/> objects are the same.
            </summary>
            <param name="obj">The object to be compared.</param>
            <returns><c>true</c> if the objects are the same, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.EditorOptionKey`1.GetHashCode">
            <summary>
            Gets the hash code for this object.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.EditorOptionKey`1.ToString">
            <summary>
            Converts this object to a string. 
            </summary>
            <returns>The name of the option.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.EditorOptionKey`1.op_Equality(Microsoft.VisualStudio.Text.Editor.EditorOptionKey{`0},Microsoft.VisualStudio.Text.Editor.EditorOptionKey{`0})">
            <summary>
            Determines whether two instances of this type are the same.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.EditorOptionKey`1.op_Inequality(Microsoft.VisualStudio.Text.Editor.EditorOptionKey{`0},Microsoft.VisualStudio.Text.Editor.EditorOptionKey{`0})">
            <summary>
            Determines whether two instances of this type are different.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.EditorOptionKey`1.Name">
            <summary>
            Gets the name of this key.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.DefaultOptionExtensions">
            <summary>
            Extension methods for common general options.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.DefaultOptionExtensions.IsConvertTabsToSpacesEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Determines whether the option to convert tabs to spaces is enabled in the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions"/>.
            </summary>
            <param name="options">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions"/>.</param>
            <returns><c>true</c> if the option is enabled, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.DefaultOptionExtensions.GetTabSize(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
             <summary>
            Gets the size of the tab for the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions"/>.
             </summary>
             <param name="options">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions"/>.</param>
             <returns>The number of spaces of the tab size.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.DefaultOptionExtensions.GetIndentSize(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
             <summary>
            Gets the size of an indent for the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions"/>.
             </summary>
             <param name="options">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions"/>.</param>
             <returns>The number of spaces of the indent size.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.DefaultOptionExtensions.GetReplicateNewLineCharacter(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Determines whether to duplicate the new line character if it is already present when inserting a new line.
            </summary>
            <param name="options">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions"/>.</param>
            <returns><c>true</c> if the new line character should be duplicated, otherwise <c>false</c>,</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.DefaultOptionExtensions.GetNewLineCharacter(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Gets the new line character for the specified editor options.
            </summary>
            <param name="options">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions"/>.</param>
            <returns>A string containing the new line character or characters.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.DefaultOptions">
            <summary>
            Common general options.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultOptions.ConvertTabsToSpacesOptionId">
            <summary>
            The default option that determines whether to convert tabs to spaces.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultOptions.TabSizeOptionId">
            <summary>
            The default option that determines size of a tab.
            </summary>
            <remarks>This option is used to determine the numerical column offset of a tab
            character ('\t') and, if <see cref="T:Microsoft.VisualStudio.Text.Editor.ConvertTabsToSpaces"/> is enabled, the number of spaces to which a tab
            should be converted.</remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultOptions.IndentSizeOptionId">
            <summary>
            The default option that determines size of an indent.
            </summary>
            <remarks>This option is used to determine the numerical column offset of an indent level.</remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultOptions.ReplicateNewLineCharacterOptionId">
            <summary>
            The default option that determines whether to duplicate the new line character already present
            when inserting a new line.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultOptions.NewLineCharacterOptionId">
            <summary>
            The default option that determines the newline character or characters. 
            </summary>
            <remarks>The newline character can be a string, as in the common case of "\r\n". This setting applies
            when <see cref="T:Microsoft.VisualStudio.Text.Editor.ReplicateNewLineCharacter"/> is <c>false</c>, or when <see cref="T:Microsoft.VisualStudio.Text.Editor.ReplicateNewLineCharacter"/> is <c>true</c> and
            the text buffer is empty.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ConvertTabsToSpaces">
            <summary>
            The option definition that determines whether to convert tabs to spaces.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition`1">
            <summary>
            Represents the definition of an editor option.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition">
            <summary>
            The definition of an editor option.
            </summary>
            <remarks>
            This is a MEF component part, and should be exported with:
            [Export(typeof(EditorOptionDefinition))]
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition.IsApplicableToScope(Microsoft.VisualStudio.Utilities.IPropertyOwner)">
            <summary>
            Determines whether this option is applicable for the given scope (for example, a text buffer).
            The default implementation returns <c>true</c>. An option, by default, is applicable to any scope.
            </summary>
            <remarks>This method will not be called for the global scope. Every option is
            valid by definition in the global scope.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition.IsValid(System.Object@)">
            <summary>
            Determines whether the proposed value is valid.
            </summary>
            <param name="proposedValue">The proposed value for this option.</param>
            <returns><c>true</c> if the value is valid, otherwise <c>false</c>.</returns>
            <remarks>By the time the value is passed to this method, it has already
            been checked to be of the correct ValueType.
            The implementer of this method may modify the value.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition.Equals(System.Object)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition"/> objects are the same.
            </summary>
            <param name="obj">The object to be compared.</param>
            <returns><c>true</c> if the two objects are the same, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition.GetHashCode">
            <summary>
            Gets the hash code of this type.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition.DefaultValue">
            <summary>
            Gets the default value of the option.
            </summary>
            <remarks> The type of the value must be the same as the <see cref="P:Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition.ValueType"/>.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition.ValueType">
            <summary>
            Gets the actual type of the option. This is used to ensure
            that setting the option by using the editor options registry
            is type-safe.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition.Name">
            <summary>
            Gets the name of the option from the options registry.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition`1.IsValid(System.Object@)">
            <summary>Determines whether the proposed value is valid.
            </summary>
            <param name="proposedValue">The proposed value for this option.</param>
            <returns><c>true</c> if the value is valid, otherwise <c>false</c>.</returns>
            <remarks>By the time the value is passed to this method, it has already
            been checked to be of the correct ValueType.
            The implementer of this method may modify the value.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition`1.IsValid(`0@)">
            <summary>
            Determines whether the proposed value is valid.
            </summary>
            <param name="proposedValue">The proposed value for this option.</param>
            <returns><c>true</c> if the value is valid, otherwise <c>false</c>.</returns>
            <remarks>The implementer of this method may modify the value.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition`1.ValueType">
            <summary>
            Gets the actual type of the option.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition`1.Name">
            <summary>
            Gets the name of the option.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition`1.DefaultValue">
            <summary>
            Gets the default value of the option.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition`1.Key">
            <summary>
            Gets the key of this option.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition`1.Default">
            <summary>
            Gets the default value of this option.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ConvertTabsToSpaces.Default">
            <summary>
            Gets the default value (<c>true</c>)>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ConvertTabsToSpaces.Key">
            <summary>
            Gets the editor option key.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.TabSize">
            <summary>
            The option definition that determines the size (in number of spaces) of a tab.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TabSize.IsValid(System.Int32@)">
            <summary>
            Determines whether a given tab size is valid.
            </summary>
            <param name="proposedValue">The size of the tab, in number of spaces.</param>
            <returns><c>true</c> if <paramref name="proposedValue"/> is a valid size, otherwise <c>false</c>.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TabSize.Default">
            <summary>
            Gets the default value (4).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TabSize.Key">
            <summary>
            Gets the editor option key.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IndentSize">
            <summary>
            The option definition that determines the size (in number of spaces) of an indent.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IndentSize.IsValid(System.Int32@)">
            <summary>
            Determines whether a given indent size is valid.
            </summary>
            <param name="proposedValue">The size of the indent, in number of spaces.</param>
            <returns><c>true</c> if <paramref name="proposedValue"/> is a valid size, otherwise <c>false</c>.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IndentSize.Default">
            <summary>
            Gets the default value (4).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IndentSize.Key">
            <summary>
            Gets the editor option key.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ReplicateNewLineCharacter">
            <summary>
            The option definition that determines whether to duplicate a newline character when inserting a line.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ReplicateNewLineCharacter.Default">
            <summary>
            Gets the default value (<c>true</c>).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ReplicateNewLineCharacter.Key">
            <summary>
            Gets the editor option key.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.NewLineCharacter">
            <summary>
            The option definition that specifies the newline character or characters.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.NewLineCharacter.Default">
            <summary>
            Gets the default value ("\r\n").
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.NewLineCharacter.Key">
            <summary>
            Gets the editor option key.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.ITextSearchService">
            <summary>
            Searches a <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> with different search options.
            </summary>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            ITextSearchService textSearch = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextSearchService.FindNext(System.Int32,System.Boolean,Microsoft.VisualStudio.Text.Operations.FindData)">
            <summary>
            Searches for the next occurrence of the search string.
            </summary>
            <param name="startIndex">
            The index from which to begin the search.
            </param>
            <param name="wraparound">
            Determines whether the search wraps to the beginning of the buffer when it reaches the end of the buffer.
            </param>
            <param name="findData">
            The data to use for this search.
            </param>
            <returns>
            The <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> containing the match if a match was found, or null if no matches were found.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/> is less than zero or greater than the length of the data.</exception>
            <exception cref="T:System.ArgumentException"> The UseRegularExpressions flag is set and the search string is an invalid regular expression.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="findData"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextSearchService.FindAll(Microsoft.VisualStudio.Text.Operations.FindData)">
            <summary>
            Searches for all the occurrences of the search string.
            </summary>
            <param name="findData">
            The data to use for this search.
            </param>
            <returns>
            A list of all the matches, or null if no matches were found.
            </returns>
            <exception cref="T:System.ArgumentException"> The UseRegularExpressions flag of the find options is set and the search string is an invalid regular expression.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="findData"/> is null.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigatorProvider">
            <summary>
            Gets an <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator"/> for a given <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            Component exporters must supply at least one content type attribute"/&gt; to specify the applicable content types.
            </summary>
            <remarks>
            <para>This is a MEF component part, and should be exported with the following attribute:
            [Export(NameSource=typeof(ITextStructureNavigatorProvider))]</para>
            <para>Use the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigatorSelectorService"/> to import a provider for a particular content type.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigatorProvider.CreateTextStructureNavigator(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Creates a new <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator"/> for a given <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
            <param name="textBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> for which to get the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator"/>.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator"/> for <paramref name="textBuffer"/>, or null.</returns>
            <remarks>
            Providers should expect the result of this call to be cached and made available through the
            <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigatorSelectorService"/>.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigatorSelectorService">
            <summary>
            Selects and caches <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator"/> objects based on content type.
            </summary>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            ITextStructureNavigatorSelectorService navigator = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigatorSelectorService.GetTextStructureNavigator(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Gets a <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator"/> for the specified <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>, either by
            creating a new one or by using a cached value.
            </summary>
            <param name="textBuffer">
            The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> that the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator"/> will navigate.
            </param>
            <returns>
            A valid <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator"/>. This value will never be <c>null</c>.
            </returns>
            <remarks>
            <para>
            If a navigator for the exact <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> of the given <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> cannot be found, this method returns
            one for the parent <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/>. If there is more than one parent <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> for which 
            there is a matching <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator"/>, then this method returns the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator"/>
            of an arbitrary parent.
            </para>
            <para>
            If a new navigator is created, it is cached together with <paramref name="textBuffer"/>, and its lifetime is the same as that of <paramref name="textBuffer"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="textBuffer"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigatorSelectorService.CreateTextStructureNavigator(Microsoft.VisualStudio.Text.ITextBuffer,Microsoft.VisualStudio.Utilities.IContentType)">
            <summary>
            Creates a new <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator"/> for the specified <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> by using the
            specified <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> to select the navigator.
            </summary>
            <param name="textBuffer">
            The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> that the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator"/> will navigate.
            </param>
            <param name="contentType">The content type to use.</param>
            <returns>
            A valid <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator"/>. This value is never <c>null</c>).
            </returns>
            <remarks>
            <para>
            If a navigator for the given content type cannot be found, this method
            uses one for the parent <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/>. If there is more than one parent <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> for which 
            there is a matching <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator"/>, then this method returns the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator"/>
            of an arbitrary parent.
            </para>
            <para>
            The navigator that is created is not cached; subsequent calls to this method for the same buffer and
            content type will return different <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator"/> objects.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="textBuffer"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.EditorOptionChangedEventArgs">
            <summary>
            Provides information for the <see cref="E:Microsoft.VisualStudio.Text.Editor.IEditorOptions.OptionChanged"/> event.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.EditorOptionChangedEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.EditorOptionChangedEventArgs"/>.
            </summary>
            <param name="optionId">The ID of the option.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.EditorOptionChangedEventArgs.OptionId">
            <summary>
            Gets the ID of the option that has changed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions">
            <summary>
            Represents common editor options and an extensible mechanism for modifying values and adding new options.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IEditorOptions.GetOptionValue``1(System.String)">
            <summary>
            Gets the value of the option identified by the specified option ID.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="optionId">The ID of the option.</param>
            <returns>The current value of the option.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IEditorOptions.GetOptionValue``1(Microsoft.VisualStudio.Text.Editor.EditorOptionKey{``0})">
            <summary>
            Gets the value of the option identified by the specified key.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="key">The key of the option.</param>
            <returns>The current value of the option.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IEditorOptions.GetOptionValue(System.String)">
            <summary>
            Gets the value of the option specified by the option ID.
            </summary>
            <param name="optionId">The ID of the option.</param>
            <returns>The current value of the option, as an object. The caller is responsible for casting the object to the correct type.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IEditorOptions.SetOptionValue(System.String,System.Object)">
            <summary>
            Sets the value of the specified option in the current scope. If the given option is not applicable
            in the current scope, it attempts to set the option in the global scope.
            </summary>
            <param name="optionId">The ID of the option.</param>
            <param name="value">The new value of the option.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IEditorOptions.SetOptionValue``1(Microsoft.VisualStudio.Text.Editor.EditorOptionKey{``0},``0)">
            <summary>
            Sets the value of the specified option in the current scope. If the given option is not applicable
            in the current scope, it attempts to set the option in the global scope.
            </summary>
            <param name="key">The key of the option.</param>
            <param name="value">The new value of the option.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IEditorOptions.IsOptionDefined(System.String,System.Boolean)">
            <summary>
            Determines whether the specified option is defined.
            </summary>
            <param name="optionId">The ID of the option.</param>
            <param name="localScopeOnly"><c>true</c> to search only in this scope, <c>false</c> 
            to try parent scopes as well. This setting has no effect if the current scope is global.</param>
            <returns><c>true</c> if the option is defined, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IEditorOptions.IsOptionDefined``1(Microsoft.VisualStudio.Text.Editor.EditorOptionKey{``0},System.Boolean)">
            <summary>
            Determines whether the specified editor option is defined.
            </summary>
            <param name="key">The key of the option.</param>
            <param name="localScopeOnly"><c>true</c> to search only in this scope, <c>false</c> 
            to try parent scopes as well. This setting has no effect if the current scope is global.</param>
            <returns><c>true</c> if the option is defined, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IEditorOptions.ClearOptionValue(System.String)">
            <summary>
            Clear the locally-defined value for the given option.
            </summary>
            <param name="optionId">The ID of the option.</param>
            <returns><c>true</c> if the option was defined locally and cleared.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IEditorOptions.ClearOptionValue``1(Microsoft.VisualStudio.Text.Editor.EditorOptionKey{``0})">
            <summary>
            Clear the locally-defined value for the given option.
            </summary>
            <param name="key">The key of the option.</param>
            <returns><c>true</c> if the option was defined locally and cleared.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IEditorOptions.SupportedOptions">
            <summary>
            Gets the supported options.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IEditorOptions.GlobalOptions">
            <summary>
            Gets the global options.
            </summary>
            <remarks>This returns the global <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions"/>, even if
            the current scope is global.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IEditorOptions.Parent">
            <summary>
            Gets or sets the immediate parent of this set of options. If this set of
            options has no parent scope (because it is the global scope), this property is null
            and cannot be set.
            </summary>
            <remarks>
            When calling set, the new parent must be non-null and a different instance
            of IEditorOptions that was created from the same 
            <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptionsFactoryService"/> as this instance.  Also,
            cycles in the Parent chain are not allowed.</remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.IEditorOptions.OptionChanged">
            <summary>
            Occurs when any option changes. Options that change in the global scope
            cause this event to be raised if they are also applicable to this
            scope.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IEditorOptionsFactoryService">
            <summary>
            Represents a service that gets <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions"/> for a specified scope or for the global scope.
            </summary>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            IEditorOptionsFactoryService factory = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IEditorOptionsFactoryService.GetOptions(Microsoft.VisualStudio.Utilities.IPropertyOwner)">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions"/> for the <see cref="T:Microsoft.VisualStudio.Utilities.IPropertyOwner"/>. Buffers and views are
            property owners. Creates new options for the scope if none have previously been created.
            </summary>
            <param name="scope">The <see cref="T:Microsoft.VisualStudio.Utilities.IPropertyOwner"/>.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions"/> for the given <see cref="T:Microsoft.VisualStudio.Utilities.IPropertyOwner"/>.</returns>
            <remarks>
            This method returns a set of options for a given scope. Options defined in this scope will
            not affect options in its ancestor scopes. If you try to get an option in this scope, the method checks
            for any overridden values in the scope. If there are none, it gets the value from the options of
            its parent scope. The set of applicable options may change depending on the
            scope. An option defined in a text view scope will not apply to text buffers.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IEditorOptionsFactoryService.CreateOptions">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions"/> that is not bound to any
            particular scope.
            </summary>
            <returns>A new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions"/>, parented on the
            <see cref="P:Microsoft.VisualStudio.Text.Editor.IEditorOptionsFactoryService.GlobalOptions"/></returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IEditorOptionsFactoryService.GlobalOptions">
            <summary>
            Gets the global <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions"/>.
            </summary>
            <remarks>
            An option set in the global scope does not override the same option set in a specific scope, but it is visible in
            a specific scope that has not overridden that option.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.TagAggregatorOptions">
            <summary>
            Tag Aggregator options.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Tagging.TagAggregatorOptions.None">
            <summary>
            Default behavior. The tag aggregator will map up and down through all projection buffers.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Tagging.TagAggregatorOptions.MapByContentType">
            <summary>
            Only map through projection buffers that have the "projection" content type.
            </summary>
            <remarks>
            <para>
            Normally, a tag aggregator will map up and down through all projection buffers (buffers
            that implement <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBufferBase"/>).  This flag will cause the projection buffer
            to not map through buffers that are projection buffers but do not have a projection content type.
            </para>
            </remarks>
            <comment>This is used by the classifier aggregator, as classification depends on content type.</comment>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.BatchedTagsChangedEventArgs">
            <summary>
            Provides a list of all mapping spans where tags have changed since the last BatchedTagsChanged event. 
            The BatchedTagsChanged event is raised on the same thread as the thread that created the tag aggregator.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.BatchedTagsChangedEventArgs.#ctor(System.Collections.Generic.IList{Microsoft.VisualStudio.Text.IMappingSpan})">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Tagging.BatchedTagsChangedEventArgs"/> with the specified list of <see cref="T:Microsoft.VisualStudio.Text.IMappingSpan"/>s.
            </summary>
            <param name="spans">The list of <see cref="T:Microsoft.VisualStudio.Text.IMappingSpan"/>s where the tags have changed.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="spans"/> is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.BatchedTagsChangedEventArgs.Spans">
            <summary>
            The list of <see cref="T:Microsoft.VisualStudio.Text.IMappingSpan"/>s where the tags have changed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.TrackingTagSpan`1">
            <summary>
            Associates an <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITag"/> with a given <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/>.
            This is used by SimpleTagger to provide buffer-level tracking and caching of tag spans.
            </summary>
            <typeparam name="T">The type, which must be a subclass of <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITag"/>.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.TrackingTagSpan`1.#ctor(Microsoft.VisualStudio.Text.ITrackingSpan,`0)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Tagging.TrackingTagSpan`1"/>.
            </summary>
            <param name="span">The tracking span with which to associate the tag.</param>
            <param name="tag">The tag associated with the span.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="span"/> or <paramref name="tag"/> is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.TrackingTagSpan`1.Tag">
            <summary>
            The tag located in this span.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.TrackingTagSpan`1.Span">
            <summary>
            The tracking span for this tag.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.ITagAggregator`1">
            <summary>
            Aggregates all the tag providers in a buffer graph for the specified type of tag.
            </summary>
            <typeparam name="T">The type of tag returned by the aggregator.</typeparam>
            <remarks>
            The default tag aggregator implementation also does the following:
            for each <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagger`1"/>  over which it aggregates tags, if the tagger is
            <see cref="T:System.IDisposable"/>, call Dispose() on it when the aggregator is disposed
            or when the taggers are dropped. For example, you should call Dispose() when 
            the content type of a text buffer changes or when a buffer is removed from the buffer graph.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.ITagAggregator`1.GetTags(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Gets all the tags that overlap or are contained by the specified <paramref name="span"/> of the same type as the aggregator.
            </summary>
            <param name="span">The span to search.</param>
            <returns>All the tags that overlap the region.</returns>
            <remarks>
            <para>The default tag aggregator lazily enumerates the tags of its <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagger`1"/> objects.
            Because of this, the ordering of the returned mapping spans cannot be predicted.
            If you need an ordered set of spans, you should collect the returned tag spans, after being mapped
            to the buffer of interest, into a sortable collection.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.ITagAggregator`1.GetTags(Microsoft.VisualStudio.Text.IMappingSpan)">
            <summary>
            Gets all the tags that overlap or are contained by the specified <paramref name="span"/> of the type of the aggregator.
            </summary>
            <param name="span">The span to search.</param>
            <returns>All the tags that overlap the region.</returns>
            <remarks>
            <para>The default tag aggregator lazily enumerates the tags of its <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagger`1"/> objects.
            Because of this, the ordering of the returned mapping spans cannot be predicted.
            If you need an ordered set of spans, you should collect the returned tag spans, after being mapped
            to the buffer of interest, into a sortable collection.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.ITagAggregator`1.GetTags(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection)">
            <summary>
            Gets all the tags that overlap or are contained by the specified <paramref name="snapshotSpans"/> of the type of the aggregator.
            </summary>
            <param name="snapshotSpans">The spans to search.</param>
            <returns>All the tags that overlap the region.</returns>
            <remarks>
            <para>The default tag aggregator lazily enumerates the tags of its <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagger`1"/> objects.
            Because of this, the ordering of the returned mapping spans cannot be predicted.
            If you need an ordered set of spans, you should collect the returned tag spans, after being mapped
            to the buffer of interest, into a sortable collection.</para>
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Tagging.ITagAggregator`1.TagsChanged">
            <summary>
            Occurs when tags are added to or removed from providers.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Tagging.ITagAggregator`1.BatchedTagsChanged">
            <summary>
            Occurs on idle after one or more TagsChanged events.
            </summary>
            <remarks>
            <para>
            This is a batched version of the TagsChanged event.  One or more TagsChanged events 
            are accumulated and then raised as a single BatchedTagsChanged event on idle using the 
            <see cref="P:System.Windows.Threading.Dispatcher.CurrentDispatcher"/> that was active when the ITagAggregator was
            created. 
            </para>
            <para>
            This event is less noisy than TagsChanged and is always raised on the thread
            that was active when the ITagAggregator was created.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.ITagAggregator`1.BufferGraph">
            <summary>
            The buffer graph over which this aggregator operates.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.IBufferTagAggregatorFactoryService">
            <summary>
            A factory that creates an <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagAggregator`1"/> for an <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
            <remarks>This is a MEF component part, and implementations should use the following to import it:
            [Import]
            IBufferTagAggregatorFactoryService factory = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.IBufferTagAggregatorFactoryService.CreateTagAggregator``1(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Creates a tag aggregator for a <paramref name="textBuffer"/>.
            </summary>
            <param name="textBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> over which the aggregator should aggregate tags,
            including all source buffers if the buffer is a projection buffer.</param>
            <typeparam name="T">The type of tag to aggregate.</typeparam>
            <returns>The tag aggregator for <paramref name="textBuffer"/>.</returns>
            <remarks>The ITagAggregatorr&lt;T&gt;.DispatchedTagsChanged event will be raised on the thread used to create the tag aggregator.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.IBufferTagAggregatorFactoryService.CreateTagAggregator``1(Microsoft.VisualStudio.Text.ITextBuffer,Microsoft.VisualStudio.Text.Tagging.TagAggregatorOptions)">
            <summary>
            Creates a tag aggregator for a <paramref name="textBuffer"/>, using the given options.
            </summary>
            <param name="textBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> over which the aggregator should aggregate tags,
            including all source buffers if the buffer is a projection buffer.</param>
            <param name="options">The options to use for the newly created aggregator.</param>
            <typeparam name="T">The type of tag to aggregate.</typeparam>
            <returns>The tag aggregator for <paramref name="textBuffer"/>.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.ITagger`1">
            <summary>
            A provider of tags over a buffer.
            </summary>
            <typeparam name="T">The type of tags to generate.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.ITagger`1.GetTags(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection)">
            <summary>
            Gets all the tags that overlap the <paramref name="spans"/>.
            </summary>
            <param name="spans">The spans to visit.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagSpan`1"/> for each tag.</returns>
            <remarks>
            <para>Taggers are not required to return their tags in any specific order.</para>
            <para>The recommended way to implement this method is by using generators ("yield return"),
            which allows lazy evaluation of the entire tagging stack.</para>
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Tagging.ITagger`1.TagsChanged">
            <summary>
            Occurs when tags are added to or removed from the provider.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.IMappingTagSpan`1">
            <summary>
            Associates an <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITag"/> with a specified <see cref="T:Microsoft.VisualStudio.Text.IMappingSpan"/>.
            </summary>
            <typeparam name="T">The type, which must be a subtype of <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITag"/>.</typeparam>
            <remarks>
            Use <see cref="T:Microsoft.VisualStudio.Text.Tagging.MappingTagSpan`1"/> as the implementation of this
            interface.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.IMappingTagSpan`1.Tag">
            <summary>
            Gets the tag located in this span.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.IMappingTagSpan`1.Span">
            <summary>
            Gets the mapping span for this tag.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.MappingTagSpan`1">
            <summary>
            The implementation of IMappingTagSpan&lt;T&gt;.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.MappingTagSpan`1.#ctor(Microsoft.VisualStudio.Text.IMappingSpan,`0)">
            <summary>
            Creates a mapping tag span.
            </summary>
            <param name="span">The mapping span with which to associate the tag.</param>
            <param name="tag">The tag associated with the span.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="span"/> or <paramref name="tag"/> is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.MappingTagSpan`1.Tag">
            <summary>
            Gets the tag located in this span.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.MappingTagSpan`1.Span">
            <summary>
            Gets the mapping span for this tag.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.SimpleTagger`1">
            <summary>
            Provides simple, thread-safe storage of and interaction with tags of the given type.
            </summary>
            <typeparam name="T">The type, which must be a subtype of <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITag"/>.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.SimpleTagger`1.#ctor(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Tagging.SimpleTagger`1"/> for the specified buffer.
            </summary>
            <param name="buffer">Subject buffer that will be tagged.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.SimpleTagger`1.CreateTagSpan(Microsoft.VisualStudio.Text.ITrackingSpan,`0)">
            <summary>
            Adds a tag over the given span.
            </summary>
            <param name="span">The <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> that tracks the tag across text versions.</param>
            <param name="tag">The tag to associate with the given span.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Tagging.TrackingTagSpan`1"/> that was added, which can be used to remove the tag later on.</returns>
            <remarks>This method is safe to use from any thread.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="span"/> or <paramref name="tag"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.SimpleTagger`1.RemoveTagSpan(Microsoft.VisualStudio.Text.Tagging.TrackingTagSpan{`0})">
            <summary>
            Removes a tag span that was created by calling <see cref="M:Microsoft.VisualStudio.Text.Tagging.SimpleTagger`1.CreateTagSpan(Microsoft.VisualStudio.Text.ITrackingSpan,`0)"/>.
            </summary>
            <param name="tagSpan">The <see cref="T:Microsoft.VisualStudio.Text.Tagging.TrackingTagSpan`1"/> returned from a previous call to <see cref="M:Microsoft.VisualStudio.Text.Tagging.SimpleTagger`1.CreateTagSpan(Microsoft.VisualStudio.Text.ITrackingSpan,`0)"/>.</param>
            <returns><c>true</c> if removed successfully, otherwise <c>false</c>.</returns>
            <remarks>This method is safe to use from any thread.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.SimpleTagger`1.RemoveTagSpans(System.Predicate{Microsoft.VisualStudio.Text.Tagging.TrackingTagSpan{`0}})">
            <summary>
            Removes all tag spans that match the conditions specified by the predicate.
            </summary>
            <param name="match">The <see cref="T:System.Predicate`1"/> that defines the match.</param>
            <returns>The number of tag spans removed.</returns>
            <remarks>This method is safe to use from any thread.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.SimpleTagger`1.GetTaggedSpans(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Gets the tagged spans that intersect the given <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/>.
            </summary>
            <param name="span">The <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> to use.</param>
            <returns>The set of <see cref="T:Microsoft.VisualStudio.Text.Tagging.TrackingTagSpan`1"/> objects that intersect the given span, in order.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.SimpleTagger`1.Update">
            <summary>
            Gets an IDisposible object that represents an update batch.
            </summary>
            <returns>An IDisposible object that represents an update batch.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.SimpleTagger`1.GetTags(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection)">
            <summary>
            Gets all the tags that overlap the spans in the specified snapshot
            of the desired type.
            </summary>
            <param name="spans">The spans to visit.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagSpan`1"/> for each tag.</returns>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Tagging.SimpleTagger`1.TagsChanged">
            <summary>
            Occurs when one or more tags have been added or removed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.TagsChangedEventArgs">
            <summary>
            Provides information about the <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagAggregator`1"/>.TagsChanged event.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.TagsChangedEventArgs.#ctor(Microsoft.VisualStudio.Text.IMappingSpan)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Tagging.TagsChangedEventArgs"/> with the specified <see cref="T:Microsoft.VisualStudio.Text.IMappingSpan"/>.
            </summary>
            <param name="span">The <see cref="T:Microsoft.VisualStudio.Text.IMappingSpan"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="span"/> is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.TagsChangedEventArgs.Span">
            <summary>
            Gets the span over which tags have changed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.ITaggerProvider">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagger`1"/> for a given buffer.
            </summary>
            <remarks>This is a MEF component part, and implementers must use the following attributes:
            [Export(nameSource=typeof(ITaggerProvider))]
            Exports must specify at least one content type attribute and at least one tag type attribute.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.ITaggerProvider.CreateTagger``1(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Creates a tag provider for the specified buffer.
            </summary>
            <param name="buffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.</param>
            <typeparam name="T">The type of the tag.</typeparam>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.ITagSpan`1">
            <summary>
            Associates an <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITag"/> with a given <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/>.
            </summary>
            <typeparam name="T">The type, which must be a subclass of <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITag"/>.</typeparam>
            <remarks>
            Use <see cref="T:Microsoft.VisualStudio.Text.Tagging.TagSpan`1"/> as the implementation of this
            interface.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.ITagSpan`1.Tag">
            <summary>
            Gets the tag located in this span.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.ITagSpan`1.Span">
            <summary>
            Gets the snapshot span for this tag.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.TagSpan`1">
            <summary>
            The implementation of ITagSpan&lt;T&gt;.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.TagSpan`1.#ctor(Microsoft.VisualStudio.Text.SnapshotSpan,`0)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Tagging.TagSpan`1"/> with the specified snapshot span and tag.
            </summary>
            <param name="span">The <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> with which to associate the tag.</param>
            <param name="tag">The tag associated with the span.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tag"/> is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.TagSpan`1.Tag">
            <summary>
            Gets the tag located in this span.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.TagSpan`1.Span">
            <summary>
            Gets the snapshot span for this tag.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.TagTypeAttribute">
            <summary>
            Declares the types of tags an <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagger`1"/>
            produces. This attribute is placed on the provider of the tagger.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.TagTypeAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Tagging.TagTypeAttribute"/>.
            </summary>
            <param name="tagType">The tag type, which must derive from <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITag"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tagType"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="tagType"/> does not derive from <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITag"/>.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.TagTypeAttribute.TagTypes">
            <summary>
            Gets the type of the tag.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.ClassificationTag">
            <summary>
            An implementation of <see cref="T:Microsoft.VisualStudio.Text.Tagging.IClassificationTag"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.IClassificationTag">
            <summary>
            A tag that represents a classification type.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.ITag">
            <summary>
            The base interface of all tags.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.IClassificationTag.ClassificationType">
            <summary>
            The classification type associated with this tag.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.ClassificationTag.#ctor(Microsoft.VisualStudio.Text.Classification.IClassificationType)">
            <summary>
            Create a new tag associated with the given type of
            classification.
            </summary>
            <param name="type">The type of classification</param>
            <exception cref="T:System.ArgumentNullException">If the type is passed in as null</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.ClassificationTag.ClassificationType">
            <summary>
            The classification type associated with this tag.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.IUrlTag">
            <summary>
            A tag that represents a URL.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.IUrlTag.Url">
            <summary>
            The URL.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.UrlTag">
            <summary>
            An implementation of <see cref="T:Microsoft.VisualStudio.Text.Tagging.IUrlTag"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.UrlTag.#ctor(System.Uri)">
            <summary>
            Create a new tag with the given URL.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="url"/> is <c>null</c></exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Document.ChangeTag">
            <summary>
            A tag associated with a span of modified text. 
            </summary>
            <remarks>
            <para>Use the CreateTagAggregator method of IViewTagAggregatorFactoryService to instantiate an aggregator of change tags.</para>
            <para>Change taggers lose their change history when they are no longer consumed by any tag aggregators. They resume
            tracking changes if a new aggregator is created.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Document.ChangeTag.#ctor(Microsoft.VisualStudio.Text.Document.ChangeTypes)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Document.ChangeTag"/> with the specified change type.
            </summary>
            <param name="type">The type of change for the tag.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Document.ChangeTag.ChangeTypes">
            <summary>
            Gets the type of change for the tag.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Document.ChangeTypes">
            <summary>
            Specifies the types of changes for modified text.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Document.ChangeTypes.None">
            <summary>
            No change types are set.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Document.ChangeTypes.ChangedSinceOpened">
            <summary>
            The change occurred after the document was opened.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Document.ChangeTypes.ChangedSinceSaved">
            <summary>
            The change occurred after the document was saved.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.ITextDataModel">
            <summary>
            Prepares the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> for presentation in the editor. Typically the <see cref="T:Microsoft.VisualStudio.Text.ITextDataModel"/>
            comprises a single <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> that is exposed as both the <see cref="P:Microsoft.VisualStudio.Text.ITextDataModel.DocumentBuffer"/> and
            the <see cref="P:Microsoft.VisualStudio.Text.ITextDataModel.DataBuffer"/>. However, in some cases, a graph of <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/>s is useful to
            present as it if were a single document. In that case, the <see cref="P:Microsoft.VisualStudio.Text.ITextDataModel.DataBuffer"/> will be an <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer"/>
            that uses the <see cref="P:Microsoft.VisualStudio.Text.ITextDataModel.DocumentBuffer"/> as a source buffer, directly or indirectly. 
            </summary>
            <remarks>
            The <see cref="P:Microsoft.VisualStudio.Text.ITextDataModel.ContentType"/> usually is the same as that of the <see cref="P:Microsoft.VisualStudio.Text.ITextDataModel.DocumentBuffer"/>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextDataModel.ContentType">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> of the text data model. Usually this is the same as the <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/>
            of the <see cref="P:Microsoft.VisualStudio.Text.ITextDataModel.DocumentBuffer"/> but it need not be.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.ITextDataModel.ContentTypeChanged">
            <summary>
            Raised when the <see cref="P:Microsoft.VisualStudio.Text.ITextDataModel.ContentType"/> of this text data model changes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextDataModel.DocumentBuffer">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> corresponding to a document in the file system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextDataModel.DataBuffer">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> that should be presented in the editor.
            </summary>
            <remarks>
            This text buffer may be the same as the <see cref="P:Microsoft.VisualStudio.Text.ITextDataModel.DocumentBuffer"/>, or it may be a projection buffer 
            whose ultimate source is the <see cref="P:Microsoft.VisualStudio.Text.ITextDataModel.DocumentBuffer"/>. The data buffer is the highest buffer that
            is shared among different views.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.TextDataModelContentTypeChangedEventArgs">
            <summary>
            Provides information about a change to the <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> of an <see cref="T:Microsoft.VisualStudio.Text.ITextDataModel"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextDataModelContentTypeChangedEventArgs.#ctor(Microsoft.VisualStudio.Utilities.IContentType,Microsoft.VisualStudio.Utilities.IContentType)">
            <summary>
            Constructs a <see cref="T:Microsoft.VisualStudio.Text.TextDataModelContentTypeChangedEventArgs"/>.
            </summary>
            <param name="beforeContentType">The <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> before the change.</param>
            <param name="afterContentType">The <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> after the change.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.TextDataModelContentTypeChangedEventArgs.BeforeContentType">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> of the <see cref="T:Microsoft.VisualStudio.Text.ITextDataModel"/> before the change.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.TextDataModelContentTypeChangedEventArgs.AfterContentType">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> of the <see cref="T:Microsoft.VisualStudio.Text.ITextDataModel"/> after the change.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.FindData">
            <summary>
            Represents the set of data used in a search by the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextSearchService"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.FindData.#ctor(System.String,Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Text.Operations.FindOptions,Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Operations.FindData"/> with the specified search pattern, text snapshot,
            find options, and text structure navigator.
            </summary>
            <param name="searchPattern">The search pattern.</param>
            <param name="textSnapshot">The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> to search.</param>
            <param name="findOptions">The <see cref="P:Microsoft.VisualStudio.Text.Operations.FindData.FindOptions"/> to use during the search.</param>
            <param name="textStructureNavigator">The <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator"/> to use during the search.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="searchPattern"/> or <paramref name="textSnapshot"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchPattern"/> is an empty string.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.FindData.#ctor(System.String,Microsoft.VisualStudio.Text.ITextSnapshot)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Operations.FindData"/> with the specified search pattern and text snapshot.
            </summary>
            <param name="searchPattern">The search pattern.</param>
            <param name="textSnapshot">The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> to search.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.FindData.Equals(System.Object)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Operations.FindData"/> objects are the same.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns><c>true</c> if the objects are the same, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.FindData.GetHashCode">
            <summary>
            Gets the hash code for the object.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.FindData.ToString">
            <summary>
            Converts the <see cref="T:Microsoft.VisualStudio.Text.Operations.FindData"/> object to a string.
            </summary>
            <returns>The string representation of the <see cref="T:Microsoft.VisualStudio.Text.Operations.FindData"/> object.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.FindData.op_Equality(Microsoft.VisualStudio.Text.Operations.FindData,Microsoft.VisualStudio.Text.Operations.FindData)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Operations.FindData"/> objects are the same.
            </summary>
            <param name="data1">The first object.</param>
            <param name="data2">The second object.</param>
            <returns><c>true</c> if the objects are the same, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.FindData.op_Inequality(Microsoft.VisualStudio.Text.Operations.FindData,Microsoft.VisualStudio.Text.Operations.FindData)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Operations.FindData"/> objects are different.
            </summary>
            <param name="data1">The first object.</param>
            <param name="data2">The second object.</param>
            <returns><c>true</c> if the two objects are different, otherwise <c>false</c>.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.FindData.SearchString">
            <summary>
            Gets or sets the string to use in the search.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The value is an empty string.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.FindData.FindOptions">
            <summary>
            Gets or sets the options that are used for the search.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.FindData.TextSnapshotToSearch">
            <summary>
            Gets or sets the <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> on which to perform the search.
            </summary>
             <exception cref="T:System.ArgumentNullException">The value is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.FindData.TextStructureNavigator">
            <summary>
            Gets or sets the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator"/> to use in determining word boundaries.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.FindOptions">
            <summary>
            Represents the options that are used in a search.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Operations.FindOptions.None">
            <summary>
            No options have been set.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Operations.FindOptions.MatchCase">
            <summary>
            The search is case-sensitive.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Operations.FindOptions.UseRegularExpressions">
             <summary>
            The search uses .Net regular expressions.
             </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Operations.FindOptions.WholeWord">
            <summary>
            The search matches whole words only.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Operations.FindOptions.SearchReverse">
            <summary>
            The search starts at the end of the string.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator">
            <summary>
            Provides methods to navigate text, such as getting word extents.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator.GetExtentOfWord(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Gets the extent of the word at the given position.
            </summary>
            <remarks><see cref="P:Microsoft.VisualStudio.Text.Operations.TextExtent.IsSignificant"/> should be set to <c>false</c> for words 
            consisting only of whitespace, unless the whitespace is a significant part of the document. If the 
            returned extent consists only of insignificant whitespace, it should include all of the adjacent whitespace, 
            including newline characters, spaces, and tabs.</remarks>
            <param name="currentPosition">
            The text position anywhere in the word for which a <see cref="T:Microsoft.VisualStudio.Text.Operations.TextExtent"/> is needed.
            </param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Text.Operations.TextExtent"/> that represents the word. The <see cref="P:Microsoft.VisualStudio.Text.Operations.TextExtent.IsSignificant"/> field is set to <c>false</c> for whitespace or other 
            insignificant characters that should be ignored during navigation.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator.GetSpanOfEnclosing(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Gets the span of the enclosing syntactic element of the specified snapshot span.
            </summary>
            <param name="activeSpan">
            The <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> from which to get the enclosing syntactic element.
            </param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> that represents the enclosing syntactic element. If the specified snapshot
            span covers multiple syntactic elements, then the method returns the least common ancestor of the elements.
            If the snapshot span covers the root element (in other words, the whole document),
            then the method returns <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> of the whole document.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator.GetSpanOfFirstChild(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Gets the span of the first child syntactic element of the specified snapshot span. 
            If the snapshot span has zero length, then the behavior is the same as that of 
            <see cref="M:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator.GetSpanOfEnclosing(Microsoft.VisualStudio.Text.SnapshotSpan)"/>.
            </summary>
            <param name="activeSpan">
            The <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> from which to get the span of the first child syntactic element.
            </param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> that represents the first child syntactic element. If the specified snapshot 
            span covers multiple syntactic elements, then this method returns the span of the least common ancestor of 
            the elements. If the specified snapshot span covers the child element, then the 
            behavior is the same as that of <see cref="M:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator.GetSpanOfEnclosing(Microsoft.VisualStudio.Text.SnapshotSpan)"/>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator.GetSpanOfNextSibling(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Gets the span of the next sibling syntactic element of the specified snapshot span. If the
            snapshot span has zero length, then the behavior is the same as that of 
            <see cref="M:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator.GetSpanOfEnclosing(Microsoft.VisualStudio.Text.SnapshotSpan)"/>.
            </summary>
            <param name="activeSpan">
            The <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> from which to get the span of the next sibling syntactic element.
            </param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> that represents the next sibling syntactic element. If the given active
            span covers multiple syntactic elements, then this method returns the span of the next sibling element.
            If the specified snapshot span covers a syntactic element that does not have a sibling element, then the 
            behavior is the same as that of <see cref="M:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator.GetSpanOfEnclosing(Microsoft.VisualStudio.Text.SnapshotSpan)"/>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator.GetSpanOfPreviousSibling(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Gets the span of the previous sibling syntactic element of the specified snapshot span. 
            If the specified span has zero length, then the behavior is the same as that of 
            <see cref="M:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator.GetSpanOfEnclosing(Microsoft.VisualStudio.Text.SnapshotSpan)"/>.
            </summary>
            <param name="activeSpan">
            The <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> from which to get the span of the previous sibling syntactic element.
            </param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> that represents the previous sibling syntactic element. If the specified snapshot
            span covers multiple syntactic elements, then this method returns the span of the previous element. 
            If the specified snapshot span covers a syntactic element that does not have a sibling element, then the 
            behavior is the same as that of <see cref="M:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator.GetSpanOfEnclosing(Microsoft.VisualStudio.Text.SnapshotSpan)"/>.
            </returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator.ContentType">
            <summary>
            Gets the content type that this navigator supports.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.TextExtent">
            <summary>
            Represents the extent of a word.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.TextExtent.#ctor(Microsoft.VisualStudio.Text.SnapshotSpan,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Operations.TextExtent"/>.
            </summary>
            <param name="span">
            The <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> that includes the extent.
            </param>
            <param name="isSignificant">
            <c>false</c> if the extent contains whitespace, unless whitespace should be treated like any other character.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.TextExtent.#ctor(Microsoft.VisualStudio.Text.Operations.TextExtent)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Operations.TextExtent"/> from the specified <see cref="T:Microsoft.VisualStudio.Text.Operations.TextExtent"/>.
            </summary>
            <param name="textExtent">The <see cref="T:Microsoft.VisualStudio.Text.Operations.TextExtent"/> from which to copy.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.TextExtent.Equals(System.Object)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Operations.TextExtent"/> objects are the same.
            </summary>
            <param name="obj">The <see cref="T:Microsoft.VisualStudio.Text.Operations.TextExtent"/> to compare.</param>
            <returns><c>true</c> if the two objects are the same, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.TextExtent.GetHashCode">
            <summary>
            Gets the hash code of the object.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.TextExtent.op_Equality(Microsoft.VisualStudio.Text.Operations.TextExtent,Microsoft.VisualStudio.Text.Operations.TextExtent)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Operations.TextExtent"/> objects are the same.
            </summary>
            <param name="extent1">The first object.</param>
            <param name="extent2">The second object.</param>
            <returns><c>true</c> if the objects are the same, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.TextExtent.op_Inequality(Microsoft.VisualStudio.Text.Operations.TextExtent,Microsoft.VisualStudio.Text.Operations.TextExtent)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Operations.TextExtent"/> objects are different.
            </summary>
            <param name="extent1">The first object.</param>
            <param name="extent2">The second object.</param>
            <returns><c>true</c> if the two objects are different, otherwise <c>false</c>.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.TextExtent.Span">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.TextExtent.IsSignificant">
            <summary>
            Determines whether the extent is significant.  <c>false</c> for whitespace or other 
            insignificant characters that should be ignored during navigation.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.VirtualSnapshotPoint">
            <summary>
            Represents a <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint"/> that may have virtual spaces.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotPoint.#ctor(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotPoint"/> at <paramref name="position"/>, with zero virtual spaces.
            </summary>
            <param name="position">The position the point in the snapshot.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotPoint.#ctor(Microsoft.VisualStudio.Text.ITextSnapshot,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotPoint"/> at <paramref name="position"/> in a <paramref name="snapshot"/>, with zero virtual spaces.
            </summary>
            <param name="snapshot">The snapshot to use.</param>
            <param name="position">The position of the snapshot point.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotPoint.#ctor(Microsoft.VisualStudio.Text.SnapshotPoint,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotPoint"/> at <paramref name="position"/>, with the specified number of virtual spaces.
            </summary>
            <param name="position">The position of the virtual snapshot point.</param>
            <param name="virtualSpaces">The number of virtual spaces after <paramref name="position"/>.</param>
            <remarks><paramref name="virtualSpaces"/> must be zero unless 
            <paramref name="position"/> corresponds to a location at the end
            of a <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine"/>.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="virtualSpaces"/> is negative.</exception>
            <remarks>If <paramref name="position"/> specifies a location that is not at the end of a line, then <paramref name="virtualSpaces"/> is set to 0.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotPoint.#ctor(Microsoft.VisualStudio.Text.ITextSnapshotLine,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotPoint"/> 
            at <paramref name="offset"/> of <paramref name="line"/>, placing the point in virtual space if necessary.
            </summary>
            <param name="line">The line on which to place the point.</param>
            <param name="offset">The offset (zero-based) of the point.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="line"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> is negative.</exception>
            <remarks>
            <paramref name="offset"/> is a character offset from the start of the line. It does not correspond to a column position (for example, if the line consists of a single tab and the offset is 2, then
            the resulting VirtualSnapshotPoint will be one "space" past the end of the line).</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotPoint.GetHashCode">
            <summary>
            Gets the hash code for the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotPoint.TranslateTo(Microsoft.VisualStudio.Text.ITextSnapshot)">
            <summary>
            Translates this point to the <paramref name="snapshot"/>.
            </summary>
            <param name="snapshot">The target snapshot.</param>
            <returns>The corresponding <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotPoint"/> in <paramref name="snapshot"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="snapshot"/> is for an earlier snapshot.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotPoint.TranslateTo(Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Text.PointTrackingMode)">
            <summary>
            Translates this point to the <paramref name="snapshot"/> with the given tracking mode.
            </summary>
            <param name="snapshot">The target snapshot.</param>
            <param name="trackingMode">The tracking mode to use.</param>
            <returns>The corresponding <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotPoint"/> in <paramref name="snapshot"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="snapshot"/> is for an earlier snapshot.</exception>
            <remarks>
            <para>
            The tracking mode is relative to the virtual point, not the snapshot point.  If
            the point is in virtual space, it will behave as if the underlying (non-virtual)
            point is always tracking positive, as any text inserted at the point (at the
            end of the line it is on) will still be inserted "before" the virtual point.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotPoint.ToString">
            <summary>
            Converts the object to a string.
            </summary>
            <returns>The string form of this object.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotPoint.Equals(System.Object)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotPoint"/> objects are the same.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns><c>true</c> if the objects are the same, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotPoint.op_Equality(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.VirtualSnapshotPoint)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotPoint"/> objects are the same.
            </summary>
            <param name="left">The first object.</param>
            <param name="right">The second object.</param>
            <returns><c>true</c> if the two objects are the same, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotPoint.op_Inequality(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.VirtualSnapshotPoint)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotPoint"/> objects are different.
            </summary>
            <param name="left">The first object.</param>
            <param name="right">The second object.</param>
            <returns><c>true</c> if the two objects are different, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotPoint.op_GreaterThan(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.VirtualSnapshotPoint)">
            <summary>
            Determines whether the position of the left point is greater than the position of the right point.
            </summary>
            <returns><c>true</c> if left.Position is greater than right.Position, otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentException">The snapshots of the two points do not match.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotPoint.op_GreaterThanOrEqual(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.VirtualSnapshotPoint)">
            <summary>
            Determines whether the position of the left point is greater than or equal to the position of the right point.
            </summary>
            <returns><c>true</c> if left.Position is greater than or equal to right.Position, otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentException">The snapshots of the two points do not match.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotPoint.op_LessThan(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.VirtualSnapshotPoint)">
            <summary>
            Determines whether the position of the left point is less than the position of the right point.
            </summary>
            <returns><c>true</c> if left.Position is less than right.Position, otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentException">If the snapshots of the points do not match.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotPoint.op_LessThanOrEqual(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.VirtualSnapshotPoint)">
            <summary>
            Determines whether the position of the left point is less than or equal to the position of the right point.
            </summary>
            <returns><c>true</c> if left.Position is less than or equal to right.Position, otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentException">If the snapshots of the points do not match.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotPoint.CompareTo(Microsoft.VisualStudio.Text.VirtualSnapshotPoint)">
            <summary>
            Compares one <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotPoint"/> to another.
            </summary>
            <param name="other">The second <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotPoint"/>.</param>
            <returns>Compares the position and number of virtual spaces of the two points.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.VirtualSnapshotPoint.Position">
            <summary>
            Gets the position of the snapshot point.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.VirtualSnapshotPoint.VirtualSpaces">
            <summary>
            Gets the number of virtual spaces.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.VirtualSnapshotPoint.IsInVirtualSpace">
            <summary>
            Determines whether the snapshot point has virtual spaces.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.VirtualSnapshotSpan">
            <summary>
            Represents two <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotPoint"/>s
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotSpan.#ctor(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotSpan"/> at <paramref name="snapshotSpan"/>, with no virtual spaces.
            </summary>
            <param name="snapshotSpan">A snapshot span.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotSpan.#ctor(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.VirtualSnapshotPoint)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotSpan"/> from the given
            <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotPoint"/>s.
            </summary>
            <param name="start">The start point.</param>
            <param name="end">The end point, which must be from the same <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/>
            as the start point.</param>
            <exception cref="T:System.ArgumentException">The snapshot points belong to different 
            <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> objects.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The end point comes before the start
            point.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotSpan.GetText">
            <summary>
            The text contained by this virtual snapshot span.
            </summary>
            <returns>A non-null string.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotSpan.Contains(Microsoft.VisualStudio.Text.VirtualSnapshotPoint)">
            <summary>
            Determines whether or not the given virtual point is contained
            within this virtual span.
            </summary>
            <param name="virtualPoint">
            The virtual point to check.
            </param>
            <returns>
            <c>true</c> if the position is greater than or equal to Start and strictly less 
            than End, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotSpan.Contains(Microsoft.VisualStudio.Text.VirtualSnapshotSpan)">
            <summary>
            Determines whether <paramref name="virtualSpan"/> falls completely within 
            this virtual span.
            </summary>
            <param name="virtualSpan">
            The virtual span to check.
            </param>
            <returns>
            <c>true</c> if the specified span falls completely within this span,
            otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotSpan.OverlapsWith(Microsoft.VisualStudio.Text.VirtualSnapshotSpan)">
            <summary>
            Determines whether <paramref name="virtualSpan"/> overlaps this span. Two spans are considered to overlap 
            if they have positions in common and neither is empty. Empty spans do not overlap with any 
            other span.
            </summary>
            <param name="virtualSpan">
            The virtual span to check.
            </param>
            <returns>
            <c>true</c> if the spans overlap, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotSpan.Overlap(Microsoft.VisualStudio.Text.VirtualSnapshotSpan)">
            <summary>
            Returns the overlap with the given virtual span, or null if there is no overlap.
            </summary>
            <param name="virtualSpan">
            The virtual span to check.
            </param>
            <returns>
            The overlap of the spans, or null if the overlap is empty.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotSpan.IntersectsWith(Microsoft.VisualStudio.Text.VirtualSnapshotSpan)">
            <summary>
            Determines whether <paramref name="virtualSpan"/> intersects this span. Two spans are considered to 
            intersect if they have positions in common or the end of one span 
            coincides with the start of the other span.
            </summary>
            <param name="virtualSpan">
            The virtual span to check.
            </param>
            <returns>
            <c>true</c> if the spans intersect, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotSpan.Intersection(Microsoft.VisualStudio.Text.VirtualSnapshotSpan)">
            <summary>
            Returns the intersection with the given virtual span, or null if there is no intersection.
            </summary>
            <param name="virtualSpan">
            The virtual span to check.
            </param>
            <returns>
            The intersection of the spans, or null if the intersection is empty.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotSpan.GetHashCode">
            <summary>
            Gets the hash code for the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotSpan.TranslateTo(Microsoft.VisualStudio.Text.ITextSnapshot)">
            <summary>
            Translates this span to the <paramref name="snapshot"/>.
            </summary>
            <param name="snapshot">The target snapshot.</param>
            <returns>The corresponding <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotSpan"/> in <paramref name="snapshot"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="snapshot"/> is for an earlier snapshot.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotSpan.TranslateTo(Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Text.SpanTrackingMode)">
            <summary>
            Translates this span to the <paramref name="snapshot"/> with the given tracking mode.
            </summary>
            <param name="snapshot">The target snapshot.</param>
            <param name="trackingMode">The span tracking mode.</param>
            <returns>The corresponding <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotSpan"/> in <paramref name="snapshot"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="snapshot"/> is for an earlier snapshot.</exception>
            <remarks>
            <para>
            See <see cref="M:Microsoft.VisualStudio.Text.VirtualSnapshotPoint.TranslateTo(Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Text.PointTrackingMode)"/> for a description of
            how <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotPoint"/> translation behaves.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotSpan.GetStartPointMode(Microsoft.VisualStudio.Text.SpanTrackingMode)">
            <summary>
            Get the equivalent PointTrackingMode for our start point for
            the given SpanTrackingMode.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotSpan.GetEndPointMode(Microsoft.VisualStudio.Text.SpanTrackingMode)">
            <summary>
            Get the equivalent PointTrackingMode for our end point for
            the given SpanTrackingMode.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotSpan.ToString">
            <summary>
            Converts the object to a string.
            </summary>
            <returns>The string form of this object.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotSpan.Equals(System.Object)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotSpan"/> objects are the same.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns><c>true</c> if the objects are the same, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotSpan.op_Equality(Microsoft.VisualStudio.Text.VirtualSnapshotSpan,Microsoft.VisualStudio.Text.VirtualSnapshotSpan)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotSpan"/> objects are the same.
            </summary>
            <param name="left">The first object.</param>
            <param name="right">The second object.</param>
            <returns><c>true</c> if the two objects are the same, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotSpan.op_Inequality(Microsoft.VisualStudio.Text.VirtualSnapshotSpan,Microsoft.VisualStudio.Text.VirtualSnapshotSpan)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotSpan"/> objects are different.
            </summary>
            <param name="left">The first object.</param>
            <param name="right">The second object.</param>
            <returns><c>true</c> if the two objects are different, otherwise <c>false</c>.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.VirtualSnapshotSpan.Start">
            <summary>
            Gets the starting virtual point.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.VirtualSnapshotSpan.End">
            <summary>
            Gets the ending virtual point.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.VirtualSnapshotSpan.Snapshot">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> to which this snapshot span refers.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.VirtualSnapshotSpan.Length">
            <summary>
            The length of this span, taking into account virtual space.
            </summary>
            <remarks>
            If neither endpoint is in virtual space or only the start point is
            in virtual space, this will be equivalent to SnapshotSpan.Length.
            Otherwise, it will include virtual space.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.VirtualSnapshotSpan.SnapshotSpan">
            <summary>
            Gets the non-virtual SnapshotSpan that this corresponds to.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.VirtualSnapshotSpan.IsInVirtualSpace">
            <summary>
            Determines whether the start or end points are in virtual space.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.VirtualSnapshotSpan.IsEmpty">
            <summary>
            Determines whether the start and end points are in the same place.
            </summary>
            <remarks>
            Because the start and end can both be in virtual space, the non-virtual
            span that this corresponds to can be non-empty at the same time that this
            property returns <c>true</c>.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.IMergeTextUndoTransactionPolicy">
            <summary>
            Provides the merge policy for undo transactions. 
            </summary>
            <remarks>
            These policies are
            used when transactions are completed and pushed onto the undo stack. Only adjacent
            <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction"/> objects can be merged.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IMergeTextUndoTransactionPolicy.TestCompatiblePolicy(Microsoft.VisualStudio.Text.Operations.IMergeTextUndoTransactionPolicy)">
            <summary>
            Determines whether one <see cref="T:Microsoft.VisualStudio.Text.Operations.IMergeTextUndoTransactionPolicy"/> is compatible with another.
            </summary>
            <param name="other">The <see cref="T:Microsoft.VisualStudio.Text.Operations.IMergeTextUndoTransactionPolicy"/> to test.</param>
            <returns><c>true</c> if the merge should proceed, otherwise <c>false</c>.</returns>
            <remarks>
            Merging happens only when merge policies in primitives are compatible. This function should be symmetric
            and ideally constant time. For instance, (this.GetType() == other.GetType()).
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IMergeTextUndoTransactionPolicy.CanMerge(Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction,Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction"/> objects can be merged.
            </summary>
            <param name="newerTransaction">The newer transaction.</param>
            <param name="olderTransaction">The older transaction.</param>
            <returns><c>true</c> of the merge should proceed, otherwise <c>false</c>.</returns>
            <summary>
            If this method returns <c>true</c>, then the merge can proceed, given specific knowledge of the transactions in question. CanMerge
            is  called only when TestCompatiblePolicy succeeds.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IMergeTextUndoTransactionPolicy.PerformTransactionMerge(Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction,Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction)">
            <summary>
            Merges a new <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction"/> with an existing one.
            </summary>
            <param name="existingTransaction">The existing transaction.</param>
            <param name="newTransaction">The new transaction.</param>
            <remarks>
            Merges newTransaction into existingTransaction by adding, removing, or modifying the
            primitives in existingTransaction.UndoPrimitives.  A simple implementation could be to add
            each primitive in newTransaction.UndoPrimitives to existingTransaction.UndoPrimitives.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.ITextBufferUndoManager">
            <summary>
            Registers the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory"/> for a <see cref="P:Microsoft.VisualStudio.Text.Operations.ITextBufferUndoManager.TextBuffer"/>,  
            listens for change events on a <see cref="P:Microsoft.VisualStudio.Text.Operations.ITextBufferUndoManager.TextBuffer"/>, 
            and adds <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoPrimitive"/> objects to the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextBufferUndoManager.UnregisterUndoHistory">
            <summary>
            Unregisters the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory"/> for the underlying <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> from the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistoryRegistry"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextBufferUndoManager.TextBuffer">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> for which this <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextBufferUndoManager"/> manages undo operations.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextBufferUndoManager.TextBufferUndoHistory">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory"/> for the underlying <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.ITextBufferUndoManagerProvider">
            <summary>
            Provides an <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextBufferUndoManager"/> for a given <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.  This is a cached factory, and only
            one <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextBufferUndoManager"/> will ever be created for a given <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
            <remarks>This is a MEF component part, and should be exported with the following attribute:
            [Export(NameSource=typeof(ITextBufferUndoManagerProvider))]
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextBufferUndoManagerProvider.GetTextBufferUndoManager(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextBufferUndoManager"/> for the specified <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>. If no undo manager
            has been created for this text buffer, a new one is created.
            </summary>
            <param name="textBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> for which to get the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextBufferUndoManager"/>.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextBufferUndoManager"/> for <paramref name="textBuffer"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="textBuffer"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextBufferUndoManagerProvider.RemoveTextBufferUndoManager(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Removes the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextBufferUndoManager"/>, if any, from <paramref name="textBuffer"/>.
            </summary>
            <param name="textBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> to check.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="textBuffer"/> is null.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory">
            <summary>
            Contains undo transactions.
            </summary>
            <remarks>
            Typically only one undo transaction history at a time is availbble to the user.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory.CreateTransaction(System.String)">
            <summary>
            Creates a new transaction, nests it in the previously current transaction, and marks it current.
            </summary>
            <param name="description">The description of the transaction.</param>
            <returns>The new transaction.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory.Undo(System.Int32)">
            <summary>
            Performs the specified number of undo operations and places the transactions on the redo stack.        
            </summary>
            <param name="count">
            The number of undo operations to perform. 
            </param>        
            <remarks>
            At the end of the operation, the specified number of visible
            transactions are undone. Therefore, the actual number of transactions undone might be more than this number if there are 
            hidden transactions above or below the visible ones.
            After the last visible transaction is undone, the hidden transactions left on top the stack are undone as well, until a 
            visible or linked transaction is encountered, or the stack is completely emptied.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory.Redo(System.Int32)">
            <summary>
            Performs the specified number of redo operation and places the transactions on the undo stack.        
            </summary>
            <param name="count">The number of redo operations to perform. At the end of the operation, the specified number of visible
            transactions are redone. Therefore, the actual number of transactions redone might be more than this number, if there are 
            hidden transactions above or below the visible ones.
            </param>        
            <remarks>
            After the last visible transaction is redone, the hidden transactions left on top the stack are redone as well, until a 
            visible or linked transaction is encountered, or the stack is completely emptied.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory.UndoStack">
            <summary>
            The undo stack for this history. It does not include any currently open or redo transactions.        
            </summary>
            <remarks>
            This stack includes the most recent transaction (the top item of the stack) to the oldest transaction (the bottom
            item of the stack).
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory.RedoStack">
            <summary>
            The redo stack for this history. It does not include any currently open or undo transactions.
            </summary>
            <remarks>
            This stack includes the most recent transaction (the top item of the stack) to the oldest transaction (the bottom
            item of the stack).
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory.LastUndoTransaction">
            <summary>
            Gets the most recent (top) item of the <see cref="P:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory.UndoStack"/>, or <c>null</c> if the stack is
            empty.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory.LastRedoTransaction">
            <summary>
            Gets the most recent (top) item of the <see cref="P:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory.RedoStack"/>, or <c>null</c> if the stack is
            empty.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory.CanUndo">
            <summary>
            Determines whether a single undo is possible.        
            </summary>
            <remarks>
            This property corresponds to CanUndo for the most recent visible undo <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction"/>. 
            If there are hidden transactions on top of the visible transaction, 
            this property returns true only if they are 
            undoable as well.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory.CanRedo">
            <summary>
            Determines whether a single redo is possible.
            </summary>
            <remarks>
            This property corresponds to CanRedo for the most recent visible redo <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction"/>. 
            If there are hidden transactions on top of the visible transaction, this property returns <c>true</c> only if they are 
            redoable as well.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory.UndoDescription">
            <summary>
            Gets the description of the most recent visible undo <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory.RedoDescription">
            <summary>
            Gets the description of the most recent visible redo <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory.CurrentTransaction">
            <summary>
            Gets the current UndoTransaction in progress.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory.State">
            <summary>
            Gets the current state of the UndoHistory.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory.UndoRedoHappened">
            <summary>
            Notifies consumers when an undo
            or a redo has happened on this history. 
            </summary>
            <remarks>
            The sender object is the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory"/> that originated
            it, and the event arguments are empty. The UndoHistory raises this event whenever an Undo() or
            Redo() is initiated properly, regardless of whether one of the particular transactions or
            primitives fails to perform that undo.
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory.UndoTransactionCompleted">
            <summary>
            Notifies consumers when an 
            <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction"/> is completed and added to the <see cref="P:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory.UndoStack"/>. 
            </summary>
            <remarks>
            The sender object is the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory"/> that originated it, and the event argumentss are an 
            instance of <see cref="T:Microsoft.VisualStudio.Text.Operations.TextUndoTransactionCompletedEventArgs"/> class. This event is fired for the 
            topmost <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction"/> objects only. Completion of nested transactions does not generate 
            this event.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistoryRegistry">
            <summary>
            Maps context objects to <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory"/> objects and is meant to be exposed by a component part.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextUndoHistoryRegistry.RegisterHistory(System.Object)">
            <summary>
            Gets, and if necessary creates, a history associated with the context. 
            </summary>
            <param name="context">An arbitrary context object.</param>
            <returns>A (possibly new) <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory"/> associated with the context object.</returns>
            <remarks>Only a weak reference is held to the context.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextUndoHistoryRegistry.GetHistory(System.Object)">
            <summary>
            Gets a history associated with the context, but does not create a new one.
            </summary>
            <param name="context">An arbitrary context object.</param>
            <returns>An <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory"/> associated with the context object.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextUndoHistoryRegistry.TryGetHistory(System.Object,Microsoft.VisualStudio.Text.Operations.ITextUndoHistory@)">
            <summary>
            Gets a history associated with the context, but does not create a new one.
            </summary>
            <param name="context">An arbitrary context object.</param>
            <param name="history">An <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory"/> associated with the context object.</param>
            <returns><c>true</c> if a relevant <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory"/> exists in this registry, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextUndoHistoryRegistry.AttachHistory(System.Object,Microsoft.VisualStudio.Text.Operations.ITextUndoHistory)">
            <summary>
            Attaches an existing <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory"/> to a new context. The context must not already be mapped in this registry. 
            </summary>
            <param name="context">An arbitrary context object.</param>
            <param name="history">An <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory"/> object to associate with the context.</param>
            <remarks>Only a weak reference is held to the context.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextUndoHistoryRegistry.RemoveHistory(Microsoft.VisualStudio.Text.Operations.ITextUndoHistory)">
            <summary>
            Removes all mappings to a given <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory"/> in this registry, if any exist.
            </summary>
            <param name="history">The <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory"/> to remove from the registry.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.ITextUndoPrimitive">
            <summary>
            Represents an atomic operation that knows how to Do/Undo/Redo itself.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextUndoPrimitive.Do">
            <summary>
            Performs or redoes the operation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextUndoPrimitive.Undo">
            <summary>
            Performs rollback or undo on the operation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextUndoPrimitive.CanMerge(Microsoft.VisualStudio.Text.Operations.ITextUndoPrimitive)">
            <summary>
            Determines whether this undo primitive can merge with the specified undo primitive.
            </summary>
            <param name="older">The older primitive.</param>
            <returns><c>true</c> if the given primitive can merge with this one, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextUndoPrimitive.Merge(Microsoft.VisualStudio.Text.Operations.ITextUndoPrimitive)">
            <summary>
            Performs the actual merge. 
            </summary>
            <param name="older">The older primitive to merge.</param>
            <returns>The replacement primitive.</returns>
            <remarks>
            The resulting <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoPrimitive"/> will be added to the transaction, and the
            two input primitives will be removed.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextUndoPrimitive.Parent">
            <summary>
            Gets or sets the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction"/> that contains the primitive.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextUndoPrimitive.CanRedo">
            <summary>
            Determines whether it is currently possible to call Do() successfully.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextUndoPrimitive.CanUndo">
            <summary>
            Determines whether it is currently possible to call Undo() successfully.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction">
            <summary>
            Represents a container for <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoPrimitive"/> objects. UndoTransactions are tracked in an UndoHistory.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction.Complete">
            <summary>
            Marks the transaction as finished and eligible for undo.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction.Cancel">
            <summary>
            Marks an open transaction as canceled, and undoes and clears any primitives that have been added.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction.AddUndo(Microsoft.VisualStudio.Text.Operations.ITextUndoPrimitive)">
            <summary>
            Adds a new primitive to the end of the list when the transaction is open.
            </summary>
            <param name="undo"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction.Do">
            <summary>
            Performs a do or redo.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction.Undo">
            <summary>
            Performs a rollback or undo.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction.Description">
            <summary>
            Gets or sets the description
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction.State">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Operations.UndoTransactionState"/> for the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction.History">
             <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory"/> that contains this transaction.
             </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction.UndoPrimitives">
            <summary>
            Gets the collection of <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoPrimitive"/> objects in this container.
            </summary>
            <remarks>
            <para>You should try to get these primitives only after the transaction has been completed.</para>
            <para>You cannot modify the list except during merging 
            (i.e. from your <see cref="M:Microsoft.VisualStudio.Text.Operations.IMergeTextUndoTransactionPolicy.PerformTransactionMerge(Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction,Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction)"/> implementation).</para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction.Parent">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction"/> that contains this transaction. 
            </summary>
            <remarks>
            This property can be null if this is a root transaction. It is transient, since completed transactions are not nested.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction.CanRedo">
            <summary>
            Determines whether it is currently possible to call Do() successfully.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction.CanUndo">
            <summary>
            Determines whether it is currently possible to call Undo() successfully.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction.MergePolicy">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Operations.IMergeTextUndoTransactionPolicy"/> associated with this transaction.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.TextUndoHistoryState">
            <summary>
            Provides information about the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Operations.TextUndoHistoryState.Idle">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory"/> is not in the process of performing an undo or redo.
            </summary>
            <remarks>
            If you care whether the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory"/> is altering its contents, be sure to check CurrentTransaction also.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Operations.TextUndoHistoryState.Undoing">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory"/> is in the process of executing its Undo method.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Operations.TextUndoHistoryState.Redoing">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory"/> is in the process of executing its Redo method.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.TextUndoRedoEventArgs">
            <summary>
            Provides information for the UndoRedoHappened event raised by <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory"/>, about the effect of the undo or redo operation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.TextUndoRedoEventArgs.#ctor(Microsoft.VisualStudio.Text.Operations.TextUndoHistoryState,Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Operations.TextUndoRedoEventArgs"/>.
            </summary>
            <param name="state">The <see cref="T:Microsoft.VisualStudio.Text.Operations.TextUndoHistoryState"/>.</param>
            <param name="transaction">The <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction"/>.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.TextUndoRedoEventArgs.Transaction">
            <summary>
            Gets the transaction that was processed in this undo or redo.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.TextUndoRedoEventArgs.State">
            <summary>
            Gets the state of the transaction.
            </summary>
            <remarks>
            The state is either UndoTransactionState.Undoing or UndoTransactionState.Redoing.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.TextUndoTransactionCompletedEventArgs">
            <summary>
            Provides information for the <see cref="E:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory.UndoTransactionCompleted"/> event raised by the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory"/>. 
            </summary>
            <remarks>
            These event arguments contain the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction"/> that has been added 
            and the result of the completion. This event is fired only for
            the topmost <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction"/> that is placed on the <see cref="P:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory.UndoStack"/>. Completion of nested
            transactions does not raise this event.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.TextUndoTransactionCompletedEventArgs.#ctor(Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction,Microsoft.VisualStudio.Text.Operations.TextUndoTransactionCompletionResult)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Operations.TextUndoTransactionCompletedEventArgs"/>.
            </summary>        
            <param name="transaction">The <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction"/>.</param>
            <param name="result">The <see cref="T:Microsoft.VisualStudio.Text.Operations.TextUndoTransactionCompletionResult"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="transaction"/> is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.TextUndoTransactionCompletedEventArgs.Transaction">
            <summary>
            Gets the transaction that was added to the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.TextUndoTransactionCompletedEventArgs.Result">
            <summary>
            Gets the result of the completed transaction. 
            </summary>
            <remarks>
            See <see cref="T:Microsoft.VisualStudio.Text.Operations.TextUndoTransactionCompletionResult"/> for the possible outcomes.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.TextUndoTransactionCompletionResult">
            <summary>
            Describes the possible results of a transaction completion for an <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Operations.TextUndoTransactionCompletionResult.TransactionAdded">
            <summary>
            The most recent transaction is added to the <see cref="P:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory.UndoStack"/> of the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Operations.TextUndoTransactionCompletionResult.TransactionMerged">
            <summary>
            The most recent transaction is merged with the transaction on the top of the <see cref="P:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory.UndoStack"/> of 
            the associated <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.UndoTransactionState">
            <summary>
            Holds the state of the transaction. 
            </summary>
            <remarks>
            There are five rough groups of transactions.
            Open transactions are being defined. Canceled transactions have been aborted and are empty. Completed and undone
            transactions have been defined and are ready for undo and redo, respectively. Undoing and redoing are
            transient states as the transaction passes between completed and undone. Invalid is a state for transactions that
            have expired.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Operations.UndoTransactionState.Open">
            <summary>
            Represents the initial state of the transaction, after it has been created and before it is canceled or completed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Operations.UndoTransactionState.Completed">
            <summary>
            Indicates that the transaction is no longer being defined, and is eligible for undo.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Operations.UndoTransactionState.Canceled">
            <summary>
            Indicates that the transaction is no longer being defined, but has been aborted and cleared.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Operations.UndoTransactionState.Redoing">
            <summary>
            Indicates a transient state set by Do(), between the undone state and the completed state.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Operations.UndoTransactionState.Undoing">
            <summary>
            Indicates a transient state set by Undo(), between the completed state and the Undone state.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Operations.UndoTransactionState.Undone">
            <summary>
            Indicates that Undo() was called after completion.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Operations.UndoTransactionState.Invalid">
            <summary>
            Indicates that the transaction has been removed the undo history stack, for example because it was on the redo stack when
            a new operation cleared the redo stack. Once a transaction is invalid it should not be used for anything.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\VisualStudio\VS10RTM\VisualStudioIntegration\Common\Assemblies\v4.0\Microsoft.VisualStudio.Text.UI.Wpf.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.Text.UI.Wpf</name>
    </assembly>
    <members>
        <member name="T:Microsoft.VisualStudio.Text.Editor.AdornmentLayerDefinition">
            <summary>
            Provides information for an IAdornmentLayer export.  
            </summary>
            <remarks> 
            Because you cannot subclass this type, you can use the [Export] attribute with no type.
            </remarks>
            <example>
            internal sealed class Components
            {
               [Export]
               [Name("ExampleAdornmentLayer")]
               [Order(After = "Selection", Before = "Text")]
               internal AdornmentLayerDefinition viewLayerDefinition;
               
               { other components }
            }
            </example>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.AdornmentPositioningBehavior">
            <summary>
            Defines the positioning of adornments.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.AdornmentPositioningBehavior.OwnerControlled">
            <summary>
            The adornment is not moved automatically.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.AdornmentPositioningBehavior.ViewportRelative">
            <summary>
            The adornment is positioned relative to the top left corner of the view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.AdornmentPositioningBehavior.TextRelative">
            <summary>
            The adornment is positioned relative to the text in the view.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.AdornmentRemovedCallback">
            <summary>
            Defines the behavior when a <see cref="T:System.Windows.UIElement"/> is removed from an <see cref="T:Microsoft.VisualStudio.Text.Editor.IAdornmentLayer"/>.
            </summary>
            <param name="tag">The tag associated with <paramref name="element"/>.</param>
            <param name="element">The <see cref="T:System.Windows.UIElement"/> removed from the view.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IAdornmentLayer">
            <summary>
            Represents an adornment layer.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IAdornmentLayer.AddAdornment(Microsoft.VisualStudio.Text.Editor.AdornmentPositioningBehavior,System.Nullable{Microsoft.VisualStudio.Text.SnapshotSpan},System.Object,System.Windows.UIElement,Microsoft.VisualStudio.Text.Editor.AdornmentRemovedCallback)">
            <summary>
            Adds a <see cref="T:System.Windows.UIElement"/> to the layer.
            </summary>
            <param name="behavior">The positioning behavior of <paramref name="adornment"/>.</param>
            <param name="visualSpan">The span with which <paramref name="adornment"/> is associated.</param>
            <param name="tag">The tag associated with <paramref name="adornment"/>.</param>
            <param name="adornment">The <see cref="T:System.Windows.UIElement"/> to add to the view.</param>
            <param name="removedCallback">The delegate to call when <paramref name="adornment"/>
            is removed from the view.</param>
            <returns><c>true</c> if <paramref name="adornment"/> was added to the layer, otherwise <c>false</c>. 
            <paramref name="visualSpan"/> does not intersect the text that is visible in the view.</returns>
            <remarks>
            <para>If <paramref name="visualSpan"/> is specified, then the adornment will be removed whenever any line that crosses <paramref name="visualSpan"/> is formatted.</para>
            <para>If <paramref name="visualSpan"/> has a length of zero, then it will be invalidated when the line that contains the following character is invalidated
            (or the last line, if the visual span is at the end of the buffer).</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IAdornmentLayer.AddAdornment(Microsoft.VisualStudio.Text.SnapshotSpan,System.Object,System.Windows.UIElement)">
            <summary>
            Adds a AdornmentPositioningBehavior.TextRelative <see cref="T:System.Windows.UIElement"/> to the layer.
            </summary>
            <param name="visualSpan">The span with which <paramref name="adornment"/> is associated.</param>
            <param name="tag">The tag associated with <paramref name="adornment"/>.</param>
            <param name="adornment">The <see cref="T:System.Windows.UIElement"/> to add to the view.</param>
            <returns><c>true</c> if <paramref name="adornment"/> was added to the layer, otherwise <c>false</c>. 
            <paramref name="visualSpan"/> does not intersect the text that is visible in the view.</returns>
            <remarks>This is equivalent to calling AddElement(AdornmentPositioningBehavior.TextRelative,
            visualSpan, tag, adornment, null);</remarks>
            <remarks>
            <para>The adornment is removed when any line that crosses <paramref name="visualSpan"/> is formatted.</para>
            <para>If <paramref name="visualSpan"/> has a length of zero, then it will be invalidated when the line that contains the following character is invalidated
            (or the last line, if the visualSpan is at the end of the buffer).</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IAdornmentLayer.RemoveAdornment(System.Windows.UIElement)">
            <summary>
            Removes a specific <see cref="T:System.Windows.UIElement"/>.
            </summary>
            <param name="adornment"><see cref="T:System.Windows.UIElement"/> to remove.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IAdornmentLayer.RemoveAdornmentsByTag(System.Object)">
            <summary>
            Removes all <see cref="T:System.Windows.UIElement"/> objects associated with a particular tag.
            </summary>
            <param name="tag">The tag to use to remove <see cref="T:System.Windows.UIElement"/>s.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IAdornmentLayer.RemoveAdornmentsByVisualSpan(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Removes all adornments with visual spans that overlap the given visual span.
            Any adornments without specified visual spans are ignored.
            </summary>
            <param name="visualSpan">The visual span to check for overlap with adornments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IAdornmentLayer.RemoveMatchingAdornments(System.Predicate{Microsoft.VisualStudio.Text.Editor.IAdornmentLayerElement})">
            <summary>
            Removes all adornments for which the given predicate returns <c>true</c>.
            </summary>
            <param name="match">The predicate that will be called for each adornment</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IAdornmentLayer.RemoveMatchingAdornments(Microsoft.VisualStudio.Text.SnapshotSpan,System.Predicate{Microsoft.VisualStudio.Text.Editor.IAdornmentLayerElement})">
            <summary>
            Removes all adornments with visual spans for which the given predicate returns <c>true</c>.
            Any adornments without specified visual spans and tag are ignored.
            </summary>
            <param name="visualSpan">The visual span to check for overlap with adornments.</param>
            <param name="match">The predicate that will be called for each adornment</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IAdornmentLayer.RemoveAllAdornments">
            <summary>
            Removes all <see cref="T:System.Windows.UIElement"/> objects in the layer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IAdornmentLayer.TextView">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/> to which this layer is attached.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IAdornmentLayer.IsEmpty">
            <summary>
            Determines whether this layer is empty, that is, it does not contain any adornments.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IAdornmentLayer.Opacity">
            <summary>
            Gets or sets the opacity factor applied to the entire adornment layer when it is rendered in the user interface.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IAdornmentLayer.Elements">
            <summary>
            Gets a collection of the adornments and their associated data in the layer.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IAdornmentLayerElement">
            <summary>
            Defines an element in an adornment layer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IAdornmentLayerElement.VisualSpan">
            <summary>
            Gets the snapshot span that is associated with the adornment.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IAdornmentLayerElement.Behavior">
            <summary>
            Gets the positioning behavior of the adornment.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IAdornmentLayerElement.Adornment">
            <summary>
            Gets the adornment.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IAdornmentLayerElement.Tag">
            <summary>
            Gets the tag associated with the adornment.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IAdornmentLayerElement.RemovedCallback">
            <summary>
            Defines the behavior when an adornment has been removed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.PredefinedAdornmentLayers">
            <summary>
            This static class defines the names of the adornment layers
            predefined by the editor.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedAdornmentLayers.Outlining">
            <summary>
            The outlining layer contains the collapse hint adornment.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedAdornmentLayers.Squiggle">
            <summary>
            The squiggle layer contains the squiggle adornment used to indicate errors.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedAdornmentLayers.Selection">
            <summary>
            The selection layer hosts the selection and provisional highlight text caret for IME input mode.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedAdornmentLayers.Caret">
            <summary>
            The caret layer contains the text caret.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedAdornmentLayers.Text">
            <summary>
            The text layer contains the textual content of the editor.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedAdornmentLayers.TextMarker">
            <summary>
            The text marker layer contains the text markers provided by the <see cref="T:Microsoft.VisualStudio.Text.Adornments.ITextMarkerProviderFactory"/> classes.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition">
            <summary>
            Provides classification format information for a particular classification type.
            </summary>
            <remarks>
            <para>This is a MEF component part, and should be exported as:
            [Export(typeof(EditorFormatDefinition))]</para>
            <para>
            Exporters must provide the attributes ClassificationTypeAttribute and NameAttribute. The attributes OrderAttribute, 
            DisplayNameAttribute and UserVisibleAttribute may be provided optionally.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition">
            <summary>
            Provides format information for a particular item.
            </summary>
            <remarks>
            <para>
            This is a MEF component part, and should be exported as:
            [Export(typeof(EditorFormatDefinition))]
            </para>
            <para>
            Exporters must provide the attribute <see cref="T:Microsoft.VisualStudio.Utilities.NameAttribute"/>. The attributes <see cref="T:Microsoft.VisualStudio.Utilities.OrderAttribute"/>, 
            <see cref="T:Microsoft.VisualStudio.Utilities.DisplayNameAttribute"/> and <see cref="T:Microsoft.VisualStudio.Text.Classification.UserVisibleAttribute"/> may be provided optionally.
            </para>
            <para>
            Consumers of this attribute may optionally ignore the foreground formatting information, the background information,
            or both.
            </para>
            <para>
            It's recommended that exporters of this class prefix the <see cref="T:Microsoft.VisualStudio.Utilities.NameAttribute"/> with a unique string (e.g.
            their package name) to reduce the chance of conflict with another similarly named export.
            </para>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition.BackgroundBrushId">
            <summary>
            Defines the string used to look up the background brush value in the <see cref="T:System.Windows.ResourceDictionary"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition.ForegroundBrushId">
            <summary>
            Defines the string used to look up the foreground brush value in the <see cref="T:System.Windows.ResourceDictionary"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition.BackgroundColorId">
            <summary>
            Defines the string used to look up the background color value in the <see cref="T:System.Windows.ResourceDictionary"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition.ForegroundColorId">
            <summary>
            Defines the string used to look up the foreground color value in the <see cref="T:System.Windows.ResourceDictionary"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition.CreateResourceDictionary">
            <summary>
            Creates a <see cref="T:System.Windows.ResourceDictionary"/> from this definition.
            </summary>
            <returns>A <see cref="T:System.Windows.ResourceDictionary"/> with the values from this definition.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition.CreateResourceDictionaryFromDefinition">
            <summary>
            Creates a <see cref="T:System.Windows.ResourceDictionary"/> from this definition.
            </summary>
            <returns>A <see cref="T:System.Windows.ResourceDictionary"/> with the values from this definition.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition.ForegroundColor">
            <summary>
            Gets or sets the foreground color for this item.
            </summary>
            <remarks>
            If the foreground brush is set, this color will be ignored.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition.BackgroundColor">
            <summary>
            Gets or sets the background color for this item.
            </summary>
            <remarks>
            If the background brush is set, this color will be ignored.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition.BackgroundBrush">
            <summary>
            Gets or sets the background brush for this item.
            </summary>
            <remarks>
            This brush will override any background color that is set.  
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition.ForegroundBrush">
            <summary>
            Gets or sets the foreground brush for this item.
            </summary>
            <remarks>
            This brush will override any foreground color that is set.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition.ForegroundCustomizable">
            <summary>
            Determines whether the foreground of this format is customizable.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition.BackgroundCustomizable">
            <summary>
            Determines whether the background of this format is customizable.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition.DisplayName">
            <summary>
            Defines the string used when displaying this format definition to the user. This property is only used
            if the <see cref="T:Microsoft.VisualStudio.Text.Classification.UserVisibleAttribute"/> is set to true on this object's export.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.IsBoldId">
            <summary>
            Defines the string used to look up the bold value in the <see cref="T:System.Windows.ResourceDictionary"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.IsItalicId">
            <summary>
            Defines the string used to look up the italic value in the <see cref="T:System.Windows.ResourceDictionary"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.FontHintingSizeId">
            <summary>
            Defines the string used to look up the font hinting size value in the <see cref="T:System.Windows.ResourceDictionary"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.FontRenderingSizeId">
            <summary>
            Defines the string used to look up the font rendering size value in the <see cref="T:System.Windows.ResourceDictionary"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.TextEffectsId">
            <summary>
            Defines the string used look up the text effects value in the <see cref="T:System.Windows.ResourceDictionary"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.TextDecorationsId">
            <summary>
            Defines the string used to look up the text decorations value in the <see cref="T:System.Windows.ResourceDictionary"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.TypefaceId">
            <summary>
            Defines the string used o look up the typeface value in the <see cref="T:System.Windows.ResourceDictionary"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.ForegroundOpacityId">
            <summary>
            Defines the string used o look up the foreground opacity value in the <see cref="T:System.Windows.ResourceDictionary"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.BackgroundOpacityId">
            <summary>
            Defines the string used to look up the background opacity value in the <see cref="T:System.Windows.ResourceDictionary"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.DefaultBackgroundOpacity">
            <summary>
            Defines the default opacity used for the background color/brush if no <see cref="F:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.BackgroundOpacityId"/> entities are defined.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.CultureInfoId">
            <summary>
            Defines the string used to look up the <see cref="P:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.CultureInfo"/> value in the <see cref="T:System.Windows.ResourceDictionary"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.CreateResourceDictionaryFromDefinition">
            <summary>
            Creates a <see cref="T:System.Windows.ResourceDictionary"/> using this definition.
            </summary>
            <returns>A <see cref="T:System.Windows.ResourceDictionary"/> with the values from this definition.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.AddOverridableProperties(System.Windows.ResourceDictionary)">
            <summary>
            Adds properties to a resource dictionary from a <see cref="T:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition"/> that can be overridden by other properties.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.CultureInfo">
            <summary>
            Gets or sets the <see cref="P:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.CultureInfo"/> for this classification format.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.FontHintingSize">
            <summary>
            Gets or sets the the font hinting size for this classification format.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.FontRenderingSize">
            <summary>
            Gets or sets the the font rendering size for this classification format.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.TextEffects">
            <summary>
            Gets or sets the the <see cref="T:System.Windows.Media.TextEffectCollection"/> for this classification format.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.TextDecorations">
            <summary>
            Gets or sets the <see cref="T:System.Windows.TextDecorationCollection"/> for this classification format.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.FontTypeface">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Typeface"/> for this classification format.
            </summary>
            <remarks>
            Certain values (bold, italic) in this typeface can be overridden by
            other format definitions that have a higher priority.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.ForegroundOpacity">
            <summary>
            Gets or sets the opacity of the foreground.
            </summary>
            <remarks>
            This value overrides the opacity settings in the 
            ForegroundBrush property if this classification format has a higher priority.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.BackgroundOpacity">
            <summary>
            Gets or sets the opacity of the background.
            </summary>
            <remarks>
            This value will override the opacity settings in the 
            BackgroundBrush property if this classification format has a higher priority.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.IsBold">
            <summary>
            Determines whether the text should be bold.
            </summary>
            <remarks>
            This value overrides the bold settings in the 
            <see cref="P:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.FontTypeface"/> property if this classification format has a higher priority.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.IsItalic">
            <summary>
            Determines whether the text should be italic.
            </summary>
            <remarks>
            This value will override the italic settings in the 
            <see cref="P:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.FontTypeface"/> property if this classification format has a higher priority.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Classification.IEditorFormatMapService">
            <summary>
            Looks up a format map for a given view role.
            </summary>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            IEditorFormatMapService formatMap = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IEditorFormatMapService.GetEditorFormatMap(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Gets an <see cref="T:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap"/> appropriate for a given text view. This object is likely
            to be shared among several text views.
            </summary>
            <param name="view">The view.</param>
            <returns>An <see cref="T:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap"/> for the text view.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IEditorFormatMapService.GetEditorFormatMap(System.String)">
            <summary>
            Get a <see cref="T:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap"/> for a given appearance category.
            </summary>
            <param name="category">The appearance category.</param>
            <returns>An <see cref="T:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap"/> for the category.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap">
            <summary>
            Maps from arbitrary keys to a <see cref="T:System.Windows.ResourceDictionary"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap.GetProperties(System.String)">
            <summary>
            Gets a <see cref="T:System.Windows.ResourceDictionary"/> for the specified key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:System.Windows.ResourceDictionary"/> object that represents the set of property
            contributions from the provided <see cref="T:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is empty or null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap.AddProperties(System.String,System.Windows.ResourceDictionary)">
            <summary>
            Adds a <see cref="T:System.Windows.ResourceDictionary"/> for a new key.
            </summary>
            <param name="key">The key.</param>
            <param name="properties">The new properties.</param>
            <remarks>
            <para>
            Adding properties will cause the FormatMappingChanged event to be raised.
            </para>
            <para>If <paramref name="key"/> already exists in the map, then this is equivalent to <see cref="M:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap.SetProperties(System.String,System.Windows.ResourceDictionary)"/>.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null or empty.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap.SetProperties(System.String,System.Windows.ResourceDictionary)">
            <summary>
            Sets the <see cref="T:System.Windows.ResourceDictionary"/> of a key.
            </summary>
            <param name="key">The key.</param>
            <param name="properties">The new <see cref="T:System.Windows.ResourceDictionary"/> of properties.</param>
            <remarks>
            <para>
            Setting properties will cause the FormatMappingChanged event to be raised.
            </para>
            <para>
            If the <see cref="T:System.Windows.ResourceDictionary"/> set does not contain the expected properties, the consumer
            of the properties may throw an exception.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap.BeginBatchUpdate">
            <summary>
            Begins a batch update on this <see cref="T:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap"/>. Events
            will not be raised until <see cref="M:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap.EndBatchUpdate"/> is called.
            </summary>
            <exception cref="T:System.InvalidOperationException"><see cref="M:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap.BeginBatchUpdate"/> was called for a second time 
            without calling <see cref="M:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap.EndBatchUpdate"/>.</exception>
            <remarks>You must call <see cref="M:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap.EndBatchUpdate"/> in order to re-enable FormatMappingChanged events.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap.EndBatchUpdate">
            <summary>
            Ends a batch update on this <see cref="T:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap"/> and raises an event if any changes were made during
            the batch update.
            </summary>
            <exception cref="T:System.InvalidOperationException"><see cref="M:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap.EndBatchUpdate"/> was called without calling <see cref="M:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap.BeginBatchUpdate"/> first.</exception>
            <remarks>You must call <see cref="M:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap.EndBatchUpdate"/> in order to re-enable FormatMappingChanged events if <see cref="M:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap.BeginBatchUpdate"/> was called.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap.IsInBatchUpdate">
            <summary>
            Determines whether this <see cref="T:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap"/> is in the middle of a batch update.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap.FormatMappingChanged">
            <summary>
            Occurs when this <see cref="T:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap"/> changes.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap">
            <summary>
            Maps from a <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/> to an <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.GetTextProperties(Microsoft.VisualStudio.Text.Classification.IClassificationType)">
            <summary>
            Gets the effective <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> for a given text classification type including the
            properties of <paramref name="classificationType"/> and any properties that it might inherit.
            </summary>
            <param name="classificationType">
            The <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/> whose merged text properties should be returned.
            </param>
            <returns>
            The <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> object that represents the merged set of text properties
            from the specified classification type.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="classificationType"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.GetExplicitTextProperties(Microsoft.VisualStudio.Text.Classification.IClassificationType)">
            <summary>
            Gets the explicit <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> for <paramref name="classificationType"/>.
            </summary>
            <param name="classificationType">
            The <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/> whose text properties should be returned.
            </param>
            <returns>
            The <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> object that represents the properties of the <paramref name="classificationType"/>.
            These properties will include only properties defined for <paramref name="classificationType"/> excluding properties that might
            be inherited.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.GetEditorFormatMapKey(Microsoft.VisualStudio.Text.Classification.IClassificationType)">
            <summary>
            Gets the key used to store the associated properties of <paramref name="classificationType"/> in the 
            underlying <see cref="T:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap"/>.
            </summary>
            <param name="classificationType">
            The <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/> whose key is returned.</param>
            <returns>
            The key that's used to store the properties of <paramref name="classificationType"/> in the underlying <see cref="T:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap"/>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.AddExplicitTextProperties(Microsoft.VisualStudio.Text.Classification.IClassificationType,Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties)">
            <summary>
            Adds a <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> to a new <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/>.
            </summary>
            <param name="classificationType">The <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/>.</param>
            <param name="properties">The new properties.</param>
            <remarks>
            <para>Adding the text properties will cause the <see cref="E:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.ClassificationFormatMappingChanged"/> event to be sent.</para>
            <para><paramref name="classificationType"/> has the highest priority.</para>
            <para>If <paramref name="classificationType"/> already exists in the map, then this is equivalent to <see cref="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.SetTextProperties(Microsoft.VisualStudio.Text.Classification.IClassificationType,Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties)"/>(classificationType, properties).</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="classificationType"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.AddExplicitTextProperties(Microsoft.VisualStudio.Text.Classification.IClassificationType,Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties,Microsoft.VisualStudio.Text.Classification.IClassificationType)">
            <summary>
            Adds a <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> to a new <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/>.
            </summary>
            <param name="classificationType">The <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/>.</param>
            <param name="properties">The new properties.</param>
            <param name="priority">The <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/> that defines the relative prority of <paramref name="classificationType"/>.</param>
            <remarks>
            <para>Adding the text properties will cause the <see cref="E:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.ClassificationFormatMappingChanged"/> event to be sent.</para>
            <para>The priority of <paramref name="classificationType"/> will be lower than that of <paramref name="priority"/>.</para>
            <para>If <paramref name="classificationType"/> already exists in the map, then this is equivalent to <see cref="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.SetTextProperties(Microsoft.VisualStudio.Text.Classification.IClassificationType,Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties)"/>(classificationType, properties).</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="classificationType"/>, <paramref name="properties"/> or
            <paramref name="priority"/> is null.</exception>   
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="priority"/> does not exist in <see cref="P:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.CurrentPriorityOrder"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.SetTextProperties(Microsoft.VisualStudio.Text.Classification.IClassificationType,Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties)">
            <summary>
            Sets the merged <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> of an <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/>.
            </summary>
            <param name="classificationType">The <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/>.</param>
            <param name="properties">The new properties.</param>
            <remarks>
            <para>
            Setting the text properties will cause the <see cref="E:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.ClassificationFormatMappingChanged"/> event to be sent.
            </para>
            <para>
            Only parts of the <paramref name="properties"/> that are different than the inherited values of <paramref name="classificationType"/>'s
            properties are stored. If you wish to override all properties of <paramref name="classificationType"/> explicity, please use
            <see cref="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.SetExplicitTextProperties(Microsoft.VisualStudio.Text.Classification.IClassificationType,Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.SetExplicitTextProperties(Microsoft.VisualStudio.Text.Classification.IClassificationType,Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties)">
            <summary>
            Sets the explicit <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> of an <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/>.
            </summary>
            <param name="classificationType">The <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/>.</param>
            <param name="properties">The new properties.</param>
            <remarks>
            <para>
            Setting the text properties will cause the <see cref="E:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.ClassificationFormatMappingChanged"/> event to be sent.
            </para>
            <para>
            Provided values in <paramref name="properties"/> will be set for the provided <paramref name="classificationType"/> and override
            any inhertied values. If you wish to keep the inheritance structure and only override the set of varying properties, please use
            <see cref="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.SetTextProperties(Microsoft.VisualStudio.Text.Classification.IClassificationType,Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.SwapPriorities(Microsoft.VisualStudio.Text.Classification.IClassificationType,Microsoft.VisualStudio.Text.Classification.IClassificationType)">
            <summary>
            Switches the priorities of two <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/> objects.
            </summary>
            <param name="firstType">The first type.</param>
            <param name="secondType">The second type.</param>
            <remarks>
            Changing the priority of an <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/> causes the <see cref="E:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.ClassificationFormatMappingChanged"/> event to be raised.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.BeginBatchUpdate">
            <summary>
            Begins a batch update on this <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap"/>. Events
            will not be raised until <see cref="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.EndBatchUpdate"/> is called.
            </summary>
            <exception cref="T:System.InvalidOperationException"><see cref="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.BeginBatchUpdate"/> was called for a second time without calling <see cref="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.EndBatchUpdate"/>.</exception>
            <remarks>You must call <see cref="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.EndBatchUpdate"/> in order to re-enable <see cref="E:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.ClassificationFormatMappingChanged"/> events.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.EndBatchUpdate">
            <summary>
            Ends a batch update on this <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap"/> and raises an event if any changes were made during
            the batch update.
            </summary>
            <exception cref="T:System.InvalidOperationException"><see cref="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.EndBatchUpdate"/> was called without calling <see cref="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.BeginBatchUpdate"/>.</exception>
            <remarks>You must call<see cref="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.EndBatchUpdate"/> in order to re-enable <see cref="E:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.ClassificationFormatMappingChanged"/> events if <see cref="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.BeginBatchUpdate"/> was called.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.CurrentPriorityOrder">
            <summary>
            Gets a read-only list of the <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/> objects supported by this format map, sorted by priority.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.DefaultTextProperties">
            <summary>
            Gets or sets the default properties that are applied to all classification types. The default properties contain the set
            of minimal properties required to render text properly.
            </summary>
            <remarks>
            <para>
            The default text properties have the lowest priority. Properties associated with a <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/>
            will only inherit properties of the <see cref="P:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.DefaultTextProperties"/> if they don't provide the core necessary 
            properties such as <see cref="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.Typeface"/>.
            </para>
            <para>
            The <see cref="P:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.DefaultTextProperties"/> are guaranteed to contain a <see cref="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.Typeface"/>, 
            <see cref="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ForegroundBrush"/> and <see cref="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.FontRenderingEmSize"/>
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.IsInBatchUpdate">
            <summary>
            Determines whether this <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap"/> is in the middle of a batch update.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.ClassificationFormatMappingChanged">
            <summary>
            Occurs when this <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap"/> changes.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMapService">
            <summary>
            Looks up a classification format map for a given view.
            </summary>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            IClassificationFormatMapService formatMap = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMapService.GetClassificationFormatMap(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Gets an <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap"/> appropriate for the specified text view. This object is
            likely to be shared among multiple text views.
            </summary>
            <param name="textView">The view.</param>
            <returns>An <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap"/> for the view.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMapService.GetClassificationFormatMap(System.String)">
            <summary>
            Gets a <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap"/> for the specified appearance category.
            </summary>
            <param name="category">The appearance category.</param>
            <returns>An <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap"/> for the category.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Classification.FormatItemsEventArgs">
            <summary>
            Provides information for the TagsChanged event.
            Returns the span of changed tags as a mapping span.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.FormatItemsEventArgs.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{System.String})">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Classification.FormatItemsEventArgs"/>.
            </summary>
            <param name="items">A collection of the items that have changed.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="items"/> is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.FormatItemsEventArgs.ChangedItems">
            <summary>
            Gets the formatting items that have changed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Classification.MarkerFormatDefinition">
            <summary>
            Provides coloring information for text markers.
            </summary>
            <remarks>
            <para>This is a MEF component part, and should be exported as:
            [Export(typeof(EditorFormatDefinition))]</para>
            <para>
            Exporters must provide the attribute NameAttribute.
            </para>
            <para>
            The <see cref="T:Microsoft.VisualStudio.Text.Classification.MarkerFormatDefinition"/> is consumed by the default visual manager for the <see cref="T:Microsoft.VisualStudio.Text.Tagging.TextMarkerTag"/>. The <see cref="P:Microsoft.VisualStudio.Text.Tagging.TextMarkerTag.Type"/> property
            should correspond to the <see cref="T:Microsoft.VisualStudio.Utilities.NameAttribute"/> of this export so that the desired color can be correctly loaded for the text marker.
            </para>
            <para>
            If you wish your <see cref="T:Microsoft.VisualStudio.Text.Classification.MarkerFormatDefinition"/> to interact with Visual Studio, then set the <see cref="T:Microsoft.VisualStudio.Text.Classification.UserVisibleAttribute"/> on your export to true
            and make sure you set <see cref="P:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition.BackgroundColor"/> and <see cref="P:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition.ForegroundColor"/>. The foreground brush will
            be used to draw the border and the background brush will be used to draw the fill.
            </para>
            <example>
            [Export(typeof(EditorFormatDefinition))]
            [Name("MarkerFormatDefinition/RedMarker")]
            [UserVisible(true)]
            private VisualStudioRedMarker : MarkerFormatDefinition
            {
                VisualStudioRedMarker() 
                {
                    this.BackgroundColor = Colors.Red;
                    this.ForegroundColor = Colors.Blue;
                    this.DisplayName = "Red Marker"; //this value should be localized
                    this.ZOrder = 5;
                }
            }
            </example>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Classification.MarkerFormatDefinition.ZOrderId">
            <summary>
            Defines the string used to lookup the z-order value in the <see cref="T:System.Windows.ResourceDictionary"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Classification.MarkerFormatDefinition.FillId">
            <summary>
            Defines the string used to lookup the fill brush value in the <see cref="T:System.Windows.ResourceDictionary"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Classification.MarkerFormatDefinition.BorderId">
            <summary>
            Defines the string used to look up the border pen value in the <see cref="T:System.Windows.ResourceDictionary"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.MarkerFormatDefinition.CreateResourceDictionaryFromDefinition">
            <summary>
            Creates a <see cref="T:System.Windows.ResourceDictionary"/> using this definition.
            </summary>
            <returns>A <see cref="T:System.Windows.ResourceDictionary"/> with the values from this definition.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.MarkerFormatDefinition.ZOrder">
            <summary>
            The Z-Order is used as the Z-Order of the marker when it's drawn on the text marker adornment layer. This property can be used to specify
            in which order multiple markers should be drawn when they all overlap the same span of text.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.MarkerFormatDefinition.Fill">
            <summary>
            The brush is used to paint the inner body of the text marker.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.MarkerFormatDefinition.Border">
            <summary>
            The pen is used to draw the border of the text marker.
            </summary>
            <remarks>
            This property is optional and can be null, in which case no pen will be used for the border of the text marker adornment.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Classification.UserVisibleAttribute">
            <summary>
            Determining if an export should be visible to the user.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.UserVisibleAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Text.Classification.UserVisibleAttribute"/>.
            </summary>
            <param name="userVisible"><c>true</c> if the extension is visible to the user, otherwise <c>false</c>.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.UserVisibleAttribute.UserVisible">
            <summary>
            Determines whether the extension is visible to the user.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Classification.Priority">
            <summary>
            Represents the built-in priorities for a classification format.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Classification.Priority.Default">
            <summary>
            The default priority.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Classification.Priority.Low">
            <summary>
            Low priority.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Classification.Priority.High">
            <summary>
            High priority.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo">
            <summary>
            Provides information about an ongoing drag and drop operation. 
            It is passed to <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler"/> objects when the state
            of the drag and drop operation changes. 
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo.#ctor(System.Windows.Point,System.Windows.DragDropKeyStates,System.Windows.IDataObject,System.Boolean,System.Object,System.Windows.DragDropEffects,Microsoft.VisualStudio.Text.VirtualSnapshotPoint)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo"/> with the specified settings.
            </summary>
            <param name="location">The location of the cursor relative to the left top corner of the text view.</param>
            <param name="keyStates">The state of the keyboard during the operation.</param>
            <param name="data">The <see cref="T:System.Windows.IDataObject"/> of the drag and drop operation.</param>
            <param name="isInternal"><c>true</c> if the drag has been initiated from within the editor, otherwise <c>false</c>.</param>
            <param name="source">The object that initiated the drag and drop operation.</param>
            <param name="allowedEffects">The drag and drop effects allowed by the source.</param>
            <param name="bufferPosition">The buffer position of the cursor during the drag and drop operation.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo.Equals(System.Object)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo"/> objects have the same settings.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns><c>true</c> if the two objects have the same settings, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo"/> object.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo.op_Equality(Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo,Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo"/> objects have the same settings.
            </summary>
            <param name="first">The first object.</param>
            <param name="second">The second object.</param>
            <returns><c>true</c> if the two objects have the same settings, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo.op_Inequality(Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo,Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo"/> objects have different settings.
            </summary>
            <param name="first">The first object.</param>
            <param name="second">The second object.</param>
            <returns><c>true</c> if the two objects have different settings, otherwise <c>false</c>.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo.Location">
            <summary>
            Gets the location of the cursor relative to the left top corner of the text view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo.KeyStates">
            <summary>
            Gets the state of the keyboard during the operation. This field can be queried to check
            whether certain keys have been pressed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo.Data">
            <summary>
            Represents the <see cref="T:System.Windows.IDataObject"/> of the drag and drop operation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo.IsInternal">
            <summary>
            Determines whether the drag and drop operation has been initiated from within the editor.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo.Source">
            <summary>
            Gets the object that initiated the drag and drop operation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo.VirtualBufferPosition">
            <summary>
            Gets the buffer position of the cursor during the drag and drop operation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo.AllowedEffects">
            <summary>
            Gets the drag and drop effects allowed by the source. 
            </summary>
            <remarks>As part of the contract between the source and the target, 
            the target must honor the effects allowed by the source. For example,
            if the source does not permit a DragDropEffects.Move, then the target should not execute a move.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropPointerEffects">
            <summary>
            Specifies the effects of a drag/drop operation.
            </summary>
            <remarks>
            This enumeration has the <see cref="T:System.FlagsAttribute"/> hence allowing bitwise combination of its member variables.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropPointerEffects.None">
            <summary>
            None signals that the drag/drop operation is not allowed. The mouse icon will be changed to the "not allowed" icon and no tracker will be shown.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropPointerEffects.Copy">
            <summary>
            Copy signals that the drag/drop operation will result in data copy. The mouse icon will be changed to the copy icon.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropPointerEffects.Link">
            <summary>
            Link signals that a shortcut/link will be created as the result of the drag/drop operation. The mouse icon will be changed to the shortcut creation icon.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropPointerEffects.Move">
            <summary>
            Move signals that the data will be moved from the drag source to the drop target. The mouse icon will be changed to the move icon.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropPointerEffects.Scroll">
            <summary>
            Scroll indicates that the drop operation is causing scrolling in the drop target.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropPointerEffects.Track">
            <summary>
            Track indicates that a tracker hinting the drop location on the editor will be shown to the user.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropPointerEffects.All">
            <summary>
            All specifies all possible effects together.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DropFormatAttribute">
            <summary>
            Specifies the format that an <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler"/> handles.
            </summary>
            <remarks>
            You can specify multiple instances of this attribute in order to handle multiple <see cref="T:System.Windows.DataFormats"/>.
            This attribute should be used on an export of <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandlerProvider"/>.</remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DragDrop.DropFormatAttribute._dropFormat">
            <summary>
            Stores the format specified in this <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DropFormatAttribute"/>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DropFormatAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DropFormatAttribute"/> with the specified drop format.
            </summary>
            <param name="dropFormat">The drop format.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.DragDrop.DropFormatAttribute.DropFormats">
            <summary>
            Gets the drop format.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler">
            <summary>
            Handles drag and drop operations for different data formats.
            </summary>
            <remarks>
            Any object that implements this interface can act as a drop handler. 
            Drop handlers are created via <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandlerProvider"/>.
            To learn more about data formats and their association with
            <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler"/>s, please see <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandlerProvider"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler.HandleDragStarted(Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo)">
            <summary>
            Indicates the start of a drag and drop operation.
            </summary>
            <param name="dragDropInfo">
            Information about the drag and drop operation in progress.
            </param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropPointerEffects"/> object for the current operation. For example, this can be used to
            indicate a copy operation when the CTRL key is down.
            </returns>
            <remarks>
            This method is called once a drop operation is in progress and the <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler"/>
            is the handler for the data format of the drop operation.
            It will not be called for dropping data formats not supported by this <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler"/>.
            A call to <see cref="M:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler.HandleDragStarted(Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo)"/> is always followed by a call to either <see cref="M:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler.HandleDragCanceled"/> or <see cref="M:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler.HandleDataDropped(Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo)"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler.HandleDraggingOver(Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo)">
            <summary>
            Indicates that the drag and drop operation is in progress.
            </summary>
            <param name="dragDropInfo">
            Information about the drag and drop operation in progress.
            </param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropPointerEffects"/> for the current operation. For example, this can be used to
            indicate a copy operation when the CTRL key is down.
            </returns>
            <remarks>This method is called continuously while the user is dragging the mouse over the text editor during
            a drag and drop operation. It can be used to
            draw additional information next to the mouse cursor as a preview of the text after the drop operation.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler.HandleDataDropped(Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo)">
            <summary>
            Indicates that the drag and drop operation has completed, and that the final tasks, if any, should be performed now.
            </summary>
            <param name="dragDropInfo">
            Information about the drag and drop operation in progress.
            </param>
            <returns>
            The drag and drop effects of this drop operation. For example, if the drop operation has moved data,
            DragDropPointerEffects.Move should be returned.
            </returns>
            <remarks>This method is called when the user drops the data onto the editor. 
            This marks the end of a drag and drop operation. 
            The <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler"/> is expected to perform the final tasks of the operation.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler.IsDropEnabled(Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo)">
            <summary>
            Determines whether the handler can accept data for a drag and drop operation.
            </summary>
            <param name="dragDropInfo">
            Information about the drag and drop operation.
            </param>
            <returns><c>true</c> if the handler can accept data now, otherwise <c>false</c>.</returns>
            <remarks>
            <para>This method is used by the editor to check whether the drop handler can accept data 
            after it has been designated to handle a drag and drop operation. For example,
            the drop handler may be able to handle data only if the view is not read-only. 
            The implementation of this method would check the read-only status of the view.</para>
            <para>If one drop handler returns <c>false</c>, 
            another drop handler might be used to handle the drop operation, even if 
            the ordering of <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler"/> objects dictates otherwise.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler.HandleDragCanceled">
            <summary>
            Indicates that a drag and drop operation has been canceled.
            </summary>
            <remarks>This method allows the drop handler to update its state after cancellation.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandlerProvider">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler"/> for a <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/>.
            </summary>
            <remarks>
            <para>This is a MEF component part, and must be exported with the [Export(typeof(IDropHandlerProvider))] attribute. 
            It must also have one or more [DropFormat("FormatKind")] attributes. For example,
            if the provided <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler"/> handles both text and RTF formats, two <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DropFormatAttribute"/> annotations
            are necessary:
            </para>
            <para>[Export(typeof(IDropHandlerProvider))]</para>
            <para>[DropFormat("Rich Text Format")]</para>
            <para>[DropFormat("Text")]</para>
            <para><see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler"/> objects are used to handle drag and drop operations for various data formats
            and act as extension points for customizing drop operations.</para>
            <para>If you provide a <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler"/>, you must
            export a factory service in order to instantiate the <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler"/> with the required context.
            At runtime the editor looks for these exports, and calls the GetAssociatedDropHandler method to activate the 
            <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler"/> associated with the factory service. The <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler"/> will then be notified
            when a drag and drop operation of the corresponding data format has been requested. All other tasks, 
            such as capturing mouse events, scrolling the view, etc., are handled by the editor.
            </para>
            <para>
            <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DropFormatAttribute"/> objects specify
            the data formats that the associated <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler"/> can handle. These formats are specified by string
            keys and correspond to the standard data formats defined by the <see cref="T:System.Windows.IDataObject"/> interface. For
            example, to handle RTF content you must specify [DropFormat("Rich Text Format")], as defined in the 
            <see cref="T:System.Windows.IDataObject"/> interface.
            </para>
            <para>
            A single <see cref="T:System.Windows.IDataObject"/> can contain multiple data formats, so that multiple drop handlers
            might be available to handle the formats. In this case, the data is delegated to the drop handlers according to a predefined set of priorities.
            The format priorities are as follows, from the highest to the lowest priority:
            </para>
            <para>
            Any custom format
            </para>
            <para>
            FileDrop
            </para>
            <para>
            EnhancedMetafile
            </para>
            <para>
            WaveAudio
            </para>
            <para>
            Riff
            </para>
            <para>
            Dif
            </para>
            <para>
            Locale
            </para>
            <para>
            Palette
            </para>
            <para>
            PenData
            </para>
            <para>
            Serializable
            </para>
            <para>
            SymbolicLink
            </para>
            <para>
            Xaml
            </para>
            <para>
            XamlPackage
            </para>
            <para>
            Tiff
            </para>
            <para>
            Bitmap
            </para>
            <para>
            Dib
            </para>
            <para>
            MetafilePicture
            </para>
            <para>
            CommaSeparatedValue
            </para>
            <para>
            StringFormat
            </para>
            <para>
            Html
            </para>
            <para>
            Rtf
            </para>
            <para>
            UnicodeText
            </para>
            <para>
            OemText
            </para>
            <para>
            Text
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandlerProvider.GetAssociatedDropHandler(Microsoft.VisualStudio.Text.Editor.IWpfTextView)">
            <summary>
            Gets an <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler"/> for a specified <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/>. 
            </summary>
            <param name="wpfTextView">The text view for which to get the drop handler.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler"/>.</returns>
            <remarks>This method is expected to return non-null values.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase">
            <summary>
            This class provides the basic functionality necessary to process drop of data on to the editor. It's provided
            as a convenience class to easily allow extenders to provide their own custom drop handlers by extending this class.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase._wpfTextView">
            <summary>
            Keeps a reference for the text view for which drap and drop is being implemented
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase._editorOperations">
            <summary>
            Keeps a reference to the <see cref="T:Microsoft.VisualStudio.Text.Operations.IEditorOperations"/> used to handle tasks such as text insertion.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase.#ctor(Microsoft.VisualStudio.Text.Editor.IWpfTextView,Microsoft.VisualStudio.Text.Operations.IEditorOperations)">
            <summary>
            Constructs a <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase"/>.
            </summary>
            <param name="wpfTextView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/> over which this drop handler operates on.</param>
            <param name="editorOperations">The <see cref="T:Microsoft.VisualStudio.Text.Operations.IEditorOperations"/> used to insert text into the editor.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase.HandleDragStarted(Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo)">
            <summary>
            Indicates the start of a drag and drop operation.
            </summary>
            <param name="dragDropInfo">
            Information about the drag and drop operation in progress.
            </param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropPointerEffects"/> object for the current operation. For example, this can be used to
            indicate a copy operation when the CTRL key is down.
            </returns>
            <remarks>
            This method is called once a drop operation is in progress and the <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler"/>
            is the handler for the data format of the drop operation.
            It will not be called for dropping data formats not supported by this <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler"/>.
            A call to <see cref="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase.HandleDragStarted(Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo)"/> is always followed by a call to either <see cref="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase.HandleDragCanceled"/> or <see cref="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase.HandleDataDropped(Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo)"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase.HandleDraggingOver(Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo)">
            <summary>
            Indicates that the drag and drop operation is in progress.
            </summary>
            <param name="dragDropInfo">
            Information about the drag and drop operation in progress.
            </param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropPointerEffects"/> for the current operation. For example, this can be used to
            indicate a copy operation when the CTRL key is down.
            </returns>
            <remarks>This method is called continuously while the user is dragging the mouse over the text editor during
            a drag and drop operation. It can be used to
            draw additional information next to the mouse cursor as a preview of the text after the drop operation.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase.HandleDataDropped(Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo)">
            <summary>
            Indicates that the drag and drop operation has completed, and that the final tasks, if any, should be performed now.
            </summary>
            <param name="dragDropInfo">
            Information about the drag and drop operation in progress.
            </param>
            <returns>
            The drag and drop effects of this drop operation. For example, if the drop operation has moved data,
            DragDropPointerEffects.Move should be returned.
            </returns>
            <remarks>This method is called when the user drops the data onto the editor. 
            This marks the end of a drag and drop operation. 
            The <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler"/> is expected to perform the final tasks of the operation.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase.HandleDragCanceled">
            <summary>
            Indicates that a drag and drop operation has been Canceled. 
            </summary>
            <remarks>This method allows the drop handler to update its state after cancellation.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase.IsDropEnabled(Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo)">
            <summary>
            Determines whether the handler can accept data for a drag and drop operation.
            </summary>
            <param name="dragDropInfo">
            Information about the drag and drop operation.
            </param>
            <returns><c>true</c> if the handler can accept data now, otherwise <c>false</c>.</returns>
            <remarks>
            <para>This method is used by the editor to check whether the drop handler can accept data 
            after it has been designated to handle a drag and drop operation. For example,
            the drop handler may be able to handle data only if the view is not read-only. 
            The implementation of this method would check the read-only status of the view.</para>
            <para>If one drop handler returns <c>false</c>, 
            another drop handler might be used to handle the drop operation, even if 
            the ordering of <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler"/> objects dictates otherwise.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase.ExtractText(Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo)">
            <summary>
            This method extracts the text of an <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo"/> object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase.PerformPreEditActions(Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo)">
            <summary>
            This method is called before edits are made to the buffer to perform any necessary pre edit actions.
            </summary>
            <param name="dragDropInfo">The <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo"/> holding information about the currently ongoing drag/drop operation.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase.PerformPostEditActions(Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo,System.Boolean)">
            <summary>
            This method is called after the edits are made to the buffer to perform any necessary post edit actions.
            </summary>
            <param name="successfulEdit">If true, the edits performed on the buffer were successful, otherwise, the edits failed.</param>
            <param name="dragDropInfo">The <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo"/> holding information about the currently ongoing drag/drop operation.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase.SelectText(Microsoft.VisualStudio.Text.SnapshotPoint,System.Int32,Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo,System.Boolean)">
            <summary>
            This method selects the text at the end of the drop operation.
            </summary>
            <remarks>
            This method will only be called if the drop of data resulted in an <see cref="T:System.Windows.DragDropEffects"/> other than DragDropEffects.None.
            </remarks>
            <param name="insertionPoint">The position at which data was inserted.</param>
            <param name="dataLength">The length of the data inserted in the buffer.</param>
            <param name="virtualSpaceLength">The length of whitespace inserted in the buffer to fill the gap between the closest buffer position
             and the position at which data was dropped. This value will be non-zero only if data was dropped into virtual space.</param>
            <param name="dragDropInfo">The <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo"/> class containing information about the drop.</param>
            <param name="reverse">True if the existing selection prior to the drop was reversed.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase.GetDragDropEffect(Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo)">
            <summary>
            Determines what drag &amp; drop effect should be displayed to the user based on the state of the operation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase.InsertText(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,System.String)">
            <summary>
            Inserts some textual data at the given position.
            </summary>
            <param name="position">Position at which the data is to be inserted</param>
            <param name="data">Text to be inserted</param>
            
            <returns>True if data insertion was successful, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase.MoveText(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,System.Collections.Generic.IList{Microsoft.VisualStudio.Text.ITrackingSpan},System.String)">
            <summary>
            Moves the data from one location to another in the buffer by deleting the selection contents and inserting toInsert in insertionPoint.
            </summary>
            <param name="data">Text to be inserted</param>
            <param name="position">Position at which the data is to be inserted</param>
            <param name="selectionSpans">A list of <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> tracking the selection of the user before the drop operation. This span collection should be deleted from the buffer</param>
            <returns>True if data insertion and removal was successful, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase.DeleteSpans(System.Collections.Generic.IList{Microsoft.VisualStudio.Text.ITrackingSpan})">
            <summary>
            Given a list of <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/>s, deletes them from the buffer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase.TextView">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/> over which this drop handler operates on.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase.EditorOperations">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Operations.IEditorOperations"/> used to handle tasks such as text insertion.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.BackgroundBrushChangedEventArgs">
            <summary>
            Provides information for a BackgroundBrushChanged event in the <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.BackgroundBrushChangedEventArgs.#ctor(System.Windows.Media.Brush)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Editor.BackgroundBrushChangedEventArgs"/>.
            </summary>
            <param name="newBackgroundBrush">The new <see cref="T:System.Windows.Media.Brush"/> for an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="newBackgroundBrush"/> is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.BackgroundBrushChangedEventArgs.NewBackgroundBrush">
            <summary>
            Gets the new <see cref="T:System.Windows.Media.Brush"/> for an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.GridCellLengthAttribute">
            <summary>
            This class associates a grid cell size with a MEF export.
            </summary>
            <remarks>
            <para>
            The value of this attribute will be used by the consumers to decide rendering behavior for the exported
            object. The rendering behavior will match the behavior defined in WPF classes (e.g. <see cref="T:System.Windows.Controls.Grid"/>)
            that interact with <see cref="T:System.Windows.GridLength"/>.
            </para>
            <para>
            This class is used in combination with <see cref="T:Microsoft.VisualStudio.Text.Editor.GridUnitTypeAttribute"/> to create a <see cref="T:System.Windows.GridLength"/> for a cell
            in a <see cref="T:System.Windows.Controls.Grid"/>.
            </para>
            </remarks>
            <example>
            [Export(typeof(IWpfTextViewMarginProvider))]
            [Name(PredefinedMarginNames.VerticalScrollBar)]
            [MarginContainer(PredefinedMarginNames.VerticalScrollBarContainerMargin)]
            [ContentType("text")]
            [TextViewRole(PredefinedTextViewRoles.Interactive)]
            [GridUnitType(GridUnitType.Pixel)] //this size is expressed as a pixel using the GridCellLength attribute
            [GridCellLength(15)] //15 pixels wide
            internal sealed class VerticalScrollBarMarginProvider : IWpfTextViewMarginProvider { */ implementation /* }
            </example>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.GridCellLengthAttribute.#ctor(System.Double)">
            <summary>
            Constructs a <see cref="T:Microsoft.VisualStudio.Text.Editor.GridCellLengthAttribute"/>.
            </summary>
            <param name="cellLength">The length of the grid cell.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.GridCellLengthAttribute.GridCellLength">
            <summary>
            Gets the grid cell length.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.GridUnitTypeAttribute">
            <summary>
            This class associates a <see cref="P:Microsoft.VisualStudio.Text.Editor.GridUnitTypeAttribute.GridUnitType"/> value with a MEF export.
            </summary>
            <remarks>
            The value of this attribute will be used by the consumers to decide rendering behavior for the exported
            object. The rendering behavior will match the behavior defined in WPF classes (e.g. <see cref="T:System.Windows.Controls.Grid"/>)
            that interact with <see cref="P:Microsoft.VisualStudio.Text.Editor.GridUnitTypeAttribute.GridUnitType"/>.
            </remarks>
            <example>
            [Export(typeof(IWpfTextViewMarginProvider))]
            [Name(PredefinedMarginNames.VerticalScrollBar)]
            [MarginContainer(PredefinedMarginNames.VerticalScrollBarContainerMargin)]
            [ContentType("text")]
            [TextViewRole(PredefinedTextViewRoles.Interactive)]
            [GridUnitType(GridUnitType.Star)] //this size is determined as a weighted proportion of available space
            internal sealed class VerticalScrollBarMarginProvider : IWpfTextViewMarginProvider { */ implementation /* }
            </example>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.GridUnitTypeAttribute.#ctor(System.Windows.GridUnitType)">
            <summary>
            Constructs a <see cref="T:Microsoft.VisualStudio.Text.Editor.GridUnitTypeAttribute"/>.
            </summary>
            <param name="gridUnitType">The <see cref="P:Microsoft.VisualStudio.Text.Editor.GridUnitTypeAttribute.GridUnitType"/>.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.GridUnitTypeAttribute.GridUnitType">
            <summary>
            Gets the <see cref="P:Microsoft.VisualStudio.Text.Editor.GridUnitTypeAttribute.GridUnitType"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.OutliningCollapsedAdornmentControl">
            <summary>
            Represents collapsed text in the text view.
            </summary>
            <remarks>
            By default, this is a gray rectangle with gray text.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl">
            <summary>
            Allows collapsing and expanding an outlining region.
            </summary>
            <remarks>
            By default, this is a gray sqaure with a plus or minus.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl.IsExpandedProperty">
            <summary>
            A <see cref="T:System.Windows.DependencyProperty"/> that determines whether this control collapses or expands
            the outlining regions that it controls.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl.SetIsExpanded(Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl,System.Boolean)">
            <summary>
            Sets <see cref="F:Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl.IsExpandedProperty"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl.GetIsExpanded(Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl)">
            <summary>
            Gets <see cref="F:Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl.IsExpandedProperty"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl.IsHighlightedProperty">
            <summary>
            A <see cref="T:System.Windows.DependencyProperty"/> that determines whether this control should be currently displaying its mouse-hover highlight.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl.SetIsHighlighted(Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl,System.Boolean)">
            <summary>
            Sets <see cref="F:Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl.IsHighlightedProperty"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl.GetIsHighlighted(Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl)">
            <summary>
            Gets <see cref="F:Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl.IsHighlightedProperty"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl.IsExpanded">
            <summary>
            Gets or sets <see cref="F:Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl.IsExpandedProperty"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl.IsHighlighted">
            <summary>
            Gets or sets <see cref="F:Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl.IsHighlightedProperty"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl">
            <summary>
            Indicates the vertical extent of an expanded outlining region
            and allows the user to collapse it.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl.IsHighlightedProperty">
            <summary>
            A <see cref="T:System.Windows.DependencyProperty"/> that determines whether this control should be currently displaying its mouse-hover highlight.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl.SetIsHighlighted(Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl,System.Boolean)">
            <summary>
            Sets <see cref="F:Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl.IsHighlightedProperty"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl.GetIsHighlighted(Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl)">
            <summary>
            Gets <see cref="F:Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl.IsHighlightedProperty"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl.OnIsHighlightedChanged(System.Boolean)">
            <summary>
            The event handler called when <see cref="P:Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl.IsHighlighted"/> is changed.
            </summary>
            <param name="newValue">The new value of <see cref="P:Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl.IsHighlighted"/>.</param>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl.FirstLineOffsetProperty">
            <summary>
            A <see cref="T:System.Windows.DependencyProperty"/> that indicates the vertical offset that the bracket control should use to render itself.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl.SetFirstLineOffset(Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl,System.Double)">
            <summary>
            Sets <see cref="F:Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl.FirstLineOffsetProperty"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl.GetFirstLineOffset(Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl)">
            <summary>
            Gets <see cref="F:Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl.FirstLineOffsetProperty"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl.IsHighlighted">
            <summary>
            Gets or sets <see cref="F:Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl.IsHighlightedProperty"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl.FirstLineOffset">
            <summary>
            Gets or sets <see cref="F:Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl.FirstLineOffsetProperty"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.CollapseHintAdornmentControl">
            <summary>
            Highlights an outlining region in the text view when the mouse hovers over this region in the outlining margin.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.CollapseHintAdornmentControl.IsHighlightedProperty">
            <summary>
            A <see cref="T:System.Windows.DependencyProperty"/> that determines whether this control should be currently displaying its mouse-hover highlight.
            </summary>
            <remarks>
            This control should display nothing at all when this property is false.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.CollapseHintAdornmentControl.SetIsHighlighted(Microsoft.VisualStudio.Text.Editor.CollapseHintAdornmentControl,System.Boolean)">
            <summary>
            Sets <see cref="F:Microsoft.VisualStudio.Text.Editor.CollapseHintAdornmentControl.IsHighlightedProperty"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.CollapseHintAdornmentControl.GetIsHighlighted(Microsoft.VisualStudio.Text.Editor.CollapseHintAdornmentControl)">
            <summary>
            Gets <see cref="F:Microsoft.VisualStudio.Text.Editor.CollapseHintAdornmentControl.IsHighlightedProperty"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.CollapseHintAdornmentControl.IsHighlighted">
            <summary>
            Gets or sets <see cref="F:Microsoft.VisualStudio.Text.Editor.CollapseHintAdornmentControl.IsHighlightedProperty"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.OutliningMarginControl">
            <summary>
            Represents the outlining margin.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ConnectionReason">
            <summary>
            Defines the reasons for connecting or disconnecting a text buffer and a text view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.ConnectionReason.TextViewLifetime">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/> has been opened or closed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.ConnectionReason.ContentTypeChange">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> of the subject buffer has changed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.ConnectionReason.BufferGraphChange">
            <summary>
            A buffer has been added to or removed from <see cref="T:Microsoft.VisualStudio.Text.Projection.IBufferGraph"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ImeTextComposition">
            <summary>
            Represents a text composition generated by the IME processing of the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </summary>
            <remarks>
            The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> does its own handling and raises the appropriate
            TextComposition events. The TextCompositionEventArgs.TextComposition property
            of all events raised by the IME handling can be cast
            to <see cref="T:Microsoft.VisualStudio.Text.Editor.ImeTextComposition"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ImeTextComposition.#ctor(System.Windows.Input.InputManager,System.Windows.IInputElement,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.ImeTextComposition"/>.
            </summary>
            <param name="inputManager">The <see cref="T:System.Windows.Input.InputManager"/>.</param>
            <param name="source">The input element.</param>
            <param name="resultText">The text.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IntraTextAdornment">
            <summary>
            Support for theming intra-text adornments that are provided via <see cref="T:Microsoft.VisualStudio.Text.Editor.IntraTextAdornmentTag"/>s.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.IntraTextAdornment.IsSelected">
            <summary>
            Represents the IsSelected property of these adornments.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IntraTextAdornment.SetIsSelected(System.Windows.UIElement,System.Boolean)">
            <summary>
            Sets the IsSelected value on the specified <see cref="T:System.Windows.UIElement"/>.
            </summary>
            <param name="element">The element.</param>
            <param name="isSelected">The IsSelected value.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IntraTextAdornment.GetIsSelected(System.Windows.UIElement)">
            <summary>
            Gets the IsSelected value on the specified <see cref="T:System.Windows.UIElement"/>.
            </summary>
            <param name="element">The element.</param>
            <returns><c>true</c> if the element is selected, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IntraTextAdornmentTag">
            <summary>
            Represents a tag that provides adornments to be displayed as interspersed with text.
            </summary>
            <remarks>
            <para>
            The tag's span will be elided from the view and that text will be replaced by the adornment provided by this tag.
            </para>
            <para>
            The aggregator for these tags is created on a per-view basis and handles the
            production of <see cref="T:Microsoft.VisualStudio.Text.Tagging.SpaceNegotiatingAdornmentTag"/> objects, text hiding, and
            the positioning of adornments on the adornment layer.
            </para>
            <para>
            This will only work for views that have the
            <see cref="F:Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles.Structured"/> view role.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IntraTextAdornmentTag.#ctor(System.Windows.UIElement,Microsoft.VisualStudio.Text.Editor.AdornmentRemovedCallback,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{Microsoft.VisualStudio.Text.PositionAffinity})">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Editor.IntraTextAdornmentTag"/>.
            </summary>
            <param name="adornment">The adornment to be displayed at tag's position. Must not be null.</param>
            <param name="removalCallback">Called when adornment is removed from the view. May be null.</param>
            <param name="topSpace">The amount of space needed between the top of the text in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> and the top of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/>.</param>
            <param name="baseline">The baseline of the space-negotiating adornment.</param>
            <param name="textHeight">The height of the text portion of the space-negotiating adornment.</param>
            <param name="bottomSpace">The amount of space needed between the bottom of the text in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> and the botton of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/>.</param>
            <param name="affinity">The affinity of the adornment. Should be null iff the adornment has a zero-length span at the view's text buffer.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IntraTextAdornmentTag.#ctor(System.Windows.UIElement,Microsoft.VisualStudio.Text.Editor.AdornmentRemovedCallback,System.Nullable{Microsoft.VisualStudio.Text.PositionAffinity})">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Editor.IntraTextAdornmentTag"/>.
            </summary>
            <param name="adornment">The adornment to be displayed at tag's position. Must not be null.</param>
            <param name="removalCallback">Called when adornment is removed from the view. May be null.</param>
            <param name="affinity">The affinity of the adornment. Should be null iff the adornment has a zero-length span at the view's text buffer.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IntraTextAdornmentTag.#ctor(System.Windows.UIElement,Microsoft.VisualStudio.Text.Editor.AdornmentRemovedCallback)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Editor.IntraTextAdornmentTag"/>.
            </summary>
            <param name="adornment">The adornment to be displayed at tag's position. Must not be null.</param>
            <param name="removalCallback">Called when adornment is removed from the view. May be null.</param>
            <remarks>This constructor should only be used for adornments that replace text in the view's text buffer.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IntraTextAdornmentTag.Adornment">
            <summary>
            Gets the adornment to be displayed at the position of the tag. It must not be null.
            </summary>
            <remarks>
            This adornment will be added to the view. Note that WPF elements can only be parented in a single
            place in the visual tree. Therefore these adornment instances should not be added to any other WPF UI.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IntraTextAdornmentTag.RemovalCallback">
            <summary>
            Called when adornment is removed from the view. It may be null.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IntraTextAdornmentTag.TopSpace">
            <summary>
            Gets the amount of space needed between the top of the text in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> and the top of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IntraTextAdornmentTag.Baseline">
            <summary>
            Gets the baseline of the space-negotiating adornment.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IntraTextAdornmentTag.TextHeight">
            <summary>
            Gets the height of the text portion of the space-negotiating adornment.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IntraTextAdornmentTag.BottomSpace">
            <summary>
            Gets the amount of space needed between the bottom of the text in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> and the botton of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IntraTextAdornmentTag.Affinity">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.PositionAffinity"/> of the space-negotiating adornment.
            </summary>
            <remarks>
            Should be non-null for tags with zero length spans (at the edit buffer level of the view's buffer graph) and only for those tags.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ISpaceReservationAgent">
            <summary>
            Handles the display of space reservation adornments.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ISpaceReservationAgent.PositionAndDisplay(System.Windows.Media.Geometry)">
            <summary>
            Positions and displays the contents of the the <see cref="T:Microsoft.VisualStudio.Text.Editor.ISpaceReservationAgent"/>.
            </summary>
            <param name="reservedSpace">Currently reserved space.</param>
            <returns>The space. If null is returned, the <see cref="T:Microsoft.VisualStudio.Text.Editor.ISpaceReservationManager"/> will remove the agent.</returns>
            <remarks>If an agent does not want to be removed, but also does not wish to request any additional space, it can return a non-null but empty Geometry.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ISpaceReservationAgent.Hide">
            <summary>
            Called whenever the content of the space reservation agent should be hidden.
            </summary>
            <remarks>This method is called by the manager to hide the content of the space reservation agent.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ISpaceReservationAgent.IsMouseOver">
            <summary>
            Determines whether the mouse is over this agent or anything it contains.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ISpaceReservationAgent.HasFocus">
            <summary>
            Determines whether the adornment created by the space reservation agent has keyboard focus.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.ISpaceReservationAgent.LostFocus">
            <summary>
            Occurs when the adornment created by the ISpaceReservationAgent loses focus.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.ISpaceReservationAgent.GotFocus">
            <summary>
            Occurs when the adornment created by the ISpaceReservationAgent gets focus.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ISpaceReservationManager">
            <summary>
            Manages space reservation adornments.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ISpaceReservationManager.CreatePopupAgent(Microsoft.VisualStudio.Text.ITrackingSpan,Microsoft.VisualStudio.Text.Adornments.PopupStyles,System.Windows.UIElement)">
            <summary>
            Creates a default implementation of an <see cref="T:Microsoft.VisualStudio.Text.Editor.ISpaceReservationAgent"/> that displays <paramref name="content"/> in a popup window.
            </summary>
            <param name="visualSpan">The span of text associated with the tip.</param>
            <param name="style">The style options for displaying the tip.</param>
            <param name="content">The UI element to be displayed in the tip.</param>
            <returns>An <see cref="T:Microsoft.VisualStudio.Text.Editor.ISpaceReservationAgent"/> that will display the desired content in a popup window.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ISpaceReservationManager.UpdatePopupAgent(Microsoft.VisualStudio.Text.Editor.ISpaceReservationAgent,Microsoft.VisualStudio.Text.ITrackingSpan,Microsoft.VisualStudio.Text.Adornments.PopupStyles)">
            <summary>
            Updates <paramref name="agent"/> with the <paramref name="visualSpan"/>.
            This only works for PopupAgents and returns for other agents.
            </summary>
            <param name="agent">The agent to add.</param>
            <param name="visualSpan">The agent's new visual span.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ISpaceReservationManager.AddAgent(Microsoft.VisualStudio.Text.Editor.ISpaceReservationAgent)">
            <summary>
            Adds <paramref name="agent"/> to the list of agents managed by this manager.
            </summary>
            <param name="agent">The agent to add.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ISpaceReservationManager.RemoveAgent(Microsoft.VisualStudio.Text.Editor.ISpaceReservationAgent)">
            <summary>
            Removes <paramref name="agent"/> from the list of agents managed by this manager.
            </summary>
            <param name="agent">The agent to remove.</param>
            <returns><c>true</c> if the agent was in the list of agents to remove.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ISpaceReservationManager.Agents">
            <summary>
            Gets the list of agents managed by this manager.
            </summary>
            <remarks>Any implementation of aa <see cref="T:Microsoft.VisualStudio.Text.Editor.ISpaceReservationAgent"/> can be used for this method.</remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.ISpaceReservationManager.AgentChanged">
            <summary>
            Occurs when the agent is changed.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ISpaceReservationManager.IsMouseOver">
            <summary>
            Determines whether the mouse is over an agent managed by this manager.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ISpaceReservationManager.HasAggregateFocus">
            <summary>
            Determines whether the adornment created by the space reservation agent has keyboard focus.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.ISpaceReservationManager.LostAggregateFocus">
            <summary>
            Occurs when keyboard focus is lost by any of the managed adornments.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.ISpaceReservationManager.GotAggregateFocus">
            <summary>
            Occurs when any of the managed adornments gets keyboard focus.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ITextEditorFactoryService">
            <summary>
            Creates editor views.
            </summary>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            ITextEditorFactoryService factory = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextEditorFactoryService.CreateTextView(Microsoft.VisualStudio.Text.Editor.ITextViewModel,Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet,Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/> that displays the contents of <paramref name="viewModel"/>.
            </summary>
            <param name="viewModel">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewModel"/> that provides the text buffers for the view.</param>
            <param name="roles">The set of roles filled by the view.</param>
            <param name="parentOptions">The options environment for the text view.</param>
            <returns>An <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="viewModel"/> or <paramref name="roles"/> or <paramref name="parentOptions"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextEditorFactoryService.CreateTextView(Microsoft.VisualStudio.Text.ITextDataModel,Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet,Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/> that displays the contents of <paramref name="dataModel"/>.
            </summary>
            <param name="dataModel">The <see cref="T:Microsoft.VisualStudio.Text.ITextDataModel"/> that provides the text buffers over which an <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewModel"/>
            will be built for the view.</param>
            <param name="roles">The set of roles filled by the view.</param>
            <param name="parentOptions">The options environment for the text view.</param>
            <returns>An <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/>.</returns>
            <remarks>
            An <see cref="T:Microsoft.VisualStudio.Text.ITextDataModel"/> can be displayed in multiple views. An <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewModel"/> will be constructed based on 
            the <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> of the <paramref name="dataModel"/> and the <paramref name="roles"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="dataModel"/> or <paramref name="roles"/> or <paramref name="parentOptions"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextEditorFactoryService.CreateTextView(Microsoft.VisualStudio.Text.ITextBuffer,Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet,Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/> that displays the contents of <paramref name="textBuffer"/>.
            </summary>
            <param name="textBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> that provides the text for the view.</param>
            <param name="roles">The set of roles filled by the view.</param>
            <param name="parentOptions">The options environment for the text view.</param>
            <returns>An <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/>.</returns>
            <remarks>
            An <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> can be displayed in multiple views. A trivial <see cref="T:Microsoft.VisualStudio.Text.ITextDataModel"/> will be constructed and
            an <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewModel"/> will be constructed based on 
            the <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> of the <paramref name="textBuffer"/> and the <paramref name="roles"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="textBuffer"/> or <paramref name="roles"/> or <paramref name="parentOptions"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextEditorFactoryService.CreateTextView(Microsoft.VisualStudio.Text.ITextBuffer,Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/> that displays the contents of <paramref name="textBuffer"/>.
            </summary>
            <param name="textBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> that provides the text for the view.</param>
            <param name="roles">The set of roles filled by the view.</param>
            <returns>An <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/>.</returns>
            <remarks>
            An <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> can be displayed in multiple views. A trivial <see cref="T:Microsoft.VisualStudio.Text.ITextDataModel"/> will be constructed and
            an <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewModel"/> will be constructed based on 
            the <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> of the <paramref name="textBuffer"/> and the <paramref name="roles"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="textBuffer"/> or <paramref name="roles"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextEditorFactoryService.CreateTextView(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/> that displays the contents of <paramref name="textBuffer"/>.
            </summary>
            <param name="textBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> that provides the text for the view.</param>
            <returns>An <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/> having the default set of text view roles.</returns>
            <remarks>
            An <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> can be displayed in multiple views. A trivial <see cref="T:Microsoft.VisualStudio.Text.ITextDataModel"/> will be constructed and
            an <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewModel"/> will be constructed based on 
            the <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> of the <paramref name="textBuffer"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="textBuffer"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextEditorFactoryService.CreateTextView">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/> on a newly created <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> having
            content type <code>Text</code>.
            </summary>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextEditorFactoryService.CreateTextViewHost(Microsoft.VisualStudio.Text.Editor.IWpfTextView,System.Boolean)">
            <summary>
            Creates a host for the text view.
            </summary>
            <param name="wpfTextView">The text view to host.</param>
            <param name="setFocus"><c>true</c> if the <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost"/> should take focus after it is initialized, <c>false</c> otherwise.</param>
            <returns>An <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="wpfTextView"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextEditorFactoryService.CreateTextViewRoleSet(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet"/> containing the given roles.
            </summary>
            <param name="roles">The roles of interest.</param>
            <returns>The text view role set.</returns>
            <exception cref="T:System.ArgumentNullException"> roles is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextEditorFactoryService.CreateTextViewRoleSet(System.String[])">
            <summary>
            Creates a <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet"/> containing the given roles.
            </summary>
            <param name="roles">The roles of interest.</param>
            <returns>The text view role set.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextEditorFactoryService.NoRoles">
            <summary>
            The empty ITextViewRoleSet.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextEditorFactoryService.AllPredefinedRoles">
            <summary>
            The set of all predefined text view roles.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextEditorFactoryService.DefaultRoles">
            <summary>
            The set of roles that are used when creating a text view without specifying text view roles.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.ITextEditorFactoryService.TextViewCreated">
            <summary>
            Raised when any <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> is created.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewMarginProvider">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewMargin"/> for a given <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost"/>.  
            </summary>
            <remarks>This is a MEF component part, and should be exported with the following attribute:
            [Export(typeof(IWpfTextViewMarginProvider))]
            Exporters must supply an TextViewMarginPlacementAttribute, ContentTypeAttribute,
            OrderAttribute, and NameAttribute.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IWpfTextViewMarginProvider.CreateMargin(Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost,Microsoft.VisualStudio.Text.Editor.IWpfTextViewMargin)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewMargin"/> for the given <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost"/>.
            </summary>d\
            <param name="wpfTextViewHost">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost"/> for which to create the <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewMargin"/>.</param>
            <param name="marginContainer">The margin that will contain the newly-created margin.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewMargin"/>.  
            The value may be null if this <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewMarginProvider"/> does not participate for this context.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView">
            <summary>
            Represents a Visual Studio <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> for the WPF platform.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IWpfTextView.GetAdornmentLayer(System.String)">
            <summary>
            Gets a named <see cref="T:Microsoft.VisualStudio.Text.Editor.IAdornmentLayer"/>.
            </summary>
            <param name="name">The name of the layer.</param>
            <returns>An instance of the layer in this view.</returns>
            <remarks>
            Layer names must be defined as <see cref="T:Microsoft.VisualStudio.Text.Editor.AdornmentLayerDefinition"/> component parts.
            The following layer names: "Text", "Caret", "Selection", and "ProvisionalHighlight" are reserved and cannot
            be requested using this method.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IWpfTextView.GetSpaceReservationManager(System.String)">
            <summary>
            Gets a named <see cref="T:Microsoft.VisualStudio.Text.Editor.ISpaceReservationManager"/>.
            </summary>
            <param name="name">The name of the manager.</param>
            <returns>An instance of the manager in this view. Not null.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="name"/> is not registered via an <see cref="T:Microsoft.VisualStudio.Text.Editor.SpaceReservationManagerDefinition"/>.</exception>
            <remarks>
            <para>Managers must be exported using <see cref="T:Microsoft.VisualStudio.Text.Editor.SpaceReservationManagerDefinition"/> component parts.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IWpfTextView.GetTextViewLineContainingBufferPosition(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine"/> that contains the specified text buffer position.
            </summary>
            <param name="bufferPosition">
            The text buffer position used to search for a text line.
            </param>
            <returns>
            The <see cref="T:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine"/> that contains the specified buffer position.
            </returns>
            <remarks>
            <para>This method returns an <see cref="T:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine"/> if it exists in the view.</para>
            <para>If the line does not exist in the cache of formatted lines, it will be formatted and added to the cache.</para>
            <para>The returned <see cref="T:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine"/> could be invalidated by either a layout by the view or by subsequent calls to this method.</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferPosition"/> is not a valid buffer position.</exception>
            <exception cref="T:System.InvalidOperationException"> if the view has not completed initialization.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IWpfTextView.VisualElement">
            <summary>
            Gets the FrameworkElement that renders the view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IWpfTextView.Background">
            <summary>
            Gets or sets the background for the visual element.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IWpfTextView.TextViewLines">
            <summary>
            Gets the text view lines as an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewLineCollection"/>.
            </summary>
            <remarks>
            <para>This property will be null during the view's initialization.</para>
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.IWpfTextView.BackgroundBrushChanged">
            <summary>
            Occurs when the <see cref="P:Microsoft.VisualStudio.Text.Editor.IWpfTextView.Background"/> is set.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IWpfTextView.FormattedLineSource">
            <summary>
            Gets the text formatter used by the view.
            </summary>
            <remarks>
            <para>This property will be null during the view's initialization.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IWpfTextView.LineTransformSource">
            <summary>
            Gets the line transformer used by the view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IWpfTextView.ZoomLevel">
            <summary>
            Gets or sets the Zoom level for the <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/> between 20% to 400%
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.IWpfTextView.ZoomLevelChanged">
            <summary>
            Occurs when the <see cref="P:Microsoft.VisualStudio.Text.Editor.IWpfTextView.ZoomLevel"/> is set.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewConnectionListener">
            <summary>
            Listens to text buffers of a particular content type to find out when they are opened or closed
            in the text editor.
            </summary>
            <remarks>This is a MEF component part, and should be exported with the following attribute:
            [Export(typeof(IWpfTextViewConnectionListener))]
            [ContentType("...")]
            [TextViewRole("...")]
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IWpfTextViewConnectionListener.SubjectBuffersConnected(Microsoft.VisualStudio.Text.Editor.IWpfTextView,Microsoft.VisualStudio.Text.Editor.ConnectionReason,System.Collections.ObjectModel.Collection{Microsoft.VisualStudio.Text.ITextBuffer})">
            <summary>
            Called when one or more <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> objects of the appropriate <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> are connected to a <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </summary>
            <remarks>
            A connection can occur at one of three times: (1) when the view is first created; (2) when the buffer becomes a member of the 
            <see cref="T:Microsoft.VisualStudio.Text.Projection.IBufferGraph"/> for the view; or (3) when the 
            <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> of the buffer changes.
            </remarks>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/> to which the subject buffers are being connected.</param>
            <param name="reason">The cause of the connection.</param>
            <param name="subjectBuffers">The non-empty list of <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> objects with matching
            content types.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IWpfTextViewConnectionListener.SubjectBuffersDisconnected(Microsoft.VisualStudio.Text.Editor.IWpfTextView,Microsoft.VisualStudio.Text.Editor.ConnectionReason,System.Collections.ObjectModel.Collection{Microsoft.VisualStudio.Text.ITextBuffer})">
            <summary>
            Called when one or more <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> objects no longer satisfy the conditions for being included in the subject buffers.
            </summary>
            <remarks>
            Text buffers can be disconnected when they are removed as source buffers of some projection buffer, 
            or when their content type changes, or when the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> is closed.
            </remarks>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> from which the subject buffers are being disconnected.</param>
            <param name="reason">The cause of the disconnection.</param>
            <param name="subjectBuffers">The non-empty list of <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> objects.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewCreationListener">
            <summary>
            Listens for when <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/>s are created.
            </summary>
            <remarks>This is a MEF component part, and should be exported with the following attribute:
            [Export(typeof(IWpfTextViewCreationListener))]
            [ContentType("...")]
            [TextViewRole("...")]
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IWpfTextViewCreationListener.TextViewCreated(Microsoft.VisualStudio.Text.Editor.IWpfTextView)">
            <summary>
            Called when a text view having matchine roles is created over a text data model having a matching content type.
            </summary>
            <param name="textView">The newly created text view.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost">
            <summary>
            Contains an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/> and the margins that surround it,
            such as a scrollbar or line number gutter.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost.Close">
            <summary>
            Closes the text view host and its underlying text view.
            </summary>
            <exception cref="T:System.InvalidOperationException">The text view host is already closed.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost.GetTextViewMargin(System.String)">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewMargin"/> with the given <paramref name="marginName"/> that is attached to an edge of this <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/>.
            </summary>
            <param name="marginName">The name of the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewMargin"/>.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewMargin"/> with a name that matches <paramref name="marginName"/>.</returns>
            <remarks>Callers of this method should only utilize the method after the <see cref="E:System.Windows.FrameworkElement.Loaded"/> event is raised.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="marginName"/> is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost.IsClosed">
            <summary>
            Determines whether this text view has been closed.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost.Closed">
            <summary>
            Occurs immediately after closing the text view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost.TextView">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/> that is contained within this <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost.HostControl">
            <summary>
            Gets the WPF control for this <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost"/>.
            </summary>
            <remarks> Use this property to display the <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost"/> WPF control.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewLineCollection">
            <summary>
            <para>Allows the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> to access the view's collection of <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> objects. The
            TextViewLines property on the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> is used to get an instance of the
            ITextViewLineCollection interface.</para>
            </summary>
            <remarks>
            <para>The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> disposes its ITextViewLineCollection 
            and all the ITextViewLines it contains every time it generates a new layout.</para>
            <para>Most properties and parameters that are doubles correspond to coordinates or distances in the text
            rendering coordinate system. In this coordinate system, x = 0.0 corresponds to the left edge of the drawing
            surface onto which text is rendered (x = view.ViewportLeft corresponds to the left edge of the viewport), and y = view.ViewportTop corresponds to the top edge of the viewport. The x-coordinate increases
            from left to right, and the y-coordinate increases from top to bottom. </para>
            <para>The horizontal and vertical axes of the view behave differently. When the text in the view is
            formatted, only the visible lines are formatted. As a result,
            a viewport cannot be scrolled horizontally and vertically in the same way.</para>
            <para>A viewport is scrolled horizontally by changing the left coordinate of the
            viewport so that it moves with respect to the drawing surface.</para>
            <para>A view can be scrolled vertically only by performing a new layout.</para>
            <para>Doing a layout in the view may cause the ViewportTop property of the view to change. For example, scrolling down one line will not translate any of the visible lines.
            Instead it will simply change the view's ViewportTop property (causing the lines to move on the screen even though their y-coordinates have not changed).</para>
            <para>Distances in the text rendering coordinate system correspond to logical pixels. If the text rendering
            surface is displayed without any scaling transform, then 1 unit in the text rendering coordinate system
            corresponds to one pixel on the display.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IWpfTextViewLineCollection.GetTextMarkerGeometry(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Gets the text marker geometry for the specified range of text in the buffer by using a polygonal approximation algorithm to calculate
            the outline path of the text regions.
            </summary>
            <param name="bufferSpan">
            The span of text.
            </param>
            <returns>
            A <see cref="T:System.Windows.Media.Geometry"/> that contains the bounds of all of the formatted text in the span. It is null if the
            span is empty or does not intersect the text formatted in the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </returns>
            <remarks>
            <para>The returned geometry may contain several disjoint regions if the span
            contains a mix of conventional and bi-directional text.</para>
            <para>This method uses the height of the rendered text glyphs (<see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.TextHeight"/>) to calculate the height of the geometry on each line.</para>
            <para>This method adds a 1-pixel padding to bottom of the geometries.</para>
            <para>The returned geometry is not clipped to the boundaries of the viewport.</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSpan"/> is not a valid 
            <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> on the buffer.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IWpfTextViewLineCollection.GetTextMarkerGeometry(Microsoft.VisualStudio.Text.SnapshotSpan,System.Boolean,System.Windows.Thickness)">
            <summary>
            Gets the text marker geometry for the specified range of text in the buffer by using a polygonal approximation algorithm to calculate
            the outline path of the text regions.
            </summary>
            <param name="bufferSpan">
            The span of text.
            </param>
            <param name="clipToViewport">
            If true, the created geometry will be clipped to the viewport.
            </param>
            <param name="padding">
            A padding that's applied to the elements on a per line basis.
            </param>
            <returns>
            A <see cref="T:System.Windows.Media.Geometry"/> that contains the bounds of all of the formatted text in the span. It is null if the
            span is empty or does not intersect the text formatted in the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </returns>
            <remarks>
            <para>The returned geometry may contain several disjoint regions if the span
            contains a mix of conventional and bi-directional text.</para>
            <para>This method uses the height of the rendered text glyphs (<see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.TextHeight"/>) to calculate the height of the geometry on each line.</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSpan"/> is not a valid 
            <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> on the buffer.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IWpfTextViewLineCollection.GetLineMarkerGeometry(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Gets the text marker geometry for the specified range of text in the buffer by using a polygonal approximation algorithm to calculate
            the outline path of the text regions.
            </summary>
            <param name="bufferSpan">
            The span of text.
            </param>
            <returns>
            A <see cref="T:System.Windows.Media.Geometry"/> that contains the bounds of all of the formatted text in the span. It is null if the
            span is empty or does not intersect the text formatted in the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </returns>
            <remarks>
            <para>The returned geometry may contain several disjoint regions if the span
            contains a mix of conventional and bi-directional text.</para>
            <para>This method uses the height of the rendered line (<see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Height"/>) to calculate the height of the geometry on each line.</para>
            <para>The returned geometry is not clipped to the boundaries of the viewport.</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSpan"/> is not a valid 
            <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> on the buffer.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IWpfTextViewLineCollection.GetLineMarkerGeometry(Microsoft.VisualStudio.Text.SnapshotSpan,System.Boolean,System.Windows.Thickness)">
            <summary>
            Gets the text marker geometry for the specified range of text in the buffer by using a polygonal approximation algorithm to calculate
            the outline path of the text regions.
            </summary>
            <param name="bufferSpan">
            The span of text.
            </param>
            <param name="padding">
            A padding that's applied to the elements on a per line basis.
            </param>
            <param name="clipToViewport">
            If true, the created geometry will be clipped to the viewport.
            </param>
            <returns>
            A <see cref="T:System.Windows.Media.Geometry"/> that contains the bounds of all of the formatted text in the span. It is null if the
            span is empty or does not intersect the text formatted in the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </returns>
            <remarks>
            <para>The returned geometry may contain several disjoint regions if the span
            contains a mix of conventional and bi-directional text.</para>
            <para>This method uses the height of the rendered line (<see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Height"/>) to calculate the height of the geometry on each line.</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSpan"/> is not a valid 
            <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> on the buffer.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IWpfTextViewLineCollection.GetMarkerGeometry(Microsoft.VisualStudio.Text.SnapshotSpan,System.Boolean,System.Windows.Thickness)">
            <summary>
            Creates a marker geometry for the provided <paramref name="bufferSpan"/>. If the provided <paramref name="bufferSpan"/>
            extends beyond one line, then <see cref="M:Microsoft.VisualStudio.Text.Editor.IWpfTextViewLineCollection.GetLineMarkerGeometry(Microsoft.VisualStudio.Text.SnapshotSpan,System.Boolean,System.Windows.Thickness)"/> is used to calculate the marker geometry, otherwise
            this method uses <see cref="M:Microsoft.VisualStudio.Text.Editor.IWpfTextViewLineCollection.GetTextMarkerGeometry(Microsoft.VisualStudio.Text.SnapshotSpan,System.Boolean,System.Windows.Thickness)"/> to construct the geometry.
            </summary>
            <param name="bufferSpan">
            The span of text.
            </param>
            <param name="padding">
            A padding that's applied to the elements on a per line basis.
            </param>
            <param name="clipToViewport">
            If true, the created geometry will be clipped to the viewport.
            </param>
            <returns>
            A <see cref="T:System.Windows.Media.Geometry"/> that contains the bounds of all of the formatted text in <paramref name="bufferSpan"/>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IWpfTextViewLineCollection.GetMarkerGeometry(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Creates a marker geometry for the provided <paramref name="bufferSpan"/>. If the provided <paramref name="bufferSpan"/>
            extends beyond one line, then <see cref="M:Microsoft.VisualStudio.Text.Editor.IWpfTextViewLineCollection.GetLineMarkerGeometry(Microsoft.VisualStudio.Text.SnapshotSpan)"/> is used to calculate the marker geometry, otherwise
            this method uses <see cref="M:Microsoft.VisualStudio.Text.Editor.IWpfTextViewLineCollection.GetTextMarkerGeometry(Microsoft.VisualStudio.Text.SnapshotSpan)"/> to construct the geometry.
            </summary>
            <returns>
            A <see cref="T:System.Windows.Media.Geometry"/> that contains the bounds of all of the formatted text in <paramref name="bufferSpan"/>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IWpfTextViewLineCollection.GetTextViewLineContainingBufferPosition(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine"/> that contains the specified text buffer position.
            </summary>
            <param name="bufferPosition">
            The text buffer position used to search for a text line.
            </param>
            <returns>
            An <see cref="T:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine"/> that contains the position, or null if none exist.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferPosition"/> is not a valid buffer position.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IWpfTextViewLineCollection.WpfTextViewLines">
            <summary>
            Gets a collection of <see cref="T:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine"/> objects.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IWpfTextViewLineCollection.Item(System.Int32)">
            <summary>
            Get the <see cref="T:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine"/> at <paramref name="index"/>.
            </summary>
            <param name="index">The zero based index of the item</param>
            <returns>
            Returns the <see cref="T:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine"/> at the <paramref name="index"/>th position.
            </returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IWpfTextViewLineCollection.FirstVisibleLine">
            <summary>
            Gets the first line that is not completely hidden.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IWpfTextViewLineCollection.LastVisibleLine">
            <summary>
            Gets the last line that is not completely hidden.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewMargin">
            <summary>
            Represents margins that are attached to an edge of an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IWpfTextViewMargin.VisualElement">
            <summary>
            Gets the <see cref="T:System.Windows.FrameworkElement"/> that renders the margin.
            </summary>
            <exception cref="T:System.ObjectDisposedException"> if the margin is disposed.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.SpaceReservationAgentChangedEventArgs">
            <summary>
            Provides information when an <see cref="T:Microsoft.VisualStudio.Text.Editor.ISpaceReservationAgent"/> is changed in an <see cref="T:Microsoft.VisualStudio.Text.Editor.ISpaceReservationManager"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.SpaceReservationAgentChangedEventArgs.#ctor(Microsoft.VisualStudio.Text.Editor.ISpaceReservationAgent,Microsoft.VisualStudio.Text.Editor.ISpaceReservationAgent)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.SpaceReservationAgentChangedEventArgs"/>.
            </summary>
            <param name="oldAgent">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ISpaceReservationAgent"/> associated with the previous value.</param>
            <param name="newAgent">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ISpaceReservationAgent"/> associated with the new value.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.SpaceReservationAgentChangedEventArgs.OldAgent">
            <summary>
            Gets the old agent.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.SpaceReservationAgentChangedEventArgs.NewAgent">
            <summary>
            Gets the new agent.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.SpaceReservationManagerDefinition">
            <summary>
            Represents metadata for an <see cref="T:Microsoft.VisualStudio.Text.Editor.ISpaceReservationManager"/>.  
            </summary>
            <remarks> 
            Because you cannot subclass this type, you can simply use the [Export] attribute.
            </remarks>
            <example>
            internal sealed class Components
            {
               [Export]
               [Name("SampleSpaceReservationManager")]
               [Order(After = "Selection", Before = "Text")]
               internal SpaceReservationManagerDefinition sampleManagerDefinition;
               
                { other components }
            }
            </example>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.WpfTextViewKeyboardFilterName">
            <summary>
            Represents the KeyboardFilter ordering name.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.WpfTextViewKeyboardFilterName.KeyboardFilterOrderingName">
            <summary>
            The value of the Name attribute on the IKeyboardFilterProvider production.
            </summary>
            <remarks>
            You can use this name to order other keyboard filters relative to the keyboard 
            filter that performs command keybinding dispatching.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.WpfViewOptionDefinition`1">
            <summary>
            Defines an editor option specific to an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/>.
            </summary>
            <remarks>
            This is a MEF component part, and should be exported with:
            [Export(typeof(EditorOptionDefinition))]
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.WpfViewOptionDefinition`1.IsApplicableToScope(Microsoft.VisualStudio.Utilities.IPropertyOwner)">
            <summary>
            Determines whether this definition is applicable only to text views.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.WpfViewOptionExtensions">
            <summary>
             Provides extension methods for options related to an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.WpfViewOptionExtensions.IsHighlightCurrentLineEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Determines whether the option to highlight the current line is enabled.
            </summary>
            <param name="options">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions"/>.</param>
            <returns><c>true</c> if the highlight option was enabled, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.WpfViewOptionExtensions.IsSimpleGraphicsEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Determines whether the option to draw a gradient selection is enabled.
            </summary>
            <param name="options">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions"/>.</param>
            <returns><c>true</c> if the draw selection gradient option was enabled, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.WpfViewOptionExtensions.IsMouseWheelZoomEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
             Determines whether to allow mouse wheel zooming
            </summary>
            <param name="options">The set of editor options.</param>
            <returns><c>true</c> if the mouse wheel zooming is enabled, otherwise <c>false</c>.</returns>
            <remarks>Disabling the mouse wheel zooming does NOT turn off Zooming (it disables zooming using mouse wheel)</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.WpfViewOptionExtensions.AppearanceCategory(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Specifies the appearance category.
            </summary>
            <param name="options">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions"/>.</param>
            <returns>The appearance category, which determines where to look up font properties and colors.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.DefaultWpfViewOptions">
            <summary>
            Represents common <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/> options.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultWpfViewOptions.EnableHighlightCurrentLineId">
            <summary>
            Determines whether to enable the highlight current line adornment.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultWpfViewOptions.EnableSimpleGraphicsId">
            <summary>
            Determines whether to enable the highlight current line adornment.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultWpfViewOptions.EnableMouseWheelZoomId">
            <summary>
            Determines whether to enable mouse wheel zooming
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultWpfViewOptions.AppearanceCategory">
            <summary>
            Determines the appearance category of a view, which selects a ClassificationFormatMap and EditorFormatMap.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.HighlightCurrentLineOption">
            <summary>
            Represents the option to highlight the current line.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.HighlightCurrentLineOption.Default">
            <summary>
            Gets the default value.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.HighlightCurrentLineOption.Key">
            <summary>
            Gets the key for the highlight current line option.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.SimpleGraphicsOption">
            <summary>
            Represents the option to draw a selection gradient as opposed to a solid color selection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.SimpleGraphicsOption.Default">
            <summary>
            Gets the default value.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.SimpleGraphicsOption.Key">
            <summary>
            Gets the key for the highlight current line option.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.MouseWheelZoomEnabled">
            <summary>
            Defines the option to enable the mouse wheel zoom
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.MouseWheelZoomEnabled.Default">
            <summary>
            Gets the default value, which is <c>true</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.MouseWheelZoomEnabled.Key">
            <summary>
            Gets the wpf text view  value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.AppearanceCategoryOption">
            <summary>
            Defines the appearance category.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.AppearanceCategoryOption.Default">
            <summary>
            Gets the default value.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.AppearanceCategoryOption.Key">
            <summary>
            Gets the key for the highlight current line option.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ZoomLevelChangedEventArgs">
            <summary>
            Provides information for a ZoomLevelChangedEvent event in the <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ZoomLevelChangedEventArgs.#ctor(System.Double,System.Windows.Media.Transform)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Editor.ZoomLevelChangedEventArgs"/>.
            </summary>
            <param name="newZoomLevel">The new zoom level for an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/>.</param>
            <param name="transform">The zoom transform used for an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/>.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ZoomLevelChangedEventArgs.NewZoomLevel">
            <summary>
            Gets the new zoom level for an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ZoomLevelChangedEventArgs.ZoomTransform">
            <summary>
            Gets the zoom tranform to apply 
            </summary>
            <remarks>Wpf UI elements wishing to be reflect the view's zoom level can set their 
            LayoutTransform property to the value of ZoomTransform. 
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.IFormattedLine">
            <summary>
            Represents a line of formatted text in the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </summary>
            <remarks>
            <para>Most properties and parameters that are doubles correspond to coordinates or distances in the text
            rendering coordinate system. In this coordinate system, x = 0.0 corresponds to the left edge of the drawing
            surface onto which text is rendered (x = view.ViewportLeft corresponds to the left edge of the viewport), and y = view.ViewportTop corresponds to the top edge of the viewport. The x-coordinate increases
            from left to right, and the y-coordinate increases from top to bottom. </para>
            <para>The horizontal and vertical axes of the view behave differently. When the text in the view is
            formatted, only the visible lines are formatted. As a result,
            a viewport cannot be scrolled horizontally and vertically in the same way.</para>
            <para>A viewport is scrolled horizontally by changing the left coordinate of the
            viewport so that it moves with respect to the drawing surface.</para>
            <para>A view can be scrolled vertically only by performing a new layout.</para>
            <para>Doing a layout in the view may cause the ViewportTop property of the view to change. For example, scrolling down one line will not translate any of the visible lines.
            Instead it will simply change the view's ViewportTop property (causing the lines to move on the screen even though their y-coordinates have not changed).</para>
            <para>Distances in the text rendering coordinate system correspond to logical pixels. If the text rendering
            surface is displayed without any scaling transform, then 1 unit in the text rendering coordinate system
            corresponds to one pixel on the display.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine">
            <summary>
            Represents a line of rendered text in the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </summary>
            <remarks>
            <para>Only those <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine"/> objects of which parts are visible in the viewport will be formatted.</para>
            <para>Most properties and parameters that are doubles correspond to coordinates or distances in the text
            rendering coordinate system. In this coordinate system, x = 0.0 corresponds to the left edge of the drawing
            surface onto which text is rendered (x = view.ViewportLeft corresponds to the left edge of the viewport), and y = view.ViewportTop corresponds to the top edge of the viewport. The x-coordinate increases
            from left to right, and the y-coordinate increases from top to bottom. </para>
            <para>The horizontal and vertical axes of the view behave differently. When the text in the view is
            formatted, only the visible lines are formatted. As a result,
            a viewport cannot be scrolled horizontally and vertically in the same way.</para>
            <para>A viewport is scrolled horizontally by changing the left coordinate of the
            viewport so that it moves with respect to the drawing surface.</para>
            <para>A view can be scrolled vertically only by performing a new layout.</para>
            <para>Doing a layout in the view may cause the ViewportTop property of the view to change. For example, scrolling down one line will not translate any of the visible lines.
            Instead it will simply change the view's ViewportTop property (causing the lines to move on the screen even though their y-coordinates have not changed).</para>
            <para>Distances in the text rendering coordinate system correspond to logical pixels. If the text rendering
            surface is displayed without any scaling transform, then 1 unit in the text rendering coordinate system
            corresponds to one pixel on the display.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine.GetCharacterFormatting(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Gets the formatting for a particular character in the line.
            </summary>
            <param name="bufferPosition">The buffer position of the desired character.</param>
            <returns>The <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties"/> used to format that character.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferPosition"/> does not correspond to a position on this line.</exception>
            <exception cref="T:System.ObjectDisposedException">this <see cref="T:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine"/> has been disposed.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine.VisibleArea">
            <summary>
            Gets the visible area in which this text line will be rendered.
            </summary>
            <exception cref="T:System.ObjectDisposedException">this <see cref="T:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine"/> has been disposed.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine.TextLines">
            <summary>
            Gets a list of WPF text lines that make up the formatted text line.
            </summary>
            <exception cref="T:System.ObjectDisposedException">this <see cref="T:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine"/> has been disposed of.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.IFormattedLine.SetSnapshot(Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Text.ITextSnapshot)">
            <summary>
            Sets the <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/>s upon which this formatted text line is based.
            </summary>
            <param name="visualSnapshot">the new snapshot for the line in the view model's visual buffer.</param>
            <param name="editSnapshot">the new snapshot for the line in the view model's edit buffer.</param>
            <remarks>The length of this text line is not allowed to change as a result of changing the snapshot.</remarks>
            <exception cref="T:System.ObjectDisposedException">This <see cref="T:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine"/> has been disposed.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.IFormattedLine.SetLineTransform(Microsoft.VisualStudio.Text.Formatting.LineTransform)">
            <summary>
            Sets the line transform used to format the text in this formatted text line.
            </summary>
            <param name="transform">The line transform for this formatted text line.</param>
            <exception cref="T:System.ObjectDisposedException">This <see cref="T:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine"/> has been disposed.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.IFormattedLine.SetTop(System.Double)">
            <summary>
            Sets the position used to format the text in this formatted text line.
            </summary>
            <param name="top">The position for the top of the formatted text line.</param>
            <exception cref="T:System.ObjectDisposedException">This <see cref="T:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine"/> has been disposed.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.IFormattedLine.SetDeltaY(System.Double)">
            <summary>
            Sets the change in the position of the top of this formatted text line in the current
            view layout and the previous view layour.
            </summary>
            <param name="deltaY">The new deltaY value for the formatted text line.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.IFormattedLine.SetChange(Microsoft.VisualStudio.Text.Formatting.TextViewLineChange)">
            <summary>
            Sets the Change property for this text line.
            </summary>
            <param name="change">The <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextViewLineChange"/>.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.IFormattedLine.SetVisibleArea(System.Windows.Rect)">
            <summary>
            Sets the visible area in which this text line will be formatted.
            </summary>
            <param name="visibleArea">The bounds of the visible area on the drawing surface upon which this text line will be formatted.</param>
            <remarks>The VisibilityState of this text line is determined strictly by the top and bottom of <paramref name="visibleArea"/>.</remarks>
            <exception cref="T:System.ObjectDisposedException">This <see cref="T:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine"/> has been disposed.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.IFormattedLine.GetOrCreateVisual">
            <summary>
            Gets the WPF <see cref="T:System.Windows.Media.Visual"/> that can be used to add this formatted text line to a <see cref="T:System.Windows.Media.VisualCollection"/>.
            </summary>
            <exception cref="T:System.ObjectDisposedException">This <see cref="T:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine"/> has been disposed.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.IFormattedLine.RemoveVisual">
            <summary>
            Remove the Wpf <see cref="T:System.Windows.Media.Visual"/> that represents the rendered text of the line.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource">
            <summary>
            Generates formatted line from text snapshots.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource.FormatLineInVisualBuffer(Microsoft.VisualStudio.Text.ITextSnapshotLine)">
            <summary>
            Formats the text and adornments in a <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine"/>.
            </summary>
            <param name="visualLine">The line to format.</param>
            <returns>The formatted text for that line.</returns>
            <remarks>
            <para>
            <see cref="T:Microsoft.VisualStudio.Text.Formatting.IFormattedLine"/> objects are <see cref="T:System.IDisposable"/> and must be disposed explicitly.
            </para>
            <para>
            The supplied <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine"/> must belong to the snapshot of the visual buffer, since visuals 
            live on that buffer.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource.TopTextSnapshot">
            <summary>
            Gets the top text snapshot for which this source will provide formatted text.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource.SourceTextSnapshot">
            <summary>
            Gets the source text snapshot for which this source will provide formatted text.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource.TextAndAdornmentSequencer">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer"/> used by this source.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource.TabSize">
            <summary>
            Gets the number of spaces between each tab stop.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource.ColumnWidth">
            <summary>
            Gets the width of a column in pixels.
            </summary>
            <remarks>This is used to determine the location of tab stops.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource.LineHeight">
            <summary>
            Gets the nominal height of a line.
            </summary>
            <remarks>
            This will not, in general, be the same as TextHeightAboveBaseline + TextHeightBelowBaseline since there is might be some padding between
            lines.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource.TextHeightAboveBaseline">
            <summary>
            Gets the nominal height of the text above the baseline.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource.TextHeightBelowBaseline">
            <summary>
            Gets the nominal height of the text below the baseline.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource.BaseIndentation">
            <summary>
            Gets the base indentation (in logical pixels) for all lines generated by this source.
            </summary>
            <remarks>
            This is generally a small value like 2.0, so that some characters (such as an italic slash) will not be clipped
            by the left edge of the view.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource.WordWrapWidth">
            <summary>
            Gets the width (in logical pixels) where the formatted text will be broken into multiple lines. 
            </summary>
            <remarks>The value 0.0 means that lines should never be broken.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource.MaxAutoIndent">
            <summary>
            Gets the maximum auto-indent for wrapped lines.
            </summary>
            <remarks>
            If a long line is word-wrapped, then all the line fragments after the first will be indented by 
            the amount of leading white space on the first line, or MaxAutoIndent, whichever is smaller.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource.UseDisplayMode">
            <summary>
            True if the formatter uses WPF Display TextFormattingMode, false otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource.DefaultTextProperties">
            <summary>
            Gets the <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties"/> used to render unclassified text.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.IFormattedTextSourceFactoryService">
            <summary>
            Creates formatted text sources.
            </summary>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            IFormattedTextSourceFactoryService factory = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.IFormattedTextSourceFactoryService.Create(Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Text.ITextSnapshot,System.Int32,System.Double,System.Double,System.Double,System.Boolean,Microsoft.VisualStudio.Text.Classification.IClassifier,Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer,Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource"/> for the given view configuration.
            </summary>
            <param name="sourceTextSnapshot">The text snapshot for the source buffer.</param>
            <param name="visualBufferSnapshot">The text snapshot for the visual buffer.</param>
            <param name="tabSize">The number of spaces between each tab stop.</param>
            <param name="baseIndent">The base indentation for all lines.</param>
            <param name="wordWrapWidth">The word wrap width in logical pixels.</param>
            <param name="maxAutoIndent">The maximum amount to auto-indent wrapped lines.</param>
            <param name="useDisplayMode">Use WPF Display TextFormattingMode for formatting text.</param>
            <param name="aggregateClassifier">The aggregate of all classifiers on the view.</param>
            <param name="sequencer">The text and adornment sequencer for the view. If null, there are no space negotiating adornments.</param>
            <param name="classificationFormatMap">The classification format map to use while formatting text.</param>
            <returns>A new text formatting source for that snapshot.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.IFormattedTextSourceFactoryService.Create(Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Text.ITextSnapshot,System.Int32,System.Double,System.Double,System.Double,System.Boolean,Microsoft.VisualStudio.Text.Classification.IClassifier,Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer,Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap,System.Boolean)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource"/> for the given view configuration.
            </summary>
            <param name="sourceTextSnapshot">The text snapshot for the source buffer.</param>
            <param name="visualBufferSnapshot">The text snapshot for the visual buffer.</param>
            <param name="tabSize">The number of spaces between each tab stop.</param>
            <param name="baseIndent">The base indentation for all lines.</param>
            <param name="wordWrapWidth">The word wrap width in logical pixels.</param>
            <param name="maxAutoIndent">The maximum amount to auto-indent wrapped lines.</param>
            <param name="useDisplayMode">Use WPF Display TextFormattingMode for formatting text.</param>
            <param name="aggregateClassifier">The aggregate of all classifiers on the view.</param>
            <param name="sequencer">The text and adornment sequencer for the view. If null, there are no space negotiating adornments.</param>
            <param name="classificationFormatMap">The classification format map to use while formatting text.</param>
            <param name="isViewWrapEnabled">Whether word wrap glyphs are enabled for wrapped lines.</param>
            <returns>A new text formatting source for that snapshot.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.IFormattedTextSourceFactoryService.Create(Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Text.ITextSnapshot,System.Int32,System.Double,System.Double,System.Double,System.Boolean,Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer,Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource"/> for the given view configuration.
            </summary>
            <param name="sourceTextSnapshot">The text snapshot for the source buffer.</param>
            <param name="visualBufferSnapshot">The text snapshot for the visual buffer.</param>
            <param name="tabSize">The number of spaces between each tab stop.</param>
            <param name="baseIndent">The base indentation for all lines.</param>
            <param name="wordWrapWidth">The word wrap width in logical pixels.</param>
            <param name="maxAutoIndent">The maximum amount to auto-indent wrapped lines.</param>
            <param name="useDisplayMode">Use WPF Display TextFormattingMode for formatting text.</param>
            <param name="sequencer">The text and adornment sequencer for the view. If null, there are no space negotiating adornments.</param>
            <param name="classificationFormatMap">The classification format map to use while formatting text.</param>
            <returns>A new text formatting source for that snapshot.</returns>
            <remarks>This method is equivalent to calling the Create(...) method above with an aggregate classifier that
            never classifies any text.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.ILineTransformSource">
            <summary>
            Provides the line transform for a line of formatted text.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ILineTransformSource.GetLineTransform(Microsoft.VisualStudio.Text.Formatting.ITextViewLine,System.Double,Microsoft.VisualStudio.Text.Editor.ViewRelativePosition)">
            <summary>
            Computes the line transform for a given line of formatted text.
            </summary>
            <param name="line">The line for which to compute the line transform.</param>
            <param name="yPosition">The y-coordinate of the line.</param>
            <param name="placement">The placement of the line with respect to <paramref name="yPosition"/>.</param>
            <returns>The line transform for that line.</returns>
            <remarks>If <paramref name="placement"/> is ViewRelativePosition.Top, then the top of the line
            will be located at <paramref name="yPosition"/>. Otherwise the bottom of the line will be located at
            <paramref name="yPosition"/>.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.ILineTransformSourceProvider">
            <summary>
            Provides <see cref="T:Microsoft.VisualStudio.Text.Formatting.ILineTransformSource"/> objects.  
            </summary>
            <remarks>This is a MEF component part, and should be exported with the following attribute:
            [Export(typeof(ILineTransformSourceProvider))]
            Exporters must supply a ContentTypeAttribute and TextViewRoleAttribute.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ILineTransformSourceProvider.Create(Microsoft.VisualStudio.Text.Editor.IWpfTextView)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Formatting.ILineTransformSource"/> for the given <paramref name="textView"/>.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/> on which the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ILineTransformSource"/> will format.</param>
            <returns>The new <see cref="T:Microsoft.VisualStudio.Text.Formatting.ILineTransformSource"/>.  
            The value may be null if this <see cref="T:Microsoft.VisualStudio.Text.Formatting.ILineTransformSourceProvider"/> decides not to participate.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.ITextParagraphPropertiesFactoryService">
            <summary>
            Creates <see cref="T:System.Windows.Media.TextFormatting.TextParagraphProperties"/> classes to be used when lines on the view are being formatted.
            </summary>
            <remarks>
            <para>
            This is a MEF component part, and should be imported as follows:
            [Import]
            ITextFormattingParagraphPropertiesFactoryService factory = null;
            </para>
            <para>
            This component is content type specific and should be annotated with one or more <see cref="T:Microsoft.VisualStudio.Utilities.ContentTypeAttribute"/>s.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextParagraphPropertiesFactoryService.Create(Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource,Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties,Microsoft.VisualStudio.Text.IMappingSpan,Microsoft.VisualStudio.Text.IMappingPoint,System.Int32)">
            <summary>
            Creates a <see cref="T:System.Windows.Media.TextFormatting.TextParagraphProperties"/> for the provided configuration.
            </summary>
            <param name="formattedLineSource">The <see cref="T:Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource"/> that's performing the formatting of the line. You can access useful properties about the ongoing formatting operation from this object.</param>
            <param name="textProperties">The <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> of the line for which <see cref="T:System.Windows.Media.TextFormatting.TextParagraphProperties"/> are to be provided. This paramter can be used to obtain formatting information about the textual contents of the line.</param>
            <param name="line">The <see cref="T:Microsoft.VisualStudio.Text.IMappingSpan"/> corresponding to the line that's being formatted/rendered.</param>
            <param name="lineStart">The <see cref="T:Microsoft.VisualStudio.Text.IMappingPoint"/> corresponding to the beginning of the line segment that's being formatted. This paramter is relevant for word-wrap scenarios where a single <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine"/> results in multiple formatted/rendered lines on the view.</param>
            <param name="lineSegment">The segment number of the line segment that's been currently formatted. This is a zero-based index and is applicable to word-wrapped lines. If a line is word-wrapped into 4 segments, you will receive 4 calls for the line with lineSegments of 0, 1, 2, and 3.</param>
            <returns>A <see cref="T:System.Windows.Media.TextFormatting.TextParagraphProperties"/> to be used when the line is being formatted.</returns>
            <remarks>Please note that you can return a <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingParagraphProperties"/> which has a convenient set of basic properties defined.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingParagraphProperties">
            <summary>
            Provides text formatting properties.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingParagraphProperties.#ctor(Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingParagraphProperties"/>.
            </summary>
            <param name="defaultTextRunProperties">The default properties for the paragraph.</param>
            <remarks>This sets the tab size to 4 * the FontRenderingEmSize.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="defaultTextRunProperties"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingParagraphProperties.#ctor(Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties,System.Double)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingParagraphProperties"/>.
            </summary>
            <param name="defaultTextRunProperties">The default properties for the paragraph.</param>
            <param name="defaultTabSize">The tab size in pixels.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="defaultTextRunProperties"/> or <paramref name="defaultTabSize"/> is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingParagraphProperties.DefaultIncrementalTab">
            <summary>
            Gets the default incremental tab.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingParagraphProperties.DefaultTextRunProperties">
            <summary>
            Gets the default text run properties.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingParagraphProperties.FirstLineInParagraph">
            <summary>
            Determines whether this is the first line in a paragraph.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingParagraphProperties.FlowDirection">
            <summary>
            Gets the flow direction.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingParagraphProperties.TextAlignment">
            <summary>
            Gets the text alignment.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingParagraphProperties.Indent">
            <summary>
            Gets the size of the indent.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingParagraphProperties.LineHeight">
            <summary>
            Gets the line height.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingParagraphProperties.TextMarkerProperties">
            <summary>
            Gets the text marker properties.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingParagraphProperties.TextWrapping">
            <summary>
            Gets the text wrapping.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties">
            <summary>
            Holds text formatting property information. This class derives from the abstract WPF <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties"/> class. 
            </summary>
            <remarks>
            <para>
            This class is used to hold all information about the text formatting properties. Once created,
            it is immutable and all operations return different objects. For each unique set of
            TextFormattingRunProperties there exists exactly one object instance. If a TextFormattingRunProperties
            has reference equality to another, their properties are identical. Conversely, if a TextFormattingRunProperties
            object has reference inequality, the properties are distinct.
            </para>
            <para>
            Checking reference equality is the only way to determine whether two TextFormattingRunProperties are distinct.
            Checking the equality of each property of the object may indicate the two are identical, but that may or may
            not be the case.
            </para>
            <para>
            TextFormattingRunProperties may have empty properties. An empty property 
            inherits the empty properties from some additional text. The TextFormattingRunProperties object can
            determine whether a property is empty or not: [PropertyName]Empty property. TextFormattingRunProperties
            also contains a facility for emptying a property: Clear[PropertyName]().
            </para>
            <para>
            All freezable fields of the TextFormattingRunProperties object are frozen on creation.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.#cctor">
            <summary>
            Static constructor to freeze static empty collections.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.#ctor">
            <summary>
            Initializes a new, empty instance of <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/>.
            </summary>
            <remarks>The properties return the default values, but the
            internal structure is not altered.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> for deserialization.
            </summary>
            <param name="info">The serialization information provided by the deserialization mechanism.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.#ctor(System.Windows.Media.Brush,System.Windows.Media.Brush,System.Windows.Media.Typeface,System.Nullable{System.Double},System.Nullable{System.Double},System.Windows.TextDecorationCollection,System.Windows.Media.TextEffectCollection,System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/>.
            </summary>
            <param name="foreground">The foreground brush.</param>
            <param name="background">The background brush.</param>
            <param name="typeface">The typeface.</param>
            <param name="size">The size.</param>
            <param name="hintingSize">The hinting size.</param>
            <param name="textDecorations">The text decorations.</param>
            <param name="textEffects">The text effects.</param>
            <param name="cultureInfo">The culture info.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.#ctor(Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> from a second instance.
            </summary>
            <param name="toCopy">The TextFormattingRunProperties to copy.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.CreateTextFormattingRunProperties">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/>.
            </summary>
            <returns>The default TextFormattingRunProperties for the system.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.CreateTextFormattingRunProperties(System.Windows.Media.Typeface,System.Double,System.Windows.Media.Color)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> with the specified options.
            </summary>
            <param name="typeface">The typeface of the text.</param>
            <param name="size">The size of the text.</param>
            <param name="foreground">The foreground color of the text.</param>
            <returns>A TextFormattingRunProperties that has the requested properties.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.CreateTextFormattingRunProperties(System.Windows.Media.Brush,System.Windows.Media.Brush,System.Windows.Media.Typeface,System.Nullable{System.Double},System.Nullable{System.Double},System.Windows.TextDecorationCollection,System.Windows.Media.TextEffectCollection,System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> with the specified options.
            </summary>
            <param name="foreground">The foreground brush of the text.</param>
            <param name="background">The background brush of the text.</param>
            <param name="typeface">The typeface of the text.</param>
            <param name="size">The size of the text.</param>
            <param name="hintingSize">The hinting size of the text.</param>
            <param name="textDecorations">The text decorations on the text.</param>
            <param name="textEffects">The text effects on the text.</param>
            <param name="cultureInfo">The culture info.</param>
            <returns>A TextFormattingRunProperties object that has the requested properties.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ClearBold">
            <summary>
            Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> with all properties the same, but clears the <see cref="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.Bold"/> property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ClearItalic">
            <summary>
            Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> with all properties the same, but clears the <see cref="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.Italic"/> property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ClearForegroundOpacity">
            <summary>
            Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> with all properties the same, but clears the <see cref="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ForegroundOpacity"/> property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ClearBackgroundOpacity">
            <summary>
            Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> with all properties the same, but clears the <see cref="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.BackgroundOpacity"/> property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ClearBackgroundBrush">
            <summary>
            Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> with all properties the same except for the background brush.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ClearCultureInfo">
            <summary>
            Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> ith all properties the same except for the culture info.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ClearFontHintingEmSize">
            <summary>
            Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> with all properties the same except for the font hinting size.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ClearFontRenderingEmSize">
            <summary>
            Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> with all properties the same except for the rendering size.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ClearForegroundBrush">
            <summary>
            Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> with all properties the same except for the foreground brush.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ClearTextDecorations">
            <summary>
            Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> with all properties the same except for the text decorations.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ClearTextEffects">
            <summary>
            Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> with all properties the same except for the text effects.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ClearTypeface">
            <summary>
            Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> with all properties the same except for the typeface.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.SetBackgroundBrush(System.Windows.Media.Brush)">
            <summary>
            Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> with the properties of this one but 
            with the background brush set to <paramref name="brush"/>.
            </summary>
            <param name="brush">The new background brush.</param>
            <remarks>
            The brush is frozen by this method.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="brush"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.SetBackground(System.Windows.Media.Color)">
            <summary>
            Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> with the properties of this one but
            with the background set to <paramref name="background"/>.
            </summary>
            <param name="background">The new background color.</param>
            <remarks>
            The background brush is changed by this method.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.SetCultureInfo(System.Globalization.CultureInfo)">
            <summary>
            Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> with the properties of this one but
            with the culture set to <paramref name="cultureInfo"/>.
            </summary>
            <param name="cultureInfo">The new culture information.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.SetFontHintingEmSize(System.Double)">
            <summary>
            Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> with the properties of this one but
            with the font hinting size set to <paramref name="hintingSize"/>.
            </summary>
            <param name="hintingSize">The new font hinting size.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.SetFontRenderingEmSize(System.Double)">
            <summary>
            Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> with the properties of this one but
            with the font rendering size set to <paramref name="renderingSize"/>.
            </summary>
            <param name="renderingSize">The new rendering size.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.SetForegroundBrush(System.Windows.Media.Brush)">
            <summary>
            Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> with the properties of this one 
            but with the new foreground <see cref="T:System.Windows.Media.Brush"/> set to <paramref name="brush"/>.
            </summary>
            <param name="brush">The new foreground brush.</param>
            <remarks>
            The brush is frozen by this method.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="brush"/>is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.SetForeground(System.Windows.Media.Color)">
            <summary>
            Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> with the properties of this one but
            with the foreground set to <paramref name="foreground"/>.
            </summary>
            <param name="foreground">The new foreground color.</param>
            <remarks>
            The foreground brush is changed by this method.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.SetTextDecorations(System.Windows.TextDecorationCollection)">
            <summary>
            Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> with the properties of this one but
            with the text decorations set to <paramref name="textDecorations"/>.
            </summary>
            <param name="textDecorations">The new text decoration collection.</param>
            <remarks>
            The <paramref name="textDecorations"/> is frozen by this method.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="textDecorations"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.SetTextEffects(System.Windows.Media.TextEffectCollection)">
            <summary>
            Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> with the properties of this one but
            with the text effects set to <paramref name="textEffects"/>.
            </summary>
            <param name="textEffects">The new text effect collection.</param>
            <remarks>
            The <paramref name="textEffects"/> is frozen by this method.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="textEffects"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.SetTypeface(System.Windows.Media.Typeface)">
            <summary>
            Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> with the properties of this one but
            with the typeface set to <paramref name="typeface"/>.
            </summary>
            <param name="typeface">The new typeface.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="typeface"/> is null.</exception>
            <remarks>
            If you wish to only make the formatting either italic or bold, instead of setting a typeface, please use the 
            <see cref="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.SetBold(System.Boolean)"/> and <see cref="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.SetItalic(System.Boolean)"/> methods.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.SetForegroundOpacity(System.Double)">
            <summary>
            Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> with the properties of this one but
            with the <see cref="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ForegroundOpacity"/> property set to <paramref name="opacity"/>.
            </summary>
            <param name="opacity">The foreground opacity.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="opacity"/> is less than zero or bigger than 1</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.SetBackgroundOpacity(System.Double)">
            <summary>
            Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> with the properties of this one but
            with the <see cref="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.BackgroundOpacity"/> property set to <paramref name="opacity"/>.
            </summary>
            <param name="opacity">The background opacity.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="opacity"/> is less than zero or bigger than 1</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.SetBold(System.Boolean)">
            <summary>
            Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> with the properties of this one but
            with the <see cref="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.Bold"/> property set to <paramref name="isBold"/>.
            </summary>
            <param name="isBold">Should be set to true if text formatting is to be bold.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.SetItalic(System.Boolean)">
            <summary>
            Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> with the properties of this one but
            with the <see cref="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.Italic"/> property set to <paramref name="isItalic"/>.
            </summary>
            <param name="isItalic">Should be set to true if text formatting is to be italic.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ForegroundBrushSame(System.Windows.Media.Brush)">
            <summary>
            Determines whether the foreground brush for this <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> is the same as <paramref name="brush"/>.
            </summary>
            <param name="brush">The other <see cref="T:System.Windows.Media.Brush"/>.</param>
            <returns><c>true</c> if the foreground brushes are the same, <c>false</c> if they are not.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.BackgroundBrushSame(System.Windows.Media.Brush)">
            <summary>
            Determines whether the background brush for this <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> is the same as <paramref name="brush"/>.
            </summary>
            <param name="brush">The other <see cref="T:System.Windows.Media.Brush"/>.</param>
            <returns><c>true</c> if the background brushes are the same, <c>false</c> if they are not.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.SameSize(Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties)">
            <summary>
            Determines whether font sizes for two <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> are the same.
            </summary>
            <param name="other">The other <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/>.</param>
            <returns><c>true</c> if the sizes are the same, <c>false</c> if they are not.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.BrushesEqual(System.Windows.Media.Brush,System.Windows.Media.Brush)">
            <summary>
            Determine whether two brushes are equal.
            </summary>
            <param name="brush">The first brush.</param>
            <param name="other">The second brush.</param>
            <returns><c>true</c> if the two are equal, <c>false</c> otherwise.</returns>
            <remarks>internal for testability</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.FindOrCreateProperties(Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties)">
            <summary>
            Return either the existing TextFormattingRunProperties that matches the requested
            properties, or add the new one to our list of existing properties and return it.
            </summary>
            <param name="properties">The properties to find the unique instance of.</param>
            <returns>The unique instance satisfying the properties passed in.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.IsEqual(Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties)">
            <summary>
            Determine whether two TextFormattingRunProperties have the same formatting effects.
            </summary>
            <param name="other">The other set of properties to check against.</param>
            <returns>true if the two TextFormattingRunProperties have the same formatting effects, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.FreezeBackgroundBrush">
            <summary>
            Freeze the background brush.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.FreezeEverything">
            <summary>
            Freeze all available freezable members.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.FreezeForegroundBrush">
            <summary>
            Freeze the foreground brush.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.FreezeTextDecorations">
            <summary>
            Freeze the text decorations object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.FreezeTextEffects">
            <summary>
            Freeze the text effects object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes the <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> object using a XamlWriter.
            </summary>
            <param name="info">The SerializationInfo used for serialization.</param>
            <param name="context">The serialization context.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.GetObjectFromSerializationInfo(System.String,System.Runtime.Serialization.SerializationInfo)">
            <summary>
            Deserializes an object from the SerializationInfo struct using a XamlReader.
            </summary>
            <param name="name">The name of the object to deserialize.</param>
            <param name="info">The SerializationInfo used to deserialize.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.GetRealObject(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets the interned <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> object.
            </summary>
            <param name="context">The deserialization context.</param>
            <returns>The interned <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> object.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.BackgroundBrush">
            <summary>
            Gets the background brush.
            </summary>
            <remarks>
            This property gets a transparent brush if the background brush is not currently set.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.CultureInfo">
            <summary>
            Gets the culture information.
            </summary>
            <remarks>
            Returns the current culture if no culture is currently set.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.FontHintingEmSize">
            <summary>
            Gets the font hinting size.
            </summary>
            <remarks>
            Returns zero if no hinting size is currently set.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.FontRenderingEmSize">
            <summary>
            Gets the font rendering size.
            </summary>
            <remarks>
            Returns zero if no rendering size is currently set.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ForegroundBrush">
            <summary>
            Gets the foreground brush.
            </summary>
            <remarks>
            Returns a transparent brush if the foreground brush is not currently set.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.Italic">
            <summary>
            Returns true if the formatting is made explicitly italic.
            </summary>
            <remarks>
            Returns false if <see cref="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ItalicEmpty"/> is true.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.Bold">
            <summary>
            Returns true if the formatting is made explicitly bold.
            </summary>
            <remarks>
            Returns false if <see cref="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.BoldEmpty"/> returns true.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ForegroundOpacity">
            <summary>
            Returns the opacity of the foreground.
            </summary>
            <remarks>
            Returns 1.0 if <see cref="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ForegroundOpacityEmpty"/> is true.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.BackgroundOpacity">
            <summary>
            Returns the opacity of the background.
            </summary>
            <remarks>
            Returns 1.0 if <see cref="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.BackgroundOpacityEmpty"/> is true.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.TextDecorations">
            <summary>
            Gets the decorations for the text.
            </summary>
            <remarks>
            Returns an empty <see cref="T:System.Windows.TextDecorationCollection"/> if no collection is currently set.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.TextEffects">
            <summary>
            Gets the text effects for the text.
            </summary>
            <remarks>
            Returns an empty TextEffectCollection if no collection is currently set.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.Typeface">
            <summary>
            Gets the Typeface for the text.
            </summary>
            <remarks>
            Returns the system default Typeface if no typeface is currently set.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.BackgroundBrushEmpty">
            <summary>
            Determines whether the background brush is empty.
            </summary>
            <returns><c>true</c> if the background brush is empty, <c>false</c>otherwise.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.BackgroundOpacityEmpty">
            <summary>
            Determines whether any custom opacity is explicitly set for the background.
            </summary>
            <returns><c>true</c> if the there is no custom opacity set, <c>false</c>otherwise.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ForegroundOpacityEmpty">
            <summary>
            Determines whether any custom opacity is explicitly set for the foreground.
            </summary>
            <returns><c>true</c> if the there is no custom opacity set, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.BoldEmpty">
            <summary>
            Determines whether the bold property is set.
            </summary>
            <returns><c>true</c> if the bold property is not set, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ItalicEmpty">
            <summary>
            Determines whether the italic property is set.
            </summary>
            <returns><c>true</c> if the italic property is not set, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.CultureInfoEmpty">
            <summary>
            Determines whether the culture info is empty.
            </summary>
            <returns><c>true</c> if the culture info is empty, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.FontHintingEmSizeEmpty">
            <summary>
            Determines whether the font hinting size is empty.
            </summary>
            <returns><c>true</c> if the font hinting is empty, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.FontRenderingEmSizeEmpty">
            <summary>
            Determines whether the size is empty.
            </summary>
            <returns><c>true</c> if the size is empty, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ForegroundBrushEmpty">
            <summary>
            Determines whether the foreground brush is empty.
            </summary>
            <returns><c>true</c> if the foreground brush is empty, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.TextDecorationsEmpty">
            <summary>
            Determines whether the text decorations collection is empty.
            </summary>
            <returns><c>true</c> if the text decorations collection is empty, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.TextEffectsEmpty">
            <summary>
            Determines whether the text effects collection is empty.
            </summary>
            <returns><c>true</c> if the text effects collection is empty, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.TypefaceEmpty">
            <summary>
            Determines whether the typeface is empty.
            </summary>
            <returns><c>true</c> if the typeface is empty, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IGlyphTag">
            <summary>
            Represents a glyph tag, which is consumed by the glyph margin
            to place glyph visuals.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IGlyphFactory">
            <summary>
            Provides a visual for a specific glyph type.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IGlyphFactory.GenerateGlyph(Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine,Microsoft.VisualStudio.Text.Editor.IGlyphTag)">
            <summary>
            Generates a new glyph visual for the given line.
            </summary>
            <param name="line">The line that this glyph will be placed on.</param>
            <param name="tag">Information about the glyph for which the visual is being generated.</param>
            <returns>The visual element for the given tag.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IGlyphMouseProcessorProvider">
            <summary>
            Provides a mouse binding for the glyph margin.
            </summary>
            <remarks>This is a MEF component part, and should be exported with the following attribute:
            [Export(typeof(IGlyphMouseProcessorProvider))]
            Exporters must supply a NameAttribute, OrderAttribute, 
            and at least one ContentTypeAttribute.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IGlyphMouseProcessorProvider.GetAssociatedMouseProcessor(Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost,Microsoft.VisualStudio.Text.Editor.IWpfTextViewMargin)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Editor.IMouseProcessor"/> for the glyph margin, given a <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost"/> and a <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
            <param name="wpfTextViewHost">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost"/> associated with the glyph margin.</param>
            <param name="margin">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewMargin"/>.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.IMouseProcessor"/> for the glyph margin.  
            The value may be null if this <see cref="T:Microsoft.VisualStudio.Text.Editor.IGlyphMouseProcessorProvider"/> does not participate.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IGlyphFactoryProvider">
            <summary>
            Provides an <see cref="T:Microsoft.VisualStudio.Text.Editor.IGlyphFactory"/>.
            </summary>
            <remarks>This is a MEF component part, and should be exported with the following attribute:
            [Export(typeof(IGlyphVisualProvider))]
            Exporters must supply a NameAttribute, OrderAttribute, 
            at least one ContentTypeAttribute, and at least one TagTypeAttribute.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IGlyphFactoryProvider.GetGlyphFactory(Microsoft.VisualStudio.Text.Editor.IWpfTextView,Microsoft.VisualStudio.Text.Editor.IWpfTextViewMargin)">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.IGlyphFactory"/> for the given text view and margin.
            </summary>
            <param name="view">The view for which the factory is being created.</param>
            <param name="margin">The margin for which the factory will create glyphs.</param>
            <returns>An <see cref="T:Microsoft.VisualStudio.Text.Editor.IGlyphFactory"/> for the given view and margin.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IKeyProcessorProvider">
            <summary>
            Creates a <see cref="T:Microsoft.VisualStudio.Text.Editor.KeyProcessor"/> for a given <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/>. 
            </summary>
            <remarks>This is a MEF component part, and should be exported with the following attribute:
            [Export(typeof(IKeyProcessorProvider))]
            Exporters must supply a NameAttribute, a ContentTypeAttribute, at least one TextViewRoleAttribute, and optionally an OrderAttribute.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IKeyProcessorProvider.GetAssociatedProcessor(Microsoft.VisualStudio.Text.Editor.IWpfTextView)">
            <summary>
            Creates a <see cref="T:Microsoft.VisualStudio.Text.Editor.KeyProcessor"/> for a given <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/>.
            </summary>
            <param name="wpfTextView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/> for which to create the <see cref="T:Microsoft.VisualStudio.Text.Editor.KeyProcessor"/>.</param>
            <returns>The created <see cref="T:Microsoft.VisualStudio.Text.Editor.KeyProcessor"/>.
            The value may be null if this <see cref="T:Microsoft.VisualStudio.Text.Editor.IKeyProcessorProvider"/> does not wish to participate in the current context.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IMouseProcessor">
            <summary>
            Provides extensions for mouse bindings.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PreprocessMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles a mouse left button down event before the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PostprocessMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles a mouse left button down event after the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PreprocessMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles a mouse right button down event before the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PostprocessMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles a mouse right button down event after the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PreprocessMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles a mouse left button up event before the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PostprocessMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles a mouse left button up event after the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PreprocessMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles a mouse right button up event before the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PostprocessMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles a mouse right button up event after the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PreprocessMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles a mouse up event before the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PostprocessMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles a mouse up event after the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PreprocessMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles a mouse down event before the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PostprocessMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles a mouse down event after the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PreprocessMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Handles a mouse move event before the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PostprocessMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Handles a mouse move event after the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PreprocessMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
            <summary>
            Handles a mouse wheel event before the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PostprocessMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
            <summary>
            Handles a mouse wheel event after the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PreprocessMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Handles a mouse enter event before the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PostprocessMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Handles a mouse enter event after the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PreprocessMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Handles a mouse leave event before the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PostprocessMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Handles a mouse leave event after the default handler.
            </summary>
            <param name="e">
            Event arguments that describe the event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PreprocessDragLeave(System.Windows.DragEventArgs)">
            <summary>
            Handles a drag leave event before the default handler.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.DragEventArgs"/> describing the drag operation.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PostprocessDragLeave(System.Windows.DragEventArgs)">
            <summary>
            Handles a drag leave event after the default handler.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.DragEventArgs"/> describing the drag operation.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PreprocessDragOver(System.Windows.DragEventArgs)">
            <summary>
            Handles a drag over event before the default handler.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.DragEventArgs"/> describing the drag operation.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PostprocessDragOver(System.Windows.DragEventArgs)">
            <summary>
            Handles a drag over event after the default handler.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.DragEventArgs"/> describing the drag operation.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PreprocessDragEnter(System.Windows.DragEventArgs)">
            <summary>
            Handles a drag enter event before the default handler.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.DragEventArgs"/> describing the drag operation.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PostprocessDragEnter(System.Windows.DragEventArgs)">
            <summary>
            Handles a drag enter event after the default handler.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.DragEventArgs"/> describing the drag operation.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PreprocessDrop(System.Windows.DragEventArgs)">
            <summary>
            Handles a drop event before the default handler.
            </summary>
            <param name="e">
            <see cref="T:System.Windows.DragEventArgs"/> describing the drag operation.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PostprocessDrop(System.Windows.DragEventArgs)">
            <summary>
            Handles a drop event after the default handler.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.DragEventArgs"/> describing the drag operation.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PreprocessQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
            <summary>
            Handles a QueryContinueDrag event before the default handler. 
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.DragEventArgs"/> describing the drag operation.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PostprocessQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
            <summary>
            Handles a QueryContinueDrag event after the default handler. 
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.DragEventArgs"/> describing the drag operation.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PreprocessGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
            <summary>
            Handles a GiveFeedback event before the default handler. 
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.DragEventArgs"/> describing the drag operation.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PostprocessGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
            <summary>
            Handles a GiveFeedback event after the default handler. 
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.DragEventArgs"/> describing the drag operation.
            </param>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IMouseProcessorProvider">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Editor.IMouseProcessor"/> for a <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/>.
            </summary>
            <remarks>This is a MEF component part, and should be exported with the following attribute:
            [Export(typeof(IMouseProcessorProvider))]
            Exporters must supply a NameAttribute, a ContentTypeAttribute, at least one TextViewRoleAttribute, and optionally an OrderAttribute.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessorProvider.GetAssociatedProcessor(Microsoft.VisualStudio.Text.Editor.IWpfTextView)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Editor.IMouseProcessor"/> for a <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/>.
            </summary>
            <param name="wpfTextView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/> for which to create the <see cref="T:Microsoft.VisualStudio.Text.Editor.IMouseProcessor"/>.</param>
            <returns>The created <see cref="T:Microsoft.VisualStudio.Text.Editor.IMouseProcessor"/>.
            The value may be null if this <see cref="T:Microsoft.VisualStudio.Text.Editor.IMouseProcessorProvider"/> does not wish to participate in the current context.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.KeyProcessor">
            <summary>
            Processes the keyboard input of the editor.
            </summary>
            <remarks>
            Export this functionality by using the <see cref="T:Microsoft.VisualStudio.Text.Editor.IKeyProcessorProvider"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.KeyProcessor.PreviewKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Handles the PreviewKeyDown event.
            </summary>
            <param name="args">
            A <see cref="T:System.Windows.Input.KeyEventArgs"/> describing the key event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.KeyProcessor.KeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Handles the KeyDown event.
            </summary>
            <param name="args">
            A <see cref="T:System.Windows.Input.KeyEventArgs"/> describing the key event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.KeyProcessor.PreviewKeyUp(System.Windows.Input.KeyEventArgs)">
            <summary>
            Handles the PreviewKeyUp event.
            </summary>
            <param name="args">
            A <see cref="T:System.Windows.Input.KeyEventArgs"/> describing the key event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.KeyProcessor.KeyUp(System.Windows.Input.KeyEventArgs)">
            <summary>
            Handles the KeyUp event.
            </summary>
            <param name="args">
            A <see cref="T:System.Windows.Input.KeyEventArgs"/> describing the key event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.KeyProcessor.PreviewTextInputStart(System.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Handles the PreviewTextInputStart event.
            </summary>
            <param name="args">
            A <see cref="T:System.Windows.Input.KeyEventArgs"/> describing the key event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.KeyProcessor.TextInputStart(System.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Handles the TextInputStart event.
            </summary>
            <param name="args">
            A <see cref="T:System.Windows.Input.KeyEventArgs"/> describing the key event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.KeyProcessor.PreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Handles the PreviewTextInput event.
            </summary>
            <param name="args">
            A <see cref="T:System.Windows.Input.KeyEventArgs"/> describing the key event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.KeyProcessor.TextInput(System.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Handles the TextInput event.
            </summary>
            <param name="args">
            A <see cref="T:System.Windows.Input.KeyEventArgs"/> describing the key event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.KeyProcessor.PreviewTextInputUpdate(System.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Handles the PreviewTextInputUpdate event.
            </summary>
            <param name="args">
            A <see cref="T:System.Windows.Input.KeyEventArgs"/> describing the key event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.KeyProcessor.TextInputUpdate(System.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Handles the TextInputUpdate event.
            </summary>
            <param name="args">
            A <see cref="T:System.Windows.Input.KeyEventArgs"/> describing the key event.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.KeyProcessor.IsInterestedInHandledEvents">
            <summary>
            Determines whether this processor should be called for events that have been handled by earlier <see cref="T:Microsoft.VisualStudio.Text.Editor.KeyProcessor"/> objects.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase">
            <summary>
            Provides a base implementation for mouse bindings, so that clients can
            override only the the methods they need.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PreprocessMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the mouse left button down event before the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PostprocessMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the mouse left button down event after the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PreprocessMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the mouse right button down event before the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PostprocessMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the mouse right button down event after the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PreprocessMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the mouse left button up event before the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PostprocessMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the mouse left button up event after the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PreprocessMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the mouse right button up event before the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PostprocessMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the mouse right button up event after the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PreprocessMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the mouse up event before the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PostprocessMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the mouse up event after the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PreprocessMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the mouse down event before the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PostprocessMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the mouse down event after the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PreprocessMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Handles the mouse move event before the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PostprocessMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Handles the mouse move event after the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PreprocessMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
            <summary>
            Handles the mouse wheel event before the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PostprocessMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
            <summary>
            Handles the mouse wheel event after the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PreprocessMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Handles the mouse enter event before the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PostprocessMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Handles the mouse enter event after the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PreprocessMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Handles the mouse leave event before the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PostprocessMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Handles the mouse leave event after the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PreprocessDragLeave(System.Windows.DragEventArgs)">
            <summary>
            Handles the drag leave event before the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PostprocessDragLeave(System.Windows.DragEventArgs)">
            <summary>
            Handles the drag leave event after the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PreprocessDragOver(System.Windows.DragEventArgs)">
            <summary>
            Handles the drag over event before the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PostprocessDragOver(System.Windows.DragEventArgs)">
            <summary>
            Handles the drag over event after the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PreprocessDragEnter(System.Windows.DragEventArgs)">
            <summary>
            Handles the drag enter event before the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PostprocessDragEnter(System.Windows.DragEventArgs)">
            <summary>
            Handles the drag enter event after the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PreprocessDrop(System.Windows.DragEventArgs)">
            <summary>
            Handles the drop event before the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PostprocessDrop(System.Windows.DragEventArgs)">
            <summary>
            Handles the drop event after the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PreprocessQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
            <summary>
            Handles the query continue drag event before the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PostprocessQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
            <summary>
            Handles the query continue drag event after the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PreprocessGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
            <summary>
            Handles the feedback event before the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PostprocessGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
            <summary>
            Handles the feedback event after the default handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.IRtfBuilderService">
            <summary>
            Generates RTF-formatted text from a collection of snapshot spans.
            </summary>
            <remarks>
            This is a MEF component part and should be imported using the following attribute:
            [Import(typeof(IRtfBuilderService))] 
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.IRtfBuilderService.GenerateRtf(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,System.String)">
            <summary>
            Gets an RTF string containing the formatted text of the snapshot spans.
            </summary>
            <remarks>
            The generated RTF text is based on an in-order walk of the snapshot spans.
            </remarks>
            <param name="spans">
            The collection of snapshot spans.
            </param>
            <param name="delimiter">
            A delimiter string to be inserted between the RTF generated code for the <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/>s in the <see cref="T:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection"/>.
            </param>
            <returns>
            A <see cref="T:System.String"/> containing RTF data.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.IRtfBuilderService.GenerateRtf(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection)">
            <summary>
            Gets an RTF string containing the formatted text of the snapshot spans.
            </summary>
            <remarks>
            The generated RTF text is based on an in-order walk of the snapshot spans. A new line "\par" rtf keyword will be placed between the provided
            <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/>s.
            </remarks>
            <param name="spans">
            The collection of snapshot spans.
            </param>
            <returns>
            A <see cref="T:System.String"/> containing RTF data.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.IRtfBuilderService.GenerateRtf(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,Microsoft.VisualStudio.Text.Editor.ITextView,System.String)">
            <summary>
            Gets an RTF string that contains the formatted text of the spans.
            </summary>
            <remarks>
            The generated RTF text is based on an in-order walk of the snapshot spans, 
            with the characteristics and formatting properties of <paramref name="textView"/>.
            All the snapshot spans must belong to <paramref name="textView"/>.
            </remarks>
            <param name="spans">
            The collection of snapshot spans.
            </param>
            <param name="textView">
            The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> that contains the snapshot spans.
            </param>
            <param name="delimiter">
            A delimiter string to be inserted between the RTF generated code for the <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/>s in the <see cref="T:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection"/>.
            </param>
            <returns>
            A <see cref="T:System.String"/> containing RTF data.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.IRtfBuilderService.GenerateRtf(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Gets an RTF string that contains the formatted text of the spans.
            </summary>
            <remarks>
            The generated RTF text is based on an in-order walk of the snapshot spans, 
            with the characteristics and formatting properties of <paramref name="textView"/>.
            All the snapshot spans must belong to <paramref name="textView"/>. A new line "\par" rtf keyword will be 
            placed between the provided <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/>s.
            </remarks>
            <param name="spans">
            The collection of snapshot spans.
            </param>
            <param name="textView">
            The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> that contains the snapshot spans.
            </param>
            <returns>
            A <see cref="T:System.String"/> containing RTF data.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ZoomControl">
            <summary>
            Represents zoom control in the text view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.ZoomControl.SelectedZoomLevelProperty">
            <summary>
            A <see cref="T:System.Windows.DependencyProperty"/> that determines the selected zoom level property of the control
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ZoomControl.SetSelectedZoomLevel(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets <see cref="F:Microsoft.VisualStudio.Text.Editor.ZoomControl.SelectedZoomLevelProperty"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ZoomControl.GetSelectedZoomLevel(System.Windows.DependencyObject)">
            <summary>
            Gets <see cref="F:Microsoft.VisualStudio.Text.Editor.ZoomControl.SelectedZoomLevelProperty"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ZoomControl.SelectedZoomLevel">
            <summary>
            Gets or Sets <see cref="F:Microsoft.VisualStudio.Text.Editor.ZoomControl.SelectedZoomLevelProperty"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ZoomLevelConverter">
            <summary>
            Value converter that allows convertion between <see cref="T:System.String"/> and <see cref="T:System.Double"/> representations 
            of the zoom level.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ZoomLevelConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the value from <see cref="T:System.Double"/> to its <see cref="T:System.String"/> representation.
            </summary>
            <param name="value">The zoom level as <see cref="T:System.Double"/></param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>The <see cref="T:System.String"/> representation of the zoom level. Returns <see cref="F:System.Windows.DependencyProperty.UnsetValue"/> if the conversion fails.</returns>
            <remarks>
            The zoom level is represented as a number %. This converter takes in a double value and formats it with a % symbol.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ZoomLevelConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the value from its <see cref="T:System.String"/> representation to its <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The zoom level as <see cref="T:System.String"/>.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>The <see cref="T:System.Double"/> value of the zoom level. Returns <see cref="F:System.Windows.DependencyProperty.UnsetValue"/> if the conversion fails. </returns>
            <remarks>
            The zoom level is represented as a number %. This converter takes in the string representation and converts it 
            to its double value.
            </remarks>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\VisualStudio\VS10RTM\VisualStudioIntegration\Common\Assemblies\v4.0\Microsoft.VisualStudio.Shell.10.0.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.VisualStudio.Shell.10.0</name>
  </assembly>
  <members>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.BuiltInPropertyValue"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.BuiltInPropertyValue.#ctor(System.Object)">
      <param name="value"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.BuiltInPropertyValue.CreateDispatchValue(System.Object)">
      <param name="value"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.BuiltInPropertyValue.CreateEmptyValue(System.String)">
      <summary>Create empty value of the specified type, to be used with fallback properties</summary>
      <param name="type"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.BuiltInPropertyValue.CreateUnknownValue(System.Object)">
      <param name="value"></param>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.BuiltInPropertyValue.Format"></member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.CommandHandler"></member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.ComUtilities"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ComUtilities.EnumerableFrom(Microsoft.VisualStudio.Shell.Interop.IVsUIEnumDataSourceProperties)">
      <param name="enumerator"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ComUtilities.EnumerableFrom(Microsoft.VisualStudio.Shell.Interop.IVsUIEnumDataSourceVerbs)">
      <param name="enumerator"></param>
    </member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.CookieTable`3">
      <typeparam name="TCookie"></typeparam>
      <typeparam name="TCookieTraits"></typeparam>
      <typeparam name="TValue"></typeparam>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.CookieTable`3.#ctor">
      <summary>Constructor, initialize the current cookie</summary>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.CookieTable`3.Clear">
      <summary>Removes all elements in the cookie table</summary>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.CookieTable`3.ForEach(Microsoft.Internal.VisualStudio.PlatformUI.CookieTableCallback{`0,`2})">
      <summary>Execute the specified callback for each of the remaining elements in the cookie table</summary>
      <param name="callback">The callback function to call for each iterated element</param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.CookieTable`3.ForEach(Microsoft.Internal.VisualStudio.PlatformUI.CookieTableCallback{`0,`2},System.Boolean)">
      <summary>Execute the specified callback for each of the elements in the cookie table, allows to call back even for elements that are removed during the iteration</summary>
      <param name="callback">The callback function to call for each iterated element</param>
      <param name="skipRemoved">Whether the callback should be called or not for elemens removed during the iteration</param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.CookieTable`3.Insert(`2)">
      <summary>Insert a new element in the cookie table</summary>
      <param name="value">The new element to insert</param>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.CookieTable`3.IsLocked">
      <summary>Returns whether the table is currently locked for pending modifications</summary>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.CookieTable`3.Lock">
      <summary>Lock the table so subsequent insert/remove operations won't affect iterators</summary>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.CookieTable`3.MaxSize">
      <summary>Returns the maximum size of the cookie table, as given by the cookie traits</summary>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.CookieTable`3.PendingSize">
      <summary>Returns the size of the coookie table, including pending modifications</summary>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.CookieTable`3.Remove(`0)">
      <summary>Remove the value identified by the specified cookie from the table</summary>
      <param name="cookie">Cookie to remove</param>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.CookieTable`3.Size">
      <summary>Returns the size of the cookie table (if locked, return the size at the time the table was locked)</summary>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.CookieTable`3.TryGetValue(`0,`2@)">
      <summary>Checks whether the specified cookie is still in the table and returns the associated value</summary>
      <param name="cookie">cookie to search</param>
      <param name="value">found value</param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.CookieTable`3.Unlock">
      <summary>Unlock the table. When the lock count goes to zero, perform all pending insert/remove/clear operations</summary>
    </member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.CookieTableCallback`2">
      <typeparam name="TCookie"></typeparam>
      <typeparam name="TValue"></typeparam>
    </member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.CookieTraits`1">
      <summary>This class defines the default type, range for cookies handed out by CCookieTable.</summary>
      <typeparam name="T">Cookie type</typeparam>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.CookieTraits`1.#ctor(`0,`0,`0)">
      <param name="min"></param>
      <param name="max"></param>
      <param name="invalid"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.CookieTraits`1.GetNextCookie(`0)">
      <param name="current"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.CookieTraits`1.IncrementValue(`0)">
      <param name="current"></param>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.CookieTraits`1.InvalidCookie"></member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.CookieTraits`1.MaxCookie"></member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.CookieTraits`1.MinCookie"></member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.CookieTraits`1.UniqueCookies"></member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.DataSource"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.#ctor(Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource)">
      <param name="uiDataSource"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.#ctor(Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource,Microsoft.Internal.VisualStudio.PlatformUI.DataSourceParameters)">
      <param name="uiDataSource"></param>
      <param name="parameters"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.AdvisePropertyChangeEvents(Microsoft.VisualStudio.Shell.Interop.IVsUIDataSourcePropertyChangeEvents,System.UInt32@)">
      <param name="pAdvise"></param>
      <param name="pCookie"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.Close"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:Microsoft.Internal.VisualStudio.PlatformUI.DataSource" /> class.</summary>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.Dispose(System.Boolean)">
      <param name="disposing"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.EnumProperties(Microsoft.VisualStudio.Shell.Interop.IVsUIEnumDataSourceProperties@)">
      <param name="ppEnum"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.EnumVerbs(Microsoft.VisualStudio.Shell.Interop.IVsUIEnumDataSourceVerbs@)">
      <param name="ppEnum"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.Equals(System.Object)">
      <param name="obj"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.Finalize"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.GetHashCode"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.GetShapeIdentifier(System.Guid@,System.UInt32@)">
      <param name="guid"></param>
      <param name="dw"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.GetValue(System.String)">
      <param name="name"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.GetValue(System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIObject@)">
      <param name="prop"></param>
      <param name="ppValue"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.Invoke(System.String,System.Object)">
      <param name="verbName"></param>
      <param name="parameter"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.Invoke(System.String,System.Object,System.Object@)">
      <param name="verb"></param>
      <param name="pvaIn"></param>
      <param name="pvaOut"></param>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.IsDisposed"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.Microsoft#Internal#VisualStudio#PlatformUI#IUIDataSource#GetValue(System.String)">
      <param name="name"></param>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.Microsoft#Internal#VisualStudio#PlatformUI#IUIDataSource#Item(System.String)">
      <param name="name"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.Microsoft#Internal#VisualStudio#PlatformUI#IUIDataSource#SetValue(System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIObject)">
      <param name="name"></param>
      <param name="value"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.Microsoft#VisualStudio#Shell#Interop#IVsUIDataSource#SetValue(System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIObject)">
      <param name="prop"></param>
      <param name="pValue"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.op_Equality(Microsoft.Internal.VisualStudio.PlatformUI.DataSource,Microsoft.Internal.VisualStudio.PlatformUI.DataSource)">
      <param name="left"></param>
      <param name="right"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.op_Equality(Microsoft.Internal.VisualStudio.PlatformUI.DataSource,Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource)">
      <param name="left"></param>
      <param name="right"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.op_Equality(Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource,Microsoft.Internal.VisualStudio.PlatformUI.DataSource)">
      <param name="left"></param>
      <param name="right"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.op_Inequality(Microsoft.Internal.VisualStudio.PlatformUI.DataSource,Microsoft.Internal.VisualStudio.PlatformUI.DataSource)">
      <param name="left"></param>
      <param name="right"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.op_Inequality(Microsoft.Internal.VisualStudio.PlatformUI.DataSource,Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource)">
      <param name="left"></param>
      <param name="right"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.op_Inequality(Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource,Microsoft.Internal.VisualStudio.PlatformUI.DataSource)">
      <param name="left"></param>
      <param name="right"></param>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.Properties"></member>
    <member name="E:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.PropertyChanged"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.QueryValue(System.String,System.String[],System.UInt32[],System.Object[])">
      <param name="prop"></param>
      <param name="pTypeName"></param>
      <param name="pDataFormat"></param>
      <param name="pValue"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.ResetValue(System.String)">
      <param name="prop"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.SetValue(System.String,System.Object)">
      <param name="name"></param>
      <param name="value"></param>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.ShapeIdentifier"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.System#ComponentModel#ICustomTypeDescriptor#GetAttributes"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.System#ComponentModel#ICustomTypeDescriptor#GetClassName"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.System#ComponentModel#ICustomTypeDescriptor#GetComponentName"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.System#ComponentModel#ICustomTypeDescriptor#GetConverter"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.System#ComponentModel#ICustomTypeDescriptor#GetDefaultEvent"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.System#ComponentModel#ICustomTypeDescriptor#GetDefaultProperty"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.System#ComponentModel#ICustomTypeDescriptor#GetEditor(System.Type)">
      <param name="editorBaseType"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.System#ComponentModel#ICustomTypeDescriptor#GetEvents"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.System#ComponentModel#ICustomTypeDescriptor#GetEvents(System.Attribute[])">
      <param name="attributes"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.System#ComponentModel#ICustomTypeDescriptor#GetProperties"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])">
      <param name="attributes"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.System#ComponentModel#ICustomTypeDescriptor#GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <param name="pd"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.UnadvisePropertyChangeEvents(System.UInt32)">
      <param name="cookie"></param>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.Verbs"></member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.Add(Microsoft.Internal.VisualStudio.PlatformUI.IDataSource)">
      <param name="item"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.AdviseCollectionChangeEvents(Microsoft.VisualStudio.Shell.Interop.IVsUICollectionChangeEvents,System.UInt32@)">
      <param name="pAdvise"></param>
      <param name="pCookie"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.Clear"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.Close"></member>
    <member name="E:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.CollectionChanged"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.Contains(Microsoft.Internal.VisualStudio.PlatformUI.IDataSource)">
      <param name="item"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.CopyTo(Microsoft.Internal.VisualStudio.PlatformUI.IDataSource[],System.Int32)">
      <param name="array"></param>
      <param name="arrayIndex"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.CopyTo(System.Array,System.Int32)">
      <param name="array"></param>
      <param name="index"></param>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.Count"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.CreateInstance(Microsoft.VisualStudio.Shell.Interop.IVsUICollection)">
      <summary>Creates an instance of a DataSourceCollection. The DataSourceCollection will be read-only if <paramref name="uiCollection" /> cannot be converted to IVsUIDynamicCollection.</summary>
      <param name="uiCollection">Gel collection to wrap.</param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.CreateInstance(Microsoft.VisualStudio.Shell.Interop.IVsUICollection,Microsoft.Internal.VisualStudio.PlatformUI.DataSourceParameters)">
      <summary>Creates an instance of a DataSourceCollection using the given DataSourceParametrs. The DataSourceCollection will be read-only if <paramref name="uiCollection" /> cannot be converted to IVsUIDynamicCollection.</summary>
      <param name="uiCollection">Gel collection to wrap.</param>
      <param name="parameters">Parameters governing the wrapper's behavior.</param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.CreateReadOnlyInstance(Microsoft.VisualStudio.Shell.Interop.IVsUICollection)">
      <summary>Creates an instance of a DataSourceCollection. The DataSourceCollection will be read-only regardless of whether <paramref name="uiCollection" /> can be converted to IVsUIDynamicCollection.</summary>
      <param name="uiCollection">Gel collection to wrap.</param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.CreateReadOnlyInstance(Microsoft.VisualStudio.Shell.Interop.IVsUICollection,Microsoft.Internal.VisualStudio.PlatformUI.DataSourceParameters)">
      <summary>Creates an instance of a DataSourceCollection using the given DataSourceParameters. The DataSourceCollection will be read-only regardless of whether <paramref name="uiCollection" /> can be converted to IVsUIDynamicCollection.</summary>
      <param name="uiCollection">Gel collection to wrap.</param>
      <param name="parameters">Parameters governing the wrapper's behavior.</param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection" /> class.</summary>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.Dispose(System.Boolean)">
      <summary>Standard virtual overload for <see cref="T:System.IDisposable" /> pattern</summary>
      <param name="disposing">True means this is a call to <see cref="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.Dispose" />. False means it has been called from the finalizer.</param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.EnumVerbs(Microsoft.VisualStudio.Shell.Interop.IVsUIEnumDataSourceVerbs@)">
      <param name="ppEnum"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.Equals(System.Object)">
      <param name="obj"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.Finalize"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.get_Count(System.UInt32@)">
      <param name="pnCount"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.GetEnumerator"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.GetHashCode"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.GetItem(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource@)">
      <param name="nItem"></param>
      <param name="pVsUIDataSource"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.IndexOf(Microsoft.Internal.VisualStudio.PlatformUI.IDataSource)">
      <param name="item"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.Insert(System.Int32,Microsoft.Internal.VisualStudio.PlatformUI.IDataSource)">
      <param name="index"></param>
      <param name="item"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.Invoke(System.String,System.Object)">
      <param name="verbName"></param>
      <param name="parameter"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.Invoke(System.String,System.Object,System.Object@)">
      <param name="verb"></param>
      <param name="pvaIn"></param>
      <param name="pvaOut"></param>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.IsDisposed">
      <summary>Returns whether the object has been disposed once</summary>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.IsReadOnly"></member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.IsSynchronized"></member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.Item(System.Int32)">
      <param name="index"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.op_Equality(Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection,Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection)">
      <summary>Equality operators that give "left == right" the same semantics as "left.Equals (right)"</summary>
      <param name="left"></param>
      <param name="right"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.op_Equality(Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection,Microsoft.VisualStudio.Shell.Interop.IVsUICollection)">
      <param name="left"></param>
      <param name="right"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.op_Equality(Microsoft.VisualStudio.Shell.Interop.IVsUICollection,Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection)">
      <param name="left"></param>
      <param name="right"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.op_Inequality(Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection,Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection)">
      <summary>Inequality operators that give "left != right" the same semantics as "!left.Equals (right)"</summary>
      <param name="left"></param>
      <param name="right"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.op_Inequality(Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection,Microsoft.VisualStudio.Shell.Interop.IVsUICollection)">
      <param name="left"></param>
      <param name="right"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.op_Inequality(Microsoft.VisualStudio.Shell.Interop.IVsUICollection,Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection)">
      <param name="left"></param>
      <param name="right"></param>
    </member>
    <member name="E:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.PropertyChanged"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.Remove(Microsoft.Internal.VisualStudio.PlatformUI.IDataSource)">
      <param name="item"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.Remove(System.Object)">
      <param name="value"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.RemoveAt(System.Int32)">
      <param name="index"></param>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.SyncRoot"></member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.System#Collections#ICollection#Count"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.System#Collections#IEnumerable#GetEnumerator"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.System#Collections#IList#Add(System.Object)">
      <param name="value"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.System#Collections#IList#Contains(System.Object)">
      <param name="value"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.System#Collections#IList#IndexOf(System.Object)">
      <param name="value"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <param name="index"></param>
      <param name="value"></param>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.System#Collections#IList#IsFixedSize"></member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.System#Collections#IList#Item(System.Int32)">
      <param name="index"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.UnadviseCollectionChangeEvents(System.UInt32)">
      <param name="cookie"></param>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.Verbs"></member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceFactory"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceFactory.#ctor(System.IServiceProvider)">
      <param name="serviceProvider"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceFactory.GetDataSource(System.Guid@,System.UInt32)">
      <summary>Get a UI Data Source for the specified Data Source factory guid and data source ID. Override in your derived factory class</summary>
      <param name="factory"></param>
      <param name="dataSourceId"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceFactory.GetDataSource(System.Guid@,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource@)">
      <param name="factory"></param>
      <param name="dataSourceId"></param>
      <param name="ppDataSource"></param>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceFactory.ServiceProvider"></member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceParameters"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceParameters.#ctor"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceParameters.#ctor(System.Boolean)">
      <param name="isPropertyAccessSynchronized"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceParameters.#ctor(System.IServiceProvider)">
      <param name="serviceProvider"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceParameters.#ctor(System.Windows.FrameworkElement)">
      <param name="visualElement"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceParameters.#ctor(System.Windows.FrameworkElement,System.IServiceProvider)">
      <param name="visualElement"></param>
      <param name="serviceProvider"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceParameters.#ctor(System.Windows.FrameworkElement,System.IServiceProvider,System.Boolean)">
      <param name="visualElement"></param>
      <param name="serviceProvider"></param>
      <param name="isPropertyAccessSynchronized"></param>
    </member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.DialogResult">
      <summary>Dialog result values. These match Windows buttons IDs (IDOK, IDCANCEL, etc.) In addition we define the result for failure to display the dialog. WPF dialogs return OK/Cancel for the boolean value result of ShowDialog() call, and Fail if the dialog does not have return value yet.</summary>
    </member>
    <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.DialogResult.Abort"></member>
    <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.DialogResult.Cancel"></member>
    <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.DialogResult.Close"></member>
    <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.DialogResult.Continue"></member>
    <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.DialogResult.Fail"></member>
    <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.DialogResult.Help"></member>
    <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.DialogResult.Ignore"></member>
    <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.DialogResult.No"></member>
    <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.DialogResult.OK"></member>
    <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.DialogResult.Retry"></member>
    <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.DialogResult.TryAgain"></member>
    <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.DialogResult.Yes"></member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.EnumerablePropertiesCollection">
      <summary>IEnumerable wrapper for IVsUIEnumDataSourceProperties</summary>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.EnumerablePropertiesCollection.#ctor(Microsoft.VisualStudio.Shell.Interop.IVsUIEnumDataSourceProperties)">
      <param name="enumerator"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.EnumerablePropertiesCollection.Clone(Microsoft.VisualStudio.Shell.Interop.IVsUIEnumDataSourceProperties,Microsoft.VisualStudio.Shell.Interop.IVsUIEnumDataSourceProperties@)">
      <param name="enumerator"></param>
      <param name="clone"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.EnumerablePropertiesCollection.NextItems(Microsoft.VisualStudio.Shell.Interop.IVsUIEnumDataSourceProperties,System.UInt32,Microsoft.VisualStudio.Shell.Interop.VsUIPropertyDescriptor[],System.UInt32@)">
      <param name="enumerator"></param>
      <param name="count"></param>
      <param name="items"></param>
      <param name="fetched"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.EnumerablePropertiesCollection.Reset(Microsoft.VisualStudio.Shell.Interop.IVsUIEnumDataSourceProperties)">
      <param name="enumerator"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.EnumerablePropertiesCollection.Skip(Microsoft.VisualStudio.Shell.Interop.IVsUIEnumDataSourceProperties,System.UInt32)">
      <param name="enumerator"></param>
      <param name="count"></param>
    </member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.EnumerableVerbsCollection">
      <summary>IEnumerable wrapper for IVsUIEnumDataSourceVerbs</summary>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.EnumerableVerbsCollection.#ctor(Microsoft.VisualStudio.Shell.Interop.IVsUIEnumDataSourceVerbs)">
      <param name="enumerator"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.EnumerableVerbsCollection.Clone(Microsoft.VisualStudio.Shell.Interop.IVsUIEnumDataSourceVerbs,Microsoft.VisualStudio.Shell.Interop.IVsUIEnumDataSourceVerbs@)">
      <param name="enumerator"></param>
      <param name="clone"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.EnumerableVerbsCollection.NextItems(Microsoft.VisualStudio.Shell.Interop.IVsUIEnumDataSourceVerbs,System.UInt32,System.String[],System.UInt32@)">
      <param name="enumerator"></param>
      <param name="count"></param>
      <param name="items"></param>
      <param name="fetched"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.EnumerableVerbsCollection.Reset(Microsoft.VisualStudio.Shell.Interop.IVsUIEnumDataSourceVerbs)">
      <param name="enumerator"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.EnumerableVerbsCollection.Skip(Microsoft.VisualStudio.Shell.Interop.IVsUIEnumDataSourceVerbs,System.UInt32)">
      <param name="enumerator"></param>
      <param name="count"></param>
    </member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.GetterThunk`1">
      <typeparam name="T"></typeparam>
    </member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.IDataSource"></member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.IDataSourceCollection"></member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.IndirectPropertyValue`1">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.IndirectPropertyValue`1.#ctor(Microsoft.Internal.VisualStudio.PlatformUI.GetterThunk{`0},System.String,System.UInt32)">
      <param name="getterThunk"></param>
      <param name="type"></param>
      <param name="dataFormat"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.IndirectPropertyValue`1.#ctor(Microsoft.Internal.VisualStudio.PlatformUI.ParameterizedGetterThunk{`0},System.Object,System.String,System.UInt32)">
      <param name="parameterizedGetterThunk"></param>
      <param name="parameter"></param>
      <param name="type"></param>
      <param name="dataFormat"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.IndirectPropertyValue`1.Equals(Microsoft.VisualStudio.Shell.Interop.IVsUIObject,System.Boolean@)">
      <param name="pOtherObject"></param>
      <param name="pfAreEqual"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.IndirectPropertyValue`1.Equals(System.Object)">
      <summary>Override the Equals operator to compare the values instead of object reference if the parameter is also an IVsUIObject</summary>
      <param name="obj"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.IndirectPropertyValue`1.get_Data(System.Object@)">
      <param name="pVar"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.IndirectPropertyValue`1.get_Format(System.UInt32@)">
      <param name="pdwDataFormat"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.IndirectPropertyValue`1.get_Type(System.String@)">
      <param name="pTypeName"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.IndirectPropertyValue`1.GetHashCode">
      <summary>Need to override this if we override Equals</summary>
    </member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.IntCookieTraits"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.IntCookieTraits.#ctor(System.Int32,System.Int32,System.Int32)">
      <param name="min"></param>
      <param name="max"></param>
      <param name="invalid"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.IntCookieTraits.IncrementValue(System.Int32)">
      <param name="current"></param>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.IntCookieTraits.UniqueCookies"></member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.IPropertyDescription"></member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.IPropertyDescription.Name"></member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.IPropertyDescription.Type"></member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.IUIDataSource"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.IUIDataSource.GetValue(System.String)">
      <param name="name"></param>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.IUIDataSource.Item(System.String)">
      <param name="name"></param>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.IUIDataSource.Properties"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.IUIDataSource.SetValue(System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIObject)">
      <param name="name"></param>
      <param name="value"></param>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.IUIDataSource.ShapeIdentifier"></member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.IUIDispatch"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.IUIDispatch.Invoke(System.String,System.Object)">
      <param name="verbName"></param>
      <param name="parameter"></param>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.IUIDispatch.Verbs"></member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.IVerbDescription"></member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.IVerbDescription.Name"></member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.ParameterizedGetterThunk`1">
      <typeparam name="T"></typeparam>
    </member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.PropertyDescription"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.PropertyDescription.#ctor(System.String,System.String)">
      <param name="name"></param>
      <param name="type"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.PropertyDescription.IsBuiltInUIType(System.String)">
      <param name="typeName"></param>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.PropertyDescription.Name"></member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.PropertyDescription.Type"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.PropertyDescription.TypeFromVsUIType(System.String)">
      <param name="typeName"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.PropertyDescription.VsUITypeFromType(System.Type)">
      <param name="type"></param>
    </member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.PropertyValueBase"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.PropertyValueBase.#ctor(System.Object)">
      <summary>Default constructor</summary>
      <param name="value">Object to store in the property. The type is deduced on first access.</param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.PropertyValueBase.#ctor(System.Object,System.String)">
      <summary>Construct given an explicit type.</summary>
      <param name="value">Object to store in the property.</param>
      <param name="type">UI Type of the object.</param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.PropertyValueBase.Equals(Microsoft.VisualStudio.Shell.Interop.IVsUIObject,System.Boolean@)">
      <summary>General purpose equality test for IVsUIObjects</summary>
      <param name="pOtherObject">The rhs of the comparison</param>
      <param name="pfAreEqual">true iff equal</param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.PropertyValueBase.Equals(System.Object)">
      <summary>Override the Equals operator to compare the values instead of object reference if the parameter is also an IVsUIObject</summary>
      <param name="obj"></param>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.PropertyValueBase.Format">
      <summary>Derived classed must supply this property</summary>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.PropertyValueBase.get_Data(System.Object@)">
      <param name="pVar"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.PropertyValueBase.get_Format(System.UInt32@)">
      <param name="pdwDataFormat"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.PropertyValueBase.get_Type(System.String@)">
      <param name="pTypeName"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.PropertyValueBase.GetHashCode">
      <summary>Need to override this if we override Equals</summary>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.PropertyValueBase.TypeName"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.PropertyValueBase.TypeNameFromValue(System.Object)">
      <summary>Derived classes implement this to supply type string mapping</summary>
      <param name="value"></param>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.PropertyValueBase.Value">
      <summary>The contained value</summary>
    </member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.ProvideUIDataConverterAttribute">
      <summary>This attribute registers a data converter (IVsUIDataConverter implementer) for custom properties.</summary>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ProvideUIDataConverterAttribute.#ctor(System.String,System.String,System.String,System.String)">
      <summary>Declares the data converter parameters: the converted type, the converter's name, ID and the package implementing the converter</summary>
      <param name="convertedType"></param>
      <param name="converterName"></param>
      <param name="converterGuid"></param>
      <param name="converterPackage"></param>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.ProvideUIDataConverterAttribute.ConvertedType">
      <summary>Get the type of the IVsUIObjects that can be converted with this converter</summary>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.ProvideUIDataConverterAttribute.ConverterGuid">
      <summary>Get the unique guid identifying the UI data converter</summary>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.ProvideUIDataConverterAttribute.ConverterName">
      <summary>Get the friendly name of the UI data converter (written in registry)</summary>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.ProvideUIDataConverterAttribute.ConverterPackage">
      <summary>Get the guid of the package implementing the UI data converter</summary>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ProvideUIDataConverterAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Called to register this attribute with the given context. The context contains the location where the registration information should be placed. It also contains other information such as the type being registered and path information.</summary>
      <param name="context"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ProvideUIDataConverterAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Unregister the data converter</summary>
      <param name="context"></param>
    </member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.ProvideUIDataSourceProviderAttribute">
      <summary>This attribute registers a UIDataSourceProvider (IVsDataSourceFactory implementer)</summary>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ProvideUIDataSourceProviderAttribute.#ctor(System.String,System.String,System.String)">
      <summary>Declares the Data Source provider (IVsDataSourceFactory implementer) parameters: ID, the provider's friendly name and the package implementing the provider</summary>
      <param name="providerGuid"></param>
      <param name="providerName"></param>
      <param name="providerPackage"></param>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.ProvideUIDataSourceProviderAttribute.ProviderGuid">
      <summary>Get the unique guid identifying the Data Source provider</summary>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.ProvideUIDataSourceProviderAttribute.ProviderName">
      <summary>Get the friendly name of the Data Source provider (written in registry)</summary>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.ProvideUIDataSourceProviderAttribute.ProviderPackage">
      <summary>Get the guid of the package implementing the Data Source provider</summary>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ProvideUIDataSourceProviderAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Called to register this attribute with the given context. The context contains the location where the registration information should be placed. It also contains other information such as the type being registered and path information.</summary>
      <param name="context"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ProvideUIDataSourceProviderAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Unregister the Data Source provider (IVsDataSourceFactory implementer)</summary>
      <param name="context"></param>
    </member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.ProvideUIProviderAttribute">
      <summary>This attribute registers an UIProvider (IVsUIFactory implementer)</summary>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ProvideUIProviderAttribute.#ctor(System.String,System.String,System.String)">
      <summary>Declares the UI provider (IVsUIFactory implementer) parameters: ID, the provider's friendly name and the package implementing the provider</summary>
      <param name="providerGuid"></param>
      <param name="providerName"></param>
      <param name="providerPackage"></param>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.ProvideUIProviderAttribute.ProviderGuid">
      <summary>Get the unique guid identifying the UI provider</summary>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.ProvideUIProviderAttribute.ProviderName">
      <summary>Get the friendly name of the UI provider (written in registry)</summary>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.ProvideUIProviderAttribute.ProviderPackage">
      <summary>Get the guid of the package implementing the UI provider</summary>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ProvideUIProviderAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Called to register this attribute with the given context. The context contains the location where the registration information should be placed. It also contains other information such as the type being registered and path information.</summary>
      <param name="context"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ProvideUIProviderAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Unregister the UI provider (IVsUIFactory implementer)</summary>
      <param name="context"></param>
    </member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.ShapeIdentifier">
      <summary>A {GUID:DWORD} pair</summary>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ShapeIdentifier.#ctor(Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource)">
      <param name="dataSource"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ShapeIdentifier.#ctor(System.Guid,System.UInt32)">
      <param name="value"></param>
      <param name="id"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ShapeIdentifier.CompareTo(Microsoft.Internal.VisualStudio.PlatformUI.ShapeIdentifier)">
      <param name="other"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ShapeIdentifier.CompareTo(System.Object)">
      <param name="obj"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ShapeIdentifier.Equals(Microsoft.Internal.VisualStudio.PlatformUI.ShapeIdentifier)">
      <param name="other"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ShapeIdentifier.Equals(System.Object)">
      <param name="obj"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ShapeIdentifier.GetHashCode"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ShapeIdentifier.op_Equality(Microsoft.Internal.VisualStudio.PlatformUI.ShapeIdentifier,Microsoft.Internal.VisualStudio.PlatformUI.ShapeIdentifier)">
      <param name="first"></param>
      <param name="second"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ShapeIdentifier.op_GreaterThan(Microsoft.Internal.VisualStudio.PlatformUI.ShapeIdentifier,Microsoft.Internal.VisualStudio.PlatformUI.ShapeIdentifier)">
      <param name="first"></param>
      <param name="second"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ShapeIdentifier.op_Inequality(Microsoft.Internal.VisualStudio.PlatformUI.ShapeIdentifier,Microsoft.Internal.VisualStudio.PlatformUI.ShapeIdentifier)">
      <param name="first"></param>
      <param name="second"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ShapeIdentifier.op_LessThan(Microsoft.Internal.VisualStudio.PlatformUI.ShapeIdentifier,Microsoft.Internal.VisualStudio.PlatformUI.ShapeIdentifier)">
      <param name="first"></param>
      <param name="second"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ShapeIdentifier.System#IEquatable{T}#Equals(Microsoft.Internal.VisualStudio.PlatformUI.ShapeIdentifier)">
      <param name="other"></param>
    </member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSource"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSource.#ctor"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSource.AddBuiltInProperty(System.String,System.Object)">
      <summary>Add a named property to the data source and initialize it with a value of the appropriate built-in type.</summary>
      <param name="name">Name of the new property</param>
      <param name="value">Initial value for the property</param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSource.AddDispatchProperty(System.String,System.Object)">
      <summary>Add a named property to the data source and set it as being of type VsUIType.Dispatch.</summary>
      <param name="name">Name of the new property</param>
      <param name="value">Initial value for the property</param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSource.AddIndirectProperty``1(System.String,System.String,Microsoft.Internal.VisualStudio.PlatformUI.GetterThunk{``0})">
      <summary>Add an IndirectProperty to the datasource.</summary>
      <param name="name">Name of the new property</param>
      <param name="type">Type of the new property</param>
      <param name="getterThunk">Method to actually return the property when asked</param>
      <typeparam name="T">Type returned from GetterThunk</typeparam>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSource.AddProperty(System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIObject)">
      <summary>Add a named property to the data source and initialize it with the given UIObject</summary>
      <param name="name">Name of the new property</param>
      <param name="initialValue">Initial value for the property</param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSource.AddUnknownProperty(System.String,System.Object)">
      <summary>Add a named property to the data source and set it as being of type VsUIType.Unknown.</summary>
      <param name="name">Name of the new property</param>
      <param name="value">Initial value for the property</param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSource.AdvisePropertyChangeEvents(Microsoft.VisualStudio.Shell.Interop.IVsUIDataSourcePropertyChangeEvents,System.UInt32@)">
      <param name="pAdvise"></param>
      <param name="pCookie"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSource.Close"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSource.EnumProperties(Microsoft.VisualStudio.Shell.Interop.IVsUIEnumDataSourceProperties@)">
      <param name="ppEnum"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSource.GetShapeIdentifier(System.Guid@,System.UInt32@)">
      <param name="guid"></param>
      <param name="dw"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSource.GetValue``1(System.String)">
      <summary>Type-friendly wrapper around the GetValue that returns IVsUIObject</summary>
      <param name="name">Property name</param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSource.GetValue(System.String)">
      <param name="name"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSource.GetValue(System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIObject@)">
      <param name="prop"></param>
      <param name="ppValue"></param>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSource.Item(System.String)">
      <param name="name"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSource.Microsoft#VisualStudio#Shell#Interop#IVsUIDataSource#SetValue(System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIObject)">
      <param name="prop"></param>
      <param name="newValue"></param>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSource.Properties"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSource.QueryValue(System.String,System.String[],System.UInt32[],System.Object[])">
      <param name="prop"></param>
      <param name="pTypeName"></param>
      <param name="pDataFormat"></param>
      <param name="pValue"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSource.ResetValue(System.String)">
      <param name="prop"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSource.SetValue(System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIObject)">
      <param name="name"></param>
      <param name="value"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSource.SetValue(System.String,System.Object)">
      <summary>Type-friendly wrapper around IVsUIDataSource.SetValue</summary>
      <param name="prop">Property name</param>
      <param name="newValue">New value for the property</param>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSource.ShapeIdentifier"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSource.UnadvisePropertyChangeEvents(System.UInt32)">
      <param name="cookie"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSource.ValidatePropertyValue(System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIObject)">
      <param name="name"></param>
      <param name="value"></param>
    </member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceCollection"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceCollection.#ctor"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceCollection.Add(Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource)">
      <param name="item"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceCollection.AddItem(Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource)">
      <param name="item"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceCollection.AdviseCollectionChangeEvents(Microsoft.VisualStudio.Shell.Interop.IVsUICollectionChangeEvents,System.UInt32@)">
      <param name="pAdvise"></param>
      <param name="pCookie"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceCollection.Clear"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceCollection.Close"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceCollection.Contains(Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource)">
      <param name="item"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceCollection.CopyTo(Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource[],System.Int32)">
      <param name="array"></param>
      <param name="arrayIndex"></param>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceCollection.Count"></member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceCollection.DataCollection"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceCollection.FireOnAfterItemAdded(System.UInt32)">
      <param name="itemIndex"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceCollection.FireOnAfterItemRemoved(Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource,System.UInt32)">
      <param name="removedItem"></param>
      <param name="itemIndex"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceCollection.FireOnAfterItemReplaced(Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource,Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource,System.UInt32)">
      <param name="newItem"></param>
      <param name="oldItem"></param>
      <param name="itemIndex"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceCollection.FireOnInvalidateAllItems"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceCollection.get_Count(System.UInt32@)">
      <param name="pnCount"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceCollection.GetEnumerator"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceCollection.GetItem(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource@)">
      <param name="nItem"></param>
      <param name="pVsUIDataSource"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceCollection.IndexOf(Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource)">
      <param name="item"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceCollection.Insert(System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource)">
      <param name="index"></param>
      <param name="item"></param>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceCollection.IsReadOnly"></member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceCollection.Item(System.Int32)">
      <param name="index"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceCollection.Remove(Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource)">
      <param name="item"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceCollection.RemoveAt(System.Int32)">
      <param name="index"></param>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceCollection.System#Collections#Generic#ICollection{T}#Count"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceCollection.System#Collections#IEnumerable#GetEnumerator"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceCollection.UnadviseCollectionChangeEvents(System.UInt32)">
      <param name="cookie"></param>
    </member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceDynamicCollection"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceDynamicCollection.#ctor"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceDynamicCollection.Add(Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource)">
      <param name="item"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceDynamicCollection.AddItem(Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource)">
      <param name="item"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceDynamicCollection.AddItem(Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource,System.UInt32@)">
      <summary>Adds a new data source item to the collection</summary>
      <param name="pItem">The item to be added</param>
      <param name="pIndex">The 0-based index of the item in the collection</param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceDynamicCollection.Clear"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceDynamicCollection.ClearItems"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceDynamicCollection.Close"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceDynamicCollection.Insert(System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource)">
      <param name="index"></param>
      <param name="item"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceDynamicCollection.InsertCollection(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsUICollection)">
      <param name="nIndex"></param>
      <param name="pCollection"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceDynamicCollection.InsertItem(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource)">
      <param name="nIndex"></param>
      <param name="pItem"></param>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceDynamicCollection.IsReadOnly"></member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceDynamicCollection.Item(System.Int32)">
      <param name="index"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceDynamicCollection.Remove(Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource)">
      <param name="item"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceDynamicCollection.RemoveAt(System.Int32)">
      <param name="index"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceDynamicCollection.RemoveItem(System.UInt32)">
      <param name="nIndex"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceDynamicCollection.ReplaceItem(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource)">
      <param name="nIndex"></param>
      <param name="pItem"></param>
    </member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceProperty"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceProperty.#ctor(System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIObject)">
      <param name="name"></param>
      <param name="initialValue"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceProperty.#ctor(System.String,System.String)">
      <param name="name"></param>
      <param name="type"></param>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceProperty.HasValue"></member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceProperty.Value"></member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourcePropertyEnumerator"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourcePropertyEnumerator.#ctor(System.Collections.Generic.ICollection{Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceProperty})">
      <param name="properties"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourcePropertyEnumerator.Clone(Microsoft.VisualStudio.Shell.Interop.IVsUIEnumDataSourceProperties@)">
      <param name="ppEnum"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourcePropertyEnumerator.Next(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VsUIPropertyDescriptor[],System.UInt32@)">
      <param name="celt"></param>
      <param name="rgelt"></param>
      <param name="pceltFetched"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourcePropertyEnumerator.Reset"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourcePropertyEnumerator.Skip(System.UInt32)">
      <param name="celt"></param>
    </member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceVerb"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceVerb.#ctor(System.String,Microsoft.Internal.VisualStudio.PlatformUI.CommandHandler)">
      <param name="name"></param>
      <param name="handler"></param>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceVerb.Handler"></member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceVerbEnumerator"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceVerbEnumerator.#ctor(System.Collections.Generic.ICollection{Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceVerb})">
      <param name="verbs"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceVerbEnumerator.Clone(Microsoft.VisualStudio.Shell.Interop.IVsUIEnumDataSourceVerbs@)">
      <param name="ppEnum"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceVerbEnumerator.Next(System.UInt32,System.String[],System.UInt32@)">
      <param name="celt"></param>
      <param name="rgelt"></param>
      <param name="pceltFetched"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceVerbEnumerator.Reset"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceVerbEnumerator.Skip(System.UInt32)">
      <param name="celt"></param>
    </member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.UIDispatch"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDispatch.#ctor"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDispatch.AddCommand(System.String,Microsoft.Internal.VisualStudio.PlatformUI.CommandHandler)">
      <param name="name"></param>
      <param name="handler"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDispatch.EnumVerbs(Microsoft.VisualStudio.Shell.Interop.IVsUIEnumDataSourceVerbs@)">
      <param name="ppEnum"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDispatch.Invoke(System.String,System.Object)">
      <param name="verbName"></param>
      <param name="parameter"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDispatch.Invoke(System.String,System.Object,System.Object@)">
      <param name="verbName"></param>
      <param name="pvaIn"></param>
      <param name="pvaOut"></param>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.UIDispatch.Verbs"></member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.UIElement">
      <summary>Implements the IVsUIElement interface. Also, any IVsUIElement is assumed to implement IObjectWithSite, too.</summary>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIElement.#ctor"></member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.UIElement.DataSource"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIElement.GetSite(System.Guid@,System.IntPtr@)">
      <param name="riid"></param>
      <param name="ppvSite"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIElement.GetUIObject(System.Object@)">
      <param name="ppUnk"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIElement.Microsoft#VisualStudio#Shell#Interop#IVsUIElement#get_DataSource(Microsoft.VisualStudio.Shell.Interop.IVsUISimpleDataSource@)">
      <param name="ppDataSource"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIElement.Microsoft#VisualStudio#Shell#Interop#IVsUIElement#put_DataSource(Microsoft.VisualStudio.Shell.Interop.IVsUISimpleDataSource)">
      <param name="pDataSource"></param>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.UIElement.ServiceProvider"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIElement.SetSite(System.Object)">
      <param name="pUnkSite"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIElement.TranslateAccelerator(Microsoft.VisualStudio.Shell.Interop.IVsUIAccelerator)">
      <param name="pAccel"></param>
    </member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.UIFactory"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIFactory.#ctor(System.IServiceProvider)">
      <param name="serviceProvider"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIFactory.CreateUIElement(System.Guid@,System.UInt32)">
      <summary>Create a UI Element for the specified UI factory guid and element ID. Override in your derived factory class</summary>
      <param name="factory"></param>
      <param name="elementId"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIFactory.CreateUIElement(System.Guid@,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsUIElement@)">
      <param name="factory"></param>
      <param name="elementId"></param>
      <param name="ppUIElement"></param>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.UIFactory.ServiceProvider"></member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.UIntCookieTraits"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIntCookieTraits.#ctor(System.UInt32,System.UInt32,System.UInt32)">
      <param name="min"></param>
      <param name="max"></param>
      <param name="invalid"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIntCookieTraits.IncrementValue(System.UInt32)">
      <param name="current"></param>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.UIntCookieTraits.UniqueCookies"></member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.UIObject">
      <summary>Simple wrapper class over an existing IVsUIObject,</summary>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIObject.#ctor(Microsoft.VisualStudio.Shell.Interop.IVsUIObject)">
      <param name="innerObject"></param>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.UIObject.Data"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIObject.Equals(Microsoft.VisualStudio.Shell.Interop.IVsUIObject,System.Boolean@)">
      <param name="pOtherObject"></param>
      <param name="pfAreEqual"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIObject.Equals(System.Object)">
      <param name="obj"></param>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.UIObject.Format"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIObject.GetHashCode"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIObject.Microsoft#VisualStudio#Shell#Interop#IVsUIObject#get_Data(System.Object@)">
      <param name="pVar"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIObject.Microsoft#VisualStudio#Shell#Interop#IVsUIObject#get_Format(System.UInt32@)">
      <param name="pdwDataFormat"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIObject.Microsoft#VisualStudio#Shell#Interop#IVsUIObject#get_Type(System.String@)">
      <param name="pTypeName"></param>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.UIObject.Type"></member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.UISimpleDataSource"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UISimpleDataSource.#ctor"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UISimpleDataSource.Close"></member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.Utilities"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Utilities.GetObjectData(Microsoft.VisualStudio.Shell.Interop.IVsUIObject)">
      <summary>Returns the data contained in an IVsUIObject</summary>
      <param name="obj">IVsUIObject whose data is to be retrieved</param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Utilities.GetObjectFormat(Microsoft.VisualStudio.Shell.Interop.IVsUIObject)">
      <summary>Extract the format from a UI object</summary>
      <param name="obj">The object</param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Utilities.GetObjectType(Microsoft.VisualStudio.Shell.Interop.IVsUIObject)">
      <summary>Extract the type string from a UI object</summary>
      <param name="obj">The object</param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Utilities.GetTypedValue``1(Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource,System.String)">
      <summary>Simple wrapper around GetValue that casts the resultant <see cref="T:System.Object" /> to .</summary>
      <param name="ds">Data source to query</param>
      <param name="prop">Property to be returned</param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Utilities.GetValue(Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource,System.String)">
      <summary>Returns the value of a data source's property as an object instead of an IVsUIObject</summary>
      <param name="ds">Data source to query</param>
      <param name="prop">Property to be returned</param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Utilities.QueryTypedValue``1(Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource,System.String)">
      <summary>Wrapper around QueryValue that casts the resultant <see cref="T:System.Object" /> to .</summary>
      <param name="ds">Data source to query</param>
      <param name="prop">Property to be returned</param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Utilities.QueryValue(Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource,System.String)">
      <summary>Returns the value of a data source's property as an object via QueryValue Note: Not all implementations implement QueryValue</summary>
      <param name="ds">Data source to query</param>
      <param name="prop">Property to query</param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Utilities.SetValue(Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIObject)">
      <summary>Sets the value of a data source's property.</summary>
      <param name="ds">Data source to query</param>
      <param name="prop">Property to be returned</param>
      <param name="value">New value for the property</param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Utilities.SetValue(Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource,System.String,System.Object)">
      <summary>Sets the value of a data source's property.</summary>
      <param name="ds">Data source to query</param>
      <param name="prop">Property to be returned</param>
      <param name="value">New value for the property</param>
    </member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.VerbDescription"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.VerbDescription.#ctor(System.String)">
      <param name="name"></param>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VerbDescription.Name"></member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.VsUIConstants"></member>
    <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.VsUIConstants.HelpTopicProperty">
      <summary>HelpTopic string used in data sources of VsUI dialogs to indicate the help topic displayed by dialog</summary>
    </member>
    <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.VsUIConstants.HelpVerb">
      <summary>Verb name used in data sources of VsUI dialogs to specify the callback that will display the help topic</summary>
    </member>
    <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.VsUIConstants.VsUICookieNil">
      <summary>Special value that may be used to initialize VsUI event handler cookie values</summary>
    </member>
    <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.VsUIConstants.WpfLoaderGuid">
      <summary>The guid of the IVsUIWpfLoader service that can be used to create IVsUIElement objects.</summary>
    </member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.VsUICookieTable`1">
      <summary>A cookie table using VSUICOOKIE values and traits</summary>
      <typeparam name="TValue">The type of elements to store in the cookie table</typeparam>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.VsUICookieTable`1.#ctor"></member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.VsUICookieTraits">
      <summary>Cookie traits using VSUICOOKIE-style value range</summary>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.VsUICookieTraits.#ctor"></member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.VsUIType"></member>
    <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.VsUIType.Bitmap"></member>
    <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.VsUIType.Bool"></member>
    <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.VsUIType.Byte"></member>
    <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.VsUIType.Char"></member>
    <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.VsUIType.Collection"></member>
    <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.VsUIType.Color"></member>
    <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.VsUIType.DataSource"></member>
    <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.VsUIType.DateTime"></member>
    <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.VsUIType.Decimal"></member>
    <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.VsUIType.Dispatch"></member>
    <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.VsUIType.Double"></member>
    <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.VsUIType.DWord"></member>
    <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.VsUIType.Icon"></member>
    <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.VsUIType.ImageList"></member>
    <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.VsUIType.Int16"></member>
    <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.VsUIType.Int32"></member>
    <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.VsUIType.Int64"></member>
    <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.VsUIType.QWord"></member>
    <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.VsUIType.Single"></member>
    <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.VsUIType.String"></member>
    <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.VsUIType.Unknown"></member>
    <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.VsUIType.Word"></member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.Win32BitmapHandle"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Win32BitmapHandle.#ctor(System.IntPtr,System.Boolean)">
      <param name="handle"></param>
      <param name="hasAlpha"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Win32BitmapHandle.BitmapContainsAlphaInfo(System.Boolean@)">
      <param name="hasAlpha"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Win32BitmapHandle.GetHBITMAP(System.Int32@)">
      <param name="phBitmap"></param>
    </member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.Win32BitmapUIObject">
      <summary>Managed implementation of wrapper IVsUIObject for HBITMAP</summary>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Win32BitmapUIObject.#ctor(System.IntPtr,System.Boolean)">
      <param name="handle"></param>
      <param name="hasAlpha"></param>
    </member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.Win32ColorUIObject">
      <summary>Managed implementation of wrapper IVsUIObject for Colors</summary>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Win32ColorUIObject.#ctor(System.UInt32)">
      <param name="colorref"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Win32ColorUIObject.Equals(Microsoft.VisualStudio.Shell.Interop.IVsUIObject,System.Boolean@)">
      <param name="pOtherObject"></param>
      <param name="pfAreEqual"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Win32ColorUIObject.get_Data(System.Object@)">
      <param name="pVar"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Win32ColorUIObject.get_Format(System.UInt32@)">
      <param name="pdwDataFormat"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Win32ColorUIObject.get_Type(System.String@)">
      <param name="pTypeName"></param>
    </member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.Win32HandleUIObject`1">
      <summary>Base class for IVsUIObject types that wrap Win32 handles</summary>
      <typeparam name="TData">The type returned from get_Data</typeparam>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Win32HandleUIObject`1.#ctor(`0,System.String)">
      <param name="data"></param>
      <param name="gelTypeName"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Win32HandleUIObject`1.Equals(Microsoft.VisualStudio.Shell.Interop.IVsUIObject,System.Boolean@)">
      <param name="pOtherObject"></param>
      <param name="equal"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Win32HandleUIObject`1.get_Data(System.Object@)">
      <param name="pVar"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Win32HandleUIObject`1.get_Format(System.UInt32@)">
      <param name="pdwDataFormat"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Win32HandleUIObject`1.get_Type(System.String@)">
      <param name="pTypeName"></param>
    </member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.Win32IconHandle"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Win32IconHandle.#ctor(System.IntPtr)">
      <param name="handle"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Win32IconHandle.GetHICON(System.Int32@)">
      <param name="phIcon"></param>
    </member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.Win32IconUIObject">
      <summary>Managed implementation of wrapper IVsUIObject for HICON</summary>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Win32IconUIObject.#ctor(System.IntPtr)">
      <param name="handle"></param>
    </member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.Win32ImageListUIObject">
      <summary>Managed implementation of wrapper IVsUIObject for HIMAGELIST</summary>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Win32ImageListUIObject.#ctor(System.IntPtr)">
      <param name="handle"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Win32ImageListUIObject.Equals(Microsoft.VisualStudio.Shell.Interop.IVsUIObject,System.Boolean@)">
      <param name="pOtherObject"></param>
      <param name="pfAreEqual"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Win32ImageListUIObject.get_Data(System.Object@)">
      <param name="pVar"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Win32ImageListUIObject.get_Format(System.UInt32@)">
      <param name="pdwDataFormat"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Win32ImageListUIObject.get_Type(System.String@)">
      <param name="pTypeName"></param>
    </member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.Win32ToWinFormsIconConverter">
      <summary>Conveter for Win32 HICON to System.Drawing.Icon wrapped in IWinFormsIconUIObject</summary>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Win32ToWinFormsIconConverter.#ctor"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Win32ToWinFormsIconConverter.Convert(Microsoft.VisualStudio.Shell.Interop.IVsUIObject,Microsoft.VisualStudio.Shell.Interop.IVsUIObject@)">
      <param name="pObject"></param>
      <param name="ppConvertedObject"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Win32ToWinFormsIconConverter.get_ConvertibleFormats(System.UInt32@,System.UInt32@)">
      <param name="pdwDataFormatFrom"></param>
      <param name="pdwDataFormatTo"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Win32ToWinFormsIconConverter.get_Type(System.String@)">
      <param name="pTypeName"></param>
    </member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.Win32ToWinFormsImageListConverter">
      <summary>Converts Win32 HIMAGELIST (Pointer) to System.Windows.Forms.ImageList containing System.Drawing.Icons</summary>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Win32ToWinFormsImageListConverter.#ctor"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Win32ToWinFormsImageListConverter.Convert(Microsoft.VisualStudio.Shell.Interop.IVsUIObject,Microsoft.VisualStudio.Shell.Interop.IVsUIObject@)">
      <param name="pObject"></param>
      <param name="ppConvertedObject"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Win32ToWinFormsImageListConverter.get_ConvertibleFormats(System.UInt32@,System.UInt32@)">
      <param name="pdwDataFormatFrom"></param>
      <param name="pdwDataFormatTo"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Win32ToWinFormsImageListConverter.get_Type(System.String@)">
      <param name="pTypeName"></param>
    </member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.Win32ToWpfBitmapConverter">
      <summary>Data converter class for converting Win32 IVsUIWin32Bitmap UI objects to WpfBitmapUIObject UI objects</summary>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Win32ToWpfBitmapConverter.#ctor"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Win32ToWpfBitmapConverter.Convert(Microsoft.VisualStudio.Shell.Interop.IVsUIObject,Microsoft.VisualStudio.Shell.Interop.IVsUIObject@)">
      <param name="pObject"></param>
      <param name="ppConvertedObject"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Win32ToWpfBitmapConverter.get_ConvertibleFormats(System.UInt32@,System.UInt32@)">
      <param name="pdwDataFormatFrom"></param>
      <param name="pdwDataFormatTo"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Win32ToWpfBitmapConverter.get_Type(System.String@)">
      <param name="pTypeName"></param>
    </member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.Win32ToWpfColorConverter">
      <summary>Data converter class for converting Win32 IVsUIWin32Color UI objects to WpfColorUIObject UI objects NOTE: In Win32, COLORREFs don't have transparency (even though they have space to store it) Converting color objects Win32-&gt;WPF will result in a solid color with no transparency</summary>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Win32ToWpfColorConverter.#ctor"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Win32ToWpfColorConverter.Convert(Microsoft.VisualStudio.Shell.Interop.IVsUIObject,Microsoft.VisualStudio.Shell.Interop.IVsUIObject@)">
      <param name="pObject"></param>
      <param name="ppConvertedObject"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Win32ToWpfColorConverter.get_ConvertibleFormats(System.UInt32@,System.UInt32@)">
      <param name="pdwDataFormatFrom"></param>
      <param name="pdwDataFormatTo"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Win32ToWpfColorConverter.get_Type(System.String@)">
      <param name="pTypeName"></param>
    </member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.Win32ToWpfIconConverter"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Win32ToWpfIconConverter.#ctor"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Win32ToWpfIconConverter.Convert(Microsoft.VisualStudio.Shell.Interop.IVsUIObject,Microsoft.VisualStudio.Shell.Interop.IVsUIObject@)">
      <param name="pObject"></param>
      <param name="ppConvertedObject"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Win32ToWpfIconConverter.get_ConvertibleFormats(System.UInt32@,System.UInt32@)">
      <param name="pdwDataFormatFrom"></param>
      <param name="pdwDataFormatTo"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Win32ToWpfIconConverter.get_Type(System.String@)">
      <param name="pTypeName"></param>
    </member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.Win32ToWpfImageListConverter"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Win32ToWpfImageListConverter.#ctor"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Win32ToWpfImageListConverter.Convert(Microsoft.VisualStudio.Shell.Interop.IVsUIObject,Microsoft.VisualStudio.Shell.Interop.IVsUIObject@)">
      <param name="pObject"></param>
      <param name="ppConvertedObject"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Win32ToWpfImageListConverter.get_ConvertibleFormats(System.UInt32@,System.UInt32@)">
      <param name="pdwDataFormatFrom"></param>
      <param name="pdwDataFormatTo"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Win32ToWpfImageListConverter.get_Type(System.String@)">
      <param name="pTypeName"></param>
    </member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.WindowHelper"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WindowHelper.AddHelpTopic(Microsoft.Internal.VisualStudio.PlatformUI.UIDataSource,System.String)">
      <summary>Adds a help topic to a data source used by a dialog using the constants HelpTopic property and Help verb.</summary>
      <param name="dataSource">The data source to be used by the dialog</param>
      <param name="topic">Help topic to be displayed by the </param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WindowHelper.CreateChildElement(Microsoft.VisualStudio.Shell.Interop.IVsUIElement,System.IntPtr)">
      <summary>Create and displays the specified element as a modeless child window</summary>
      <param name="element">Element to create and display</param>
      <param name="parent">The parent window handle</param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WindowHelper.CreateChildElement(Microsoft.VisualStudio.Shell.Interop.IVsUIElement,System.Windows.FrameworkElement,System.Windows.FrameworkElement@)">
      <summary>Try our best to create and set the element as a child of the specified parent</summary>
      <param name="element">The element to be created and displayed</param>
      <param name="parent">The framework element to be used as parent</param>
      <param name="frameworkElement">Returns the created child framework element</param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WindowHelper.CreateChildElement(System.Guid,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsUISimpleDataSource,System.IntPtr)">
      <summary>Create and displays a UI element as a modeless child window</summary>
      <param name="factory">The Guid of the UIFactory creating the UI element</param>
      <param name="elementId">The ID of the UI element to be created and displayed</param>
      <param name="dataSource"></param>
      <param name="parent">The parent window handle</param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WindowHelper.CreateChildElement(System.Guid,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsUISimpleDataSource,System.Windows.FrameworkElement,System.Windows.FrameworkElement@)">
      <summary>Try our best to create and set the element as a child of the specified parent</summary>
      <param name="factory">The Guid of the UIFactory creating the UI element</param>
      <param name="elementId">The ID of the UI element to be created and displayed</param>
      <param name="dataSource"></param>
      <param name="parent">The framework element to be used as parent</param>
      <param name="frameworkElement">Returns the created child framework element</param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WindowHelper.CreateUIElement(System.Guid,System.UInt32)">
      <summary>Create a UI Element</summary>
      <param name="factory">The guid of the UIFactory supporting the element</param>
      <param name="elementId">The ID of the UI Element to create</param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WindowHelper.CreateWpfLoader">
      <summary>Creates a WPF Loader object that can be used to create IVsUIElement objects wrapping UI objects specified by their types.</summary>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WindowHelper.GetDialogOwnerHandle">
      <summary>Returns the window handle that can be used to parent modal dialogs</summary>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WindowHelper.GetFrameworkElementFromUIElement(Microsoft.VisualStudio.Shell.Interop.IVsUIElement)">
      <summary>Creates a FrameworkElement from the specified UIElement</summary>
      <param name="element">The UIElement from which to get a FrameworkElement</param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WindowHelper.GetHwndFromUIElement(Microsoft.VisualStudio.Shell.Interop.IVsUIElement,System.IntPtr)">
      <summary>Create the specified element as a modeless child window</summary>
      <param name="element">Element to create</param>
      <param name="parent">The parent window handle</param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WindowHelper.ShowModal(System.Windows.Window)">
      <summary>Displays a WPF window as modal dialog in Visual Studio shell</summary>
      <param name="window">The WPF Window to be shown as dialog.</param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WindowHelper.ShowModal(System.Windows.Window,System.IntPtr)">
      <summary>Shows a WPF window using a Win32 parent window</summary>
      <param name="window">Dialog to show</param>
      <param name="parent">The parent window handle</param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WindowHelper.ShowModalElement(Microsoft.VisualStudio.Shell.Interop.IVsUIElement)">
      <summary>Create the specified element and display it as a modal dialog using the IDE's main window as parent</summary>
      <param name="element">Element to create and display as dialog</param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WindowHelper.ShowModalElement(Microsoft.VisualStudio.Shell.Interop.IVsUIElement,System.IntPtr)">
      <summary>Displays the UIElement as a modal dialog, using the specified Win32 window as parent</summary>
      <param name="element">The element to display as a modal dialog</param>
      <param name="parent">The parent window handle</param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WindowHelper.ShowModalElement(Microsoft.VisualStudio.Shell.Interop.IVsUIElement,System.Windows.Window)">
      <summary>Create the specified element and display it as a modal dialog using the specified window or the IDE's main window as parent</summary>
      <param name="element">Element to create and display as dialog</param>
      <param name="owner">The Window to be used for parent</param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WindowHelper.ShowModalElement(System.Guid,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsUISimpleDataSource)">
      <summary>Create the specified element and display it as a modal dialog using the IDE's main window as parent</summary>
      <param name="factory">The guid of the UIFactory supporting the element</param>
      <param name="elementId">The ID of the UI Element to create</param>
      <param name="dataSource"></param>
    </member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.WinFormsIconUIObject">
      <summary>Implementation of wrapper IVsUIObject for System.Drawing.Icon</summary>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WinFormsIconUIObject.#ctor(System.Drawing.Icon)">
      <param name="icon"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WinFormsIconUIObject.#ctor(System.IntPtr)">
      <param name="handle"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WinFormsIconUIObject.Equals(Microsoft.VisualStudio.Shell.Interop.IVsUIObject,System.Boolean@)">
      <param name="pOtherObject"></param>
      <param name="pfAreEqual"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WinFormsIconUIObject.get_Data(System.Object@)">
      <param name="pVar"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WinFormsIconUIObject.get_Format(System.UInt32@)">
      <param name="pdwDataFormat"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WinFormsIconUIObject.get_Type(System.String@)">
      <param name="pTypeName"></param>
    </member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.WinFormsImageListUIObject">
      <summary>Implementation of wrapper IVsUIObject for System.Windows.Forms.ImageList</summary>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WinFormsImageListUIObject.#ctor(System.Windows.Forms.ImageList)">
      <param name="imageList"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WinFormsImageListUIObject.Equals(Microsoft.VisualStudio.Shell.Interop.IVsUIObject,System.Boolean@)">
      <param name="pOtherObject"></param>
      <param name="pfAreEqual"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WinFormsImageListUIObject.get_Data(System.Object@)">
      <param name="pVar"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WinFormsImageListUIObject.get_Format(System.UInt32@)">
      <param name="pdwDataFormat"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WinFormsImageListUIObject.get_Type(System.String@)">
      <param name="pTypeName"></param>
    </member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.WinFormsToWin32IconConverter">
      <summary>Converts System.Drawing.Icon to an HICON pointer</summary>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WinFormsToWin32IconConverter.#ctor"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WinFormsToWin32IconConverter.Convert(Microsoft.VisualStudio.Shell.Interop.IVsUIObject,Microsoft.VisualStudio.Shell.Interop.IVsUIObject@)">
      <param name="pObject"></param>
      <param name="ppConvertedObject"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WinFormsToWin32IconConverter.get_ConvertibleFormats(System.UInt32@,System.UInt32@)">
      <param name="pdwDataFormatFrom"></param>
      <param name="pdwDataFormatTo"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WinFormsToWin32IconConverter.get_Type(System.String@)">
      <param name="pTypeName"></param>
    </member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.WinFormsToWin32ImageListConverter">
      <summary>Converts Windows Forms System.Windows.Forms.ImageList to Win32's HIMAGELIST pointer</summary>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WinFormsToWin32ImageListConverter.#ctor"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WinFormsToWin32ImageListConverter.Convert(Microsoft.VisualStudio.Shell.Interop.IVsUIObject,Microsoft.VisualStudio.Shell.Interop.IVsUIObject@)">
      <param name="pObject"></param>
      <param name="ppConvertedObject"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WinFormsToWin32ImageListConverter.get_ConvertibleFormats(System.UInt32@,System.UInt32@)">
      <param name="pdwDataFormatFrom"></param>
      <param name="pdwDataFormatTo"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WinFormsToWin32ImageListConverter.get_Type(System.String@)">
      <param name="pTypeName"></param>
    </member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.WpfColorUIObject">
      <summary>Managed implementation of wrapper IVsUIObject for Colors</summary>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WpfColorUIObject.#ctor(System.Windows.Media.Color)">
      <param name="color"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WpfColorUIObject.Equals(Microsoft.VisualStudio.Shell.Interop.IVsUIObject,System.Boolean@)">
      <param name="pOtherObject"></param>
      <param name="pfAreEqual"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WpfColorUIObject.get_Data(System.Object@)">
      <param name="pVar"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WpfColorUIObject.get_Format(System.UInt32@)">
      <param name="pdwDataFormat"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WpfColorUIObject.get_Type(System.String@)">
      <param name="pTypeName"></param>
    </member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.WpfPropertyValue"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WpfPropertyValue.#ctor(System.Object)">
      <param name="value"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WpfPropertyValue.CreateBitmapObject(System.Windows.Media.ImageSource)">
      <param name="source"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WpfPropertyValue.CreateEmptyValue(System.String)">
      <summary>Create empty value of the specified type, to be used with fallback properties</summary>
      <param name="type"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WpfPropertyValue.CreateIconObject(System.Windows.Media.ImageSource)">
      <param name="source"></param>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.WpfPropertyValue.Format"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WpfPropertyValue.TypeNameFromValue(System.Object)">
      <summary>Supply type mappings for WPF objects</summary>
      <param name="value"></param>
    </member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.WpfToWin32ColorConverter">
      <summary>Data converter class for converting WPF IVsUIWpfColor UI objects to Win32 IVsUIWin32Color UI objects NOTE: In Win32, COLORREFs don't have transparency (even though they have space to store it) Converting color objects WPF-&gt;Win32 will lose transparency information</summary>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WpfToWin32ColorConverter.#ctor"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WpfToWin32ColorConverter.Convert(Microsoft.VisualStudio.Shell.Interop.IVsUIObject,Microsoft.VisualStudio.Shell.Interop.IVsUIObject@)">
      <param name="pObject"></param>
      <param name="ppConvertedObject"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WpfToWin32ColorConverter.get_ConvertibleFormats(System.UInt32@,System.UInt32@)">
      <param name="pdwDataFormatFrom"></param>
      <param name="pdwDataFormatTo"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WpfToWin32ColorConverter.get_Type(System.String@)">
      <param name="pTypeName"></param>
    </member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.WpfUIElement"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WpfUIElement.#ctor(System.Type)">
      <param name="frameworkElementType"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WpfUIElement.CreateFrameworkElement(System.Object@)">
      <param name="ppUnkElement"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WpfUIElement.GetFrameworkElement(System.Object@)">
      <param name="ppUnkElement"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WpfUIElement.GetUIObject(System.Object@)">
      <param name="ppUnk"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WpfUIElement.TranslateAccelerator(Microsoft.VisualStudio.Shell.Interop.IVsUIAccelerator)">
      <param name="pAccel"></param>
    </member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.WpfUIFactory"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WpfUIFactory.#ctor(System.IServiceProvider)">
      <param name="serviceProvider"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WpfUIFactory.CreateUIElement(System.Guid@,System.UInt32)">
      <param name="factory"></param>
      <param name="elementId"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WpfUIFactory.GetFactoryElements"></member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.WpfUIFactory.WpfLoader"></member>
    <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.WpfUIFactoryElement"></member>
    <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WpfUIFactoryElement.#ctor(System.Guid,System.UInt32,System.Type)">
      <param name="factory"></param>
      <param name="elementId"></param>
      <param name="elementType"></param>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.WpfUIFactoryElement.ElementId"></member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.WpfUIFactoryElement.ElementType"></member>
    <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.WpfUIFactoryElement.Factory"></member>
    <member name="T:Microsoft.Internal.VisualStudio.Shell.Interop.IOleComponent2Private">
      <summary>The following interface is implemented here to fix a problem in the Interop.9.0 definition where the marshalling for GetWaitHandlesAndTimeout has an extra level of indirection on the handles argument which results in INVALID_HANDLE_VALUE errors in the message loop. Interop.9.0 decided not to fix this and thus we have IOleComponent2 defined here. All the methods with 'new' are required to keep the vtables aligned</summary>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IOleComponent2Private.FContinueMessageLoop(System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.MSG[])">
      <param name="uReason"></param>
      <param name="pvLoopData"></param>
      <param name="pMsgPeeked"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IOleComponent2Private.FDoIdle(System.UInt32)">
      <param name="grfidlef"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IOleComponent2Private.FPreTranslateMessage(Microsoft.VisualStudio.OLE.Interop.MSG[])">
      <param name="pMsg"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IOleComponent2Private.FQueryTerminate(System.Int32)">
      <param name="fPromptUser"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IOleComponent2Private.FReserved1(System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
      <param name="dwReserved"></param>
      <param name="message"></param>
      <param name="wParam"></param>
      <param name="lParam"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IOleComponent2Private.GetWaitHandlesAndTimeout(System.IntPtr[],System.UInt32@,System.UInt32@,System.IntPtr)">
      <param name="handleArray"></param>
      <param name="handleCount"></param>
      <param name="timeout"></param>
      <param name="pvLoopData"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IOleComponent2Private.HwndGetWindow(System.UInt32,System.UInt32)">
      <param name="dwWhich"></param>
      <param name="dwReserved"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IOleComponent2Private.OnActivationChange(Microsoft.VisualStudio.OLE.Interop.IOleComponent,System.Int32,Microsoft.VisualStudio.OLE.Interop.OLECRINFO[],System.Int32,Microsoft.VisualStudio.OLE.Interop.OLECHOSTINFO[],System.UInt32)">
      <param name="pic"></param>
      <param name="fSameComponent"></param>
      <param name="pcrinfo"></param>
      <param name="fHostIsActivating"></param>
      <param name="pchostinfo"></param>
      <param name="dwReserved"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IOleComponent2Private.OnAppActivate(System.Int32,System.UInt32)">
      <param name="fActive"></param>
      <param name="dwOtherThreadID"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IOleComponent2Private.OnEnterState(System.UInt32,System.Int32)">
      <param name="uStateID"></param>
      <param name="fEnter"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IOleComponent2Private.OnHandleSignaled(System.UInt32,System.IntPtr,System.Boolean@)">
      <param name="handleCount"></param>
      <param name="pvLoopData"></param>
      <param name="pfContinue"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IOleComponent2Private.OnLoseActivation"></member>
    <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IOleComponent2Private.OnTimeout(System.IntPtr,System.Boolean@)">
      <param name="pvLoopData"></param>
      <param name="pfContinue"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IOleComponent2Private.Terminate"></member>
    <member name="T:Microsoft.Internal.VisualStudio.Shell.Interop.IVsInvokablePrivate"></member>
    <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsInvokablePrivate.Invoke"></member>
    <member name="T:Microsoft.Internal.VisualStudio.Shell.Interop.IVsInvokerPrivate"></member>
    <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsInvokerPrivate.Invoke(Microsoft.Internal.VisualStudio.Shell.Interop.IVsInvokablePrivate)">
      <param name="pInvokable"></param>
    </member>
    <member name="T:Microsoft.Internal.VisualStudio.Shell.Interop.IVsUIWPFElementContainerPrivate"></member>
    <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsUIWPFElementContainerPrivate.GetHandle(System.IntPtr@)">
      <param name="pHandle"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsUIWPFElementContainerPrivate.ShowWindow"></member>
    <member name="T:Microsoft.Internal.VisualStudio.Shell.Interop.IVsUIWpfHostPrivate"></member>
    <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsUIWpfHostPrivate.CreateWPFUIElementContainer(System.String,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsUIElement,Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource,System.Object,Microsoft.Internal.VisualStudio.Shell.Interop.IVsUIWPFElementContainerPrivate@)">
      <param name="szWindowType"></param>
      <param name="hWndParent"></param>
      <param name="pElement"></param>
      <param name="pDataSource"></param>
      <param name="pSite"></param>
      <param name="ppElementContainer"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsUIWpfHostPrivate.EnableUnhandledExceptionDisplay"></member>
    <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsUIWpfHostPrivate.InvokeRender"></member>
    <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsUIWpfHostPrivate.InvokeShutdown"></member>
    <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsUIWpfHostPrivate.RaiseIdle"></member>
    <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsUIWpfHostPrivate.RaiseThreadMessage(Microsoft.VisualStudio.OLE.Interop.MSG[],System.Boolean@)">
      <param name="pMsg"></param>
      <param name="pResult"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsUIWpfHostPrivate.RegisterComponentForModalTracking(Microsoft.VisualStudio.OLE.Interop.IOleComponentManager,System.UInt32)">
      <param name="pComponentManager"></param>
      <param name="dwComponentId"></param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsUIWpfHostPrivate.VerifySynchronizationContext"></member>
    <member name="T:Microsoft.Internal.VisualStudio.Shell.Interop.SVsUIThreadInvokerPrivate"></member>
    <member name="T:Microsoft.VisualStudio.ErrorHandler">
      <summary>Provides methods for dealing with common COM error codes.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.ErrorHandler.CallWithCOMConvention(System.Action)"></member>
    <member name="M:Microsoft.VisualStudio.ErrorHandler.CallWithCOMConvention(System.Func`1)"></member>
    <member name="M:Microsoft.VisualStudio.ErrorHandler.Failed(System.Int32)">
      <summary>Checks if an HRESULT is an error return code.</summary>
      <returns>true if <paramref name="hr" /> represents an error, otherwise false.</returns>
      <param name="hr">The HRESULT to test.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.ErrorHandler.IsCriticalException(System.Exception)"></member>
    <member name="M:Microsoft.VisualStudio.ErrorHandler.Succeeded(System.Int32)">
      <summary>Checks if an HRESULT is a success return code.</summary>
      <returns>true if <paramref name="hr" /> represents a success otherwise false.</returns>
      <param name="hr">The HRESULT to test.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.ErrorHandler.ThrowOnFailure(System.Int32)">
      <summary>Checks if the parameter is a success or failure HRESULT and throws an exception in case of failure.</summary>
      <returns>The HRESULT.</returns>
      <param name="hr">The HRESULT to test.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.ErrorHandler.ThrowOnFailure(System.Int32,System.Int32[])">
      <summary>Checks if the parameter is a success or failure HRESULT and throws an exception if it is a failure that is not included in the array of well-known failures.</summary>
      <returns>The HRESULT.</returns>
      <param name="hr">The HRESULT to test.</param>
      <param name="expectedHRFailure">If <paramref name="hr" /> is found in this array of expected failures no exception should be thrown.</param>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.GUID_AppCommand">
      <summary>Identifies commands fired as a result of a WM_APPCOMMAND message received by the main window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.HIERARCHY_DONTCHANGE"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.HIERARCHY_DONTPROPAGATE"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_Any">
      <summary>Kind of view for document or data: Any defined view.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.SELCONTAINER_DONTCHANGE"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.SELCONTAINER_DONTPROPAGATE"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsStd2010"></member>
    <member name="T:Microsoft.VisualStudio.VSConstants.AppCommandCmdID"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.AppCommandCmdID.BrowserBackward">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.AppCommandCmdID.BrowserForward">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.AppCommandCmdID.BrowserRefresh">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.AppCommandCmdID.BrowserStop">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.AppCommandCmdID.BrowserSearch">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.AppCommandCmdID.BrowserFavorites">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.AppCommandCmdID.BrowserHome">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.AppCommandCmdID.VolumeMute">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.AppCommandCmdID.VolumeDown">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.AppCommandCmdID.VolumeUp">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.AppCommandCmdID.MediaNextTrack">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.AppCommandCmdID.MediaPreviousTrack">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.AppCommandCmdID.MediaStop">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.AppCommandCmdID.MediaPlayPause">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.AppCommandCmdID.LaunchMail">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.AppCommandCmdID.LaunchMediaSelect">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.AppCommandCmdID.LaunchApp1">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.AppCommandCmdID.LaunchApp2">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.AppCommandCmdID.BassDown">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.AppCommandCmdID.BassBoost">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.AppCommandCmdID.BassUp">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.AppCommandCmdID.TrebleDown">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.AppCommandCmdID.TrebleUp">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.AppCommandCmdID.MicrophoneVolumeMute">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.AppCommandCmdID.MicrophoneVolumeDown">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.AppCommandCmdID.MicrophoneVolumeUp">
      <summary />
    </member>
    <member name="T:Microsoft.VisualStudio.VSConstants.CATID"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CATID.CSharpFileProperties_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CATID.CSharpFileProperties_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CATID.CSharpFolderProperties_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CATID.CSharpFolderProperties_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CATID.ProjectAutomationObject_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CATID.ProjectAutomationObject_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CATID.ProjectItemAutomationObject_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CATID.ProjectItemAutomationObject_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CATID.VBAFileProperties_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CATID.VBAFileProperties_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CATID.VBAFolderProperties_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CATID.VBAFolderProperties_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CATID.VBFileProperties_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CATID.VBFileProperties_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CATID.VBFolderProperties_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CATID.VBFolderProperties_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CATID.VBProjectProperties_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CATID.VBProjectProperties_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CATID.VBReferenceProperties_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CATID.VBReferenceProperties_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CATID.VCActiveXReferenceNode_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CATID.VCActiveXReferenceNode_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CATID.VCAssemblyReferenceNode_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CATID.VCAssemblyReferenceNode_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CATID.VCFileGroup_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CATID.VCFileGroup_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CATID.VCFileNode_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CATID.VCFileNode_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CATID.VCProjectNode_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CATID.VCProjectNode_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CATID.VCProjectReferenceNode_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CATID.VCProjectReferenceNode_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CATID.VCReferences_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CATID.VCReferences_string"></member>
    <member name="T:Microsoft.VisualStudio.VSConstants.CEF"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CEF.CloneFile">
      <summary>Mutually exclusive w/_OPENFILE</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CEF.OpenFile">
      <summary>Mutually exclusive w/_CLONEFILE</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CEF.Silent">
      <summary>Editor factory should create editor silently.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CEF.OpenAsNew">
      <summary>Editor factory should perform necessary fixups.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.VSConstants.CLSID"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CLSID.HtmDocData_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CLSID.HtmDocData_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CLSID.MiscellaneousFilesProject_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CLSID.MiscellaneousFilesProject_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CLSID.SolutionFolderProject_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CLSID.SolutionFolderProject_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CLSID.SolutionItemsProject_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CLSID.SolutionItemsProject_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CLSID.UnloadedProject_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CLSID.UnloadedProject_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CLSID.VsCfgProviderEventsHelper_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CLSID.VsCfgProviderEventsHelper_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CLSID.VsEnvironmentPackage_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CLSID.VsEnvironmentPackage_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CLSID.VsTaskList_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CLSID.VsTaskList_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CLSID.VsTaskListPackage_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CLSID.VsTaskListPackage_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CLSID.VsTextBuffer_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CLSID.VsTextBuffer_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CLSID.VsUIHierarchyWindow_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CLSID.VsUIHierarchyWindow_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CLSID.VsUIWpfLoader_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CLSID.VsUIWpfLoader_string"></member>
    <member name="T:Microsoft.VisualStudio.VSConstants.CMDSETID"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CMDSETID.StandardCommandSet2010_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CMDSETID.StandardCommandSet2010_string">
      <summary>GUID for the Visual Studio 2010 command set. This is a set of new commands added to Visual Studio 2010.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CMDSETID.StandardCommandSet2K_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CMDSETID.StandardCommandSet2K_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CMDSETID.StandardCommandSet97_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CMDSETID.StandardCommandSet97_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CMDSETID.UIHierarchyWindowCommandSet_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CMDSETID.UIHierarchyWindowCommandSet_string">
      <summary>Command Group GUID for commands that only apply to the UIHierarchyWindow.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CMDSETID.VsDocOutlinePackageCommandSet_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CMDSETID.VsDocOutlinePackageCommandSet_string"></member>
    <member name="T:Microsoft.VisualStudio.VSConstants.ComponentSelectorPageGuid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.ComponentSelectorPageGuid.COMPage_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.ComponentSelectorPageGuid.COMPage_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.ComponentSelectorPageGuid.ManagedAssemblyPage_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.ComponentSelectorPageGuid.ManagedAssemblyPage_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.ComponentSelectorPageGuid.ProjectsPage_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.ComponentSelectorPageGuid.ProjectsPage_string"></member>
    <member name="T:Microsoft.VisualStudio.VSConstants.DebugEnginesGuids"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.DebugEnginesGuids.ManagedAndNative"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.DebugEnginesGuids.ManagedAndNative_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.DebugEnginesGuids.ManagedAndNative_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.DebugEnginesGuids.ManagedOnly"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.DebugEnginesGuids.ManagedOnly_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.DebugEnginesGuids.ManagedOnly_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.DebugEnginesGuids.NativeOnly"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.DebugEnginesGuids.NativeOnly_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.DebugEnginesGuids.NativeOnly_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.DebugEnginesGuids.Script"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.DebugEnginesGuids.Script_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.DebugEnginesGuids.Script_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.DebugEnginesGuids.SqlDebugEngine2"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.DebugEnginesGuids.SqlDebugEngine2_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.DebugEnginesGuids.SqlDebugEngine2_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.DebugEnginesGuids.SqlDebugEngine3"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.DebugEnginesGuids.SqlDebugEngine3_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.DebugEnginesGuids.SqlDebugEngine3_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.DebugEnginesGuids.SQLLocalEngine"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.DebugEnginesGuids.SQLLocalEngine_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.DebugEnginesGuids.SQLLocalEngine_string"></member>
    <member name="T:Microsoft.VisualStudio.VSConstants.EditPropyCategoryGuid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.EditPropyCategoryGuid.TextManagerGlobal_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.EditPropyCategoryGuid.TextManagerGlobal_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.EditPropyCategoryGuid.ViewMasterSettings_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.EditPropyCategoryGuid.ViewMasterSettings_string"></member>
    <member name="T:Microsoft.VisualStudio.VSConstants.ItemTypeGuid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.ItemTypeGuid.PhysicalFile_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.ItemTypeGuid.PhysicalFile_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.ItemTypeGuid.PhysicalFolder_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.ItemTypeGuid.PhysicalFolder_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.ItemTypeGuid.SubProject_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.ItemTypeGuid.SubProject_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.ItemTypeGuid.VirtualFolder_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.ItemTypeGuid.VirtualFolder_string"></member>
    <member name="T:Microsoft.VisualStudio.VSConstants.LOGVIEWID"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID.Any_guid">
      <summary>Kind of view for document or data: Any defined view.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID.Any_string">
      <summary>Kind of view for document or data: Any defined view.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID.Code_guid">
      <summary>Kind of view for document or data: Code editor view.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID.Code_string">
      <summary>Kind of view for document or data: Code editor view.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID.Debugging_guid">
      <summary>Kind of view for document or data: Debugger view.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID.Debugging_string">
      <summary>Kind of view for document or data: Debugger view.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID.Designer_guid">
      <summary>Kind of view for document or data: Designer view.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID.Designer_string">
      <summary>Kind of view for document or data: Designer view.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID.Primary_guid">
      <summary>Kind of view for document or data: Primary (default) view.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID.ProjectSpecificEditor_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID.ProjectSpecificEditor_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID.TextView_guid">
      <summary>Kind of view for document or data: Text editor view.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID.TextView_string">
      <summary>Kind of view for document or data: Text editor view.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID.UserChooseView_guid">
      <summary>Kind of view for document or data: A user defined view.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID.UserChooseView_string">
      <summary>Kind of view for document or data: A user defined view.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.VSConstants.OutputWindowPaneGuid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.OutputWindowPaneGuid.BuildOutputPane_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.OutputWindowPaneGuid.BuildOutputPane_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.OutputWindowPaneGuid.DebugPane_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.OutputWindowPaneGuid.DebugPane_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.OutputWindowPaneGuid.GeneralPane_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.OutputWindowPaneGuid.GeneralPane_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.OutputWindowPaneGuid.SortedBuildOutputPane_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.OutputWindowPaneGuid.SortedBuildOutputPane_string"></member>
    <member name="T:Microsoft.VisualStudio.VSConstants.SelectionElement">
      <summary>IVsSelectionEvents.OnElementValueChanged flags.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.SelectionElement.UndoManager">
      <summary>IVsSelectionEvents.OnElementValueChanged flag: The undo manager.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.SelectionElement.WindowFrame">
      <summary>IVsSelectionEvents.OnElementValueChanged flag: A window frame.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.SelectionElement.DocumentFrame">
      <summary>IVsSelectionEvents.OnElementValueChanged flag: A document frame.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.SelectionElement.StartupProject">
      <summary>IVsSelectionEvents.OnElementValueChanged flag: The startup project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.SelectionElement.PropertyBrowserSID">
      <summary>IVsSelectionEvents.OnElementValueChanged flag: The property borowser.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.SelectionElement.UserContext">
      <summary>IVsSelectionEvents.OnElementValueChanged flag: A user context.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.VSConstants.ToolboxMultitargetingFields">
      <summary>Toolbox multitargeting fields.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.ToolboxMultitargetingFields.AssemblyName">
      <summary>The full assembly name (strong name), including version</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.ToolboxMultitargetingFields.Frameworks">
      <summary>A semicolon-delimited list of TFMs this item supports (without profiles)</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.ToolboxMultitargetingFields.ItemProvider">
      <summary>The GUID of the package that implements IVsProvideTargetedToolboxItems and knows about this item type</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.ToolboxMultitargetingFields.TypeName">
      <summary>The full type name, e.g. System.Windows.Forms.Button</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.ToolboxMultitargetingFields.UseProjectTargetFrameworkVersionInTooltip">
      <summary>A boolean value indicating whether to use the project target framework's version in toolbox item tooltips</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.VSConstants.UICONTEXT"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.ApplicationDesigner_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.ApplicationDesigner_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.CodeWindow_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.CodeWindow_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.CSharpProject_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.CSharpProject_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.DataSourceWindowAutoVisible_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.DataSourceWindowAutoVisible_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.DataSourceWindowSupported_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.DataSourceWindowSupported_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.DataSourceWizardSuppressed_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.DataSourceWizardSuppressed_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.Debugging_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.Debugging_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.DesignMode_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.DesignMode_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.Dragging_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.Dragging_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.EmptySolution_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.EmptySolution_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.FSharpProject_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.FSharpProject_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.FullScreenMode_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.FullScreenMode_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.HistoricalDebugging_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.HistoricalDebugging_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.NoSolution_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.NoSolution_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.NotBuildingAndNotDebugging_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.NotBuildingAndNotDebugging_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.ProjectRetargeting_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.ProjectRetargeting_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.PropertyPageDesigner_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.PropertyPageDesigner_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.RESXEditor_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.RESXEditor_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.SettingsDesigner_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.SettingsDesigner_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.SolutionBuilding_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.SolutionBuilding_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.SolutionExists_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.SolutionExists_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.SolutionExistsAndFullyLoaded_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.SolutionExistsAndFullyLoaded_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.SolutionExistsAndNotBuildingAndNotDebugging_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.SolutionExistsAndNotBuildingAndNotDebugging_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.SolutionHasMultipleProjects_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.SolutionHasMultipleProjects_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.SolutionHasSingleProject_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.SolutionHasSingleProject_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.SolutionOpening_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.SolutionOpening_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.SolutionOrProjectUpgrading_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.SolutionOrProjectUpgrading_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.ToolboxInitialized_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.ToolboxInitialized_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.VBCodeAttribute_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.VBCodeAttribute_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.VBCodeClass_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.VBCodeClass_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.VBCodeDelegate_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.VBCodeDelegate_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.VBCodeEnum_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.VBCodeEnum_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.VBCodeFunction_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.VBCodeFunction_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.VBCodeInterface_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.VBCodeInterface_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.VBCodeNamespace_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.VBCodeNamespace_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.VBCodeParameter_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.VBCodeParameter_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.VBCodeProperty_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.VBCodeProperty_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.VBCodeStruct_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.VBCodeStruct_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.VBCodeVariable_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.VBCodeVariable_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.VBProject_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.VBProject_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.VBProjOpened_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.VBProjOpened_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.VCProject_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.VCProject_string"></member>
    <member name="T:Microsoft.VisualStudio.VSConstants.VsDependencyTypeGuid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsDependencyTypeGuid.BuildProject_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsDependencyTypeGuid.BuildProject_string"></member>
    <member name="T:Microsoft.VisualStudio.VSConstants.VsEditorFactoryGuid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsEditorFactoryGuid.ExternalEditor_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsEditorFactoryGuid.ExternalEditor_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsEditorFactoryGuid.HtmlEditor_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsEditorFactoryGuid.HtmlEditor_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsEditorFactoryGuid.ProjectDesignerEditor_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsEditorFactoryGuid.ProjectDesignerEditor_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsEditorFactoryGuid.TextEditor_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsEditorFactoryGuid.TextEditor_string"></member>
    <member name="T:Microsoft.VisualStudio.VSConstants.VSITEMID">
      <summary>Special items inside a VsHierarchy.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSITEMID.Nil">
      <summary>Special items inside a VsHierarchy: no node.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSITEMID.Root">
      <summary>Special items inside a VsHierarchy: the hierarchy itself.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSITEMID.Selection">
      <summary>Special items inside a VsHierarchy: all the currently selected items.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.VSConstants.VsLanguageServiceGuid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsLanguageServiceGuid.HtmlLanguageService_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsLanguageServiceGuid.HtmlLanguageService_string"></member>
    <member name="T:Microsoft.VisualStudio.VSConstants.VsLanguageUserDataGuid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsLanguageUserDataGuid.SupportCF_HTML_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsLanguageUserDataGuid.SupportCF_HTML_string"></member>
    <member name="T:Microsoft.VisualStudio.VSConstants.VsPackageGuid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsPackageGuid.HtmlEditorPackage_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsPackageGuid.HtmlEditorPackage_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsPackageGuid.VsDocOutlinePackage_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsPackageGuid.VsDocOutlinePackage_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsPackageGuid.VsEnvironmentPackage_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsPackageGuid.VsEnvironmentPackage_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsPackageGuid.VsTaskListPackage_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsPackageGuid.VsTaskListPackage_string"></member>
    <member name="T:Microsoft.VisualStudio.VSConstants.VSSELELEMID">
      <summary>Constants used in <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSelectionEvents" /> to indicate a new selection state.  The selections may be propagated through <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSelectionEvents.OnElementValueChanged(System.UInt32,System.Object,System.Object)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSSELELEMID.SEID_UndoManager">
      <summary>
        <see cref="F:Microsoft.VisualStudio.VSConstants.IID_IUnknown" /> of the active <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleUndoManager" /> object.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSSELELEMID.SEID_WindowFrame">
      <summary>
            Visual Studio tracks this selection automatically so it cannot be set via <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSelectionEvents.OnElementValueChanged(System.UInt32,System.Object,System.Object)" />, but the value may be observed by calling <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsMonitorSelection.GetCurrentElementValue(System.UInt32,System.Object@)" /></summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSSELELEMID.SEID_DocumentFrame">
      <summary>
            Visual Studio tracks this selection automatically so it cannot be set via <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSelectionEvents.OnElementValueChanged(System.UInt32,System.Object,System.Object)" />, but the value may be observed by calling <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsMonitorSelection.GetCurrentElementValue(System.UInt32,System.Object@)" /></summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSSELELEMID.SEID_StartupProject">
      <summary>
        <see cref="F:Microsoft.VisualStudio.VSConstants.IID_IUnknown" /> of the active StartupProject.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSSELELEMID.SEID_PropertyBrowserSID">
      <summary>
        <see cref="F:Microsoft.VisualStudio.VSConstants.IID_IUnknown" /> of the active <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPropertyBrowser" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSSELELEMID.SEID_UserContext">
      <summary>An event that indicates selection only by document windows that do not push selection context to the property browser.  The alternative case is <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_UserContext" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSSELELEMID.SEID_ResultList">
      <summary>
        <see cref="F:Microsoft.VisualStudio.VSConstants.IID_IUnknown" /> of the active <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget" /> for list navigation commands.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSSELELEMID.SEID_LastWindowFrame">
      <summary>The value of <see cref="F:Microsoft.VisualStudio.VSConstants.VSSELELEMID.SEID_WindowFrame" /> before it received its current value.  It is guaranteed to be different from <see cref="F:Microsoft.VisualStudio.VSConstants.VSSELELEMID.SEID_WindowFrame" /> unless both are empty.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.VSConstants.VSStd2010CmdID">
      <summary>Set of the standard, shared commands in CMDSETID.StandardCommandSet2010_guid</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2010CmdID.DynamicToolBarListFirst">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2010CmdID.DynamicToolBarListLast">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2010CmdID.WindowFrameDockMenu">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2010CmdID.ShellNavigate1First">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2010CmdID.ShellNavigate2First">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2010CmdID.ShellNavigate3First">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2010CmdID.ShellNavigate4First">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2010CmdID.ShellNavigate5First">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2010CmdID.ShellNavigate6First">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2010CmdID.ShellNavigate7First">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2010CmdID.ShellNavigate8First">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2010CmdID.ShellNavigate9First">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2010CmdID.ShellNavigate10First">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2010CmdID.ShellNavigate11First">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2010CmdID.ShellNavigate12First">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2010CmdID.ShellNavigate13First">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2010CmdID.ShellNavigate14First">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2010CmdID.ShellNavigate15First">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2010CmdID.ShellNavigate16First">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2010CmdID.ShellNavigate17First">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2010CmdID.ShellNavigate18First">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2010CmdID.ShellNavigate19First">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2010CmdID.ShellNavigate20First">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2010CmdID.ShellNavigate21First">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2010CmdID.ShellNavigate22First">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2010CmdID.ShellNavigate23First">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2010CmdID.ShellNavigate24First">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2010CmdID.ShellNavigate25First">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2010CmdID.ShellNavigate26First">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2010CmdID.ShellNavigate27First">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2010CmdID.ShellNavigate28First">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2010CmdID.ShellNavigate29First">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2010CmdID.ShellNavigate30First">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2010CmdID.ShellNavigate31First">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2010CmdID.ShellNavigate32First">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2010CmdID.ShellNavigateLast">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2010CmdID.ZoomIn">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2010CmdID.ZoomOut">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2010CmdID.OUTLN_EXPAND_ALL">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2010CmdID.OUTLN_COLLAPSE_ALL">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2010CmdID.OUTLN_EXPAND_CURRENT">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2010CmdID.OUTLN_COLLAPSE_CURRENT">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2010CmdID.ExtensionManager">
      <summary />
    </member>
    <member name="T:Microsoft.VisualStudio.VSConstants.VSStd97CmdID">
      <summary>These constants make some basic menu commands available to managed code.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AlignBottom">
      <summary>Align Bottom</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AlignHorizontalCenters">
      <summary>Align Horizontal Centers</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AlignLeft">
      <summary>Align Left</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AlignRight">
      <summary>Align Right</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AlignToGrid">
      <summary>Align to Grid</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AlignTop">
      <summary>Align Top</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AlignVerticalCenters">
      <summary>Align Vertical Centers</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ArrangeBottom">
      <summary>Arrange Bottom</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ArrangeRight">
      <summary>Arrange Right</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.BringForward">
      <summary>Bring forward</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.BringToFront">
      <summary>Bring to front</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.CenterHorizontally">
      <summary>Center horizontally </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.CenterVertically">
      <summary>Center vertically</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Code">
      <summary>Code</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Copy">
      <summary>Command id : "Copy".</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Cut">
      <summary>Command id: "Cut".</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Delete">
      <summary>Command id: "Delete".</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.FontName">
      <summary>Font Name</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.FontNameGetList">
      <summary>Get Font Name List</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.FontSize">
      <summary>Font Size</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.FontSizeGetList">
      <summary>Get Font Size List</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Group">
      <summary>Group</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.HorizSpaceConcatenate">
      <summary>Concatenate Horizontal Space</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.HorizSpaceDecrease">
      <summary>Decrease Horizontal Space</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.HorizSpaceIncrease">
      <summary>Increase Horizontal Space</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.HorizSpaceMakeEqual">
      <summary>Make Horizontal Space Equal</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.LockControls">
      <summary>Lock Controls</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.InsertObject">
      <summary>Insert Object</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Paste">
      <summary>Command id:"Paste".</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Print">
      <summary>Command id:"Print".</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Properties">
      <summary>Properties</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Redo">
      <summary>Command id:"Redo".</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MultiLevelRedo">
      <summary>Multi Level Redo</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.SelectAll">
      <summary>Command id:"Select All".</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.SendBackward">
      <summary>Send Backward</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.SendToBack">
      <summary>Send to Back</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShowTable">
      <summary>Show Table</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.SizeToControl">
      <summary>Size to Control</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.SizeToControlHeight">
      <summary>Size to Control Height</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.SizeToControlWidth">
      <summary>Size to Control Width</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.SizeToFit">
      <summary>Size to Fit</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.SizeToGrid">
      <summary>Size to Grid</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.SnapToGrid">
      <summary>Snap to Grid</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TabOrder">
      <summary>Tab Order</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Toolbox">
      <summary>Toolbox</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Undo">
      <summary>Command id:"Undo".</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MultiLevelUndo">
      <summary>Multi Level Undo</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Ungroup">
      <summary>Ungroup</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.VertSpaceConcatenate">
      <summary>Concatenate Vertical Space</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.VertSpaceDecrease">
      <summary>Decrease Vertical Space</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.VertSpaceIncrease">
      <summary>Increase Vertical Space</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.VertSpaceMakeEqual">
      <summary>Make Vertical Space Equal</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ZoomPercent">
      <summary>Zoom by Percent</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.BackColor">
      <summary>Back Color</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Bold">
      <summary>Bold</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.BorderColor">
      <summary>Border Color</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.BorderDashDot">
      <summary>Border: dash dot</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.BorderDashDotDot">
      <summary>Border: dash dot dot</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.BorderDashes">
      <summary>Border: dashes</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.BorderDots">
      <summary>Border: dots</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.BorderShortDashes">
      <summary>Border: short dashes</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.BorderSolid">
      <summary>Border: solid</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.BorderSparseDots">
      <summary>Border: sparse dots</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.BorderWidth1">
      <summary>Border width 1</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.BorderWidth2">
      <summary>Border width 2</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.BorderWidth3">
      <summary>Border width 3</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.BorderWidth4">
      <summary>Border width 4</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.BorderWidth5">
      <summary>Border width 5</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.BorderWidth6">
      <summary>Border width 6</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.BorderWidthHairline">
      <summary>Border width Hairline</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Flat">
      <summary>Flat</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ForeColor">
      <summary>Foreground Coler</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Italic">
      <summary>Italic</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.JustifyCenter">
      <summary>Center Justify</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.JustifyGeneral">
      <summary>Justify General</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.JustifyLeft">
      <summary>Left Justify</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.JustifyRight">
      <summary>Justify Right</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Raised">
      <summary>Raised</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Sunken">
      <summary>Sunken</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Underline">
      <summary>Underline</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Chiseled">
      <summary>Chiseled</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Etched">
      <summary>Etched</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Shadowed">
      <summary>Shadowed</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.CompDebug1">
      <summary>Compile debug 1</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.CompDebug2">
      <summary>Compile debug 2</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.CompDebug3">
      <summary>Compile debug 3</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.CompDebug4">
      <summary>Compile debug 4</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.CompDebug5">
      <summary>Compile debug 5</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.CompDebug6">
      <summary>Compile debug 6</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.CompDebug7">
      <summary>Compile debug 7</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.CompDebug8">
      <summary>Compile debug 8</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.CompDebug9">
      <summary>Compile debug 9</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.CompDebug10">
      <summary>Compile debug 10</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.CompDebug11">
      <summary>Compile debug 11</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.CompDebug12">
      <summary>Compile debug 12</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.CompDebug13">
      <summary>Compile debug 13</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.CompDebug14">
      <summary>Compile debug 14</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.CompDebug15">
      <summary>Compile debug 15</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ExistingSchemaEdit">
      <summary>Edit Existing Schema</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Find">
      <summary>Command id:"Find".</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.GetZoom">
      <summary>Get Zoom</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.QueryOpenDesign">
      <summary>Open Query Designer</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.QueryOpenNew">
      <summary>Open New Query</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.SingleTableDesign">
      <summary>Single Table Design</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.SingleTableNew">
      <summary>Single New Table</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShowGrid">
      <summary>Show Grid</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.NewTable">
      <summary>New Table</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.CollapsedView">
      <summary>Collapsed view</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.FieldView">
      <summary>View Field</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.VerifySQL">
      <summary>Verify SQL</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.HideTable">
      <summary>Hide Table</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.PrimaryKey">
      <summary>Primary Key</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Save">
      <summary>Command id:"Save".</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.SaveAs">
      <summary>Command id:"Save As".</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.SortAscending">
      <summary>Sort in Ascending Order</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.SortDescending">
      <summary>Sort in Descending Order</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AppendQuery">
      <summary>Append Query</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.CrosstabQuery">
      <summary>Crosstab query</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.DeleteQuery">
      <summary>Delete Query</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MakeTableQuery">
      <summary>Make Table Query</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.SelectQuery">
      <summary>Select by Query</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.UpdateQuery">
      <summary>Update Query</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Parameters">
      <summary>Parameters</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Totals">
      <summary>Totals</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ViewCollapsed">
      <summary>View Collapsed</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ViewFieldList">
      <summary>View Field List</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ViewKeys">
      <summary>View Keys</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ViewGrid">
      <summary>View Grid</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.InnerJoin">
      <summary>Inner Join</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.RightOuterJoin">
      <summary>Right Outer Join</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.LeftOuterJoin">
      <summary>Left Outer Join</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.FullOuterJoin">
      <summary>Full Outer Join</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.UnionJoin">
      <summary>Union Join</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShowSQLPane">
      <summary>Show SQL Pane</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShowGraphicalPane">
      <summary>Show Graphical Pane</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShowDataPane">
      <summary>Show Data Pane</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShowQBEPane">
      <summary>Show QBE Pane</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.SelectAllFields">
      <summary>Select All Fields</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.OLEObjectMenuButton">
      <summary>Object Browser command id: Object Menu Button</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ObjectVerbList0">
      <summary>Object Verb List 0</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ObjectVerbList1">
      <summary>Object Verb List 1</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ObjectVerbList2">
      <summary>Object Verb List 2</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ObjectVerbList3">
      <summary>Object Verb List 3</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ObjectVerbList4">
      <summary>Object Verb List 4</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ObjectVerbList5">
      <summary>Object Verb List 5</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ObjectVerbList6">
      <summary>Object Verb List 6</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ObjectVerbList7">
      <summary>Object Verb List 7</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ObjectVerbList8">
      <summary>Object Verb List 8</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ObjectVerbList9">
      <summary>Object Verb List 9</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ConvertObject">
      <summary>Convert object</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.CustomControl">
      <summary>Custom control</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.CustomizeItem">
      <summary>Customize item</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Rename">
      <summary>Rename</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Import">
      <summary>Import</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.NewPage">
      <summary>New Page</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Move">
      <summary>Move</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Cancel">
      <summary>Cancel</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Font">
      <summary>Font</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ExpandLinks">
      <summary>Expand Links</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ExpandImages">
      <summary>Expand Images</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ExpandPages">
      <summary>Expand Pages</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.RefocusDiagram">
      <summary>Refocus Diagram</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TransitiveClosure">
      <summary>Transitive Closure</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.CenterDiagram">
      <summary>Center diagram</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ZoomIn">
      <summary>Zoom In</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ZoomOut">
      <summary>Zoom Out</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.RemoveFilter">
      <summary>Remove Filter</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.HidePane">
      <summary>Hide Pane</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.DeleteTable">
      <summary>Delete Table</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.DeleteRelationship">
      <summary>Delete Relationship</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Remove">
      <summary>Remove</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.JoinLeftAll">
      <summary>Left Join All</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.JoinRightAll">
      <summary>Right Join All</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AddToOutput">
      <summary>Add selected fields to query output.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.OtherQuery">
      <summary>Change query type to "other".</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.GenerateChangeScript">
      <summary>Generate a change script.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.SaveSelection">
      <summary>Save Selection</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AutojoinCurrent">
      <summary>Autojoin current tables.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AutojoinAlways">
      <summary>Autojoin Always</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.EditPage">
      <summary>Launch editor for URL.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ViewLinks">
      <summary>Launch new webscope for URL.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Stop">
      <summary>Stop webscope rendering.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Pause">
      <summary>Pause</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Resume">
      <summary>Resume webscope rendering.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.FilterDiagram">
      <summary>Filter webscope diagram.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShowAllObjects">
      <summary>Show all objects in webscope diagram.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShowApplications">
      <summary>Show Application objects in webscope diagram.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShowOtherObjects">
      <summary>Show other objects in webscope diagram.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShowPrimRelationships">
      <summary>Show primary relationships.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Expand">
      <summary>Expand links.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Collapse">
      <summary>Collapse links.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Refresh">
      <summary>Refresh webscope diagram.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Layout">
      <summary>Layout webscope diagram.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShowResources">
      <summary>Show resource objects in webscope diagram.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.InsertHTMLWizard">
      <summary>Insert HTML using a Wizard.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShowDownloads">
      <summary>Show download objects in webscope diagram.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShowExternals">
      <summary>Show external objects in webscope diagram.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShowInBoundLinks">
      <summary>Show inbound links in webscope diagram.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShowOutBoundLinks">
      <summary>Show outbound links in webscope diagram.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShowInAndOutBoundLinks">
      <summary>Show inbound and outbound links in webscope diagram.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Preview">
      <summary>Preview page.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Open">
      <summary>Open.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.OpenWith">
      <summary>Open with.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShowPages">
      <summary>Show HTML pages.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.RunQuery">
      <summary>Run a query.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ClearQuery">
      <summary>Clear a query's associated cursor.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.RecordFirst">
      <summary>Go to first record in set.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.RecordLast">
      <summary>Go to last record in set.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.RecordNext">
      <summary>Go to the next record in set.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.RecordPrevious">
      <summary>Go to previous record in set.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.RecordGoto">
      <summary>Go to record via dialog.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.RecordNew">
      <summary>Add a record to set.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.InsertNewMenu">
      <summary>Insert menu using menu designer.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.InsertSeparator">
      <summary>Insert separator using menu designer.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.EditMenuNames">
      <summary>Edit menu names with menu designer.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.DebugExplorer">
      <summary>Debug explorer</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.DebugProcesses">
      <summary>Debug processes</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ViewThreadsWindow">
      <summary>View Threads Window</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.WindowUIList">
      <summary>Window UI List</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.NewProject">
      <summary>Command id:"New Project" on File menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.OpenProject">
      <summary>Command id:"Open Project" on File menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.OpenProjectFromWeb">
      <summary>Command id:"Open Project From Web" on File menu</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.OpenSolution">
      <summary>Command id:"Open Solution" on File menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.CloseSolution">
      <summary>Command id for: "Close Solution".</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.FileNew">
      <summary>Command id:"File New" on File menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.NewProjectFromExisting">
      <summary>Command id:"New Project From Existing" on File menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.FileOpen">
      <summary>Command id:"File Open" on File menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.FileOpenFromWeb">
      <summary>Command id:"File Open From Web" on File menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.FileClose">
      <summary>Command id:"File Close" on File menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.SaveSolution">
      <summary>Command id:"Save Solution" on File menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.SaveSolutionAs">
      <summary>Command id:"Save Solution As" on File menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.SaveProjectItemAs">
      <summary>Command id:"Save Project Item As" on File menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.PageSetup">
      <summary>Command id:"Page Setup" on File menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.PrintPreview">
      <summary>Command id:"Print Preview" on File menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Exit">
      <summary>Command id:"Exit" on File menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Replace">
      <summary>Command id:"Replace" on Edit menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Goto">
      <summary>Command id:"Go To" on Edit menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.PropertyPages">
      <summary>Command id:"Property Pages" on View menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.FullScreen">
      <summary>Command id:"Full Screen" on View menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ProjectExplorer">
      <summary>Command id:"Project Explorer" on View menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.PropertiesWindow">
      <summary>Properties Window</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListWindow">
      <summary>Command id:"Task List Window" on View menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.OutputWindow">
      <summary>Command id:"Output Window" on View menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ObjectBrowser">
      <summary>Command id:"Object Browser" on View menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.DocOutlineWindow">
      <summary>Command id:"Document Outline Window" on View menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ImmediateWindow">
      <summary>Command id:"Immediate Window" on View menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.WatchWindow">
      <summary>Command id:"Watch Window" on View menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.LocalsWindow">
      <summary>Command id:"Locals Window" on View menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.CallStack">
      <summary>Command id:"Call Stack" on View menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AutosWindow">
      <summary>Command id:"Autos Window" on View menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ThisWindow">
      <summary>Command id:"This Window" on View menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AddNewItem">
      <summary>Command id:"Add New Item" on Project menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AddExistingItem">
      <summary>Command id:"Add Existing Item" on Project menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.NewFolder">
      <summary>Command id:"New Folder" on Project menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.SetStartupProject">
      <summary>Command id:"Set as StartUp Project" on Project menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ProjectSettings">
      <summary>Command id:"Project Settings" on Project menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ProjectReferences">
      <summary>Command id:"Project References" on Project menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.StepInto">
      <summary>Command id:"Step Into" on Debug menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.StepOver">
      <summary>Command id:"Step Over" on Debug menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.StepOut">
      <summary>Command id:"Step Out" on Debug menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.RunToCursor">
      <summary>Command id:"Run To Cursor" on Debug menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AddWatch">
      <summary>Command id:"Add Watch" on Debug menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.EditWatch">
      <summary>Command id:"Edit Watch" on Debug menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.QuickWatch">
      <summary>Command id:"Quick Watch" on Debug menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ToggleBreakpoint">
      <summary>Command id:"Toggle Breakpoint" on Debug menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ClearBreakpoints">
      <summary>Command id for: "Clear Breakpoints" on Debug menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShowBreakpoints">
      <summary>Command id:"Show Breakpoints" on Debug menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.SetNextStatement">
      <summary>Command id:"Set Next Statement" on Debug menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShowNextStatement">
      <summary>Command id:"Show Next Statement" on Debug menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.EditBreakpoint">
      <summary>Command id:"Edit Breakpoint" on Debug menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.DetachDebugger">
      <summary>Command id: "Detach Debugger" on Debug menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.CustomizeKeyboard">
      <summary>Command id: "Customize Keyboard" on Tools menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ToolsOptions">
      <summary>Command id:"Tools Options" on the Tools menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.NewWindow">
      <summary>Command id:"New Window" on Window menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Split">
      <summary>Command id:"Split" on Window menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Cascade">
      <summary>Command id:"Cascade" on Window menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TileHorz">
      <summary>Command id:"Tile Horizontal" on Window menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TileVert">
      <summary>Command id:"Tile Vertical" on Window menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TechSupport">
      <summary>Command id:"Technical Support" on Help menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.About">
      <summary>Open the About dialog box.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.DebugOptions">
      <summary>Debug options</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.DeleteWatch">
      <summary>Command id: "Delete Watch" on Watch context menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.CollapseWatch">
      <summary>Command id:"Collapse Watch" on Watch context menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.PbrsToggleStatus">
      <summary>Command id:"Property Browser Toggle Status" on Property Browser context menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.PropbrsHide">
      <summary>Command id:"Hide Property Browser" on Property Browser context menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.DockingView">
      <summary>Command id: "Docking View" on Docking context menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.HideActivePane">
      <summary>Command id:"Hide Active Pane" on Docking context menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.PaneNextPane">
      <summary>Command id:"Next Pane" for window selection via keyboard.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.PanePrevPane">
      <summary>Command id:"Previous Pane" for window selection via keyboard.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.PaneNextTab">
      <summary>Command id:"Next Tab" for window selection via keyboard.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.PanePrevTab">
      <summary>Command id:"Previous Pane" for window selection via keyboard.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.PaneCloseToolWindow">
      <summary>Command id:"Close Tool Window Pane" for window selection via keyboard.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.PaneActivateDocWindow">
      <summary>Command id:"Activate Document Window Pane" for window selection via keyboard.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.DockingViewMDI">
      <summary>Command id: "MDI Docking View" for window selection via keyboard.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.DockingViewFloater">
      <summary>Command id: "Dock Floating Window" for window selection via keyboard.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AutoHideWindow">
      <summary>Command id:"Autohide Window" for window selection via keyboard.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MoveToDropdownBar">
      <summary>Command id:"Move to Dropdown Bar" for window selection via keyboard.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.FindCmd">
      <summary>Find commond</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Start">
      <summary>Start</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Restart">
      <summary>Restart</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AddinManager">
      <summary>Addin Manager</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MultiLevelUndoList">
      <summary>Multi Level Undo List</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MultiLevelRedoList">
      <summary>Multi Level Redo List</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ToolboxAddTab">
      <summary>Add Toolbox Tab</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ToolboxDeleteTab">
      <summary>Delete Toolbox Tab</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ToolboxRenameTab">
      <summary>Rename Toolbox Tab</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ToolboxTabMoveUp">
      <summary>Toolbox Tab Move Up</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ToolboxTabMoveDown">
      <summary>Toolbox Tab Move Down</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ToolboxRenameItem">
      <summary>Rename Toolbox Item</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ToolboxListView">
      <summary>Toolbox List View</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.WindowUIGetList">
      <summary>Get Window UI List</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.InsertValuesQuery">
      <summary>Insert Values Query</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShowProperties">
      <summary>Show Properties</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ThreadSuspend">
      <summary>Suspend Thread</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ThreadResume">
      <summary>Resume Thread</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ThreadSetFocus">
      <summary>Set Focus on Thread</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.DisplayRadix">
      <summary>Display Radix</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.OpenProjectItem">
      <summary>Open Project Item</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ClearPane">
      <summary>Clear pane</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.GotoErrorTag">
      <summary>Go to Error Tag</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListSortByCategory">
      <summary>Sort Task List by Category</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListSortByFileLine">
      <summary>Sort Task List by File Line</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListSortByPriority">
      <summary>Sort Task List by Priority</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListSortByDefaultSort">
      <summary>Sort Task List by Default Sort Order</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListShowTooltip">
      <summary>Show Task List Tooltip</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListFilterByNothing">
      <summary>Filter Task List by Nothing</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.CancelEZDrag">
      <summary>Cancel drag</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListFilterByCategoryCompiler">
      <summary>Filter Task List by Compiler Category</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListFilterByCategoryComment">
      <summary>Filter Task List by Comment Category</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ToolboxAddItem">
      <summary>Add Toolbox Item</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ToolboxReset">
      <summary>Reset Toolbox</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.SaveProjectItem">
      <summary>Save Project Item</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.SaveOptions">
      <summary>Command id:"Save Options".</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ViewForm">
      <summary>View Form</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ViewCode">
      <summary>View Code</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.PreviewInBrowser">
      <summary>Preview in Browser</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.BrowseWith">
      <summary>Browse with</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.SearchSetCombo">
      <summary>Search Set Combo</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.SearchCombo">
      <summary>Search Combo</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.EditLabel">
      <summary>Edit Label</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Exceptions">
      <summary>Exceptions</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.DefineViews">
      <summary>Define views</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ToggleSelMode">
      <summary>Toggle Selection Mode</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ToggleInsMode">
      <summary>Toggle Insert Mode</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.LoadUnloadedProject">
      <summary>Load Unloaded Project</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.UnloadLoadedProject">
      <summary>Unload Loaded Project</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ElasticColumn">
      <summary>Elastic Column</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.HideColumn">
      <summary>Hide Column</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListPreviousView">
      <summary>Previous Task List View</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ZoomDialog">
      <summary>Zoom Dialog</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.FindHiddenText">
      <summary>Command id:"Find Hidden Text" in Find/Replace options.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.FindMatchCase">
      <summary>Command id:"Find Matching Case" in Find/Replace options.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.FindWholeWord">
      <summary>Command id:"Find Whole Word" in Find/Replace options.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.FindSimplePattern">
      <summary>Command id:"Find Simple Pattern" in Find/Replace options.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.FindRegularExpression">
      <summary>Command id:"Find Regular Expression" in Find/Replace options.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.FindBackwards">
      <summary>Command id:"Find Backwards" in Find/Replace options.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.FindInSelection">
      <summary>Command id:"Find in Selection" in Find/Replace options.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.FindStop">
      <summary>Command id:"Stop Find" in Find/Replace options.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.FindInFiles">
      <summary>Command id:"Find in Files" in Find/Replace options.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ReplaceInFiles">
      <summary>Replace in Files</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.NextLocation">
      <summary>Command id:"Next Location" in Task List, Find in Files results, and so on.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.PreviousLocation">
      <summary>Command id:"Previous Location" in Task List, Find in Files results, and so on.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.GotoQuick">
      <summary>Go to Quick Watch</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListNextError">
      <summary>Filter Task List by Next Error</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListPrevError">
      <summary>Filter Task List by Previous Error</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListFilterByCategoryUser">
      <summary>Filter Task List by User Category</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListFilterByCategoryShortcut">
      <summary>Filter Task List by Shortcut Category</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListFilterByCategoryHTML">
      <summary>Filter Task List by HTML Category</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListFilterByCurrentFile">
      <summary>Filter Task List by Current File</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListFilterByChecked">
      <summary>Filter Task List by Checked Items</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListFilterByUnchecked">
      <summary>Filter Task List by Unchecked Items</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListSortByDescription">
      <summary>Sort Task List by Description</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListSortByChecked">
      <summary>Sort Task List by Checked Items</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.StartNoDebug">
      <summary>Start No Debug Build</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.FindNext">
      <summary>Find Next</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.FindPrev">
      <summary>Find Previous</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.FindSelectedNext">
      <summary>Find Next Selected</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.FindSelectedPrev">
      <summary>Find Previous Selected</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.SearchGetList">
      <summary>Search Get List</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.InsertBreakpoint">
      <summary>Insert Breakpoint</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.EnableBreakpoint">
      <summary>Enable Breakpoint</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.F1Help">
      <summary>F1 Help</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MoveToNextEZCntr">
      <summary>Move to Next Container</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.UpdateMarkerSpans">
      <summary>Update Marker Spans</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MoveToPreviousEZCntr">
      <summary>Move to Previous Container</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ProjectProperties">
      <summary>Project Properties</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.PropSheetOrProperties">
      <summary>Property Sheet or Property Window</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TshellStep">
      <summary>For debugging only.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TshellRun">
      <summary>For debugging only.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MarkerCmd0">
      <summary>Marker command on the Code Window menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MarkerCmd1">
      <summary>Marker command on the Code Window menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MarkerCmd2">
      <summary>Marker command on the Code Window menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MarkerCmd3">
      <summary>Marker command on the Code Window menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MarkerCmd4">
      <summary>Marker command on the Code Window menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MarkerCmd5">
      <summary>Marker command on the Code Window menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MarkerCmd6">
      <summary>Marker command on the Code Window menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MarkerCmd7">
      <summary>Marker command on the Code Window menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MarkerCmd8">
      <summary>Marker command on the Code Window menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MarkerCmd9">
      <summary>Marker command on the Code Window menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MarkerLast">
      <summary>Marker command on the Code Window menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MarkerEnd">
      <summary>Marker command on the Code Window menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ReloadProject">
      <summary>User-invoked project reload.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.UnloadProject">
      <summary>User-invoked project unload.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.NewBlankSolution">
      <summary>New Blank Solution</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.SelectProjectTemplate">
      <summary>Select Project Template</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.DetachAttachOutline">
      <summary>Document Outline command.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShowHideOutline">
      <summary>Document outline command.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.SyncOutline">
      <summary>Document outline command.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.RunToCallstCursor">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.NoCmdsAvailable">
      <summary>No Commands Available</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ContextWindow">
      <summary>Context window</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Alias">
      <summary>Alias</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.GotoCommandLine">
      <summary>Goto Command Line</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.EvaluateExpression">
      <summary>Evaluate Expression</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ImmediateMode">
      <summary>Immediate Mode</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.EvaluateStatement">
      <summary>Evaluate Statement</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.FindResultWindow1">
      <summary>Find Result Window 1</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.FindResultWindow2">
      <summary>Find Result Window 2</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.RenameBookmark">
      <summary>Rename Bookmark</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ToggleBookmark">
      <summary>Toggle Bookmark</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.DeleteBookmark">
      <summary>Delete bookmark</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.BookmarkWindowGoToBookmark">
      <summary>Bookmark Window: Go to Bookmark</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.EnableBookmark">
      <summary>Enable Bookmark</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.NewBookmarkFolder">
      <summary>New Bookmark Folder</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.NextBookmarkFolder">
      <summary>Next Bookmark Folder</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.PrevBookmarkFolder">
      <summary>Previous Bookmark Folder</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Window1">
      <summary>Window 1 menu id.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Window2">
      <summary>Window 2 menu id.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Window3">
      <summary>Window 3 menu id.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Window4">
      <summary>Window 4 menu id.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Window5">
      <summary>Window 5 menu id.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Window6">
      <summary>Window 6 menu id.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Window7">
      <summary>Window 7 menu id.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Window8">
      <summary>Window 8 menu id.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Window9">
      <summary>Window 9 menu id.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Window10">
      <summary>Window 10 menu id.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Window11">
      <summary>Window 11 menu id.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Window12">
      <summary>Window 12 menu id.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Window13">
      <summary>Window 13 menu id.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Window14">
      <summary>Window 14 menu id.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Window15">
      <summary>Window 15 menu id.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Window16">
      <summary>Window 16 menu id.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Window17">
      <summary>Window 17 menu id.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Window18">
      <summary>Window 18 menu id.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Window19">
      <summary>Window 19 menu id.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Window20">
      <summary>Window 20 menu id.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Window21">
      <summary>Window 21 menu id.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Window22">
      <summary>Window 22 menu id.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Window23">
      <summary>Window 23 menu id.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Window24">
      <summary>Window 24 menu id.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Window25">
      <summary>Window 25 menu id.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MoreWindows">
      <summary>Window menu id.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AutoHideAllWindows">
      <summary>Autohide All Windows</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListTaskHelp">
      <summary>Task List Task Help</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ClassView">
      <summary>Class view</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MRUProj1">
      <summary>Command id:most recently used project 1</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MRUProj2">
      <summary>Command id:most recently used project 2</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MRUProj3">
      <summary>Command id:most recently used project 3</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MRUProj4">
      <summary>Command id:most recently used project 4</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MRUProj5">
      <summary>Command id:most recently used project 5</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MRUProj6">
      <summary>Command id:most recently used project 6</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MRUProj7">
      <summary>Command id:most recently used project 7</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MRUProj8">
      <summary>Command id:most recently used project 8</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MRUProj9">
      <summary>Command id:most recently used project 9</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MRUProj10">
      <summary>Command id:most recently used project 10</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MRUProj11">
      <summary>Command id:most recently used project 11</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MRUProj12">
      <summary>Command id:most recently used project 12</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MRUProj13">
      <summary>Command id:most recently used project 13</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MRUProj14">
      <summary>Command id:most recently used project 14</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MRUProj15">
      <summary>Command id:most recently used project 15</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MRUProj16">
      <summary>Command id:most recently used project 16</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MRUProj17">
      <summary>Command id:most recently used project 17</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MRUProj18">
      <summary>Command id:most recently used project 18</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MRUProj19">
      <summary>Command id:most recently used project 19</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MRUProj20">
      <summary>Command id:most recently used project 20</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MRUProj21">
      <summary>Command id:most recently used project 21</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MRUProj22">
      <summary>Command id:most recently used project 22</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MRUProj23">
      <summary>Command id:most recently used project 23</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MRUProj24">
      <summary>Command id:most recently used project 24</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MRUProj25">
      <summary>Command id:most recently used project 26</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.SplitNext">
      <summary>Split Next</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.SplitPrev">
      <summary>Split Previous</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.CloseAllDocuments">
      <summary>Close all documents</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.NextDocument">
      <summary>Next Document</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.PrevDocument">
      <summary>Previous Document</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Tool1">
      <summary>Tool 1</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Tool2">
      <summary>Tool 2</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Tool3">
      <summary>Tool 3</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Tool4">
      <summary>Tool 4</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Tool5">
      <summary>Tool 5</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Tool6">
      <summary>Tool 6</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Tool7">
      <summary>Tool 7</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Tool8">
      <summary>Tool 8</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Tool9">
      <summary>Tool 9</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Tool10">
      <summary>Tool 10</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Tool11">
      <summary>Tool 11</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Tool12">
      <summary>Tool 12</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Tool13">
      <summary>Tool 13</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Tool14">
      <summary>Tool 14</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Tool15">
      <summary>Tool 15</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Tool16">
      <summary>Tool 16</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Tool17">
      <summary>Tool 17</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Tool18">
      <summary>Tool 18</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Tool19">
      <summary>Tool 19</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Tool20">
      <summary>Tool 20</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Tool21">
      <summary>Tool 21</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Tool22">
      <summary>Tool 22</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Tool23">
      <summary>Tool 23</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Tool24">
      <summary>Tool 24</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ExternalCommands">
      <summary>External Commands</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.PasteNextTBXCBItem">
      <summary>Paste Next TBXCB Item</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ToolboxShowAllTabs">
      <summary>Show All Toolbox Tabs</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ProjectDependencies">
      <summary>Project Dependencies</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.CloseDocument">
      <summary>Close documents</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ToolboxSortItems">
      <summary>Sort Toolbox Items</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ViewBarView1">
      <summary>Unused.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ViewBarView2">
      <summary>Unused.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ViewBarView3">
      <summary>Unused.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ViewBarView4">
      <summary>Unused.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ViewBarView5">
      <summary>Unused.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ViewBarView6">
      <summary>Unused.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ViewBarView7">
      <summary>Unused.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ViewBarView8">
      <summary>Unused.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ViewBarView9">
      <summary>Unused.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ViewBarView10">
      <summary>Unused.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ViewBarView11">
      <summary>Unused.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ViewBarView12">
      <summary>Unused.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ViewBarView13">
      <summary>Unused.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ViewBarView14">
      <summary>Unused.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ViewBarView15">
      <summary>Unused.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ViewBarView16">
      <summary>Unused.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ViewBarView17">
      <summary>Unused.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ViewBarView18">
      <summary>Unused.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ViewBarView19">
      <summary>Unused.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ViewBarView20">
      <summary>Unused.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ViewBarView21">
      <summary>Unused.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ViewBarView22">
      <summary>Unused.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ViewBarView23">
      <summary>Unused.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ViewBarView24">
      <summary>Unused.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.SolutionCfg">
      <summary>Solution Configuration</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.SolutionCfgGetList">
      <summary>Get Solution Configuration List</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ManageIndexes">
      <summary>Schema table command: Manage Indexes</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ManageRelationships">
      <summary>Schema table command: Manage Relationships</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ManageConstraints">
      <summary>Schema table command: Manage Constraints</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListCustomView1">
      <summary>Task List Custom View 1</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListCustomView2">
      <summary>Task List Custom View 2</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListCustomView3">
      <summary>Task List Custom View 3</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListCustomView4">
      <summary>Task List Custom View 4</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListCustomView5">
      <summary>Task List Custom View 5</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListCustomView6">
      <summary>Task List Custom View 6</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListCustomView7">
      <summary>Task List Custom View 7</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListCustomView8">
      <summary>Task List Custom View 8</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListCustomView9">
      <summary>Task List Custom View 9</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListCustomView10">
      <summary>Task List Custom View 10</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListCustomView11">
      <summary>Task List Custom View 11</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListCustomView12">
      <summary>Task List Custom View 12</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListCustomView13">
      <summary>Task List Custom View 13</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListCustomView14">
      <summary>Task List Custom View 14</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListCustomView15">
      <summary>Task List Custom View 15</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListCustomView16">
      <summary>Task List Custom View 16</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListCustomView17">
      <summary>Task List Custom View 17</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListCustomView18">
      <summary>Task List Custom View 18</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListCustomView19">
      <summary>Task List Custom View 19</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListCustomView20">
      <summary>Task List Custom View 20</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListCustomView21">
      <summary>Task List Custom View 21</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListCustomView22">
      <summary>Task List Custom View 22</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListCustomView23">
      <summary>Task List Custom View 23</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListCustomView24">
      <summary>Task List Custom View 24</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListCustomView25">
      <summary>Task List Custom View 25</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListCustomView26">
      <summary>Task List Custom View 26</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListCustomView27">
      <summary>Task List Custom View 27</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListCustomView28">
      <summary>Task List Custom View 28</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListCustomView29">
      <summary>Task List Custom View 29</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListCustomView30">
      <summary>Task List Custom View 30</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListCustomView31">
      <summary>Task List Custom View 31</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListCustomView32">
      <summary>Task List Custom View 32</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListCustomView33">
      <summary>Task List Custom View 33</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListCustomView34">
      <summary>Task List Custom View 34</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListCustomView35">
      <summary>Task List Custom View 35</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListCustomView36">
      <summary>Task List Custom View 36</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListCustomView37">
      <summary>Task List Custom View 37</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListCustomView38">
      <summary>Task List Custom View 38</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListCustomView39">
      <summary>Task List Custom View 39</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListCustomView40">
      <summary>Task List Custom View 40</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListCustomView41">
      <summary>Task List Custom View 41</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListCustomView42">
      <summary>Task List Custom View 42</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListCustomView43">
      <summary>Task List Custom View 43</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListCustomView44">
      <summary>Task List Custom View 44</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListCustomView45">
      <summary>Task List Custom View 45</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListCustomView46">
      <summary>Task List Custom View 46</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListCustomView47">
      <summary>Task List Custom View 47</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListCustomView48">
      <summary>Task List Custom View 48</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListCustomView49">
      <summary>Task List Custom View 49</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaskListCustomView50">
      <summary>Task List Custom View 50</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.WhiteSpace">
      <summary>Whitespace</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.CommandWindow">
      <summary>Command window</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.CommandWindowMarkMode">
      <summary>Command window: mark mode</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.LogCommandWindow">
      <summary>Log Command Window</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Shell">
      <summary>Shell</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.SingleChar">
      <summary>Single Character</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ZeroOrMore">
      <summary>Zero or More</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.OneOrMore">
      <summary>Select One or More</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.BeginLine">
      <summary>Begin Line</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.EndLine">
      <summary>End Line</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.BeginWord">
      <summary>Begin Word</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.EndWord">
      <summary>End Word</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.CharInSet">
      <summary>Character in set</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.CharNotInSet">
      <summary>Character not in set</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Or">
      <summary>Or</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Escape">
      <summary>Escape</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TagExp">
      <summary>Tag Expression</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.PatternMatchHelp">
      <summary>Regular expression builder context help menu command id: "Pattern Match Help"</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.RegExList">
      <summary>Regular expression builder context help menu command id: "Regular Expression List".</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.DebugReserved1">
      <summary>Reserved</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.DebugReserved2">
      <summary>Reserved</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.DebugReserved3">
      <summary>Reserved</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.WildZeroOrMore">
      <summary>Regular expression builder wildcard menu command id:</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.WildSingleChar">
      <summary>Regular expression builder wildcard menu command id: "Single Wild Character"</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.WildSingleDigit">
      <summary>Regular expression builder wildcard menu command id: "Wild Single Digit".</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.WildCharInSet">
      <summary>Regular expression builder wildcard menu command id: "Wild Character in Set".</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.WildCharNotInSet">
      <summary>Regular expression builder wildcard menu command id: "Wild Character Not in Set".</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.FindWhatText">
      <summary>Find What Text</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaggedExp1">
      <summary>Tagged Expression 1</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaggedExp2">
      <summary>Tagged Expression 2</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaggedExp3">
      <summary>Tagged Expression 3</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaggedExp4">
      <summary>Tagged Expression 4</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaggedExp5">
      <summary>Tagged Expression 5</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaggedExp6">
      <summary>Tagged Expression 6</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaggedExp7">
      <summary>Tagged Expression 7</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaggedExp8">
      <summary>Tagged Expression 8</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.TaggedExp9">
      <summary>Tagged Expression9</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.EditorWidgetClick">
      <summary>Editor Widget Click</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.CmdWinUpdateAC">
      <summary>CmdWinUpdateAC</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.SlnCfgMgr">
      <summary>Solution Configuration Manager</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AddNewProject">
      <summary>Add New Project</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AddExistingProject">
      <summary>Add an existing project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AddExistingProjFromWeb">
      <summary>Add an existing web project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AutoHideContext1">
      <summary>Autohide Context 1</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AutoHideContext2">
      <summary>Autohide Context 2</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AutoHideContext3">
      <summary>Autohide Context 3</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AutoHideContext4">
      <summary>Autohide Context 4</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AutoHideContext5">
      <summary>Autohide Context 5</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AutoHideContext6">
      <summary>Autohide Context 6</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AutoHideContext7">
      <summary>Autohide Context 7</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AutoHideContext8">
      <summary>Autohide Context 8</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AutoHideContext9">
      <summary>Autohide Context 9</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AutoHideContext10">
      <summary>Autohide Context 10</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AutoHideContext11">
      <summary>Autohide Context 11</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AutoHideContext12">
      <summary>Autohide Context 12</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AutoHideContext13">
      <summary>Autohide Context 13</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AutoHideContext14">
      <summary>Autohide Context 14</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AutoHideContext15">
      <summary>Autohide Context 15</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AutoHideContext16">
      <summary>Autohide Context 16</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AutoHideContext17">
      <summary>Autohide Context 17</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AutoHideContext18">
      <summary>Autohide Context 18</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AutoHideContext19">
      <summary>Autohide Context 19</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AutoHideContext20">
      <summary>Autohide Context 20</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AutoHideContext21">
      <summary>Autohide Context 21</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AutoHideContext22">
      <summary>Autohide Context 22</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AutoHideContext23">
      <summary>Autohide Context 23</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AutoHideContext24">
      <summary>Autohide Context 24</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AutoHideContext25">
      <summary>Autohide Context 25</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AutoHideContext26">
      <summary>Autohide Context 26</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AutoHideContext27">
      <summary>Autohide Context 27</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AutoHideContext28">
      <summary>Autohide Context 28</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AutoHideContext29">
      <summary>Autohide Context 29</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AutoHideContext30">
      <summary>Autohide Context 30</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AutoHideContext31">
      <summary>Autohide Context 31</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AutoHideContext32">
      <summary>Autohide Context 32</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AutoHideContext33">
      <summary>Autohide Context 33</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellNavBackward">
      <summary>Shell Navigate Backward</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellNavForward">
      <summary>Shell Navigate Forward</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellNavigate1">
      <summary>Shell Navigate 1</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellNavigate2">
      <summary>Shell Navigate 2</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellNavigate3">
      <summary>Shell Navigate 3</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellNavigate4">
      <summary>Shell Navigate 4</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellNavigate5">
      <summary>Shell Navigate 5</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellNavigate6">
      <summary>Shell Navigate 6</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellNavigate7">
      <summary>Shell Navigate 7</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellNavigate8">
      <summary>Shell Navigate 8</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellNavigate9">
      <summary>Shell Navigate 9</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellNavigate10">
      <summary>Shell Navigate 10</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellNavigate11">
      <summary>Shell Navigate 11</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellNavigate12">
      <summary>Shell Navigate 12</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellNavigate13">
      <summary>Shell Navigate 13</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellNavigate14">
      <summary>Shell Navigate 14</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellNavigate15">
      <summary>Shell Navigate 15</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellNavigate16">
      <summary>Shell Navigate 16</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellNavigate17">
      <summary>Shell Navigate 17</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellNavigate18">
      <summary>Shell Navigate 18</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellNavigate19">
      <summary>Shell Navigate 19</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellNavigate20">
      <summary>Shell Navigate 20</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellNavigate21">
      <summary>Shell Navigate 21</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellNavigate22">
      <summary>Shell Navigate 22</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellNavigate23">
      <summary>Shell Navigate 23</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellNavigate24">
      <summary>Shell Navigate 24</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellNavigate25">
      <summary>Shell Navigate 25</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellNavigate26">
      <summary>Shell Navigate 26</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellNavigate27">
      <summary>Shell Navigate 27</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellNavigate28">
      <summary>Shell Navigate 28</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellNavigate29">
      <summary>Shell Navigate 29</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellNavigate30">
      <summary>Shell Navigate 30</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellNavigate31">
      <summary>Shell Navigate 31</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellNavigate32">
      <summary>Shell Navigate 32</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellNavigate33">
      <summary>Shell Navigate 33</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellWindowNavigate1">
      <summary>Shell Window Navigate 1</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellWindowNavigate2">
      <summary>Shell Window Navigate 2</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellWindowNavigate3">
      <summary>Shell Window Navigate 3</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellWindowNavigate4">
      <summary>Shell Window Navigate 4</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellWindowNavigate5">
      <summary>Shell Window Navigate 5</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellWindowNavigate6">
      <summary>Shell Window Navigate 6</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellWindowNavigate7">
      <summary>Shell Window Navigate 7</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellWindowNavigate8">
      <summary>Shell Window Navigate 8</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellWindowNavigate9">
      <summary>Shell Window Navigate 9</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellWindowNavigate10">
      <summary>Shell Window Navigate 10</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellWindowNavigate11">
      <summary>Shell Window Navigate 11</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellWindowNavigate12">
      <summary>Shell Window Navigate 12</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellWindowNavigate13">
      <summary>Shell Window Navigate 13</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellWindowNavigate14">
      <summary>Shell Window Navigate 14</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellWindowNavigate15">
      <summary>Shell Window Navigate 15</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellWindowNavigate16">
      <summary>Shell Window Navigate 16</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellWindowNavigate17">
      <summary>Shell Window Navigate 17</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellWindowNavigate18">
      <summary>Shell Window Navigate 18</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellWindowNavigate19">
      <summary>Shell Window Navigate 19</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellWindowNavigate20">
      <summary>Shell Window Navigate 20</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellWindowNavigate21">
      <summary>Shell Window Navigate 21</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellWindowNavigate22">
      <summary>Shell Window Navigate 22</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellWindowNavigate23">
      <summary>Shell Window Navigate 23</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellWindowNavigate24">
      <summary>Shell Window Navigate 24</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellWindowNavigate25">
      <summary>Shell Window Navigate 25</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellWindowNavigate26">
      <summary>Shell Window Navigate 26</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellWindowNavigate27">
      <summary>Shell Window Navigate 27</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellWindowNavigate28">
      <summary>Shell Window Navigate 28</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellWindowNavigate29">
      <summary>Shell Window Navigate 29</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellWindowNavigate30">
      <summary>Shell Window Navigate 30</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellWindowNavigate31">
      <summary>Shell Window Navigate 31</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellWindowNavigate32">
      <summary>Shell Window Navigate 32</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShellWindowNavigate33">
      <summary>Shell Window Navigate 33</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.OBSDoFind">
      <summary>Object Browser command id: Do Find </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.OBSMatchCase">
      <summary>Object Browser command id: Match case</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.OBSMatchSubString">
      <summary>Object Browser command id: Match Substring</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.OBSMatchWholeWord">
      <summary>Object Browser command id: Match Whole Word</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.OBSMatchPrefix">
      <summary>Object Browser command id: Match Prefix</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.BuildSln">
      <summary>Build solution</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.RebuildSln">
      <summary>Rebuild Solution.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.DeploySln">
      <summary>Build command: Deploy Solution</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.CleanSln">
      <summary>Build command id: Clean Solution</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.BuildSel">
      <summary>Build selection</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.RebuildSel">
      <summary>Rebuild Selection</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.DeploySel">
      <summary>Build command: Deploy Selection</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.CleanSel">
      <summary>Build command: Clean Selection</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.CancelBuild">
      <summary>Cancel build</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.BatchBuildDlg">
      <summary>Batch Build Dialog</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.BuildCtx">
      <summary>Build control</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.RebuildCtx">
      <summary>Rebuild Control</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.DeployCtx">
      <summary>Build command: Deploy Control</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.CleanCtx">
      <summary>Build command: Clean context</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.QryManageIndexes">
      <summary>Manage Query Indexes</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.PrintDefault">
      <summary>Command id: Print Default (quick print)</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.BrowseDoc">
      <summary>Browse document</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShowStartPage">
      <summary>Show Start Page</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MRUFile1">
      <summary>Command id:most recently used file 1</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MRUFile2">
      <summary>Command id:most recently used file 2</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MRUFile3">
      <summary>Command id:most recently used file 3</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MRUFile4">
      <summary>Command id:most recently used file 4</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MRUFile5">
      <summary>Command id:most recently used file 5</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MRUFile6">
      <summary>Command id:most recently used file 6</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MRUFile7">
      <summary>Command id:most recently used file 7</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MRUFile8">
      <summary>Command id:most recently used file 8</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MRUFile9">
      <summary>Command id:most recently used file 9</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MRUFile10">
      <summary>Command id:most recently used file 10</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MRUFile11">
      <summary>Command id:most recently used file 11</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MRUFile12">
      <summary>Command id:most recently used file 12</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MRUFile13">
      <summary>Command id:most recently used file 13</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MRUFile14">
      <summary>Command id:most recently used file 14</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MRUFile15">
      <summary>Command id:most recently used file 15</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MRUFile16">
      <summary>Command id:most recently used file 16</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MRUFile17">
      <summary>Command id:most recently used file 17</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MRUFile18">
      <summary>Command id:most recently used file 18</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MRUFile19">
      <summary>Command id:most recently used file 19</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MRUFile20">
      <summary>Command id:most recently used file 20</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MRUFile21">
      <summary>Command id:most recently used file 21</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MRUFile22">
      <summary>Command id:most recently used file 22</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MRUFile23">
      <summary>Command id:most recently used file 23</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MRUFile24">
      <summary>Command id:most recently used file 24</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MRUFile25">
      <summary>Command id:most recently used file 25</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ExtToolsCurPath">
      <summary>External Tools context menu command: Current Path</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ExtToolsCurDir">
      <summary>External Tools context menu command: Current Directory</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ExtToolsCurFileName">
      <summary>External Tools context menu command: Current Filename</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ExtToolsCurExtension">
      <summary>External Tools context menu command: Current Extension</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ExtToolsProjDir">
      <summary>External Tools context menu command: Current Project Directory</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ExtToolsProjFileName">
      <summary>External Tools context menu command: Current Project Filename</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ExtToolsSlnDir">
      <summary>External Tools context menu command: Solution Directory</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ExtToolsSlnFileName">
      <summary>External Tools context menu command: Solution Filename</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.GotoDefn">
      <summary>Object browser / Class View command: Go to Definition</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.GotoDecl">
      <summary>Object browser / Class View commandcommand: Go to Declaration</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.BrowseDefn">
      <summary>Object browser / Class View command: Browse Definition</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.SyncClassView">
      <summary>Object browser / Class View command: Sync Class View</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShowMembers">
      <summary>Object browser/ Class View command: Show Members</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShowBases">
      <summary>Object browser / Class View commandcommand: Show Bases</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShowDerived">
      <summary>Object browser / Class View commandcommand: Show Derived</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShowDefns">
      <summary>Object browser / Class View commandcommand: Show Definitions</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShowRefs">
      <summary>Object browser / Class View commandcommand: Show References</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShowCallers">
      <summary>Object browser / Class View commandcommand: Show Callers</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShowCallees">
      <summary>Object browser / Class View commandcommand: Show Callees</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AddClass">
      <summary>Add a class.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AddNestedClass">
      <summary>Add Nested Class</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AddInterface">
      <summary>Add Interface</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AddMethod">
      <summary>Add Method</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AddProperty">
      <summary>Add Property</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AddEvent">
      <summary>Add an event.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AddVariable">
      <summary>Add Variable</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ImplementInterface">
      <summary>Implement Interface</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Override">
      <summary>Override</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AddFunction">
      <summary>Add a function.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AddConnectionPoint">
      <summary>Add a connection point.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.AddIndexer">
      <summary>Add an indexer.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.BuildOrder">
      <summary>Build order</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.OBShowHidden">
      <summary>Object Browser command id: Show Hidden</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.OBEnableGrouping">
      <summary>Object Browser command: Enable Grouping</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.OBSetGroupingCriteria">
      <summary>Object Browser command id: Set Grouping Criteria</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.OBBack">
      <summary>Object Browser command: Back</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.OBForward">
      <summary>Object Browser command: Forward</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.OBShowPackages">
      <summary>Object Browser command id: Show Packages</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.OBSearchCombo">
      <summary>Object Browser command id: Search Combo</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.OBSearchOptWholeWord">
      <summary>Object Browser command id: Search Whole Word option</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.OBSearchOptSubstring">
      <summary>Object Browser command id: Search substring option</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.OBSearchOptPrefix">
      <summary>Object Browser command id: Search prefix option</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.OBSearchOptCaseSensitive">
      <summary>Object Browser command id: Case-sensitive search</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.CVGroupingNone">
      <summary>Class View command: No Grouping</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.CVGroupingSortOnly">
      <summary>Class View command: Sort Only Grouping</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.CVGroupingGrouped">
      <summary>Class View command: Grouped</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.CVShowPackages">
      <summary>Class View command: Show Packages</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.CVNewFolder">
      <summary>Class View command: New Folder</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.CVGroupingSortAccess">
      <summary>Class View command: Group by Access</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ObjectSearch">
      <summary>Object Search</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ObjectSearchResults">
      <summary>Object Search Results</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Build1">
      <summary>Build cascade menus: Build 1</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Build2">
      <summary>Build cascade menus: Build 2</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Build3">
      <summary>Build cascade menus: Build 3</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Build4">
      <summary>Build cascade menus: Build 4</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Build5">
      <summary>Build cascade menus: Build 5</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Build6">
      <summary>Build cascade menus: Build 6</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Build7">
      <summary>Build cascade menus: Build 7</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Build8">
      <summary>Build cascade menus: Build 8</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Build9">
      <summary>Build cascade menus: Build 9</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.BuildLast">
      <summary>Build last</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Rebuild1">
      <summary>Rebuild 1</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Rebuild2">
      <summary>Rebuild 2</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Rebuild3">
      <summary>Rebuild 3</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Rebuild4">
      <summary>Rebuild 4</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Rebuild5">
      <summary>Rebuild 5</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Rebuild6">
      <summary>Rebuild 6</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Rebuild7">
      <summary>Rebuild 7</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Rebuild8">
      <summary>Rebuild 8</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Rebuild9">
      <summary>Rebuild 9</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.RebuildLast">
      <summary>Rebuild Last</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Clean1">
      <summary>Build command: Clean 1</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Clean2">
      <summary>Build command: Clean 2</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Clean3">
      <summary>Build command: Clean 3</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Clean4">
      <summary>Build command: Clean 4</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Clean5">
      <summary>Build command: Clean 5</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Clean6">
      <summary>Build command: Clean 6</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Clean7">
      <summary>Build command: Clean 7</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Clean8">
      <summary>Build command: Clean 8</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Clean9">
      <summary>Build command: Clean 9</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.CleanLast">
      <summary>Build command: Clean Last</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Deploy1">
      <summary>Build command: Deploy 1</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Deploy2">
      <summary>Build command: Deploy 2</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Deploy3">
      <summary>Build command: Deploy 3</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Deploy4">
      <summary>Build command: Deploy 4</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Deploy5">
      <summary>Build command: Deploy 5</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Deploy6">
      <summary>Build command: Deploy 6</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Deploy7">
      <summary>Build command: Deploy 7</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Deploy8">
      <summary>Build command: Deploy 8</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Deploy9">
      <summary>Build command: Deploy 9</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.DeployLast">
      <summary>Build command: Deploy Last</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.BuildProjPicker">
      <summary>Build project pickre</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.RebuildProjPicker">
      <summary>Rebuild Project Picker</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.CleanProjPicker">
      <summary>Build command: Clean Project Picker</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.DeployProjPicker">
      <summary>Build command: Deploy Project Picker</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ResourceView">
      <summary>Resource View</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ShowHomePage">
      <summary>Show Home Page</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.EditMenuIDs">
      <summary>Edit Menu IDs</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.LineBreak">
      <summary>Break Line</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.CPPIdentifier">
      <summary>C++ identifier</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.QuotedString">
      <summary>Quoted String</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.SpaceOrTab">
      <summary>Space or Tab</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Integer">
      <summary>Integer</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.CustomizeToolbars">
      <summary>Customize toolbars</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MoveToTop">
      <summary>Move To Top</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.WindowHelp">
      <summary>Window Help</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ViewPopup">
      <summary>View Popup</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.CheckMnemonics">
      <summary>Check mnemonics</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.PRSortAlphabeticaly">
      <summary>Sort Properties Alphabetically. Note: "Alphabeticaly" is misspelled in enumeration member.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.PRSortByCategory">
      <summary>Sort Properties by Category</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ViewNextTab">
      <summary>View Next Tab</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.CheckForUpdates">
      <summary>Check for updates</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Browser1">
      <summary>Browser 1</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Browser2">
      <summary>Browser 2</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Browser3">
      <summary>Browser 3</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Browser4">
      <summary>Browser 4</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Browser5">
      <summary>Browser 5</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Browser6">
      <summary>Browser 6</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Browser7">
      <summary>Browser 7</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Browser8">
      <summary>Browser 8</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Browser9">
      <summary>Browser 9</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Browser10">
      <summary>Browser 10</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Browser11">
      <summary>Browser 11</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.OpenDropDownOpen">
      <summary>Open Drop Down Open</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.OpenDropDownOpenWith">
      <summary>Open Drop Down With</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ToolsDebugProcesses">
      <summary>Debug Process</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.PaneNextSubPane">
      <summary>Next Sub Pane</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.PanePrevSubPane">
      <summary>Previous Sub Pane</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MoveFileToProject1">
      <summary>Move File to Project 1</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MoveFileToProject2">
      <summary>Move File to Project 2</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MoveFileToProject3">
      <summary>Move File to Project 3</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MoveFileToProject4">
      <summary>Move File to Project 4</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MoveFileToProject5">
      <summary>Move File to Project 5</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MoveFileToProject6">
      <summary>Move File to Project 6</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MoveFileToProject7">
      <summary>Move File to Project 7</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MoveFileToProject8">
      <summary>Move File to Project 8</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MoveFileToProject9">
      <summary>Move File to Project 9</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MoveFileToProjectLast">
      <summary>Move File to Project Last</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.MoveFileToProjectPick">
      <summary>Move File to Project Pick</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.DefineSubset">
      <summary>Define subset</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.SubsetCombo">
      <summary>Subset Combo</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.SubsetGetList">
      <summary>Subset Get List</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.OBSortObjectsAlpha">
      <summary>Object Browser command id: Sort Objects Alphabetically</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.OBSortObjectsType">
      <summary>Object Browser command id: Sort Objects by Type</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.OBSortObjectsAccess">
      <summary>Object Browser command id: Sort by Object Access</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.OBGroupObjectsType">
      <summary>Object Browser command Group Objects by Type.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.OBGroupObjectsAccess">
      <summary>Object Browser command: Group Object by Access</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.OBSortMembersAlpha">
      <summary>Object Browser command id: Sort Members Alphabetically</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.OBSortMembersType">
      <summary>Object Browser command id: Sort by Member Type</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.OBSortMembersAccess">
      <summary>Object Browser command id: Sort by Member Access</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.PopBrowseContext">
      <summary>Pop Browse Context</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.GotoRef">
      <summary>Go to Reference</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.OBSLookInReferences">
      <summary>Object Browser command id: Look in References</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ExtToolsTargetPath">
      <summary>External Tools context menu command: Target Path</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ExtToolsTargetDir">
      <summary>External Tools context menu command: Target Directory</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ExtToolsTargetFileName">
      <summary>External Tools context menu command: Target Filename</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ExtToolsTargetExtension">
      <summary>External Tools context menu command: Target Extension</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ExtToolsCurLine">
      <summary>External Tools context menu command: Current Line</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ExtToolsCurCol">
      <summary>External Tools context menu command: Current Column</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ExtToolsCurText">
      <summary>External Tools context menu command: Current Text</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.BrowseNext">
      <summary>Browse next</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.BrowsePrev">
      <summary>Browse previous</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.BrowseUnload">
      <summary>Browse unload</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.QuickObjectSearch">
      <summary>Quick Object Search</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ExpandAll">
      <summary>Expand All</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ExtToolsBinDir">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.BookmarkWindow">
      <summary>Bookmark Window</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.CodeExpansionWindow">
      <summary>Code Expansion Window</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.NextDocumentNav">
      <summary>Navigate to Next Document</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.PrevDocumentNav">
      <summary>Navigate to Previous Document</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ForwardBrowseContext">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.StandardMax">
      <summary>Standard Maximum</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.FindReferences">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.FormsFirst">
      <summary>First Forms</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.FormsLast">
      <summary>Last Forms</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.VBEFirst">
      <summary>VB Editor First</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Zoom200">
      <summary>Zoom Factor 200%</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Zoom150">
      <summary>Zoom Factor 150%</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Zoom100">
      <summary>Zoom Factor 100%</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Zoom75">
      <summary>Zoom Factor 75%</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Zoom50">
      <summary>Zoom Factor 50%</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Zoom25">
      <summary>Zoom Factor 25%</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Zoom10">
      <summary>Zoom Factor 10%</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.VBELast">
      <summary>VB Editor Last</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.SterlingFirst">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.SterlingLast">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.uieventidFirst">
      <summary>First UI Event ID</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.uieventidSelectRegion">
      <summary>Select UI Event ID Region</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.uieventidDrop">
      <summary>Drop UI Event ID</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.uieventidLast">
      <summary>Last UI Event ID</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.VSConstants.VsTaskListView"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsTaskListView.All"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsTaskListView.CheckedTasks"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsTaskListView.CommentTasks"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsTaskListView.CompilerTasks"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsTaskListView.CurrentFileTasks"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsTaskListView.HTMLTasks"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsTaskListView.ShortcutTasks"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsTaskListView.UncheckedTasks"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsTaskListView.UserTasks"></member>
    <member name="T:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid.BufferStorage_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid.BufferStorage_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid.PropertyBrowserSID_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid.PropertyBrowserSID_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid.UserReadOnlyErrorString_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid.UserReadOnlyErrorString_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid.VsBufferContentType_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid.VsBufferContentType_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid.VsBufferDetectCharSet_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid.VsBufferDetectCharSet_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid.VsBufferDetectLangSID_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid.VsBufferDetectLangSID_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid.VsBufferEncodingPromptOnLoad_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid.VsBufferEncodingPromptOnLoad_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid.VsBufferEncodingVSTFF_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid.VsBufferEncodingVSTFF_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid.VsBufferExtraFiles_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid.VsBufferExtraFiles_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid.VsBufferFileReload_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid.VsBufferFileReload_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid.VsBufferIsDiskFile_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid.VsBufferIsDiskFile_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid.VsBufferMoniker_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid.VsBufferMoniker_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid.VsInitEncodingDialogFromUserData_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid.VsInitEncodingDialogFromUserData_string"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid.VsTextViewRoles_guid"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid.VsTextViewRoles_string"></member>
    <member name="T:Microsoft.VisualStudio.VSConstants.WellKnownToolboxStringMaps"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.WellKnownToolboxStringMaps.MultiTargeting"></member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.AccessKeyConverter"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.AccessKeyConverter.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.AccessKeyConverter.Convert(System.String,System.Object,System.Globalization.CultureInfo)">
      <param name="inputString"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.AccessKeyRemovingConverter"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.AccessKeyRemovingConverter.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.AccessKeyRemovingConverter.Convert(System.String,System.Object,System.Globalization.CultureInfo)">
      <param name="inputString"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.AccessKeyUnderliningConverter"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.AccessKeyUnderliningConverter.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.AccessKeyUnderliningConverter.Convert(System.String,System.Object,System.Globalization.CultureInfo)">
      <param name="fullText"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.AndBooleanConverter"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.AndBooleanConverter.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.AndBooleanConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
      <param name="values"></param>
      <param name="targetType"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.AndBooleanConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
      <param name="value"></param>
      <param name="targetTypes"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.AreEqualConverter"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.AreEqualConverter.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.AreEqualConverter.Convert(System.Object,System.Object,System.Object,System.Globalization.CultureInfo)">
      <param name="value1"></param>
      <param name="value2"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.BindableHyperlink">
      <summary>A version of a Hyperlink that supports data binding via its Content dependency property.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.BindableHyperlink.#ctor"></member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.BindableHyperlink.Content">
      <summary>Content dependency property</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.BindableHyperlink.ContentProperty"></member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.BindableRun">
      <summary>A version of a Run that supports data binding via its Content dependency property. Run itself doesn't support data binding directly because its Text property isn't a dependency property.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.BindableRun.#ctor"></member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.BindableRun.Content"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.BindableRun.ContentProperty"></member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.BindableValidationRule"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.BindableValidationRule.#ctor"></member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.BindableValidationRule.BindingTarget"></member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.BooleanToFlowDirectionConverter">
      <summary>Converter from a boolean value to a FlowDirection constant. This value is stored in the Main window's data source as a boolean, if it is true it indicates that layout should be Right to Left, and if it is false layout should be Left to Right.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.BooleanToFlowDirectionConverter.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.BooleanToFlowDirectionConverter.Convert(System.Boolean,System.Object,System.Globalization.CultureInfo)">
      <summary>Convert a boolean value to a FlowDirection constant.</summary>
      <param name="value">Value to convert</param>
      <param name="parameter">Conversion parameter.</param>
      <param name="culture">Culture for conversion.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.BooleanToHiddenVisibilityConverter">
      <summary>Converter from a boolean value to a Visibility constant. Unlike <see cref="T:System.Windows.Control.BooleanToVisibilityConverter" />, this converter maps false to Hidden instead of Collapsed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.BooleanToHiddenVisibilityConverter.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.BooleanToHiddenVisibilityConverter.Convert(System.Boolean,System.Object,System.Globalization.CultureInfo)">
      <summary>Convert a boolean value to a Visibility constant.</summary>
      <param name="value">Value to convert</param>
      <param name="parameter">Conversion parameter.</param>
      <param name="culture">Culture for conversion.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.ColorBrushValueConverter"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ColorBrushValueConverter.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ColorBrushValueConverter.Convert(System.Windows.Media.Color,System.Object,System.Globalization.CultureInfo)">
      <param name="colorObject"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.DataSourceToEnumerableDataSourceConverter"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.DataSourceToEnumerableDataSourceConverter.#ctor"></member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.DeviceToLogicalPixelConverter">
      <summary>Converts a device pixel component (x, y) to logical component for the specified axis (use HorizontalAxis for x, VerticalAxis for y value).</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.DeviceToLogicalPixelConverter.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.DeviceToLogicalPixelConverter.Convert(System.Int32,System.Object,System.Globalization.CultureInfo)">
      <summary>Converts a device coordinate component provided in 'value' parameter to logical pixel component. Note that 'parameter' parameter need to be either HorizontalAxis or VerticalAxis to determine which axis is going to be used for the conversion.</summary>
      <param name="value"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.DialogButton">
      <summary>Button class to be used for buttons displayed in Visual Studio WPF dialogs The style applied to this button defines common properties (min size, padding, margin)</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.DialogButton.#ctor"></member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.DialogWindow">
      <summary>Dialog class to be used as base class for Visual Studio WPF dialogs (non-Gel) Someone implementing a WPF dialog should derive from this class (to have consistent styling with other VS dialogs, and help support) To display the dialog invoke the ShowModal() function, and that will take care of correctly parenting the dialog in the shell, enabling modal state for the shell while the dialog is displayed, etc.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.DialogWindow.#ctor">
      <summary>Initialize the dialog that does not have Help button</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.DialogWindow.#ctor(System.String)">
      <summary>Initialize a dialog that has Help topic and buttons Use ShowModal() to display the dialog; it will get the parent window automatically from the shell</summary>
      <param name="helpTopic">The dialog's help topic</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.DialogWindow.InvokeDialogHelp"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.DialogWindow.ShowModal">
      <summary>Finds the parent/owner of the dialog from the Visual Studio shell and display the dialog Sets the shell in modal state while the dialog is shown, and centers correctly the dialog in the parent window.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.DialogWindowBase">
      <summary>Base class for WPF dialogs in Visual Studio 10 and later. The class provides consistent styling and caption buttons with other dialogs in VisualStudio.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.DialogWindowBase.#ctor"></member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.DialogWindowBase.HasDialogFrame"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.DialogWindowBase.HasDialogFrameProperty"></member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.DialogWindowBase.HasHelpButton"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.DialogWindowBase.HasHelpButtonProperty"></member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.DialogWindowBase.HasMaximizeButton"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.DialogWindowBase.HasMaximizeButtonProperty"></member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.DialogWindowBase.HasMinimizeButton"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.DialogWindowBase.HasMinimizeButtonProperty"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.DialogWindowBase.InvokeDialogHelp"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.DialogWindowBase.OnClosed(System.EventArgs)">
      <param name="e"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.DialogWindowBase.OnDialogThemeChanged"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.DialogWindowBase.OnSourceInitialized(System.EventArgs)">
      <param name="e"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.DisposableObject"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.DisposableObject.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.DisposableObject.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:Microsoft.VisualStudio.PlatformUI.DisposableObject" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.DisposableObject.Dispose(System.Boolean)">
      <param name="disposing"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.DisposableObject.DisposeManagedResources"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.DisposableObject.DisposeNativeResources"></member>
    <member name="E:Microsoft.VisualStudio.PlatformUI.DisposableObject.Disposing"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.DisposableObject.Finalize"></member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.DisposableObject.IsDisposed"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.DisposableObject.ThrowIfDisposed"></member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.DpiHelper"></member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.DpiHelper.DeviceDpiX"></member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.DpiHelper.DeviceDpiY"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.DeviceToLogicalUnits(System.Windows.Point)">
      <summary>Extension method for Point that returns a new Point with the input's coordinates converted from device units to logical units.</summary>
      <param name="devicePoint">Point in device coordinates</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.DeviceToLogicalUnits(System.Windows.Rect)">
      <summary>Extension method for Rect that returns a new Rect with the input's coordinates converted from device units to logical units.</summary>
      <param name="deviceRect">Rect in device coordinates</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.DeviceToLogicalUnits(System.Windows.Size)">
      <summary>Extension method for Size that returns a new Size with the input's dimensions converted from device units to logical units.</summary>
      <param name="deviceSize">Size in device units</param>
    </member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.DpiHelper.DeviceToLogicalUnitsScalingFactorX"></member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.DpiHelper.DeviceToLogicalUnitsScalingFactorY"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.GetDeviceActualSize(System.Windows.FrameworkElement)">
      <summary>Extension method for FrameworkElement that returns its Size in device units</summary>
      <param name="element">FrameworkElement to inspect</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.GetDeviceHeight(System.Windows.Window)">
      <summary>Extension method for Window that returns its Height in device units</summary>
      <param name="window">Window to inspect</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.GetDeviceLeft(System.Windows.Window)">
      <summary>Extension method for Window that returns its Left coordinate in device units</summary>
      <param name="window">Window to inspect</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.GetDeviceRect(System.Windows.Window)">
      <summary>Extension method for Window that returns its Rectangle in device units</summary>
      <param name="window">Window to inspect</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.GetDeviceTop(System.Windows.Window)">
      <summary>Extension method for Window that returns its Top coordinate in device units</summary>
      <param name="window">Window to inspect</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.GetDeviceWidth(System.Windows.Window)">
      <summary>Extension method for Window that returns its Width in device units</summary>
      <param name="window">Window to inspect</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.LogicalToDeviceUnits(System.Windows.Point)">
      <summary>Extension method for Point that returns a new Point with the input's coordinates converted from logical units to device units.</summary>
      <param name="logicalPoint">Point in logical units</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.LogicalToDeviceUnits(System.Windows.Rect)">
      <summary>Extension method for Rect that returns a new Rect with the input's coordinates converted from logical units to device units.</summary>
      <param name="logicalRect">Rect in logical coordinates</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.LogicalToDeviceUnits(System.Windows.Size)">
      <summary>Extension method for Size that returns a new Size with the input's dimensions converted from logical units to device units.</summary>
      <param name="logicalSize">Size in logical units</param>
    </member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.DpiHelper.LogicalToDeviceUnitsScalingFactorX"></member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.DpiHelper.LogicalToDeviceUnitsScalingFactorY"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.SetDeviceHeight(System.Windows.Window,System.Double)">
      <summary>Extension method for Window that sets its Height using device units</summary>
      <param name="window">Window to modify</param>
      <param name="deviceHeight">New height in device units</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.SetDeviceLeft(System.Windows.Window,System.Double)">
      <summary>Extension method for Window that sets its Left coordinate using device units</summary>
      <param name="window">Window to modify</param>
      <param name="deviceLeft">New left coordinate in device units</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.SetDeviceTop(System.Windows.Window,System.Double)">
      <summary>Extension method for Window that sets its Top coordinate using device units</summary>
      <param name="window">Window to modify</param>
      <param name="deviceTop">New top coordinate in device units</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.SetDeviceWidth(System.Windows.Window,System.Double)">
      <summary>Extension method for Window that sets its Width using device units</summary>
      <param name="window">Window to modify</param>
      <param name="deviceWidth">New width in device units</param>
    </member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.DpiHelper.TransformFromDevice"></member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.DpiHelper.TransformToDevice"></member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.DragDropHelper">
      <summary>Helper class for hooking up Drag and Drop operations with a specific drop target If no drop target is specified, the shell's main window drop target will be used by default, which allows handling file drop operations over the shell main's window</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.DragDropHelper.#ctor(System.Windows.IInputElement)">
      <param name="targetInputElement"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.DragDropHelper.#ctor(System.Windows.IInputElement,Microsoft.VisualStudio.OLE.Interop.IDropTarget)">
      <param name="targetInputElement"></param>
      <param name="dropTarget"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.DragDropHelper.ConvertToOleDataObject(System.Windows.IDataObject)">
      <summary>Creates a new <see cref="T:Microsoft.VisualStudio.OLE.Interop.IDataObject" /> given a <see cref="T:System.Windows.IDataObject" />.</summary>
      <param name="source"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.DragDropHelper.OnDragEnter(System.Windows.DragEventArgs)">
      <param name="e"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.DragDropHelper.OnDragLeave(System.Windows.RoutedEventArgs)">
      <param name="e"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.DragDropHelper.OnDragOver(System.Windows.DragEventArgs)">
      <param name="e"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.DragDropHelper.OnDrop(System.Windows.DragEventArgs)">
      <param name="e"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.EnvironmentRenderCapabilities">
      <summary>Encapsulates visual effects options for the environment. These options determine which types of visual effects should be used based on the current rendering capabilities. This is based on a combination of user settings and WPF's RenderCapabilities.Tier</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.EnvironmentRenderCapabilities.AreAnimationsAllowed">
      <summary>Determines if animations are currently allowed in the environment.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.EnvironmentRenderCapabilities.AreGradientsAllowed">
      <summary>Determines if gradients are currently allowed in the environment.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.EnvironmentRenderCapabilities.Current">
      <summary>Gets the current singleton instance of EnvironmentRenderCapabilities.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.EnvironmentRenderCapabilities.OnShellPropertyChange(System.Int32,System.Object)">
      <param name="propid"></param>
      <param name="var"></param>
    </member>
    <member name="E:Microsoft.VisualStudio.PlatformUI.EnvironmentRenderCapabilities.PropertyChanged"></member>
    <member name="E:Microsoft.VisualStudio.PlatformUI.EnvironmentRenderCapabilities.RenderCapabilitiesChanged"></member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.EnvironmentRenderCapabilities.VisualEffectsAllowed">
      <summary>Determines the set of rendering effects allowed. Currently, this value is either zero (indicating that no visual effects are allowed) or nonzero (indicating that all visual effects are allowed). The meaning of specific flags may change.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.ExtensionMethods"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.AcquireWin32Focus(System.Windows.DependencyObject,System.IntPtr@)">
      <summary>Puts the Win32 focus to the HWND of the HwndSource of the DependencyObject provided. If a new HWND other than currently focused one is focused then it returns true, setting the previousFocus parameter to the previously focused HWND and it returns false otherwise.</summary>
      <param name="obj"></param>
      <param name="previousFocus"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.CopyTo(System.IO.Stream,System.IO.Stream)">
      <summary>Add a simple copy method to Stream</summary>
      <param name="sourceStream"></param>
      <param name="targetStream"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.FindAncestor``1(System.Windows.DependencyObject)">
      <summary>Helper method that finds the first ancestor of a given Type in the logical or visual tree.</summary>
      <param name="obj">The object at which to begin searching.</param>
      <typeparam name="TAncestorType">The type of ancestor to find.</typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.FindAncestor``2(``1,System.Func`2)">
      <typeparam name="TAncestorType"></typeparam>
      <typeparam name="TElementType"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.FindAncestorOrSelf``1(System.Windows.DependencyObject)">
      <summary>Helper method that finds the first ancestor of a given Type in the logical or visual tree, or the object itself if it matches in type.</summary>
      <param name="obj">The object at which to begin searching.</param>
      <typeparam name="TAncestorType">The type of ancestor to find.</typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.FindCommonAncestor(System.Windows.DependencyObject,System.Windows.DependencyObject)">
      <summary>Finds the common ancestor of obj1 and obj2 using the GetVisualOrLogicalParent as the parent evaluation method.</summary>
      <param name="obj1">The first object.</param>
      <param name="obj2">The second object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.FindCommonAncestor``1(``0,``0,System.Func`2)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.FindDescendant``1(System.Windows.DependencyObject)">
      <summary>Helper method that finds the first descendant of a given Type in the visual tree. USE SPARINGLY. This method walks all the tree until a result is found. Use of this method on large trees or excessively will introduce a performance hit.</summary>
      <param name="obj">The object at which to begin searching.</param>
      <typeparam name="T">The type of descendant to find.</typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.FindDescendants``1(System.Windows.DependencyObject)">
      <summary>Find all visual descendants of this dependency object of a particular type. USE SPARINGLY. This method walks the entire tree. Use of this method on large trees or excessively will introduce a performance hit.</summary>
      <param name="obj"></param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.FindDescendantsReverse``1(System.Windows.DependencyObject)">
      <summary>In reverse order: Find all visual descendants of this dependency object of a particular type. USE SPARINGLY. This method walks the entire tree. Use of this method on large trees or excessively will introduce a performance hit.</summary>
      <param name="obj"></param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.GetVisualOrLogicalParent(System.Windows.DependencyObject)">
      <summary>This uses the visual tree first, then diverts to the logical tree if the visual tree ends. This is necessary for the TabControl, where using either the logical tree or visual tree by themselves is insufficient.</summary>
      <param name="sourceElement">The object to begin searching from.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.IsAncestorOf``1(``0,``0,System.Func`2)">
      <typeparam name="TElementType"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.IsConnectedToPresentationSource(System.Windows.DependencyObject)">
      <summary>Used to determine if a given DependencyObject is rooted in a PresentationSource. In order to determine screen coordinates from relative coordinates, this element has to be rooted in a PresentationSource. It can also tell us whether something is presently in the visual tree or not.</summary>
      <param name="obj"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.IsLogicalAncestorOf(System.Windows.DependencyObject,System.Windows.DependencyObject)">
      <summary>Determines if an element is an ancestor of another element using both the logical and visual trees.</summary>
      <param name="element">The ancestor element.</param>
      <param name="other">The descendent element.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.IsNearlyEqual(System.Double,System.Double)">
      <summary>Helper method to determine if a double is the same type of non-real or nearly equal to another double.</summary>
      <param name="value1">First double to compare.</param>
      <param name="value2">Second double to compare.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.IsNonreal(System.Double)">
      <summary>Helper method to check if a double is valid.</summary>
      <param name="value">double to check.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.IsSignificantlyGreater(System.Double,System.Double)"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.IsTopmost(System.IntPtr)">
      <summary>Determines if an HWND is a topmost window.</summary>
      <param name="hWnd">The HWND to test.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.RaiseEvent(System.ComponentModel.CancelEventHandler,System.Object,System.ComponentModel.CancelEventArgs)">
      <summary>Helper method to perform the null check necessary to raise an event safely.</summary>
      <param name="eventHandler">The event.</param>
      <param name="source">The event's source parameter.</param>
      <param name="args">The event's argument parameter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.RaiseEvent(System.EventHandler,System.Object)">
      <summary>Helper method to perform the null check necessary to raise an event safely.</summary>
      <param name="eventHandler">The event.</param>
      <param name="source">The event's source parameter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.RaiseEvent(System.EventHandler,System.Object,System.EventArgs)">
      <summary>Helper method to perform the null check necessary to raise an event safely.</summary>
      <param name="eventHandler">The event.</param>
      <param name="source">The event's source parameter.</param>
      <param name="args">The event's argument parameter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.RaiseEvent``1(System.EventHandler{``0},System.Object,``0)">
      <summary>Helper method to perform the null check necessary to raise an event safely.</summary>
      <param name="eventHandler">The event.</param>
      <param name="source">The event's source parameter.</param>
      <param name="args">The event's argument parameter.</param>
      <typeparam name="TEventArgs">The EventArgs-derived event argument.</typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.ThrowIfNullOrEmpty(System.String,System.String)">
      <summary>Add a throw from string to verify that it is not null or empty</summary>
      <param name="value"></param>
      <param name="message"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.ToPOINTL(System.Windows.Point)">
      <summary>Converts a given <see cref="T:System.Windows.Point" /> object to a <see cref="T:Microsoft.VisualStudio.OLE.Interop.POINTL" />.</summary>
      <param name="point"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.TraverseVisualTree``1(System.Windows.DependencyObject,System.Action{``0})">
      <summary>Execute a delegate action on all visual descendants of this dependency object of a particular type. USE SPARINGLY. This method walks the entire tree. Use of this method on large trees or excessively will introduce a performance hit.</summary>
      <param name="obj"></param>
      <param name="action"></param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.TraverseVisualTreeReverse``1(System.Windows.DependencyObject,System.Action{``0})">
      <param name="obj"></param>
      <param name="action"></param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.FailIfEmptyAccessKeyRemovingConverter"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.FailIfEmptyAccessKeyRemovingConverter.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.FailIfEmptyAccessKeyRemovingConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.FailIfEmptyAccessKeyRemovingConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)"></member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.FontScaling">
      <summary>Class used to attach a pre-scaled font size to an element. This is necessary if you want to apply a conversion (such as scaling) to the font size when the font size is coming from a dynamic resource, since {DynamicResource} does not allow for a converter to be applied to the value.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.FontScaling.GetPreScaledFontSize(System.Windows.DependencyObject)">
      <param name="element"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.FontScaling.PreScaledFontSize"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.FontScaling.PreScaledFontSizeProperty"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.FontScaling.SetPreScaledFontSize(System.Windows.DependencyObject,System.Double)">
      <param name="element"></param>
      <param name="value"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.GrayscaleImageConverter">
      <summary>Converts a Gel image <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> into a grayscale version of the same image as an <see cref="T:System.Windows.Controls.Image" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.GrayscaleImageConverter.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.GrayscaleImageConverter.Convert(System.Windows.Media.Imaging.BitmapSource,System.Object,System.Globalization.CultureInfo)">
      <summary>Does the actual conversion of <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> to <see cref="T:System.Windows.Controls.Image" />.</summary>
      <param name="inputImage"></param>
      <param name="parameter">If set to a Color, it will be used to bias the final image</param>
      <param name="culture"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.HelperMethods"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.HelperMethods.AccessKeySpecifierFromObject(System.Object)">
      <summary>Converts the input object into an access key specifier. Objects of type char or single-character strings can be converted. If an object of a different type is passed in, &amp; is returned.</summary>
      <param name="accessKeySpecifier">Object to convert</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.HelperMethods.StripAccelerators(System.String)">
      <summary>Strips non-escaped accelerator markers ('&amp;') from the given string. </summary>
      <param name="input">String to strip.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.HelperMethods.StripAccelerators(System.String,System.Char)">
      <summary> Strips non-escaped accelerator markers from the given string </summary>
      <returns>The string.</returns>
      <param name="input">String to strip.</param>
      <param name="accessSpecifier">Specifies the character to treat as an access key specifier.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.HelperMethods.StripAccelerators(System.String,System.Object)">
      <summary>Returns the input string with the specified access key specifier stripped</summary>
      <param name="input">String to strip of access key specifiers</param>
      <param name="accessKeySpecifier">Character to strip</param>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.HoursToTimeSpanConverter"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.HoursToTimeSpanConverter.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.HoursToTimeSpanConverter.Convert(System.UInt32,System.Object,System.Globalization.CultureInfo)">
      <param name="hours"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.HoursToTimeSpanConverter.ConvertBack(System.TimeSpan,System.Object,System.Globalization.CultureInfo)">
      <param name="span"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.IfElseConverter">
      <summary>Converter from a boolean value to one of the two provided values of any type. Analogous to ternary ?: operator in C#.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.IfElseConverter.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.IfElseConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Convert a boolean value to either <see cref="P:Microsoft.VisualStudio.PlatformUI.IfElseConverter.TrueValue" /> or <see cref="P:Microsoft.VisualStudio.PlatformUI.IfElseConverter.FalseValue" />.</summary>
      <param name="value">Value to convert.</param>
      <param name="targetType"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.IfElseConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <param name="value"></param>
      <param name="targetType"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.IfElseConverter.FalseValue"></member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.IfElseConverter.TrueValue"></member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.ImageButton"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ImageButton.#ctor"></member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.ImageButton.ImageHover"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.ImageButton.ImageHoverProperty"></member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.ImageButton.ImageNormal"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.ImageButton.ImageNormalProperty"></member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.ImageButton.ImagePressed"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.ImageButton.ImagePressedProperty"></member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.ImageCheckBox"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ImageCheckBox.#ctor"></member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.ImageCheckBox.ImageChecked"></member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.ImageCheckBox.ImageCheckedHover"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.ImageCheckBox.ImageCheckedHoverProperty"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.ImageCheckBox.ImageCheckedProperty"></member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.ImageCheckBox.ImageNormal"></member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.ImageCheckBox.ImageNormalHover"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.ImageCheckBox.ImageNormalHoverProperty"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.ImageCheckBox.ImageNormalProperty"></member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.ImageCheckBox.ImagePressed"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.ImageCheckBox.ImagePressedProperty"></member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.ImageConverter">
      <summary>Converts an <see cref="T:System.Windows.Media.ImageSource" /> into an <see cref="T:System.Windows.Controls.Image" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ImageConverter.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ImageConverter.Convert(System.Windows.Media.ImageSource,System.Object,System.Globalization.CultureInfo)">
      <summary>Converts an <see cref="T:System.Windows.Media.ImageSource" /> into an <see cref="T:System.Windows.Controls.Image" />.</summary>
      <param name="inputImage"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.ImageListValueConverter">
      <summary>Converts the given image list and an index in it into ImageSource.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ImageListValueConverter.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ImageListValueConverter.Convert(System.Int32,System.Collections.Generic.IList{System.Windows.Media.ImageSource},System.Object,System.Globalization.CultureInfo)">
      <param name="imageIndex"></param>
      <param name="imageList"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.IsEqualConverter"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.IsEqualConverter.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.IsEqualConverter.Convert(System.Object,System.Object,System.Globalization.CultureInfo)">
      <param name="value"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.IsEqualConverter.ConvertBack(System.Boolean,System.Object,System.Globalization.CultureInfo)">
      <param name="value"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.LayoutSynchronizedContentControl">
      <summary>A ContentControl which will layout synchronously if the content is changed and the LayoutSynchronizer is active. This is used to ensure that critical codepaths which demand a measured and arranged element receive one when the content of the control changes.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.LayoutSynchronizedContentControl.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.LayoutSynchronizedContentControl.OnContentChanged(System.Object,System.Object)">
      <param name="oldContent"></param>
      <param name="newContent"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.LayoutSynchronizedItemsControl">
      <summary>An ItemsControl which will layout synchronously if the items are changed and the LayoutSynchronizer is active. This is used to ensure that critical codepaths which demand a measured and arranged element receive one when the items in the control changes.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.LayoutSynchronizedItemsControl.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.LayoutSynchronizedItemsControl.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <param name="e"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.LayoutSynchronizedTabControl">
      <summary>A TabControl which will layout synchronously if the content is changed and the LayoutSynchronizer is active. This is used to ensure that critical codepaths which demand a measured and arranged element receive one when the items or selected item of the control changes.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.LayoutSynchronizedTabControl.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.LayoutSynchronizedTabControl.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <param name="e"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.LayoutSynchronizedTabControl.OnSelectionChanged(System.Windows.Controls.SelectionChangedEventArgs)">
      <param name="e"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.LayoutSynchronizedWindow">
      <summary>A Window which will layout synchronously if the content is changed and the LayoutSynchronizer is active. This is used to ensure that critical codepaths which demand a measured and arranged element receive one when the content of the window changes.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.LayoutSynchronizedWindow.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.LayoutSynchronizedWindow.OnContentChanged(System.Object,System.Object)">
      <param name="oldContent"></param>
      <param name="newContent"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.LayoutSynchronizer">
      <summary>Class which helps ensure that layout happens synchronously based on data model changes. While inside a layout-synchronization scope, calling Update will ensure that the updated element will be laid out synchronously. Participating controls should call LayoutSynchronizer.Update when their data model changes.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.LayoutSynchronizer.BeginLayoutSynchronization">
      <summary>Enters a block during which calling Update will force synchronous layout</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.LayoutSynchronizer.IsSynchronizing">
      <summary>Determines if any IDisposables created from BeginLayoutSynchronization still remain active.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.LayoutSynchronizer.Update(System.Windows.Media.Visual)">
      <summary>Synchronously lays out the given element if synchronization is currently active.</summary>
      <param name="element">The element which may need to be laid out synchronously.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.MillisecondsToTimeSpanConverter"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MillisecondsToTimeSpanConverter.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MillisecondsToTimeSpanConverter.Convert(System.UInt32,System.Object,System.Globalization.CultureInfo)">
      <param name="milliseconds"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MillisecondsToTimeSpanConverter.ConvertBack(System.TimeSpan,System.Object,System.Globalization.CultureInfo)">
      <param name="span"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.MinutesToTimeSpanConverter"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MinutesToTimeSpanConverter.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MinutesToTimeSpanConverter.Convert(System.UInt32,System.Object,System.Globalization.CultureInfo)">
      <param name="minutes"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MinutesToTimeSpanConverter.ConvertBack(System.TimeSpan,System.Object,System.Globalization.CultureInfo)">
      <param name="span"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.MruListDataSourceSchema"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.MruListDataSourceSchema.AddCommandName"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.MruListDataSourceSchema.ItemsPropertyName"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.MruListDataSourceSchema.MaxCountPropertyName"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.MruListDataSourceSchema.OpenCommandName"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.MruListDataSourceSchema.OpenFolderCommandName"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.MruListDataSourceSchema.RemoveCommandName"></member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.MultiplicationConverter"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiplicationConverter.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiplicationConverter.Convert(System.Double,System.Object,System.Globalization.CultureInfo)">
      <param name="value"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.MultiplicationConverter.MultiplicationFactor"></member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`3">
      <typeparam name="TSource1"></typeparam>
      <typeparam name="TSource2"></typeparam>
      <typeparam name="TTarget"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`3.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`3.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
      <param name="values"></param>
      <param name="targetType"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`3.Convert(`0,`1,System.Object,System.Globalization.CultureInfo)">
      <param name="value1"></param>
      <param name="value2"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`3.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
      <param name="value"></param>
      <param name="targetTypes"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`3.ConvertBack(`2,`0@,`1@,System.Object,System.Globalization.CultureInfo)">
      <param name="value"></param>
      <param name="out1"></param>
      <param name="out2"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`4">
      <typeparam name="TSource1"></typeparam>
      <typeparam name="TSource2"></typeparam>
      <typeparam name="TSource3"></typeparam>
      <typeparam name="TTarget"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`4.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`4.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
      <param name="values"></param>
      <param name="targetType"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`4.Convert(`0,`1,`2,System.Object,System.Globalization.CultureInfo)">
      <param name="value1"></param>
      <param name="value2"></param>
      <param name="value3"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`4.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
      <param name="value"></param>
      <param name="targetTypes"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`4.ConvertBack(`3,`0@,`1@,`2@,System.Object,System.Globalization.CultureInfo)">
      <param name="value"></param>
      <param name="out1"></param>
      <param name="out2"></param>
      <param name="out3"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`5">
      <typeparam name="TSource1"></typeparam>
      <typeparam name="TSource2"></typeparam>
      <typeparam name="TSource3"></typeparam>
      <typeparam name="TSource4"></typeparam>
      <typeparam name="TTarget"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`5.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`5.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
      <param name="values"></param>
      <param name="targetType"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`5.Convert(`0,`1,`2,`3,System.Object,System.Globalization.CultureInfo)">
      <param name="value1"></param>
      <param name="value2"></param>
      <param name="value3"></param>
      <param name="value4"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`5.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
      <param name="value"></param>
      <param name="targetTypes"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`5.ConvertBack(`4,`0@,`1@,`2@,`3@,System.Object,System.Globalization.CultureInfo)">
      <param name="value"></param>
      <param name="out1"></param>
      <param name="out2"></param>
      <param name="out3"></param>
      <param name="value4"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`6">
      <typeparam name="TSource1"></typeparam>
      <typeparam name="TSource2"></typeparam>
      <typeparam name="TSource3"></typeparam>
      <typeparam name="TSource4"></typeparam>
      <typeparam name="TSource5"></typeparam>
      <typeparam name="TTarget"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`6.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`6.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
      <param name="values"></param>
      <param name="targetType"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`6.Convert(`0,`1,`2,`3,`4,System.Object,System.Globalization.CultureInfo)">
      <param name="value1"></param>
      <param name="value2"></param>
      <param name="value3"></param>
      <param name="value4"></param>
      <param name="value5"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`6.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
      <param name="value"></param>
      <param name="targetTypes"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`6.ConvertBack(`5,`0@,`1@,`2@,`3@,`4@,System.Object,System.Globalization.CultureInfo)">
      <param name="value"></param>
      <param name="out1"></param>
      <param name="out2"></param>
      <param name="out3"></param>
      <param name="value4"></param>
      <param name="value5"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.NegateBooleanConverter"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.NegateBooleanConverter.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.NegateBooleanConverter.Convert(System.Boolean,System.Object,System.Globalization.CultureInfo)">
      <param name="value"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.NotNullConverter"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.NotNullConverter.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.NotNullConverter.Convert(System.Object,System.Object,System.Globalization.CultureInfo)">
      <param name="value"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.OrBooleanConverter"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.OrBooleanConverter.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.OrBooleanConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
      <param name="values"></param>
      <param name="targetType"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.OrBooleanConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
      <param name="value"></param>
      <param name="targetTypes"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.RangeValidationRule"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.RangeValidationRule.#ctor"></member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.RangeValidationRule.Maximum"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.RangeValidationRule.MaximumProperty"></member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.RangeValidationRule.Minimum"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.RangeValidationRule.MinimumProperty"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.RangeValidationRule.Validate(System.Object,System.Globalization.CultureInfo)">
      <param name="value"></param>
      <param name="cultureInfo"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.RssDataSourceSchema"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.RssDataSourceSchema.DownloadEnabledPropertyName"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.RssDataSourceSchema.DownloadFreqPropertyName"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.RssDataSourceSchema.FeedPropertyName"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.RssDataSourceSchema.FeedTokenizedPropertyName"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.RssDataSourceSchema.OptInRequiredPropertyName"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.RssDataSourceSchema.PromptForCredentialsCommandName"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.RssDataSourceSchema.StatusDisplaying"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.RssDataSourceSchema.StatusDownloadDisabled"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.RssDataSourceSchema.StatusError"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.RssDataSourceSchema.StatusLoading"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.RssDataSourceSchema.StatusPromptForCredentials"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.RssDataSourceSchema.StatusPropertyName"></member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.SafeIUnknown">
      <summary>Resource management class intended to release native interfaces, such as those returned from Marshal.GetIUnknownForObject or Marshal.GetIDispatchForObject.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.SafeIUnknown.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.SafeIUnknown.#ctor(Microsoft.VisualStudio.PlatformUI.SafeIUnknown)">
      <param name="other"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.SafeIUnknown.#ctor(System.IntPtr)">
      <param name="punk"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.SafeIUnknown.FromObject(System.Object)">
      <summary>Helper method to facilitate the common method for retrieving a native IUnknown: Marshal.GetIUnknownForObject.</summary>
      <param name="o"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.SafeIUnknown.IsInvalid"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.SafeIUnknown.ReleaseHandle"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.SafeIUnknown.ToObject``1">
      <summary>Helper method to facilitate retrieving an instance of the type that represents the COM object whose IUnknown this class contains.</summary>
      <typeparam name="T">The type to try-cast the COM object to</typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.SafeIUnknown.ToObject">
      <summary>Helper method to facilitate retrieving an instance of the type that represents the COM object whose IUnknown this class contains.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.SafeIUnknown.Value">
      <summary>The native interface managed by this class</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.SecondsToTimeSpanConverter"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.SecondsToTimeSpanConverter.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.SecondsToTimeSpanConverter.Convert(System.UInt32,System.Object,System.Globalization.CultureInfo)">
      <param name="seconds"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.SecondsToTimeSpanConverter.ConvertBack(System.TimeSpan,System.Object,System.Globalization.CultureInfo)">
      <param name="span"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.SingleElementToEnumerableConverter`1">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.SingleElementToEnumerableConverter`1.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.SingleElementToEnumerableConverter`1.Convert(`0,System.Object,System.Globalization.CultureInfo)">
      <param name="obj"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.SplitterGrip">
      <summary>Splitter used in between SplitterItems in a SplitterPanel.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterGrip.#ctor"></member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.SplitterGrip.Orientation"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.SplitterGrip.OrientationProperty"></member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.SplitterGrip.ResizeBehavior"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.SplitterGrip.ResizeBehaviorProperty"></member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.SplitterItem">
      <summary>Container item for a SplitterItemsControl. See SplitterItemsControl for more information.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterItem.#ctor"></member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.SplitterItemsControl">
      <summary>An ItemsControl that has an Orientation and which is meant to be used in conjunction with a SplitterPanel.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterItemsControl.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterItemsControl.GetContainerForItemOverride"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterItemsControl.GetSplitterGripSize(System.Windows.DependencyObject)">
      <param name="element"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterItemsControl.IsItemItsOwnContainerOverride(System.Object)">
      <param name="item"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.SplitterItemsControl.Orientation"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.SplitterItemsControl.OrientationProperty"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterItemsControl.SetSplitterGripSize(System.Windows.DependencyObject,System.Double)">
      <param name="element"></param>
      <param name="value"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.SplitterItemsControl.SplitterGripSize"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.SplitterItemsControl.SplitterGripSizeProperty"></member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.SplitterLength">
      <summary>Length unit similar to GridLength. Lengths of type Stretch use a desired amount of space (in device units) equal to their Value, but stretch to fit the parent control if there are no Fill elements. Fill elements use space remaining after Stretch elements are allocated space, maintaining ratios of values between elements.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterLength.#ctor(System.Double)">
      <param name="value"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterLength.#ctor(System.Double,Microsoft.VisualStudio.PlatformUI.SplitterUnitType)">
      <param name="value"></param>
      <param name="unitType"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterLength.Equals(Microsoft.VisualStudio.PlatformUI.SplitterLength)">
      <param name="other"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterLength.Equals(System.Object)">
      <param name="obj"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterLength.GetHashCode"></member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.SplitterLength.IsFill"></member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.SplitterLength.IsStretch"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterLength.op_Equality(Microsoft.VisualStudio.PlatformUI.SplitterLength,Microsoft.VisualStudio.PlatformUI.SplitterLength)">
      <param name="obj1"></param>
      <param name="obj2"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterLength.op_Inequality(Microsoft.VisualStudio.PlatformUI.SplitterLength,Microsoft.VisualStudio.PlatformUI.SplitterLength)">
      <param name="obj1"></param>
      <param name="obj2"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.SplitterLength.SplitterUnitType"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterLength.ToString"></member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.SplitterLength.Value"></member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.SplitterLengthConverter"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterLengthConverter.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterLengthConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <param name="context"></param>
      <param name="sourceType"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterLengthConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <param name="context"></param>
      <param name="destinationType"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterLengthConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <param name="context"></param>
      <param name="culture"></param>
      <param name="value"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterLengthConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <param name="context"></param>
      <param name="culture"></param>
      <param name="value"></param>
      <param name="destinationType"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.SplitterMeasureData">
      <summary>Class which stores data used during measuring of items in a SplitterPanel.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterMeasureData.#ctor(System.Windows.UIElement)">
      <summary>Constructs a new SplitterMeasureData from a UIElement.</summary>
      <param name="element">The element being measured.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.SplitterMeasureData.AttachedLength">
      <summary>Gets or sets the SplitterLength associated with the UIElement.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.SplitterMeasureData.Element">
      <summary>Gets the UIElement being measured.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterMeasureData.FromElements(System.Collections.IList)">
      <summary>Constructs a new sequence of SplitterMeasureData instances from a sequence of UIElements.</summary>
      <param name="elements">The sequence of UIElements.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.SplitterMeasureData.IsMaximumReached">
      <summary>Gets or sets whether or not the element reached its maximum size during Measure.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.SplitterMeasureData.IsMinimumReached">
      <summary>Gets or sets whether or not the element reached its minimum size during Measure.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.SplitterMeasureData.MeasuredBounds">
      <summary>Gets or sets the bounds the element was assigned, relative to the panel it is contained in.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.SplitterPanel">
      <summary>Represents an oriented panel of items that are stacked, but sized to fit on the screen.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterPanel.#ctor"></member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.SplitterPanel.ActualSplitterLength"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.SplitterPanel.ActualSplitterLengthProperty"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterPanel.ArrangeOverride(System.Windows.Size)">
      <summary>Arranges the elements based on attached arrangement information calculated in Measure.</summary>
      <param name="finalSize"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterPanel.GetActualSplitterLength(System.Windows.UIElement)">
      <param name="element"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterPanel.GetIndex(System.Windows.UIElement)">
      <param name="element"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterPanel.GetIsFirst(System.Windows.UIElement)">
      <param name="element"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterPanel.GetIsLast(System.Windows.UIElement)">
      <param name="element"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterPanel.GetMaximumLength(System.Windows.UIElement)">
      <param name="element"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterPanel.GetMinimumLength(System.Windows.UIElement)">
      <param name="element"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterPanel.GetSplitterLength(System.Windows.UIElement)">
      <param name="element"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.SplitterPanel.Index"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.SplitterPanel.IndexProperty"></member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.SplitterPanel.IsFirst"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.SplitterPanel.IsFirstProperty"></member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.SplitterPanel.IsLast"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.SplitterPanel.IsLastProperty"></member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.SplitterPanel.MaximumLength"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.SplitterPanel.MaximumLengthProperty"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterPanel.Measure(System.Windows.Size,System.Windows.Controls.Orientation,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.PlatformUI.SplitterMeasureData},System.Boolean)">
      <summary>This method is used to measure and arrange a set of child elements. This method is used both for the normal Measure/Arrange pass, and also to determine where an item would show up if it were added to this panel. This is used for docking previews.</summary>
      <param name="availableSize">The size available to the control.</param>
      <param name="orientation">The control's orientation.</param>
      <param name="measureData">The enumeration of child UIElements to measure and arrange.</param>
      <param name="remeasureElements">True to actually remeasure the child elements and attach the new layout information to them. To perform a non-invasive preview of the layout, pass false.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterPanel.MeasureOverride(System.Windows.Size)">
      <param name="availableSize"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.SplitterPanel.MinimumLength"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.SplitterPanel.MinimumLengthProperty"></member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.SplitterPanel.Orientation"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.SplitterPanel.OrientationProperty"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterPanel.SetActualSplitterLength(System.Windows.UIElement,System.Double)">
      <param name="element"></param>
      <param name="value"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterPanel.SetIndex(System.Windows.UIElement,System.Int32)">
      <param name="element"></param>
      <param name="value"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterPanel.SetIsFirst(System.Windows.UIElement,System.Boolean)">
      <param name="element"></param>
      <param name="value"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterPanel.SetIsLast(System.Windows.UIElement,System.Boolean)">
      <param name="element"></param>
      <param name="value"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterPanel.SetMaximumLength(System.Windows.UIElement,System.Double)">
      <param name="element"></param>
      <param name="value"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterPanel.SetMinimumLength(System.Windows.UIElement,System.Double)">
      <param name="element"></param>
      <param name="value"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterPanel.SetSplitterLength(System.Windows.UIElement,Microsoft.VisualStudio.PlatformUI.SplitterLength)">
      <param name="element"></param>
      <param name="value"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.SplitterPanel.ShowResizePreview"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.SplitterPanel.ShowResizePreviewProperty"></member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.SplitterPanel.SplitterLength"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.SplitterPanel.SplitterLengthProperty"></member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.SplitterResizePreviewWindow">
      <summary>Control used to show the resize preview for a SplitterPanel.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterResizePreviewWindow.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterResizePreviewWindow.Hide">
      <summary>Hides the window, if it is currently shown.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterResizePreviewWindow.Move(System.Double,System.Double)">
      <summary>Moves the SplitterResizePreviewWindow to the given device coordinates.</summary>
      <param name="deviceLeft">The new device left for the window.</param>
      <param name="deviceTop">The new device top for the window.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterResizePreviewWindow.Show(System.Windows.UIElement)">
      <summary>Shows the window on-screen with the same size and screen position as the given UIElement.</summary>
      <param name="parentElement">The element to show the preview window over.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.SplitterUnitType"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.SplitterUnitType.Fill">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.SplitterUnitType.Stretch">
      <summary />
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.StartPageDataSourceSchema"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.StartPageDataSourceSchema.ActualSourcePropertyName"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.StartPageDataSourceSchema.AppIdPropertyName"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.StartPageDataSourceSchema.BackgroundDataSourceName"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.StartPageDataSourceSchema.ClosePageOnOpenProjectName"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.StartPageDataSourceSchema.ContentPropertyName"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.StartPageDataSourceSchema.CustomizationEnabledName"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.StartPageDataSourceSchema.DTEName"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.StartPageDataSourceSchema.ExecuteCommandName"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.StartPageDataSourceSchema.ExtensionIdPropertyName"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.StartPageDataSourceSchema.LinksDataSourceName"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.StartPageDataSourceSchema.LogoName"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.StartPageDataSourceSchema.RecentProjectsDataSourceName"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.StartPageDataSourceSchema.RssDataSourceName"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.StartPageDataSourceSchema.ShowPageAtStartupName"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.StartPageDataSourceSchema.SourcePropertyName"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.StartPageDataSourceSchema.Subitem1IndexName"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.StartPageDataSourceSchema.Subitem2IndexName"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.StartPageDataSourceSchema.Subitem3IndexName"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.StartPageDataSourceSchema.Subitem4IndexName"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.StartPageDataSourceSchema.TabItemIndexName"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.StartPageDataSourceSchema.TeamFoundationClientSupportedName"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.StartPageDataSourceSchema.WebProjectsSupportedName"></member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.StartPageGuidList"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.StartPageGuidList.guidDataSourceFactory"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.StartPageGuidList.guidDataSourceFactoryString"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.StartPageGuidList.guidPackage"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.StartPageGuidList.guidPackageString"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.StartPageGuidList.guidUIFactory"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.StartPageGuidList.guidUIFactoryString"></member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.StringConcatenatingConverter"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.StringConcatenatingConverter.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.StringConcatenatingConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
      <param name="values"></param>
      <param name="targetType"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.StringConcatenatingConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
      <param name="value"></param>
      <param name="targetTypes"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.StringToStringWithoutHypertextTagsConverter"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.StringToStringWithoutHypertextTagsConverter.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.StringToStringWithoutHypertextTagsConverter.Convert(System.String,System.Object,System.Globalization.CultureInfo)">
      <param name="inputString"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.StringToStringWithoutHypertextTagsConverter.ConvertBack(System.String,System.Object,System.Globalization.CultureInfo)">
      <param name="inputString"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.StringToXmlDataProviderConverter"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.StringToXmlDataProviderConverter.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.StringToXmlDataProviderConverter.Convert(System.String,System.Object,System.Globalization.CultureInfo)">
      <param name="xmlBlob"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.StringToXmlDataProviderConverter.ConvertBack(System.Windows.Data.XmlDataProvider,System.Object,System.Globalization.CultureInfo)">
      <param name="xmlDataProvider"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.StyleKey`1">
      <summary>Simple derivation of <see cref="T:System.Windows.ResourceKey" />, templated to allow the overridden Assembly property to return the correct assembly based on typeof(T).</summary>
      <typeparam name="T">The type with which this StyleKey is associated with.</typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.StyleKey`1.#ctor"></member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.StyleKey`1.Assembly"></member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.SystemDropShadowChrome"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.SystemDropShadowChrome.#ctor">
      <summary>Instantiates a new instance of a SystemDropShadowChrome</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.SystemDropShadowChrome.Color">
      <summary>The Color property defines the Color used to fill the shadow region.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.SystemDropShadowChrome.ColorProperty">
      <summary>DependencyProperty for <see cref="P:Microsoft.VisualStudio.PlatformUI.SystemDropShadowChrome.Color" /> property.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.SystemDropShadowChrome.CornerRadius">
      <summary>The CornerRadius property defines the CornerRadius of the object casting the shadow.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.SystemDropShadowChrome.CornerRadiusProperty">
      <summary>DependencyProperty for <see cref="P:Microsoft.VisualStudio.PlatformUI.SystemDropShadowChrome.CornerRadius" /> property.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.ValueConverter`2">
      <typeparam name="TSource"></typeparam>
      <typeparam name="TTarget"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ValueConverter`2.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ValueConverter`2.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <param name="value"></param>
      <param name="targetType"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ValueConverter`2.Convert(`0,System.Object,System.Globalization.CultureInfo)">
      <param name="value"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ValueConverter`2.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <param name="value"></param>
      <param name="targetType"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ValueConverter`2.ConvertBack(`1,System.Object,System.Globalization.CultureInfo)">
      <param name="value"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.VisibleIfNotNullConverter"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.VisibleIfNotNullConverter.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.VisibleIfNotNullConverter.Convert(System.Object,System.Object,System.Globalization.CultureInfo)">
      <param name="obj"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.VisibleIfNotNullConverter.VisibilityIfNull"></member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.VisualTargetPresentationSource">
      <summary>This class is used to provide the surface to the Visual of the worker threaded UI.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.VisualTargetPresentationSource.#ctor(System.Windows.Media.HostVisual)">
      <summary>Constructs the PresentationSource for the given HostVisual, which is the host for the root of the worker thread Visual tree.</summary>
      <param name="hostVisual"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.VisualTargetPresentationSource.GetCompositionTargetCore">
      <summary>Returns the CompositionTarget that represents display surface of this PresentationSource.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.VisualTargetPresentationSource.IsDisposed">
      <summary>We don't support disposing this object.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.VisualTargetPresentationSource.RootVisual">
      <summary>Gets/Sets the root of the worker thread Visual tree.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.VsUIDialogWindow">
      <summary>Dialog class to be used as base class for Visual Studio dialogs used with IVsUIDataSources </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.VsUIDialogWindow.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.VsUIDialogWindow.InvokeDialogHelp"></member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.WeakCollection`1">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.WeakCollection`1.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.WeakCollection`1.Add(`0)">
      <param name="item"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.WeakCollection`1.Clear"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.WeakCollection`1.Contains(`0)">
      <param name="item"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.WeakCollection`1.CopyTo(`0[],System.Int32)">
      <param name="array"></param>
      <param name="arrayIndex"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.WeakCollection`1.Count"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.WeakCollection`1.Find(System.Predicate{`0})">
      <param name="match"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.WeakCollection`1.Remove(`0)">
      <param name="item"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.WeakCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.WeakCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.WeakCollection`1.System#Collections#IEnumerable#GetEnumerator"></member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.WindowStateConverter"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.WindowStateConverter.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.WindowStateConverter.Convert(System.Int32,System.Object,System.Globalization.CultureInfo)">
      <param name="state"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.WindowStateConverter.ConvertBack(System.Windows.WindowState,System.Object,System.Globalization.CultureInfo)">
      <param name="state"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.WindowStyleHelper"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.WindowStyleHelper.GetHasMaximizeButton(System.Windows.Window)">
      <param name="window"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.WindowStyleHelper.GetHasMinimizeButton(System.Windows.Window)">
      <param name="window"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.WindowStyleHelper.HasMaximizeButton"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.WindowStyleHelper.HasMaximizeButtonProperty"></member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.WindowStyleHelper.HasMinimizeButton"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.WindowStyleHelper.HasMinimizeButtonProperty"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.WindowStyleHelper.SetHasMaximizeButton(System.Windows.Window,System.Boolean)">
      <param name="window"></param>
      <param name="value"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.WindowStyleHelper.SetHasMinimizeButton(System.Windows.Window,System.Boolean)">
      <param name="window"></param>
      <param name="value"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.WorkerThreadElementContainer">
      <summary>This class is used to connect the UI elements in worker threads to Main Window. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.WorkerThreadElementContainer.#ctor">
      <summary>Constructs the host of the root visual and then starts the Dispatcher thread.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.WorkerThreadElementContainer.ArrangeOverride(System.Windows.Size)">
      <summary>Dispatches an Arrange pass while returning the latest RenderSize. If the layout of the root UIElement changes then layout of this class is invalidated to accommodate that.</summary>
      <param name="finalSize"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.WorkerThreadElementContainer.CreateRootUIElement">
      <summary>Returns the root UIElement of the worker thread. This method will be called by the worker thread created by this class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.WorkerThreadElementContainer.GetVisualChild(System.Int32)">
      <summary>Returns the Visual child at index and for this class it is always the HostVisual.</summary>
      <param name="index"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.WorkerThreadElementContainer.HitTestCore(System.Windows.Media.PointHitTestParameters)">
      <summary>Returns the host visual as the hit target. This is required to listen to FrameworkElement property changes such as mouse clicks.</summary>
      <param name="hitTestParameters"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.WorkerThreadElementContainer.MeasureOverride(System.Windows.Size)">
      <summary>Dispatches a Measure pass while returning the latest DesiredSize. If the layout of the root UIElement changes then layout of this class is invalidated to accommodate that.</summary>
      <param name="availableSize"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.WorkerThreadElementContainer.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Forwards the inheritable Framework properties so that worker thread's UI can benefit from them. Normally, inheritable properties are not forwarded across the thread boundries so we need to use a mediator panel to do the trick. It's why we use a panel to host the root UIElement of the worker thread and not use it directly.</summary>
      <param name="e"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.WorkerThreadElementContainer.VisualChildrenCount">
      <summary>Gets the number of visual childs and for this class it is always 1 which accounts for its HostVisual.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ActivationChangeEventArgs">
      <summary>The event args given to listeners of the <see cref="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.ActivationChange" /> event.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ActivationChangeEventArgs.#ctor(Microsoft.VisualStudio.OLE.Interop.IOleComponent,System.Boolean,System.Nullable{Microsoft.VisualStudio.OLE.Interop.OLECRINFO},System.Boolean,System.Nullable{Microsoft.VisualStudio.OLE.Interop.OLECHOSTINFO})">
      <summary>Constructs a <see cref="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ActivationChangeEventArgs" /> with the given info.</summary>
      <param name="activatedComponent">The component being activated, or null if none.</param>
      <param name="calleeIsActivating">A <see cref="T:System.Boolean" /> value indicating if the caller of the <see cref="M:Microsoft.VisualStudio.OLE.Interop.IOleComponent.OnActivationChange(Microsoft.VisualStudio.OLE.Interop.IOleComponent,System.Int32,Microsoft.VisualStudio.OLE.Interop.OLECRINFO[],System.Int32,Microsoft.VisualStudio.OLE.Interop.OLECHOSTINFO[],System.UInt32)" /> is being activated.</param>
      <param name="activatingComponentsInfo">The activating components info, if any.</param>
      <param name="hostIsActivating">A <see cref="T:System.Boolean" /> value indicating whether the component host is activating.</param>
      <param name="hostInfo">The host info, if any.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ActivationChangeEventArgs.ActivatedComponent">
      <summary>The <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleComponent" /> that recieved activation.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ActivationChangeEventArgs.ActivatingComponentsInfo">
      <summary>The <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECRINFO" /> of the component being activated if <see cref="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ActivationChangeEventArgs.ActivatedComponent" /> is not null, otherwise null.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ActivationChangeEventArgs.CalleeIsActivating">
      <summary>A boolean value indicating whether the callee of the <see cref="M:Microsoft.VisualStudio.OLE.Interop.IOleComponent.OnActivationChange(Microsoft.VisualStudio.OLE.Interop.IOleComponent,System.Int32,Microsoft.VisualStudio.OLE.Interop.OLECRINFO[],System.Int32,Microsoft.VisualStudio.OLE.Interop.OLECHOSTINFO[],System.UInt32)" /> is the component being activated.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ActivationChangeEventArgs.HostInfo">
      <summary>The <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECHOSTINFO" /> if <see cref="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ActivationChangeEventArgs.HostIsActivating" /> is true, otherwise null.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ActivationChangeEventArgs.HostIsActivating">
      <summary>A value indicating if the component host is activating.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.AppActivateEventArgs">
      <summary>The event args given to listeners of the <see cref="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.AppActivate" /> event.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.AppActivateEventArgs.#ctor(System.Boolean,System.UInt32)">
      <summary>Constructs a <see cref="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.AppActivateEventArgs" /> object with the given info.</summary>
      <param name="hostAppActivating">True if the host application is gaining activation, false otherwise.</param>
      <param name="threadId">If <paramref name="hostAppActivating" /> is true this represents the thread ID if the thread that owns the window being deactivated. If it is false it is the thread ID of the thread that owns the window that is being activated.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.AppActivateEventArgs.HostAppActivating">
      <summary>Indicates whether the component host application is recieving activation (true) or losing it (false).</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.AppActivateEventArgs.ThreadId">
      <summary>If <see cref="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.AppActivateEventArgs.HostAppActivating" /> is true this represents the thread ID if the thread that owns the window being deactivated. If it is false it is the thread ID of the thread that owns the window that is being activated.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentRegistrationFailedException">
      <summary>Exception that is thrown when <see cref="M:Microsoft.VisualStudio.OLE.Interop.IOleComponentManager.FRegisterComponent(Microsoft.VisualStudio.OLE.Interop.IOleComponent,Microsoft.VisualStudio.OLE.Interop.OLECRINFO[],System.UInt32@)" /> fails inside the <see cref="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent" /> constructor.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentRegistrationFailedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentRegistrationFailedException" /> class with a system-supplied message that describes the error.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentRegistrationFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentRegistrationFailedException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentRegistrationFailedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentRegistrationFailedException" /> class with a specified message that describes the error.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentRegistrationFailedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentRegistrationFailedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentRegistrationFlags">
      <summary>Flags given to <see cref="M:Microsoft.VisualStudio.OLE.Interop.IOleComponentManager.FRegisterComponent(Microsoft.VisualStudio.OLE.Interop.IOleComponent,Microsoft.VisualStudio.OLE.Interop.OLECRINFO[],System.UInt32@)" /> to indicate what kind of component services you need.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentRegistrationFlags.NeedIdleTime">
      <summary>Needs idle time callbacks.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentRegistrationFlags.PreTranslateKeys">
      <summary>Must process keyboard messages before translation.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentRegistrationFlags.PreTranslateAll">
      <summary>Must process all messages before translation.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentRegistrationFlags.NeedSpecialActivationNotifications">
      <summary>Need to be notified for special activation changes (currently, this will notify component if ExclusiveBorderSpace or ExclusiveActivation mode changes). Top-level components should register with this flag.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentRegistrationFlags.NeedAllActivationNotifications">
      <summary>needs to be notified for every change in activation state</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentRegistrationFlags.ExclusiveBorderSpace">
      <summary>Needs exclusive border space when active (normally only used by TopLevel Mac components).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentRegistrationFlags.ExclusiveActivation">
      <summary>Component becomes exclusively active when activated.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentRegistrationFlags.NeedAllMacEvents">
      <summary>Need all Mac events.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentRegistrationFlags.Master">
      <summary>Component is always active and gets first shot at everything.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentRevocationFailedException">
      <summary>Exception that is thrown when <see cref="M:Microsoft.VisualStudio.OLE.Interop.IOleComponentManager.FRevokeComponent(System.UInt32)" /> fails inside <see cref="M:System.IDisposable.Dispose" /> for <see cref="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent" /></summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentRevocationFailedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentRevocationFailedException" /> class with a system-supplied message that describes the error.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentRevocationFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentRevocationFailedException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentRevocationFailedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentRevocationFailedException" /> class with a specified message that describes the error.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentRevocationFailedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentRevocationFailedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentState">
      <summary>Values that are states that can be used to determine the state the component manager is referring to in a OnEnterState callback.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentState.Unknown">
      <summary>Unknown state</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentState.Modal">
      <summary>Modal state; disable toplevel windows</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentState.RedrawOff">
      <summary>Disable window repainting</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentState.WarningsOff">
      <summary>Disable user warnings</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentState.Recording">
      <summary>Recording state</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ContinueMessageLoopEventArgs">
      <summary>The event args given to a listener on the <see cref="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.ContinueMessageLoop" /> event.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ContinueMessageLoopEventArgs.#ctor(System.UInt32,System.IntPtr,System.Nullable{Microsoft.VisualStudio.OLE.Interop.MSG})">
      <param name="reasonCode"></param>
      <param name="privateData"></param>
      <param name="message"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ContinueMessageLoopEventArgs.ContinuePumping">
      <summary>Whether or not the component manager should continue pumping the message loop on return from the handler.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ContinueMessageLoopEventArgs.Message">
      <summary>The current message in the message queue. If this is null it means there is no message in the queue or it has already been removed. Otherwise this is the message retrieved via PeekMessage.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ContinueMessageLoopEventArgs.PrivateData">
      <summary>The private data given in the call to <see cref="M:Microsoft.VisualStudio.OLE.Interop.IOleComponent.FContinueMessageLoop(System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.MSG[])" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ContinueMessageLoopEventArgs.ReasonCode">
      <summary>The reason code given in the call to <see cref="M:Microsoft.VisualStudio.OLE.Interop.IOleComponent.FContinueMessageLoop(System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.MSG[])" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.DesiredStateNotifications">
      <summary>Passed to a call to <see cref="M:Microsoft.VisualStudio.OLE.Interop.IOleComponentManager.FRegisterComponent(Microsoft.VisualStudio.OLE.Interop.IOleComponent,Microsoft.VisualStudio.OLE.Interop.OLECRINFO[],System.UInt32@)" /> to indicate what kind of state change notifications the component is interested in receiving.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.DesiredStateNotifications.None">
      <summary>Not interested in any state change notifications.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.DesiredStateNotifications.Modal">
      <summary>Needs modal state change notification (must be registered by components managing a top level window).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.DesiredStateNotifications.RedrawOff">
      <summary>Needs notification of when redrawing is turned off.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.DesiredStateNotifications.WarningsOff">
      <summary>Needs notification when warnings are turned off.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.DesiredStateNotifications.Recording">
      <summary>Needs notification when recording is active.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.DoIdleEventArgs">
      <summary>The event args given to a listener of the <see cref="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.DoIdle" /> event.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.DoIdleEventArgs.#ctor(System.UInt32)">
      <summary>Constructs a <see cref="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.DoIdleEventArgs" /> object from the given raw flags value.</summary>
      <param name="rawFlags">The MSO flags that indicate what kind of idle tasks the user should perform.  Exposed through the <see cref="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.DoIdleEventArgs.IdleTypes" /> property.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.DoIdleEventArgs.IdleTypes">
      <summary>The type of idle activities that the component should perform.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.DoIdleEventArgs.MoreTimeNeededForIdleTasks">
      <summary>Indicates if the component needs more time to do idle work or not.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.GetWindowEventArgs">
      <summary>The event args given to a listener of the <see cref="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.GetWindow" /> event.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.GetWindowEventArgs.#ctor(Microsoft.VisualStudio.PlatformUI.OleComponentSupport.WindowType)">
      <summary>Constructs a <see cref="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.GetWindowEventArgs" /> requesting the given <see cref="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.GetWindowEventArgs.WindowType" />.</summary>
      <param name="windowType"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.GetWindowEventArgs.WindowHandle">
      <summary>The <see cref="T:System.IntPtr" /> referring to the requested windows HWND.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.GetWindowEventArgs.WindowType">
      <summary>The <see cref="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.GetWindowEventArgs.WindowType" /> desired.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.IdleTypes">
      <summary>The flags given in a call to <see cref="M:Microsoft.VisualStudio.OLE.Interop.IOleComponent.FDoIdle(System.UInt32)" /> to indicate what kind of idle tasks should be done. This enum is also located in the <see cref="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.DoIdleEventArgs" /> given to listeners of the <see cref="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.DoIdle" /> event.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.IdleTypes.Periodic">
      <summary>The component should perform periodic idle tasks.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.IdleTypes.NonPeriodic">
      <summary>The component should perform nonperiodic idle tasks.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.IdleTypes.Priority">
      <summary>The component should perform high priority, nonperiodic idle tasks.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.IdleTypes.All">
      <summary>The component should perform all idle tasks.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent">
      <summary>Basic implementation of a disposable <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleComponent" /></summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.#ctor(Microsoft.VisualStudio.OLE.Interop.IOleComponentManager)">
      <summary>Construct an instance of <see cref="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent" />. This overload will call <see cref="M:Microsoft.VisualStudio.OLE.Interop.IOleComponentManager.FRegisterComponent(Microsoft.VisualStudio.OLE.Interop.IOleComponent,Microsoft.VisualStudio.OLE.Interop.OLECRINFO[],System.UInt32@)" /> automatically on construction.</summary>
      <param name="manager"></param>
      <exception cref="T:System.ArgumentNullException">Throws this if  is null.</exception>
      <exception cref="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentRegistrationFailedException">Can throw this exception if <paramref name="manager" /> returns FALSE (0) from <see cref="M:Microsoft.VisualStudio.OLE.Interop.IOleComponentManager.FRegisterComponent(Microsoft.VisualStudio.OLE.Interop.IOleComponent,Microsoft.VisualStudio.OLE.Interop.OLECRINFO[],System.UInt32@)" />.</exception>
    </member>
    <member name="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.ActivationChange"></member>
    <member name="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.ActivationLost"></member>
    <member name="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.AppActivate"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.BeginTracking">
      <summary>Makes this <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleComponent" /> the tracking component with its associated <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleComponentManager" />.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.ContinueMessageLoop"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.CreateHostedComponent">
      <summary>Creates a new <see cref="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent" /> instance using <see cref="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponentManager.Instance" /> as the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleComponentManager" /> it needs to register itself.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.DisposeManagedResources">
      <summary>Disposes of this object, calling <see cref="M:Microsoft.VisualStudio.OLE.Interop.IOleComponentManager.FRevokeComponent(System.UInt32)" /> if our manager field is non-null and our componentCookie field is not 0.</summary>
      <exception cref="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentRevocationFailedException">Can throw this exception if we were constructed with an <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleComponentManager" />, have a non-zero component cookie (meaning we are registered) and our call to <see cref="M:Microsoft.VisualStudio.OLE.Interop.IOleComponentManager.FRevokeComponent(System.UInt32)" /> returns FALSE (0).</exception>
    </member>
    <member name="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.DoIdle"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.DoOleEvents(Microsoft.VisualStudio.OLE.Interop.IOleComponentManager,System.Func`1)"></member>
    <member name="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.DoPeriodicIdle"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.EndTracking">
      <summary>Makes this <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleComponent" /> no longer the tracking component with its associated <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleComponentManager" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.FContinueMessageLoopCore(System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.MSG[])">
      <summary>Default implementation of FContinueMessageLoop. Simply raises the <see cref="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.ContinueMessageLoop" /> event if there are any listeners.</summary>
      <param name="uReason"></param>
      <param name="pvLoopData"></param>
      <param name="pMsgPeeked"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.FDoIdleCore(System.UInt32)">
      <summary>Default implementation of FDoIdle. Simply raises the <see cref="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.DoIdle" /> and <see cref="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.DoPeriodicIdle" /> events as appropriate (based on value of ) if there are any listeners.</summary>
      <param name="grfidlef"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.FPreTranslateMessageCore(Microsoft.VisualStudio.OLE.Interop.MSG[])">
      <summary>Default implemmentation of FPreTranslateMessage. Simply raises the <see cref="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.PreTranslateMessage" /> event if there are listeners.</summary>
      <param name="pMsg"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.FQueryTerminateCore(System.Int32)">
      <summary>Default implemmentation of FQueryTerminate. Simply raises the <see cref="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.QueryTerminate" /> event if there are listeners.</summary>
      <param name="fPromptUser"></param>
    </member>
    <member name="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.GetWindow"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.HwndGetWindowCore(System.UInt32,System.UInt32)">
      <summary>Default implemmentation of HwndGetWindow. Simply raises the <see cref="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.GetWindow" /> event if there are listeners.</summary>
      <param name="dwWhich"></param>
      <param name="dwReserved"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.IsTrackingComponent">
      <summary>Sets whether this component is the tracking component, accomplished by calling <see cref="M:Microsoft.VisualStudio.OLE.Interop.IOleComponentManager.FSetTrackingComponent(System.UInt32,System.Int32)" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.Microsoft#VisualStudio#OLE#Interop#IOleComponent#FContinueMessageLoop(System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.MSG[])">
      <summary>Called during each iteration of a message loop that the component pushed. Simply calls through to <see cref="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.FContinueMessageLoopCore(System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.MSG[])" />.</summary>
      <param name="uReason">The reason given by the caller of <see cref="M:Microsoft.VisualStudio.OLE.Interop.IOleComponentManager.FPushMessageLoop(System.UInt32,System.UInt32,System.IntPtr)" />.</param>
      <param name="pvLoopData">Private data provided by the caller of <see cref="M:Microsoft.VisualStudio.OLE.Interop.IOleComponentManager.FPushMessageLoop(System.UInt32,System.UInt32,System.IntPtr)" />.</param>
      <param name="pMsgPeeked">The message from the queue, or null if there was none.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.Microsoft#VisualStudio#OLE#Interop#IOleComponent#FDoIdle(System.UInt32)">
      <summary>Called to give a component a chance to do idle time tasks. Component may periodically call <see cref="M:Microsoft.VisualStudio.OLE.Interop.IOleComponentManager.FContinueIdle" />; if this method returns FALSE (0), component should terminate its idle time processing and return. Simply calls through to <see cref="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.FDoIdleCore(System.UInt32)" />.</summary>
      <param name="grfidlef">A group of bit flags that indicate what type of tasks to perform (maps directly to <see cref="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.IdleTypes" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.Microsoft#VisualStudio#OLE#Interop#IOleComponent#FPreTranslateMessage(Microsoft.VisualStudio.OLE.Interop.MSG[])">
      <summary>Host calls this method on the active component (if its registration info (<see cref="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentRegistrationFlags" />) indicates it is interested in Pre-translate calls) to give the component a chance to process messages before they are translated and dispatched. The host need not call this method if no component is active. Simply calls through to <see cref="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.FPreTranslateMessageCore(Microsoft.VisualStudio.OLE.Interop.MSG[])" />.</summary>
      <param name="pMsg">The <see cref="T:Microsoft.VisualStudio.OLE.Interop.MSG" /> object to pre-translate.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.Microsoft#VisualStudio#OLE#Interop#IOleComponent#FQueryTerminate(System.Int32)">
      <summary>Called when component manager wishes to know if the component is in a state in which it can terminate. Simply calls through to <see cref="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.FQueryTerminateCore(System.Int32)" />.</summary>
      <param name="fPromptUser">A value indicating whether user prompting should occur if necessary.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.Microsoft#VisualStudio#OLE#Interop#IOleComponent#FReserved1(System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
      <summary>Reserved slot, not called.</summary>
      <param name="dwReserved"></param>
      <param name="message"></param>
      <param name="wParam"></param>
      <param name="lParam"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.Microsoft#VisualStudio#OLE#Interop#IOleComponent#HwndGetWindow(System.UInt32,System.UInt32)">
      <summary>Called to retrieve a window associated with the component, as specified by <paramref name="dwWhich" /> which maps to a value in <see cref="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.WindowType" />. Simply calls through to <see cref="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.HwndGetWindowCore(System.UInt32,System.UInt32)" />.</summary>
      <param name="dwWhich">The type of window to retrieve, maps directly to a value in <see cref="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.WindowType" />.</param>
      <param name="dwReserved">Reserved for future use and should be zero</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.Microsoft#VisualStudio#OLE#Interop#IOleComponent#OnActivationChange(Microsoft.VisualStudio.OLE.Interop.IOleComponent,System.Int32,Microsoft.VisualStudio.OLE.Interop.OLECRINFO[],System.Int32,Microsoft.VisualStudio.OLE.Interop.OLECHOSTINFO[],System.UInt32)">
      <summary>Notify component when a new object is being activated. Simply calls through to <see cref="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.OnActivationChangeCore(Microsoft.VisualStudio.OLE.Interop.IOleComponent,System.Int32,Microsoft.VisualStudio.OLE.Interop.OLECRINFO[],System.Int32,Microsoft.VisualStudio.OLE.Interop.OLECHOSTINFO[],System.UInt32)" />.</summary>
      <param name="pic">If non-NULL, then this is the component that is being activated.</param>
      <param name="fSameComponent">True if <paramref name="pic" /> is the component that called this method.</param>
      <param name="pcrinfo">
        <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECRINFO" /> of <paramref name="pic" /> if  is non-null.</param>
      <param name="fHostIsActivating">If <paramref name="pic" /> is null and this is TRUE (1) it indicates the host is activating. If <paramref name="pic" /> is null and this is FALSE (0) then there is no current active object.</param>
      <param name="pchostinfo">If <paramref name="fHostIsActivating" /> is TRUE (1) then this is the hosts <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECHOSTINFO" />, otherwise this is null.</param>
      <param name="dwReserved">Reserved for future use, should be 0.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.Microsoft#VisualStudio#OLE#Interop#IOleComponent#OnAppActivate(System.Int32,System.UInt32)">
      <summary>Notify component when the host application gains or loses activation. Simply calls through to <see cref="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.OnAppActivateCore(System.Int32,System.UInt32)" />.</summary>
      <param name="fActive">If TURE (1), the host app is being activated, if FALSE (0) the host app is being deactivated.</param>
      <param name="dwOtherThreadID">If <paramref name="fActive" /> is TRUE (1) then this is the thread ID of the thread owning the window being deactivated. If <paramref name="fActive" /> is FALSE (0) this is the thread ID of the thread owning the window being activated.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.Microsoft#VisualStudio#OLE#Interop#IOleComponent#OnEnterState(System.UInt32,System.Int32)">
      <summary>Notify component when app enters or exits the state given in <paramref name="uStateID" />. Simply calls through to <see cref="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.OnChangeStateCore(System.UInt32,System.Int32)" />.</summary>
      <param name="uStateID">The state being entered or exited, maps directly to <see cref="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentState" /></param>
      <param name="fEnter">If the value is TRUE (1) then we are entering the state described by <paramref name="uStateID" /> otherwise we are exiting it.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.Microsoft#VisualStudio#OLE#Interop#IOleComponent#OnLoseActivation">
      <summary>Notify the active component that it has lost its active status because the host or another component has become active. Simply calls through to <see cref="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.OnLoseActivationCore" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.Microsoft#VisualStudio#OLE#Interop#IOleComponent#Terminate">
      <summary>Called when component manager wishes to terminate the component's registration. Component should revoke its registration with component manager, release references to component manager and perform any necessary cleanup. Simply calls through to <see cref="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.TerminateCore" />.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.ModalStateChanged"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.OnActivationChangeCore(Microsoft.VisualStudio.OLE.Interop.IOleComponent,System.Int32,Microsoft.VisualStudio.OLE.Interop.OLECRINFO[],System.Int32,Microsoft.VisualStudio.OLE.Interop.OLECHOSTINFO[],System.UInt32)">
      <summary>Default implemmentation of OnActivationChange. Simply raises the <see cref="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.ActivationChange" /> event if there are listeners.</summary>
      <param name="pic"></param>
      <param name="fSameComponent"></param>
      <param name="pcrinfo"></param>
      <param name="fHostIsActivating"></param>
      <param name="pchostinfo"></param>
      <param name="dwReserved"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.OnAppActivateCore(System.Int32,System.UInt32)">
      <summary>Default implemmentation of OnAppActivate. Simply raises the <see cref="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.AppActivate" /> event if there are listeners.</summary>
      <param name="fActive"></param>
      <param name="dwOtherThreadID"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.OnChangeStateCore(System.UInt32,System.Int32)">
      <summary>Default implemmentation of OnEnterState. Simply raises the approriate event based on what state changed (described in <see cref="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentState" />.</summary>
      <param name="uStateID"></param>
      <param name="fEnter"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.OnLoseActivationCore">
      <summary>Default implemmentation of OnLoseActivation. Simply raises the <see cref="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.ActivationLost" /> event if there are listeners.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.PeriodicIdleTimePeriod">
      <summary>Sets or retrieves the idle time period in milliseconds for this components idle callbacks.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.PreTranslateMessage"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.PushMessageLoop(Microsoft.VisualStudio.OLE.Interop._OLELOOP,System.IntPtr)">
      <summary>Pushes this component to the OleComonentManager as the message loop handler by calling <see cref="M:Microsoft.VisualStudio.OLE.Interop.IOleComponentManager.FPushMessageLoop(System.UInt32,System.UInt32,System.IntPtr)" />. Message loop blocks until an <see cref="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.ContinueMessageLoop" /> handler sets the <see cref="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ContinueMessageLoopEventArgs.ContinuePumping" /> /// to false.</summary>
      <param name="reason">Reason of the message loop.</param>
      <param name="pvLoopData">Private data for the loop.</param>
    </member>
    <member name="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.QueryTerminate"></member>
    <member name="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.RecordingStateChanged"></member>
    <member name="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.RedrawOffStateChanged"></member>
    <member name="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.Terminate"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.TerminateCore">
      <summary>Default implemmentation of Terminate. Simply raises the <see cref="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.Terminate" /> event if there are listeners. Also calls <see cref="M:System.IDisposable.Dispose" /> and nulls out any reference to a <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleComponentManager" /> that we may have been constructed with.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.WarningsOffStateChanged"></member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponentManager"></member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponentManager.Instance"></member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.PreTranslateMessageEventArgs">
      <summary>The event args given to listeners of the <see cref="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.PreTranslateMessage" /> event.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.PreTranslateMessageEventArgs.#ctor(Microsoft.VisualStudio.OLE.Interop.MSG)">
      <summary>Construct a <see cref="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.PreTranslateMessageEventArgs" /> object from the given <see cref="T:Microsoft.VisualStudio.OLE.Interop.MSG" /> struct.</summary>
      <param name="message">The <see cref="T:Microsoft.VisualStudio.OLE.Interop.MSG" /> object given to <see cref="M:Microsoft.VisualStudio.OLE.Interop.IOleComponent.FPreTranslateMessage(Microsoft.VisualStudio.OLE.Interop.MSG[])" /></param>
    </member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.PreTranslateMessageEventArgs.Message">
      <summary>The <see cref="T:System.Windows.Interop.MSG" /> object for the component to pre-translate.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.PreTranslateMessageEventArgs.MessageConsumed">
      <summary>Indicates whether the message was handled or if the component manager needs to process it further.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.QueryTerminateEventArgs">
      <summary>The event args given to a listener of the <see cref="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.QueryTerminate" /> event.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.QueryTerminateEventArgs.#ctor(System.Boolean)">
      <summary>Constructs a <see cref="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.QueryTerminateEventArgs" /> object.</summary>
      <param name="shouldPromptUser">A <see cref="T:System.Boolean" /> value indicating if the component should prompt the user for a termination decision, if necessary.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.QueryTerminateEventArgs.CanTerminate">
      <summary>Indicates if the component can terminate.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.QueryTerminateEventArgs.ShouldPromptUser">
      <summary>Indicates whether the component should prompt the user if it can't decide if it is okay to terminate, or if it decides that it can't (to alert the user why).</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.StateChangedEventArgs">
      <summary>The event args given to listeners of the <see cref="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.ModalStateChanged" /> event. (also RecordingStateChanged, WarningsOffStateChanged, RedrawOffStateChanged)</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.StateChangedEventArgs.#ctor(System.Int32)">
      <summary>Constructs a <see cref="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.StateChangedEventArgs" /> object with the given info.</summary>
      <param name="fEnteringState"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.StateChangedEventArgs.TransitionType">
      <summary>The state the component is entering or exiting.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.StateTransitionType"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.StateTransitionType.Exit">
      <summary>We are exiting a given state.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.StateTransitionType.Enter">
      <summary>We are entering a given state.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.WindowType">
      <summary>Window type desired by the caller of <see cref="M:Microsoft.VisualStudio.OLE.Interop.IOleComponent.HwndGetWindow(System.UInt32,System.UInt32)" />. Also passed to listeners of the <see cref="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.GetWindow" /> event in the <see cref="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.GetWindowEventArgs" /> object.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.WindowType.WindowToplevel">
      <summary>MDI Apps should return the MDI frame (not MDI client) or App frame window, and SDI Apps should return the frame window which hosts the component. Basically it should be the topmost window which owns the component.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.WindowType.WindowOwner">
      <summary>This is the window which owns the component. It could be same as the window obtained by WindowTopLevel or be an owned window of that window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.WindowType.WindowComponent">
      <summary>This is the "main" window of the component (if it has one).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.WindowType.WindowDialogOwner">
      <summary>Caller wishes to display a dialog to be parented by the component. Component should return a window suitable for use as the dialog's owner window.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.ActivityLog"></member>
    <member name="M:Microsoft.VisualStudio.Shell.ActivityLog.LogError(System.String,System.String)"></member>
    <member name="P:Microsoft.VisualStudio.Shell.ActivityLog.LogFilePath"></member>
    <member name="M:Microsoft.VisualStudio.Shell.ActivityLog.LogInformation(System.String,System.String)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.ActivityLog.LogWarning(System.String,System.String)"></member>
    <member name="T:Microsoft.VisualStudio.Shell.CommonMessagePump">
      <summary>CommonMessagePump allows callers to block the current thread until a handle or handles have been signaled.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.CommonMessagePump.#ctor"></member>
    <member name="P:Microsoft.VisualStudio.Shell.CommonMessagePump.AllowCancel">
      <summary>Controls if the wait dialog has an enabled cancel button.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.CommonMessagePump.Microsoft#Internal#VisualStudio#Shell#Interop#IOleComponent2Private#FContinueMessageLoop(System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.MSG[])">
      <param name="uReason"></param>
      <param name="pvLoopData"></param>
      <param name="pMsgPeeked"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.CommonMessagePump.Microsoft#Internal#VisualStudio#Shell#Interop#IOleComponent2Private#FDoIdle(System.UInt32)">
      <param name="grfidlef"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.CommonMessagePump.Microsoft#Internal#VisualStudio#Shell#Interop#IOleComponent2Private#FPreTranslateMessage(Microsoft.VisualStudio.OLE.Interop.MSG[])">
      <param name="pMsg"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.CommonMessagePump.Microsoft#Internal#VisualStudio#Shell#Interop#IOleComponent2Private#FQueryTerminate(System.Int32)">
      <param name="fPromptUser"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.CommonMessagePump.Microsoft#Internal#VisualStudio#Shell#Interop#IOleComponent2Private#FReserved1(System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
      <param name="dwReserved"></param>
      <param name="message"></param>
      <param name="wParam"></param>
      <param name="lParam"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.CommonMessagePump.Microsoft#Internal#VisualStudio#Shell#Interop#IOleComponent2Private#GetWaitHandlesAndTimeout(System.IntPtr[],System.UInt32@,System.UInt32@,System.IntPtr)">
      <param name="handles"></param>
      <param name="handleCount"></param>
      <param name="timeout"></param>
      <param name="loopData"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.CommonMessagePump.Microsoft#Internal#VisualStudio#Shell#Interop#IOleComponent2Private#HwndGetWindow(System.UInt32,System.UInt32)">
      <param name="dwWhich"></param>
      <param name="dwReserved"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.CommonMessagePump.Microsoft#Internal#VisualStudio#Shell#Interop#IOleComponent2Private#OnActivationChange(Microsoft.VisualStudio.OLE.Interop.IOleComponent,System.Int32,Microsoft.VisualStudio.OLE.Interop.OLECRINFO[],System.Int32,Microsoft.VisualStudio.OLE.Interop.OLECHOSTINFO[],System.UInt32)">
      <param name="pic"></param>
      <param name="fSameComponent"></param>
      <param name="pcrinfo"></param>
      <param name="fHostIsActivating"></param>
      <param name="pchostinfo"></param>
      <param name="dwReserved"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.CommonMessagePump.Microsoft#Internal#VisualStudio#Shell#Interop#IOleComponent2Private#OnAppActivate(System.Int32,System.UInt32)">
      <param name="fActive"></param>
      <param name="dwOtherThreadID"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.CommonMessagePump.Microsoft#Internal#VisualStudio#Shell#Interop#IOleComponent2Private#OnEnterState(System.UInt32,System.Int32)">
      <param name="uStateID"></param>
      <param name="fEnter"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.CommonMessagePump.Microsoft#Internal#VisualStudio#Shell#Interop#IOleComponent2Private#OnHandleSignaled(System.UInt32,System.IntPtr,System.Boolean@)">
      <param name="handleIndex"></param>
      <param name="pvLoopData"></param>
      <param name="shouldContinue"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.CommonMessagePump.Microsoft#Internal#VisualStudio#Shell#Interop#IOleComponent2Private#OnLoseActivation"></member>
    <member name="M:Microsoft.VisualStudio.Shell.CommonMessagePump.Microsoft#Internal#VisualStudio#Shell#Interop#IOleComponent2Private#OnTimeout(System.IntPtr,System.Boolean@)">
      <param name="pvLoopData"></param>
      <param name="shouldContinue"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.CommonMessagePump.Microsoft#Internal#VisualStudio#Shell#Interop#IOleComponent2Private#Terminate"></member>
    <member name="M:Microsoft.VisualStudio.Shell.CommonMessagePump.Microsoft#VisualStudio#OLE#Interop#IOleComponent#FContinueMessageLoop(System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.MSG[])">
      <param name="uReason"></param>
      <param name="pvLoopData"></param>
      <param name="pMsgPeeked"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.CommonMessagePump.Microsoft#VisualStudio#OLE#Interop#IOleComponent#FDoIdle(System.UInt32)">
      <param name="grfidlef"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.CommonMessagePump.Microsoft#VisualStudio#OLE#Interop#IOleComponent#FPreTranslateMessage(Microsoft.VisualStudio.OLE.Interop.MSG[])">
      <param name="pMsg"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.CommonMessagePump.Microsoft#VisualStudio#OLE#Interop#IOleComponent#FQueryTerminate(System.Int32)">
      <param name="fPromptUser"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.CommonMessagePump.Microsoft#VisualStudio#OLE#Interop#IOleComponent#FReserved1(System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
      <param name="dwReserved"></param>
      <param name="message"></param>
      <param name="wParam"></param>
      <param name="lParam"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.CommonMessagePump.Microsoft#VisualStudio#OLE#Interop#IOleComponent#HwndGetWindow(System.UInt32,System.UInt32)">
      <param name="dwWhich"></param>
      <param name="dwReserved"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.CommonMessagePump.Microsoft#VisualStudio#OLE#Interop#IOleComponent#OnActivationChange(Microsoft.VisualStudio.OLE.Interop.IOleComponent,System.Int32,Microsoft.VisualStudio.OLE.Interop.OLECRINFO[],System.Int32,Microsoft.VisualStudio.OLE.Interop.OLECHOSTINFO[],System.UInt32)">
      <param name="pic"></param>
      <param name="fSameComponent"></param>
      <param name="pcrinfo"></param>
      <param name="fHostIsActivating"></param>
      <param name="pchostinfo"></param>
      <param name="dwReserved"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.CommonMessagePump.Microsoft#VisualStudio#OLE#Interop#IOleComponent#OnAppActivate(System.Int32,System.UInt32)">
      <param name="fActive"></param>
      <param name="dwOtherThreadID"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.CommonMessagePump.Microsoft#VisualStudio#OLE#Interop#IOleComponent#OnEnterState(System.UInt32,System.Int32)">
      <param name="uStateID"></param>
      <param name="fEnter"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.CommonMessagePump.Microsoft#VisualStudio#OLE#Interop#IOleComponent#OnLoseActivation"></member>
    <member name="M:Microsoft.VisualStudio.Shell.CommonMessagePump.Microsoft#VisualStudio#OLE#Interop#IOleComponent#Terminate"></member>
    <member name="M:Microsoft.VisualStudio.Shell.CommonMessagePump.Microsoft#VisualStudio#Shell#Interop#IVsCommonMessagePump#ModalWaitForObjects(System.IntPtr[],System.UInt32,System.UInt32@)">
      <summary>Blocks the current thread by pumping messages until either a timeout or one of the specified handles has been signaled.</summary>
      <param name="handles">Array of handles to wait on.</param>
      <param name="handleCount">Count of handles</param>
      <param name="waitResult">WAIT_TIMEOUT if the wai timed out OR the index to the signaled handle.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.CommonMessagePump.Microsoft#VisualStudio#Shell#Interop#IVsCommonMessagePump#ModalWaitForObjectsWithClient(System.IntPtr[],System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsCommonMessagePumpClientEvents)">
      <summary>Blocks the current thread by pumping messages until either a timeout or one of the specified handles has been signaled.</summary>
      <param name="handles">Array of handles to wait on.</param>
      <param name="handleCount">Count of handles</param>
      <param name="pClient"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.CommonMessagePump.Microsoft#VisualStudio#Shell#Interop#IVsCommonMessagePump#SetAllowCancel(System.Boolean)">
      <summary>Controls if the wait dialog has an enabled cancel button.</summary>
      <param name="allowCancel"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.CommonMessagePump.Microsoft#VisualStudio#Shell#Interop#IVsCommonMessagePump#SetStatusBarText(System.String)">
      <summary>Text of the status bar during the wait.</summary>
      <param name="statusBarText"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.CommonMessagePump.Microsoft#VisualStudio#Shell#Interop#IVsCommonMessagePump#SetTimeout(System.UInt32)">
      <summary>Set the timeout value for the modal wait. Use 0xFFFFFFFF for an infinite wait.</summary>
      <param name="timeoutInMilliseconds"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.CommonMessagePump.Microsoft#VisualStudio#Shell#Interop#IVsCommonMessagePump#SetWaitText(System.String)">
      <summary>Wait dialog text for what we are waiting on.</summary>
      <param name="waitText"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.CommonMessagePump.Microsoft#VisualStudio#Shell#Interop#IVsCommonMessagePump#SetWaitTitle(System.String)">
      <summary>Title of the wait dialog</summary>
      <param name="waitTitle"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.CommonMessagePump.ModalWaitForHandles(System.Threading.WaitHandle)">
      <summary>Blocks the current thread by pumping messages until either a timeout or the specified handle has been signaled.</summary>
      <param name="waitHandle"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.CommonMessagePump.ModalWaitForHandles(System.Threading.WaitHandle[],Microsoft.VisualStudio.Shell.Interop.IVsCommonMessagePumpClientEvents)">
      <summary>Blocks the current thread by pumping messages until either a timeout or one of the specified handles has been signaled.</summary>
      <param name="waitHandles"></param>
      <param name="client">Caller implementation of IVsCommonMessagePumpClientEvents</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.CommonMessagePump.ModalWaitForHandles(System.Threading.WaitHandle[],System.Int32@)">
      <summary>Blocks the current thread by pumping messages until either a timeout or one of the specified handles has been signaled.</summary>
      <param name="waitHandles"></param>
      <param name="handleSignaledIndex">Index to the handle that was signaled.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.CommonMessagePump.StatusBarText">
      <summary>Text of the status bar during the wait.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.CommonMessagePump.Timeout">
      <summary>Set the timeout value for the modal wait. Use TimeSpan.MaxValue for an infinite wait.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.CommonMessagePump.WaitText">
      <summary>Wait dialog text for what we are waiting on.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.CommonMessagePump.WaitTitle">
      <summary>Title of the wait dialog</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.CommonMessagePumpExitCode"></member>
    <member name="F:Microsoft.VisualStudio.Shell.CommonMessagePumpExitCode.Timeout">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.CommonMessagePumpExitCode.UserCanceled">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.CommonMessagePumpExitCode.ApplicationExit">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.CommonMessagePumpExitCode.HandleSignaled">
      <summary />
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.DesignPropertyDescriptor">
      <summary>A specialization of <see cref="T:System.ComponentModel.PropertyDescriptor" /> that allows customization of the display name of the property in the property grid.  </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.DesignPropertyDescriptor.#ctor(System.ComponentModel.PropertyDescriptor)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.DesignPropertyDescriptor" /> for the specified property descriptor.</summary>
      <param name="prop">
        <see cref="T:System.ComponentModel.PropertyDescriptor" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.DesignPropertyDescriptor.CanResetValue(System.Object)">
      <summary>Determines whether or not resetting the object changes its value.</summary>
      <returns>true if resetting the component changes its value, otherwise false.</returns>
      <param name="component">The component that owns the property.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.DesignPropertyDescriptor.ComponentType">
      <summary>Gets the component type.</summary>
      <returns>The type of the component.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.DesignPropertyDescriptor.Converter">
      <summary>Gets the type converter for the property.</summary>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.DesignPropertyDescriptor.DisplayName">
      <summary>Gets the display name for this property.</summary>
      <returns>The display name.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.DesignPropertyDescriptor.GetEditor(System.Type)">
      <summary>Gets an editor of the specified type.</summary>
      <returns>The editor, or null if it cannot be found.</returns>
      <param name="editorBaseType">The type of the editor.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.DesignPropertyDescriptor.GetTypeFromNameProperty(System.String)">
      <summary>Converts the name to a <see cref="T:System.Type" />.</summary>
      <returns>
        <see cref="T:System.Type" />.</returns>
      <param name="typeName">The name of the type.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.DesignPropertyDescriptor.GetValue(System.Object)">
      <summary>Gets the value of the property.</summary>
      <returns>The value of the property.</returns>
      <param name="component">The component that owns the property.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.DesignPropertyDescriptor.IsReadOnly">
      <summary>Gets whether or not the property is read-only.</summary>
      <returns>true if the property is read-only, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.DesignPropertyDescriptor.PropertyType">
      <summary>Gets the type of the property.</summary>
      <returns>The type of the property.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.DesignPropertyDescriptor.ResetValue(System.Object)">
      <summary>Resets the value to the default value.</summary>
      <param name="component">The component that owns the property.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.DesignPropertyDescriptor.SetValue(System.Object,System.Object)">
      <summary>Sets the value of the property to the specified value.</summary>
      <param name="component">The component that owns the property.</param>
      <param name="value">The value to set.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.DesignPropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary>Determines whether or not the property's value should be persisted.</summary>
      <returns>true if the property should be persisted, otherwise false.</returns>
      <param name="component">The component that owns the property.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar.ToolbarDropTarget"></member>
    <member name="T:Microsoft.VisualStudio.Shell.EnumerableComCollection`2">
      <typeparam name="TComEnumerator"></typeparam>
      <typeparam name="TEnumerated"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.EnumerableComCollection`2.#ctor(`0)">
      <param name="enumerator"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.EnumerableComCollection`2.#ctor(`0,System.Int32)">
      <param name="enumerator"></param>
      <param name="cacheSize"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.EnumerableComCollection`2.Clone(`0,`0@)">
      <param name="enumerator"></param>
      <param name="clone"></param>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.EnumerableComCollection`2.DefaultCacheSize"></member>
    <member name="M:Microsoft.VisualStudio.Shell.EnumerableComCollection`2.GetEnumerator"></member>
    <member name="M:Microsoft.VisualStudio.Shell.EnumerableComCollection`2.NextItems(`0,System.UInt32,`1[],System.UInt32@)">
      <param name="enumerator"></param>
      <param name="count"></param>
      <param name="items"></param>
      <param name="fetched"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.EnumerableComCollection`2.Reset(`0)">
      <param name="enumerator"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.EnumerableComCollection`2.Skip(`0,System.UInt32)">
      <param name="enumerator"></param>
      <param name="count"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.EnumerableComCollection`2.System#Collections#IEnumerable#GetEnumerator"></member>
    <member name="T:Microsoft.VisualStudio.Shell.IComEnumeratorRelay`2">
      <typeparam name="TComEnumerator"></typeparam>
      <typeparam name="TEnumerated"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.IComEnumeratorRelay`2.Clone(`0,`0@)">
      <param name="enumerator"></param>
      <param name="newInstance"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.IComEnumeratorRelay`2.NextItems(`0,System.UInt32,`1[],System.UInt32@)">
      <param name="enumerator"></param>
      <param name="count"></param>
      <param name="items"></param>
      <param name="fetched"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.IComEnumeratorRelay`2.Reset(`0)">
      <param name="enumerator"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.IComEnumeratorRelay`2.Skip(`0,System.UInt32)">
      <param name="enumerator"></param>
      <param name="count"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.IConfigureToolboxItem">
      <summary>Provides the ability to configure <see cref="T:System.Drawing.Design.ToolboxItem" /> objects dynamically by adding additional data to the toolbox item's Properties dictionary. This data is then serialized as a permanent part of the toolbox item.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.IConfigureToolboxItem.ConfigureToolboxItem(System.Drawing.Design.ToolboxItem)">
      <summary>Called by the toolbox service to configure <see cref="T:System.Drawing.Design.ToolboxItem" /> objects.</summary>
      <param name="item">[in] The <see cref="T:System.Drawing.Design.ToolboxItem" /> object whose configuration is to be modified.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.InstalledProductRegistrationAttribute.#ctor(System.String,System.String,System.String)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.InstalledProductRegistrationAttribute.#ctor(System.String,System.String,System.String,System.Boolean)"></member>
    <member name="P:Microsoft.VisualStudio.Shell.InstalledProductRegistrationAttribute.UseVsProductId"></member>
    <member name="T:Microsoft.VisualStudio.Shell.IProfileMigrator"></member>
    <member name="M:Microsoft.VisualStudio.Shell.IProfileMigrator.MigrateSettings(Microsoft.VisualStudio.Shell.Interop.IVsSettingsReader,Microsoft.VisualStudio.Shell.Interop.IVsSettingsWriter)">
      <param name="reader"></param>
      <param name="writer"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.LocDisplayNameAttribute">
      <summary>Specifies the localizable display name for a property, event, or public void method which takes no arguments.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.LocDisplayNameAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.LocDisplayNameAttribute" /> for the specified name.</summary>
      <param name="name">The name to localize.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.LocDisplayNameAttribute.DisplayName">
      <summary>Gets the localized display name.</summary>
      <returns>The localized display name.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Package.FindWindowPane(System.Type,System.Int32,System.Boolean)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Package.GetToolboxItemData(System.String,System.Windows.Forms.DataFormats.Format)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft#VisualStudio#Shell#Interop#IVsToolboxItemProvider#GetItemContent(System.String,System.UInt16,System.IntPtr@)"></member>
    <member name="T:Microsoft.VisualStudio.Shell.PackageRegistrationAttribute">
      <summary>Modify your class that implements <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPackage" /> by using this attribute so that the registration tool, RegPkg.exe, will look for additional attributes. For more information, see Registering VSPackages.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.PackageRegistrationAttribute.#ctor">
      <summary>Initializes an instance of this attribute.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.PackageRegistrationAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Creates registry entries that correspond to the value of this attribute.</summary>
      <param name="context">Contains information about the whole installation so that registry entries that are specific to this attribute may be created.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.PackageRegistrationAttribute.RegisterUsing">
      <summary>Gets or sets the method of registration.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Shell.RegistrationMethod" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.PackageRegistrationAttribute.SatellitePath">
      <summary>Gets or sets the non-default resource .dll location.</summary>
      <returns>The non-default resource .dll location.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.PackageRegistrationAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Removes attribute-specific registry entries.</summary>
      <param name="context">Contains information about the whole installation so that registry entries that are specific to this attribute may be removed.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.PackageRegistrationAttribute.UseManagedResourcesOnly">
      <summary>Gets or sets whether package resources are described in a managed package or in a satellite UI .dll file.</summary>
      <returns>Set to true if package resources are described in a managed package, false if they are in a satellite UI .dll file.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.ProfileMigrationType"></member>
    <member name="F:Microsoft.VisualStudio.Shell.ProfileMigrationType.None">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.ProfileMigrationType.PassThrough">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.ProfileMigrationType.Custom">
      <summary />
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.ProvideAutoLoadAttribute">
      <summary>Apply this attribute to your VSPackage class to cause it to be automatically loaded when a specified UI context is active. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideAutoLoadAttribute.#ctor(System.String)">
      <summary>Returns a new instance of this attribute with the specified <paramref name="cmdUiContextGuid" />.</summary>
      <param name="cmdUiContextGuid">The GUID of the command context which will cause this package to load.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideAutoLoadAttribute.LoadGuid">
      <summary>Returns the UI context GUID which will cause your package to load.</summary>
      <returns>The UI context GUID.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideAutoLoadAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Provides registration information about a VSPackage when called by an external registration tool like regpkg.exe. </summary>
      <param name="context"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideAutoLoadAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Removes registration information about a VSPackage when called by an external registration tool like regpkg.exe. </summary>
      <param name="context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.ProvideAutomationObjectAttribute">
      <summary>Modifying your <see cref="T:Microsoft.VisualStudio.Shell.Package" />-derived class with this attribute declares that it provides a particular automation object.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideAutomationObjectAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.ProvideAutomationObjectAttribute" />.</summary>
      <param name="objectName">The name of the automation object.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideAutomationObjectAttribute.Description">
      <summary>Gets or sets the description of the automation object.</summary>
      <returns>The description of the automation object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideAutomationObjectAttribute.Name">
      <summary>Gets the name of the automation object.</summary>
      <returns>The name of the automation object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideAutomationObjectAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Registers this attribute when called by an external registration tool such as RegPkg.exe.</summary>
      <param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideAutomationObjectAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Removes the registry key when called by an external registration tool such as RegPkg.exe. </summary>
      <param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.ProvideLanguageCodeExpansionAttribute">
      <summary>Registers language service support for code snippets.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageCodeExpansionAttribute.#ctor(System.Object,System.String,System.Int32,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.ProvideLanguageCodeExpansionAttribute" /> class.</summary>
      <param name="languageService">[in] This is either a string containing a GUID or a type representing the class that implements the language service. The language service GUID is derived from this string or type.</param>
      <param name="languageName">[in] The name of the language. This name is used in the registry for registry key and entry names.</param>
      <param name="languageResourceId">[in] The resource ID for the localized version of the language name. This is used to present the language name in dialog boxes and other user interface elements.</param>
      <param name="languageIdentifier">[in] A string containing an identifier specific to the language that is used to mark and identify code snippets.</param>
      <param name="pathToSnippetIndexFile">[in] A string containing the path to the code snippets index file for the language.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageCodeExpansionAttribute.ForceCreateDirs">
      <summary>Gets or sets a semicolon-delimited string containing the directory or directories that should be created.</summary>
      <returns>The directory or directories that should be created.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageCodeExpansionAttribute.LanguageName">
      <summary>Gets the name of the language.</summary>
      <returns>The name of the language. </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageCodeExpansionAttribute.LanguageServiceSid">
      <summary>Gets the GUID of the language service.</summary>
      <returns>The GUID of the language service. </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageCodeExpansionAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Creates all of the registry keys and entries as specified by the class constructor.</summary>
      <param name="context">[in] A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> object used to manage registry keys.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageCodeExpansionAttribute.SearchPaths">
      <summary>Gets or sets a semicolon-delimited string containing the default paths to search for snippets.</summary>
      <returns>Returns a semicolon-delimited string containing the paths to search for snippets.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageCodeExpansionAttribute.ShowRoots">
      <summary>Gets or sets whether or not the roots of the code snippets should be shown.</summary>
      <returns>true if the roots should be shown, otherwise false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageCodeExpansionAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Removes all of the registry keys and entries as specified by the class constructor.</summary>
      <param name="context">[in] A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> object used to manage registry keys.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.ProvideMenuResourceAttribute">
      <summary>Provides registration information about menu resources used in a VSPackage. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideMenuResourceAttribute.#ctor(System.Int16,System.Int32)">
      <summary>This constructor creates a new ProvideMenuResourceAttribute object with the given resource ID and version number.</summary>
      <param name="resourceID">The ID of the menu resource. It must match the resource ID used in both the satellite (resource-only) DLL and the Command Table Configuration (.Ctc) Files.</param>
      <param name="version">The version number of the menu resource.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideMenuResourceAttribute.#ctor(System.String,System.Int32)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideMenuResourceAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Provides registration information about a VSPackage when called by an external registration tool such as regpkg.exe. For more information, see Registering VSPackages.</summary>
      <param name="context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideMenuResourceAttribute.ResourceID">
      <summary>The ResourceID property returns the value of the resource ID set in the constructor.</summary>
      <returns>The resource ID of the menu resource.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideMenuResourceAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Removes registration information about a VSPackage when called by an external registration tool such as regpkg.exe. For more information, see Registering VSPackages.</summary>
      <param name="context">A registration context provided by an external registration tool. The context can be used to remove registry keys, log registration activity, and obtain information about the component being registered.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideMenuResourceAttribute.Version">
      <summary>Returns the version number of the menu resource.</summary>
      <returns>The version number of the menu resource.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.ProvideProfileAttribute">
      <summary>Apply this attribute to independent objects used to implement a VSPackage's Visual Studio settings support.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideProfileAttribute.#ctor(System.Type,System.String,System.String,System.Int16,System.Int16,System.Boolean)">
      <summary>Initializes a new instance of ProvideProfileAttribute.</summary>
      <param name="objectType">The <see cref="T:System.Type" /> of the class implementing Visual Studio settings support.</param>
      <param name="categoryName">The canonical, nonlocalized name of a Visual Studio settings category.</param>
      <param name="objectName">The canonical, nonlocalized name used to identify the object implementing a Visual Studio settings category.</param>
      <param name="categoryResourceID">The localized resource ID of a Visual Studio settings category's name. </param>
      <param name="objectNameResourceID">The localized resource ID of the name used to identify the object implementing a Visual Studio settings category.</param>
      <param name="isToolsOptionPage">This argument is not implemented.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideProfileAttribute.AlternateParent">
      <summary>Gets or sets the name of a different category in the profile.</summary>
      <returns>The name of a different category in the profile.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideProfileAttribute.CategoryName">
      <summary>Gets the canonical nonlocalized name of the Visual Studio settings category.</summary>
      <returns>The canonical nonlocalized name of the Visual Studio settings category.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideProfileAttribute.CategoryResourceID">
      <summary>Gets the name resource ID for a Visual Studio settings category.</summary>
      <returns>The localized name resource ID of the Visual Studio settings category.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideProfileAttribute.DescriptionResourceID">
      <summary>Gets the localized resource ID of the description of this page of the profile.</summary>
      <returns>The localized resource ID of the description of this page of the profile.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideProfileAttribute.GroupName">
      <summary>Gets the nonlocalized name of this group.</summary>
      <returns>The nonlocalized name of this group.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideProfileAttribute.GroupResourceID">
      <summary>Gets or sets the localized resource ID of the group to which this page belongs.</summary>
      <returns>The localized resource ID of the group to which this page belongs.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideProfileAttribute.IsToolsOptionPage">
      <summary>Gets whether this is also a Tools Options page.</summary>
      <returns>true if this is also a Tools Options page, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideProfileAttribute.MigrationType"></member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideProfileAttribute.ObjectName">
      <summary>Gets the canonical nonlocalized name of this page in the profile.</summary>
      <returns>The canonical, nonlocalized name of the page.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideProfileAttribute.ObjectNameResourceID">
      <summary>Gets the localized resource ID of the name of this page in the profile.</summary>
      <returns>The localized resource ID of the name of this page in the profile.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideProfileAttribute.ObjectType">
      <summary>Gets the type of the page.</summary>
      <returns>A <see cref="T:System.Type" /> of the page.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideProfileAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Registers this attribute.</summary>
      <param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> describing the location of the key and its values in the registry.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideProfileAttribute.ResourcePackageGuid">
      <summary>Gets or sets the GUID of a package providing the resource strings.</summary>
      <returns>The GUID of a package providing the resource strings.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideProfileAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Removes the key from the registry.</summary>
      <param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> describing the location of the key and its values in the registry.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute">
      <summary>ProvideProjectFactoryAttribute declares that a package provides a project factory.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.#ctor(System.Type,System.String,System.String,System.String,System.String,System.String)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute" />.</summary>
      <param name="factoryType">The type of factory the VSPackage offers.</param>
      <param name="name">The name of the project.</param>
      <param name="displayProjectFileExtensionsResourceID">The resource ID of the project file extensions.</param>
      <param name="defaultProjectExtension">The default project extension.</param>
      <param name="possibleProjectExtensions">The possible project extensions supported by this project factory.</param>
      <param name="projectTemplatesDirectory">The directory containing this project factory’s templates.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.DefaultProjectExtension">
      <summary>Gets the default extension of the project file.</summary>
      <returns>The default project extension.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.DisableOnlineTemplates"></member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.DisplayProjectFileExtensions">
      <summary>Gets the resource ID for project file extensions.</summary>
      <returns>The resource ID for project file extensions.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.DisplayProjectTypeVsTemplate">
      <summary>Gets or sets the Visual Studio template for the project.</summary>
      <returns>The Visual Studio template for the project.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.FactoryType">
      <summary>Gets the type of the project factory.</summary>
      <returns>The type of the project factory.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.FolderGuid">
      <summary>Gets or sets the GUID of the folder for this type of project.</summary>
      <returns>The GUID of the folder for this type of project.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.LanguageVsTemplate">
      <summary>Gets and sets the Visual Studio language template.</summary>
      <returns>The Visual Studio language template.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.Name">
      <summary>Gets the name of the type of project.</summary>
      <returns>The project node name.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.NewProjectRequireNewFolderVsTemplate">
      <summary>Gets or sets whether this type of project requires a Visual Studio template that creates a new folder.</summary>
      <returns>true if this type of project requires a Visual Studio template that creates a new folder, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.PossibleProjectExtensions">
      <summary>Gets the set of possible project extensions.</summary>
      <returns>The set of possible project extensions.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.ProjectSubTypeVsTemplate">
      <summary>Gets or sets the Visual Studio template for the project subtype.</summary>
      <returns>The Visual Studio template for the project subtype.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.ProjectTemplatesDirectory">
      <summary>Gets the project templates directory.</summary>
      <returns>The path to the directory where the project templates are located.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Registers this attribute.</summary>
      <param name="context"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.ShowOnlySpecifiedTemplatesVsTemplate">
      <summary>Gets or sets the Visual Studio template to be shown in the New Project dialog.</summary>
      <returns>The Visual Studio template.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.SortPriority">
      <summary>Gets or sets the order in which projects are displayed in the New Project dialog.</summary>
      <returns>The sort priority for the New Project dialog.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.TemplateGroupIDsVsTemplate">
      <summary>Gets or sets the Visual Studio template's group ID.</summary>
      <returns>The template's group ID.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.TemplateIDsVsTemplate">
      <summary>Gets or sets the Visual Studio template ID.</summary>
      <returns>The template ID.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Removes the key for this attribute from the registry.</summary>
      <param name="context">
        <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" />. Contains the location where the registration information should be placed, the type being registered, and path information.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.ProvideServiceAttribute">
      <summary>This attribute indicates that the package proffers a service when applied to a subclass of <see cref="T:Microsoft.VisualStudio.Shell.Package" /> or a class that implements <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPackage" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideServiceAttribute.#ctor(System.Object)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.ProvideServiceAttribute" />.</summary>
      <param name="serviceType">The type of the service.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideServiceAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Registers this service.</summary>
      <param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> that describes the location and values of the registry key.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideServiceAttribute.Service">
      <summary>Gets the type of the service.</summary>
      <returns>The type of the service.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideServiceAttribute.ServiceName">
      <summary>Gets or sets the name of the service.</summary>
      <returns>The name of the service.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideServiceAttribute.ServiceType">
      <summary>Gets the GUID of the service type.</summary>
      <returns>The GUID of the service type.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideServiceAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Removes the registry key for this service.</summary>
      <param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> that describes the location and values of the registry key.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.ProvideStaticToolboxGroupAttribute">
      <summary>This attribute declares a toolbox group which will be created on toolbox initialization.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideStaticToolboxGroupAttribute.#ctor(System.String,System.String)">
      <summary>Creates a new ProvideStaticToolboxGroupAttribute.</summary>
      <param name="name"></param>
      <param name="id"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideStaticToolboxGroupAttribute.Id"></member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideStaticToolboxGroupAttribute.Index"></member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideStaticToolboxGroupAttribute.Name"></member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideStaticToolboxGroupAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Called to register this attribute with the given context. The context contains the location where the registration inforomation should be placed. It also contains such as the type being registered, and path information.</summary>
      <param name="context"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideStaticToolboxGroupAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Removes the registration data.</summary>
      <param name="context"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.ProvideStaticToolboxItemAttribute">
      <summary>This attribute declares a toolbox item which the toolbox will read from the registry. See comments on IVsToolboxItemProvider in vsshell100.idl for more details.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideStaticToolboxItemAttribute.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)">
      <summary>Creates a new ProvideStaticToolboxItemAttribute.</summary>
      <param name="groupId"></param>
      <param name="name"></param>
      <param name="id"></param>
      <param name="formats"></param>
      <param name="helpKeyword"></param>
      <param name="bitmapResourceId"></param>
      <param name="transparentColor"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideStaticToolboxItemAttribute.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.String,System.String)">
      <summary>Creates a new ProvideStaticToolboxItemAttribute with multitargeting metadata.</summary>
      <param name="groupId"></param>
      <param name="name"></param>
      <param name="id"></param>
      <param name="formats"></param>
      <param name="helpKeyword"></param>
      <param name="bitmapResourceId"></param>
      <param name="transparentColor"></param>
      <param name="assemblyName"></param>
      <param name="typeName"></param>
      <param name="targetedItemProvider"></param>
      <param name="supportedFrameworks"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideStaticToolboxItemAttribute.AssemblyName"></member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideStaticToolboxItemAttribute.BitmapIndex"></member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideStaticToolboxItemAttribute.BitmapResourceId"></member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideStaticToolboxItemAttribute.Formats"></member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideStaticToolboxItemAttribute.GroupId"></member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideStaticToolboxItemAttribute.HelpKeyword"></member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideStaticToolboxItemAttribute.Id"></member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideStaticToolboxItemAttribute.Index"></member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideStaticToolboxItemAttribute.Name"></member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideStaticToolboxItemAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Called to register this attribute with the given context. The context contains the location where the registration inforomation should be placed. It also contains such as the type being registered, and path information.</summary>
      <param name="context"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideStaticToolboxItemAttribute.SupportedFrameworks"></member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideStaticToolboxItemAttribute.TargetedItemProvider"></member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideStaticToolboxItemAttribute.TipComponentType"></member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideStaticToolboxItemAttribute.TipDescription"></member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideStaticToolboxItemAttribute.TipPublisher"></member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideStaticToolboxItemAttribute.TipTitle"></member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideStaticToolboxItemAttribute.TipVersion"></member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideStaticToolboxItemAttribute.TransparentColor"></member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideStaticToolboxItemAttribute.TypeName"></member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideStaticToolboxItemAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Removes the registration data.</summary>
      <param name="context"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideStaticToolboxItemAttribute.UseProjectTargetFrameworkVersionInTooltip"></member>
    <member name="T:Microsoft.VisualStudio.Shell.RegisterAutoLoadAttribute">
      <summary>Registers the VSPackage as an extender that is automatically loaded in response to a particular context GUID. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.RegisterAutoLoadAttribute.#ctor(System.String)">
      <summary>Creates a new RegisterAutoLoadAttribute object and saves the GUID of the package that initiated package loading.</summary>
      <param name="cmdUiContextGuid">Context GUID that triggers the loading of the VSPackage</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.RegisterAutoLoadAttribute.LoadGuid">
      <summary>Returns the context GUID that triggers package load.</summary>
      <returns>The context GUID that triggers package load.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.RegisterAutoLoadAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Provides registration information about a VSPackage when called by an external registration tool such as RegPkg.exe.</summary>
      <param name="context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.RegisterAutoLoadAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Removes registration information about a VSPackage when called by an external registration tool such as RegPkg.exe.</summary>
      <param name="context">A registration context provided by an external registration tool. The context can be used to remove registry keys, log registration activity, and obtain information about the component being registered.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.RegisterEditorLogicalViewAttribute">
      <summary>Adds a logical view to the editor created by an editor factory. This attribute has been deprecated. Please use <see cref="T:Microsoft.VisualStudio.Shell.ProvideEditorLogicalViewAttribute" /> instead.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.RegisterEditorLogicalViewAttribute.#ctor(System.Object,System.String)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.RegisterEditorLogicalViewAttribute" />.</summary>
      <param name="factoryType">The type of factory.  This may be a Type, a GUID or a string representation of a GUID</param>
      <param name="logicalViewGuid">The GUID of the logical view to register.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.RegisterEditorLogicalViewAttribute.FactoryType">
      <summary>Gets the GUID of the factory type.</summary>
      <returns>The GUID of the factory type.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.RegisterEditorLogicalViewAttribute.LogicalView">
      <summary>Gets the GUID of the logical view.</summary>
      <returns>The GUID of the logical view.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.RegisterEditorLogicalViewAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Registers logical view.</summary>
      <param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> that describes the location and values of the registry key.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.RegisterEditorLogicalViewAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Removes the editor logical view registry key.</summary>
      <param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> that describes the location and values of the registry key.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.RegisterLanguageExtensionAttribute">
      <summary>Registers a file extension with a given language service by applying the attribute to a <see cref="T:Microsoft.VisualStudio.Shell.Package" />-derived class or class that implements <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPackage" /> when registered using a registration tool like regpkg.exe. For more information, see Registering VSPackages.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.RegisterLanguageExtensionAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of RegisterLanguageExtensionAttribute.</summary>
      <param name="languageServiceGuid">The GUID of language service class that is derived from <see cref="T:Microsoft.VisualStudio.Package.LanguageService" /> as a string.</param>
      <param name="extension">The file extension associated with the language service. Include a "." in the value of <paramref name="extension" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.RegisterLanguageExtensionAttribute.#ctor(System.Type,System.String)">
      <summary>Initializes a new instance of RegisterLanguageExtensionAttribute and initializes the values of the language service and file extension that it associates. </summary>
      <param name="languageService">The GUID of language service class that is derived from <see cref="T:Microsoft.VisualStudio.Package.LanguageService" /> as a string.</param>
      <param name="extension">The file extension associated with the language service. Include a "." in the value of <paramref name="extension" />.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.RegisterLanguageExtensionAttribute.Extension">
      <summary>Gets the associated file extension.</summary>
      <returns>The associated file extension.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.RegisterLanguageExtensionAttribute.LanguageService">
      <summary>Gets the GUID of the language service.</summary>
      <returns>The GUID of the language service.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.RegisterLanguageExtensionAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Registers this attribute with the given context.</summary>
      <param name="context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.RegisterLanguageExtensionAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Removes the registration information about a VSPackage when called by an external registration tool such as regpkg.exe. For more information, see Registering VSPackages.</summary>
      <param name="context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.RegisterProjectItemAttribute">
      <summary>
        <see cref="T:Microsoft.VisualStudio.Shell.RegisterProjectItemAttribute" /> has been deprecated. Please use <see cref="T:Microsoft.VisualStudio.Shell.ProvideProjectItemAttribute" /> instead</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.RegisterProjectItemAttribute.#ctor(System.Object,System.String,System.String,System.Int32)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.RegisterProjectItemAttribute" />.</summary>
      <param name="projectFactoryType">The type of the project factory.</param>
      <param name="itemCategoryName">The name of the item category.</param>
      <param name="templatesDir">The template directory for this project type.</param>
      <param name="priority">The priority of the project type. </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.RegisterProjectItemAttribute.ItemType">
      <summary>Gets the name of this type of item. </summary>
      <returns>The name of this type of item.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.RegisterProjectItemAttribute.Priority">
      <summary>Gets the sort priority of this type.</summary>
      <returns>The sort priority of this type.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.RegisterProjectItemAttribute.ProjectFactoryType">
      <summary>Gets the GUID of the type of project factory.</summary>
      <returns>The GUID of the type of project factory.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.RegisterProjectItemAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Registers this item type.</summary>
      <param name="context"> A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" />  that describes the location and values of the registry key.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.RegisterProjectItemAttribute.TemplateDir">
      <summary>Gets the directory in which the templates for this project type are found.</summary>
      <returns>The directory in which the templates for this project type are found.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.RegisterProjectItemAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Removes the registry key for this item type.</summary>
      <param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" />  that describes the location and values of the registry key.</param>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.RunningDocumentInfo.DocCookie"></member>
    <member name="T:Microsoft.VisualStudio.Shell.SelectionContainer">
      <summary>Provides a unified interface for accessing a set of selected objects.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.SelectionContainer.#ctor">
      <summary>Initializes a new <see cref="T:Microsoft.VisualStudio.Shell.SelectionContainer" /> object.  The overload provides the ability to restrict user control over the <see cref="P:Microsoft.VisualStudio.Shell.SelectionContainer.SelectableObjects" /> and <see cref="P:Microsoft.VisualStudio.Shell.SelectionContainer.SelectedObjects" /> collections.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.SelectionContainer.#ctor(System.Boolean,System.Boolean)">
      <summary>Creates a new <see cref="T:Microsoft.VisualStudio.Shell.SelectionContainer" /> object with the ability to restrict user control over the <see cref="P:Microsoft.VisualStudio.Shell.SelectionContainer.SelectableObjects" /> and <see cref="P:Microsoft.VisualStudio.Shell.SelectionContainer.SelectedObjects" /> collections.</summary>
      <param name="selectableReadOnly">If true, a request to change the <see cref="P:Microsoft.VisualStudio.Shell.SelectionContainer.SelectableObjects" /> throws a <see cref="T:System.NotSupportedException" />. If false, a request to change the <see cref="P:Microsoft.VisualStudio.Shell.SelectionContainer.SelectableObjects" /> is handled normally.</param>
      <param name="selectedReadOnly">If false, a request to change the <see cref="P:Microsoft.VisualStudio.Shell.SelectionContainer.SelectedObjects" /> throws a <see cref="T:System.NotSupportedException" />. If false, a request to change the <see cref="P:Microsoft.VisualStudio.Shell.SelectionContainer.SelectedObjects" /> is handled normally.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.SelectionContainer.ActivateObjects">
      <summary>Overriding this method enables an object to respond when selected.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.SelectionContainer.ALL">
      <summary>Refers to all <see cref="P:Microsoft.VisualStudio.Shell.SelectionContainer.SelectableObjects" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.SelectionContainer.Microsoft#VisualStudio#Shell#Interop#ISelectionContainer#CountObjects(System.UInt32,System.UInt32@)">
      <summary>Determines the number of objects either those <see cref="F:Microsoft.VisualStudio.Shell.SelectionContainer.SELECTED" /> or <see cref="F:Microsoft.VisualStudio.Shell.SelectionContainer.ALL" /> items.</summary>
      <returns>Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the operation is successful.</returns>
      <param name="dwFlags">Use <see cref="F:Microsoft.VisualStudio.Shell.SelectionContainer.ALL" /> to indicate all members and <see cref="F:Microsoft.VisualStudio.Shell.SelectionContainer.SELECTED" /> to indicate only those selected.</param>
      <param name="pc">A pointer to the number of items, this value is set by the method call.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.SelectionContainer.Microsoft#VisualStudio#Shell#Interop#ISelectionContainer#GetObjects(System.UInt32,System.UInt32,System.Object[])">
      <summary>Sets <paramref name="cObjects" /> with the number of items <see cref="F:Microsoft.VisualStudio.Shell.SelectionContainer.SELECTED" /> or <see cref="F:Microsoft.VisualStudio.Shell.SelectionContainer.ALL" /> items and populates array <paramref name="apUnkObjects" /> with pointers to those objects.</summary>
      <returns>Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the operation is successful.</returns>
      <param name="dwFlags">Use <see cref="F:Microsoft.VisualStudio.Shell.SelectionContainer.ALL" /> to indicate all members and <see cref="F:Microsoft.VisualStudio.Shell.SelectionContainer.SELECTED" /> to indicate only those selected.</param>
      <param name="cObjects">A pointer to the number of items, this value is set by the method call.</param>
      <param name="apUnkObjects">An array of size <paramref name="cObjects" /> that contains pointers to the retrieved objects.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.SelectionContainer.Microsoft#VisualStudio#Shell#Interop#ISelectionContainer#SelectObjects(System.UInt32,System.Object[],System.UInt32)">
      <summary>Sets the collection of selectable objects.</summary>
      <returns>Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the operation is successful.</returns>
      <param name="cSelect">The size of the array of selected objects.</param>
      <param name="apUnkSelect">The array of objects to be selected.</param>
      <param name="dwFlags">If this value is true<see cref="M:Microsoft.VisualStudio.Shell.SelectionContainer.ActivateObjects" /> will be performed on the array of objects.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.SelectionContainer.SelectableObjects">
      <summary>Gets the collection of selectable objects.</summary>
      <returns>Returns a collection of selectable objects.</returns>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.SelectionContainer.SELECTED">
      <summary>Refers to all <see cref="P:Microsoft.VisualStudio.Shell.SelectionContainer.SelectedObjects" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.SelectionContainer.SelectedObjects">
      <summary>Gets or sets the collection of selected objects.</summary>
      <returns>Returns a collection of selected objects.</returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Shell.SelectionContainer.SelectedObjectsChanged">
      <summary>Raised when an external object calls the <see cref="M:Microsoft.VisualStudio.Shell.SelectionContainer.Microsoft.VisualStudio.Shell.Interop.ISelectionContainer.SelectObjects(System.UInt32,System.Object[],System.UInt32)" /> method with the <see cref="F:Microsoft.VisualStudio.Shell.SelectionContainer.SELECTED" /> flag set. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.ServiceCollection`1">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ServiceCollection`1.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.Shell.ServiceProvider.CreateFromSetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)"></member>
    <member name="P:Microsoft.VisualStudio.Shell.ServiceProvider.GlobalProvider"></member>
    <member name="T:Microsoft.VisualStudio.Shell.ServiceProviderHierarchyOrder">
      <summary>Provides a recommended service resolution order for common service providers. When multiple service providers are combined in a service provider hierarchy, they are given a numeric ordering.  </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ServiceProviderHierarchyOrder.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.ServiceProviderHierarchyOrder" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.ServiceProviderHierarchyOrder.PackageSite">
      <summary>The order for a package service provider.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.ServiceProviderHierarchyOrder.ProjectItemContext">
      <summary>The order for a project item context service provider.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.ServiceProviderHierarchyOrder.WindowPaneSite">
      <summary>The order for a window pane service provider.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.SettableOleDataObject"></member>
    <member name="M:Microsoft.VisualStudio.Shell.SettableOleDataObject.#ctor(System.Windows.Forms.IDataObject)">
      <param name="inner"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.SettableOleDataObject.DAdvise(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],System.UInt32,Microsoft.VisualStudio.OLE.Interop.IAdviseSink,System.UInt32@)">
      <param name="pFormatetc"></param>
      <param name="ADVF"></param>
      <param name="pAdvSink"></param>
      <param name="pdwConnection"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.SettableOleDataObject.DUnadvise(System.UInt32)">
      <param name="dwConnection"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.SettableOleDataObject.EnumDAdvise(Microsoft.VisualStudio.OLE.Interop.IEnumSTATDATA@)">
      <param name="ppenumAdvise"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.SettableOleDataObject.EnumFormatEtc(System.UInt32,Microsoft.VisualStudio.OLE.Interop.IEnumFORMATETC@)">
      <param name="dwDirection"></param>
      <param name="ppenumFormatEtc"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.SettableOleDataObject.GetCanonicalFormatEtc(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],Microsoft.VisualStudio.OLE.Interop.FORMATETC[])">
      <param name="pformatectIn"></param>
      <param name="pformatetcOut"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.SettableOleDataObject.GetData(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],Microsoft.VisualStudio.OLE.Interop.STGMEDIUM[])">
      <param name="pformatetcIn"></param>
      <param name="pRemoteMedium"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.SettableOleDataObject.GetDataHere(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],Microsoft.VisualStudio.OLE.Interop.STGMEDIUM[])">
      <param name="pFormatetc"></param>
      <param name="pRemoteMedium"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.SettableOleDataObject.QueryGetData(Microsoft.VisualStudio.OLE.Interop.FORMATETC[])">
      <param name="pFormatetc"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.SettableOleDataObject.SetData(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],Microsoft.VisualStudio.OLE.Interop.STGMEDIUM[],System.Int32)">
      <param name="pFormatetc"></param>
      <param name="pmedium"></param>
      <param name="fRelease"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.TaskErrorCategory">
      <summary>Represents a collection of values that identify types or severity of error messages that can appear in the Error List Options task window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.TaskErrorCategory.Error">
      <summary>Represents an error.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.TaskErrorCategory.Warning">
      <summary>Represents a warning.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.TaskErrorCategory.Message">
      <summary>Represents an informational note.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.TaskPriority">
      <summary>Provides values for task priorities.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.TaskPriority.High">
      <summary> High priority.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.TaskPriority.Normal">
      <summary> Normal priority.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.TaskPriority.Low">
      <summary> Low priority.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.TaskProvider">
      <summary>This class implements <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider" />. It provides a framework-friendly way to define a task provider and its associated services.  </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.#ctor(System.IServiceProvider)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.TaskProvider" /> with the supplied service provider.</summary>
      <param name="provider">
        <see cref="T:System.IServiceProvider" />.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.TaskProvider.AlwaysVisible">
      <summary>Determines whether or not the provider is always visible in the dropdown menu even though it has no tasks.</summary>
      <returns>true if it is always visible, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.TaskProvider.DisableAutoRoute">
      <summary>Gets or sets whether autorouting should be disabled.</summary>
      <returns>true if autorouting should be disabled, false if it should be enabled.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Dispose">
      <summary>Disposes this provider.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Dispose(System.Boolean)">
      <summary>Disposes the resources (task collection, task list, and image list) of this provider.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Finalize">
      <summary>Destroys the provider.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.GetService(System.Type)">
      <summary>Gets the service of the specified type.</summary>
      <returns>An object representing the service.</returns>
      <param name="serviceType"> The type of the service.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.TaskProvider.ImageList">
      <summary>Gets or sets the provider's image list (a list of icons for the tasks that belong to the provider).</summary>
      <returns>
        <see cref="T:System.Windows.Forms.ImageList" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.TaskProvider.MaintainInitialTaskOrder">
      <summary>Gets or sets whether or not the task list should maintain the task order given to it by the task provider.</summary>
      <returns>true if the task order should be maintained, otherwise false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft#VisualStudio#Shell#Interop#IVsTaskProvider#EnumTaskItems(Microsoft.VisualStudio.Shell.Interop.IVsEnumTaskItems@)">
      <summary>Gets an enumerator over the task items.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="items">[out] <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsEnumTaskItems" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft#VisualStudio#Shell#Interop#IVsTaskProvider#ImageList(System.IntPtr@)">
      <summary>Gets this provider's image list.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="himagelist">[out] <see cref="P:System.Windows.Forms.ImageList.Handle" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft#VisualStudio#Shell#Interop#IVsTaskProvider#OnTaskListFinalRelease(Microsoft.VisualStudio.Shell.Interop.IVsTaskList)">
      <summary>Notifies the client to unregister the task provider from the task list if it has not been unregistered by the time the task list is closing. </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />. </returns>
      <param name="taskList">The task list.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft#VisualStudio#Shell#Interop#IVsTaskProvider#ReRegistrationKey(System.String@)">
      <summary>Gets the re-registration key.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />.</returns>
      <param name="key">[out] Returns the key.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft#VisualStudio#Shell#Interop#IVsTaskProvider#SubcategoryList(System.UInt32,System.String[],System.UInt32@)">
      <summary>Gets a list of subcategories for the tasks of this task provider.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />.</returns>
      <param name="cbstr">The number of subcategories in <paramref name="rgbstr" />.</param>
      <param name="rgbstr">An array of subcategories </param>
      <param name="cnt">[out] The number of subcategories.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft#VisualStudio#Shell#Interop#IVsTaskProvider2#EnumTaskItems(Microsoft.VisualStudio.Shell.Interop.IVsEnumTaskItems@)">
      <summary>Gets an enumerator over task items.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="items">[out] <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsEnumTaskItems" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft#VisualStudio#Shell#Interop#IVsTaskProvider2#ImageList(System.IntPtr@)">
      <summary>Gets this provider's image list.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="himagelist">[out] <see cref="P:System.Windows.Forms.ImageList.Handle" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft#VisualStudio#Shell#Interop#IVsTaskProvider2#MaintainInitialTaskOrder(System.Int32@)">
      <summary>Gets or sets whether or not the task list should maintain the task order given to it by the task provider.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />.</returns>
      <param name="fMaintainOrder">[out] Returns true if the task order should be maintained, otherwise false.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft#VisualStudio#Shell#Interop#IVsTaskProvider2#OnTaskListFinalRelease(Microsoft.VisualStudio.Shell.Interop.IVsTaskList)">
      <summary>Notifies the client to unregister the task provider from the task list if it has not been unregistered by the time the task list is closing. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="taskList">The task list.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft#VisualStudio#Shell#Interop#IVsTaskProvider2#ReRegistrationKey(System.String@)">
      <summary>Gets the reregistration key.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="key">[out] Returns the key.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft#VisualStudio#Shell#Interop#IVsTaskProvider2#SubcategoryList(System.UInt32,System.String[],System.UInt32@)">
      <summary>Gets a list of subcategories for the tasks of this task provider.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="cbstr">The number of subcategories in <paramref name="rgbstr" />.</param>
      <param name="rgbstr">An array of subcategories </param>
      <param name="cnt">[out] The number of subcategories.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft#VisualStudio#Shell#Interop#IVsTaskProvider3#GetColumn(System.Int32,Microsoft.VisualStudio.Shell.Interop.VSTASKCOLUMN[])">
      <summary>Gets the definition of the column with the specified index.</summary>
      <returns>When implemented by derived classes, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> or an error code.</returns>
      <param name="iColumn">The index of the column.</param>
      <param name="pColumn">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTASKCOLUMN" /> structures.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft#VisualStudio#Shell#Interop#IVsTaskProvider3#GetColumnCount(System.Int32@)">
      <summary>Gets the total number of columns supported by this provider, including columns that are not visible by default.</summary>
      <returns>When implemented by derived classes, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> or an error code.</returns>
      <param name="count">[out] Returns the total number of columns. By default returns 0.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft#VisualStudio#Shell#Interop#IVsTaskProvider3#GetProviderFlags(System.UInt32@)">
      <summary>Gets the behavior flags for this provider.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />.</returns>
      <param name="tpfFlags">[out] Returns <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSTASKPROVIDERFLAGS" />. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft#VisualStudio#Shell#Interop#IVsTaskProvider3#GetProviderGuid(System.Guid@)">
      <summary>Gets a unique GUID for this provider. This is used to persist and restore provider-specific data managed by the task list, such as user customizations of column width and order.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />.</returns>
      <param name="pguidProvider">[out] The GUID of the provider's type.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft#VisualStudio#Shell#Interop#IVsTaskProvider3#GetProviderName(System.String@)">
      <summary>Gets the name of the provider.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />.</returns>
      <param name="pbstrName">[out] The name of the provider.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft#VisualStudio#Shell#Interop#IVsTaskProvider3#GetProviderToolbar(System.Guid@,System.UInt32@)">
      <summary>Gets the provider's toolbar.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />.</returns>
      <param name="pguidGroup">[out] The GUID of the group to which the toolbar belongs.</param>
      <param name="pdwID">[out] The ID of the toolbar.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft#VisualStudio#Shell#Interop#IVsTaskProvider3#GetSurrogateProviderGuid(System.Guid@)">
      <summary>If this method is implemented, all the provider's tasks will be listed under the surrogate provider in the list as though they belonged to the surrogate provider.</summary>
      <returns>When implemented by derived classes, <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" /> or an error code.</returns>
      <param name="guid">[out] The GUID of the surrogate provider. By default returns an empty GUID.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft#VisualStudio#Shell#Interop#IVsTaskProvider3#OnBeginTaskEdit(Microsoft.VisualStudio.Shell.Interop.IVsTaskItem)">
      <summary>Raised when the user begins editing a task in place.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />.</returns>
      <param name="item"> The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem" /> being edited.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft#VisualStudio#Shell#Interop#IVsTaskProvider3#OnEndTaskEdit(Microsoft.VisualStudio.Shell.Interop.IVsTaskItem,System.Int32,System.Int32@)">
      <summary>Raised when the user finishes editing a task in-place.  </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />.</returns>
      <param name="item">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem" /> being edited.</param>
      <param name="fCommitChanges">true if the user wishes to commit the changes, false if the user wishes to discard them.</param>
      <param name="fAllowChanges"> [out] Returns true if the changes have been committed, false to disallow the user from leaving edit mode.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Navigate(Microsoft.VisualStudio.Shell.Task,System.Guid)">
      <summary>Navigates from the task to the correct position in the document, shown in the specified logical view.</summary>
      <returns>true if it was possible to perform the navigation, otherwise false.</returns>
      <param name="task">The task from which to do the navigation.</param>
      <param name="logicalView">The logical view in which to display the document.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.TaskProvider.ProviderGuid">
      <summary>Gets or sets the GUID of this provider.</summary>
      <returns>The GUID of this provider.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.TaskProvider.ProviderName">
      <summary>Gets or sets a localized name for this provider.</summary>
      <returns>The localized name of the provider.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Refresh">
      <summary>Informs the task list that there are new or edited tasks.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.ResumeRefresh">
      <summary>Restarts the refreshing of the task list after it has been suspended.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Show">
      <summary>Displays the task list window.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.TaskProvider.Subcategories">
      <summary>Gets a collection of task subcategories.</summary>
      <returns>A <see cref="T:System.Collections.Specialized.StringCollection" /> of task subcategories.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.SuspendRefresh">
      <summary>Stops refreshing the task list until <see cref="M:Microsoft.VisualStudio.Shell.TaskProvider.ResumeRefresh" /> is called.  </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.TaskProvider.Tasks">
      <summary>Gets a collection of tasks.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.TaskProvider.ToolbarGroup">
      <summary>Gets or sets a group GUID and toolbar ID indicating which toolbar should be displayed when this provider is active.  </summary>
      <returns>The group GUID and toolbar ID indicating which toolbar should be displayed when this provider is active.  </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.TaskProvider.ToolbarId">
      <summary>Gets or sets this provider's toolbar ID.</summary>
      <returns>The toolbar ID.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.TaskProvider.VsTaskList">
      <summary>Gets the task list.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTaskList" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.ThreadHelper">
      <summary>Provide a generic dispatcher helper ensure that a method is invoked on the Application's main thread. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ThreadHelper.#ctor"></member>
    <member name="P:Microsoft.VisualStudio.Shell.ThreadHelper.Generic"></member>
    <member name="M:Microsoft.VisualStudio.Shell.ThreadHelper.GetInvocationWrapper">
      <summary>Derived classes must implement the GetInvocationWrapper method to implement a a disposable object that will wrap the called method. This may be null.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ThreadHelper.Invoke(System.Action)">
      <summary>Call an action on the UI thread. If the caller is already on the UI thread then the call is made directly. Otherwise, the call is transferred onto the UI thread and this thread blocks until the call returns. If the UI thread throws an exception, that exception is transferred and rethrown on this thread.</summary>
      <param name="action">The action to</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ThreadHelper.Invoke``1(System.Func`1)">
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ToolWindowPane.#ctor"></member>
    <member name="P:Microsoft.VisualStudio.Shell.ToolWindowPane.ToolBarDropTarget"></member>
    <member name="T:Microsoft.VisualStudio.Shell.VsBrushes">
      <summary>Class used to map between VSCOLOR identifiers (used by IVsUIShell2.GetVSSysColorEx) and keys used by WPF ResourceDictionaries. The keys provided by this class can be used to reference System.Windows.Media.Brush instances that Visual Studio places in Application.Current.Resources.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.AccentBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.AccentDarkKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.AccentLightKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.AccentMediumKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.AccentPaleKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ActiveBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ActiveCaptionKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.AppWorkspaceKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.AutoHideResizeGripKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.AutoHideTabBackgroundBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.AutoHideTabBackgroundEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.AutoHideTabBackgroundHorizontalGradientKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.AutoHideTabBackgroundVerticalGradientKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.AutoHideTabBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.AutoHideTabMouseOverBackgroundBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.AutoHideTabMouseOverBackgroundEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.AutoHideTabMouseOverBackgroundHorizontalGradientKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.AutoHideTabMouseOverBackgroundVerticalGradientKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.AutoHideTabMouseOverBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.AutoHideTabMouseOverTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.AutoHideTabTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.BackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.BrandedUIBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.BrandedUIBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.BrandedUIFillKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.BrandedUITextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.BrandedUITitleKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ButtonFaceKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ButtonHighlightKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ButtonShadowKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ButtonTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CaptionTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ClassDesignerClassCompartmentKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ClassDesignerClassHeaderBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ClassDesignerCommentBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ClassDesignerCommentShapeBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ClassDesignerCommentTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ClassDesignerCompartmentSeparatorKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ClassDesignerConnectionRouteBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ClassDesignerDefaultConnectionKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ClassDesignerDefaultShapeBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ClassDesignerDefaultShapeBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ClassDesignerDefaultShapeSubtitleKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ClassDesignerDefaultShapeTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ClassDesignerDefaultShapeTitleBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ClassDesignerDefaultShapeTitleKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ClassDesignerDelegateCompartmentKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ClassDesignerDelegateHeaderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ClassDesignerDiagramBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ClassDesignerEmphasisBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ClassDesignerEnumHeaderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ClassDesignerFieldAssociationKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ClassDesignerGradientEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ClassDesignerInheritanceKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ClassDesignerInterfaceCompartmentKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ClassDesignerInterfaceHeaderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ClassDesignerLassoKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ClassDesignerLollipopKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ClassDesignerPropertyAssociationKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ClassDesignerReferencedAssemblyBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ClassDesignerResizingShapeBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ClassDesignerShapeBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ClassDesignerShapeShadowKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ClassDesignerTempConnectionKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ClassDesignerTypedefHeaderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ClassDesignerTypedefKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ClassDesignerUnresolvedTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ClassDesignerVBModuleCompartmentKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ClassDesignerVBModuleHeaderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ComboBoxBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ComboBoxBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ComboBoxDisabledBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ComboBoxDisabledBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ComboBoxDisabledGlyphKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ComboBoxGlyphKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ComboBoxMouseDownBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ComboBoxMouseDownBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ComboBoxMouseOverBackgroundBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ComboBoxMouseOverBackgroundEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ComboBoxMouseOverBackgroundGradientKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ComboBoxMouseOverBackgroundMiddle1Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ComboBoxMouseOverBackgroundMiddle2Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ComboBoxMouseOverBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ComboBoxMouseOverGlyphKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ComboBoxPopupBackgroundBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ComboBoxPopupBackgroundEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ComboBoxPopupBackgroundGradientKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ComboBoxPopupBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandBarBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandBarCheckBoxKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandBarDragHandleKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandBarDragHandleShadowKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandBarGradientBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandBarGradientEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandBarGradientKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandBarGradientMiddleKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandBarHorizontalGradientKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandBarHoverKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandBarHoverOverSelectedIconBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandBarHoverOverSelectedIconKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandBarHoverOverSelectedKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandBarMenuBackgroundGradientBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandBarMenuBackgroundGradientEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandBarMenuBackgroundGradientKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandBarMenuBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandBarMenuIconBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandBarMenuMouseOverSubmenuGlyphKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandBarMenuSeparatorKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandBarMenuSubmenuGlyphKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandBarMouseDownBackgroundBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandBarMouseDownBackgroundEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandBarMouseDownBackgroundGradientKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandBarMouseDownBackgroundMiddleKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandBarMouseDownBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandBarMouseOverBackgroundBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandBarMouseOverBackgroundEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandBarMouseOverBackgroundGradientKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandBarMouseOverBackgroundMiddle1Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandBarMouseOverBackgroundMiddle2Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandBarOptionsBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandBarOptionsGlyphKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandBarOptionsMouseDownBackgroundBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandBarOptionsMouseDownBackgroundEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandBarOptionsMouseDownBackgroundHorizontalGradientKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandBarOptionsMouseDownBackgroundMiddleKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandBarOptionsMouseDownBackgroundVerticalGradientKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandBarOptionsMouseOverBackgroundBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandBarOptionsMouseOverBackgroundEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandBarOptionsMouseOverBackgroundHorizontalGradientKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandBarOptionsMouseOverBackgroundMiddle1Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandBarOptionsMouseOverBackgroundMiddle2Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandBarOptionsMouseOverBackgroundVerticalGradientKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandBarOptionsMouseOverGlyphKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandBarSelectedBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandBarSelectedKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandBarShadowKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandBarTextActiveKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandBarTextHoverKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandBarTextInactiveKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandBarTextSelectedKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandBarToolBarBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandBarToolBarSeparatorKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandShelfBackgroundGradientBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandShelfBackgroundGradientEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandShelfBackgroundGradientKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandShelfBackgroundGradientMiddleKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandShelfHighlightGradientBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandShelfHighlightGradientEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandShelfHighlightGradientKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.CommandShelfHighlightGradientMiddleKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ControlEditHintTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ControlEditRequiredBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ControlEditRequiredHintTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ControlLinkTextHoverKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ControlLinkTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ControlLinkTextPressedKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ControlOutlineKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.DebuggerDataTipActiveBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.DebuggerDataTipActiveBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.DebuggerDataTipActiveHighlightKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.DebuggerDataTipActiveHighlightTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.DebuggerDataTipActiveSeparatorKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.DebuggerDataTipActiveTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.DebuggerDataTipInactiveBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.DebuggerDataTipInactiveBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.DebuggerDataTipInactiveHighlightKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.DebuggerDataTipInactiveHighlightTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.DebuggerDataTipInactiveSeparatorKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.DebuggerDataTipInactiveTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.DesignerBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.DesignerSelectionDotsKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.DesignerTrayKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.DesignerWatermarkKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.DiagReportBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.DiagReportSecondaryPageHeaderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.DiagReportSecondaryPageSubtitleKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.DiagReportSecondaryPageTitleKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.DiagReportSummaryPageHeaderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.DiagReportSummaryPageSubtitleKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.DiagReportSummaryPageTitleKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.DiagReportTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.DockTargetBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.DockTargetBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.DockTargetButtonBackgroundBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.DockTargetButtonBackgroundEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.DockTargetButtonBackgroundGradientKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.DockTargetButtonBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.DockTargetGlyphArrowKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.DockTargetGlyphBackgroundBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.DockTargetGlyphBackgroundEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.DockTargetGlyphBackgroundGradientKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.DockTargetGlyphBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.DropDownBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.DropDownBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.DropDownDisabledBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.DropDownDisabledBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.DropDownDisabledGlyphKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.DropDownGlyphKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.DropDownMouseDownBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.DropDownMouseDownBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.DropDownMouseOverBackgroundBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.DropDownMouseOverBackgroundEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.DropDownMouseOverBackgroundGradientKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.DropDownMouseOverBackgroundMiddle1Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.DropDownMouseOverBackgroundMiddle2Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.DropDownMouseOverBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.DropDownMouseOverGlyphKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.DropDownPopupBackgroundBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.DropDownPopupBackgroundEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.DropDownPopupBackgroundGradientKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.DropDownPopupBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.DropShadowBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.EditorExpansionBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.EditorExpansionFillKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.EditorExpansionLinkKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.EditorExpansionTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.EnvironmentBackgroundGradientBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.EnvironmentBackgroundGradientEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.EnvironmentBackgroundGradientKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.EnvironmentBackgroundGradientMiddle1Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.EnvironmentBackgroundGradientMiddle2Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.EnvironmentBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.EnvironmentBackgroundTexture1Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.EnvironmentBackgroundTexture2Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.EnvironmentBackgroundTextureKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ExtensionManagerStarHighlight1Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ExtensionManagerStarHighlight2Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ExtensionManagerStarInactive1Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ExtensionManagerStarInactive2Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.FileTabBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.FileTabChannelBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.FileTabDocumentBorderBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.FileTabDocumentBorderHighlightKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.FileTabDocumentBorderShadowKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.FileTabGradientDarkKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.FileTabGradientKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.FileTabGradientLightKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.FileTabHotBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.FileTabHotGlyphKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.FileTabHotGradientBottomKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.FileTabHotGradientKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.FileTabHotGradientTopKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.FileTabHotTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.FileTabInactiveDocumentBorderBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.FileTabInactiveDocumentBorderEdgeKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.FileTabInactiveGradientBottomKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.FileTabInactiveGradientKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.FileTabInactiveGradientTopKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.FileTabInactiveTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.FileTabLastActiveDocumentBorderBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.FileTabLastActiveDocumentBorderEdgeKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.FileTabLastActiveGlyphKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.FileTabLastActiveGradientBottomKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.FileTabLastActiveGradientKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.FileTabLastActiveGradientMiddle1Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.FileTabLastActiveGradientMiddle2Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.FileTabLastActiveGradientTopKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.FileTabLastActiveTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.FileTabSelectedBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.FileTabSelectedBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.FileTabSelectedGradientBottomKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.FileTabSelectedGradientKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.FileTabSelectedGradientMiddle1Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.FileTabSelectedGradientMiddle2Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.FileTabSelectedGradientTopKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.FileTabSelectedTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.FileTabTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.FormSmartTagActionTagBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.FormSmartTagActionTagFillKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.FormSmartTagObjectTagBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.FormSmartTagObjectTagFillKey"></member>
    <member name="M:Microsoft.VisualStudio.Shell.VsBrushes.GetBrushKey(System.Int32)">
      <summary>Gets the WPF ResourceDictionary brush key for a given VSCOLOR identifier. The input is an identifier from the VSCOLOR enumeration used with IVsUIShell2.GetVSSysColorEx. The output is a key which can be used to reference the brush in Visual Studio from XAML.</summary>
      <param name="vsSysColor"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.VsBrushes.GetColorID(System.Object)">
      <summary>Gets the VSCOLOR identifier for a given WPF brush resource key. The input is a key which can be used to reference the color in Visual Studio from XAML. The output is an identifier from the VSCOLOR enumeration used with IVsUIShell2.GetVSSysColorEx.</summary>
      <param name="vsBrushKey"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.GrayTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.GridHeadingBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.GridHeadingTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.GridLineKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.HelpHowDoIPaneBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.HelpHowDoIPaneLinkKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.HelpHowDoIPaneTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.HelpHowDoITaskBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.HelpHowDoITaskLinkKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.HelpHowDoITaskTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.HelpSearchBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.HelpSearchBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.HelpSearchFilterBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.HelpSearchFilterBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.HelpSearchFilterTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.HelpSearchFrameBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.HelpSearchFrameTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.HelpSearchPanelRulesKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.HelpSearchProviderIconKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.HelpSearchProviderSelectedBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.HelpSearchProviderSelectedTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.HelpSearchProviderUnselectedBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.HelpSearchProviderUnselectedTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.HelpSearchResultLinkSelectedKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.HelpSearchResultLinkUnselectedKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.HelpSearchResultSelectedBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.HelpSearchResultSelectedTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.HelpSearchTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.HighlightKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.HighlightTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.InactiveBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.InactiveCaptionKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.InactiveCaptionTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.InfoBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.InfoTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.MdiClientBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.MenuKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.MenuTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.NewProjectBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.NewProjectItemInactiveBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.NewProjectItemInactiveBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.NewProjectItemInactiveEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.NewProjectItemInactiveGradientKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.NewProjectItemSelectedBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.NewProjectItemSelectedKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.NewProjectProviderHoverBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.NewProjectProviderHoverEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.NewProjectProviderHoverForegroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.NewProjectProviderHoverGradientKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.NewProjectProviderHoverMiddle1Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.NewProjectProviderHoverMiddle2Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.NewProjectProviderInactiveBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.NewProjectProviderInactiveEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.NewProjectProviderInactiveForegroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.NewProjectProviderInactiveGradientKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.PageContentExpanderChevronKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.PageContentExpanderSeparatorKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.PageSideBarExpanderBodyKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.PageSideBarExpanderChevronKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.PageSideBarExpanderHeaderHoverKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.PageSideBarExpanderHeaderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.PageSideBarExpanderHeaderPressedKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.PageSideBarExpanderSeparatorKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.PageSideBarExpanderTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.PanelBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.PanelGradientDarkKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.PanelGradientKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.PanelGradientLightKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.PanelHoverOverCloseBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.PanelHoverOverCloseFillKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.PanelHyperlinkHoverKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.PanelHyperlinkKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.PanelHyperlinkPressedKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.PanelSeparatorKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.PanelSubGroupSeparatorKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.PanelTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.PanelTitleBarKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.PanelTitleBarTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.PanelTitleBarUnselectedKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ProjectDesignerBackgroundGradientBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ProjectDesignerBackgroundGradientEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ProjectDesignerBackgroundGradientKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ProjectDesignerBorderInsideKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ProjectDesignerBorderOutsideKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ProjectDesignerContentsBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ProjectDesignerTabBackgroundGradientBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ProjectDesignerTabBackgroundGradientEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ProjectDesignerTabBackgroundGradientKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ProjectDesignerTabSelectedBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ProjectDesignerTabSelectedBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ProjectDesignerTabSelectedHighlight1Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ProjectDesignerTabSelectedHighlight2Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ProjectDesignerTabSelectedInsideBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ProjectDesignerTabSepBottomGradientBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ProjectDesignerTabSepBottomGradientEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ProjectDesignerTabSepBottomGradientKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ProjectDesignerTabSepTopGradientBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ProjectDesignerTabSepTopGradientEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ProjectDesignerTabSepTopGradientKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ScreenTipBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ScreenTipBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ScreenTipTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ScrollBarArrowBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ScrollBarArrowDisabledBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ScrollBarArrowMouseOverBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ScrollBarArrowPressedBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ScrollBarBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ScrollBarDisabledBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ScrollBarKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ScrollBarThumbBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ScrollBarThumbBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ScrollBarThumbGlyphKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ScrollBarThumbMouseOverBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ScrollBarThumbPressedBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.SearchBoxBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.SearchBoxBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.SearchBoxMouseOverBackgroundBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.SearchBoxMouseOverBackgroundEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.SearchBoxMouseOverBackgroundMiddle1Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.SearchBoxMouseOverBackgroundMiddle2Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.SearchBoxMouseOverBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.SearchBoxPressedBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.SearchBoxPressedBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.SideBarBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.SideBarGradientDarkKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.SideBarGradientKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.SideBarGradientLightKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.SideBarTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.SmartTagBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.SmartTagFillKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.SmartTagHoverBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.SmartTagHoverFillKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.SmartTagHoverTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.SmartTagTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.SnaplinesKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.SnaplinesPaddingKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.SnaplinesTextBaselineKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.SortBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.SortTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.SplashScreenBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.StartPageBackgroundGradientBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.StartPageBackgroundGradientEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.StartPageBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.StartPageButtonBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.StartPageButtonMouseOverBackgroundBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.StartPageButtonMouseOverBackgroundEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.StartPageButtonMouseOverBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.StartPageButtonMouseOverBackgroundMiddle1Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.StartPageButtonMouseOverBackgroundMiddle2Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.StartPageButtonPinDownKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.StartPageButtonPinHoverKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.StartPageButtonPinnedKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.StartPageButtonTextHoverKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.StartPageButtonTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.StartPageButtonUnpinnedKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.StartPageSelectedItemBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.StartPageSelectedItemStrokeKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.StartPageSeparatorKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.StartPageTabBackgroundBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.StartPageTabBackgroundEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.StartPageTabBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.StartPageTabMouseOverBackgroundBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.StartPageTabMouseOverBackgroundEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.StartPageTabMouseOverBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.StartPageTextBodyKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.StartPageTextBodySelectedKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.StartPageTextBodyUnselectedKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.StartPageTextControlLinkSelectedHoverKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.StartPageTextControlLinkSelectedKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.StartPageTextDateKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.StartPageTextHeadingKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.StartPageTextHeadingMouseOverKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.StartPageTextHeadingSelectedKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.StartPageTextSubHeadingKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.StartPageTextSubHeadingMouseOverKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.StartPageTextSubHeadingSelectedKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.StartPageUnselectedItemBackgroundBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.StartPageUnselectedItemBackgroundEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.StartPageUnselectedItemBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.StartPageUnselectedItemStrokeKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.StatusBarTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.TaskListGridLinesKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ThreeDDarkShadowKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ThreeDFaceKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ThreeDHighlightKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ThreeDLightShadowKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ThreeDShadowKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.TitleBarActiveGradientBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.TitleBarActiveGradientEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.TitleBarActiveGradientKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.TitleBarActiveGradientMiddle1Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.TitleBarActiveGradientMiddle2Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.TitleBarActiveKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.TitleBarActiveTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.TitleBarInactiveGradientBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.TitleBarInactiveGradientEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.TitleBarInactiveGradientKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.TitleBarInactiveKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.TitleBarInactiveTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ToolboxBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ToolboxDividerKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ToolboxGradientDarkKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ToolboxGradientKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ToolboxGradientLightKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ToolboxHeadingAccentKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ToolboxHeadingBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ToolboxHeadingEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ToolboxHeadingGradientKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ToolboxIconHighlightKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ToolboxIconShadowKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ToolboxSelectedHeadingBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ToolboxSelectedHeadingEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ToolboxSelectedHeadingGradientKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ToolboxSelectedHeadingMiddle1Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ToolboxSelectedHeadingMiddle2Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ToolWindowBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ToolWindowBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ToolWindowButtonActiveGlyphKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ToolWindowButtonDownActiveGlyphKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ToolWindowButtonDownBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ToolWindowButtonDownInactiveGlyphKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ToolWindowButtonDownKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ToolWindowButtonHoverActiveBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ToolWindowButtonHoverActiveGlyphKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ToolWindowButtonHoverActiveKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ToolWindowButtonHoverInactiveBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ToolWindowButtonHoverInactiveGlyphKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ToolWindowButtonHoverInactiveKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ToolWindowButtonInactiveBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ToolWindowButtonInactiveGlyphKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ToolWindowButtonInactiveKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ToolWindowContentTabGradientBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ToolWindowContentTabGradientEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ToolWindowFloatingFrameKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ToolWindowTabBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ToolWindowTabGradientBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ToolWindowTabGradientEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ToolWindowTabGradientKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ToolWindowTabMouseOverBackgroundBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ToolWindowTabMouseOverBackgroundEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ToolWindowTabMouseOverBackgroundGradientKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ToolWindowTabMouseOverBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ToolWindowTabMouseOverTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ToolWindowTabSelectedTabKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ToolWindowTabSelectedTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ToolWindowTabTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.ToolWindowTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.VizSurfaceBrownDarkKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.VizSurfaceBrownLightKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.VizSurfaceBrownMediumKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.VizSurfaceDarkGoldDarkKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.VizSurfaceDarkGoldLightKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.VizSurfaceDarkGoldMediumKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.VizSurfaceGoldDarkKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.VizSurfaceGoldLightKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.VizSurfaceGoldMediumKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.VizSurfaceGreenDarkKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.VizSurfaceGreenLightKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.VizSurfaceGreenMediumKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.VizSurfacePlumDarkKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.VizSurfacePlumLightKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.VizSurfacePlumMediumKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.VizSurfaceRedDarkKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.VizSurfaceRedLightKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.VizSurfaceRedMediumKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.VizSurfaceSoftBlueDarkKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.VizSurfaceSoftBlueLightKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.VizSurfaceSoftBlueMediumKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.VizSurfaceSteelBlueDarkKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.VizSurfaceSteelBlueLightKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.VizSurfaceSteelBlueMediumKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.VizSurfaceStrongBlueDarkKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.VizSurfaceStrongBlueLightKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.VizSurfaceStrongBlueMediumKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.WindowFrameKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.WindowKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.WindowTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.WizardOrientationPanelBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsBrushes.WizardOrientationPanelTextKey"></member>
    <member name="T:Microsoft.VisualStudio.Shell.VsColors">
      <summary>Map between VSCOLOR identifiers (used by <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell2.GetVSSysColorEx(System.Int32,System.UInt32@)" /> and keys used by Windows Presentation Foundation <see cref="T:System.Windows.ResourceDictionary" /> objects. </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.AccentBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.AccentDarkKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.AccentLightKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.AccentMediumKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.AccentPaleKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ActiveBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ActiveCaptionKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.AppWorkspaceKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.AutoHideResizeGripKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.AutoHideTabBackgroundBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.AutoHideTabBackgroundEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.AutoHideTabBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.AutoHideTabMouseOverBackgroundBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.AutoHideTabMouseOverBackgroundEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.AutoHideTabMouseOverBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.AutoHideTabMouseOverTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.AutoHideTabTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.BackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.BrandedUIBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.BrandedUIBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.BrandedUIFillKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.BrandedUITextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.BrandedUITitleKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ButtonFaceKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ButtonHighlightKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ButtonShadowKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ButtonTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.CaptionTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ClassDesignerClassCompartmentKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ClassDesignerClassHeaderBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ClassDesignerCommentBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ClassDesignerCommentShapeBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ClassDesignerCommentTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ClassDesignerCompartmentSeparatorKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ClassDesignerConnectionRouteBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ClassDesignerDefaultConnectionKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ClassDesignerDefaultShapeBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ClassDesignerDefaultShapeBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ClassDesignerDefaultShapeSubtitleKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ClassDesignerDefaultShapeTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ClassDesignerDefaultShapeTitleBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ClassDesignerDefaultShapeTitleKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ClassDesignerDelegateCompartmentKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ClassDesignerDelegateHeaderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ClassDesignerDiagramBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ClassDesignerEmphasisBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ClassDesignerEnumHeaderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ClassDesignerFieldAssociationKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ClassDesignerGradientEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ClassDesignerInheritanceKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ClassDesignerInterfaceCompartmentKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ClassDesignerInterfaceHeaderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ClassDesignerLassoKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ClassDesignerLollipopKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ClassDesignerPropertyAssociationKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ClassDesignerReferencedAssemblyBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ClassDesignerResizingShapeBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ClassDesignerShapeBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ClassDesignerShapeShadowKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ClassDesignerTempConnectionKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ClassDesignerTypedefHeaderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ClassDesignerTypedefKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ClassDesignerUnresolvedTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ClassDesignerVBModuleCompartmentKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ClassDesignerVBModuleHeaderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ComboBoxBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ComboBoxBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ComboBoxDisabledBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ComboBoxDisabledBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ComboBoxDisabledGlyphKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ComboBoxGlyphKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ComboBoxMouseDownBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ComboBoxMouseDownBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ComboBoxMouseOverBackgroundBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ComboBoxMouseOverBackgroundEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ComboBoxMouseOverBackgroundMiddle1Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ComboBoxMouseOverBackgroundMiddle2Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ComboBoxMouseOverBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ComboBoxMouseOverGlyphKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ComboBoxPopupBackgroundBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ComboBoxPopupBackgroundEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ComboBoxPopupBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.CommandBarBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.CommandBarCheckBoxKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.CommandBarDragHandleKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.CommandBarDragHandleShadowKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.CommandBarGradientBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.CommandBarGradientEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.CommandBarGradientMiddleKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.CommandBarHoverKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.CommandBarHoverOverSelectedIconBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.CommandBarHoverOverSelectedIconKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.CommandBarHoverOverSelectedKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.CommandBarMenuBackgroundGradientBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.CommandBarMenuBackgroundGradientEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.CommandBarMenuBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.CommandBarMenuIconBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.CommandBarMenuMouseOverSubmenuGlyphKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.CommandBarMenuSeparatorKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.CommandBarMenuSubmenuGlyphKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.CommandBarMouseDownBackgroundBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.CommandBarMouseDownBackgroundEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.CommandBarMouseDownBackgroundMiddleKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.CommandBarMouseDownBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.CommandBarMouseOverBackgroundBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.CommandBarMouseOverBackgroundEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.CommandBarMouseOverBackgroundMiddle1Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.CommandBarMouseOverBackgroundMiddle2Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.CommandBarOptionsBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.CommandBarOptionsGlyphKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.CommandBarOptionsMouseDownBackgroundBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.CommandBarOptionsMouseDownBackgroundEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.CommandBarOptionsMouseDownBackgroundMiddleKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.CommandBarOptionsMouseOverBackgroundBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.CommandBarOptionsMouseOverBackgroundEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.CommandBarOptionsMouseOverBackgroundMiddle1Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.CommandBarOptionsMouseOverBackgroundMiddle2Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.CommandBarOptionsMouseOverGlyphKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.CommandBarSelectedBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.CommandBarSelectedKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.CommandBarShadowKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.CommandBarTextActiveKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.CommandBarTextHoverKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.CommandBarTextInactiveKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.CommandBarTextSelectedKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.CommandBarToolBarBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.CommandBarToolBarSeparatorKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.CommandShelfBackgroundGradientBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.CommandShelfBackgroundGradientEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.CommandShelfBackgroundGradientMiddleKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.CommandShelfHighlightGradientBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.CommandShelfHighlightGradientEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.CommandShelfHighlightGradientMiddleKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ControlEditHintTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ControlEditRequiredBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ControlEditRequiredHintTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ControlLinkTextHoverKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ControlLinkTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ControlLinkTextPressedKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ControlOutlineKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.DebuggerDataTipActiveBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.DebuggerDataTipActiveBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.DebuggerDataTipActiveHighlightKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.DebuggerDataTipActiveHighlightTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.DebuggerDataTipActiveSeparatorKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.DebuggerDataTipActiveTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.DebuggerDataTipInactiveBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.DebuggerDataTipInactiveBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.DebuggerDataTipInactiveHighlightKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.DebuggerDataTipInactiveHighlightTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.DebuggerDataTipInactiveSeparatorKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.DebuggerDataTipInactiveTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.DesignerBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.DesignerSelectionDotsKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.DesignerTrayKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.DesignerWatermarkKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.DiagReportBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.DiagReportSecondaryPageHeaderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.DiagReportSecondaryPageSubtitleKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.DiagReportSecondaryPageTitleKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.DiagReportSummaryPageHeaderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.DiagReportSummaryPageSubtitleKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.DiagReportSummaryPageTitleKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.DiagReportTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.DockTargetBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.DockTargetBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.DockTargetButtonBackgroundBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.DockTargetButtonBackgroundEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.DockTargetButtonBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.DockTargetGlyphArrowKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.DockTargetGlyphBackgroundBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.DockTargetGlyphBackgroundEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.DockTargetGlyphBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.DropDownBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.DropDownBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.DropDownDisabledBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.DropDownDisabledBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.DropDownDisabledGlyphKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.DropDownGlyphKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.DropDownMouseDownBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.DropDownMouseDownBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.DropDownMouseOverBackgroundBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.DropDownMouseOverBackgroundEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.DropDownMouseOverBackgroundMiddle1Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.DropDownMouseOverBackgroundMiddle2Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.DropDownMouseOverBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.DropDownMouseOverGlyphKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.DropDownPopupBackgroundBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.DropDownPopupBackgroundEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.DropDownPopupBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.DropShadowBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.EditorExpansionBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.EditorExpansionFillKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.EditorExpansionLinkKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.EditorExpansionTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.EnvironmentBackgroundGradientBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.EnvironmentBackgroundGradientEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.EnvironmentBackgroundGradientMiddle1Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.EnvironmentBackgroundGradientMiddle2Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.EnvironmentBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.EnvironmentBackgroundTexture1Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.EnvironmentBackgroundTexture2Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ExtensionManagerStarHighlight1Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ExtensionManagerStarHighlight2Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ExtensionManagerStarInactive1Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ExtensionManagerStarInactive2Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.FileTabBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.FileTabChannelBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.FileTabDocumentBorderBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.FileTabDocumentBorderHighlightKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.FileTabDocumentBorderShadowKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.FileTabGradientDarkKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.FileTabGradientLightKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.FileTabHotBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.FileTabHotGlyphKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.FileTabHotGradientBottomKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.FileTabHotGradientTopKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.FileTabHotTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.FileTabInactiveDocumentBorderBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.FileTabInactiveDocumentBorderEdgeKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.FileTabInactiveGradientBottomKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.FileTabInactiveGradientTopKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.FileTabInactiveTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.FileTabLastActiveDocumentBorderBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.FileTabLastActiveDocumentBorderEdgeKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.FileTabLastActiveGlyphKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.FileTabLastActiveGradientBottomKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.FileTabLastActiveGradientMiddle1Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.FileTabLastActiveGradientMiddle2Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.FileTabLastActiveGradientTopKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.FileTabLastActiveTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.FileTabSelectedBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.FileTabSelectedBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.FileTabSelectedGradientBottomKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.FileTabSelectedGradientMiddle1Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.FileTabSelectedGradientMiddle2Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.FileTabSelectedGradientTopKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.FileTabSelectedTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.FileTabTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.FormSmartTagActionTagBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.FormSmartTagActionTagFillKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.FormSmartTagObjectTagBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.FormSmartTagObjectTagFillKey"></member>
    <member name="M:Microsoft.VisualStudio.Shell.VsColors.GetColorID(System.Object)">
      <summary>Gets the VSCOLOR identifier for a given WPF color resource key.</summary>
      <returns>The color ID.</returns>
      <param name="vsColorKey">The Visual Studio color key.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.VsColors.GetColorKey(System.Int32)">
      <summary>Gets the WPF ResourceDictionary color key for a given VSCOLOR identifier.</summary>
      <returns>The color key.</returns>
      <param name="vsSysColor">The Visual Studio system color.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.GrayTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.GridHeadingBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.GridHeadingTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.GridLineKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.HelpHowDoIPaneBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.HelpHowDoIPaneLinkKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.HelpHowDoIPaneTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.HelpHowDoITaskBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.HelpHowDoITaskLinkKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.HelpHowDoITaskTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.HelpSearchBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.HelpSearchBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.HelpSearchFilterBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.HelpSearchFilterBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.HelpSearchFilterTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.HelpSearchFrameBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.HelpSearchFrameTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.HelpSearchPanelRulesKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.HelpSearchProviderIconKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.HelpSearchProviderSelectedBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.HelpSearchProviderSelectedTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.HelpSearchProviderUnselectedBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.HelpSearchProviderUnselectedTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.HelpSearchResultLinkSelectedKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.HelpSearchResultLinkUnselectedKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.HelpSearchResultSelectedBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.HelpSearchResultSelectedTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.HelpSearchTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.HighlightKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.HighlightTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.InactiveBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.InactiveCaptionKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.InactiveCaptionTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.InfoBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.InfoTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.MdiClientBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.MenuKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.MenuTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.NewProjectBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.NewProjectItemInactiveBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.NewProjectItemInactiveBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.NewProjectItemInactiveEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.NewProjectItemSelectedBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.NewProjectItemSelectedKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.NewProjectProviderHoverBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.NewProjectProviderHoverEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.NewProjectProviderHoverForegroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.NewProjectProviderHoverMiddle1Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.NewProjectProviderHoverMiddle2Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.NewProjectProviderInactiveBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.NewProjectProviderInactiveEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.NewProjectProviderInactiveForegroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.PageContentExpanderChevronKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.PageContentExpanderSeparatorKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.PageSideBarExpanderBodyKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.PageSideBarExpanderChevronKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.PageSideBarExpanderHeaderHoverKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.PageSideBarExpanderHeaderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.PageSideBarExpanderHeaderPressedKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.PageSideBarExpanderSeparatorKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.PageSideBarExpanderTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.PanelBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.PanelGradientDarkKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.PanelGradientLightKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.PanelHoverOverCloseBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.PanelHoverOverCloseFillKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.PanelHyperlinkHoverKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.PanelHyperlinkKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.PanelHyperlinkPressedKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.PanelSeparatorKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.PanelSubGroupSeparatorKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.PanelTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.PanelTitleBarKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.PanelTitleBarTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.PanelTitleBarUnselectedKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ProjectDesignerBackgroundGradientBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ProjectDesignerBackgroundGradientEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ProjectDesignerBorderInsideKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ProjectDesignerBorderOutsideKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ProjectDesignerContentsBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ProjectDesignerTabBackgroundGradientBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ProjectDesignerTabBackgroundGradientEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ProjectDesignerTabSelectedBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ProjectDesignerTabSelectedBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ProjectDesignerTabSelectedHighlight1Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ProjectDesignerTabSelectedHighlight2Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ProjectDesignerTabSelectedInsideBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ProjectDesignerTabSepBottomGradientBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ProjectDesignerTabSepBottomGradientEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ProjectDesignerTabSepTopGradientBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ProjectDesignerTabSepTopGradientEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ScreenTipBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ScreenTipBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ScreenTipTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ScrollBarArrowBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ScrollBarArrowDisabledBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ScrollBarArrowMouseOverBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ScrollBarArrowPressedBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ScrollBarBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ScrollBarDisabledBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ScrollBarKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ScrollBarThumbBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ScrollBarThumbBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ScrollBarThumbGlyphKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ScrollBarThumbMouseOverBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ScrollBarThumbPressedBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.SearchBoxBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.SearchBoxBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.SearchBoxMouseOverBackgroundBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.SearchBoxMouseOverBackgroundEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.SearchBoxMouseOverBackgroundMiddle1Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.SearchBoxMouseOverBackgroundMiddle2Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.SearchBoxMouseOverBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.SearchBoxPressedBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.SearchBoxPressedBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.SideBarBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.SideBarGradientDarkKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.SideBarGradientLightKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.SideBarTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.SmartTagBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.SmartTagFillKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.SmartTagHoverBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.SmartTagHoverFillKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.SmartTagHoverTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.SmartTagTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.SnaplinesKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.SnaplinesPaddingKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.SnaplinesTextBaselineKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.SortBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.SortTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.SplashScreenBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.StartPageBackgroundGradientBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.StartPageBackgroundGradientEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.StartPageButtonBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.StartPageButtonMouseOverBackgroundBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.StartPageButtonMouseOverBackgroundEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.StartPageButtonMouseOverBackgroundMiddle1Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.StartPageButtonMouseOverBackgroundMiddle2Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.StartPageButtonPinDownKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.StartPageButtonPinHoverKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.StartPageButtonPinnedKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.StartPageButtonTextHoverKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.StartPageButtonTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.StartPageButtonUnpinnedKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.StartPageSelectedItemBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.StartPageSelectedItemStrokeKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.StartPageSeparatorKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.StartPageTabBackgroundBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.StartPageTabBackgroundEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.StartPageTabMouseOverBackgroundBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.StartPageTabMouseOverBackgroundEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.StartPageTextBodyKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.StartPageTextBodySelectedKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.StartPageTextBodyUnselectedKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.StartPageTextControlLinkSelectedHoverKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.StartPageTextControlLinkSelectedKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.StartPageTextDateKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.StartPageTextHeadingKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.StartPageTextHeadingMouseOverKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.StartPageTextHeadingSelectedKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.StartPageTextSubHeadingKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.StartPageTextSubHeadingMouseOverKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.StartPageTextSubHeadingSelectedKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.StartPageUnselectedItemBackgroundBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.StartPageUnselectedItemBackgroundEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.StartPageUnselectedItemStrokeKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.StatusBarTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.TaskListGridLinesKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ThreeDDarkShadowKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ThreeDFaceKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ThreeDHighlightKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ThreeDLightShadowKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ThreeDShadowKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.TitleBarActiveGradientBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.TitleBarActiveGradientEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.TitleBarActiveGradientMiddle1Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.TitleBarActiveGradientMiddle2Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.TitleBarActiveKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.TitleBarActiveTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.TitleBarInactiveGradientBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.TitleBarInactiveGradientEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.TitleBarInactiveKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.TitleBarInactiveTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ToolboxBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ToolboxDividerKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ToolboxGradientDarkKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ToolboxGradientLightKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ToolboxHeadingAccentKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ToolboxHeadingBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ToolboxHeadingEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ToolboxIconHighlightKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ToolboxIconShadowKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ToolboxSelectedHeadingBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ToolboxSelectedHeadingEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ToolboxSelectedHeadingMiddle1Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ToolboxSelectedHeadingMiddle2Key"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ToolWindowBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ToolWindowBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ToolWindowButtonActiveGlyphKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ToolWindowButtonDownActiveGlyphKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ToolWindowButtonDownBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ToolWindowButtonDownInactiveGlyphKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ToolWindowButtonDownKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ToolWindowButtonHoverActiveBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ToolWindowButtonHoverActiveGlyphKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ToolWindowButtonHoverActiveKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ToolWindowButtonHoverInactiveBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ToolWindowButtonHoverInactiveGlyphKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ToolWindowButtonHoverInactiveKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ToolWindowButtonInactiveBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ToolWindowButtonInactiveGlyphKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ToolWindowButtonInactiveKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ToolWindowContentTabGradientBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ToolWindowContentTabGradientEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ToolWindowFloatingFrameKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ToolWindowTabBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ToolWindowTabGradientBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ToolWindowTabGradientEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ToolWindowTabMouseOverBackgroundBeginKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ToolWindowTabMouseOverBackgroundEndKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ToolWindowTabMouseOverBorderKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ToolWindowTabMouseOverTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ToolWindowTabSelectedTabKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ToolWindowTabSelectedTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ToolWindowTabTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.ToolWindowTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.VizSurfaceBrownDarkKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.VizSurfaceBrownLightKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.VizSurfaceBrownMediumKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.VizSurfaceDarkGoldDarkKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.VizSurfaceDarkGoldLightKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.VizSurfaceDarkGoldMediumKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.VizSurfaceGoldDarkKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.VizSurfaceGoldLightKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.VizSurfaceGoldMediumKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.VizSurfaceGreenDarkKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.VizSurfaceGreenLightKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.VizSurfaceGreenMediumKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.VizSurfacePlumDarkKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.VizSurfacePlumLightKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.VizSurfacePlumMediumKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.VizSurfaceRedDarkKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.VizSurfaceRedLightKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.VizSurfaceRedMediumKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.VizSurfaceSoftBlueDarkKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.VizSurfaceSoftBlueLightKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.VizSurfaceSoftBlueMediumKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.VizSurfaceSteelBlueDarkKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.VizSurfaceSteelBlueLightKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.VizSurfaceSteelBlueMediumKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.VizSurfaceStrongBlueDarkKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.VizSurfaceStrongBlueLightKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.VizSurfaceStrongBlueMediumKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.WindowFrameKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.WindowKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.WindowTextKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.WizardOrientationPanelBackgroundKey"></member>
    <member name="P:Microsoft.VisualStudio.Shell.VsColors.WizardOrientationPanelTextKey"></member>
    <member name="T:Microsoft.VisualStudio.Shell.VsDockStyle">
      <summary>Defines constants for tool window orientation.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.VsDockStyle.none">
      <summary>The registration attribute <see cref="T:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute" /> initializes to this value if no style is specified. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.VsDockStyle.MDI">
      <summary>If the Style value is <see cref="F:Microsoft.VisualStudio.Shell.VsDockStyle.MDI" />, the tool window will be linked to the multiple-document interface (MDI) area, and Window is ignored.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.VsDockStyle.Float">
      <summary>If the Style value is <see cref="F:Microsoft.VisualStudio.Shell.VsDockStyle.Float" />, the tool window will float initially, but when the title bar is double-clicked, Orientation and Window apply, and the window will default to Tabbed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.VsDockStyle.Linked">
      <summary>If the Style value is <see cref="F:Microsoft.VisualStudio.Shell.VsDockStyle.Linked" />, Orientation can be Left, Right, Top, or Bottom.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.VsDockStyle.Tabbed">
      <summary>If the Style value is <see cref="F:Microsoft.VisualStudio.Shell.VsDockStyle.Tabbed" />, Orientation can be Left or Right and tab placement can be specified.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.VsDockStyle.AlwaysFloat">
      <summary>If the Style value is <see cref="F:Microsoft.VisualStudio.Shell.VsDockStyle.AlwaysFloat" />, the tool window cannot be docked.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.VsMenus">
      <summary>Includes the GUIDs for Visual Studio menu commands. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.VsMenus.#ctor">
      <summary>Instantiates a new instance of VsMenus.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.VsMenus.guidCciSet"></member>
    <member name="F:Microsoft.VisualStudio.Shell.VsMenus.guidSHLMainMenu"></member>
    <member name="F:Microsoft.VisualStudio.Shell.VsMenus.guidStandardCommandSet2K"></member>
    <member name="F:Microsoft.VisualStudio.Shell.VsMenus.guidStandardCommandSet97"></member>
    <member name="F:Microsoft.VisualStudio.Shell.VsMenus.guidVsUIHierarchyWindowCmds"></member>
    <member name="F:Microsoft.VisualStudio.Shell.VsMenus.guidVSUISet"></member>
    <member name="F:Microsoft.VisualStudio.Shell.VsMenus.guidVsVbaPkg"></member>
    <member name="F:Microsoft.VisualStudio.Shell.VsMenus.IDM_VS_CTXT_CODEWIN"></member>
    <member name="F:Microsoft.VisualStudio.Shell.VsMenus.IDM_VS_CTXT_FOLDERNODE"></member>
    <member name="F:Microsoft.VisualStudio.Shell.VsMenus.IDM_VS_CTXT_ITEMNODE"></member>
    <member name="F:Microsoft.VisualStudio.Shell.VsMenus.IDM_VS_CTXT_NOCOMMANDS"></member>
    <member name="F:Microsoft.VisualStudio.Shell.VsMenus.IDM_VS_CTXT_PROJNODE"></member>
    <member name="F:Microsoft.VisualStudio.Shell.VsMenus.IDM_VS_CTXT_REFERENCE"></member>
    <member name="F:Microsoft.VisualStudio.Shell.VsMenus.IDM_VS_CTXT_REFERENCEROOT"></member>
    <member name="F:Microsoft.VisualStudio.Shell.VsMenus.IDM_VS_CTXT_XPROJ_MULTIITEM"></member>
    <member name="F:Microsoft.VisualStudio.Shell.VsMenus.IDM_VS_CTXT_XPROJ_PROJITEM"></member>
    <member name="F:Microsoft.VisualStudio.Shell.VsMenus.VSCmdOptQueryParameterList"></member>
    <member name="T:Microsoft.VisualStudio.Shell.VsServiceProviderWrapper"></member>
    <member name="M:Microsoft.VisualStudio.Shell.VsServiceProviderWrapper.#ctor(System.IServiceProvider)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.VsServiceProviderWrapper.GetService(System.Type)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.ApplyListViewThemeStyles(System.Windows.Forms.ListView)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.ApplyTreeViewThemeStyles(System.Windows.Forms.TreeView)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.ApplyTreeViewThemeStyles(System.Windows.Forms.TreeView,System.Boolean)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.GetEnvironmentFont(System.IServiceProvider)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.GetTaskItems2(System.IServiceProvider)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.WindowPane.#ctor"></member>
    <member name="P:Microsoft.VisualStudio.Shell.WindowPane.Content"></member>
    <member name="P:Microsoft.VisualStudio.Shell.WindowPane.InitializationMode">
      <summary>Gets the initialization mode that is associated with this window pane.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Shell.WindowPane.PaneInitializationMode" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.WindowPane.LoadUIState(System.IO.Stream)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.WindowPane.Microsoft#VisualStudio#Shell#Interop#IVsUIElementPane#CloseUIElementPane"></member>
    <member name="M:Microsoft.VisualStudio.Shell.WindowPane.Microsoft#VisualStudio#Shell#Interop#IVsUIElementPane#CreateUIElementPane(System.Object@)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.WindowPane.Microsoft#VisualStudio#Shell#Interop#IVsUIElementPane#GetDefaultUIElementSize(Microsoft.VisualStudio.OLE.Interop.SIZE[])"></member>
    <member name="M:Microsoft.VisualStudio.Shell.WindowPane.Microsoft#VisualStudio#Shell#Interop#IVsUIElementPane#LoadUIElementState(Microsoft.VisualStudio.OLE.Interop.IStream)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.WindowPane.Microsoft#VisualStudio#Shell#Interop#IVsUIElementPane#SaveUIElementState(Microsoft.VisualStudio.OLE.Interop.IStream)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.WindowPane.Microsoft#VisualStudio#Shell#Interop#IVsUIElementPane#SetUIElementSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.WindowPane.Microsoft#VisualStudio#Shell#Interop#IVsUIElementPane#TranslateUIElementAccelerator(Microsoft.VisualStudio.OLE.Interop.MSG[])"></member>
    <member name="M:Microsoft.VisualStudio.Shell.WindowPane.SaveUIState(System.IO.Stream@)"></member>
    <member name="T:Microsoft.VisualStudio.Shell.WindowPane.PaneInitializationMode">
      <summary>Represents the possible initialization states for a <see cref="T:Microsoft.VisualStudio.Shell.WindowPane" /> object.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.WindowPane.PaneInitializationMode.Uninitialized">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.WindowPane.PaneInitializationMode.IVsWindowPane">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.WindowPane.PaneInitializationMode.IVsUIElementPane">
      <summary />
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.#ctor"></member>
    <member name="F:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase._innerOleCommandTarget"></member>
    <member name="F:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase._innerVsAggregatableProject"></member>
    <member name="F:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase._innerVsHierarchy"></member>
    <member name="F:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase._innerVsUIHierarchy"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.AdviseHierarchyEvents(Microsoft.VisualStudio.Shell.Interop.IVsHierarchyEvents)">
      <param name="eventSink"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Close"></member>
    <member name="E:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.DirectoryAdded"></member>
    <member name="E:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.DirectoryRemoved"></member>
    <member name="E:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.DirectoryRenamed"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.ExecCommand(System.UInt32,System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
      <param name="itemid"></param>
      <param name="pguidCmdGroup"></param>
      <param name="nCmdID"></param>
      <param name="nCmdexecopt"></param>
      <param name="pvaIn"></param>
      <param name="pvaOut"></param>
    </member>
    <member name="E:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.FileAdded"></member>
    <member name="E:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.FileRemoved"></member>
    <member name="E:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.FileRenamed"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.FreeInterfaces"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.GetCanonicalName(System.UInt32,System.String@)">
      <param name="itemId"></param>
      <param name="name"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.GetComInterface``1">
      <typeparam name="Interface_T"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.GetGuidProperty(System.UInt32,System.Int32)">
      <param name="itemId"></param>
      <param name="propId"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.GetNestedHierarchy(System.UInt32,System.Guid@,System.IntPtr@,System.UInt32@)">
      <param name="itemId"></param>
      <param name="guidHierarchyNested"></param>
      <param name="hierarchyNested"></param>
      <param name="itemIdNested"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.GetProperty(System.UInt32,System.Int32,System.Object@)">
      <param name="itemId"></param>
      <param name="propId"></param>
      <param name="property"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.GetSite"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.InitializeForOuter(System.String,System.String,System.String,System.UInt32,System.Guid@,System.Boolean@)">
      <param name="fileName"></param>
      <param name="location"></param>
      <param name="name"></param>
      <param name="flags"></param>
      <param name="guidProject"></param>
      <param name="cancel"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Microsoft#VisualStudio#OLE#Interop#IOleCommandTarget#Exec(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
      <param name="pguidCmdGroup"></param>
      <param name="nCmdID"></param>
      <param name="nCmdexecopt"></param>
      <param name="pvaIn"></param>
      <param name="pvaOut"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Microsoft#VisualStudio#OLE#Interop#IOleCommandTarget#QueryStatus(System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)">
      <param name="pguidCmdGroup"></param>
      <param name="cCmds"></param>
      <param name="prgCmds"></param>
      <param name="pCmdText"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Microsoft#VisualStudio#Shell#Flavor#IVsAggregatableProjectCorrected#GetAggregateProjectTypeGuids(System.String@)">
      <param name="projectTypeGuids"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Microsoft#VisualStudio#Shell#Flavor#IVsAggregatableProjectCorrected#InitializeForOuter(System.String,System.String,System.String,System.UInt32,System.Guid@,System.IntPtr@,System.Int32@)">
      <param name="fileName"></param>
      <param name="location"></param>
      <param name="name"></param>
      <param name="flags"></param>
      <param name="guidProject"></param>
      <param name="project"></param>
      <param name="canceled"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Microsoft#VisualStudio#Shell#Flavor#IVsAggregatableProjectCorrected#OnAggregationComplete"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Microsoft#VisualStudio#Shell#Flavor#IVsAggregatableProjectCorrected#SetAggregateProjectTypeGuids(System.String)">
      <param name="projectTypeGuids"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Microsoft#VisualStudio#Shell#Flavor#IVsAggregatableProjectCorrected#SetInnerProject(System.IntPtr)">
      <param name="innerIUnknown"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Microsoft#VisualStudio#Shell#Interop#IVsHierarchy#AdviseHierarchyEvents(Microsoft.VisualStudio.Shell.Interop.IVsHierarchyEvents,System.UInt32@)">
      <param name="eventSink"></param>
      <param name="cookie"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Microsoft#VisualStudio#Shell#Interop#IVsHierarchy#Close"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Microsoft#VisualStudio#Shell#Interop#IVsHierarchy#GetCanonicalName(System.UInt32,System.String@)">
      <param name="itemId"></param>
      <param name="name"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Microsoft#VisualStudio#Shell#Interop#IVsHierarchy#GetGuidProperty(System.UInt32,System.Int32,System.Guid@)">
      <param name="itemId"></param>
      <param name="propId"></param>
      <param name="guid"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Microsoft#VisualStudio#Shell#Interop#IVsHierarchy#GetNestedHierarchy(System.UInt32,System.Guid@,System.IntPtr@,System.UInt32@)">
      <param name="itemId"></param>
      <param name="guidHierarchyNested"></param>
      <param name="hierarchyNested"></param>
      <param name="itemIdNested"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Microsoft#VisualStudio#Shell#Interop#IVsHierarchy#GetProperty(System.UInt32,System.Int32,System.Object@)">
      <param name="itemId"></param>
      <param name="propId"></param>
      <param name="property"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Microsoft#VisualStudio#Shell#Interop#IVsHierarchy#GetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider@)">
      <param name="serviceProvider"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Microsoft#VisualStudio#Shell#Interop#IVsHierarchy#ParseCanonicalName(System.String,System.UInt32@)">
      <param name="name"></param>
      <param name="itemId"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Microsoft#VisualStudio#Shell#Interop#IVsHierarchy#QueryClose(System.Int32@)">
      <param name="canClose"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Microsoft#VisualStudio#Shell#Interop#IVsHierarchy#SetGuidProperty(System.UInt32,System.Int32,System.Guid@)">
      <param name="itemId"></param>
      <param name="propId"></param>
      <param name="guid"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Microsoft#VisualStudio#Shell#Interop#IVsHierarchy#SetProperty(System.UInt32,System.Int32,System.Object)">
      <param name="itemId"></param>
      <param name="propId"></param>
      <param name="property"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Microsoft#VisualStudio#Shell#Interop#IVsHierarchy#SetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
      <param name="serviceProvider"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Microsoft#VisualStudio#Shell#Interop#IVsHierarchy#UnadviseHierarchyEvents(System.UInt32)">
      <param name="cookie"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Microsoft#VisualStudio#Shell#Interop#IVsHierarchy#Unused0"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Microsoft#VisualStudio#Shell#Interop#IVsHierarchy#Unused1"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Microsoft#VisualStudio#Shell#Interop#IVsHierarchy#Unused2"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Microsoft#VisualStudio#Shell#Interop#IVsHierarchy#Unused3"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Microsoft#VisualStudio#Shell#Interop#IVsHierarchy#Unused4"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Microsoft#VisualStudio#Shell#Interop#IVsUIHierarchy#AdviseHierarchyEvents(Microsoft.VisualStudio.Shell.Interop.IVsHierarchyEvents,System.UInt32@)">
      <param name="pEventSink"></param>
      <param name="pdwCookie"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Microsoft#VisualStudio#Shell#Interop#IVsUIHierarchy#Close"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Microsoft#VisualStudio#Shell#Interop#IVsUIHierarchy#ExecCommand(System.UInt32,System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
      <param name="itemid"></param>
      <param name="pguidCmdGroup"></param>
      <param name="nCmdID"></param>
      <param name="nCmdexecopt"></param>
      <param name="pvaIn"></param>
      <param name="pvaOut"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Microsoft#VisualStudio#Shell#Interop#IVsUIHierarchy#GetCanonicalName(System.UInt32,System.String@)">
      <param name="itemid"></param>
      <param name="pbstrName"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Microsoft#VisualStudio#Shell#Interop#IVsUIHierarchy#GetGuidProperty(System.UInt32,System.Int32,System.Guid@)">
      <param name="itemid"></param>
      <param name="propid"></param>
      <param name="pguid"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Microsoft#VisualStudio#Shell#Interop#IVsUIHierarchy#GetNestedHierarchy(System.UInt32,System.Guid@,System.IntPtr@,System.UInt32@)">
      <param name="itemid"></param>
      <param name="iidHierarchyNested"></param>
      <param name="ppHierarchyNested"></param>
      <param name="pitemidNested"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Microsoft#VisualStudio#Shell#Interop#IVsUIHierarchy#GetProperty(System.UInt32,System.Int32,System.Object@)">
      <param name="itemid"></param>
      <param name="propid"></param>
      <param name="pvar"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Microsoft#VisualStudio#Shell#Interop#IVsUIHierarchy#GetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider@)">
      <param name="ppSP"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Microsoft#VisualStudio#Shell#Interop#IVsUIHierarchy#ParseCanonicalName(System.String,System.UInt32@)">
      <param name="pszName"></param>
      <param name="pitemid"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Microsoft#VisualStudio#Shell#Interop#IVsUIHierarchy#QueryClose(System.Int32@)">
      <param name="pfCanClose"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Microsoft#VisualStudio#Shell#Interop#IVsUIHierarchy#QueryStatusCommand(System.UInt32,System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)">
      <param name="itemid"></param>
      <param name="pguidCmdGroup"></param>
      <param name="cCmds"></param>
      <param name="prgCmds"></param>
      <param name="pCmdText"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Microsoft#VisualStudio#Shell#Interop#IVsUIHierarchy#SetGuidProperty(System.UInt32,System.Int32,System.Guid@)">
      <param name="itemid"></param>
      <param name="propid"></param>
      <param name="rguid"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Microsoft#VisualStudio#Shell#Interop#IVsUIHierarchy#SetProperty(System.UInt32,System.Int32,System.Object)">
      <param name="itemid"></param>
      <param name="propid"></param>
      <param name="var"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Microsoft#VisualStudio#Shell#Interop#IVsUIHierarchy#SetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
      <param name="psp"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Microsoft#VisualStudio#Shell#Interop#IVsUIHierarchy#UnadviseHierarchyEvents(System.UInt32)">
      <param name="dwCookie"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Microsoft#VisualStudio#Shell#Interop#IVsUIHierarchy#Unused0"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Microsoft#VisualStudio#Shell#Interop#IVsUIHierarchy#Unused1"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Microsoft#VisualStudio#Shell#Interop#IVsUIHierarchy#Unused2"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Microsoft#VisualStudio#Shell#Interop#IVsUIHierarchy#Unused3"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Microsoft#VisualStudio#Shell#Interop#IVsUIHierarchy#Unused4"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.OnAggregationComplete"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.ParseCanonicalName(System.String,System.UInt32@)">
      <param name="name"></param>
      <param name="itemId"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.QueryClose"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.QueryStatusCommand(System.UInt32,System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)">
      <param name="itemid"></param>
      <param name="pguidCmdGroup"></param>
      <param name="cCmds"></param>
      <param name="prgCmds"></param>
      <param name="pCmdText"></param>
    </member>
    <member name="E:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.SccStatusChanged"></member>
    <member name="F:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.serviceProvider"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.SetGuidProperty(System.UInt32,System.Int32,System.Guid@)">
      <param name="itemId"></param>
      <param name="propId"></param>
      <param name="guid"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.SetInnerProject(System.IntPtr)">
      <param name="innerIUnknown"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.SetProperty(System.UInt32,System.Int32,System.Object)">
      <param name="itemId"></param>
      <param name="propId"></param>
      <param name="property"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.System#IServiceProvider#GetService(System.Type)">
      <param name="serviceType"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.UnadviseHierarchyEvents(System.UInt32)">
      <param name="cookie"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Unused0"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Unused1"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Unused2"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Unused3"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Unused4"></member>
    <member name="T:Microsoft.VisualStudio.Shell.Flavor.IVsAggregatableProjectCorrected">
      <summary>Implemented by a project that supports adding project subtypes through aggregation.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.IVsAggregatableProjectCorrected.GetAggregateProjectTypeGuids(System.String@)">
      <summary>Gets the list of project type GUIDs that make up the aggregate project. This method should be delegated to the innermost project within the system of aggregated project subtypes.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrProjTypeGuids">Pointer to a string containing the project type GUIDs.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.IVsAggregatableProjectCorrected.InitializeForOuter(System.String,System.String,System.String,System.UInt32,System.Guid@,System.IntPtr@,System.Int32@)">
      <summary>Called by the owner, the outer project subtype, to have the owned project, the inner project subtype, to do its initialization work.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszFilename">[in] Project file name of the project to be initialized.</param>
      <param name="pszLocation">[out] Location of the initialized project file.</param>
      <param name="pszName">[in] Pointer to a null-terminated string containing the name.</param>
      <param name="grfCreateFlags">[in] Controls how a project is created or opened. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS" /> enumeration.</param>
      <param name="iidProject">[in] Identifier of the interface of the returned <paramref name="ppvProject" />.</param>
      <param name="ppvProject">[out, iid_is(iidProject)] Pointer to the interface specified by <paramref name="iidProject" />.</param>
      <param name="pfCanceled">[out] Pointer to a flag where true indicates canceled.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.IVsAggregatableProjectCorrected.OnAggregationComplete">
      <summary>Indicates that aggregation is complete.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.IVsAggregatableProjectCorrected.SetAggregateProjectTypeGuids(System.String)">
      <summary>This method updates the list of GUIDs that are persisted in the project file of the base project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="lpstrProjTypeGuids">String containing the project type GUIDs.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.IVsAggregatableProjectCorrected.SetInnerProject(System.IntPtr)">
      <summary>This method is used to pass in the pointer to the inner IUnknown of the project subtype that is being aggregated.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="punkInnerIUnknown">[in] Pointer to the IUnknown of the inner project subtype.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Flavor.IVsAggregatableProjectFactoryCorrected">
      <summary>Creates a project type that supports aggregation.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.IVsAggregatableProjectFactoryCorrected.GetAggregateProjectType(System.String,System.String@)">
      <summary>Returns a string containing a list of project type GUIDs to aggregate to create an instance of this project. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fileName">[in] The name of the project file containing the list of project type GUIDs.</param>
      <param name="projectTypeGuid">[out] Pointer to a string containing a semi-colon delimited list of the project type GUIDs, ordered from outer to the inner project subtype.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.IVsAggregatableProjectFactoryCorrected.PreCreateForOuter(System.IntPtr,System.IntPtr@)">
      <summary>Called by the owner or outer project subtype so that the owned or inner project subtype can create a version of itself that can be aggregated.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="outerProjectIUnknown">[in] Pointer to the outer IUnknown interface.</param>
      <param name="projectIUnknown">[out] Pointer to the inner or owned project subtype IUnknown interface.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Flavor.IVsProjectAggregator2"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.IVsProjectAggregator2.SetInner(System.IntPtr)">
      <param name="innerIUnknown"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.IVsProjectAggregator2.SetMyProject(System.IntPtr)">
      <param name="projectIUnknown"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsCommonMessagePump"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCommonMessagePump.ModalWaitForObjects(System.IntPtr[],System.UInt32,System.UInt32@)">
      <param name="rgHandles"></param>
      <param name="cHandles"></param>
      <param name="pdwWaitResult"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCommonMessagePump.ModalWaitForObjectsWithClient(System.IntPtr[],System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsCommonMessagePumpClientEvents)">
      <param name="rgHandles"></param>
      <param name="cHandles"></param>
      <param name="pClient"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCommonMessagePump.SetAllowCancel(System.Boolean)">
      <param name="fAllowCancel"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCommonMessagePump.SetStatusBarText(System.String)">
      <param name="pszStatusBarText"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCommonMessagePump.SetTimeout(System.UInt32)">
      <param name="dwTimeoutInMilliseconds"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCommonMessagePump.SetWaitText(System.String)">
      <param name="pszWaitText"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCommonMessagePump.SetWaitTitle(System.String)">
      <param name="pszWaitTitle"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsThreadedWaitDialog2._VtblGap1_2"></member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsThreadedWaitDialogFactory"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsThreadedWaitDialogFactory.CreateInstance(Microsoft.VisualStudio.Shell.Interop.IVsThreadedWaitDialog2@)">
      <param name="ppIVsThreadedWaitDialog"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsToolboxItemProvider"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolboxItemProvider.GetItemContent(System.String,System.UInt16,System.IntPtr@)">
      <param name="szItemID"></param>
      <param name="format"></param>
      <param name="pGlobal"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsUIAccelerator"></member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsUICollection"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUICollection.AdviseCollectionChangeEvents(Microsoft.VisualStudio.Shell.Interop.IVsUICollectionChangeEvents,System.UInt32@)">
      <param name="pAdvise"></param>
      <param name="pCookie"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUICollection.Close"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUICollection.EnumVerbs(Microsoft.VisualStudio.Shell.Interop.IVsUIEnumDataSourceVerbs@)">
      <param name="ppEnum"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUICollection.get_Count(System.UInt32@)">
      <param name="pnCount"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUICollection.GetItem(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource@)">
      <param name="nItem"></param>
      <param name="pVsUIDataSource"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUICollection.Invoke(System.String,System.Object,System.Object@)">
      <param name="verb"></param>
      <param name="pvaIn"></param>
      <param name="pvaOut"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUICollection.UnadviseCollectionChangeEvents(System.UInt32)">
      <param name="cookie"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsUICollectionChangeEvents"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUICollectionChangeEvents.Disconnect(Microsoft.VisualStudio.Shell.Interop.IVsUISimpleDataSource)">
      <param name="pSource"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUICollectionChangeEvents.OnAfterItemAdded(Microsoft.VisualStudio.Shell.Interop.IVsUICollection,System.UInt32)">
      <param name="pCollection"></param>
      <param name="nItem"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUICollectionChangeEvents.OnAfterItemRemoved(Microsoft.VisualStudio.Shell.Interop.IVsUICollection,Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource,System.UInt32)">
      <param name="pCollection"></param>
      <param name="pRemovedItem"></param>
      <param name="nItem"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUICollectionChangeEvents.OnAfterItemReplaced(Microsoft.VisualStudio.Shell.Interop.IVsUICollection,Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource,Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource,System.UInt32)">
      <param name="pCollection"></param>
      <param name="pNewItem"></param>
      <param name="pOldItem"></param>
      <param name="nItem"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUICollectionChangeEvents.OnInvalidateAllItems(Microsoft.VisualStudio.Shell.Interop.IVsUICollection)">
      <param name="pCollection"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIDataConverterManager._VtblGap1_3"></member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource.AdvisePropertyChangeEvents(Microsoft.VisualStudio.Shell.Interop.IVsUIDataSourcePropertyChangeEvents,System.UInt32@)">
      <param name="pAdvise"></param>
      <param name="pCookie"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource.Close"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource.EnumProperties(Microsoft.VisualStudio.Shell.Interop.IVsUIEnumDataSourceProperties@)">
      <param name="ppEnum"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource.EnumVerbs(Microsoft.VisualStudio.Shell.Interop.IVsUIEnumDataSourceVerbs@)">
      <param name="ppEnum"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource.GetShapeIdentifier(System.Guid@,System.UInt32@)">
      <param name="pGuid"></param>
      <param name="pdw"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource.GetValue(System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIObject@)">
      <param name="prop"></param>
      <param name="ppValue"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource.Invoke(System.String,System.Object,System.Object@)">
      <param name="verb"></param>
      <param name="pvaIn"></param>
      <param name="pvaOut"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource.QueryValue(System.String,System.String[],System.UInt32[],System.Object[])">
      <param name="prop"></param>
      <param name="pTypeName"></param>
      <param name="pDataFormat"></param>
      <param name="pValue"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource.ResetValue(System.String)">
      <param name="prop"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource.SetValue(System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIObject)">
      <param name="prop"></param>
      <param name="pValue"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource.UnadvisePropertyChangeEvents(System.UInt32)">
      <param name="cookie"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsUIDataSourcePropertyChangeEvents"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIDataSourcePropertyChangeEvents.Disconnect(Microsoft.VisualStudio.Shell.Interop.IVsUISimpleDataSource)">
      <param name="pSource"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIDataSourcePropertyChangeEvents.OnPropertyChanged(Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIObject,Microsoft.VisualStudio.Shell.Interop.IVsUIObject)">
      <param name="pDataSource"></param>
      <param name="prop"></param>
      <param name="pVarOld"></param>
      <param name="pVarNew"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsUIDynamicCollection"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIDynamicCollection.AddItem(Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource,System.UInt32@)">
      <param name="pItem"></param>
      <param name="pIndex"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIDynamicCollection.AdviseCollectionChangeEvents(Microsoft.VisualStudio.Shell.Interop.IVsUICollectionChangeEvents,System.UInt32@)">
      <param name="pAdvise"></param>
      <param name="pCookie"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIDynamicCollection.ClearItems"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIDynamicCollection.Close"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIDynamicCollection.EnumVerbs(Microsoft.VisualStudio.Shell.Interop.IVsUIEnumDataSourceVerbs@)">
      <param name="ppEnum"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIDynamicCollection.get_Count(System.UInt32@)">
      <param name="pnCount"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIDynamicCollection.GetItem(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource@)">
      <param name="nItem"></param>
      <param name="pVsUIDataSource"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIDynamicCollection.InsertCollection(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsUICollection)">
      <param name="nIndex"></param>
      <param name="pCollection"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIDynamicCollection.InsertItem(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource)">
      <param name="nIndex"></param>
      <param name="pItem"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIDynamicCollection.Invoke(System.String,System.Object,System.Object@)">
      <param name="verb"></param>
      <param name="pvaIn"></param>
      <param name="pvaOut"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIDynamicCollection.RemoveItem(System.UInt32)">
      <param name="nIndex"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIDynamicCollection.ReplaceItem(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource)">
      <param name="nIndex"></param>
      <param name="pItem"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIDynamicCollection.UnadviseCollectionChangeEvents(System.UInt32)">
      <param name="cookie"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsUIElement"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIElement.get_DataSource(Microsoft.VisualStudio.Shell.Interop.IVsUISimpleDataSource@)">
      <param name="ppDataSource"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIElement.GetUIObject(System.Object@)">
      <param name="ppUnk"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIElement.put_DataSource(Microsoft.VisualStudio.Shell.Interop.IVsUISimpleDataSource)">
      <param name="pDataSource"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIElement.TranslateAccelerator(Microsoft.VisualStudio.Shell.Interop.IVsUIAccelerator)">
      <param name="pAccel"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIElementPane.CloseUIElementPane"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIElementPane.CreateUIElementPane(System.Object@)">
      <param name="punkUIElement"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIElementPane.GetDefaultUIElementSize(Microsoft.VisualStudio.OLE.Interop.SIZE[])">
      <param name="psize"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIElementPane.LoadUIElementState(Microsoft.VisualStudio.OLE.Interop.IStream)">
      <param name="pstream"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIElementPane.SaveUIElementState(Microsoft.VisualStudio.OLE.Interop.IStream)">
      <param name="pstream"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIElementPane.SetUIElementSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
      <param name="pSP"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIElementPane.TranslateUIElementAccelerator(Microsoft.VisualStudio.OLE.Interop.MSG[])">
      <param name="lpmsg"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsUIEnumDataSourceProperties"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIEnumDataSourceProperties.Clone(Microsoft.VisualStudio.Shell.Interop.IVsUIEnumDataSourceProperties@)">
      <param name="ppEnum"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIEnumDataSourceProperties.Next(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VsUIPropertyDescriptor[],System.UInt32@)">
      <param name="celt"></param>
      <param name="rgelt"></param>
      <param name="pceltFetched"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIEnumDataSourceProperties.Reset"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIEnumDataSourceProperties.Skip(System.UInt32)">
      <param name="celt"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIFactory.CreateUIElement(System.Guid@,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsUIElement@)">
      <param name="guid"></param>
      <param name="dw"></param>
      <param name="ppUIElement"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUISimpleDataSource.Close"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUISimpleDataSource.EnumVerbs(Microsoft.VisualStudio.Shell.Interop.IVsUIEnumDataSourceVerbs@)">
      <param name="ppEnum"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUISimpleDataSource.Invoke(System.String,System.Object,System.Object@)">
      <param name="verb"></param>
      <param name="pvaIn"></param>
      <param name="pvaOut"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWritableSettingsStore._VtblGap1_21"></member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsSettingsManager"></member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VsUIPropertyDescriptor"></member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsUIPropertyDescriptor.name"></member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsUIPropertyDescriptor.type"></member>
    <member name="T:Microsoft.VisualStudio.Shell.Settings.ShellSettingsManager">
      <summary>This is the gateway class to reach for the settings stored inside the Visual Studio. It provides two basic functionality. It allows to search for properties and collections inside the scopes. It hands the <see cref="T:Microsoft.VisualStudio.Settings.SettingsScope" /> and <see cref="T:Microsoft.VisualStudio.Settings.WritableSettingsStore" /> classes for further manipulation of the collections and properties within the scopes. This class implements the <see cref="T:System.IDisposable" /> pattern hence it needs to be disposed after it is no longer necessary.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Settings.ShellSettingsManager.#ctor(System.IServiceProvider)">
      <summary>Constructor for the SettingsManager class. It requires Service Provider to reach IVsSettingsManager which is the interop COM interface of the service that provides the Settings related functionalities.</summary>
      <param name="serviceProvider">Service provider of the VS.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Settings.ShellSettingsManager.GetApplicationDataFolder(Microsoft.VisualStudio.Settings.ApplicationDataFolder)">
      <summary>Returns the folder that Visual Studio uses for storing various cache, backup, template, etc. files</summary>
      <param name="folder">Requested folder.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Settings.ShellSettingsManager.GetCollectionScopes(System.String)">
      <summary>Outputs the scopes that contain the given collection. If more than one scope contains the collection, the corresponding bit flags of those scopes are set.</summary>
      <param name="collectionPath">Path of the collection to be searched.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Settings.ShellSettingsManager.GetCommonExtensionsSearchPaths">
      <summary>Returns the list of folders that Visual Studio uses for installing/discovering machine-wide extensions.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Settings.ShellSettingsManager.GetPropertyScopes(System.String,System.String)">
      <summary>Outputs the scopes that contain the given property. If more than one scope contains the property, the corresponding bit flags of those scopes are set.</summary>
      <param name="collectionPath">Path of the collection of the property.</param>
      <param name="propertyName">Name of the property to be searched.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Settings.ShellSettingsManager.GetReadOnlySettingsStore(Microsoft.VisualStudio.Settings.SettingsScope)">
      <summary>Provides the <see cref="T:Microsoft.VisualStudio.Settings.SettingsStore" /> class for the requested scope which can be used for read-only operations.</summary>
      <param name="scope">Requested scope.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Settings.ShellSettingsManager.GetWritableSettingsStore(Microsoft.VisualStudio.Settings.SettingsScope)">
      <summary>Provides the <see cref="T:Microsoft.VisualStudio.Settings.WritableSettingsStore" /> class for the requested scope which can be used both for reading and writing.</summary>
      <param name="scope">Requested scope.</param>
      <exception cref="T:System.ArgumentException">If the given scope is not a writable one.</exception>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\VisualStudio\VS10RTM\VisualStudioIntegration\Common\Assemblies\v4.0\Microsoft.VisualStudio.TextTemplating.VSHost.10.0.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.TextTemplating.VSHost.10.0</name>
    </assembly>
    <members>
        <member name="T:Microsoft.VisualStudio.TextTemplating.VSHost.CompositionServices">
            <summary>
            Class to standardize usage of MEF within T4.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.VSHost.CompositionServices.servicesInitialized">
            <summary>
            Have the MEF services been set up yet in this AppDomain?
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.CompositionServices.InitializeServices(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
            <summary>
            One-time initialization of the services
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.CompositionServices.CurrentDomain_Cleanup(System.Object,System.EventArgs)">
            <summary>
            Event handler to cleanup the AppDomain before it goes away.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.CompositionServices.CleanupFields">
            <summary>
            Clean up fields in the correct order if they are initialized
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.CompositionServices.ServiceProvider">
            <summary>
            Service provider to ask for local services within the AppDomain
            Query for SComponentModel to acquire MEF services.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.CompositionServices.ServiceContainer">
            <summary>
            Service container to add local services within the AppDomain
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TextTemplating.VSHost.LocalComponentModel">
            <summary>
            Class to provide a service shim over the AppDomain-local versions of the standard MEF structures
            </summary>
            <remarks>
            TODO: once we get new pieces from main in early June, make this class internal
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.LocalComponentModel.#ctor(Microsoft.VisualStudio.ExtensibilityHosting.VsCatalogProvider,System.ComponentModel.Composition.Hosting.CompositionContainer)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.LocalComponentModel.GetCatalog(System.String)">
            <summary>
            Retrieve a named catalog from the catalog provider
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.LocalComponentModel.GetService``1">
            <summary>
            Get a singleton component from the export provider
            </summary>
            <remarks>TODO: Should just be removed when this method is removed from the service interface definition in later main builds.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.LocalComponentModel.GetExtensions``1">
            <summary>
            Get a set of components from the export provider
            </summary>
            <remarks>TODO: Should just be removed when this method is removed from the service interface definition in later main builds.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.LocalComponentModel.DefaultCatalog">
            <summary>
            Get the DefaultCatalog
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.LocalComponentModel.DefaultExportProvider">
            <summary>
            Get the ExportProvider
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.LocalComponentModel.DefaultCompositionService">
            <summary>
            Get the composition service
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.LocalComponentModel.ExportProvider">
            <summary>
            Get the ExportProvider
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.LocalComponentModel.CompositionService">
            <summary>
            Get the composition service
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TextTemplating.VSHost.OrchestratorCommandSet">
            <summary>
            Commands for the Orchestrator package
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.VSHost.OrchestratorCommandSet.codeMarkers">
            <summary>
            Code markers to measure performance
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.OrchestratorCommandSet.OnStatusGenerateAllCode(System.Object,System.EventArgs)">
            <summary>
            Status callback
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.OrchestratorCommandSet.CalculateCommandStatus">
            <summary>
            Returns a flag indicating whether the transform all command should be shown or not
            </summary>
            <remarks>The command should be shown if any project in the solution contains a service
            reference to the T4 VS service.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.OrchestratorCommandSet.OnMenuGenerateAllCode(System.Object,System.EventArgs)">
            <summary>
            Menu handler
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.OrchestratorCommandSet.SaveAllOpenFiles">
            <summary>
            Ask VS to save any files that are open
            </summary>
            <returns>
            Whether the user has asked for an abort.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.OrchestratorCommandSet.FindProjectItems(EnvDTE.Project,System.Collections.Generic.List{EnvDTE.ProjectItem})">
            <summary>
            Find all project items in the given project and nested projects (if project is a solution folder)
            that have T4's custom tool defined.
            </summary>
            <param name="project"></param>
            <param name="toProcess"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.OrchestratorCommandSet.ExecuteCommandIfEnabled(System.String)">
            <summary>
            Helper method to execute a command.  First checks that the command is enabled
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.OrchestratorCommandSet.FindProjectItemDependents(EnvDTE.ProjectItem,System.Collections.Generic.List{EnvDTE.ProjectItem})">
            <summary>
            Recursive method to process project files that have custom tool elements in depth first pre-order traversal
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.OrchestratorCommandSet.GetCustomTool(EnvDTE.ProjectItem)">
            <summary>
            Get the custom tool value from the given project item or return null if it doesn't have one
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.OrchestratorCommandSet.RunCustomTool(EnvDTE.ProjectItem)">
            <summary>
            Run the custom tool of an item we know to be in possession of one
            </summary>
            <param name="item"></param>
            <returns>Whether the run produced errors in the error list - true == errors</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.OrchestratorCommandSet.FindCustomTextTemplatingToolErrorStatus">
            <summary>
            Check whether a custom tool usign our service has raised an error.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.OrchestratorCommandSet.ClearCustomTextTemplatingToolErrorStatus">
            <summary>
            CLear the flag indicating whether a custom tool using our service has raised an error.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.OrchestratorCommandSet.BeginErrorSession">
            <summary>
            Begin a session that causes only unique errors to be logged.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.OrchestratorCommandSet.EndErrorSession">
            <summary>
            Finish a session using the system that causes only unique errors to be logged.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.OrchestratorCommandSet.GetStartUpServices(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
            <summary>
            Returns the VS Startup Services object, or null if it could not be retrieved.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.OrchestratorCommandSet.StartupServicesReferencesService(Microsoft.VisualStudio.Shell.Interop.IVsProjectStartupServices,System.Guid)">
            <summary>
            Returns a flag indicating whether the startup service references
            the specified service
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.OrchestratorCommandSet.MenuService">
            <summary>
            The MenuService.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.OrchestratorCommandSet.Dte">
            <summary>
            The DTE
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.OrchestratorCommandSet.ServiceProvider">
            <summary>
            The ServiceProvider.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TextTemplating.VSHost.CommandIds">
            <summary>
            CommandIDs for the T4 Orchestrator package.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.VSHost.CommandIds.cmdIdGenerateAllCode">
            <summary>
            cmdIds
            </summary>
            
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.VSHost.CommandIds.GuidOrchestratorMenus">
            <summary>
            Keep in sync with PkgCmdId.ctc
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.VSHost.CommandIds.GenerateAllCode">
            <summary>
            Command Ids for Corona
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TextTemplating.VSHost.LocalizedBooleanTypeConverter">
            <summary>
            Type converter to allow a string in the property grid to have localized values for True/False.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.LocalizedBooleanTypeConverter.StringToBool(System.String)">
            <summary>
            Return a bool if the string contains a valid boolean value else null;
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TextTemplating.VSHost.OrchestratorOptionsPage">
            <summary>
            Summary description for OrchestratorOptionsPage.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TextTemplating.VSHost.OrchestratorOptionsAutomation">
            <summary>
            OrchestratorOptionsAutomation Object to store settings for code generation
            </summary>
            <remarks>
            Provides storage for options page and also for DTE.Properties
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.OrchestratorOptionsAutomation.LoadSettingsFromStorage">
            <summary>
            Load settings from registry
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.OrchestratorOptionsAutomation.SaveSettingsToStorage">
            <summary>
            Save settings to registry
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.OrchestratorOptionsAutomation.ResetSettings">
            <summary>
            Reset Settings
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.OrchestratorOptionsAutomation.ShowSecurityWarningDialog(System.IServiceProvider)">
            <summary>
            Show the security warning dialog if the user has the registry value set to enable it.
            </summary>
            <param name="serviceProvider">Global service provider</param>
            <returns>Whether the process should be cancelled due to the user's security choice.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.OrchestratorOptionsAutomation.ServiceProvider">
            <summary>
            The ServiceProvider.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.OrchestratorOptionsAutomation.ShowWarningDialog">
            <summary>
            True if you want to show a security warning dialog each time T4 is run.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TextTemplating.VSHost.OrchestratorPackage">
            <summary>
            Entry point for the CodeGenerators package. An instance of this class is created by the VS
            shell whenever a project with our service include tag is loaded or when the options page is opened.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.VSHost.OrchestratorPackage.textTemplatingService">
            <summary>
            The templated file processor service implementation
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.VSHost.OrchestratorPackage.singletonInstance">
            <summary>
            Pointer to the singleton instance of this package, used for unit testing.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.VSHost.OrchestratorPackage.optionsAutomation">
            <summary>
            The automation objet maintaining our settings
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.VSHost.OrchestratorPackage.solutionEvents">
            <summary>
            The DTE object that fires solution events
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.VSHost.OrchestratorPackage.showSecurityDialogDuringBatchRun">
            <summary>
            Whether or not the security dialog needs to be shown (we set it to false
            if we've shown it once already during batch processing)
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.OrchestratorPackage.#ctor">
            <summary>
            Class constructor.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.OrchestratorPackage.Initialize">
            <summary>
            This is called by the package base class when our package is loaded. When devenv is run
            with the "/setup" command line switch it is not able to do a lot of the normal things,
            such as creating output windows and tool windows. Under normal circumstances our package
            isn't loaded when run with this switch. However, our package will be loaded when items 
            are added to the toolbox, even when run with "/setup". To be safe we'll check for "setup"
            and we don't do anything interesting in MgdSetSite if we find it. 
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.OrchestratorPackage.Dispose(System.Boolean)">
            <summary>
            This is called by the package base class when our package gets unloaded.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.OrchestratorPackage.FindTextTemplatingServiceErrorStatus">
            <summary>
            Find whether the last invocation of the service raised an error.
            </summary>
            <returns>true if an error was raised on last service invocation</returns>
            <remarks>This call resets the error flag</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.OrchestratorPackage.BeginErrorSession">
            <summary>
            Reset the system that causes only unique errors to be logged.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.OrchestratorPackage.EndErrorSession">
            <summary>
            Finish a session using the system that causes only unique errors to be logged.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.OrchestratorPackage.ShowSecurityDialogDuringBatchRun">
            <summary>
            Whether or not the security dialog needs to be shown (we set it to false 
            if we've shown it once alredy during batch processing).
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TextTemplating.VSHost.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.Resources.AppDomainFailed">
            <summary>
              Looks up a localized string similar to Failed to create AppDomain for text templating..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.Resources.AssemblyReferenceFailed">
            <summary>
              Looks up a localized string similar to Failed to resolve assembly reference. {0}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.Resources.BooleanFalse">
            <summary>
              Looks up a localized string similar to False.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.Resources.BooleanTrue">
            <summary>
              Looks up a localized string similar to True.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.Resources.DPAssemblyLoadFail">
             <summary>
               Looks up a localized string similar to Failed to load Assembly &apos;{0}&apos; for registered directive processor &apos;{1}&apos;
            {2}.
             </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.Resources.DPTypeLoadFail">
             <summary>
               Looks up a localized string similar to Failed to find type &apos;{0}&apos; in Assembly &apos;{1}&apos; for registered directive processor &apos;{2}&apos;
            {3}.
             </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.Resources.ExtensionMalformed">
            <summary>
              Looks up a localized string similar to Extension must begin with a &apos;.&apos; character..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.Resources.FallbackCodeGenOutput">
            <summary>
              Looks up a localized string similar to --- Failed to generate code ---.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.Resources.IncludeDirectiveFailed">
            <summary>
              Looks up a localized string similar to Failed to resolve include text for file:{0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.Resources.IndexOutOfRange">
            <summary>
              Looks up a localized string similar to Index must be greater than or equal to zero..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.Resources.ModelingDomainModelFail">
            <summary>
              Looks up a localized string similar to Unable to load domain model: {0}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.Resources.ModelingModelFail">
            <summary>
              Looks up a localized string similar to Unable to load models..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.Resources.ModelingValidateFail">
            <summary>
              Looks up a localized string similar to Unable to validate models..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.Resources.MultipleAssemblyMatch">
            <summary>
              Looks up a localized string similar to Multiple assembly references match &apos;{0}&apos; under Extensions directories.  Using &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.Resources.NoFullTrust">
            <summary>
              Looks up a localized string similar to The assembly &apos;{0}&apos; for directive processor &apos;{1}&apos; was not granted the FullTrust permission set. Only trusted assemblies are allowed to provide directive processors. This directive processor will not be loaded. .
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.Resources.ObjectNotSited">
            <summary>
              Looks up a localized string similar to Object is not sited..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.Resources.OptionsPageUIFail">
            <summary>
              Looks up a localized string similar to Options page UI failure..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.Resources.OrchestrationLineFailed">
            <summary>
              Looks up a localized string similar to failed..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.Resources.OrchestrationLineSucceeded">
            <summary>
              Looks up a localized string similar to succeeded..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.Resources.OrchestrationSeparator">
            <summary>
              Looks up a localized string similar to -------------------------------------.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.Resources.OrchestrationSkippingNoPath">
            <summary>
              Looks up a localized string similar to Skipping transformation of {0} because full path is not available..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.Resources.OrchestrationSkippingReadOnly">
            <summary>
              Looks up a localized string similar to Skipping transformation of {0} because it is read-only..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.Resources.OrchestratorEndCodeGen">
            <summary>
              Looks up a localized string similar to Text templating transformation complete..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.Resources.OrchestratorRunLine">
            <summary>
              Looks up a localized string similar to Transforming template {1} with {0} ... .
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.Resources.OrchestratorStartCodeGen">
            <summary>
              Looks up a localized string similar to Transforming templates for all project items..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.Resources.OutputPaneName">
            <summary>
              Looks up a localized string similar to Transform text templates .
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.Resources.PathNotTrusted">
            <summary>
              Looks up a localized string similar to The path &apos;{0}&apos; must be either local to this computer or part of your trusted zone..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.Resources.ProvideAutomationPropertiesLogRegistered">
            <summary>
              Looks up a localized string similar to AutomationProperties: &apos;{0}.{1}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.Resources.ProvideAutomationPropertiesLogUnregistered">
            <summary>
              Looks up a localized string similar to AutomationProperties: &apos;{0}.{1}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.Resources.ProvideCodeGeneratorAttributeRegisterLog">
            <summary>
              Looks up a localized string similar to Code generator:  {0}, {1}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.Resources.ProvideCodeGeneratorAttributeUnregisterLog">
            <summary>
              Looks up a localized string similar to Code generator:  {0}, {1}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.Resources.ProvideCodeGeneratorExtensionAttributeRegisterLog">
            <summary>
              Looks up a localized string similar to Code generator extension:  {0}, {1}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.Resources.ProvideCodeGeneratorExtensionAttributeUnregisterLog">
            <summary>
              Looks up a localized string similar to Code generator extension:  {0}, {1}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.Resources.ProvideDirectiveProcessorLogRegistered">
            <summary>
              Looks up a localized string similar to Directive processor: {0}, {1}, {2}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.Resources.ProvideDirectiveProcessorLogUnregistered">
            <summary>
              Looks up a localized string similar to Directive processor: {0}, {1}, {2}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.Resources.ProvideIncludeFolderLogRegistered">
            <summary>
              Looks up a localized string similar to Include folder: {0}, {1}, {2}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.Resources.ProvideIncludeFolderLogUnregistered">
            <summary>
              Looks up a localized string similar to Include folder: {0}, {1}, {2}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.Resources.ProvideSolutionPersistenceLogRegistered">
            <summary>
              Looks up a localized string similar to SolutionPersistence: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.Resources.ProvideSolutionPersistenceLogUnregistered">
            <summary>
              Looks up a localized string similar to SolutionPersistence: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.Resources.ResolveParameterNotImplemented">
            <summary>
              Looks up a localized string similar to ResolveParameterValue is not implemented by this text templating host..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.Resources.SecurityDialogOptionCategory">
            <summary>
              Looks up a localized string similar to Security.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.Resources.SecurityDialogOptionDescription">
            <summary>
              Looks up a localized string similar to Display a dialog prompting users to ensure that text templates are from a trusted source when a text transformation operation is initiated..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.Resources.SecurityDialogOptionDisplayName">
            <summary>
              Looks up a localized string similar to Show Security Message.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.Resources.SiteInterfaceNotSupported">
            <summary>
              Looks up a localized string similar to Site does not support requested interface..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.Resources.TextTemplatingStatusBarLabel">
            <summary>
              Looks up a localized string similar to Transforming text templates.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.Resources.TextTemplatingUnavailable">
            <summary>
              Looks up a localized string similar to TextTemplating service unavailable.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.Resources.TransformationCancelled">
            <summary>
              Looks up a localized string similar to The transformation was cancelled..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.Resources.TypeResolveFailed">
            <summary>
              Looks up a localized string similar to Failed to resolve type for directive processor {0}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.Resources.UnableToGenerateReferences">
            <summary>
              Looks up a localized string similar to Unable to add DLL to project references: {0}. Please add it manually..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.Resources.UnableToLocateFile">
            <summary>
              Looks up a localized string similar to Unable to locate file.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TextTemplating.VSHost.ProvideAutomationPropertiesAttribute">
            <summary>
            Attribute class to provide the registry entries for contributing to DTE.Properties
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.ProvideAutomationPropertiesAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Register for inclusion in DTE.Properties
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.TextTemplating.VSHost.ProvideCodeGeneratorAttribute">
            <summary>
            Attribute class to provide registration of a code generator
            </summary>
            <remarks>
            Should be applied to the package class itself, not the generator.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.VSHost.ProvideCodeGeneratorAttribute.CSharpProjectGuid">
            <summary>
            Guid of the C# Project System package
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.VSHost.ProvideCodeGeneratorAttribute.VisualBasicProjectGuid">
            <summary>
            Guid of the Visual Basic Project System package
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.VSHost.ProvideCodeGeneratorAttribute.AspNetProjectGuid">
            <summary>
            Guid of the ASP.Net Project System package
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.ProvideCodeGeneratorAttribute.#ctor(System.Type,System.String,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
            <param name="description"></param>
            <param name="generatesDesignTimeSource"></param>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.ProvideCodeGeneratorAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Register this generator
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.ProvideCodeGeneratorAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Delete our specified keys
            </summary>
            <param name="context">The context that this registration attribute is being used in</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.ProvideCodeGeneratorAttribute.Type">
            <summary>
            The type implementing the Code Generator
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.ProvideCodeGeneratorAttribute.Description">
            <summary>
            A human readable description of this generator
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.ProvideCodeGeneratorAttribute.Name">
            <summary>
            The name of this generator
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.ProvideCodeGeneratorAttribute.GeneratesDesignTimeSource">
            <summary>
            Whether to flag this code generator as providing design-time source code
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.ProvideCodeGeneratorAttribute.RegisterCodeBase">
            <summary>
            Whether or not to register the generator using a codebase
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.ProvideCodeGeneratorAttribute.ProjectSystem">
            <summary>
            The project system that this code generator is registered with
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TextTemplating.VSHost.ProvideCodeGeneratorExtensionAttribute">
            <summary>
            Attribute class to provide registration of a code generator against a specific file extension
            </summary>
            <remarks>
            Should be applied to the package class, not the generator.
            This attribute works in addition to ProvideCodeGenerator to set up two things
            a) Default application of the specified generator to files with the extension provided
            b) Correct working with the ASP.Net project system which requires file extensions to be registered
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.VSHost.ProvideCodeGeneratorExtensionAttribute.AspNetProjectSystemGuid">
            <summary>
            Actual project GUID (as opposed to package Guid) for ASP.Net
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.VSHost.ProvideCodeGeneratorExtensionAttribute.CSharpProjectSystemGuid">
            <summary>
            Actual project GUID (as opposed to package Guid) for CSharp
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.VSHost.ProvideCodeGeneratorExtensionAttribute.VisualBasicProjectSystemGuid">
            <summary>
            Actual project GUID (as opposed to package Guid) for Visual Basic
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.ProvideCodeGeneratorExtensionAttribute.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
            <param name="description"></param>
            <param name="generatesDesignTimeSource"></param>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.ProvideCodeGeneratorExtensionAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Register this generator
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.ProvideCodeGeneratorExtensionAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Delete our specified keys
            </summary>
            <param name="context">The context that this registration attribute is being used in</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.ProvideCodeGeneratorExtensionAttribute.Name">
            <summary>
            The name of the generator to add an extension for
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.ProvideCodeGeneratorExtensionAttribute.Extension">
            <summary>
            The extension to bind the named generator to
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.ProvideCodeGeneratorExtensionAttribute.ProjectSystem">
            <summary>
            The project system that this code generator is registered with
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.ProvideCodeGeneratorExtensionAttribute.ProjectSystemPackage">
            <summary>
            The package implementing the project system that this code generator is registered with
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TextTemplating.VSHost.ProvideDirectiveProcessorAttribute">
            <summary>
            Attribute class to provide the registry entries for a T4.VSHost Directive Processor
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.VSHost.ProvideDirectiveProcessorAttribute.TextTemplatingKeyName">
            <summary>
            Name of the root registry key for Text templating
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.VSHost.ProvideDirectiveProcessorAttribute.DirectiveProcessorsKeyName">
            <summary>
            Name of the specific registry key for Directive processors
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.ProvideDirectiveProcessorAttribute.#ctor(System.Type,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <param name="description"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.ProvideDirectiveProcessorAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Register a Text Templating Directive Processor
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.ProvideDirectiveProcessorAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Unregister a Text Templating Directive Processor 
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.ProvideDirectiveProcessorAttribute.Name">
            <summary>
            The Name of the directive processor
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.ProvideDirectiveProcessorAttribute.Description">
            <summary>
            The human description of the directive processor
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.ProvideDirectiveProcessorAttribute.Type">
            <summary>
            The type implementing the directive processor
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TextTemplating.VSHost.ProvideIncludeFolderAttribute">
            <summary>
            Attribute class to provide the registry entries for a T4.VSHost include folder.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.VSHost.ProvideIncludeFolderAttribute.TextTemplatingKeyName">
            <summary>
            Name of the root registry key for Text templating
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.VSHost.ProvideIncludeFolderAttribute.IncludeFoldersKeyName">
            <summary>
            Name of the specific registry key for Directive processors
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.ProvideIncludeFolderAttribute.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <param name="description"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.ProvideIncludeFolderAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Register a Text Templating Include Folder
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.ProvideIncludeFolderAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Unregister a Text Templating Include Folder 
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.ProvideIncludeFolderAttribute.Extension">
            <summary>
            The extension of template files to apply this inclusion folder with.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.ProvideIncludeFolderAttribute.Index">
            <summary>
            The zero-based index of the folder 
            </summary>
            <remarks>
            Multiple inclusion folders for a given extension are indexed 0...n
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.ProvideIncludeFolderAttribute.Folder">
            <summary>
            The path of the inclusion folder being registered.  This path is relative to the component path
            of the assembly being registered.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TextTemplating.VSHost.ProvideSolutionPersistenceAttribute">
            <summary>
            Attribute class to provide the registry entries for solution persistence for a package
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.ProvideSolutionPersistenceAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Extract specified resources from our target DLL and write them into a zip file as a vstemplate archive
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Shell.DialogBase">
            <summary>
            Base class for dialogs that will be hosted in the VS shell.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Shell.DialogBase.OnLoad(System.EventArgs)">
             <summary>
            
             </summary>
             <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Shell.DialogBase.#ctor(System.IServiceProvider)">
            <summary>
            Constructor take a service provider. The dialog owner will eb the main VS window.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Shell.DialogBase.OnUserPreferenceChanged(System.Object,Microsoft.Win32.UserPreferenceChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Shell.DialogBase.OnHelpRequested(System.Windows.Forms.HelpEventArgs)">
            <summary>
            Override to show help via the Visual Studio help system
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Shell.DialogBase.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Process window messages for the dialog.  Translates clicks on the "?" button to F1 help requests.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Shell.DialogBase.ProcessDialogKey(System.Windows.Forms.Keys)">
            <summary>
            Overridden to make sure that only critical exceptions ripple up to the base class.
            Any exceptions which reach there will result invoke the WinForms unhandled exeption dlg. 
            In Whidbey that menas an IDE crash.
            </summary>
            <param name="keyData"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Shell.DialogBase.ProcessDialogChar(System.Char)">
            <summary>
            Overridden to make sure that only critical exceptions ripple up to the base class.
            Any exceptions which reach there will result invoke the WinForms unhandled exeption dlg. 
            In Whidbey that menas an IDE crash.
            </summary>
            <param name="charCode"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Shell.DialogBase.Dispose(System.Boolean)">
            <summary>
            Cleans up resources being used.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Shell.DialogBase.ServiceProvider">
            <summary>
            Service provider used to get shell services.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Shell.DialogBase.DisableSafeWindowTargetHardeningCheck">
            <summary>
            Returns whether to disable SafeWindowTarget hardening check in the debug build. By default, DialogBase derived forms
            will check each and every child control to make sure it's hardened
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Shell.DialogBase.CreateParams">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Shell.DialogBase.EnableModeless">
            <summary>
            Gets modless property on the form. Form modal by default.
            Provided override functionality instead of allowing to set the property as this is used in CreateParams, which is 
            called before constructor as well. 
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Shell.DialogBase.FormBorderStyle">
            <summary>
            Hide base implementation here so we can provide appropriate handling of FormBorderStyle.Sizable.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Shell.DialogBase.F1Keyword">
            <summary>
            Override to specify the F1 keyword for this dialog.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Shell.DialogBase.DialogFont">
            <summary>
            The font that Dialogs should use according to IUIService, based on system and application settings.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.SecurityWarningDialog.#ctor(System.IServiceProvider)">
            <summary>
            Constructor
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.SecurityWarningDialog.ShowSecurityWarningDialog(System.IServiceProvider,System.Boolean@,System.Boolean@)">
            <summary>
            Static helper method to show the dialog and return output.
            </summary>
            <param name="provider">service provider</param>
            <param name="cancel">If the user hit cancel on the dialog</param>
            <param name="showAgain">If the user wants the dialog to show again</param>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.VSHost.SecurityWarningDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.SecurityWarningDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.SecurityWarningDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.SecurityWarningDialog.F1Keyword">
            <summary>
            F1 keyword
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TextTemplating.VSHost.BaseCodeGenerator">
            <summary>
            A managed wrapper for VS's concept of an IVsSingleFileGenerator which is
            a custom tool invoked during the build which can take any file as an input 
            and provide a compilable code file as output.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.BaseCodeGenerator.GetDefaultExtension">
            <summary>
            gets the default extension for this generator
            </summary>
            <returns>string with the default extension for this generator</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.BaseCodeGenerator.GenerateCode(System.String,System.String)">
            <summary>
            the method that does the actual work of generating code given the input
            file.
            </summary>
            <param name="inputFileName">input file name</param>
            <param name="inputFileContent">file contents as a string</param>
            <returns>the generated code file as a byte-array</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.BaseCodeGenerator.GeneratorErrorCallback(System.Boolean,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            method that will communicate an error via the shell callback mechanism.
            </summary>
            <param name="warning">true if this is a warning</param>
            <param name="level">level or severity</param>
            <param name="message">text displayed to the user</param>
            <param name="line">line number of error/warning</param>
            <param name="column">column number of error/warning</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.VisualStudio.TextTemplating.VSHost.BaseCodeGenerator.Generate(System.String,System.String,System.String,System.IntPtr@,System.Int32@,Microsoft.VisualStudio.Shell.Interop.IVsGeneratorProgress)" -->
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.BaseCodeGenerator.FileNamespace">
            <summary>
            namespace for the file.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.BaseCodeGenerator.InputFilePath">
            <summary>
            file-path for the input file.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.BaseCodeGenerator.CodeGeneratorProgress">
            <summary>
            interface to the VS shell object we use to tell our
            progress while we are generating.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TextTemplating.VSHost.BaseCodeGeneratorWithSite">
            <summary>
            This class exists to be cocreated a in a preprocessor build step.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.BaseCodeGeneratorWithSite.GetService(System.Guid)">
            <summary>
            method to get a service by its GUID
            </summary>
            <param name="service">GUID of service to retrieve</param>
            <returns>an object that implements the requested service</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.BaseCodeGeneratorWithSite.GetService(System.Type)">
            <summary>
            Method to get a service by its Type
            </summary>
            <param name="service">Type of service to retrieve</param>
            <returns>an object that implements the requested service</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.BaseCodeGeneratorWithSite.SetSite(System.Object)">
            <summary>
            SetSite method of IOleObjectWithSite
            </summary>
            <param name="pUnkSite">site for this object to use</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.BaseCodeGeneratorWithSite.GetSite(System.Guid@,System.IntPtr@)">
            <summary>
            GetSite method of IOleObjectWithSite
            </summary>
            <param name="riid">interface to get</param>
            <param name="ppvSite">array in which to stuff return value</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.BaseCodeGeneratorWithSite.CreateExceptionMessage(System.Exception)">
            <summary>
            method to create an exception message given an exception
            </summary>
            <param name="e">exception caught</param>
            <returns>message to display to the user</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.BaseCodeGeneratorWithSite.SetWaitCursor">
            <summary>
            Set the wait cursor until the end of this generation
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.BaseCodeGeneratorWithSite.SiteServiceProvider">
            <summary>
            Get a wrapper on the containing project system's Service provider
            <remarks>
            This is a limited service provider that can only reliably provide
            VxDTE::SID_SVSProjectItem 
            SID_SVSWebReferenceDynamicProperties 
            IID_IVsHierarchy 
            SID_SVsApplicationSettings
            
            To get the global provider, call GetSite on IVSHierarchy or use the GlobalServiceProvider property
            </remarks>
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.BaseCodeGeneratorWithSite.GlobalServiceProvider">
            <summary>
            Provides a wrapper on the global service provider for Visual Studio
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.BaseCodeGeneratorWithSite.Dte">
            <summary>
            Get the DTE object
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.BaseCodeGeneratorWithSite.ErrorList">
            <summary>
            Get the Vs ErrorList object
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TextTemplating.VSHost.BaseTemplatedCodeGenerator">
            <summary>
            Text Templating Code Generator
            </summary>
            <remarks>
            Parses an file template to produce its output.
            Only a single generator is needed for any style of template as the custom code is handled with directive providers.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.VSHost.BaseTemplatedCodeGenerator.outputEncoding">
            <summary>
            Encoding to use to write out output file
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.VSHost.BaseTemplatedCodeGenerator.encodingSetFromOutputDirective">
            <summary>
            Whether the encoding has already been set from an output directive
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.BaseTemplatedCodeGenerator.GetDefaultExtension">
            <summary>
            Get the extension of the file that should be created
            </summary>
            <remarks>
            This is called after generate and this behaviour is relied upon as templates specify the extension in their input file
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.BaseTemplatedCodeGenerator.GenerateCode(System.String,System.String)">
            <summary>
            Generate the final code from the input template and its parameters
            </summary>
            <param name="inputFileName"></param>
            <param name="inputFileContent"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.BaseTemplatedCodeGenerator.ProcessTemplate(System.String,System.String,Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplating,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
            <summary>
            Do the actual template processig that forms the core of this generator
            </summary>
            <param name="inputFileName"></param>
            <param name="inputFileContent"></param>
            <param name="processor"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.BaseTemplatedCodeGenerator.MarkProjectForTextTemplating(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
            <summary>
            Mark the project that the given hierarchy belongs to as needing the T4 service.
            </summary>
            <param name="hierarchy"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.BaseTemplatedCodeGenerator.ShowWarningDialog">
            <summary>
            Show the warning dialog to the user.
            </summary>
            <returns>Whether to cancel the operation.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.BaseTemplatedCodeGenerator.TextTemplating">
            <summary>
            Get the TextTemplating service from Visual Studio
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TextTemplating.VSHost.TemplatedPreprocessor">
            <summary>
            Text Templating Preprocessor
            </summary>
            <remarks>
            Parses a file template to produce the code class needed to generate the output of the template.
            Only a single generator is needed for any style of template as the custom code is handled with directive providers.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.TemplatedPreprocessor.ProcessTemplate(System.String,System.String,Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplating,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
            <summary>
            Do the actual template processing that forms the core of this generator
            </summary>
            <param name="inputFileName"></param>
            <param name="inputFileContent"></param>
            <param name="processor"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.TemplatedPreprocessor.MakeClassName(System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
            <summary>
            Make a valid C# or VB identifier for the filename.
            </summary>
            <param name="inputFileName"></param>
            <param name="hierarchy"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.TemplatedPreprocessor.CreateValidIdentifier(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.String)">
            <summary>
            Make a valid identifier 
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.TemplatedPreprocessor.ToDteProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
            <summary>
            Convert a hierarchy into a DTE project.
            </summary>
            <param name="hierarchy"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TextTemplating.VSHost.TemplatedCodeGenerator">
            <summary>
            Text Templating Code Generator
            </summary>
            <remarks>
            Parses an file template to produce its output.
            Only a single generator is needed for any style of template as the custom code is handled with directive providers.
            </remarks>
        </member>
        <member name="T:Microsoft.Internal.Performance.CodeMarkerStartEnd">
            <summary>
            Use CodeMarkerStartEnd in a using clause when you need to bracket an
            operation with a start/end CodeMarker event pair.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TextTemplating.GlobalAssemblyCacheHelper">
            <summary>
            Provides helper methods for dealing with the GAC.
            In particular, looking up assembly paths given a strong name.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.GlobalAssemblyCacheHelper.GetLocationImpl(Microsoft.VisualStudio.TextTemplating.IAssemblyCache,System.String,System.String)">
            <summary>
            Given a strong name, find its path in the GAC.
            </summary>
            <param name="strongName">The strong name.</param>
            <param name="targetProcessorArchitecture">x86 or MSIL.</param>
            <returns>The path to the assembly. Empty if none exists.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.GlobalAssemblyCacheHelper.GetLocation(System.String)">
            <summary>
            Given a strong name, find its path in the GAC.
            </summary>
            <param name="strongName">The strong name.</param>
            <returns>The path to the assembly. Empty if none exists.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.CriticalException.IsCriticalException(System.Exception)">
            <summary>
            	Gets whether exception is a critical one and can't be ignored with corrupting
            	AppDomain state.
            </summary>
            <param name="ex">Exception to test.</param>
            <returns>True if exception should not be swallowed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.CriticalException.ThrowOrShow(System.IServiceProvider,System.Exception)">
            <summary>
            	Shows non-critical exceptions to the user and returns false or
            	returns true for critical exceptions.
            </summary>
            <param name="serviceProvider">Service provider to use to display error message.</param>
            <param name="ex">Exception to handle.</param>
            <returns>True if exception is critical and can't be ignored.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.CriticalException.DisableExceptionFilter">
            <summary>
            	Gets whether exception filtering is disabled base on registry settings.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.SafeWindowTarget">
            <summary>
            Exception hardening work.  This class can be used to filter messages sent to a control,
            and catch/display all non-critical exceptions.  Otherwise, Watson will
            be invoked and will take down the process, potentially resulting in data loss.  See
            document referenced in bug 427820 for more details.	 Use this class to wrap an existing 
            IWindowTarget as follows (c is a Control):
            
            c.WindowTarget = new SafeWindowTarget(c.WindowTarget);
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.SafeWindowTarget.System#Windows#Forms#IWindowTarget#OnMessage(System.Windows.Forms.Message@)">
            <devdoc>
            The main wndproc for the control.  Wrapped to display non-critical exceptions to the user.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.SafeWindowTarget.ReplaceWindowTargetRecursive(System.IServiceProvider,System.Collections.ICollection)">
            <summary>
            Replaces the WindowTarget for all child controls of the specified collection.
            In Debug builds, this will assert that any child controls added after this call must have their WindowTarget replaced as well.
            </summary>
            <param name="serviceProvider">The ServiceProvider.</param>
            <param name="controls">The collection of controls to recurse through and replace their target.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.SafeWindowTarget.ReplaceWindowTargetRecursive(System.IServiceProvider,System.Collections.ICollection,System.Boolean)">
            <summary>
            Replaces the WindowTarget for all child controls of the specified collection.
            </summary>
            <param name="serviceProvider">The ServiceProvider.</param>
            <param name="controls">The collection of controls to recurse through and replace their target.</param>
            <param name="checkControlAdded">If true, in Debug builds, this will assert that any controls 
            added after this call must have their WindowTarget replaced as well.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TextTemplating.VSHost.TextTemplatingService">
            <summary>
            Main implementation class for the templated file processor service
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.VSHost.TextTemplatingService.NamespaceHintName">
            <summary>
            Name of the slot in CallContext that the T4 Service will respect as a provided parameter.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.VSHost.TextTemplatingService.IncludeContentType">
            <summary>
            ExtensionManager content type for T4 include directories
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.VSHost.TextTemplatingService.vsMacroRegExPattern">
            <summary>
            RegEx pattern to match VS Macro variables e.g. $(SolutionDir), $(ProjectDir).
            The value inside the brackets will be returned as the named group "macroName".
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.VSHost.TextTemplatingService.package">
            <summary>
            The package this service is running in.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.VSHost.TextTemplatingService.dte">
            <summary>
            Cache of the package's DTE object
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.VSHost.TextTemplatingService.engine">
            <summary>
            The engine used to do the templating work
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.VSHost.TextTemplatingService.callback">
            <summary>
            Callback to the current client using the service
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.VSHost.TextTemplatingService.inputFile">
            <summary>
            The path to the file currently being processed
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.VSHost.TextTemplatingService.transformationSession">
            <summary>
            The text transformation session that is currently active.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.VSHost.TextTemplatingService.transformationSessionImplicitlyCreated">
            <summary>
            Whether or not the TransformationSession was implicitly created
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.VSHost.TextTemplatingService.transformDomain">
            <summary>
            AppDomain to generate code in temporary assemblies in.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.VSHost.TextTemplatingService.transformDomainUseCount">
            <summary>
            Count of how many times the generated domain has been used.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.VSHost.TextTemplatingService.lastInvocationRaisedErrors">
            <summary>
            Did the last usage raise any errors
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.VSHost.TextTemplatingService.currentErrors">
            <summary>
            Errors logged during the current request series.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.VSHost.TextTemplatingService.serviceProvider">
            <summary>
            Multi-implementation service provider cache
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.VSHost.TextTemplatingService.hierarchy">
            <summary>
            Hierarchy of the template file to process
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.VSHost.TextTemplatingService.errorProvider">
            <summary>
            Provider for the ErrorList items that this service pushes.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.VSHost.TextTemplatingService.errorSessionDepth">
            <summary>
            Count to mark an error session in progress (>0) to allow nested error sessions.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.TextTemplatingService.#ctor(Microsoft.VisualStudio.TextTemplating.VSHost.OrchestratorPackage)">
            <summary>
            VS Service hosting T4
            </summary>
            <param name="serviceProvider"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.TextTemplatingService.task_Navigate(System.Object,System.EventArgs)">
            <summary>
            Callback for error task navigation
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.TextTemplatingService.UnloadGenerationAppDomain">
            <summary>
            Helper method to unload the generation appdomain. Called by the package when 
            the solution closes
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.VSHost.TextTemplatingService.vsMacroRegEx">
            <summary>
            Compiled RegEx expression to match VS Macros.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.TextTemplatingService.ExpandAllVariables(System.String)">
            <summary>
            Returns the input string with any environment and VS macro variables expanded.
            Note: MSBuild variables are not supported.
            </summary>
            <remarks>Unrecognised variables are *not* removed as they could be filenames (both
            %test% and $(test) are valid file names.
            Macro variables are resolved after enviroment variables, so enviroment variables that contain macro variables will have those macro variables expanded.
            Variable are not expanded recursively by this method; recursive behavior is defined by the underlying APIs that the method calls.
            In the case of environment variables, this is Environment.ExpandEnvironmentVariables(...). This does not expand recursively.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.TextTemplatingService.ExpandEnvironmentVariables(System.String)">
            <summary>
            Helper to consistently expand environment variables in a path.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.TextTemplatingService.ExpandVsMacroVariables(System.String)">
            <summary>
            Returns the input string with any VS build macro variables replaced by the corresponding string value.
            </summary>
            <param name="input">The string to be processed.</param>
            <returns>The input string with any VS build macro variables replaced by the corresponding string value.</returns>
            <remarks>If buildMacroInfo is null, the input string will be returned unchanged. If a build macro cannot be resolved, it will not
            be replaced.
            Note that $(test).txt is a valid file name, so unrecognised macros will not be removed as they could be file names.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.TextTemplatingService.LogErrors(System.CodeDom.Compiler.CompilerErrorCollection)">
            <summary>
            Log a user-visible error
            </summary>
            <param name="errors"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.TextTemplatingService.LoadIncludeText(System.String,System.String@,System.String@)">
            <summary>
            Acquire the text corresponding to a request
            to include a partial template file
            </summary>
            <param name="requestFileName">The file to include</param>
            <param name="content">The content of the included file</param>
            <param name="location">The location of the included file</param>
            <remarks>
            Location can be null or empty for non filesystem based hosts
            </remarks>
            <returns>Whether the resolve was successful.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.TextTemplatingService.GetExtensionManagerIncludeFolders(System.Collections.Generic.List{System.String})">
            <summary>
            Get set of include folders to search from ExtensionManager
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.TextTemplatingService.GetRegistryIncludeFolders(System.Collections.Generic.List{System.String})">
            <summary>
            Get the set of folders from the registry for the extension of the current input file.
            </summary>
            <param name="includeFolders"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.TextTemplatingService.CheckSecurityZone(System.String)">
            <summary>
            Is th esecurity zone of the given path acceptable.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.TextTemplatingService.LoadIncludeFileContent(System.String)">
            <summary>
            Helper to attempt to load and return the content of a file.
            </summary>
            <param name="absolutepath"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.TextTemplatingService.ProvideTemplatingAppDomain(System.String)">
            <summary>
            Provide app domain to do text templating in
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.TextTemplatingService.ResolveAssemblyReference(System.String)">
            <summary>
            Resolve a reference to an assembly
            </summary>
            <param name="assemblyReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.TextTemplatingService.ResolveAssemblyReferenceViaExtensionManager(System.String,Microsoft.VisualStudio.ExtensionManager.IVsExtensionManager)">
            <summary>
            Try to resolve the given reference against the install locations of all enabled extensions.
            </summary>
            <returns>Resolved reference or null</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.TextTemplatingService.GetVSInstallDir(Microsoft.Win32.RegistryKey)">
            <summary>
            Simple helper to get the VS install directory.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.TextTemplatingService.ResolveDirectiveProcessor(System.String)">
            <summary>
            Resolve the named directive processor to a type.
            </summary>
            <param name="processorName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.TextTemplatingService.ResolvePath(System.String)">
            <summary>
            Resolve relative paths to be alongside the template that is being generated from
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.TextTemplatingService.ResolveParameterValue(System.String,System.String,System.String)">
            <summary>
            Resolve the value of a parameter that is not specified in the template text.
            </summary>
            <param name="directiveId">Id of the directive call to which the parameter belongs.</param>
            <param name="processorName">Name of the directive processor to which the directive belongs.</param>
            <param name="parameterName">Name of the parameter to be resolved.</param>
            <returns>The resolved value, or an empty string if the parameter could not be resolved.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.TextTemplatingService.ResolveProjectParameter(System.String)">
            <summary>
            Returns a project parameter
            </summary>
            <param name="parameterName">Directive processor parameter name to be resolved</param>
            <returns>The resolved paramter value, or an empty string if the value could not be resolved</returns>
            <remarks>The parameterName is expected to be in the form "projectName:parameterName".
            The project name is either just the name of the project, or "parentproject1/parentproject2/.../project".
            
            Currently the only supported parameter is "OutputPath".
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.TextTemplatingService.SetFileExtension(System.String)">
            <summary>
            Specify the file extension to output
            </summary>
            <param name="extension"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.TextTemplatingService.SetOutputEncoding(System.Text.Encoding,System.Boolean)">
            <summary>
            Specify the encoding to use for the output file.
            </summary>
            <param name="encoding"></param>
            <param name="fromOutputDirective"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.TextTemplatingService.GetHostOption(System.String)">
            <summary>
            Provide control options for text templating
            </summary>
            <param name="optionName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.TextTemplatingService.ProcessTemplate(System.String,System.String,Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingCallback,System.Object)">
            <summary>
            Process the contents of a templated file running inline code to produce completed output
            </summary>
            <param name="templateInputFile"></param>
            <param name="templateContent"></param>
            <param name="callback"></param>
            <param name="hierarchy"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.TextTemplatingService.PreprocessTemplate(System.String,System.String,Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingCallback,System.String,System.String,System.String[]@)">
            <summary>
            Process the contents of a templated file running inline code to produce a class that represents the template
            </summary>
            <param name="inputFile"></param>
            <param name="content"></param>
            <param name="callback"></param>
            <param name="hierarchy">The hierarchy of the template</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.TextTemplatingService.BeginErrorSession">
            <summary>
            Reset the system that causes only unique errors to be logged.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.VSHost.TextTemplatingService.EndErrorSession">
            <summary>
            Finish a session using the system that causes only unique errors to be logged.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.TextTemplatingService.LastInvocationRaisedErrors">
            <summary>
            Did the last usage of the service raise errors.
            </summary>
            <remarks>
            This property is by way of an error status, as the custom tool method of running the service currently used robs
            us of any way to know whether we succeeded.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.TextTemplatingService.Dte">
            <summary>
            The DTE
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.TextTemplatingService.StandardAssemblyReferences">
            <summary>
            Provide standard assembly references for this host
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.TextTemplatingService.StandardImports">
            <summary>
            Provide standard import statements for this host
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.VSHost.TextTemplatingService.TemplateFile">
            <summary>
            Provide the name of the template being processed.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\VisualStudio\VS10RTM\VisualStudioIntegration\Common\Assemblies\v4.0\Microsoft.VisualStudio.TextTemplating.Interfaces.10.0.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.TextTemplating.Interfaces.10.0</name>
    </assembly>
    <members>
        <member name="T:Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingCallback">
            <summary>
            Callback interface to be implemented by clients of the STextTemplating service that wish to process errors and information
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingCallback.ErrorCallback(System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            Process an error or warning
            </summary>
            <param name="warning">Whether this message is a warning or an error</param>
            <param name="message">The text of the message</param>
            <param name="line">The line in the file the error occurred at</param>
            <param name="column">The column in the file the error occurred at</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingCallback.SetFileExtension(System.String)">
            <summary>
            Inform the client the extension specified by the template
            </summary>
            <param name="extension">The file extension specified</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingCallback.SetOutputEncoding(System.Text.Encoding,System.Boolean)">
            <summary>
            Informs the client of the output file encoding requested by the
            template or directive processors. 
            </summary>
            <param name="encoding">Encoding</param>
            <param name="fromOutputDirective">Whether the request was from an output directive in the template</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplating">
            <summary>
            The principal worker interface for the STextTemplating service
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplating.ProcessTemplate(System.String,System.String,Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingCallback,System.Object)">
            <summary>
            Process the contents of a templated file running inline code to produce completed output
            </summary>
            <param name="inputFile">The filename of the template to process. Can be the empty string.</param>
            <param name="content">The actual content of the template to process</param>
            <param name="callback">The (optional) interface to call back on with error information</param>
            <param name="hierarchy">The (optional) hierarchy of the template. This should be of type IVsHierarchy</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplating.PreprocessTemplate(System.String,System.String,Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingCallback,System.String,System.String,System.String[]@)">
            <summary>
            Process the contents of a templated file running inline code to produce a class that represents the template
            </summary>
            <param name="inputFile">The filename of the template to process. Can be the empty string.</param>
            <param name="content">The actual content of the template to process</param>
            <param name="callback">The (optional) interface to call back on with error information</param>
            <param name="className">The name of the class to generate</param>
            <param name="classNamespace">The namespace within which to generate the class</param>
            <param name="references">The set of references demanded by the template</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplating.BeginErrorSession">
            <summary>
            Setup/Reset the system that causes only unique errors to be logged. Also creates an implicit code generation session.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplating.EndErrorSession">
            <summary>
            Finish a session using the system that causes only unique errors to be logged.
            </summary>
            <returns>True if errors were encountered during the session, false otherwise</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingComponents">
            <summary>
            Interface on the STextTemplating service to support advanced scenarios requiring manipulation of the components of the text templating service 
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingComponents.Host">
            <summary>
            Get the singleton Vs Host
            </summary>
            <remarks>
            This host can be passed to a text transformation engine instance to transform templates in exactly the same way the 
            main ITextTemplating service interface operates.
            Typically calls the InputFile property and Hierarchy are set for each template to be transformed before any calls to ProcessTemplate on the Engine.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingComponents.Engine">
            <summary>
            Get the singleton text templating engine
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingComponents.InputFile">
            <summary>
            The input filename that the host uses to report errors
            </summary>
            <remarks>Null is an acceptable value if the transformation is not file-based</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingComponents.Callback">
            <summary>
            The error reporting and file extension callback that the host uses.
            </summary>
            <remarks>Null is an acceptable value if no callback is required</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingComponents.Hierarchy">
            <summary>
            The hierarchy to use to help resolve project references.
            </summary>
            <remarks>
            This value should be of type IVsHierarchy.  It is reperesented as object to avoid dependency issues.
            Null is an acceptable value if no hierarchy is required
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingEngine">
            <summary>
            The main processing interface for text templating files
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingEngine.ProcessTemplate(System.String,Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingEngineHost)">
            <summary>
            Process the contents of a templated file running inline code to produce completed output
            </summary>
            <param name="content">The content of the templated file</param>
            <param name="host">The hosting environment using this engine</param>
            <returns>The processed contents of the file</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingEngine.PreprocessTemplate(System.String,Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingEngineHost,System.String,System.String,System.String@,System.String[]@)">
            <summary>
            Process the contents of a templated file running inline code to produce a class that represents the template.
            </summary>
            <param name="content">The content of the templated file</param>
            <param name="host">The hosting environment using this engine</param>
            <param name="className">The name of the class to produce</param>
            <param name="classNamespace">The namespace of the class to produce</param>
            <param name="language">The language that the template's control code was written in</param>
            <param name="references">The set of references required by the template</param>
            <returns>The preprocessed contents of the file</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingEngineHost">
            <summary>
            Interface to implement for applications wanting to host the T4 engine
            </summary>
            <remarks>
            An interface as it seems quite possible the host may be
            derived from something else 
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingEngineHost.LoadIncludeText(System.String,System.String@,System.String@)">
            <summary>
            Acquire the text corresponding to a request
            to include a partial template file
            </summary>
            <param name="requestFileName">The file to include</param>
            <param name="content">The content of the included file</param>
            <param name="location">The location of the included file</param>
            <remarks>
            Location can be null or empty for non filesystem based hosts
            </remarks>
            <returns>Whether the resolve was successful.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingEngineHost.ResolveAssemblyReference(System.String)">
            <summary>
            Allow host to provide more context for an assembly reference
            </summary>
            <remarks>
            Host could choose to prepend a path for instance.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingEngineHost.ResolveDirectiveProcessor(System.String)">
            <summary>
            Return the type of a directive processor, given its friendly name
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingEngineHost.ResolvePath(System.String)">
            <summary>
            Resolve a relative to its absolute path
            </summary>
            <remarks>
            DirectiveProcessors can use this to locate files to load etc.
            Used for any file types that do not have a specific
            resolve method.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingEngineHost.ResolveParameterValue(System.String,System.String,System.String)">
            <summary>
            Resolve the value of a parameter for a directive processor 
            </summary>
            <remarks>
            The value returned can depend on the ID of the 
            directive being processed.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingEngineHost.ProvideTemplatingAppDomain(System.String)">
            <summary>
            Provide an AppDomain to run the generated transformation class
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingEngineHost.LogErrors(System.CodeDom.Compiler.CompilerErrorCollection)">
            <summary>
            Log a collection of errors or warnings from the templating process
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingEngineHost.SetFileExtension(System.String)">
            <summary>
            Tell the host about the file extension that the 
            template expects for the generated text
            </summary>
            <remarks>
            The method should not be renamed to a property in
            FxCop – exception should be made.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingEngineHost.SetOutputEncoding(System.Text.Encoding,System.Boolean)">
            <summary>
            Tell the host what encoding the output file should
            be written out in.
            </summary>
            <param name="encoding">The encoding to use</param>
            <param name="fromOutputDirective">true of the encoding was set by an output directive</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingEngineHost.GetHostOption(System.String)">
            <summary>
            Get the value of a control option from the host.
            </summary>
            <param name="optionName">The name of the option</param>
            <returns>The value of the option or null to specify that the host doesn't care</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingEngineHost.StandardAssemblyReferences">
            <summary>
            Allow host to specify standard assemblies
            referenced by generated transformation class
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingEngineHost.StandardImports">
            <summary>
            Allow host to specify standard namespaces imported
            by generated transformation class
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingEngineHost.TemplateFile">
            <summary>
            Ask the host what the filename of the template is
            </summary>
            <remarks>
            It's fine to throw not implemented from this property if the implementing host is not file-based.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingSessionHost">
            <summary>
            Interface that allows an object to create and hold on to an ITextTransformationSession object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingSessionHost.CreateSession">
            <summary>
            Make an instance of a user session
            </summary>
            <returns>A new session</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingSessionHost.Session">
            <summary>
            The session this host is presently using.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingSession">
            <summary>
            Interface denoting an object that marks out a set of runs of the Text Templating engine.
            </summary>
            <remarks>
            Sessions are objects serialized across application domains and processes.  They have dictionary behavior to allow parameters to be
            passed into the T4 engine and are compared by comparing their Guid-based Id property to allow different implementation types 
            to be directly compared.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingSession.Id">
            <summary>
            Identity of this session - used to compare session instances by value
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TextTemplating.Interfaces.STextTemplating">
            <summary>
            The service interface for the STextTemplating service
            </summary>
            <remarks>
            Empty, the real work is done by interfaces you cast this to.
            </remarks>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\VisualStudio\VS10RTM\VisualStudioIntegration\Common\Assemblies\v4.0\Microsoft.VisualStudio.TextTemplating.10.0.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.TextTemplating.10.0</name>
    </assembly>
    <members>
        <member name="T:Microsoft.VisualStudio.TextTemplating.AssemblyRecord">
            <summary>
            Class to manage an assembly and when it was last referenced.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.AssemblyRecord.Assembly">
            <summary>
            The assembly for the record
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.AssemblyRecord.LastUse">
            <summary>
            Date the assembly was last referenced
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TextTemplating.AssemblyCache">
            <summary>
            Class to manage a cache of compiled assemblies in the execution AppDomain.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.AssemblyCache.assemblies">
            <summary>
            Set of cached assemblies
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.AssemblyCache.lastUse">
            <summary>
            Last time cache was used.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.AssemblyCache.Find(System.String)">
            <summary>
            Find an assembly containing the code of the given class in the cache
            </summary>
            <param name="fullClassName"></param>
            <returns>An assembly containing the code of the given class or null</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TextTemplating.AssemblyCacheMonitor">
            <summary>
            Class to monitor the state of the assembly cache
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.AssemblyCacheMonitor.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.AssemblyCacheMonitor.GetStaleAssembliesCount(System.TimeSpan)">
            <summary>
            Returns how many assemblies the cache thinks are stale
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TextTemplating.AssemblyResolver">
            <summary>
            Class to resolve assembly references in the T4 execution AppDomain
            </summary>
            <remarks>
            This is modelled as a separate class purely because the event seems to need its implemented class to be marked Serializable.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.AssemblyResolver.AssemblyResolve(System.Object,System.ResolveEventArgs)">
            <summary>
            Resolve assembly references in the T4 execution app domain
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TextTemplating.CodeDom.CodeDomHelpers">
            <summary>
            Helper class with extension methods to aide in creating CodeDOM trees.
            </summary>
            <remarks>
            These extension methods allow a much terser and more expression-like syntax for constructing CodeDOM trees.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.CodeDom.CodeDomHelpers.nullEx">
            <summary>
            Simple static for the null expression
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.CodeDom.CodeDomHelpers.Call(System.Type,System.String,System.CodeDom.CodeExpression[])">
            <summary>
            Call a static method as an expression
            </summary>
            <param name="type"></param>
            <param name="methodName"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.CodeDom.CodeDomHelpers.CallS(System.Type,System.String,System.CodeDom.CodeExpression[])">
            <summary>
            Call a static method as a statement
            </summary>
            <param name="type"></param>
            <param name="methodName"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.CodeDom.CodeDomHelpers.Call(System.String,System.String,System.CodeDom.CodeExpression[])">
            <summary>
            Call a method on an object as an expression
            </summary>
            <param name="callSite"></param>
            <param name="methodName"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.CodeDom.CodeDomHelpers.CallS(System.String,System.String,System.CodeDom.CodeExpression[])">
            <summary>
            Call a method on an object as a statement
            </summary>
            <param name="callSite"></param>
            <param name="methodName"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.CodeDom.CodeDomHelpers.Call(System.String,System.CodeDom.CodeExpression[])">
            <summary>
            Call a method on this class as an expression
            </summary>
            <param name="methodName"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.CodeDom.CodeDomHelpers.CallS(System.String,System.CodeDom.CodeExpression[])">
            <summary>
            Call a method on this class as a statement
            </summary>
            <param name="methodName"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.CodeDom.CodeDomHelpers.CreateMethod(System.Type,System.String,System.String,System.CodeDom.MemberAttributes,System.CodeDom.CodeObject[])">
            <summary>
            Make a basic method
            </summary>
            <param name="returnType"></param>
            <param name="name"></param>
            <param name="summaryComment"></param>
            <param name="attributes"></param>
            <param name="statements"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.CodeDom.CodeDomHelpers.IfVariableNullThenInstantiateType(System.CodeDom.CodeFieldReferenceExpression,System.Type)">
            <summary>
            Create the code for if (a==null) a = new Foo();
            </summary>
            <param name="variableRef"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.CodeDom.CodeDomHelpers.CreatePropertyInfoDeclaration(System.String,System.CodeDom.CodeExpression,System.String)">
            <summary>
            Make a variable declaration for a PropertyInfo initialized with a GetProperty call on a target's type.
            <remarks>
            Creates code similar to: PropertyInfo name = target.GetType().GetProperty(propertyName);
            </remarks>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.CodeDom.CodeDomHelpers.CreatePropertyInfoValueDeclaration(System.String,System.CodeDom.CodeExpression,System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
            <summary>
            Make a variable declaration for an object initialized via a call to PropertyInfo.GetValue via a given instance
            <remarks>
            Creates code similar to: object name = propertyInfo.GetValue(instance, null|new object[] {parameters});
            </remarks>
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TextTemplating.DirectiveProcessor">
            <summary>
            Base class for a concrete DirectiveProcessor
            </summary>
            <remarks>
            A singleton instance of any of these classes that is
            required will be held by the Engine.
            This class implements a state machine with
            the Get... methods only valid after a Start...Finish pair.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.DirectiveProcessor.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.DirectiveProcessor.compilerErrors">
            <summary>
            Reference to the error collection provided in Initialize()
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.DirectiveProcessor.Initialize(Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingEngineHost)">
            <summary>
            Initialize the processor instance
            </summary>
            <param name="host"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.DirectiveProcessor.IsDirectiveSupported(System.String)">
            <summary>
            Does this DirectiveProcessor support the given directive
            </summary>
            <remarks>
            This call is not connected to the state machine
            </remarks>
            <param name="directiveName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.DirectiveProcessor.StartProcessingRun(System.CodeDom.Compiler.CodeDomProvider,System.String,System.CodeDom.Compiler.CompilerErrorCollection)">
            <summary>
            Begin a round of directive processing
            </summary>
            <param name="languageProvider"></param>
            <param name="templateContents">the contents of the template being processed</param>\
            <param name="errors">collection to report processing errors in</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.DirectiveProcessor.ProcessDirective(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Process a directive from a template file
            </summary>
            <param name="directiveName"></param>
            <param name="arguments"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.DirectiveProcessor.FinishProcessingRun">
            <summary>
            Finish a round of directive processing
            </summary>
            <returns>The code that this Directiveprocessor
            contributes to the GeneratedTextTemplating class</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.DirectiveProcessor.GetClassCodeForProcessingRun">
            <summary>
            Get the code to contribute to the generated
            template processing class as a consequence of the most recent run.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.DirectiveProcessor.GetPreInitializationCodeForProcessingRun">
            <summary>
            Get the code to contribute to the body of the initialize method of the generated
            template processing class as a consequence of the most recent run.
            This code will run before the base class' Initialize method
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.DirectiveProcessor.GetPostInitializationCodeForProcessingRun">
            <summary>
            Get the code to contribute to the body of the initialize method of the generated
            template processing class as a consequence of the most recent run.
            This code will run after the base class' Initialize method
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.DirectiveProcessor.GetReferencesForProcessingRun">
            <summary>
            Get any references to pass to the compiler
            as a consequence of the most recent run.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.DirectiveProcessor.GetImportsForProcessingRun">
            <summary>
            Get any namespaces to import as a consequence of
            the most recent run.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.DirectiveProcessor.Errors">
            <summary>
            Error collection for DirectiveProcessor to add Errors/Warnings to.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TextTemplating.DirectiveProcessorException">
            <summary>
            Exception class for Directive Processors
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.DirectiveProcessorException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.DirectiveProcessorException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.DirectiveProcessorException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="inner">Inner exception.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.DirectiveProcessorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.TextTemplating.IRecognizeHostSpecific">
            <summary>
            (Optional) interface that DirectiveProcessors can implement if they care about the value of the HostSpecific flag when they are generating code.
            <remarks>
            Will be called immediately after Initialize
            </remarks>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.IRecognizeHostSpecific.SetProcessingRunIsHostSpecific(System.Boolean)">
            <summary>
            Inform the directive processor whether the run is host-specific.
            </summary>
            <remarks>
            Will be called after RequiresProcessingRunIsHostSpecific has been run
            on all directive processors to inform the processor what the final host-specifc decision is
            </remarks>
            <param name="hostSpecific"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.IRecognizeHostSpecific.RequiresProcessingRunIsHostSpecific">
            <summary>
            Allow a directive processor to specify that it needs the run to be host-specific.
            </summary>
            <remarks>
            If any directive processor in the run sets this to be true then the engine will make the entire run host-specific.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.TextTemplating.EncodingHelper">
            <summary>
            Helper class to get the encoding of a file from its BOM
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.EncodingHelper.GetEncoding(System.String)">
            <summary>
            Helper method to get the encoding of a file from its BOM
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TextTemplating.Engine">
            <summary>
            Text templating engine
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.Engine.CacheAssembliesOptionString">
            <summary>
            CacheAssemblies option string 
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.Engine.hasher">
            <summary>
            Hashing algorithm to create cache keys for fingerprints of templates.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Engine.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Engine.ProcessTemplate(System.String,Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingEngineHost)">
            <summary>
            Processes a template
            </summary>
            <param name="content">The contents of the template file to be processed</param>
            <param name="host">The ITextTemplatingEngineHost that will host this engine</param>
            <returns>The output from the processed template</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Engine.PreprocessTemplate(System.String,Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingEngineHost,System.String,System.String,System.String@,System.String[]@)">
            <summary>
            Process the contents of a templated file running inline code to produce a class that represents the template.
            </summary>
            <param name="content">The content of the templated file</param>
            <param name="host">The hosting environment using this engine</param>
            <param name="className">The name of the class to produce</param>
            <param name="classNamespace">The namespace of the class to produce</param>
            <param name="language">The language that the template's control code was written in</param>
            <param name="references">The set of references required by the template</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Engine.ProcessTemplateImplementation(Microsoft.VisualStudio.TextTemplating.TemplateProcessingSession,System.String,Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingEngineHost,System.String,System.String)">
            <summary>
            Do the main processing of the template that is shared between preprocessing and regular processing
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Engine.InitializeSessionWithHostData(Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingEngineHost,Microsoft.VisualStudio.TextTemplating.TemplateProcessingSession)">
            <summary>
            Set up the given session with data gleaned from callback to the host.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Engine.LogError(Microsoft.VisualStudio.TextTemplating.Block,System.String,System.Boolean)">
            <summary>
            Utility function for logging an error
            </summary>
            <param name="block"></param>
            <param name="errorText"></param>
            <param name="isWarning"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Engine.LogError(System.String,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Utility function for logging an error
            </summary>
            <param name="fileName"></param>
            <param name="line"></param>
            <param name="column"></param>
            <param name="errorText"></param>
            <param name="isWarning"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Engine.ProcessDirectives(System.Collections.Generic.List{Microsoft.VisualStudio.TextTemplating.Block},Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingEngineHost,Microsoft.VisualStudio.TextTemplating.TemplateProcessingSession)">
            <summary>
            Processes the directives in the template
            </summary>
            <param name="blocks">The blocks that the template was parsed into</param>
            <param name="host">host</param>
            <param name="session">TemplateProcessingSession to store data for this session</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Engine.AddInitializeMethod(Microsoft.VisualStudio.TextTemplating.TemplateProcessingSession,System.Text.StringBuilder,System.Text.StringBuilder,System.Text.StringBuilder)">
            <summary>
            Add an override to the Initialize method to contribute preInit or postInit code
            </summary>
            <param name="session"></param>
            <param name="directivesBuilder"></param>
            <param name="preInitBuilder"></param>
            <param name="postInitBuilder"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Engine.ProvideBaseClassOverrideAttribute(Microsoft.VisualStudio.TextTemplating.TemplateProcessingSession)">
            <summary>
            Provide an attribute specifying whether optional methods from the base class should be overridden or virtual
            </summary>
            <param name="session"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Engine.ProcessCustomDirectives(Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingEngineHost,Microsoft.VisualStudio.TextTemplating.TemplateProcessingSession,System.Collections.Generic.List{Microsoft.VisualStudio.TextTemplating.Directive})">
            <summary>
            Process all directives handled by either extension directive processors or non built-in directives that ship with the engine.
            </summary>
            <remarks>
            The difference between built-in directives and custom but shipped directives is that true built-in directives are allowed to mess with the processing logic.
            Custom shipped directives have the same restrictions as end-user extension directives.  This is subtle but helps with keeping testing down as we know when they fire in the cycle.
            The difference should not be apparent to end users however.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Engine.GetLocalCustomDirectiveProcessor(Microsoft.VisualStudio.TextTemplating.Directive)">
            <summary>
            Get the type for any directive that is implemented in this assembly.
            </summary>
            <remarks>
            Patch the directive object to have an approprate processor name.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Engine.IsBuiltInDirective(Microsoft.VisualStudio.TextTemplating.Directive)">
            <summary>
            Says whether a given directive is built-in (handled by the engine) or should
            be handled by a custom directive processor
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Engine.ProcessIncludeDirective(Microsoft.VisualStudio.TextTemplating.Directive,Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingEngineHost)">
            <summary>
            Process an include directive by asking the host to read the included file, and
            parsing the contents into blocks.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Engine.ProcessAssemblyDirective(Microsoft.VisualStudio.TextTemplating.Directive,Microsoft.VisualStudio.TextTemplating.TemplateProcessingSession)">
            <summary>
            Process the assembly directive by adding the assembly reference to the list of
            assembly references maintained by the TemplateProcessingSession
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Engine.ProcessImportDirective(Microsoft.VisualStudio.TextTemplating.Directive,Microsoft.VisualStudio.TextTemplating.TemplateProcessingSession)">
            <summary>
            Process an import directive by adding the namespace to the list of namespaces
            maintained by the TemplateProcessingSession
            </summary>
            <param name="directive"></param>
            <param name="session"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Engine.ProcessTemplateDirective(Microsoft.VisualStudio.TextTemplating.Directive,Microsoft.VisualStudio.TextTemplating.TemplateProcessingSession)">
            <summary>
            Process the template directive
            </summary>
            <param name="directive"></param>
            <param name="session"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Engine.ProcessOutputDirective(Microsoft.VisualStudio.TextTemplating.Directive,Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingEngineHost)">
            <summary>
            Process the output directive to get the extension of the output file
            </summary>
            <param name="directive"></param>
            <param name="host"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Engine.ProcessBuiltInDirective(Microsoft.VisualStudio.TextTemplating.Directive,Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingEngineHost,Microsoft.VisualStudio.TextTemplating.TemplateProcessingSession)">
            <summary>
            Process the built in directive
            </summary>
            <param name="directive"></param>
            <param name="host"></param>
            <param name="session"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Engine.ConstructGeneratorCode(Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingEngineHost,System.Collections.Generic.List{Microsoft.VisualStudio.TextTemplating.Block},Microsoft.VisualStudio.TextTemplating.TemplateProcessingSession,System.Boolean,System.String,System.String)">
            <summary>
            Constructs code for the generated transformation class using the CodeDomProvider
            for the template language.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Engine.ConstructTransformTextMethod(Microsoft.VisualStudio.TextTemplating.TemplateProcessingSession,System.Collections.Generic.List{Microsoft.VisualStudio.TextTemplating.Block},System.Boolean,System.CodeDom.CodeTypeDeclaration)">
            <summary>
            Construct the TransformText method
            </summary>
            <param name="session"></param>
            <param name="blocks"></param>
            <param name="insertLineNumbers"></param>
            <param name="generatorType"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Engine.AddAutoGeneratedComment(System.CodeDom.CodeNamespace)">
            <summary>
            Add a comment to the class in the standard format to specify that it is autogenerated.
            </summary>
            <param name="codeNamespace"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Engine.AddGeneratedCodeAttribute(System.CodeDom.CodeTypeDeclaration)">
            <summary>
            Add a generated code marker attribute to the given class declaration
            </summary>
            <param name="generatorType"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Engine.ConstructBaseClassOptions(Microsoft.VisualStudio.TextTemplating.TemplateProcessingSession,System.CodeDom.CodeTypeDeclaration,System.String,System.CodeDom.CodeTypeDeclaration@)">
            <summary>
            Set up the base class for the template
            </summary>
            <param name="session"></param>
            <param name="generatorType"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Engine.CreateUniqueNamespaceName(Microsoft.VisualStudio.TextTemplating.TemplateProcessingSession,System.String,Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingEngineHost,System.Collections.Generic.List{Microsoft.VisualStudio.TextTemplating.Block})">
            <summary>
            Create a new namespace name to ensure the generated class has a unique identity
            </summary>
            <param name="session"></param>
            <param name="baseNamespaceName"></param>
            <param name="host"></param>
            <param name="blocks"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Engine.GenerateMemberForBlock(Microsoft.VisualStudio.TextTemplating.TemplateProcessingSession,Microsoft.VisualStudio.TextTemplating.Block,System.CodeDom.CodeTypeDeclaration,System.Boolean,System.CodeDom.Compiler.CodeGeneratorOptions,System.Boolean)">
            <summary>
            Create a snippet member for a given block
            </summary>
            <param name="session"></param>
            <param name="block"></param>
            <param name="generatorType"></param>
            <param name="insertLineNumbers"></param>
            <param name="options"></param>
            <param name="firstClassFeatureFound"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Engine.GetToStringHelperReference(Microsoft.VisualStudio.TextTemplating.TemplateProcessingSession)">
            <summary>
            Calculate the reference property or static class that embodies the ToStringHelper
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Engine.ConstructStatementsForGeneratorMethod(System.Collections.Generic.List{Microsoft.VisualStudio.TextTemplating.Block},Microsoft.VisualStudio.TextTemplating.TemplateProcessingSession,System.Boolean)">
            <summary>
            Construct CodeDom statements for the TransformText method override on the generated
            transformation class
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Engine.CompileAndRunCode(System.String,Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingEngineHost,Microsoft.VisualStudio.TextTemplating.TemplateProcessingSession)">
            <summary>
            Compiles and runs the transformation code in another appdomain that it gets 
            from the host
            </summary>
            <param name="generatorCode"></param>
            <param name="host"></param>
            <param name="session"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Engine.ResolveAssemblyReferences(Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingEngineHost,Microsoft.VisualStudio.TextTemplating.TemplateProcessingSession)">
            <summary>
            Allow the host to process all assembly references in the session
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Engine.CollateSessionTypes(Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingSession)">
            <summary>
            Get the type of the session and any types within it's dictionary that are not in standard assemblies
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Engine.NonStandardType(System.Type)">
            <summary>
            Is the given type a type whose assembly will already be loaded into the transformation AppDomain?
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Engine.AddTypeMemberWithLinePragma(Microsoft.VisualStudio.TextTemplating.TemplateProcessingSession,System.CodeDom.CodeTypeDeclaration,Microsoft.VisualStudio.TextTemplating.Block,System.CodeDom.CodeSnippetTypeMember)">
            <summary>
            Add a typemember code snippet to a type with the correct line pragma decorating it.
            </summary>
            <param name="session"></param>
            <param name="generatorType"></param>
            <param name="block"></param>
            <param name="member"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Engine.AddStatementWithLinePragma(Microsoft.VisualStudio.TextTemplating.TemplateProcessingSession,System.CodeDom.CodeStatementCollection,Microsoft.VisualStudio.TextTemplating.Block,System.CodeDom.CodeStatement)">
            <summary>
            Add a statement code snippet to a list of statements with the correct line pragma decorating it.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Engine.AddStatementWithLinePragma(Microsoft.VisualStudio.TextTemplating.TemplateProcessingSession,System.CodeDom.CodeStatementCollection,System.Int32,System.String,System.CodeDom.CodeStatement)">
            <summary>
            Add a statement code snippet to a list of statements with the correct line pragma decorating it.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TextTemplating.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.AssemblyLoadError">
            <summary>
              Looks up a localized string similar to There was a problem loading the assembly &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.AutoGenCommentLine1">
            <summary>
              Looks up a localized string similar to This code was generated by a tool..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.AutoGenCommentLine2">
            <summary>
              Looks up a localized string similar to Runtime Version: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.AutoGenCommentLine3">
            <summary>
              Looks up a localized string similar to Changes to this file may cause incorrect behavior and will be lost if.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.AutoGenCommentLine4">
            <summary>
              Looks up a localized string similar to the code is regenerated..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.BaseClassNotFound">
            <summary>
              Looks up a localized string similar to Failed to load base class &apos;{0}&apos; from which Transformation class inherits..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.BlankIncludeFile">
            <summary>
              Looks up a localized string similar to Loading the include file &apos;{0}&apos; returned a null or empty string. The transformation will not be run. .
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.CannotInitializeProcessor">
            <summary>
              Looks up a localized string similar to There was a problem creating and initializing the processor for a directive named &apos;{1}&apos;. The type of the processor is {0}. The transformation will not be run. .
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.CannotResolveRequiresParameter">
            <summary>
              Looks up a localized string similar to Unable to resolve a value for the requires parameter &apos;{0}&apos; for directive &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.CompilerErrorPrepend">
            <summary>
              Looks up a localized string similar to Compiling transformation: .
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.CompilerErrors">
            <summary>
              Looks up a localized string similar to An exception was thrown while trying to compile the transformation code..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.CompilerVersionNotSupported">
            <summary>
              Looks up a localized string similar to The {0} 2.0 and {0} 3.5 compilers are no longer supported. Templates will always be compiled with the version 4 compiler instead of &apos;{1}&apos; as specified..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.DirectiveMissingArgument">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; directive did not provide required argument &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.DirectiveNotSupported">
            <summary>
              Looks up a localized string similar to The directive &apos;{0}&apos; is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.DuplicateDirectiveParameter">
            <summary>
              Looks up a localized string similar to The parameter &apos;{0}&apos; already exists in the directive. The duplicate parameter will be ignored..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.EncodingIntegerFailed">
            <summary>
              Looks up a localized string similar to Encoding.GetEncoding(int) failed for &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.EncodingStringFailed">
            <summary>
              Looks up a localized string similar to Encoding.GetEncoding(string) failed for &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.ErrorGeneratingTranformationClass">
            <summary>
              Looks up a localized string similar to There was an error generating the transformation class. The process cannot continue. .
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.ErrorInitializingTransformationObject">
            <summary>
              Looks up a localized string similar to Errors were generated when initializing the transformation object. The transformation will not be run. .
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.ErrorLoadingIncludeFile">
            <summary>
              Looks up a localized string similar to There was an error loading the include file &apos;{0}&apos;. The transformation will not be run..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.ErrorOutput">
            <summary>
              Looks up a localized string similar to ErrorGeneratingOutput.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.Exception">
             <summary>
               Looks up a localized string similar to  The following Exception was thrown:
            {0}.
             </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.ExceptionGettingProcessorOutput">
            <summary>
              Looks up a localized string similar to An Exception was thrown while trying to get the output from the processor named &apos;{0}&apos;. The transformation will not be run..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.ExceptionGettingReferencesFromDP">
            <summary>
              Looks up a localized string similar to An Exception was thrown while trying to get the namespace imports and assembly references for processing the run from a directive processor named &apos;{0}&apos;. The transformation will not be run..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.ExceptionGettingStandardReferences">
            <summary>
              Looks up a localized string similar to An exception was thrown by the host when trying to get the StandardImports and StandardAssemblyReferences. The transformation will not be run..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.ExceptionInstantiatingTransformationObject">
            <summary>
              Looks up a localized string similar to Could not instantiate a TextTransformation object from the compiled assembly..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.ExceptionProcessingDirective">
            <summary>
              Looks up a localized string similar to An Exception was thrown while processing a directive named &apos;{0}&apos;. The transformation will not be run. .
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.ExceptionProcessingTemplate">
            <summary>
              Looks up a localized string similar to An Exception was thrown while processing the template. .
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.ExceptionResolvingAssembly">
            <summary>
              Looks up a localized string similar to The host threw an exception while trying to resolve the assembly reference &apos;{0}&apos;. The transformation will not be run..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.ExceptionRunningTransformText">
            <summary>
              Looks up a localized string similar to An exception was thrown while running the TransformText() method. .
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.ExceptionSettingExtension">
            <summary>
              Looks up a localized string similar to An exception was thrown by the host while trying to set the extension..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.ExceptionSettingHost">
            <summary>
              Looks up a localized string similar to An exception was thrown while trying to set the &apos;Host&apos; property on the {0}. .
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.ExceptionSettingSession">
            <summary>
              Looks up a localized string similar to An exception was thrown while trying to set the &apos;Session&apos; property on the {0}. .
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.ExceptionWhileRunningCode">
            <summary>
              Looks up a localized string similar to An Exception was thrown while running the transformation code. The process cannot continue. .
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.ExpressionBlockNull">
            <summary>
              Looks up a localized string similar to An expression block evaluated as Null.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.FileNotFoundExceptionProcessingDirective">
            <summary>
              Looks up a localized string similar to The file {0} was not found whilst processing a directive named &apos;{1}&apos;. .
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.GetClassCodeCallError">
            <summary>
              Looks up a localized string similar to Class code can only be retrieved after FinishProcessingRun() is called.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.GetImportsCallError">
            <summary>
              Looks up a localized string similar to Imports can only be retrieved after FinishProcessingRun() is called.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.GetReferencesCallError">
            <summary>
              Looks up a localized string similar to References can only be retrieved after FinishProcessingRun() is called.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.IncorrectDPType">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; of the directive processor named &apos;{1}&apos; does not derive from Microsoft.VisualStudio.TextTemplating.DirectiveProcessor. The transformation will not be run..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.InvalidBaseClass">
            <summary>
              Looks up a localized string similar to An invalid base class was specified for the Transformation class. The base class must derive from Microsoft.VisualStudio.TextTemplating.TextTransformation..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.InvalidCompilerOption">
            <summary>
              Looks up a localized string similar to The compiler option is invalid: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.InvalidCulture">
            <summary>
              Looks up a localized string similar to An invalid culture was specified in the &apos;template&apos; directive. The culture must be in the &quot;xx-XX&quot; format. The invariant culture will be used..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.InvalidDebugParam">
            <summary>
              Looks up a localized string similar to An invalid debug value &apos;{0}&apos; was specified in the template directive. The debug value must be either &quot;true&quot; or &quot;false&quot;. The default of &quot;false&quot; will be used..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.InvalidDirectiveArgumentFormat">
            <summary>
              Looks up a localized string similar to Directive arguments should be of form &apos;name=value&apos;: {0}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.InvalidHostSpecificParam">
            <summary>
              Looks up a localized string similar to An invalid HostSpecific value &apos;{0}&apos; was specified in the template directive. The HostSpecific value must be either &quot;true&quot; or &quot;false&quot;. The default of &quot;false&quot; will be used..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.InvalidLanguage">
            <summary>
              Looks up a localized string similar to An invalid language &apos;{0}&apos; was specified in the &apos;template&apos; directive. The language must be either &quot;C#&quot; or &quot;VB&quot;. The default value of &quot;C#&quot; will be used..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.InvalidNeutralCulture">
            <summary>
              Looks up a localized string similar to A neutral culture was specified in the &apos;template&apos; directive. A specific culture must be provided. The invariant culture will be used..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.MultipleOutputDirectives">
            <summary>
              Looks up a localized string similar to Multiple output directives were found in the template. All but the first one will be ignored..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.MultipleTemplateDirectives">
            <summary>
              Looks up a localized string similar to Multiple template directives were found in the template. All but the first one will be ignored. Multiple parameters to the template directive should be specified within one template directive..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.NoAppDomain">
            <summary>
              Looks up a localized string similar to There was a problem getting an AppDomain to run the transformation from the host. The process cannot continue. .
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.NoProcessorForDirective">
            <summary>
              Looks up a localized string similar to No processor was specified for a directive named &apos;{0}&apos;. The transformation will not be run..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.NoProcessorTypeForDirective">
            <summary>
              Looks up a localized string similar to A processor named &apos;{0}&apos; could not be found for the directive named &apos;{1}&apos;. The transformation will not be run. .
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.NotEnoughDirectiveParameters">
            <summary>
              Looks up a localized string similar to A required parameter &apos;{0}&apos; for the directive &apos;{1}&apos; was not found. The directive will be ignored. .
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.ParameterDirectiveTypeMismatch">
            <summary>
              Looks up a localized string similar to The type &apos;{1}&apos; of the parameter &apos;{0}&apos; did not match the type of the data passed to the template..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.ProcessDirectiveCallError">
            <summary>
              Looks up a localized string similar to ProcessDirective() was called before StartProcessingRun(). Directive processing can only start after StartProcessingRun() is called. .
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.ProcessorNotSupportDirective">
            <summary>
              Looks up a localized string similar to The processor named &apos;{0}&apos; does not support the directive named &apos;{1}&apos;. The transformation will not be run..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.RecursiveInclude">
            <summary>
              Looks up a localized string similar to The include directive for file &apos;{0}&apos; causes an infinite loop. The directive will not be processed..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.SessionHostMarshalError">
            <summary>
              Looks up a localized string similar to Marshaling Session or Host object to secondary AppDomain failed. Check that Host and all types in Session dictionary are Serializable or derive from MarshalByReferenceObject..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.SetOutputEncodingFailed">
            <summary>
              Looks up a localized string similar to The host threw an exception from SetOutputEncoding()..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.StartProcessingCallError">
            <summary>
              Looks up a localized string similar to StartProcessingRun() was called after directive processing was already started..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.TransformationErrorPrepend">
            <summary>
              Looks up a localized string similar to Running transformation: .
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.UnexpectedTag">
            <summary>
              Looks up a localized string similar to An unexpected start or end tag was found within a block. Make sure that you did not mis-type a start or end tag, and that you do not have any nested blocks in the template..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.UnsupportedArgumentValue">
            <summary>
              Looks up a localized string similar to Attempt to specify unsupported {1} value &apos;{0}&apos; for directive {2}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.WrongBlockSequence">
            <summary>
              Looks up a localized string similar to A {0} cannot appear after the first class feature in the template. Only boilerplate, expressions and other class features are allowed after the first class feature block..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.WrongDirectiveFormat">
            <summary>
              Looks up a localized string similar to A directive was specified in the wrong format. The transformation will not be run. Please specify the directive in the format &lt;#@ name [parameterName=&quot;parameterValue&quot;]*  #&gt;.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Properties.Resources.WrongFinalBlockType">
            <summary>
              Looks up a localized string similar to A template containing a class feature must end with a class feature..
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TextTemplating.ParameterDirectiveProcessor">
            <summary>
            Directive processor to route simple serializable parameters from callers or the host to the template.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.ParameterDirectiveProcessor.DirectiveName">
            <summary>
            Name of the directive provided by this processor ("parameter").
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.ParameterDirectiveProcessor.ProcessorName">
            <summary>
            The friendly name of this processor ("ParameterDirectiveProcessor").
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.ParameterDirectiveProcessor.hostSpecific">
            <summary>
            Whether the current processing run is host-specific
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.ParameterDirectiveProcessor.templatingHost">
            <summary>
            Host calling the template
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.ParameterDirectiveProcessor.languageCodeDomProvider">
            <summary>
            Provider for the template's language
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.ParameterDirectiveProcessor.postInitializationBuffer">
            <summary>
            Buffer that collates all of the code that instances of this directive processor need to run after base class initialization during a processing run
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.ParameterDirectiveProcessor.codeBuffer">
            <summary>
            Buffer that collates all of the code that instances of this directive processor contribute during a processing run
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.ParameterDirectiveProcessor.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.ParameterDirectiveProcessor.FinishProcessingRun">
            <summary>
            Nothing to do as we complete our run.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.ParameterDirectiveProcessor.GetClassCodeForProcessingRun">
            <summary>
            Gets generated class code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.ParameterDirectiveProcessor.GetPostInitializationCodeForProcessingRun">
            <summary>
            Get the code to contribute to the body of the initialize method of the generated
            template processing class as a consequence of the most recent run.
            This code will run after the base class' Initialize method
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.ParameterDirectiveProcessor.Initialize(Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingEngineHost)">
            <summary>
            Initializes the processor.
            </summary>
            <param name="host"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.ParameterDirectiveProcessor.IsDirectiveSupported(System.String)">
            <summary>
            Denote which properties are supported.
            </summary>
            <remarks>
            Only the "parameter" directive is supported.
            </remarks>
            <param name="directiveName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.ParameterDirectiveProcessor.GeneratePostInitCode(System.String,System.String,System.CodeDom.CodeMemberField)">
            <summary>
            Create the code for the Initialize method after its call to base.Initialize
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.ParameterDirectiveProcessor.GenerateTypeMismatchCheck(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeTypeReference,System.String,System.CodeDom.CodeStatement[])">
            <summary>
            Check that the given type has the same type as the parameter
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.ParameterDirectiveProcessor.GenerateClassCode(System.String,System.String,System.CodeDom.CodeMemberField@)">
            <summary>
            Create the code added as members to the transform class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.ParameterDirectiveProcessor.StartProcessingRun(System.CodeDom.Compiler.CodeDomProvider,System.String,System.CodeDom.Compiler.CompilerErrorCollection)">
            <summary>
            Starts processing run.
            </summary>
            <param name="languageProvider">Target language provider.</param>
            <param name="templateContents">The contents of the template being processed</param>
            <param name="errors">collection to report processing errors in</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.ParameterDirectiveProcessor.Microsoft#VisualStudio#TextTemplating#IRecognizeHostSpecific#SetProcessingRunIsHostSpecific(System.Boolean)">
            <summary>
            Accept the host-specific value of the current processing run from the engine
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.ParameterDirectiveProcessor.Host">
            <summary>
            Gets associated text templating host.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.ParameterDirectiveProcessor.RequiresProcessingRunIsHostSpecific">
            <summary>
            This processor does not require a host-specific template.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TextTemplating.RequiresProvidesDirectiveProcessor">
            <summary>
            Base class for a directive processor that follows the requires, provides pattern.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.RequiresProvidesDirectiveProcessor.codeBuffer">
            <summary>
            Buffer that collates all of the code that instances of this directive processor contribute during a processing run
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.RequiresProvidesDirectiveProcessor.preInitializationBuffer">
            <summary>
            Buffer that collates all of the code that instances of this directive processor need to run before base class initialization during a processing run
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.RequiresProvidesDirectiveProcessor.postInitializationBuffer">
            <summary>
            Buffer that collates all of the code that instances of this directive processor need to run after base class initialization during a processing run
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.RequiresProvidesDirectiveProcessor.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.RequiresProvidesDirectiveProcessor.Initialize(Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingEngineHost)">
            <summary>
            Initializes the processors.
            </summary>
            <param name="host"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.RequiresProvidesDirectiveProcessor.StartProcessingRun(System.CodeDom.Compiler.CodeDomProvider,System.String,System.CodeDom.Compiler.CompilerErrorCollection)">
            <summary>
            Starts processing run.
            </summary>
            <param name="languageProvider">Target language provider.</param>
            <param name="templateContents">The contents of the template being processed</param>
            <param name="errors">colelction to report processing errors in</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.RequiresProvidesDirectiveProcessor.ProvideUniqueId(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Provide a token to uniquely identify this instance of a directive processor
            </summary>
            <remarks>
            By default, allow an ID parameter to be used on the directive.
            Frequently, directive processors would choose to use one of their Provides parameters
            </remarks>
            <returns>A unique id for this directive instance</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.RequiresProvidesDirectiveProcessor.ProcessDirective(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Processes a single directive.
            </summary>
            <param name="directiveName">Directive name.</param>
            <param name="arguments">Directive arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.RequiresProvidesDirectiveProcessor.FinishProcessingRun">
            <summary>
            Finishes template processing.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.RequiresProvidesDirectiveProcessor.GetClassCodeForProcessingRun">
            <summary>
            Gets generated class code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.RequiresProvidesDirectiveProcessor.GetPreInitializationCodeForProcessingRun">
            <summary>
            Get the code to contribute to the body of the initialize method of the generated
            template processing class as a consequence of the most recent run.
            This code will run before the base class' Initialize method
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.RequiresProvidesDirectiveProcessor.GetPostInitializationCodeForProcessingRun">
            <summary>
            Get the code to contribute to the body of the initialize method of the generated
            template processing class as a consequence of the most recent run.
            This code will run after the base class' Initialize method
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.RequiresProvidesDirectiveProcessor.GetImportsForProcessingRun">
            <summary>
            Gets list of importt.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.RequiresProvidesDirectiveProcessor.GetReferencesForProcessingRun">
            <summary>
            Gets list of references.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.RequiresProvidesDirectiveProcessor.PostProcessArguments(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Method for derived classes to make any modifications to the dictionaries that they require
            </summary>
            <param name="directiveName"></param>
            <param name="requiresArguments"></param>
            <param name="providesArguments"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.RequiresProvidesDirectiveProcessor.GenerateTransformCode(System.String,System.Text.StringBuilder,System.CodeDom.Compiler.CodeDomProvider,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Method for derived classes to generate the code they wish to add to the TextTransformation generated class.
            </summary>
            <param name="directiveName"></param>
            <param name="codeBuffer"></param>
            <param name="languageProvider"></param>
            <param name="requiresArguments"></param>
            <param name="providesArguments"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.RequiresProvidesDirectiveProcessor.GeneratePreInitializationCode(System.String,System.Text.StringBuilder,System.CodeDom.Compiler.CodeDomProvider,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Method for derived classes to contribute additively to initialization code for the TextTransformation generated class.
            </summary>
            <remarks>
            Additive code is useful where there are multiple directive processor instances each needing to have some instance-specific initialization.
            As GenerateTransformCode can add methods, matching initialization code is often required to call those methods.
            This code will be added before the call to the base class.
            </remarks>
            <param name="directiveName"></param>
            <param name="codeBuffer"></param>
            <param name="languageProvider"></param>
            <param name="requiresArguments"></param>
            <param name="providesArguments"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.RequiresProvidesDirectiveProcessor.GeneratePostInitializationCode(System.String,System.Text.StringBuilder,System.CodeDom.Compiler.CodeDomProvider,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Method for derived classes to contribute additively to initialization code for the TextTransformation generated class.
            </summary>
            <remarks>
            Additive code is useful where there are multiple directive processor instances each needing to have some instance-specific initialization.
            As GenerateTransformCode can add methods, matching initialization code is often required to call those methods.
            This code will be added after the call to the base class.
            </remarks>
            <param name="directiveName"></param>
            <param name="codeBuffer"></param>
            <param name="languageProvider"></param>
            <param name="requiresArguments"></param>
            <param name="providesArguments"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.RequiresProvidesDirectiveProcessor.InitializeRequiresDictionary(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Method for derived classes to specify the requires arguments they need for each directive by putting "<null>" in the matching dictionary slot.</null>
            </summary>
            <param name="directiveName"></param>
            <param name="requiresDictionary"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.RequiresProvidesDirectiveProcessor.InitializeProvidesDictionary(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Method for derived classes to specify the provides parameters they will supply for each directive by putting the default name in the matching dictionary slot.
            </summary>
            <param name="directiveName"></param>
            <param name="providesDictionary"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.RequiresProvidesDirectiveProcessor.ProcessArgument(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)">
            <summary>
            Process an argument string consisting of parameter name value pairs formatted as below:
            name[=[']value[']][;name[=[']value[']]]
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.RequiresProvidesDirectiveProcessor.ProcessIdArgument(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Return the id of the directive if it has one
            </summary>
            <returns>the id or string.Empty</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.RequiresProvidesDirectiveProcessor.ParseArgument(System.String)">
            <summary>
            Parse a standardized argument string into a dictionary of argument name, value pairs
            </summary>
            <remarks>Values are optional, pairs are semicolon separated</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.RequiresProvidesDirectiveProcessor.Host">
            <summary>
            Gets associated text templating host.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.RequiresProvidesDirectiveProcessor.FriendlyName">
            <summary>
            The friendly name of this processor
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.TemplateParser.ParseTemplateIntoBlocks(System.String,System.String,System.CodeDom.Compiler.CompilerErrorCollection)">
            <summary>
            Parse a template file into blocks. Each block is of type boilerplate, directive, 
            statement, classfeature or expression. Also puts position information (line/column 
            number) for the block into each block. 
            </summary>
            <param name="content">Template content.</param>
            <param name="fileName"></param>
            <param name="errors">Error collection to report errors to.</param>
            <returns>Name of template file.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.TemplateParser.CheckBlockSequence(System.Collections.Generic.List{Microsoft.VisualStudio.TextTemplating.Block},System.CodeDom.Compiler.CompilerErrorCollection)">
            <summary>
            Check to make sure that the blocks are in correct sequence i.e.
            * no statements after the first classfeature block, and
            * if the template contains a class block then it ends with a class block.
            If not, log errors. 
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.TemplateParser.ParseDirectiveBlock(Microsoft.VisualStudio.TextTemplating.Block,System.CodeDom.Compiler.CompilerErrorCollection)">
            <summary>
            Parse a directive block for the directive name and param-value pairs
            </summary>
            <param name="block"></param>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.TemplateParser.ValidateDirectiveString(Microsoft.VisualStudio.TextTemplating.Block)">
            <summary>
            Validates a directive string and makes sure it is in the right format
            </summary>
            <param name="block"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.TemplateParser.InsertPositionInformation(System.Collections.Generic.List{Microsoft.VisualStudio.TextTemplating.Block})">
            <summary>
            Insert position information (line and column number) into a block
            </summary>
            <param name="blocks"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.TemplateParser.StripExtraNewlines(System.Collections.Generic.List{Microsoft.VisualStudio.TextTemplating.Block})">
            <summary>
            Remove unwanted newlines from the blocks.
            Also removes any boilerplate blocks that are empty (or that contained only new lines)
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.TemplateParser.WarnAboutUnexpectedTags(System.Collections.Generic.List{Microsoft.VisualStudio.TextTemplating.Block},System.CodeDom.Compiler.CompilerErrorCollection)">
            <summary>
            Adds warnings to the error collection if unexpected unescaped start/end tags are found within the template
            </summary>
            <param name="blocks"></param>
            <param name="errors"></param>
        </member>
        <member name="F:Microsoft.VisualStudio.TextTemplating.TemplateParser.escapeReplacingEvaluator">
            <summary>
            A MatchEvaluator for replacing escape characters. 
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.TemplateParser.StripEscapeCharacters(System.Collections.Generic.List{Microsoft.VisualStudio.TextTemplating.Block})">
            <summary>
            Strips escape characters from the block text. 
            </summary>
            <param name="blocks"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.TemplateParser.StripDirectiveEscapeCharacters(System.String)">
            <summary>
            Strips escape characters before " in the directive strings
            </summary>
            <param name="valueString"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TextTemplating.BlockType">
            <summary>
            Represents the type of each block in the template file
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TextTemplating.Block">
            <summary>
            Represents a block in the template file
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Block.#ctor(Microsoft.VisualStudio.TextTemplating.BlockType,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="type"></param>
            <param name="text"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Block.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Block.Type">
            <summary>
            The type of the block
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Block.Text">
            <summary>
            The text contained within the block, not
            including the opening and closing tags
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Block.StartLineNumber">
            <summary>
            The line number on which the block text starts
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Block.StartColumnNumber">
            <summary>
            The column number on which the block text starts
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Block.EndLineNumber">
            <summary>
            The line number on which the block text ends
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Block.EndColumnNumber">
            <summary>
            The column number on which the block text ends
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Block.FileName">
            <summary>
            The file name that this block comes from (in the case that
            it comes from an included file). Empty string if the
            block doesn't come from an include file.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TextTemplating.Directive">
            <summary>
            Represents a directive in the template file
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Directive.SetDirectiveProcessorName(System.String)">
            <summary>
            Make the setter for this property very explicit as it is not a normal operation.
            </summary>
            <param name="processorName"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.Directive.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},Microsoft.VisualStudio.TextTemplating.Block)">
            <summary>
            Constructor
            </summary>
            <param name="directiveName"></param>
            <param name="parameters"></param>
            <param name="block"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Directive.DirectiveName">
            <summary>
            The name of the directive
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Directive.Parameters">
            <summary>
            Parameter-Value pairs for the directive
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Directive.Block">
            <summary>
            The directive block that this directive came from
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.Directive.DirectiveProcessorName">
            <summary>
            The name of the processor for this directive if it is a custom one
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TextTemplating.TemplateProcessingSession">
            <summary>
            Class to carry the data associated with generation from one templated file 
            </summary>
            <remarks>
            Note - this is not the same as the ITextTransformationSession which represents an end user's batched session of multiple transforms.
            The lifetime of this class is one call to ProcessTemplate or PreprocessTemplate.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.TemplateProcessingSession.Preprocess">
            <summary>
            Whether this session is for precompilation or regular transformation
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.TemplateProcessingSession.AssemblyDirectives">
            <summary>
            List of full names of assemblies that need to be referenced
            when compiling/running the transformation code
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.TemplateProcessingSession.ImportDirectives">
            <summary>
            List of namespaces to be imported in the transformation code
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.TemplateProcessingSession.ClassFullName">
            <summary>
            The full name of the class that will be created to do the generation
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.TemplateProcessingSession.BaseClassName">
            <summary>
            The base class for the generated transformation class
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.TemplateProcessingSession.Language">
            <summary>
            The language that the template is written in. Defaults
            to CSharp
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.TemplateProcessingSession.LanguageOptions">
            <summary>
            Options set for the language of the template.
            </summary>
            <remarks>
            These options are passed directly to the CodeDOM provider
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.TemplateProcessingSession.CodeDomProvider">
            <summary>
            The CodeDomProvider used to build up the CodeDom tree of the code
            for the transformation class. This is constructed based on the 
            Language property.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.TemplateProcessingSession.Debug">
            <summary>
            Whether the transformation code is compiled in debug-mode.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.TemplateProcessingSession.HostSpecific">
            <summary>
            Whether the template is host-specific or not. If it is host-specific, 
            then a 'Host' property will be generated in the transformation code. 
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.TemplateProcessingSession.ProcessedOutputDirective">
            <summary>
            Whether or not we have already processed an output directive for this template file
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.TemplateProcessingSession.ProcessedTemplateDirective">
            <summary>
            Whether or not we have already processed a template directive for this template file
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.TemplateProcessingSession.FormatProvider">
            <summary>
            The FormatProvider to be used to convert expressions to strings. This is
            a CultureInfo object constructed from the culture specified in the template
            directive
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.TemplateProcessingSession.IncludeStack">
            <summary>
            The stack of files included
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.TemplateProcessingSession.TemplateContents">
            <summary>
            The contents of the template being processed
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.TemplateProcessingSession.TemplateFile">
            <summary>
            The path of the outermost template being processed
            </summary>
            <remarks>
            May be null for non file-based hosts.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.TemplateProcessingSession.CacheAssemblies">
            <summary>
            Whether to cache assemblies for this session.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.TemplateProcessingSession.CompilerOptions">
            <summary>
            Options to send to the compiler for the template control block code
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.TemplateProcessingSession.UserTransformationSession">
            <summary>
            Client-provided session object to flow through to the runtime AppDomain.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TextTemplating.SupportedLanguages">
            <summary>
            The languages that are supported in the template file
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TextTemplating.TextTransformation">
            <summary>
            Base class for generated text transformations
            </summary>
            <remarks>
            Any class specified in an inherits directive must itself inherit from this class.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.TextTransformation.TransformText">
            <summary>
            Generate the output text of the transformation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.TextTransformation.Initialize">
            <summary>
            Initialize the templating class
            </summary>
            <remarks>
            Derived classes are allowed to return errors from initialization 
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.TextTransformation.Finalize">
            <summary>
            Finaizlier.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.TextTransformation.Dispose">
            <summary>
            Disposes the state of this object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.TextTransformation.Dispose(System.Boolean)">
            <summary>
            Dispose implementation.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.TextTransformation.Write(System.String)">
            <summary>
            Write text directly into the generated output
            </summary>
            <param name="textToAppend"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.TextTransformation.WriteLine(System.String)">
            <summary>
            Write text directly into the generated output
            </summary>
            <param name="textToAppend"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.TextTransformation.Write(System.String,System.Object[])">
            <summary>
            Write formatted text directly into the generated output
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.TextTransformation.WriteLine(System.String,System.Object[])">
            <summary>
            Write formatted text directly into the generated output
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.TextTransformation.Error(System.String)">
            <summary>
            Raise an error
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.TextTransformation.Warning(System.String)">
            <summary>
            Raise a warning
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.TextTransformation.PushIndent(System.String)">
            <summary>
            Increase the indent
            </summary>
            <param name="indent">indent string</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.TextTransformation.PopIndent">
            <summary>
            Remove the last indent that was added with PushIndent
            </summary>
            <returns>The removed indent string</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.TextTransformation.ClearIndent">
            <summary>
            Remove any indentation
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.TextTransformation.ProvideBaseClassMembers">
            <summary>
            Get a set of CodeDOM members that match the real members on this class
            </summary>
            <remarks>
            If you add a member to this class, consider adding it to the list returned by this method.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.TextTransformation.GenerationEnvironment">
            <summary>
            The string builder that generation-time code is using to assemble generated output
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.TextTransformation.Errors">
            <summary>
            The error collection for the generation process
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.TextTransformation.indentLengths">
            <summary>
            A list of the lenghts of each indent that was added with PushIndent
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.TextTransformation.CurrentIndent">
            <summary>
            Gets the current indent we use when adding lines to the output
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.TextTransformation.Session">
            <summary>
            Current transformation session
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TextTemplating.TextTemplatingSession">
            <summary>
            Trivial implementation of text transformation session interface
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.TextTemplatingSession.#ctor">
            <summary>
            Basic constructor that creates a unique Id.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.TextTemplatingSession.#ctor(System.Guid)">
            <summary>
            Constructor to allow a specific Id to be used
            </summary>
            <remarks>
            Potential use for other serialization schemes
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.TextTemplatingSession.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.TextTemplatingSession.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialize the object
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.TextTemplatingSession.Id">
            <summary>
            The identity of the session
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TextTemplating.ToStringHelper">
            <summary>
            Utility class to produce culture-oriented representation of an object as a string.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.ToStringHelper.ToStringWithCulture(System.Object)">
            <summary>
            This is called from the compile/run appdomain to convert objects within an expression block
            to a string
            </summary>
            <param name="objectToConvert">The object to convert to a string</param>
            <returns>The object converted to a string using the template's culture</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.ToStringHelper.ProvideHelpers(System.Globalization.CultureInfo)">
            <summary>
            Get a set of CodeDOM members that provides the same functionality as this class as a property exposing a nested class.
            </summary>
            <param name="formatProvider">The default value of the format provider to use</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.ToStringHelper.ProvideNestedClass(System.Globalization.CultureInfo,System.CodeDom.CodeTypeMemberCollection)">
            <summary>
            Provide a nested class to handle converting to string in a culture-sensitive manner
            </summary>
            <param name="formatProvider"></param>
            <param name="members"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.ToStringHelper.FormatProvider">
            <summary>
            Gets or sets format provider to be used by ToStringWithCulture method.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TextTemplating.TransformationRunner">
            <summary>
            Class that is instantiated in the secondary app-domain and is responsible for
            compiling and running the transformation code. It has to be a MarshalByRefObject
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.TransformationRunner.LogError(System.String,System.Boolean)">
            <summary>
            Utility method for logging an error/warning
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.TransformationRunner.PreLoadAssemblies(System.String[])">
            <summary>
            Load the set of assemblies that we will need into the AppDomain
            </summary>
            <param name="assemblies"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.TransformationRunner.RunTransformation(Microsoft.VisualStudio.TextTemplating.TemplateProcessingSession,System.String,Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingEngineHost,System.String@)">
            <summary>
            This is the method that is called from the client app-domain to compile and run
            the transformation code
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.TransformationRunner.LocateAssembly(System.Boolean,System.String,System.String,System.String,System.Boolean,System.CodeDom.Compiler.CodeDomProvider,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Find or compile an assembly with the correct code for the given source
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.TransformationRunner.ValidateBaseClass(System.String,System.Collections.Generic.IList{System.String},System.Boolean)">
            <summary>
            Do the main validation of the transformation base class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.TransformationRunner.CreateTextTransformation(System.String,Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingEngineHost,System.Reflection.Assembly,Microsoft.VisualStudio.TextTemplating.Interfaces.ITextTemplatingSession)">
            <summary>
            Instantiates an object of the generated transformation class from the compiled assembly. 
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.TransformationRunner.GetMostDerivedProperty(System.Type,System.String)">
            <summary>
            Get the names property as close to the most-derived class as possible.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.TransformationRunner.Compile(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.CodeDom.Compiler.CodeDomProvider,System.String)">
            <summary>
            Compiles the source into an assembly using the given CodeDomProvider and the assembly references
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.TransformationRunner.AttemptAssemblyLoad(System.String)">
            <summary>
            Try to load an assembly by path
            </summary>
            <returns>null if no assembly found</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.TransformationRunner.Errors">
            <summary>
            A collection of the errors that are raised 
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\VisualStudio\VS10RTM\VisualStudioIntegration\Common\Assemblies\v4.0\Microsoft.VSSDK.UnitTestLibrary.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VSSDK.UnitTestLibrary</name>
    </assembly>
    <members>
        <member name="T:Microsoft.VsSDK.UnitTestLibrary.CallbackArgs">
            <summary>
            Arguments passed to the callback functions used by the GenericMockFactory
            </summary>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.CallbackArgs.#ctor(System.Object[])">
            <summary>
            Builds a new CallbackArgs using an array of objects as values for the parameters.
            </summary>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.CallbackArgs.GetParameter(System.Int32)">
            <summary>
            Get the value of a specific parameter.
            </summary>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.CallbackArgs.SetParameter(System.Int32,System.Object)">
            <summary>
            Set the value of a parameter.
            </summary>
        </member>
        <member name="P:Microsoft.VsSDK.UnitTestLibrary.CallbackArgs.ReturnValue">
            <summary>
            The return value of the method.
            </summary>
        </member>
        <member name="T:Microsoft.VsSDK.UnitTestLibrary.BaseMock">
            <summary>
            Base class for dynamicaly generated mock objects.
            </summary>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.BaseMock.AddMethodReturnValues(System.String,System.Object[])">
            <summary>
            Provide an array of values that will be used as return values in the 
            mock object method implementation. Index 0 being the return value index 1
            the value assigned to the first parameter (assuming it is ref/out),...
            To remove an entry, pass a null ArrayList.
            </summary>
            <param name="methodName">Name of the method the values are for. Case sensitive.</param>
            <param name="valuesToReturn">List of objects to return.
            Index 0 is the return value while higher indexes are used for ref/out parameters.</param>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.BaseMock.AddMethodCallback(System.String,System.EventHandler{Microsoft.VsSDK.UnitTestLibrary.CallbackArgs})">
            <summary>
            Provide a call back method that the mock object will call when
            methodName is called on the mock object.
            As long as no value were specified for AddMethodReturnValues,
            the callBackMethod can set the value in the array list to set
            which value should be returned (return value and ref/out parameters).
            To remove an entry pass null as the callBackMethod.
            </summary>
            <param name="methodName">Name of the method for which the callback is provided</param>
            <param name="callBackMethod">Method to call when methodName is called on the mock object</param>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.BaseMock.FunctionCalls(System.String)">
            <summary>
            Returns the number of times a function is called.
            </summary>
            <param name="name">Function name.</param>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.BaseMock.TotalCallsAllFunctions">
            <summary>
            Returns the sum of the number of times each function exposed by this
            object was called.
            </summary>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.BaseMock.IncrementFunctionCalls(System.String)">
            <summary>
            This function is called by the code generated by the GenericMockFactory
            when a function is called.
            </summary>
            <param name="name">Full name of the function.</param>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.BaseMock.ResetAllFunctionCalls">
            <summary>
            Clears all the data about the number of times aech function is called.
            </summary>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.BaseMock.ResetFunctionCalls(System.String)">
            <summary>
            Clears the data about the number of times a specific function is called.
            </summary>
            <param name="name">Function name.</param>
        </member>
        <member name="P:Microsoft.VsSDK.UnitTestLibrary.BaseMock.Item(System.String)">
            <summary>
            Any data that is needed in the implementation of the callback
            can be saved here.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.ConnectionPointHelper.AddConnectionPointsToContainer(Microsoft.VsSDK.UnitTestLibrary.BaseMock,System.Type[])">
            <summary>
            Given a mock object, this function will add to it a callback function to handle
            IConnectionPointContainer.FindConnectionPoint for all the event interfaces contained
            in the array passed as parameter.
            </summary>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.FileGenerator.CreateFile(System.String)">
            <summary>
            Create the specified path under a temp directory
            The file will have some content
            </summary>
            <param name="fileName">FileName, can include relative path</param>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.FileGenerator.CreateFileWithSpecificContent(System.String,System.String)">
            <summary>
            Create the specified path under a temp directory
            Add the specified content to the file
            </summary>
            <param name="fileName">FileName, can include relative path</param>
            <param name="content">Content to add to the file</param>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.FileGenerator.FilesContentIsSame(System.String,System.String,System.StringComparison)">
            <summary>
            Verify that the files have the same content
            </summary>
            <param name="path1">Full path of one of the file</param>
            <param name="path2">Full path of the other file</param>
            <param name="comparaisonType">What kind of comparaison to use</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VsSDK.UnitTestLibrary.GenericMockFactory">
            <summary>
            This class creates Mock object classes implementing specific interfaces.
            </summary>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.GenericMockFactory.#ctor(System.String,System.Type[])">
            <summary>
            Creates an instance of the factory for a specific class.
            </summary>
            <param name="className">The name of the class that this factory will create.</param>
            <param name="interfaces">The interfaces implemented by the generated class.</param>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.GenericMockFactory.GetInstance">
            <summary>
            This is similar to GetGeneratedType, but instead of returning the Type
            it returns an instance of that type
            </summary>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.GenericMockFactory.GetGeneratedType">
            <summary>
            Create a new class type dynamicly.
            The type will be derived from BaseMock.
            </summary>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.GenericMockFactory.CreateType(System.String,System.Type[])">
            <summary>
            Creates a new class with a given name derived from BaseMock and implementing 
            a specific set of interfaces.
            </summary>
            <param name="className">The name of the class to create.</param>
            <param name="interfaces">The interfaces implemented by the generated class.</param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.VsSDK.UnitTestLibrary.OleServiceProvider.Mutex">
            <summary>
            Defines an object that will be a mutex for this object for synchronizing thread calls.
            </summary>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.OleServiceProvider.CreateOleServiceProviderWithBasicServices">
            <summary>
            Use to create an IOleServiceProvider with the basic services required by
            MS.VS.Shell.Package.SetSite() base implementation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.OleServiceProvider.Dispose">
            <summary>
            The IDispose interface Dispose method for disposing the object determinastically.
            </summary>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.OleServiceProvider.AddService(System.Type,System.Object,System.Boolean)">
            <summary>
            Adds the given service to the service container.
            </summary>
            <param name="serviceType">The type of the service to add.</param>
            <param name="serviceInstance">An instance of the service.</param>
            <param name="shouldDisposeServiceInstance">true if the Dipose of the service provider is allowed to dispose the sevice instance.</param>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.OleServiceProvider.RemoveService(System.Type)">
            <devdoc>
            Removes the given service type from the service container.
            </devdoc>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.OleServiceProvider.Dispose(System.Boolean)">
            <summary>
            The method that does the cleanup.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.BaseRegistrationContextMock.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.BaseRegistrationContextMock.CreateKey(System.String)">
            <summary>
            Creates the key
            </summary>
            <param name="name">name of the key</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.BaseRegistrationContextMock.EscapePath(System.String)">
            <summary>
            Sets the escape path
            </summary>
            <param name="str">escape string</param>
            <returns>output after applying the escape string</returns>
        </member>
        <member name="P:Microsoft.VsSDK.UnitTestLibrary.BaseRegistrationContextMock.RegistryEntries">
            <summary>
            THe hash table containing all the values that are being added.
            </summary>
        </member>
        <member name="P:Microsoft.VsSDK.UnitTestLibrary.BaseRegistrationContextMock.CodeBase">
            <summary>
            Returns the code base to be used for the context
            </summary>
        </member>
        <member name="P:Microsoft.VsSDK.UnitTestLibrary.BaseRegistrationContextMock.ComponentPath">
            <summary>
            Returns the component path
            </summary>
        </member>
        <member name="P:Microsoft.VsSDK.UnitTestLibrary.BaseRegistrationContextMock.ComponentType">
            <summary>
            Returns the component type
            </summary>
        </member>
        <member name="P:Microsoft.VsSDK.UnitTestLibrary.BaseRegistrationContextMock.RootFolder">
            <summary>
            Returns the root folder of the target host
            </summary>
        </member>
        <member name="P:Microsoft.VsSDK.UnitTestLibrary.BaseRegistrationContextMock.InprocServerPath">
            <summary>
            Inprocserver path
            </summary>
        </member>
        <member name="P:Microsoft.VsSDK.UnitTestLibrary.BaseRegistrationContextMock.Log">
            <summary>
            Logger if looging is needed.
            </summary>
        </member>
        <member name="P:Microsoft.VsSDK.UnitTestLibrary.BaseRegistrationContextMock.RegistrationMethod">
            <summary>
            Registration method to use
            </summary>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.RegistrationKeyMock.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.RegistrationKeyMock.Close">
            <summary>
            Close the key
            </summary>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.RegistrationKeyMock.CreateSubkey(System.String)">
            <summary>
            Create a sub key under the key with name
            </summary>
            <param name="name">name of the sub key</param>
            <returns>Key instance</returns>
        </member>
        <member name="M:Microsoft.VsSDK.UnitTestLibrary.RegistrationKeyMock.SetValue(System.String,System.Object)">
            <summary>
            Set the reg key value
            </summary>
            <param name="valueName">name of the value</param>
            <param name="value">value</param>
        </member>
        <member name="P:Microsoft.VsSDK.UnitTestLibrary.RegistrationKeyMock.Keys">
            <summary>
            Collection of keys that are added.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\VisualStudio\VS10RTM\VisualStudioIntegration\Common\Assemblies\v4.0\Microsoft.VisualStudio.Shell.Design.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.VisualStudio.Shell.Design</name>
  </assembly>
  <members>
    <member name="T:Microsoft.VisualStudio.Shell.Design.AssemblyDeletedEventArgs">
      <summary>Contains event data for the <see cref="E:Microsoft.VisualStudio.Shell.Design.AssemblyDeletedEvent" /> that gets raised when an assembly is deleted.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.AssemblyDeletedEventArgs.#ctor(System.Reflection.Assembly)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.Design.AssemblyDeletedEventArgs" /> class for the supplied assembly.</summary>
      <param name="assembly"> The assembly that has been deleted.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assembly" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.AssemblyDeletedEventArgs.#ctor(System.Reflection.Assembly,System.Type[])">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.Design.AssemblyDeletedEventArgs" /> class for the supplied assembly and types.</summary>
      <param name="assembly">The assembly that has been deleted.</param>
      <param name="types">An array of <see cref="T:System.Type" /> containing objects for all the types defined in this assembly.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assembly" /> is null.-or-<paramref name="types" /> is null.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.AssemblyDeletedEventArgs.DeletedAssembly">
      <summary>Gets the <see cref="T:System.Reflection.Assembly" /> that has been deleted.</summary>
      <returns>An <see cref="T:System.Reflection.Assembly" /> that has been deleted.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.AssemblyDeletedEventArgs.DeletedTypes">
      <summary>Gets the set of <see cref="T:System.Type" /> that have been deleted.</summary>
      <returns>An array of <see cref="T:System.Type" /> containing deleted types.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.AssemblyDeletedEventHandler">
      <summary>The delegate for the <see cref="E:Microsoft.VisualStudio.Shell.Design.AssemblyDeletedEvent" /> that is raised when an assembly has been deleted.</summary>
      <param name="sender"> <see cref="T:System.Object" /> that raised the event.</param>
      <param name="e"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.AssemblyObsoleteEventArgs">
      <summary>Represents an argument class for the <see cref="E:Microsoft.VisualStudio.Shell.Design.DynamicTypeService.AssemblyObsolete" /> event. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.AssemblyObsoleteEventArgs.#ctor(System.Reflection.Assembly)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.Design.AssemblyObsoleteEventArgs" /> class.</summary>
      <param name="assembly">A dynamic assembly that may have changed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assembly" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.AssemblyObsoleteEventArgs.#ctor(System.Reflection.Assembly,System.Type[])">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.Design.AssemblyObsoleteEventArgs" /> class.</summary>
      <param name="assembly">A dynamic assembly that may have changed.</param>
      <param name="types">An array of <see cref="T:System.Type" /> containing objects for all the types defined in this assembly.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assembly" /> is null.-or-<paramref name="types" /> is null.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.AssemblyObsoleteEventArgs.ObsoleteAssembly">
      <summary>Gets the <see cref="T:System.Reflection.Assembly" /> that has become obsolete.</summary>
      <returns>An <see cref="T:System.Reflection.Assembly" /> that has become obsolete.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.AssemblyObsoleteEventArgs.ObsoleteTypes">
      <summary>Gets the set of <see cref="T:System.Type" /> that have become obsolete.</summary>
      <returns>An array of <see cref="T:System.Type" /> containing obsolete types.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.AssemblyObsoleteEventHandler">
      <summary>An event that gets raised when an assembly has become obsolete. This delegate cannot be inherited.</summary>
      <param name="sender">
        <see cref="T:System.Object" /> that raised the event.</param>
      <param name="e"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.AssemblyRefreshedEventArgs">
      <summary>An event that is raised when an assembly has been refreshed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.AssemblyRefreshedEventArgs.#ctor(System.Reflection.Assembly)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Design.AssemblyRefreshedEventArgs" />.</summary>
      <param name="assembly">The assembly that has been refreshed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.AssemblyRefreshedEventArgs.#ctor(System.Reflection.Assembly,System.Type[])"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.AssemblyRefreshedEventArgs.RefreshedAssembly">
      <summary>Gets the assembly that was refreshed.</summary>
      <returns>The <see cref="T:System.Reflection.Assembly" /> that was refreshed.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.AssemblyRefreshedEventArgs.RefreshedTypes">
      <summary>Gets the types that were refreshed.</summary>
      <returns>An array of types.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.AssemblyRefreshedEventHandler">
      <summary>A delegate that passes along the event that an assembly has become obsolete.</summary>
      <param name="sender">The sender of the message.</param>
      <param name="e"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.AttributeScope">
      <summary>Specifies the scope of an attribute.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Design.AttributeScope.Global">
      <summary>Global scope.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Design.AttributeScope.Language">
      <summary>Language scope.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Design.AttributeScope.File">
      <summary>File scope.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.ConstructorInfoWrapper"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ConstructorInfoWrapper.#ctor(System.Reflection.ConstructorInfo,System.Type)"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.ConstructorInfoWrapper.Attributes"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.ConstructorInfoWrapper.CallingConvention"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.ConstructorInfoWrapper.ContainsGenericParameters"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.ConstructorInfoWrapper.DeclaringType"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ConstructorInfoWrapper.Equals(System.Object)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ConstructorInfoWrapper.GetCustomAttributes(System.Boolean)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ConstructorInfoWrapper.GetCustomAttributes(System.Type,System.Boolean)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ConstructorInfoWrapper.GetCustomAttributesData"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ConstructorInfoWrapper.GetGenericArguments"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ConstructorInfoWrapper.GetHashCode"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ConstructorInfoWrapper.GetMethodBody"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ConstructorInfoWrapper.GetMethodImplementationFlags"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ConstructorInfoWrapper.GetParameters"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ConstructorInfoWrapper.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ConstructorInfoWrapper.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ConstructorInfoWrapper.IsDefined(System.Type,System.Boolean)"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.ConstructorInfoWrapper.IsGenericMethodDefinition"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.ConstructorInfoWrapper.MemberType"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.ConstructorInfoWrapper.MetadataToken"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.ConstructorInfoWrapper.MethodHandle"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.ConstructorInfoWrapper.Module"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.ConstructorInfoWrapper.Name"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.ConstructorInfoWrapper.ReflectedType"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ConstructorInfoWrapper.ToString"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.ConstructorInfoWrapper.UnderlyingConstructor"></member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.DesignerWindowPane">
      <summary>This class inherits from <see cref="T:Microsoft.VisualStudio.Shell.WindowPane" /> and extends it to provide designer features.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignerWindowPane.#ctor(System.ComponentModel.Design.DesignSurface)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.Design.DesignerWindowPane" /> class.</summary>
      <param name="surface">The design surface for which to create the window pane.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="surface" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignerWindowPane.AddDefaultServices">
      <summary>Adds the default services the window pane provides.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.DesignerWindowPane.CommandGuid">
      <summary>Gets the command UI GUID associated with this window pane.</summary>
      <returns>A GUID associated with this window pane.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignerWindowPane.Dispose(System.Boolean)">
      <summary>Disposes the design surface.</summary>
      <param name="disposing">true if <see cref="T:Microsoft.VisualStudio.Shell.Design.DesignerWindowPane" /> is being disposed.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.DesignerWindowPane.EditorView">
      <summary>Gets the editor view for this window pane.</summary>
      <returns>An editor view associated with this window pane.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignerWindowPane.GetAutomationObject(System.String)">
      <summary>Gets the automation object for this window pane.</summary>
      <returns>The automation object, or null.</returns>
      <param name="propName">The name of the automation object. This can be null or an empty string.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignerWindowPane.GetService(System.Type)">
      <summary>Gets the service of the specified type.</summary>
      <returns>A service object of type <paramref name="serviceType" />.-or-null if there is no service object of type <paramref name="serviceType" />.</returns>
      <param name="serviceType">A <see cref="T:System.Type" /> that specifies the type of service object to get.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignerWindowPane.GetToolboxItemSupported(Microsoft.VisualStudio.OLE.Interop.IDataObject)">
      <summary>Determines whether or not the given data object is supported by the designer.</summary>
      <returns>true if the data object represents a supported toolbox item.</returns>
      <param name="toolboxItem">
        <see cref="T:Microsoft.VisualStudio.OLE.Interop.IDataObject" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="toolboxItem" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignerWindowPane.Microsoft#VisualStudio#Shell#Interop#IVsBatchUpdate#FlushPendingUpdates(System.UInt32)">
      <summary>Called when Visual Studio wants the window pane to flush its state to the underlying buffer.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if successful.</returns>
      <param name="reserved">Reserved for the future use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignerWindowPane.Microsoft#VisualStudio#Shell#Interop#IVsDesignerInfo#get_DesignerTechnology(System.String@)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignerWindowPane.Microsoft#VisualStudio#Shell#Interop#IVsExtensibleObject#GetAutomationObject(System.String,System.Object@)">
      <summary>Gets the automation object for this window pane.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if successful.</returns>
      <param name="propName">The name of the automation object. This can be null or an empty string.</param>
      <param name="extObj">The automation object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignerWindowPane.Microsoft#VisualStudio#Shell#Interop#IVsToolboxUser#IsSupported(Microsoft.VisualStudio.OLE.Interop.IDataObject)">
      <summary>Determines whether the <see cref="F:System.ComponentModel.Design.StandardToolWindows.Toolbox" /> user supports the referenced data object.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dataObject">
        <see cref="T:Microsoft.VisualStudio.OLE.Interop.IDataObject" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignerWindowPane.Microsoft#VisualStudio#Shell#Interop#IVsToolboxUser#ItemPicked(Microsoft.VisualStudio.OLE.Interop.IDataObject)">
      <summary>Sends notification that an item in the <see cref="F:System.ComponentModel.Design.StandardToolWindows.Toolbox" /> is selected through a click, or by pressing ENTER.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dataObject">
        <see cref="T:Microsoft.VisualStudio.OLE.Interop.IDataObject" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignerWindowPane.Microsoft#VisualStudio#Shell#Interop#IVsWindowFrameNotify#OnDockableChange(System.Int32)">
      <summary>Notifies the <see cref="T:Microsoft.VisualStudio.Shell.Package" /> that a window's docked state is being altered.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fDockable">true if the window frame is being docked, otherwise false.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignerWindowPane.Microsoft#VisualStudio#Shell#Interop#IVsWindowFrameNotify#OnMove">
      <summary>Notifies the <see cref="T:Microsoft.VisualStudio.Shell.Package" /> that a window is being moved.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignerWindowPane.Microsoft#VisualStudio#Shell#Interop#IVsWindowFrameNotify#OnShow(System.Int32)">
      <summary>Notifies the <see cref="T:Microsoft.VisualStudio.Shell.Package" /> of a change in the window's display state.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fShow">Specifies the reason for the display state change.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignerWindowPane.Microsoft#VisualStudio#Shell#Interop#IVsWindowFrameNotify#OnSize">
      <summary>Notifies the <see cref="T:Microsoft.VisualStudio.Shell.Package" /> that a window is being resized.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignerWindowPane.OnClose">
      <summary>Called in response to the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowPane.ClosePane" /> method on the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowPane" /> interface.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignerWindowPane.OnFlush">
      <summary>This method is called when Visual Studio wants the window pane to flush its state to the underlying buffer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignerWindowPane.OnToolboxItemPicked(Microsoft.VisualStudio.OLE.Interop.IDataObject)">
      <summary>Called when the user double clicks or presses enter on a toolbox item on the Visual Studio toolbox.</summary>
      <returns>true if the toolbox item was used by a designer.</returns>
      <param name="toolboxItem">
        <see cref="T:Microsoft.VisualStudio.OLE.Interop.IDataObject" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="toolboxItem" /> is null.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.DesignerWindowPane.Surface">
      <summary>Gets the design surface.</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.DesignSurface" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.DesignSurfaceExtension">
      <summary>The base class for any object provided by a VSPackage to be called by the Visual Studio environment upon designer creation to customize or extend services and metadata provided by any implementation of <see cref="T:System.ComponentModel.Design.DesignSurface" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignSurfaceExtension.#ctor">
      <summary>Create a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.Design.DesignSurfaceExtension" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignSurfaceExtension.Dispose">
      <summary>Disposes this object and its resources.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignSurfaceExtension.Dispose(System.Boolean)">
      <summary>Disposes this object and its resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignSurfaceExtension.Finalize">
      <summary>Destroys the object.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignSurfaceExtension.Initialize(System.ComponentModel.Design.DesignSurface)">
      <summary>Initializes the design surface extension.</summary>
      <param name="surface">The design surface that is being created.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="surface" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignSurfaceExtension.OnComponentCreated(System.ComponentModel.IComponent)">
      <summary>This method is called when a new component is created but before that component is added to the designer.</summary>
      <param name="component">The component that has been created.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignSurfaceExtension.OnDesignerCreated(System.ComponentModel.Design.IDesigner)">
      <summary>This method is called when a new designer is created.</summary>
      <param name="designer">The designer that has been created.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignSurfaceExtension.OnDesignerCreated(System.ComponentModel.IComponent,System.ComponentModel.Design.IDesigner,System.Boolean)">
      <summary>This method is called when a new designer is created.</summary>
      <param name="component">The component that has been created.</param>
      <param name="designer">The designer that has been created.</param>
      <param name="rootDesigner">The root designer.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="designer" /> is null.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.DesignSurfaceExtension.Surface">
      <summary>Gets the design surface this extension was initialized with.</summary>
      <returns>The <see cref="T:System.ComponentModel.Design.DesignSurface" /> this extension was initialized with, or null of the extension has been disposed.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.DesignSurfaceExtensionAttribute">
      <summary>Notifies the Visual Studio environment that a VSPackage provides a <see cref="T:System.Type" /> implementing a service to customize or extend services provided by any implementation of <see cref="T:System.ComponentModel.Design.DesignSurface" /> at designer load time.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignSurfaceExtensionAttribute.#ctor(System.Type)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.Design.DesignSurfaceExtensionAttribute" /> class specifying a given object as providing a VSPackage's implementation of <see cref="T:Microsoft.VisualStudio.Shell.Design.DesignSurfaceExtension" />.</summary>
      <param name="extensionType">The <see cref="T:System.Type" /> of the object providing an implementation of <see cref="T:Microsoft.VisualStudio.Shell.Design.DesignSurfaceExtension" /> to customize design surfaces.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="extensionType" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="extensionType " />does not derive from <see cref="T:Microsoft.VisualStudio.Shell.Design.DesignSurfaceExtension" />.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.DesignSurfaceExtensionAttribute.ExtensionType">
      <summary>The <see cref="T:System.Type" /> of the object registered as providing a VSPackage with an implementation of <see cref="T:Microsoft.VisualStudio.Shell.Design.DesignSurfaceExtension" /> to customize design surfaces.</summary>
      <returns>The <see cref="T:System.Type" /> of the <see cref="T:Microsoft.VisualStudio.Shell.Design.DesignSurfaceExtension" /> implementation provided by the <see cref="T:Microsoft.VisualStudio.Shell.Design.DesignSurfaceExtension" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.DesignSurfaceExtensionAttribute.LoadAtIdle">
      <summary>Controls when, relative to the loading of a designer used by a VSPackage, the extensions provided by the implementation of the <see cref="T:Microsoft.VisualStudio.Shell.Design.DesignSurfaceExtensionAttribute" /> registered by <see cref="T:Microsoft.VisualStudio.Shell.Design.DesignSurfaceExtensionAttribute" /> are installed.</summary>
      <returns>A Boolean value is returned:trueThe object providing design surface modifications by implementing <see cref="T:Microsoft.VisualStudio.Shell.Design.DesignSurfaceExtension" /> will be instantiated and initialized only during the idle period after the designer used by the VSPackage has finished loading.falseThe object providing design surface modifications by implementing <see cref="T:Microsoft.VisualStudio.Shell.Design.DesignSurfaceExtension" /> will be instantiated and initialized when a designer starts up.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignSurfaceExtensionAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Registers the design surface extension.</summary>
      <param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> that describes the location and values of the registry key.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignSurfaceExtensionAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Removes the design surface extension registry key.</summary>
      <param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> that describes the location and values of the registry key.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.DynamicTypeService">
      <summary>Provides instances of <see cref="T:System.ComponentModel.Design.ITypeResolutionService" /> for a project. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DynamicTypeService.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Design.DynamicTypeService" />.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Shell.Design.DynamicTypeService.AssemblyDeleted">
      <summary>Notifies clients when an assembly has been deleted.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Shell.Design.DynamicTypeService.AssemblyObsolete">
      <summary>Notifies clients when an assembly has been made obsolete, that is, when it no longer resolves.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Shell.Design.DynamicTypeService.AssemblyRefreshed">
      <summary>Notifies clients when an assembly has been refreshed, for example when it has been rebuilt and the name or configuration has changed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DynamicTypeService.CreateDynamicAssembly(System.String)">
      <summary>This method creates a new assembly whose contents are the given assembly file.</summary>
      <returns>
        <see cref="T:System.Reflection.Assembly" />.</returns>
      <param name="fileName">The name of the assembly.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DynamicTypeService.GetContextTypeResolver(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>Gets a type resolver for the specified hierarchy node.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Shell.Design.DynamicTypeService.ContextTypeResolver" />.</returns>
      <param name="hierarchy">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface for the node.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DynamicTypeService.GetContextTypeResolver(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32)">
      <summary>Gets a type resolver for the specified hierarchy node and item ID.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Shell.Design.DynamicTypeService.ContextTypeResolver" />.</returns>
      <param name="hierarchy">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the hierarchy node.</param>
      <param name="itemId"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DynamicTypeService.GetTypeDiscoveryService(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>Gets a type discovery service for the specified hierarchy node.</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.ITypeDiscoveryService" />.</returns>
      <param name="hierarchy">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the hierarchy node.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DynamicTypeService.GetTypeDiscoveryService(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32)">
      <summary>Gets a type discovery service for the specified hierarchy node and item ID.</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.ITypeDiscoveryService" />.</returns>
      <param name="hierarchy">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the <see cref="T:Microsoft.VisualStudio.Package.HierarchyNode" />.</param>
      <param name="itemId"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DynamicTypeService.GetTypeResolutionService(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>Gets a type resolution service for a given hierarchy node.</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.ITypeResolutionService" />.</returns>
      <param name="hierarchy">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the <see cref="T:Microsoft.VisualStudio.Package.HierarchyNode" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DynamicTypeService.GetTypeResolutionService(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32)">
      <summary>Gets a type resolution service for a given hierarchy node and item ID.</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.ITypeResolutionService" />.</returns>
      <param name="hierarchy">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the <see cref="T:Microsoft.VisualStudio.Package.HierarchyNode" />.</param>
      <param name="itemId"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DynamicTypeService.IsDynamicAssembly(System.Reflection.AssemblyName)">
      <summary>Determines whether or not the specified assembly has been dynamically created.</summary>
      <returns>true if the assembly was dynamically created, otherwise false.</returns>
      <param name="name"> <see cref="T:System.Reflection.AssemblyName" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DynamicTypeService.OnAssemblyDeleted(Microsoft.VisualStudio.Shell.Design.AssemblyDeletedEventArgs)">
      <summary>Raised when an assembly has been deleted.</summary>
      <param name="e"> <see cref="T:Microsoft.VisualStudio.Shell.Design.AssemblyDeletedEventArgs" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DynamicTypeService.OnAssemblyObsolete(Microsoft.VisualStudio.Shell.Design.AssemblyObsoleteEventArgs)">
      <summary>Raised when an assembly has been made obsolete.</summary>
      <param name="e">
        <see cref="T:Microsoft.VisualStudio.Shell.Design.AssemblyObsoleteEventArgs" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DynamicTypeService.OnAssemblyRefreshed(Microsoft.VisualStudio.Shell.Design.AssemblyRefreshedEventArgs)">
      <summary>Raised when an assembly has been refreshed, for example when it has been rebuilt and the name or configuration has changed.</summary>
      <param name="e">
        <see cref="T:Microsoft.VisualStudio.Shell.Design.AssemblyRefreshedEventArgs" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DynamicTypeService.OnTypeObsolete(Microsoft.VisualStudio.Shell.Design.TypeObsoleteEventArgs)">
      <summary>Raised when a type has been made obsolete, that is, when it no longer resolves.</summary>
      <param name="e">
        <see cref="T:Microsoft.VisualStudio.Shell.Design.TypeObsoleteEventArgs" />.</param>
    </member>
    <member name="E:Microsoft.VisualStudio.Shell.Design.DynamicTypeService.TypeObsolete">
      <summary>Notifies clients when a type has been made obsolete, that is, when it no longer resolves.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.DynamicTypeService.ContextTypeResolver">
      <summary>An <see cref="T:System.IDisposable" /> object that routes assembly/type resolution issues to the <see cref="T:System.ComponentModel.Design.ITypeResolutionService" /> for the given hierarchy. It is instantiated by a call to <see cref="M:Microsoft.VisualStudio.Shell.Design.DynamicTypeService.GetContextTypeResolver(T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyhierarchy)" />.  </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DynamicTypeService.ContextTypeResolver.#ctor(System.ComponentModel.Design.ITypeResolutionService)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Design.DynamicTypeService.ContextTypeResolver" /> for the specified service.</summary>
      <param name="resolver">
        <see cref="T:System.ComponentModel.Design.ITypeResolutionService" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DynamicTypeService.ContextTypeResolver.System#IDisposable#Dispose">
      <summary>Disposes the object and its resources.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.GlobalObject">
      <summary>Provides the base class for types whose instances are accessible for each project.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObject.#ctor(System.Type,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalObject" /> class.</summary>
      <param name="objectType">The <see cref="T:System.Type" /> of the global object.</param>
      <param name="objectName">A <see cref="T:System.String" /> containing the name of the global object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectType" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObject.ClearInstance">
      <summary>Clears the <see cref="P:Microsoft.VisualStudio.Shell.Design.GlobalObject.Instance" /> property.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Shell.Design.GlobalObject.Created">
      <summary>Occurs when an instance of the global object is created.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObject.CreateInstance">
      <summary>Creates a cached instance of the global object.</summary>
      <returns>An <see cref="T:System.Object" /> that represents an instance of the global object class.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObject.Equals(System.Object)">
      <summary>Checks if the specified object is equal to the current global object.</summary>
      <returns>true if the two objects are equal; otherwise, false.</returns>
      <param name="o">The object to compare with this <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalObject" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObject.GetHashCode">
      <summary>Returns the hash code for the current global object.</summary>
      <returns>An <see cref="T:System.Int32" /> that specifies a hash value for the current global object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObject.GetSerializer(System.Type)">
      <summary>Returns the checked serializer of the specified type for the global object.</summary>
      <returns>A serializer of the specified type if supported; otherwise, null.</returns>
      <param name="serializerType">The type of serializer to retrieve.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serializerType" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The non-null serializer retrieved is itself not serializable.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObject.GetSerializerCore(System.Type)">
      <summary>Returns a serializer of the specified type for the global object.</summary>
      <returns>A serializer of the specified type if supported; otherwise, null.</returns>
      <param name="serializerType">The type of serializer to retrieve.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.GlobalObject.Instance">
      <summary>Gets an on-demand created instance of the global object.</summary>
      <returns>An <see cref="T:System.Object" /> that represents an instance of the global object class.</returns>
      <exception cref="T:System.InvalidOperationException">The resulting instance is not serializable, which indicates an incorrect implementation.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.GlobalObject.Name">
      <summary>Gets the recommended name of the global object.</summary>
      <returns>A <see cref="T:System.String" /> that contains the recommended name of the global object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObject.OnCreated(System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.VisualStudio.Shell.Design.GlobalObject.Created" /> event. </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObject.PerformChange">
      <summary>Reinitializes the global object and notifies users to changes to its state or shape.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObject.PerformRemove">
      <summary>Clears the global object and notifies users of its removal.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection">
      <summary>A strongly typed collection of global objects. The collection can be read-write or read-only. A read-write collection can be cheaply passed to the constructor of GlobalObjectCollection to make a read only version without copying the collection.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.#ctor">
      <summary>Initializes a new instance of a strongly-typed collection of global objects.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.#ctor(Microsoft.VisualStudio.Shell.Design.GlobalObject[])">
      <summary>Initializes a new instance of a strongly-typed collection of global objects initially populated by an array of global objects.</summary>
      <param name="items">An array of <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalObject" /> objects to initially populate the collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.#ctor(Microsoft.VisualStudio.Shell.Design.GlobalObject[],System.Boolean)">
      <summary>Initializes a new instance of a strongly-typed collection of global objects initially populated by an array of global objects.</summary>
      <param name="items">An array of <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalObject" /> objects to initially populate the collection.</param>
      <param name="readOnly">If true, the collection cannot be modified. The default value for <paramref name="readOnly" /> if not passed is false.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.#ctor(Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection)">
      <summary>Initializes a new instance of a strongly-typed collection of global objects initially populated by the array <paramref name="items" />.</summary>
      <param name="items">A collection of <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalObject" /> objects to initially populate the collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.#ctor(Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection,System.Boolean)">
      <summary>Initializes a new instance of global objects for the specified global object collection for the specified read/write access.</summary>
      <param name="items">A collection of objects to initially populate the collection.</param>
      <param name="readOnly">If true, the collection cannot be modified. The default value for <paramref name="readOnly" /> if not passed is false.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.Add(Microsoft.VisualStudio.Shell.Design.GlobalObject)">
      <summary>Adds a new item to the collection.</summary>
      <param name="item">An object to be appended to the end of the collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.AddRange(Microsoft.VisualStudio.Shell.Design.GlobalObject[])">
      <summary>Appends the objects in an array to the end of the collection.</summary>
      <param name="items">An array of objects to be appended to the collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.AddRange(Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection)">
      <summary>Appends the objects in an array to the end of the collection.</summary>
      <param name="items">A collection of objects to be appended to the collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.Clear">
      <summary>Clears the contents of this collection.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.Contains(Microsoft.VisualStudio.Shell.Design.GlobalObject)">
      <summary>Determines whether this collection contains the given item.</summary>
      <returns>true if the collection contains the object, otherwise false.</returns>
      <param name="item">An object that will have its collection membership verified.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.CopyTo(Microsoft.VisualStudio.Shell.Design.GlobalObject[],System.Int32)">
      <summary>Copies the contents of this collection to the given array starting at the given index.</summary>
      <param name="array">A destination for copied objects.</param>
      <param name="index">The position in the collection at which to begin copying.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.Count">
      <summary>Returns the number of items in this collection.</summary>
      <returns>The number of items in this collection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.GetEnumerator">
      <summary>Returns an enumerator for this collection.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.IndexOf(Microsoft.VisualStudio.Shell.Design.GlobalObject)">
      <summary>Gets the position of an object in the collection.</summary>
      <returns>The position of the object in the collection, or -1 if the object is not in the collection.</returns>
      <param name="item">An item that should have its offset retrieved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.Insert(System.Int32,Microsoft.VisualStudio.Shell.Design.GlobalObject)">
      <summary>Inserts a new item into the collection at the given index.</summary>
      <param name="index">The position in the collection where the item should be inserted.</param>
      <param name="item">The item to be inserted.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.IsFixedSize">
      <summary>Determines whether this collection's size can be changed.</summary>
      <returns>true if the size cannot be changed, false if it can.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.IsReadOnly">
      <summary>Determines whether this collection is read-only.</summary>
      <returns>true if the collection is read-only, false if it is read-write.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.IsSynchronized">
      <summary>Determines whether this collection is synchronized for multi-threaded access.</summary>
      <returns>true if the collection is synchronized, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.Item(System.Int32)">
      <summary>Gets or sets the item at the given index.</summary>
      <returns>The item.</returns>
      <param name="index">The position of the requested item in the collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.Remove(Microsoft.VisualStudio.Shell.Design.GlobalObject)">
      <summary>Removes an object from the collection.</summary>
      <param name="item">The object to be removed from the collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.RemoveAt(System.Int32)">
      <summary>Removes an object from the collection at the specified position.</summary>
      <param name="index">The position of the item in the collection.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.SyncRoot">
      <summary>Gets the object on which to synchronize access.</summary>
      <returns>The object on which to synchronize access.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the contents of this collection to the given array starting at the given index.</summary>
      <param name="array">The destination for the copied items.</param>
      <param name="index">The position in the array at which to begin copying.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.System#Collections#IList#Add(System.Object)">
      <summary>Adds an object to the collection.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeded, otherwise an error code.</returns>
      <param name="item">The object to be added.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.System#Collections#IList#Contains(System.Object)">
      <summary>Determines whether an object is in the collection.</summary>
      <returns>true if the object is in the collection, otherwise false.</returns>
      <param name="item">An item to find.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>Gets the position of an object in the collection.</summary>
      <returns>The position of the object in the collection.</returns>
      <param name="item">The item to find.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Adds an item to the collection at the specified position.</summary>
      <param name="index">The position at which the <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to be inserted in the collection.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.System#Collections#IList#Item(System.Int32)">
      <summary>Gets or sets the global object at the specified index. </summary>
      <returns>The global object.</returns>
      <param name="index">The index of the list.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.System#Collections#IList#Remove(System.Object)">
      <summary>Removes an object from the collection.</summary>
      <param name="item">The object to be removed.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.GlobalObjectDescriptionAttribute">
      <summary>Allows global object providers to tag the global object instances they provide with additional metadata. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectDescriptionAttribute.#ctor(Microsoft.VisualStudio.Shell.Design.GlobalObject)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalObjectDescriptionAttribute" /> for the specified global object.</summary>
      <param name="globalObject">The global object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectDescriptionAttribute.#ctor(Microsoft.VisualStudio.Shell.Design.GlobalObject,System.Collections.IDictionary)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalObjectDescriptionAttribute" /> for the specified global object and custom data.</summary>
      <param name="globalObject">The global object.</param>
      <param name="customData">An <see cref="T:System.Collections.IDictionary" /> to store custom data.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.GlobalObjectDescriptionAttribute.CustomData">
      <summary>Gets the custom data.</summary>
      <returns>An <see cref="T:System.Collections.IDictionary" /> of custom data.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.GlobalObjectDescriptionAttribute.GlobalObject">
      <summary>Gets the global object to which the custom data should apply.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalObject" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.GlobalObjectProvider">
      <summary>Provides a base class for accessing one or more global object types. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectProvider.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalObjectProvider" />.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Shell.Design.GlobalObjectProvider.CollectionChanged">
      <summary>Occurs when there is a change to the collection of global object or global types.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectProvider.Dispose">
      <summary>Disposes this global object provider.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectProvider.Dispose(System.Boolean)">
      <summary>Disposes this object and its resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectProvider.GetGlobalObjects(EnvDTE.Project)">
      <summary>Gets a collection of global objects for the specified project. </summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection" /> containing the global objects for the specified project.</returns>
      <param name="project">The <see cref="T:EnvDTE.Project" /> to obtain global objects from.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="project" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The implementation of <see cref="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectProvider.GetGlobalObjectsCore(EnvDTE.Project,System.Type)" /> returned null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectProvider.GetGlobalObjects(EnvDTE.Project,System.Type)">
      <summary>Gets a collection of global objects for the specified project that match the specified type.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection" /> containing the global objects of the specified <see cref="T:System.Type" /> for the specified project.</returns>
      <param name="project">The <see cref="T:EnvDTE.Project" /> to obtain global objects from. </param>
      <param name="baseType">The <see cref="T:System.Type" /> of the <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalObject" /> to filter on. Can be null to indicate no filtering.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="project" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The implementation of <see cref="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectProvider.GetGlobalObjectsCore(EnvDTE.Project,System.Type)" /> returned null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectProvider.GetGlobalObjectsCore(EnvDTE.Project,System.Type)">
      <summary>When overridden in a derived class, returns a collection of global objects for the specified project that match the specified type.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection" /> containing the global objects of the specified <see cref="T:System.Type" /> for the specified project.</returns>
      <param name="project">The <see cref="T:EnvDTE.Project" /> to obtain global objects from. </param>
      <param name="baseType">The <see cref="T:System.Type" /> of the <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalObject" /> to filter on. Can be null to indicate no filtering.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectProvider.GetGlobalTypes(EnvDTE.Project)">
      <summary>Gets a collection of global types for the specified project that match the specified type.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection" /> containing the global types for the specified project.</returns>
      <param name="project">The <see cref="T:EnvDTE.Project" />  to obtain global types from. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="project" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The implementation of <see cref="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectProvider.GetGlobalTypesCore(EnvDTE.Project)" /> returned null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectProvider.GetGlobalTypesCore(EnvDTE.Project)">
      <summary>Gets a collection of global types for the specified project that match the specified type. </summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection" /> containing the global types for the specified project.</returns>
      <param name="project">The <see cref="T:EnvDTE.Project" /> from which to obtain global types.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectProvider.GetService(System.Type)">
      <summary>Gets the requested service.</summary>
      <returns>An <see cref="T:System.Object" /> that represents an instance of the requested service; otherwise, null if no such service exists.</returns>
      <param name="serviceType">The <see cref="T:System.Type" /> of service to retrieve </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectProvider.Microsoft#VisualStudio#OLE#Interop#IObjectWithSite#GetSite(System.Guid@,System.IntPtr@)">
      <summary>Gets the service provider.</summary>
      <param name="riid">The GUID of the service provider.</param>
      <param name="ppv">[out] Returns a pointer to the service provider as an <see cref="T:Microsoft.VisualStudio.OLE.Interop.IObjectWithSite" />. </param>
      <exception cref="T:System.Runtime.InteropServices.COMException">An internal <see cref="T:System.IServiceProvider" /> has not been set by a call to <see cref="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectProvider.Microsoft.VisualStudio.OLE.Interop.IObjectWithSite.SetSite(System.Object)" /> or the provider cannot be cast to the IObjectWithSite type.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectProvider.Microsoft#VisualStudio#OLE#Interop#IObjectWithSite#SetSite(System.Object)">
      <summary>Sets the <see cref="T:System.IserviceProvider" />. </summary>
      <param name="site">The service provider.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectProvider.OnCollectionChanged(System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.VisualStudio.Shell.Design.GlobalObjectProvider.CollectionChanged" /> event. </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.GlobalObjectProviderFactory">
      <summary>Provides a base class for enumerating global object providers.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectProviderFactory.#ctor">
      <summary>Initializes an instance of the <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalObjectProviderFactory" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectProviderFactory.GetProviders">
      <summary>Returns an array of all the currently available global object providers.</summary>
      <returns>An array containing instances of the currently available <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalObjectProvider" /> instances.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.GlobalObjectService">
      <summary>Maintains the current table of global object providers. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectService.#ctor(System.IServiceProvider,EnvDTE.Project,System.Type)">
      <summary>Initializes an new instance of the <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalObjectService" /> class</summary>
      <param name="provider">The <see cref="T:System.IServiceProvider" /> that will be used to obtain other services.</param>
      <param name="project">The <see cref="T:EnvDTE.Project" /> associated with this global object service.</param>
      <param name="serializerType">The serializer <see cref="T:System.Type" /> supported by the current designer loader.</param>
      <exception cref="T:System.ArgumentNullException">One or more of the parameters is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectService.GetGlobalObjects">
      <summary>Returns a collection of all the currently available global objects.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection" /> containing the currently available global objects.</returns>
      <exception cref="T:System.NotSupportedException">One of the queried global service provider factories returned null provider or provider collection.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectService.GetGlobalObjects(System.Type)">
      <summary>Returns a collection of currently available global objects that are of the specified type.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection" /> containing the currently available global objects.</returns>
      <param name="baseType">The <see cref="T:System.Type" /> of the <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalObject" /> to filter on.</param>
      <exception cref="T:System.NotSupportedException">One of the queried global service provider factories returned null provider or provider collection.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectService.GetGlobalTypes">
      <summary>Returns a collection of currently available global types.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection" /> containing the currently available global types.</returns>
      <exception cref="T:System.NotSupportedException">One of the queried global service provider factories returned null provider or provider collection.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectService.System#IDisposable#Dispose">
      <summary>Disposes <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalObjectService" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.GlobalType">
      <summary>Provides the base class for types that are defined in the project or generated from code.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalType.#ctor(System.Type)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalType" />.</summary>
      <param name="objectType">The <see cref="T:System.Type" /> of the global type.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectType" /> is null.</exception>
    </member>
    <member name="E:Microsoft.VisualStudio.Shell.Design.GlobalType.Changed">
      <summary>Occurs after the current global type is modified.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Shell.Design.GlobalType.Changing">
      <summary>Occurs before the current global type is modified.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalType.ClearObjectType">
      <summary>Clears the <see cref="P:Microsoft.VisualStudio.Shell.Design.GlobalType.ObjectType" /> property. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalType.Equals(System.Object)">
      <summary>Checks if the specified object is equal to the current global type.</summary>
      <returns>true if the two objects are equal; otherwise, false.</returns>
      <param name="o">The object to compare with this <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalType" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalType.GetHashCode">
      <summary>Returns the hash code for the current global type.</summary>
      <returns>An <see cref="T:System.Int32" /> that specifies a hash value for the current global type.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalType.GetObjectType">
      <summary>Returns the type of this global type.</summary>
      <returns>The <see cref="T:System.Type" /> of the <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalType" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.GlobalType.ObjectType">
      <summary>Gets the checked type of the <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalType" />.</summary>
      <returns>The <see cref="T:System.Type" /> of the <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalType" />.</returns>
      <exception cref="T:System.InvalidOperationException">The global object's type resolved to null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalType.OnChanged(System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.VisualStudio.Shell.Design.GlobalType.Changed" /> event.</summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalType.OnChanging(System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.VisualStudio.Shell.Design.GlobalType.Changing" /> event.</summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalType.OnRemoved(System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.VisualStudio.Shell.Design.GlobalType.Removed" /> event.</summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalType.OnRemoving(System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.VisualStudio.Shell.Design.GlobalType.Removing" /> event.</summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalType.PerformChange">
      <summary>Reinitializes the global type and notifies users to changes to its shape.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalType.PerformRemove">
      <summary>Clears the global type and notifies users of its removal.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Shell.Design.GlobalType.Removed">
      <summary>Occurs after the current global type is removed from use.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Shell.Design.GlobalType.Removing">
      <summary>Occurs before the current global type is removed from use.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection">
      <summary>A strongly typed collection of global types.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.#ctor">
      <summary>Creates a strongly-typed collection of global objects.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.#ctor(Microsoft.VisualStudio.Shell.Design.GlobalType[])">
      <summary>Creates a strongly-typed collection of global objects.</summary>
      <param name="items">The objects added to the collection in this overloaded constructor.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.#ctor(Microsoft.VisualStudio.Shell.Design.GlobalType[],System.Boolean)">
      <summary>Creates a strongly-typed collection of global objects.</summary>
      <param name="items">The objects added to the collection in this overloaded constructor.</param>
      <param name="readOnly">Indicates whether or not the collection may be subsequently modified.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.#ctor(Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection)">
      <summary>Creates a strongly-typed collection of global objects.</summary>
      <param name="items">The objects added to the collection in this overloaded constructor.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.#ctor(Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection,System.Boolean)">
      <summary>Creates a strongly-typed collection of global objects.</summary>
      <param name="items">The objects added to the collection in this overloaded constructor.</param>
      <param name="readOnly">Indicates whether or not the collection may be subsequently modified.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.Add(Microsoft.VisualStudio.Shell.Design.GlobalType)">
      <summary>Adds a new item to the collection.</summary>
      <param name="item">The object to be added to the collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.AddRange(Microsoft.VisualStudio.Shell.Design.GlobalType[])">
      <summary>Adds a range of items to the collection.</summary>
      <param name="items">The objects to be added to the collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.AddRange(Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection)">
      <summary>Adds a range of items to the collection.</summary>
      <param name="items">The objects to be added to the collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.Clear">
      <summary>Clears the contents of this collection.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.Contains(Microsoft.VisualStudio.Shell.Design.GlobalType)">
      <summary>Determines whether the specified item is in the collection</summary>
      <returns>true if this collection contains the given item, otherwise false.</returns>
      <param name="item">The item to find.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.CopyTo(Microsoft.VisualStudio.Shell.Design.GlobalType[],System.Int32)">
      <summary>Copies the contents of this collection to the given array starting at the given <paramref name="index" />.</summary>
      <param name="array">The destination array.</param>
      <param name="index">The index of the array at which to begin copying.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.Count">
      <summary>Gets the number of items in this collection.</summary>
      <returns>The number of items in this collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.Empty">
      <summary>Gets an empty instance of this collection.</summary>
      <returns>An empty instance of this collection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.GetEnumerator">
      <summary>Returns an enumerator you can use to enumerate through this collection.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.IndexOf(Microsoft.VisualStudio.Shell.Design.GlobalType)">
      <summary>Get the position of the specified item.</summary>
      <returns>The index at which the item was found, or -1 if it is not in the collection.</returns>
      <param name="item">The item to find.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.Insert(System.Int32,Microsoft.VisualStudio.Shell.Design.GlobalType)">
      <summary>Inserts an item into the underlying list at the specified position.</summary>
      <param name="index">The position at which the item should be inserted.</param>
      <param name="item">The object to be inserted into the collection.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.IsFixedSize">
      <summary>Gets whether or not this collection's size can be changed.</summary>
      <returns>true if this collection's size cannot be changed, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.IsReadOnly">
      <summary>Gets whether the collection is read-only.</summary>
      <returns>true if this collection is read-only, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.IsSynchronized">
      <summary>Determines whether this collection is synchronized for multi-threaded access.</summary>
      <returns>Always returns false. Instances of <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection" /> are never synchronized.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.Item(System.Int32)">
      <summary>Gets an item at the specified position.</summary>
      <returns>The item found at the given index.</returns>
      <param name="index">The position of the item within the collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.Remove(Microsoft.VisualStudio.Shell.Design.GlobalType)">
      <summary>Remove an item from the collection.</summary>
      <param name="item">The object to be removed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.RemoveAt(System.Int32)">
      <summary>Removes the item at the specified position.</summary>
      <param name="index">The position of the item to be removed.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.SyncRoot">
      <summary>Returns an object to use for thread-safe access.</summary>
      <returns>An object to use for thread-safe access.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies objects to the specified array starting at the specified position.</summary>
      <param name="array">The target array.</param>
      <param name="index">The position in the array at which to start copying.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.System#Collections#IList#Add(System.Object)">
      <summary>Adds an item to the collection.</summary>
      <returns>The position at which the item was added.</returns>
      <param name="item">The item to be added to the collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.System#Collections#IList#Contains(System.Object)">
      <summary>Determines whether the specified item is in the collection.</summary>
      <returns>true if the object can be found in the collection, otherwise false.</returns>
      <param name="item">The item to find.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>Gets the position of an item in the collection.</summary>
      <returns>The position of the item, or -1 if it was not found.</returns>
      <param name="item">The item to find.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserts an object in the collection at the specified position.</summary>
      <param name="index">The position at which the item should be inserted.</param>
      <param name="item">The item to be inserted.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.System#Collections#IList#Item(System.Int32)">
      <summary>Gets or sets the item at the specified position in the collection.</summary>
      <returns>The item at the specified position.</returns>
      <param name="index">The index of the item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.System#Collections#IList#Remove(System.Object)">
      <summary>Removes an item from the collection.</summary>
      <param name="item">The item to be removed.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.OleUndoEngine">
      <summary>Provides a default implementation of undo management for designers.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.OleUndoEngine.#ctor(System.IServiceProvider)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Design.OleUndoEngine" />.</summary>
      <param name="provider">A instance of the <see cref="T:System.IServiceProvider" /> interface to be used to obtain system resources by the instance of <see cref="T:Microsoft.VisualStudio.Shell.Design.OleUndoEngine" />.</param>
      <exception cref="T:System.InvalidOperationException">Thrown if <see cref="T:System.IServiceProvider" /> does not supply necessary services.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.OleUndoEngine.AddUndoUnit(System.ComponentModel.Design.UndoEngine.UndoUnit)">
      <summary>Adds the undo unit to the undo unit manager.</summary>
      <param name="unit">
        <see cref="T:Microsoft.VisualStudio.Shell.Design.OleUndoEngine.UndoUnit" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.OleUndoEngine.CreateUndoUnit(System.String,System.Boolean)">
      <summary>Creates a new undo unit.</summary>
      <returns>The created <see cref="T:System.ComponentModel.Design.UndoEngine.UndoUnit" />.</returns>
      <param name="name">The name of the undo unit.</param>
      <param name="primary">true if the undo unit is primary, otherwise false.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.OleUndoEngine.DiscardUndoUnit(System.ComponentModel.Design.UndoEngine.UndoUnit)">
      <summary>Closes this unit if it is a parent undo unit.</summary>
      <param name="unit">
        <see cref="T:System.ComponentModel.Design.UndoEngine.UndoUnit" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.OleUndoEngine.Dispose(System.Boolean)">
      <summary>Disposes the resources of this object.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.OleUndoEngine.Microsoft#VisualStudio#TextManager#Interop#IVsLinkedUndoClient#OnInterveningUnitBlockingLinkedUndo">
      <summary>Indicates that the undo manager is blocking another undo manager from executing a linked action. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.OleUndoEngine.UndoUnit">
      <summary>Extends support for encapsulating a unit of work that a user can undo.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.OleUndoEngine.UndoUnit.#ctor(System.ComponentModel.Design.UndoEngine,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.Design.OleUndoEngine.UndoUnit" /> class.</summary>
      <param name="engine">The undo engine that owns this undo unit.</param>
      <param name="name">The name for this undo unit.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.OleUndoEngine.UndoUnit.Microsoft#VisualStudio#OLE#Interop#IOleParentUndoUnit#Add(Microsoft.VisualStudio.OLE.Interop.IOleUndoUnit)">
      <summary>Adds an undo unit to the parent collection.</summary>
      <param name="pUU">The <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleUndoUnit" /> to add.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.OleUndoEngine.UndoUnit.Microsoft#VisualStudio#OLE#Interop#IOleParentUndoUnit#Close(Microsoft.VisualStudio.OLE.Interop.IOleParentUndoUnit,System.Int32)">
      <summary>Closes the specified parent undo unit.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the parent unit had open child units and it was successfully closed. <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" /> if the parent undo unit did not have an open child and it was successfully closed. <see cref="F:Microsoft.VisualStudio.VSConstants.E_INVALIDARG" /> if <paramref name="parentUnit" /> does not match the currently open parent undo unit. Do not change any internal state unless the parent unit is blocked. </returns>
      <param name="parentUnit">The <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleParentUndoUnit" />  to close.</param>
      <param name="fCommit">true if the unit should be kept in the collection, false if it should be discarded.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.OleUndoEngine.UndoUnit.Microsoft#VisualStudio#OLE#Interop#IOleParentUndoUnit#Do(Microsoft.VisualStudio.OLE.Interop.IOleUndoManager)">
      <summary>Performs the undo operation.</summary>
      <param name="pManager">
        <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleUndoManager" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.OleUndoEngine.UndoUnit.Microsoft#VisualStudio#OLE#Interop#IOleParentUndoUnit#FindUnit(Microsoft.VisualStudio.OLE.Interop.IOleUndoUnit)">
      <summary>Searches for the specified unit in the child undo unit hierarchy.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the undo unit was located, otherwise <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" />.</returns>
      <param name="pUU">The <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleUndoUnit" /> to search for.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.OleUndoEngine.UndoUnit.Microsoft#VisualStudio#OLE#Interop#IOleParentUndoUnit#GetDescription(System.String@)">
      <summary>Gets the description of the undo unit.</summary>
      <param name="name">[out] Returns the description.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.OleUndoEngine.UndoUnit.Microsoft#VisualStudio#OLE#Interop#IOleParentUndoUnit#GetParentState(System.UInt32@)">
      <summary>Gets the state of the top-level parent undo unit.</summary>
      <param name="state">[out] Returns the state of the parent.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.OleUndoEngine.UndoUnit.Microsoft#VisualStudio#OLE#Interop#IOleParentUndoUnit#GetUnitType(System.Guid@,System.Int32@)">
      <summary>Gets the type of the undo unit.</summary>
      <param name="clsid">[out] Returns the GUID of this class.</param>
      <param name="id">[out] Returns 0.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.OleUndoEngine.UndoUnit.Microsoft#VisualStudio#OLE#Interop#IOleParentUndoUnit#OnNextAdd">
      <summary>Notifies the last undo unit in the collection that a new unit has been added.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.OleUndoEngine.UndoUnit.Microsoft#VisualStudio#OLE#Interop#IOleParentUndoUnit#Open(Microsoft.VisualStudio.OLE.Interop.IOleParentUndoUnit)">
      <summary>Opens an undo unit.</summary>
      <param name="parentUnit">The <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleParentUndoUnit" /> to be opened</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.OleUndoEngine.UndoUnit.Microsoft#VisualStudio#OLE#Interop#IOleUndoUnit#Do(Microsoft.VisualStudio.OLE.Interop.IOleUndoManager)">
      <summary>Performs the undo operation.</summary>
      <param name="manager">The <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleUndoManager" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.OleUndoEngine.UndoUnit.Microsoft#VisualStudio#OLE#Interop#IOleUndoUnit#GetDescription(System.String@)">
      <summary>Gets the description of the undo unit.</summary>
      <param name="name">[out] Returns the name of the undo unit.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.OleUndoEngine.UndoUnit.Microsoft#VisualStudio#OLE#Interop#IOleUndoUnit#GetUnitType(System.Guid@,System.Int32@)">
      <summary>Gets the type of the undo unit.</summary>
      <param name="clsid">[out] The GUID of this class.</param>
      <param name="id">[out] Returns 0.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.OleUndoEngine.UndoUnit.Microsoft#VisualStudio#OLE#Interop#IOleUndoUnit#OnNextAdd">
      <summary>Notifies the last undo unit in the collection that a new unit has been added.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.ProjectTypeResolutionService">
      <summary>An abstract class that provides the Visual Studio implementation of the <see cref="T:System.ComponentModel.Design.ITypeResolutionService" /> interface.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ProjectTypeResolutionService.#ctor">
      <summary>When overridden in a derived class, initializes a new instance of the class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ProjectTypeResolutionService.GetType(System.String,System.Boolean,System.Boolean,Microsoft.VisualStudio.Shell.Design.ReferenceType)">
      <summary>When implemented in a derived class, attempts to retrieve a reference type based on search criteria like the name of the type and its case-sensitivity.</summary>
      <returns>The retrieved type.</returns>
      <param name="name">The name of the reference to be retrieved.</param>
      <param name="throwOnError">If true, indicates that a type retrieval error should throw an exception of type <see cref="T:System.TypeLoadException" />.</param>
      <param name="ignoreCase">If true, indicates that the name search should be case-sensitive.</param>
      <param name="type">A value from the <see cref="T:Microsoft.VisualStudio.Shell.Design.ReferenceType" /> enumeration.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.ProvideDesignerMetadataAttribute">
      <summary>Declares additional metadata for types or objects, allowing third parties to modify the set of metadata available on a class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ProvideDesignerMetadataAttribute.#ctor(System.Type,System.Type)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Design.ProvideDesignerMetadataAttribute" />, associating a new metadata <see cref="T:System.Type" /> with the current <see cref="T:System.Type" />.</summary>
      <param name="runtimeType">The <see cref="T:System.Type" /> whose metadata will be updated.</param>
      <param name="metadataType">The <see cref="T:System.Type" /> containing the metadata to be added to an existing type.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.ProvideDesignerMetadataAttribute.IsGlobal">
      <summary>Gets or sets the scope of the metadata modifications provided by an instance <see cref="T:Microsoft.VisualStudio.Shell.Design.ProvideDesignerMetadataAttribute" /></summary>
      <returns>If the value is true, the scope is global: the modification is applied to all instances of the run time type specified in the <see cref="T:Microsoft.VisualStudio.Shell.Design.ProvideDesignerMetadataAttribute" /> constructor.If the value is false, the scope is local: the modification is applied to all instances of the run time type specified in the <see cref="T:Microsoft.VisualStudio.Shell.Design.ProvideDesignerMetadataAttribute" /> constructor created on the design surface provided by the current VSPackage.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.ProvideDesignerMetadataAttribute.MetadataType">
      <summary>Gets the type of the metadata.</summary>
      <returns>The <see cref="T:System.Type" /> of the new metadata object assigned to an existing run time <see cref="T:System.Type" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ProvideDesignerMetadataAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Registers the designer metadata.</summary>
      <param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> that describes the location and values of the registry key.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.ProvideDesignerMetadataAttribute.RuntimeType">
      <summary>Gets the runtime type.</summary>
      <returns>The <see cref="T:System.Type" /> of the existing runtime object to be modified.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ProvideDesignerMetadataAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Removes the designer metadata registry key.</summary>
      <param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> that describes the location and values of the registry key.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.ProvideDesignerOptionsAttribute">
      <summary>Associates one or more categories with each designer in the registry.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ProvideDesignerOptionsAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Design.ProvideDesignerOptionsAttribute" /> with the specified category name.</summary>
      <param name="categoryName">The name of a category associated with the designer.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.ProvideDesignerOptionsAttribute.CategoryName">
      <summary>Gets the programmatic, nonlocalized name for this category.</summary>
      <returns>The programmatic, nonlocalized name for this category.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ProvideDesignerOptionsAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Registers the designer options.</summary>
      <param name="context">The <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> that describes the location and values of the registry key.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ProvideDesignerOptionsAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Removes this attribute from the registry using the specified registry context.</summary>
      <param name="context">The <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> that describes the location and values of the registry key.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.ProvideGlobalObjectProviderAttribute">
      <summary>Signifies that one or more classes in a package are global object providers. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ProvideGlobalObjectProviderAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.Design.ProvideGlobalObjectProviderAttribute" /> class.</summary>
      <param name="providerType">The <see cref="T:System.Type" /> of the provider. The provider must derive from the <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalObjectProvider" /> class </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerType" /> is null.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.ProvideGlobalObjectProviderAttribute.ProviderType">
      <summary>Gets the type of declared global object provider.</summary>
      <returns>The <see cref="T:System.Type" /> of the associated provider class, which must be derived from <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalObjectProvider" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ProvideGlobalObjectProviderAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Registers this attribute using the specified registry context.</summary>
      <param name="context">The <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> that contains registration data. </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.ProvideGlobalObjectProviderAttribute.TypeId">
      <summary>Gets a unique identifier associated with the attribute.</summary>
      <returns>An object that is a unique identifier for the <see cref="T:Microsoft.VisualStudio.Shell.Design.ProvideGlobalObjectProviderAttribute" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ProvideGlobalObjectProviderAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Removes this attribute from the registry using the specified registry context.</summary>
      <param name="context">The <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> that contains registration data. </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.ProvideViewAdapterAttribute">
      <summary>This attribute can be placed on classes that derive from <see cref="T:Microsoft.VisualStudio.Shell.Design.DesignerWindowPane" /> to associate them with a particular type of view. There are three types of view adapters: file adapters provide support only for a specific file, language adapters support all the files associated with a given language service, and global adapters are available for any type.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ProvideViewAdapterAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Design.ProvideViewAdapterAttribute" /> for the specified base type.</summary>
      <param name="baseType">The type that this view adapter should handle.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ProvideViewAdapterAttribute.#ctor(System.Type,Microsoft.VisualStudio.Shell.Design.AttributeScope,System.Object)">
      <summary>Initializes a new  for the specified base type and scope.</summary>
      <param name="baseType">The type that this view adapter should handle.</param>
      <param name="scope">A value from <see cref="T:Microsoft.VisualStudio.Shell.Design.AttributeScope" /> enumeration.</param>
      <param name="scopeData">Data associated with the scope of the attribute.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.ProvideViewAdapterAttribute.BaseType">
      <summary>Gets the base type of the view adapter.</summary>
      <returns>The base type of the view adapter.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ProvideViewAdapterAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Registers the view adapter.</summary>
      <param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> that describes the location and values of the registry key.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.ProvideViewAdapterAttribute.Scope">
      <summary>Gets the attribute scope of the view adapter.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Shell.Design.AttributeScope" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.ProvideViewAdapterAttribute.ScopeData">
      <summary>Gets the scope data associated with the scope of the view adapter.</summary>
      <returns>The scope data associated with the scope of the view adapter.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.ProvideViewAdapterAttribute.TypeId">
      <summary>Gets an ID that is unique for each attribute scope. </summary>
      <returns>The full name of the attribute plus the scope.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ProvideViewAdapterAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Removes the view adapter's registry key.</summary>
      <param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> that describes the location and values of the registry key.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.ReferenceType">
      <summary>An enumeration of reference types used by the <see cref="T:Microsoft.VisualStudio.Shell.Design.ProjectTypeResolutionService" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Design.ReferenceType.Normal">
      <summary>Normal</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Design.ReferenceType.Generated">
      <summary>Generated</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Design.ReferenceType.Project">
      <summary>Project</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Design.ReferenceType.None">
      <summary>None</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Design.ReferenceType.NormalFast">
      <summary />
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.TypeObsoleteEventArgs">
      <summary>An event that gets raised when a type has become obsolete.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.TypeObsoleteEventArgs.#ctor(System.String)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Design.TypeObsoleteEventArgs" /> for the specified obsolete type.</summary>
      <param name="typeName">The name of the obsolete type.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.TypeObsoleteEventArgs.ObsoleteTypeName">
      <summary>Gets the name of the obsolete type.</summary>
      <returns>The name of the obsolete type.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.TypeObsoleteEventHandler">
      <summary>An event that gets raised when a type has become obsolete.</summary>
      <param name="sender">Delegate sender.</param>
      <param name="e"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder">
      <summary>Creates new virtual typea. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder" /> class.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.AssemblyName">
      <summary>Gets or sets the name of the assembly to which the virtual type should belong.</summary>
      <returns>An <see cref="T:System.Reflection.AssemblyName" /> that represents an assembly name to which the virtual type should belong.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.Attributes">
      <summary>Gets the collection of <see cref="P:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.Attributes" /> for the virtual type.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.AttributeCollection" /> that represents the collection of attributes.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.BaseType">
      <summary>Gets or sets the base type from which the virtual type is derived.</summary>
      <returns>A <see cref="T:System.Type" /> that represents a base type from which the virtual type is derived.</returns>
      <exception cref="T:System.ArgumentNullException">The value passed is null.</exception>
      <exception cref="T:System.ArgumentException">The type passed has a <see cref="P:System.Type.UnderlyingSystemType" /> that differs from the type, or if the type passed is a virtual type.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.Constructors">
      <summary>Gets a collection of constructors for this virtual type.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.ConstructorInfoCollection" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.CreateType">
      <summary>Creates a virtual type based on the configuration of this virtual type builder.</summary>
      <returns>A created virtual type.</returns>
      <exception cref="T:System.InvalidOperationException">The virtual type builder is not completely configured. A virtual type builder must have a type name, a base type and an implementer to be considered completely configured.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.DeclaringType">
      <summary>Gets or sets the declaring type for the resulting virtual type.</summary>
      <returns>A <see cref="T:System.Type" /> that represents a <see cref="P:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.DeclaringType" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.Events">
      <summary>Gets the collection of <see cref="P:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.Events" /> for the virtual type.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.EventInfoCollection" /> that represents a collection of <see cref="P:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.Events" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.Fields">
      <summary>Gets the collection of <see cref="P:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.Fields" /> for the resulting virtual type.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.FieldInfoCollection" /> that represents a collection of <see cref="P:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.Fields" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.Implementor">
      <summary>Gets or sets the implementer that will be used for the resulting virtual type.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Shell.Design.VirtualTypeImplementor" /> that will be used for the resulting virtual type.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.InitializeFromType(System.ComponentModel.Design.ITypeResolutionService,System.CodeDom.CodeNamespace)">
      <summary>Initializes this virtual type builder with data obtained from the given type.</summary>
      <param name="typeResolutionService">The type resolution service to use when resolving types in the Code Document Object Model (CodeDOM) tree.</param>
      <param name="ns">The namespace that contains a type to create. This namespace must contain exactly one type.</param>
      <exception cref="T:System.ArgumentNullException">If any of the parameters are null.</exception>
      <exception cref="T:System.ArgumentException">If <paramref name="ns" /> contains anything other than a single type declaration.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.InitializeFromType(System.ComponentModel.Design.ITypeResolutionService,System.CodeDom.CodeTypeDeclaration)">
      <summary>Initializes this virtual type builder with data obtained from the given type.</summary>
      <param name="typeResolutionService">The type resolution service to use when resolving types in the Code Document Object Model (CodeDOM) tree.</param>
      <param name="typeDecl">Used to initialize a type based on a type declaration.</param>
      <exception cref="T:System.ArgumentNullException">If any of the parameters are null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.InitializeFromType(System.ComponentModel.Design.ITypeResolutionService,System.CodeDom.CodeTypeDeclaration,System.String)">
      <summary>Initializes this virtual type builder with data obtained from the given type.</summary>
      <param name="typeResolutionService">The type resolution service to use when resolving types in the Code Document Object Model (CodeDOM) tree.</param>
      <param name="typeDecl">Used to initialize a type based on a type declaration.</param>
      <param name="namespaceName">The namespace that contains a type to create. This namespace must contain exactly one type.</param>
      <exception cref="T:System.ArgumentNullException">If any of the parameters are null.</exception>
      <exception cref="T:System.ArgumentException">If <paramref name="ns" /> contains anything other than a single type declaration.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.IsPublic">
      <summary>Gets or sets a value indicating whether the resulting virtual type has the public access modifier.</summary>
      <returns>true if the access modifier for the virtual type is public; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.IsSerializable">
      <summary>Gets or sets whether the resulting virtual type is serializable.</summary>
      <returns>true if the resulting virtual type is serializable, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.Methods">
      <summary>Gets the collection of methods for the resulting virtual type.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.MethodInfoCollection" /> that represents the collection of <see cref="P:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.Methods" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.Properties">
      <summary>Gets the collection of <see cref="P:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.Properties" /> for the virtual type.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.PropertyInfoCollection" /> that represents the collection of <see cref="P:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.Properties" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.TypeName">
      <summary>Gets or sets the type name for the virtual type.</summary>
      <returns>The type name.</returns>
      <exception cref="T:System.ArgumentException">The provided type name does not conform to a valid type name. Valid type names are defined as names consisting of letters, numbers, an underscore and one or more “.” or “+” characters.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.AttributeCollection">
      <summary>Represents the collection of attributes. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.AttributeCollection.Add(System.Attribute)">
      <summary>Adds an <see cref="T:System.Attribute" /> to the end of the <see cref="T:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.AttributeCollection" />.</summary>
      <returns>The index at which the value has been added.</returns>
      <param name="value">The <see cref="T:System.Attribute" /> to be added to the end of the collection.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> cannot be placed on a class.</exception>
      <exception cref="T:System.ArgumentNullException">The attribute is null.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.AttributeCollection.Item(System.Int32)">
      <summary>Gets or sets the attribute at the specified index.</summary>
      <returns>An <see cref="T:System.Attribute" /> at the specified index.</returns>
      <param name="index">The 0-based index of the attribute.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> is less than 0.-or-<paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.CollectionBase.Count" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.AttributeCollection.Remove(System.Attribute)">
      <summary>Removes the first occurrence of a specific <see cref="T:System.Attribute" /> from the <see cref="T:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.AttributeCollection" />.</summary>
      <param name="value">The <see cref="T:System.Attribute" /> to remove from the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.ConstructorInfoCollection">
      <summary>Represents the collection of constructors. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.ConstructorInfoCollection.Add(System.Reflection.ConstructorInfo)">
      <summary>Adds a <see cref="T:System.Reflection.ConstructorInfo" /> to the end of the collection.</summary>
      <returns>The index at which the value has been added.</returns>
      <param name="value">The <see cref="T:System.Reflection.ConstructorInfo" /> to be added to the end of the collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.ConstructorInfoCollection.Add(System.Type[])">
      <summary>Adds an array of <see cref="T:System.Reflection.ConstructorInfo" /> to the end of the collection. </summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.ConstructorInfoCollection" /> index at which the value has been added.</returns>
      <param name="argumentTypes">The types of arguments to be passed to the constructor. This can be null or an empty array to declare an empty constructor.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.ConstructorInfoCollection.Add(System.Type[],System.Attribute[])">
      <summary>Adds an array of <see cref="T:System.Reflection.ConstructorInfo" /> to the end of the collection.</summary>
      <returns>The index at which the value has been added.</returns>
      <param name="argumentTypes">The types of arguments to be passed to the constructor. This can be null or an empty array to declare an empty constructor.</param>
      <param name="attributes">An array of attributes to be attached to this constructor. This may be null or empty.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.ConstructorInfoCollection.Item(System.Int32)">
      <summary>Gets or sets the constructor at the specified index.</summary>
      <returns>The <see cref="T:System.Reflection.ConstructorInfo" /> at the specified index.</returns>
      <param name="index">The 0-based index of the element to get or set.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> is less than 0.-or-<paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.CollectionBase.Count" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.ConstructorInfoCollection.Remove(System.Reflection.ConstructorInfo)">
      <summary>Removes the first occurrence of a specific <see cref="T:System.Reflection.ConstructorInfo" /> from the collection.</summary>
      <param name="value">The <see cref="T:System.Reflection.ConstructorInfo" /> to remove from the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.EventInfoCollection">
      <summary>Represents the collection of events. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.EventInfoCollection.Add(System.Reflection.EventInfo)">
      <summary>Adds an <see cref="T:System.Reflection.EventInfo" /> to the end of the collection. </summary>
      <returns>The index at which the value has been added.</returns>
      <param name="value">The <see cref="T:System.Reflection.EventInfo" /> to be added to the end of the collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.EventInfoCollection.Add(System.String,System.Type)">
      <summary>Adds an <see cref="T:System.Reflection.EventInfo" /> to the end of the collection. </summary>
      <returns>The index at which the value has been added.</returns>
      <param name="name">The name of the event to add.</param>
      <param name="handlerType">The type of delegate this event represents.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> or <paramref name="handlerType" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="handlerType" /> is not a run-time type.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.EventInfoCollection.Add(System.String,System.Type,System.Attribute[])">
      <summary>Adds an <see cref="T:System.Reflection.EventInfo" /> to the end of the collection. </summary>
      <returns>The index at which the value has been added.</returns>
      <param name="name">The name of the event to add.</param>
      <param name="handlerType">The type of delegate this event represents.</param>
      <param name="attributes">This value must be <see cref="F:System.Reflection.MethodAttributes.Public" />  and/or <see cref="F:System.Reflection.MethodAttributes.Static" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> or <paramref name="handlerType" /> or an element in <paramref name="attributes" /> is null. <paramref name="attributes" /> itself may be null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="handlerType" /> is not a run-time type.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.EventInfoCollection.Add(System.String,System.Type,System.Attribute[],System.Reflection.MethodAttributes)">
      <summary>Adds an <see cref="T:System.Reflection.EventInfo" /> to the end of the collection. </summary>
      <returns>The index at which the value has been added.</returns>
      <param name="name">The name of the event to add.</param>
      <param name="handlerType">The type of delegate this event represents.</param>
      <param name="attributes">An array of <see cref="T:System.Attribute" /> objects.</param>
      <param name="methodAttributes">The only method attributes currently supported are <see cref="F:System.Reflection.MethodAttributes.Public" /> and/or <see cref="F:System.Reflection.MethodAttributes.Static" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> or <paramref name="handlerType" /> or an element in <paramref name="attributes" /> is null. <paramref name="attributes" /> itself may be null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="handlerType" /> is not a run-time type-or-<paramref name="methodAttributes" /> does not contain <see cref="F:System.Reflection.MethodAttributes.Public" /> or contains set bits other than <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />, or attributes passed in through the <paramref name="attributes" /> parameter cannot be applied to events.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.EventInfoCollection.Item(System.Int32)">
      <summary>Gets or sets the event at the specified index.</summary>
      <returns>An <see cref="T:System.Reflection.EventInfo" /> at the specified index.</returns>
      <param name="index">The 0-based index of the element to get or set.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> is less than 0.-or-<paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.CollectionBase.Count" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.EventInfoCollection.Remove(System.Reflection.EventInfo)">
      <summary>Removes the first occurrence of a specific <see cref="T:System.Reflection.EventInfo" /> from the collection. </summary>
      <param name="value">The <see cref="T:System.Reflection.EventInfo" /> to remove from the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.FieldInfoCollection">
      <summary>Represents the collection of fields. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.FieldInfoCollection.Add(System.Reflection.FieldInfo)">
      <summary>Adds a <see cref="T:System.Reflection.FieldInfo" /> to the end of the collection.</summary>
      <returns>The index at which the value has been added.</returns>
      <param name="value">The <see cref="T:System.Reflection.FieldInfo" /> to be added to the end of the collection. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.FieldInfoCollection.Add(System.String,System.Type)">
      <summary>Adds a <see cref="T:System.Reflection.FieldInfo" /> to the end of the collection. </summary>
      <returns>The index at which the value has been added.</returns>
      <param name="name">The name of the field to add.</param>
      <param name="fieldType">The type of field.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> or <paramref name="fieldType" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="fieldType" /> is not a run-time type.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.FieldInfoCollection.Add(System.String,System.Type,System.Attribute[])">
      <summary>Adds a <see cref="T:System.Reflection.FieldInfo" /> to the end of the collection. </summary>
      <returns>The index at which the value has been added.</returns>
      <param name="name">The name of the field to add.</param>
      <param name="fieldType">The type of field.</param>
      <param name="attributes">An array of attributes that must be <see cref="F:System.Reflection.FieldAttributes.Public" /> and/or <see cref="F:System.Reflection.FieldAttributes.Static" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> or <paramref name="fieldType" /> or an element in <paramref name="attributes" /> is null. <paramref name="attributes" /> itself may be null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="fieldType" /> is not a run-time type.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.FieldInfoCollection.Add(System.String,System.Type,System.Attribute[],System.Reflection.FieldAttributes)">
      <summary>Adds a <see cref="T:System.Reflection.FieldInfo" /> to the end of the collection. </summary>
      <returns>The index at which the value has been added.</returns>
      <param name="name">The name of the field to add.</param>
      <param name="fieldType">The type of field.</param>
      <param name="attributes">This parameter is used to configure the class member appropriately. <see cref="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.FieldInfoCollection.Add(System.String,System.Type,System.Attribute[],System.Reflection.FieldAttributes)" /> only accepts the values of <see cref="T:System.CodeDom.MemberAttributes" /> that fit into the <see cref="F:System.CodeDom.MemberAttributes.AccessMask" /> or <see cref="F:System.CodeDom.MemberAttributes.ScopeMask" /> categories.</param>
      <param name="fieldAttributes">This parameter specifies additional field attributes for this member. The default field attribute is <see cref="F:System.Reflection.FieldAttributes.Public" />. The only field attributes currently supported are <see cref="F:System.Reflection.FieldAttributes.Public" /> and <see cref="F:System.Reflection.FieldAttributes.Static" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> or <paramref name="fieldType" /> or an element in <paramref name="attributes" /> is null. <paramref name="attributes" /> itself may be null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="fieldType" /> is not a run-time type-or-<paramref name="fieldAttributes" /> does not contain <see cref="F:System.Reflection.FieldAttributes.Public" /> or contains set bits other than <see cref="F:System.Reflection.FieldAttributes.Public" /> and <see cref="F:System.Reflection.FieldAttributes.Static" />, or attributes passed in through the <paramref name="attributes" /> parameter cannot be applied to fields.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.FieldInfoCollection.Item(System.Int32)">
      <summary>Gets or sets the <see cref="T:System.Reflection.FieldInfo" /> at the specified index.</summary>
      <returns>A <see cref="T:System.Reflection.FieldInfo" /> at the specified index.</returns>
      <param name="index">The 0-based index of the element to get or set.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> is less than 0.-or-<paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.CollectionBase.Count" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.FieldInfoCollection.Remove(System.Reflection.FieldInfo)">
      <summary>Removes the first occurrence of a specific <see cref="T:System.Reflection.FieldInfo" /> from the collection.</summary>
      <param name="value">The <see cref="T:System.Reflection.FieldInfo" /> to remove from the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.MethodInfoCollection">
      <summary>Represents the collection of methods. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.MethodInfoCollection.Add(System.Reflection.MethodInfo)">
      <summary>Adds a <see cref="T:System.Reflection.MethodInfo" /> to the end of the collection. </summary>
      <returns>The index at which the value has been added.</returns>
      <param name="value">The <see cref="T:System.Reflection.MethodInfo" /> to be added to the end of the collection. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.MethodInfoCollection.Add(System.String,System.Type,System.Type[])">
      <summary>Adds a <see cref="T:System.Reflection.MethodInfo" /> to the end of the collection. </summary>
      <returns>The index at which the value has been added.</returns>
      <param name="name">The name of the method to add.</param>
      <param name="returnType">The return type of the method. This should be typeof(void) for void return types.</param>
      <param name="parameterTypes"></param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.-or-<paramref name="returnType" /> is null.-or-An element in <paramref name="paramTypes" /> is null.<paramref name="paramTypes" /> property may be null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="returnType" /> is not a run-time type.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.MethodInfoCollection.Add(System.String,System.Type,System.Type[],System.Attribute[])">
      <summary>Adds a <see cref="T:System.Reflection.MethodInfo" /> to the end of the collection.</summary>
      <returns>The index at which the value has been added.</returns>
      <param name="name">The name of the method to add.</param>
      <param name="returnType">The return type of the method. This should be typeof(void) for void return types.</param>
      <param name="parameterTypes"></param>
      <param name="attributes">This parameter is used to configure the class member appropriately. The <see cref="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.MethodInfoCollection.Add(System.String,System.Type,System.Type[],System.Attribute[])" /> method only accepts the values of <see cref="T:System.CodeDom.MemberAttributes" /> that fit into the <see cref="F:System.CodeDom.MemberAttributes.AccessMask" /> or <see cref="F:System.CodeDom.MemberAttributes.ScopeMask" /> categories.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.-or-<paramref name="returnType" /> is null.-or-An element in <paramref name="paramTypes" /> is null.-or-An element in <paramref name="attributes" /> is null.<paramref name="attributes " />and<paramref name=" paramTypes" /> properties may be null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="handlerType" /> is not a run-time type.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.MethodInfoCollection.Add(System.String,System.Type,System.Type[],System.Attribute[],System.Reflection.MethodAttributes)">
      <summary>Adds a <see cref="T:System.Reflection.MethodInfo" /> to the end of the collection. </summary>
      <returns>The index at which the value has been added.</returns>
      <param name="name">The name of the method to add.</param>
      <param name="returnType">The return type of the method. This should be typeof(void) for void return types.</param>
      <param name="parameterTypes"></param>
      <param name="attributes">This parameter is used to configure the class member appropriately. The <see cref="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.MethodInfoCollection.Add(System.String,System.Type,System.Type[],System.Attribute[],System.Reflection.MethodAttributes)" /> method only accepts the values of <see cref="T:System.CodeDom.MemberAttributes" /> that fit into the <see cref="F:System.CodeDom.MemberAttributes.AccessMask" /> or <see cref="F:System.CodeDom.MemberAttributes.ScopeMask" /> categories.</param>
      <param name="methodAttributes">This parameter specifies additional event attributes for this member. The default method attribute is <see cref="F:System.Reflection.MethodAttributes.Public" />. The only method attributes supported today are <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" /> .</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.-or-<paramref name="returnType" /> is null.-or-An element in <paramref name="paramTypes" /> is null.-or-An element in <paramref name="attributes" /> is null.<paramref name="attributes " />and<paramref name=" paramTypes" /> properties may be null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="handlerType" /> is not a run-time type.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.MethodInfoCollection.Item(System.Int32)">
      <summary>Gets or sets the method at the specified index.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> at the specified index.</returns>
      <param name="index">The 0-based index of the method to get or set.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> is less than 0.-or-<paramref name="index" /> is equal to or greater than the number of items in the collection.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.MethodInfoCollection.Remove(System.Reflection.MethodInfo)">
      <summary>Removes the first occurrence of a specific <see cref="T:System.Reflection.MethodInfo" /> from the collection. </summary>
      <param name="value">The <see cref="T:System.Reflection.MethodInfo" /> to remove from the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.PropertyInfoCollection">
      <summary>Represents the collection of properties. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.PropertyInfoCollection.Add(System.Reflection.PropertyInfo)">
      <summary>Adds a <see cref="T:System.Reflection.PropertyInfo" /> to the end of the collection. </summary>
      <returns>The index at which the value has been added.</returns>
      <param name="value">The <see cref="T:System.Reflection.PropertyInfo" /> to be added to the end of the collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.PropertyInfoCollection.Add(System.String,System.Type,System.Boolean)">
      <summary>Adds a <see cref="T:System.Reflection.PropertyInfo" /> to the end of the collection.</summary>
      <returns>The index at which the value has been added.</returns>
      <param name="name">The name of the property to add.</param>
      <param name="propertyType">The type of the property.</param>
      <param name="readOnly">Determines if this property is read only or read write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.-or-<paramref name="propertyType" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyType" /> is not a runtime type.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.PropertyInfoCollection.Add(System.String,System.Type,System.Boolean,System.Attribute[])">
      <summary>Adds a <see cref="T:System.Reflection.PropertyInfo" /> to the end of the collection. </summary>
      <returns>The index at which the value has been added.</returns>
      <param name="name">The name of the property to add.</param>
      <param name="propertyType">The type of the property.</param>
      <param name="readOnly">Determines whether this property is read-only or read-write.</param>
      <param name="attributes">This parameter is used to configure the class member appropriately. Add only accepts the values of <see cref="T:System.CodeDom.MemberAttributes" /> that fit into the <see cref="F:System.CodeDom.MemberAttributes.AccessMask" /> or <see cref="F:System.CodeDom.MemberAttributes.ScopeMask" /> categories.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.-or-<paramref name="propertyType" /> is null-or-An element in <paramref name="attributes" /> is null.<paramref name="attributes" /> may be null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyType" /> is not a runtime type.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.PropertyInfoCollection.Add(System.String,System.Type,System.Boolean,System.Attribute[],System.Reflection.MethodAttributes)">
      <summary>Adds a <see cref="T:System.Reflection.PropertyInfo" /> to the end of the collection. </summary>
      <returns>The index at which the value has been added.</returns>
      <param name="name">The name of the property to add.</param>
      <param name="propertyType">The type of the property.</param>
      <param name="readOnly">Determines if this property is read only or read write.</param>
      <param name="attributes">This parameter is used to configure the class member appropriately. Add only accepts the values of <see cref="T:System.CodeDom.MemberAttributes" /> that fit into the <see cref="F:System.CodeDom.MemberAttributes.AccessMask" /> or <see cref="F:System.CodeDom.MemberAttributes.ScopeMask" /> categories.</param>
      <param name="methodAttributes">Specifies additional event attributes for this member. The default method attribute is <see cref="F:System.Reflection.MethodAttributes.Public" />. The only method attributes supported today are <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" /> .</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.-or-<paramref name="propertyType" /> is null-or-An element in <paramref name="attributes" /> is null.<paramref name="attributes" /> may be null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyType" /> is not a runtime type.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.PropertyInfoCollection.Add(System.String,System.Type,System.Boolean,System.Type[])">
      <summary>Adds a <see cref="T:System.Reflection.PropertyInfo" /> to the end of the collection. </summary>
      <returns>The index at which the value has been added.</returns>
      <param name="name">The name of the property to add.</param>
      <param name="propertyType">The type of the property.</param>
      <param name="readOnly">Determines if this property is read-only or read-write.</param>
      <param name="parameterTypes"></param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.-or-<paramref name="propertyType" /> is null-or-An element in <paramref name="paramTypes" /> is null.<paramref name="paramTypes" /> may be null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyType" /> is not a runtime type.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.PropertyInfoCollection.Add(System.String,System.Type,System.Boolean,System.Type[],System.Attribute[])">
      <summary>Adds a <see cref="T:System.Reflection.PropertyInfo" /> to the end of the collection. </summary>
      <returns>The index at which the value has been added.</returns>
      <param name="name">The name of the property to add.</param>
      <param name="propertyType">The type of the property.</param>
      <param name="readOnly">Determines if this property is read only or read write.</param>
      <param name="parameterTypes"></param>
      <param name="attributes">This parameter is used to configure the class member appropriately. Add only accepts the values of <see cref="T:System.CodeDom.MemberAttributes" /> that fit into the <see cref="F:System.CodeDom.MemberAttributes.AccessMask" /> or <see cref="F:System.CodeDom.MemberAttributes.ScopeMask" /> categories.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.-or-<paramref name="propertyType" /> is null-or-An element in <paramref name="attributes" /> is null.-or-An element in <paramref name="paramTypes" /> is null.<paramref name="attributes" /> and <paramref name="paramTypes" /> may be null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyType" /> is not a runtime type.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.PropertyInfoCollection.Add(System.String,System.Type,System.Boolean,System.Type[],System.Attribute[],System.Reflection.MethodAttributes)">
      <summary>Adds a <see cref="T:System.Reflection.PropertyInfo" /> to the end of the collection.</summary>
      <returns>The index at which the value has been added.</returns>
      <param name="name">The name of the property to add.</param>
      <param name="propertyType">The type of the property.</param>
      <param name="readOnly">Determines if this property is read only or read write.</param>
      <param name="parameterTypes"></param>
      <param name="attributes">This parameter is used to configure the class member appropriately. Add only accepts the values of <see cref="T:System.CodeDom.MemberAttributes" /> that fit into the <see cref="F:System.CodeDom.MemberAttributes.AccessMask" /> or <see cref="F:System.CodeDom.MemberAttributes.ScopeMask" /> categories.</param>
      <param name="methodAttributes">Specifies additional event attributes for this member. The default method attribute is <see cref="F:System.Reflection.MethodAttributes.Public" />. The only method attributes supported today are <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.-or-<paramref name="propertyType" /> is null-or-An element in <paramref name="attributes" /> is null.-or-An element in <paramref name="paramTypes" /> is null.<paramref name="attributes" /> and <paramref name="paramTypes" /> may be null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyType" /> is not a runtime type.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.PropertyInfoCollection.Item(System.Int32)">
      <summary>Gets or sets the property at the specified index.</summary>
      <returns>A <see cref="T:System.Reflection.PropertyInfo" /> at the specified index.</returns>
      <param name="index">The 0-based index of the element to get or set.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> is less than 0.-or-<paramref name="index" /> is equal to or greater than the number of items in the collection.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.PropertyInfoCollection.Remove(System.Reflection.PropertyInfo)">
      <summary>Removes the first occurrence of a specific <see cref="T:System.Reflection.PropertyInfo" /> from the collection.</summary>
      <param name="value">The <see cref="T:System.Reflection.PropertyInfo" /> to remove from the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.VirtualTypeImplementor">
      <summary>The base class you must derive from to provide an implementation of your virtual type.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeImplementor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.Design.VirtualTypeImplementor" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeImplementor.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
      <summary>Adds the given delegate to the given event.</summary>
      <param name="eventInfo">The event to add the handler to.</param>
      <param name="instance">The instance on which to add the event handler. This may be null if the event is static.</param>
      <param name="handler">The event handler to add.</param>
      <exception cref="T:System.NotImplementedException">If non-abstract derived class did not provide an implementation by overriding this method.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeImplementor.GetField(System.Reflection.FieldInfo,System.Object)">
      <summary>Gets the value of the requested field.</summary>
      <returns>An object that represents the requested field.</returns>
      <param name="field">The field to get the value of.</param>
      <param name="instance">The instance on which to retrieve the field. This may be null if the field is static.</param>
      <exception cref="T:System.NotImplementedException">If non-abstract derived class did not provide an implementation by overriding this method.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeImplementor.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object[])">
      <summary>Gets the value of the requested property.</summary>
      <returns>An object that represents the requested property.</returns>
      <param name="propertyInfo"></param>
      <param name="instance">The instance on which to retrieve the property. This may be null if the property is static.</param>
      <param name="args">An optional array of arguments used for parameterized properties.  This will never be null, but may be an empty array.</param>
      <exception cref="T:System.NotImplementedException">If non-abstract derived class did not provide an implementation by overriding this method.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeImplementor.InvokeConstructor(System.Reflection.ConstructorInfo,System.Object[])">
      <summary>Creates an instance of a type.</summary>
      <returns>An object that represents a created instance of a type.</returns>
      <param name="constructor"></param>
      <param name="args">The parameters to pass to the constructor.</param>
      <exception cref="T:System.NotImplementedException">If non-abstract derived class did not provide an implementation by overriding this method.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeImplementor.InvokeMethod(System.Reflection.MethodInfo,System.Object,System.Object[])">
      <summary>Invokes a method on the object.</summary>
      <returns>An object that represents a return value of an invoked method.</returns>
      <param name="method">The method to invoke.</param>
      <param name="instance">The instance on which to invoke the method. This may be null if the method is static.</param>
      <param name="args">The arguments to the method.</param>
      <exception cref="T:System.NotImplementedException">If non-abstract derived class did not provide an implementation by overriding this method.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeImplementor.RemoveEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
      <summary>Removes the given delegate from the given event.</summary>
      <param name="eventInfo">The event to remove the handler from.</param>
      <param name="instance">The instance on which to remove the event handler.  This may be null if the event is static.</param>
      <param name="handler">The event handler to remove.</param>
      <exception cref="T:System.NotImplementedException">If non-abstract derived class did not provide an implementation by overriding this method.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeImplementor.SetField(System.Reflection.FieldInfo,System.Object,System.Object)">
      <summary>Sets the value of the requested field.</summary>
      <param name="field">The field for which to set the value.</param>
      <param name="instance">The instance on which to set the field. This may be null if the field is static.</param>
      <param name="value">The new value of the field.</param>
      <exception cref="T:System.NotImplementedException">If non-abstract derived class did not provide an implementation by overriding this method.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeImplementor.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Object[])">
      <summary>Sets the value of the requested property.</summary>
      <param name="propertyInfo"></param>
      <param name="instance">The instance on which to set the property. This may be null if the property is static.</param>
      <param name="value">An optional array of arguments used for parameterized properties.  This will never be null, but may be an empty array.</param>
      <param name="args">The new value of the property.</param>
      <exception cref="T:System.NotImplementedException">If non-abstract derived class did not provide an implementation by overriding this method.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.VsTargetFrameworkProvider"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VsTargetFrameworkProvider.#ctor(Microsoft.VisualStudio.Shell.Interop.IVsDesignTimeAssemblyResolution,System.ComponentModel.Design.IDesignTimeAssemblyLoader,Microsoft.VisualStudio.Shell.Interop.IVsSmartOpenScope)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VsTargetFrameworkProvider.#ctor(Microsoft.VisualStudio.Shell.Interop.IVsDesignTimeAssemblyResolution,System.ComponentModel.Design.IDesignTimeAssemblyLoader,System.ComponentModel.TypeDescriptionProvider,Microsoft.VisualStudio.Shell.Interop.IVsSmartOpenScope)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VsTargetFrameworkProvider.#ctor(Microsoft.VisualStudio.Shell.Interop.IVsFrameworkMultiTargeting,System.ComponentModel.Design.IDesignTimeAssemblyLoader,System.String,Microsoft.VisualStudio.Shell.Interop.IVsSmartOpenScope)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VsTargetFrameworkProvider.#ctor(Microsoft.VisualStudio.Shell.Interop.IVsFrameworkMultiTargeting,System.ComponentModel.Design.IDesignTimeAssemblyLoader,System.String,System.ComponentModel.TypeDescriptionProvider,Microsoft.VisualStudio.Shell.Interop.IVsSmartOpenScope)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VsTargetFrameworkProvider.#ctor(Microsoft.VisualStudio.Shell.Interop.IVsFrameworkMultiTargeting,System.String,Microsoft.VisualStudio.Shell.Interop.IVsSmartOpenScope)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VsTargetFrameworkProvider.#ctor(Microsoft.VisualStudio.Shell.Interop.IVsFrameworkMultiTargeting,System.String,System.ComponentModel.TypeDescriptionProvider,Microsoft.VisualStudio.Shell.Interop.IVsSmartOpenScope)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VsTargetFrameworkProvider.GetExtendedTypeDescriptor(System.Object)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VsTargetFrameworkProvider.GetReflectionAssembly(System.Reflection.AssemblyName)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VsTargetFrameworkProvider.GetReflectionType(System.Type,System.Object)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VsTargetFrameworkProvider.GetRuntimeType(System.Type)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VsTargetFrameworkProvider.GetTypeDescriptor(System.Type,System.Object)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VsTargetFrameworkProvider.IsSupportedType(System.Type)"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.VsTargetFrameworkProvider.ProviderService"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VsTargetFrameworkProvider.Refresh(System.Reflection.AssemblyName)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VsTargetFrameworkProvider.RefreshAll"></member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.WindowPaneProviderService">
      <summary>A service that provides file-specific window panes.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.WindowPaneProviderService.#ctor(System.IServiceProvider)">
      <summary>Creates a new WindowPaneProviderService.</summary>
      <param name="provider">The <see cref="T:System.IServiceProvider" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.WindowPaneProviderService.#ctor(System.IServiceProvider,System.String)">
      <summary>Creates a new WindowPaneProviderService for the specified file extension.</summary>
      <param name="provider">The <see cref="T:System.IServiceProvider" />.</param>
      <param name="extension">The file extension.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.WindowPaneProviderService.CreateWindowPane(System.ComponentModel.Design.DesignSurface)">
      <summary>Creates a window pane for the specified design surface.</summary>
      <returns>The created <see cref="T:Microsoft.VisualStudio.Shell.Design.DesignerWindowPane" />.</returns>
      <param name="surface">The <see cref="T:System.ComponentModel.Design.DesignSurface" /> from which the window pane is created.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.WindowPaneProviderService.CreateWindowPane(System.Type,System.ComponentModel.Design.DesignSurface)">
      <summary>Creates a designer window pane for the specified type of window pane.</summary>
      <returns>The newly-created <see cref="T:Microsoft.VisualStudio.Shell.Design.DesignerWindowPane" />.</returns>
      <param name="windowPaneType">The type of the window pane.</param>
      <param name="surface">The <see cref="T:System.ComponentModel.Design.DesignSurface" />.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.WindowPaneProviderService.Extension">
      <summary>Gets the file extension.</summary>
      <returns>The file extension.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.WindowPaneProviderService.GetRegisteredPanes(System.String)">
      <summary>Gets the registered set of window panes.</summary>
      <returns>An array of <see cref="T:Microsoft.VisualStudio.Shell.Design.WindowPaneProviderService.RegisteredWindowPane" /> objects.</returns>
      <param name="extension">The file extension for the retrieved panes.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.WindowPaneProviderService.GetService(System.Type)">
      <summary>Gets an instance of the requested service.</summary>
      <returns>The requested service, or null if it is not available.</returns>
      <param name="serviceType">The type of the requested service.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.WindowPaneProviderService.RegisteredWindowPane">
      <summary>A structure that encapsulates a view technology and its associated window pane type.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.WindowPaneProviderService.RegisteredWindowPane.#ctor(System.Type,System.String)">
      <summary>Creates a new RegisteredWindowPane instance.</summary>
      <param name="baseType">The kind of the window pane that is being registered.</param>
      <param name="windowPaneTypeName">The name of the window pane.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.WindowPaneProviderService.RegisteredWindowPane.BaseType">
      <summary>Retrieves the <paramref name="baseType" /> specified by the overloaded constructor <see cref="M:Microsoft.VisualStudio.Shell.Design.WindowPaneProviderService.RegisteredWindowPane.#ctor(System.Type,System.String)" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.WindowPaneProviderService.RegisteredWindowPane.WindowPaneTypeName">
      <summary>Retrieves the <paramref name="windowPaneTypeName" /> specified by the overloaded constructor <see cref="M:Microsoft.VisualStudio.Shell.Design.WindowPaneProviderService.RegisteredWindowPane.#ctor(System.Type,System.String)" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.Serialization.ConfigurationHelperService">
      <summary>A service used by the settings UI in Visual Studio to read and write client settings into the app.config configuration file. It stores user-customizable settings in XML format</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.ConfigurationHelperService.#ctor">
      <summary>Initializes a new instance of ConfigurationHelperService.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.ConfigurationHelperService.#ctor(System.Func`2)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.ConfigurationHelperService.GetSectionName(System.String,System.String)">
      <summary>Formats the group name and the key name.</summary>
      <returns>A formatted string of the form settingsGroupName.key.</returns>
      <param name="settingsGroupName">The group name.</param>
      <param name="key">The key.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.ConfigurationHelperService.GetSerializeAs(System.Type)">
      <summary>Determines the default serialization mechanism to use for a given type,.</summary>
      <returns>If this type has a <see cref="T:System.ComponentModel.TypeConverter" /> that can convert to and from a string, then F:System.Configuration.SettingsSerializeAs.String, otherwise F:System.Configuration.SettingsSerializeAs.Xml.   </returns>
      <param name="type">The type that is requesting a serializer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.ConfigurationHelperService.GetUserConfigurationPath(System.IServiceProvider,EnvDTE.Project,System.Configuration.ConfigurationUserLevel,System.Boolean,EnvDTE.Configuration)">
      <summary>Gets the most likely path to user configuration files for the current project, based on the values of different project properties. </summary>
      <returns>The user configuration path, or null if a valid path could not be constructed from the information in the project.</returns>
      <param name="provider">
        <see cref="T:System.IServiceProvider" />.</param>
      <param name="project">The current <see cref="T:EnvDTE.Project" />.</param>
      <param name="userLevel">
        <see cref="T:System.Configuration.ConfigurationUserLevel" />.</param>
      <param name="underHostingProcess">true if in a hosted process, otherwise false.</param>
      <param name="buildConfiguration">
        <see cref="T:EnvDTE.BuildConfiguration" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.ConfigurationHelperService.ReadConnectionStrings(System.String,Microsoft.VisualStudio.Shell.Design.Serialization.DocData,System.String)">
      <summary>Returns all the connection strings in the specified configuration that start with the specified prefix.</summary>
      <returns>The <see cref="T:System.Configuration.ConnectionStringSettingsCollection" /> of the strings that were found.</returns>
      <param name="configFileName">The target configuration file.</param>
      <param name="configDocData">The <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" /> for the configuration.</param>
      <param name="prefix">The string to search for.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.ConfigurationHelperService.ReadSettings(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel,Microsoft.VisualStudio.Shell.Design.Serialization.DocData,System.String,System.Boolean,System.Configuration.SettingsPropertyCollection)">
      <summary>Reads settings from the appropriate section. </summary>
      <returns>
        <see cref="T:System.Configuration.SettingsPropertyValueCollection" />.</returns>
      <param name="fileMap">
        <see cref="T:System.Configuration.ExeConfigurationFileMap" />.</param>
      <param name="userLevel">
        <see cref="T:System.Configuration.ConfigurationUserLevel" />.</param>
      <param name="appConfigDocData">The <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" /> for the configuration file.</param>
      <param name="sectionName">The name of the section of the configuration file.</param>
      <param name="isUserScoped">True if the section contains user-specific settings.</param>
      <param name="settings">
        <see cref="T:System.Configuration.SettingsPropertyCollection" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.ConfigurationHelperService.WriteConnectionStrings(System.String,Microsoft.VisualStudio.Shell.Design.Serialization.DocData,System.String,System.Configuration.ConnectionStringSettingsCollection)">
      <summary>Writes the connection strings to the specified configuration file after deleting any existing connection strings with the specified prefix.</summary>
      <param name="configFileName">The target configuration file.</param>
      <param name="configDocData">The working <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" />.</param>
      <param name="groupPrefix">The section of the file where the <paramref name="connectionStrings" /> should be written.</param>
      <param name="connectionStrings">
        <see cref="T:System.Configuration.ConnectionStringSettingsCollection" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.ConfigurationHelperService.WriteSettings(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel,Microsoft.VisualStudio.Shell.Design.Serialization.DocData,System.String,System.Boolean,System.Configuration.SettingsPropertyValueCollection)">
      <summary>Writes settings to the appropriate section after clearing existing settings.</summary>
      <param name="fileMap">
        <see cref="T:System.Configuration.ExeConfigurationFileMap" />.</param>
      <param name="userLevel">
        <see cref="T:System.Configuration.ConfigurationUserLevel" />.</param>
      <param name="appConfigDocData">The <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" /> for the configuration file.</param>
      <param name="sectionName">The name of the section to write to.</param>
      <param name="isUserScoped">true if the settings are user-specific, otherwise false.</param>
      <param name="values">The <see cref="T:System.Configuration.SettingsPropertyValueCollection" /> from which to read the settings.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService">
      <summary>Provides a way to create and retrieve buffers for various files in the project.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.#ctor(System.IServiceProvider,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,Microsoft.VisualStudio.Shell.Design.Serialization.DocData)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService" />. </summary>
      <param name="provider">
        <see cref="T:System.IServiceProvider" />.</param>
      <param name="primaryHierarchy">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface for the associated node in the project hierarchy.</param>
      <param name="primaryItemId">The item ID for the primary node.</param>
      <param name="primaryDocData">The primary <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" /> object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.#ctor(System.IServiceProvider,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.Object)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService" /> for the specified node and document data.</summary>
      <param name="provider">
        <see cref="T:System.IServiceProvider" />.</param>
      <param name="primaryHierarchy">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface for the associated node in the project hierarchy.</param>
      <param name="primaryItemId">The item ID for the primary node.</param>
      <param name="primaryDocData">The primary <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" /> object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.CheckoutFiles">
      <summary>Ensures that all relevant buffers are checked out.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.Dispose">
      <summary>Disposes the service.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.Flush">
      <summary>Performs a forced flush of all pending changes to the designer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.GetChildDocData(System.String,System.IO.FileAccess,System.String)">
      <summary>Gets a <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" /> with the given name.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" />, or null if the file does not exist and <paramref name="createTemplate" /> is null.</returns>
      <param name="name">The name of the requested child document.</param>
      <param name="access">A <see cref="T:System.IO.FileAccess" /> value that describes the access level of the file.</param>
      <param name="createTemplate">The path of a template file to be used in case the named document cannot be retrieved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.GetChildFileName(System.String)">
      <summary>Returns the absolute path of a child file from its name.</summary>
      <returns>The absolute path of the file.</returns>
      <param name="name">The name of the child file.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.GetFileDocData(System.String,System.IO.FileAccess,System.String)">
      <summary>Retrieves a <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" /> with the given name.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" />, or null if the file does not exist and <paramref name="createTemplate" /> is null.</returns>
      <param name="fileName">The name of the requested child document.</param>
      <param name="access">A <see cref="T:System.IO.FileAccess" /> value that describes the access level of the file.</param>
      <param name="createTemplate">The path of a template file to be used in case the named document cannot be retrieved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.GetFileDocData(System.String,System.IO.FileAccess,System.String,System.Boolean)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.GetSiblingDocData(System.String,System.IO.FileAccess,System.String)">
      <summary>Gets a <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" /> with the given name.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.EnterpriseTools.Shell.DocData" />, or null if the file does not exist and <paramref name="createTemplate" /> is null.</returns>
      <param name="name">The name of the requested child document.</param>
      <param name="access">A <see cref="T:System.IO.FileAccess" /> value that describes the access level of the file.</param>
      <param name="createTemplate">The path of a template file to be used in case the named document cannot be retrieved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.GetSiblingFileName(System.String)">
      <summary>Gets the absolute path of the sibling file name from the file name.</summary>
      <returns>The absolute path of the file.</returns>
      <param name="name">The short name of the sibling file.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.HasChild(System.String)">
      <summary>Determines whether or not there is a child <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" /> with a given <paramref name="name" />.</summary>
      <returns>true if the given child exists in the project, otherwise false.</returns>
      <param name="name">The name of the requested child.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.HasFile(System.String)">
      <summary>Determines whether or not there is a <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" /> with a given <paramref name="fileName" />.</summary>
      <returns>true if the given file exists in the project, otherwise false.</returns>
      <param name="fileName">The filename of the requested <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.HasSibling(System.String)">
      <summary>Determines whether or not there is a sibling <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" /> with the specified name.</summary>
      <returns>true if the given file exists in the project, otherwise false.</returns>
      <param name="name">The filename of the requested sibling <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.Microsoft#VisualStudio#Shell#Interop#IVsHasRelatedSaveItems#GetRelatedSaveTreeItems(Microsoft.VisualStudio.Shell.Interop.VSSAVETREEITEM,System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSSAVETREEITEM[],System.UInt32@)">
      <summary>Coordinates save operations across the documents maintained by this service. </summary>
      <returns>If <paramref name="celt" /> is either 0 or equal to <paramref name="pcActual" />, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; if not, <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" />. If <paramref name="saveItem" /> doesn't specify to close the documents, returns <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />.</returns>
      <param name="saveItem">A <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSSAVETREEITEM" /> structure that specifies how the items are to be saves.</param>
      <param name="celt">The number of documents to save.</param>
      <param name="rgSaveTreeItems">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSSAVETREEITEM" />  structures.</param>
      <param name="pcActual">[out] Returns the actual number of documents saved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.Microsoft#VisualStudio#Shell#Interop#IVsRunningDocTableEvents#OnAfterAttributeChange(System.UInt32,System.UInt32)">
      <summary>Called after an attribute has changed on a document in the Running Document Table.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="docCookie">The identifier of the document data object in the Running Document Table.</param>
      <param name="attribs">
        <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSRDTATTRIB" /> flags for the attributes that have changed. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.Microsoft#VisualStudio#Shell#Interop#IVsRunningDocTableEvents#OnAfterDocumentWindowHide(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)">
      <summary>Called after a document window is hidden. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="docCookie">The identifier of the document data in the Running Document Table.</param>
      <param name="pFrame">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> interface of the window that was hidden. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.Microsoft#VisualStudio#Shell#Interop#IVsRunningDocTableEvents#OnAfterFirstDocumentLock(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
      <summary>Called after the first lock of the specified type is applied to the specified document in the Running Document Table (RDT). </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="docCookie">The identifier of the document data object in the Running Document Table.</param>
      <param name="lockType">A <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSRDTFLAGS" /> value specifying the lock type.</param>
      <param name="readLocksRemaining">The number of read locks remaining.</param>
      <param name="editLocksRemaining">The number of edit locks remaining.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.Microsoft#VisualStudio#Shell#Interop#IVsRunningDocTableEvents#OnAfterSave(System.UInt32)">
      <summary>Called after a document in the Running Document Table (RDT) is saved. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="docCookie">The identifier of the document data object in the Running Document Table.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.Microsoft#VisualStudio#Shell#Interop#IVsRunningDocTableEvents#OnBeforeDocumentWindowShow(System.UInt32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)">
      <summary>Called before a document window is displayed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="docCookie">The identifier of the document data object in the Running Document Table.</param>
      <param name="firstShow">true if the window will be displayed for the first time, otherwise false.</param>
      <param name="pFrame">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> interface of the window that will be displayed. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.Microsoft#VisualStudio#Shell#Interop#IVsRunningDocTableEvents#OnBeforeLastDocumentUnlock(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
      <summary>Called before the last lock of the specified type is released on the specified document in the Running Document Table (RDT). </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="docCookie">The identifier of the document data object in the Running Document Table.</param>
      <param name="lockType">
        <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSRDTFLAGS" /> values specifying the type of lock being released.</param>
      <param name="readLocksRemaining">The number of read locks remaining.</param>
      <param name="editLocksRemaining">The number of edit locks remaining.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.Microsoft#VisualStudio#Shell#Interop#IVsRunningDocTableEvents2#OnAfterAttributeChange(System.UInt32,System.UInt32)">
      <summary>Called after an attribute has changed on a document in the Running Document Table.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="docCookie">The identifier of the document data object in the Running Document Table.</param>
      <param name="grfAttribs">
        <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSRDTATTRIB" /> flags for the attributes that have changed. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.Microsoft#VisualStudio#Shell#Interop#IVsRunningDocTableEvents2#OnAfterAttributeChangeEx(System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.String)">
      <summary>Called after an attribute has changed on a document in the Running Document Table.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="docCookie">The identifier of the document in the Running Document Table.</param>
      <param name="attribs">
        <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSRDTATTRIB" /> values corresponding to the attributes that have changed. </param>
      <param name="pHierOld">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the node that previously owned the document.</param>
      <param name="itemidOld">The previous item ID.</param>
      <param name="pszMkDocumentOld">The previous name of the document.</param>
      <param name="pHierNew">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the node that now owns the document.</param>
      <param name="itemidNew">The new item ID.</param>
      <param name="pszMkDocumentNew">The new name of the document.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.Microsoft#VisualStudio#Shell#Interop#IVsRunningDocTableEvents2#OnAfterDocumentWindowHide(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)">
      <summary>Called after a document window is hidden.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="docCookie">The identifier of the document data object in the Running Document Table.</param>
      <param name="pFrame">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> interface of the window to be hidden.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.Microsoft#VisualStudio#Shell#Interop#IVsRunningDocTableEvents2#OnAfterFirstDocumentLock(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
      <summary>Called after the first lock of the specified type is applied to the specified document in the Running Document Table (RDT). </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="docCookie">The identifier of the document data object in the Running Documents Table.</param>
      <param name="lockType">
        <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSRDTFLAGS" /> values specifying the type of lock.</param>
      <param name="readLocksRemaining">The number of read locks remaining.</param>
      <param name="editLocksRemaining">The number of edit locks remaining.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.Microsoft#VisualStudio#Shell#Interop#IVsRunningDocTableEvents2#OnAfterSave(System.UInt32)">
      <summary>Called after a document in the Running Document Table (RDT) is saved. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="docCookie">The identifier of the document data object in the Running Document Table.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.Microsoft#VisualStudio#Shell#Interop#IVsRunningDocTableEvents2#OnBeforeDocumentWindowShow(System.UInt32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)">
      <summary>Called before a document window is displayed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="docCookie">The identifier of the document data object in the Running Document Table.</param>
      <param name="firstShow">true if the window will be displayed for the first time, otherwise false.</param>
      <param name="pFrame">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> interface of the window that will be displayed. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.Microsoft#VisualStudio#Shell#Interop#IVsRunningDocTableEvents2#OnBeforeLastDocumentUnlock(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
      <summary>Called before the last lock of the specified type is released on the specified document in the Running Document Table (RDT).</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="docCookie">The identifier of the document data object in the Running Document Table.</param>
      <param name="lockType">
        <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSRDTFLAGS" /> values specifying the type of lock being released.</param>
      <param name="readLocksRemaining">The number of read locks remaining.</param>
      <param name="editLocksRemaining">The number of edit locks remaining.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.PrimaryDocData">
      <summary>Gets the document data object for the <paramref name="primaryDocData" /> that was passed into either of this service's overloaded constructors <see cref="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.#ctor(System.IServiceProvider,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,Microsoft.VisualStudio.Shell.Design.Serialization.DocData)" /> or <see cref="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.#ctor(System.IServiceProvider,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.Object)" />.</summary>
      <returns>This <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" /> has its save, checkout and running document table lifetimes linked to all other DocData objects returned by this service. This DocData automatically checks itself when <see cref="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocData.Modify" /> is called.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.PrimaryName">
      <summary>Gets the fully-qualified file name of the primary doc data object.</summary>
      <returns>The fully-qualified file name of the primary document data object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.SaveDocData(Microsoft.VisualStudio.Shell.Design.Serialization.DocData)">
      <summary>Performs a save on the given doc data.</summary>
      <param name="docData">The <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" /> to be saved.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData">
      <summary>A wrapper around a <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" /> object that provides additional features.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocData.#ctor(System.IServiceProvider,System.String)">
      <summary>Initializes a new instance of DocData from the specified file and sets the site from the specified site.</summary>
      <param name="provider">
        <see cref="T:System.IServiceProvider" />.</param>
      <param name="fileName">The source file.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocData.#ctor(System.Object)">
      <summary>Initializes a new <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" /> object for the given buffer.</summary>
      <param name="docData">The buffer.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.Serialization.DocData.Buffer">
      <summary>The text buffer contained within the doc data.</summary>
      <returns>The text buffer if one exists, otherwise null.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocData.CheckoutFile(System.IServiceProvider)">
      <summary>Checks out the doc data file from source code control.</summary>
      <param name="provider">The <see cref="T:System.IServiceProvider" /> interface used for the checkout operation.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocData.CreateChangeMarker">
      <summary>Marks the beginning of an external change of the text buffer.</summary>
      <returns>An <see cref="T:System.IDisposable" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.Serialization.DocData.Data">
      <summary>The actual <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" /> object this class wraps.</summary>
      <returns>The doc data object.</returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Shell.Design.Serialization.DocData.DataChanged">
      <summary>An event that is raised when the data contained within this doc data has changed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocData.Dispose">
      <summary>Disposes the DocData.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocData.Dispose(System.Boolean)">
      <summary>Disposes the <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" />.</summary>
      <param name="disposing">trueto release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocData.Finalize">
      <summary>Called automatically when this object is destroyed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocData.Microsoft#VisualStudio#Shell#Interop#IVsDocumentLockHolder#CloseDocumentHolder(System.UInt32)">
      <summary>Close the document based on a user request.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> .</returns>
      <param name="saveOptions">Values from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__FRAMECLOSE" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocData.Microsoft#VisualStudio#Shell#Interop#IVsDocumentLockHolder#ShowDocumentHolder">
      <summary>Called by Visual Studio to show the window frame associated with this document.</summary>
      <returns>If the method succeeded, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />, otherwise an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocData.Microsoft#VisualStudio#TextManager#Interop#IVsTextStreamEvents#OnChangeStreamAttributes(System.Int32,System.Int32)">
      <summary>A notification from Visual Studio that something in the text has changed.</summary>
      <param name="iPos">Starting position of the changed text in the underlying buffer.</param>
      <param name="iLength">Length of the changed text in the underlying buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocData.Microsoft#VisualStudio#TextManager#Interop#IVsTextStreamEvents#OnChangeStreamText(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Provides a notification from Visual Studio that something in the text has changed.</summary>
      <param name="iPos">The position of the change in the underlying text buffer.</param>
      <param name="iOldLen">The old length of text in the underlying buffer.</param>
      <param name="iNewLen">The new length of text in the underlying buffer.</param>
      <param name="fLast">Not used.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.Serialization.DocData.Modified">
      <summary>Determines whether the buffer has been modified</summary>
      <returns>true if the buffer has been modified.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocData.Modify">
      <summary>Marks this DocData as modified.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Shell.Design.Serialization.DocData.Modifying">
      <summary>An event that is raised when this <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" /> object is being marked as modified.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.Serialization.DocData.Name">
      <summary>Gets the file name of the doc data.</summary>
      <returns>This is typically retrieved by accessing the user data with an ID if IID_IVsUserData.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocData.OnDataChanged(System.EventArgs)">
      <summary>Called when an external change has been made to the doc data.</summary>
      <param name="e">The arguments of the event change.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocData.OnModifying(System.EventArgs)">
      <summary>Called by <see cref="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocData.Modify" />.</summary>
      <param name="e"> <see cref="T:System.EventArgs" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocData.RaiseModifying">
      <summary>Raises the Modifying event.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocDataTextReader">
      <summary>Derives from <see cref="T:System.IO.TextReader" /> and provides a standard mechanism for reading from a Visual Studio text buffer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocDataTextReader.#ctor(Microsoft.VisualStudio.Shell.Design.Serialization.DocData)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocDataTextReader" /> for the given doc data.</summary>
      <param name="docData">The <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocDataTextReader.#ctor(Microsoft.VisualStudio.Shell.Design.Serialization.DocData,System.Boolean)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocDataTextReader" /> for the specified doc data object and determines whether <see cref="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocData.Dispose" /> will be called on the <paramref name="docData" /> when the DocDataTextReader is disposed.</summary>
      <param name="docData">The <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" /> that the DocDataTextReader reads.</param>
      <param name="disposeDocData">If true, <see cref="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocData.Dispose" /> will be called on the underlying <paramref name="docData" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocDataTextReader.Dispose(System.Boolean)">
      <summary>Overrides the base class implementation to call <see cref="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocData.Dispose" /> on the underlying <paramref name="docData" /> if <paramref name="disposeDocData" /> was true in the overloaded constructor <see cref="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocDataTextReader.#ctor(Microsoft.VisualStudio.Shell.Design.Serialization.DocData,System.Boolean)" />.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.Serialization.DocDataTextReader.DocData">
      <summary>Gets the doc data object.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Modeling.Shell.DocData" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocDataTextReader.Peek">
      <summary>Gets the current position in the text.</summary>
      <returns>The current position, or -1 if the current position is equal to or greater than the length of the text.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocDataTextReader.Read">
      <summary>Gets the text at the next position.</summary>
      <returns>The text at the next position (incrementing the internal counter), or -1 if the current position is equal to or greater than the length of the stream.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocDataTextReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>Sets the text of the specified buffer at the specified position.</summary>
      <returns>The number of characters actually read.</returns>
      <param name="buffer">A character array to be populated.</param>
      <param name="index">The starting point in the underlying text.</param>
      <param name="count">The number of items in the underlying text to be copied.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocDataTextReader.System#IServiceProvider#GetService(System.Type)">
      <summary>Gets the service of the specified type.</summary>
      <returns>The service object.</returns>
      <param name="serviceType">The type of the service to be retrieved.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocDataTextWriter">
      <summary>Provides a standard <see cref="N:System.IO" /> mechanism for writing to a Visual Studio text buffer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocDataTextWriter.#ctor(Microsoft.VisualStudio.Shell.Design.Serialization.DocData)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocDataTextWriter" /> for the given doc data.</summary>
      <param name="docData">
        <see cref="T:Microsoft.VisualStudio.Modeling.Shell.DocData" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocDataTextWriter.#ctor(Microsoft.VisualStudio.Shell.Design.Serialization.DocData,System.Boolean)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocDataTextWriter" /> for the specified doc data, and determines whether or not to dispose the doc data object when this instance is closed or disposed.</summary>
      <param name="docData">
        <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" />.</param>
      <param name="disposeDocData">If true, this instance should dispose the doc data when it is closed or disposed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocDataTextWriter.Dispose(System.Boolean)">
      <summary>Disposes the object and its resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.Serialization.DocDataTextWriter.DocData">
      <summary>Gets the doc data object.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.Serialization.DocDataTextWriter.Encoding">
      <summary>Gets the encoding of this text writer.</summary>
      <returns>
        <see cref="T:System.Text.UnicodeEncoding" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocDataTextWriter.Flush">
      <summary>Replaces the contents of the text stream with the contents of the string builder.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocDataTextWriter.System#IServiceProvider#GetService(System.Type)">
      <summary>Gets the service of the specified type.</summary>
      <returns>The service.</returns>
      <param name="serviceType">The type of service.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocDataTextWriter.Write(System.Char)">
      <summary>Appends a char to the underlying <see cref="T:System.Text.StringBuilder" />.</summary>
      <param name="ch">The char that is appended to the underlying <see cref="T:System.Text.StringBuilder" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocDataTextWriter.Write(System.String)">
      <summary>Appends a string to the underlying <see cref="T:System.Text.StringBuilder" />.</summary>
      <param name="s">The string that is appended to the underlying <see cref="T:System.Text.StringBuilder" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.Serialization.LocalizationProviderService">
      <summary>A designer serialization provider that adds extended properties to support localization.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.LocalizationProviderService.#ctor">
      <summary>Creates a new instance of a LocalizationProviderService.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.LocalizationProviderService.CreateProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationManager)">
      <summary>Creates a provider for the given serialization manager.</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider" />.</returns>
      <param name="manager">A serialization manager.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.Serialization.ProvideDesignerLoaderAttribute">
      <summary>Place this attribute on a class that is derived from <see cref="T:System.ComponentModel.Design.Serialization.DesignerLoader" /> to associate the class with a particular language service or file extension.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.ProvideDesignerLoaderAttribute.#ctor(Microsoft.VisualStudio.Shell.Design.AttributeScope,System.Object)">
      <summary>Provides a new instance of ProvideDesignerLoaderAttribute.</summary>
      <param name="scope">The values of the enumeration <see cref="T:Microsoft.VisualStudio.Shell.Design.AttributeScope" /> are Language and File.</param>
      <param name="scopeData">The value of the <paramref name="scope" />. Logic internal to the method treats this as a string.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.ProvideDesignerLoaderAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Called to register this attribute with the given context.</summary>
      <param name="context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.Serialization.ProvideDesignerLoaderAttribute.Scope">
      <summary>Gets the scope of this attribute.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Shell.Design.AttributeScope" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.Serialization.ProvideDesignerLoaderAttribute.ScopeData">
      <summary>Gets the data for the scope.</summary>
      <returns>The data for the scope. If scope is <see cref="F:Microsoft.VisualStudio.Shell.Design.AttributeScope.Language" />, the scope data is the name of the language service; if it is <see cref="F:Microsoft.VisualStudio.Shell.Design.AttributeScope.File" />, the scope data is the file extension.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.Serialization.ProvideDesignerLoaderAttribute.TypeId">
      <summary>Gets a unique type value.</summary>
      <returns>The type value created by concatenating the full type name of this attribute with <see cref="P:Microsoft.VisualStudio.Shell.Design.Serialization.ProvideDesignerLoaderAttribute.Scope" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.ProvideDesignerLoaderAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Removes the registration information about a VSPackage when called by an external registration tool such as regpkg.exe.</summary>
      <param name="context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.Serialization.ProvideGeneratorAttribute">
      <summary>Registers the given code generator for Visual Basic and Visual C# projects when added to a <see cref="T:Microsoft.VisualStudio.Shell.Package" />-derived class or a class that implements <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPackage" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.ProvideGeneratorAttribute.#ctor(System.Type,System.String,System.String,System.String,System.Boolean)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.ProvideGeneratorAttribute" /> for the given package and generator.</summary>
      <param name="generatorType">The type of the associated code generator.</param>
      <param name="name">The name of the associated code generator.</param>
      <param name="description">The description of the associated code generator.</param>
      <param name="packageGuid">The GUID of the package containing a project that supports invoking a code generator of <paramref name="generatorType" />.</param>
      <param name="generateDesignTimeSource">true if the associated code generator generates source code for use at design time, otherwise false.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.Serialization.ProvideGeneratorAttribute.Description">
      <summary>Gets the description of the generator.</summary>
      <returns>The description of the generator.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.Serialization.ProvideGeneratorAttribute.GenerateDesignTimeSource">
      <summary>Gets whether source code is generated for use at design time.</summary>
      <returns>true if the associated code generator generates source code for use at design time, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.Serialization.ProvideGeneratorAttribute.GeneratorType">
      <summary>Gets the type of the code generator.</summary>
      <returns>The type of the code generator.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.Serialization.ProvideGeneratorAttribute.Name">
      <summary>Gets the name of the generator.</summary>
      <returns>The name of the generator.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.Serialization.ProvideGeneratorAttribute.PackageGuid">
      <summary>Gets the GUID of the package containing a project that supports invoking this generator.</summary>
      <returns>The GUID of the package containing a project that supports invoking this generator.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.ProvideGeneratorAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Registers this attribute with the given context.</summary>
      <param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.ProvideGeneratorAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Removes the registration information about a VSPackage when called by an external registration tool like regpkg.exe. For more information, see Registering VSPackages.</summary>
      <param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.Serialization.RelatedDocDataCollection">
      <summary>A strongly-typed collection that stores document data objects.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.RelatedDocDataCollection.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.RelatedDocDataCollection" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.RelatedDocDataCollection.#ctor(Microsoft.VisualStudio.Shell.Design.Serialization.DocData[])">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.RelatedDocDataCollection" /> for the specified array of document data objects.</summary>
      <param name="value">An array of <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" /></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.RelatedDocDataCollection.#ctor(Microsoft.VisualStudio.Shell.Design.Serialization.RelatedDocDataCollection)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.RelatedDocDataCollection" /> based on another <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.RelatedDocDataCollection" /> object.</summary>
      <param name="value">An initialization collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.RelatedDocDataCollection.Add(Microsoft.VisualStudio.Shell.Design.Serialization.DocData)">
      <summary>Adds the specified value to the collection. </summary>
      <returns>The position in the collection at which the document data was added.</returns>
      <param name="value">The document data object to be added.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.RelatedDocDataCollection.AddRange(Microsoft.VisualStudio.Shell.Design.Serialization.DocData[])">
      <summary>Copies the elements of an array of document data objects to the end of the <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.RelatedDocDataCollection" />.</summary>
      <param name="value">An array of document data objects to be appended to the underlying collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.RelatedDocDataCollection.AddRange(Microsoft.VisualStudio.Shell.Design.Serialization.RelatedDocDataCollection)">
      <summary>Adds the contents of another <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.RelatedDocDataCollection" /> to the end of the collection.</summary>
      <param name="value">The added value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.RelatedDocDataCollection.Contains(Microsoft.VisualStudio.Shell.Design.Serialization.DocData)">
      <summary>Determines whether the collection contains the specified document data object.</summary>
      <returns>true if the collection contains the specified document data object, otherwise false.</returns>
      <param name="value">The <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" /> object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.RelatedDocDataCollection.CopyTo(Microsoft.VisualStudio.Shell.Design.Serialization.DocData[],System.Int32)">
      <summary>Copies the collection to an array of document data objects starting at the specified index.</summary>
      <param name="array">The target array.</param>
      <param name="index">The index of the array at which to begin copying.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.RelatedDocDataCollection.IndexOf(Microsoft.VisualStudio.Shell.Design.Serialization.DocData)">
      <summary>Gets the index of a specified document data object in the collection. </summary>
      <returns>The index of the document data object, or -1 if it was not found.</returns>
      <param name="value">The document data object to find.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.RelatedDocDataCollection.Insert(System.Int32,Microsoft.VisualStudio.Shell.Design.Serialization.DocData)">
      <summary>Inserts a document data object into the collection at the specified index.</summary>
      <param name="index">The index at which to insert the object.</param>
      <param name="value">The <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" /> to be inserted.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.Serialization.RelatedDocDataCollection.Item(System.Int32)">
      <summary>Gets the document data object at the specified index.</summary>
      <returns>The document data object at the specified index.</returns>
      <param name="index">Index offset of this collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.RelatedDocDataCollection.Remove(Microsoft.VisualStudio.Shell.Design.Serialization.DocData)">
      <summary>Removes the specified document data object from the collection.</summary>
      <param name="value">The <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" /> to be removed.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.ChangeNotificationService">
      <summary>Used to rename project scope symbols.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.ChangeNotificationService.#ctor">
      <summary>Returns a new instance of the service.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.ChangeNotificationService.RenameElement(EnvDTE.CodeElement,System.String)">
      <summary>Renames the element</summary>
      <returns>When implemented by derived classes, true if it was possible to rename the element, otherwise false.</returns>
      <param name="element">An instance of a <see cref="T:EnvDTE.CodeElement" />.</param>
      <param name="newName">The new proposed name.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomDesignerData">
      <summary>Provides designer-centric information about an element of the code DOM. It can be stored in the code DOM's user data dictionary. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomDesignerData.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomDesignerData" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomDesignerData.CaretPosition">
      <summary>Gets or sets the recommended caret placement position for the member to which this object is attached.</summary>
      <returns>The recommended caret position.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomDesignerData.FileName">
      <summary>Gets or sets the name of the file associated with this element.</summary>
      <returns>The name of the file associated with this element.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomDocDataAdapter">
      <summary>Maintains a cached <see cref="T:System.CodeDom.Namespace.CodeTypeDeclaration" /> that objects may use to access the code DOM indirectly. Since multiple objects may be working on the code DOM tree for the design surface at a given time, they could overwrite each other's changes if they all accessed the code DOM tree directly. In addition, this class has several properties that expose the <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />, and contains a reference to the actual <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.DocData" /> object.  </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomDocDataAdapter.#ctor(System.IServiceProvider,Microsoft.VisualStudio.Shell.Design.Serialization.DocData)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomDocDataAdapter" /> for the specified <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" /> object.</summary>
      <param name="provider">
        <see cref="T:System.IServiceProvider" />.</param>
      <param name="docData">
        <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" />.</param>
    </member>
    <member name="E:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomDocDataAdapter.CodeDomChanged">
      <summary>This event is raised when an external party has made a change to the code file that would cause the code DOM to need rebuilding.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomDocDataAdapter.CompileUnit">
      <summary>Gets the entire compile unit in which the document data exists.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeCompileUnit" />, or null if the document data has not been set.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomDocDataAdapter.Dispose">
      <summary>Disposes this object.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomDocDataAdapter.Dispose(System.Boolean)">
      <summary>Disposes the resources of this object.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomDocDataAdapter.DocData">
      <summary>Gets the associated document data.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomDocDataAdapter.Generate">
      <summary>Takes the current type declaration and generates it into the doc data.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomDocDataAdapter.Generator">
      <summary>Gets a cached code generator that may be used to validate identifiers and generate code.</summary>
      <returns>
        <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomDocDataAdapter.GetService(System.Type)">
      <summary>Gets the service of the specified type.</summary>
      <returns>The object representing the specified service, or null if none is available.</returns>
      <param name="serviceType">The type of the service to get.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomDocDataAdapter.OnCodeDomChanged(System.EventArgs)">
      <summary>Called when the code has changed externally.</summary>
      <param name="e">
        <see cref="T:System.EventArgs" />.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomDocDataAdapter.Parser">
      <summary>Gets the code parser.</summary>
      <returns>
        <see cref="T:System.CodeDom.Compiler.ICodeParser" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomDocDataAdapter.Provider">
      <summary>Gets the code DOM provider for the file.</summary>
      <returns>
        <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomDocDataAdapter.TypeDeclaration">
      <summary>Gets the code type declaration for this document.</summary>
      <returns>The <see cref="T:System.CodeDom.CodeTypeDeclaration" />, or the first one if there are multiple types in the document.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomDocDataAdapter.TypeNamespace">
      <summary>Gets the code namespace for this document.</summary>
      <returns>The <see cref="T:System.CodeDom.CodeNamespace" />, or the first one if there are multiple types in the project.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomEventBindingService">
      <summary>A service used to generate event-handling code. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomEventBindingService.#ctor(System.IServiceProvider)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomEventBindingService" />.  </summary>
      <param name="provider">
        <see cref="T:System.IServiceProvider" />.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomEventBindingService.CodeDomAdapter">
      <summary>Gets the code DOM data adapter.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomDocDataAdapter" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomEventBindingService.CreateUniqueMethodName(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)">
      <summary>Creates a unique method name for the event. </summary>
      <returns>The unique name.</returns>
      <param name="component">
        <see cref="T:System.ComponentModel.IComponent" />.</param>
      <param name="e">
        <see cref="T:System.ComponentModel.EventDescriptor" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomEventBindingService.FreeMethod(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor,System.String)">
      <summary>Removes the specified method from the code if no event handlers are using it and it is empty.</summary>
      <param name="component">
        <see cref="T:System.ComponentModel.IComponent" />.</param>
      <param name="e">
        <see cref="T:System.ComponentModel.EventDescriptor" />.</param>
      <param name="methodName">The name of the method to remove.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomEventBindingService.GetCompatibleMethods(System.ComponentModel.EventDescriptor)">
      <summary>Gets all the methods in the code DOM that are compatible with the specified event descriptor.</summary>
      <returns>A collection of all the names of compatible methods.</returns>
      <param name="e">
        <see cref="T:System.ComponentModel.EventDescriptor" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomEventBindingService.ShowCode">
      <summary>Displays the code in the document data in the editor window.</summary>
      <returns>true if it was possible to open the editor window, otherwise false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomEventBindingService.ShowCode(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor,System.String)">
      <summary>Shows the body of the user code with the given method name and event descriptor. </summary>
      <returns>true if it was possible to open the editor window, otherwise false.</returns>
      <param name="component">
        <see cref="T:System.ComponentModel.IComponent" />.</param>
      <param name="e">
        <see cref="T:System.ComponentModel.EventDescriptor" />.</param>
      <param name="methodName">The name of the method.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomEventBindingService.ShowCode(System.Int32)">
      <summary>Displays the code at the specified line.</summary>
      <returns>true if it was possible to open the editor window, otherwise false.</returns>
      <param name="lineNumber">The line of the code to display.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomEventBindingService.UseMethod(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor,System.String)">
      <summary>Creates the method declaration for the given method name and event descriptor.</summary>
      <param name="component">
        <see cref="T:System.ComponentModel.IComponent" />.</param>
      <param name="e">
        <see cref="T:System.ComponentModel.EventDescriptor" />.</param>
      <param name="methodName">The name of the method.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomEventBindingService.ValidateMethodName(System.String)">
      <summary>Validates the name of the method.</summary>
      <param name="methodName">The method name to validate.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsFrameworkMultiTargeting"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFrameworkMultiTargeting._VtblGap1_5"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFrameworkMultiTargeting.ResolveAssemblyPath(System.String,System.String,System.String@)">
      <param name="pwszAssemblySpec"></param>
      <param name="pwszTargetFrameworkMoniker"></param>
      <param name="pbstrResolvedAssemblyPath"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsSettingsStore"></member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsUIElementPane"></member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsUISimpleDataSource"></member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\VisualStudio\VS10RTM\VisualStudioIntegration\Common\Source\CPP\VSL\VSLArchitecture_files\data.xml ===
<?xml version="1.0" encoding="utf-8"?>
<VisioDocument>
	<DocumentProperties>
		<Title></Title>
		<HyperlinkBase href=""></HyperlinkBase>
	</DocumentProperties>
	<Pages>
		<Page ID="15" Name="IServiceProvider Cache's" NameU="IServiceProviderCache">
			<Shapes>
				<Shape ID="1" UniqueID="{6A2135D6-0E1F-4889-8EAE-ABBA1AB5DB83}" Name="Watermark Title" NameU="Watermark Title" Master="18">
					<Text>Static Structure</Text>
					<XForm>
						<PinX Unit="MM">0.000000000000000</PinX>
						<PinY Unit="MM">10.999999999999998</PinY>
					</XForm>
				</Shape>
				<Shape ID="2" UniqueID="{01FCF4A8-CE2B-4B7D-8600-CDB5333C94C5}" Name="Class" NameU="Class" Master="22">
					<XForm>
						<PinX Unit="MM">6.190736553981060</PinX>
						<PinY Unit="MM">7.039761160419828</PinY>
					</XForm>
				</Shape>
				<Shape ID="9" UniqueID="{316F40BB-808C-4EFA-89BA-0D7AFDED70E6}" Name="Name" NameU="Name">
					<Text>«implementation class»
IServiceProviderRefCountGlobal</Text>
					<XForm>
						<PinX Unit="MM">6.190736553981060</PinX>
						<PinY Unit="MM">7.214958010813529</PinY>
					</XForm>
				</Shape>
				<Shape ID="11" UniqueID="{046ACE3C-B163-4BA4-B820-1C6B866537F5}" Name="Class.11" NameU="Class.11" Master="22">
					<XForm>
						<PinX Unit="MM">1.571092043516654</PinX>
						<PinY Unit="MM">7.086614173228346</PinY>
					</XForm>
				</Shape>
				<Shape ID="18" UniqueID="{BB3A2D14-8CFC-497A-B0E5-15D87D2D9DF2}" Name="Name" NameU="Name">
					<Text>«struct»
IServiceProviderCacheTraits</Text>
					<XForm>
						<PinX Unit="MM">1.571092043516654</PinX>
						<PinY Unit="MM">7.261811023622047</PinY>
					</XForm>
				</Shape>
				<Shape ID="19" UniqueID="{F3A58051-EA20-4DC8-853D-ED1D08E54CC9}" Name="Parameters" NameU="Parameters">
					<Text>BaseCache_T, IServiceProviderRefCount_T</Text>
					<XForm>
						<PinX Unit="MM">2.362204724409449</PinX>
						<PinY Unit="MM">7.526916442379823</PinY>
					</XForm>
				</Shape>
				<Shape ID="20" UniqueID="{1BD423B6-8123-4CDD-956D-441CD4FCE81D}" Name="Class.20" NameU="Class.20" Master="22">
					<XForm>
						<PinX Unit="MM">3.887731545734108</PinX>
						<PinY Unit="MM">4.941324773123299</PinY>
					</XForm>
				</Shape>
				<Shape ID="27" UniqueID="{6A9D2FC4-AED2-4F50-8166-4E76CEFF5960}" Name="Name" NameU="Name">
					<Text>IServiceProviderCache</Text>
					<XForm>
						<PinX Unit="MM">3.887731545734108</PinX>
						<PinY Unit="MM">5.116521623517000</PinY>
					</XForm>
				</Shape>
				<Shape ID="28" UniqueID="{386A6F35-7171-4FB7-92C2-723EA764D457}" Name="Parameters" NameU="Parameters">
					<Text>Traits_T</Text>
					<XForm>
						<PinX Unit="MM">4.527559055118115</PinX>
						<PinY Unit="MM">5.314960629921259</PinY>
					</XForm>
				</Shape>
				<Shape ID="29" UniqueID="{7F73B11F-2985-49CC-B748-726F74E32895}" Name="Class.29" NameU="Class.29" Master="22">
					<XForm>
						<PinX Unit="MM">6.102362204724409</PinX>
						<PinY Unit="MM">9.763779527559056</PinY>
					</XForm>
				</Shape>
				<Shape ID="36" UniqueID="{10DF6E9D-535A-4AB3-B949-EB886F722C53}" Name="Name" NameU="Name">
					<Text>PointerWithNullDefault</Text>
					<XForm>
						<PinX Unit="MM">6.102362204724409</PinX>
						<PinY Unit="MM">9.938976377952756</PinY>
					</XForm>
				</Shape>
				<Shape ID="37" UniqueID="{D8E71048-A91C-45CC-BEEF-648D0B975C77}" Name="Parameters" NameU="Parameters">
					<Text>PointerType_T</Text>
					<XForm>
						<PinX Unit="MM">6.741813966427751</PinX>
						<PinY Unit="MM">10.137415384357015</PinY>
					</XForm>
				</Shape>
				<Shape ID="38" UniqueID="{4A736CFF-BA98-4C90-8B03-F25CD2A4C9AB}" Name="Class.38" NameU="Class.38" Master="22">
					<XForm>
						<PinX Unit="MM">2.952755905511811</PinX>
						<PinY Unit="MM">8.642112174698104</PinY>
					</XForm>
				</Shape>
				<Shape ID="45" UniqueID="{D15BB045-A3CF-4E7F-B67B-19F30C7E740C}" Name="Name" NameU="Name">
					<Text>LocalCache</Text>
					<XForm>
						<PinX Unit="MM">2.952755905511811</PinX>
						<PinY Unit="MM">8.817309025091804</PinY>
					</XForm>
				</Shape>
				<Shape ID="46" UniqueID="{1B78D45D-4BF7-42D3-AE1F-EDB665B86A27}" Name="Parameters" NameU="Parameters">
					<Text>TypeToCacheWithDefault_T</Text>
					<XForm>
						<PinX Unit="MM">3.326771653543307</PinX>
						<PinY Unit="MM">9.015748031496063</PinY>
					</XForm>
				</Shape>
				<Shape ID="48" UniqueID="{2578C883-D5D7-4D6D-B2E6-E5379203BD4E}" Name="Class.48" NameU="Class.48" Master="22">
					<XForm>
						<PinX Unit="MM">2.933208036429789</PinX>
						<PinY Unit="MM">9.763779527559057</PinY>
					</XForm>
				</Shape>
				<Shape ID="55" UniqueID="{B14B241E-55E8-4025-8B07-002CA229ED4D}" Name="Name" NameU="Name">
					<Text>GlobalCache</Text>
					<XForm>
						<PinX Unit="MM">2.933208036429789</PinX>
						<PinY Unit="MM">9.938976377952757</PinY>
					</XForm>
				</Shape>
				<Shape ID="56" UniqueID="{DFA5741D-29F8-4473-8FF6-283CCFD1769E}" Name="Parameters" NameU="Parameters">
					<Text>TypeToCacheWithDefault_T</Text>
					<XForm>
						<PinX Unit="MM">3.307360954749342</PinX>
						<PinY Unit="MM">10.137415384357016</PinY>
					</XForm>
				</Shape>
				<Shape ID="47" UniqueID="{C98741A1-1DE6-4B04-AE3B-E62F5BA52FA6}" Name="Binding" NameU="Binding" Master="32">
					<Text>«bind»
TypeToCacheWithDefault_T()</Text>
					<XForm>
						<PinX Unit="MM">4.714566929133858</PinX>
						<PinY Unit="MM">8.922718958530108</PinY>
					</XForm>
				</Shape>
				<Shape ID="57" UniqueID="{630588C2-55B8-4B31-A347-46A65FCFA480}" Name="Binding.57" NameU="Binding.57" Master="32">
					<Text>«bind»
TypeToCacheWithDefault_T()</Text>
					<XForm>
						<PinX Unit="MM">4.385135698885204</PinX>
						<PinY Unit="MM">9.576961599160075</PinY>
					</XForm>
				</Shape>
				<Shape ID="58" UniqueID="{957FA63F-6881-4622-9F66-69999F90A0FD}" Name="Binding.58" NameU="Binding.58" Master="32">
					<Text>«bind»
BaseCache_T(,)</Text>
					<XForm>
						<PinX Unit="MM">2.074916100498484</PinX>
						<PinY Unit="MM">7.991105344339474</PinY>
					</XForm>
				</Shape>
				<Shape ID="59" UniqueID="{F42FC462-079B-4A90-862D-BC81FDBCBE51}" Name="Binding.59" NameU="Binding.59" Master="32">
					<Text>«bind»
BaseCache_T(,)</Text>
					<XForm>
						<PinX Unit="MM">1.867295410590246</PinX>
						<PinY Unit="MM">8.551939020769950</PinY>
					</XForm>
				</Shape>
				<Shape ID="60" UniqueID="{0709DE8F-8E2F-48EF-9E68-D64358A24722}" Name="Binding.60" NameU="Binding.60" Master="32">
					<Text>«bind»
IServiceProviderRefCount_T(,)</Text>
					<XForm>
						<PinX Unit="MM">3.828531829571610</PinX>
						<PinY Unit="MM">6.872501208538813</PinY>
					</XForm>
				</Shape>
				<Shape ID="61" UniqueID="{EF3FE31F-9DD0-47A9-AD29-4A8E558782F1}" Name="Binding.61" NameU="Binding.61" Master="32">
					<Text>«bind»
Traits_T()</Text>
					<XForm>
						<PinX Unit="MM">2.409498039933378</PinX>
						<PinY Unit="MM">5.887227302799575</PinY>
					</XForm>
				</Shape>
				<Shape ID="62" UniqueID="{6DB08959-7C8B-4A66-A803-0F0117CAE434}" Name="Metaclass" NameU="Metaclass" Master="34">
					<Text>«metaclass»
Traits_T::BaseCache_T</Text>
					<XForm>
						<PinX Unit="MM">3.880415329602311</PinX>
						<PinY Unit="MM">6.109845138792771</PinY>
					</XForm>
				</Shape>
				<Shape ID="71" UniqueID="{8BCD8F49-F7D5-4B12-AE79-BD28592565F7}" Name="Generalization" NameU="Generalization" Master="24">
					<XForm>
						<PinX Unit="MM">3.884073437668209</PinX>
						<PinY Unit="MM">5.551181102362205</PinY>
					</XForm>
				</Shape>
				<Shape ID="73" UniqueID="{87CC4012-6FA7-45DF-B6B7-5D128942A2DF}" Name="Class.73" NameU="Class.73" Master="22">
					<XForm>
						<PinX Unit="MM">1.417322834645669</PinX>
						<PinY Unit="MM">3.464566929133858</PinY>
					</XForm>
				</Shape>
				<Shape ID="80" UniqueID="{9D061BE0-5DBF-400C-AADE-B0B7F4024DE5}" Name="Name" NameU="Name">
					<Text>CommonServiceCacheGlobal</Text>
					<XForm>
						<PinX Unit="MM">1.417322834645669</PinX>
						<PinY Unit="MM">3.639763779527559</PinY>
					</XForm>
				</Shape>
				<Shape ID="82" UniqueID="{10A2D791-102A-43B5-B8E8-2EE85B58DAC0}" Name="Class.82" NameU="Class.82" Master="22">
					<XForm>
						<PinX Unit="MM">1.380530178258249</PinX>
						<PinY Unit="MM">2.559055118110236</PinY>
					</XForm>
				</Shape>
				<Shape ID="89" UniqueID="{E07F7E79-DE1B-422E-BC8D-0BEAA23065B1}" Name="Name" NameU="Name">
					<Text>CommonServiceCacheLocal</Text>
					<XForm>
						<PinX Unit="MM">1.380530178258249</PinX>
						<PinY Unit="MM">2.734251968503937</PinY>
					</XForm>
				</Shape>
				<Shape ID="91" UniqueID="{1EB3E5B7-C02C-44F7-B8F3-BEC47EB1B944}" Name="Class.91" NameU="Class.91" Master="22">
					<XForm>
						<PinX Unit="MM">4.387573188503449</PinX>
						<PinY Unit="MM">1.220472440944882</PinY>
					</XForm>
				</Shape>
				<Shape ID="98" UniqueID="{A87C442E-0943-4068-96A5-5C94BF4354AB}" Name="Name" NameU="Name">
					<Text>GeneralServiceCacheNotImplemented</Text>
					<XForm>
						<PinX Unit="MM">4.387573188503449</PinX>
						<PinY Unit="MM">1.395669291338582</PinY>
					</XForm>
				</Shape>
				<Shape ID="100" UniqueID="{7F9833C1-24BF-4E18-B2AC-C334AA9C338A}" Name="Class.100" NameU="Class.100" Master="22">
					<XForm>
						<PinX Unit="MM">4.389763779527561</PinX>
						<PinY Unit="MM">3.129541368608983</PinY>
					</XForm>
				</Shape>
				<Shape ID="107" UniqueID="{391729A6-CA1A-4227-B7B6-642BAFA546F9}" Name="Name" NameU="Name">
					<Text>VsSiteCache</Text>
					<XForm>
						<PinX Unit="MM">4.389763779527561</PinX>
						<PinY Unit="MM">3.304738219002684</PinY>
					</XForm>
				</Shape>
				<Shape ID="108" UniqueID="{DBB894B4-90B6-491A-98D4-0EF449FCAC79}" Name="Parameters" NameU="Parameters">
					<Text>IServiceProviderCache_T, CommonServiceCache_T, GeneralServiceCache_T</Text>
					<XForm>
						<PinX Unit="MM">4.763779527559057</PinX>
						<PinY Unit="MM">3.503177225406943</PinY>
					</XForm>
				</Shape>
				<Shape ID="109" UniqueID="{9A7B11FC-82AE-4807-A438-4C40641D247E}" Name="Binding.109" NameU="Binding.109" Master="32">
					<Text>«bind»
IServiceProviderCache_T(,,)</Text>
					<XForm>
						<PinX Unit="MM">4.205200602968962</PinX>
						<PinY Unit="MM">4.035433070866142</PinY>
					</XForm>
				</Shape>
				<Shape ID="110" UniqueID="{3017F738-BA89-4F54-BE09-4130A8FD4448}" Name="Binding.110" NameU="Binding.110" Master="32">
					<Text>«bind»
CommonServiceCache_T(,,)</Text>
					<XForm>
						<PinX Unit="MM">3.122822516925468</PinX>
						<PinY Unit="MM">3.459360750866186</PinY>
					</XForm>
				</Shape>
				<Shape ID="111" UniqueID="{1A7CF4EE-5A0E-42AB-AFD0-6E2A23DDEC6F}" Name="Binding.111" NameU="Binding.111" Master="32">
					<Text>«bind»
CommonServiceCache_T(,,)</Text>
					<XForm>
						<PinX Unit="MM">3.090551181102363</PinX>
						<PinY Unit="MM">2.750889279160120</PinY>
					</XForm>
				</Shape>
				<Shape ID="112" UniqueID="{3609C546-EE44-403F-AEE7-594437E75FE1}" Name="Binding.112" NameU="Binding.112" Master="32">
					<Text>«bind»
GeneralServiceCache_T(,,)</Text>
					<XForm>
						<PinX Unit="MM">4.388668484015505</PinX>
						<PinY Unit="MM">2.125984251968504</PinY>
					</XForm>
				</Shape>
				<Shape ID="113" UniqueID="{0DE905DE-B153-4E65-A07D-ED32A2D379C1}" Name="Class.113" NameU="Class.113" Master="22">
					<XForm>
						<PinX Unit="MM">6.712598425196850</PinX>
						<PinY Unit="MM">2.086614173228346</PinY>
					</XForm>
				</Shape>
				<Shape ID="120" UniqueID="{0C6A67CA-2782-4F89-B6C7-94AAD33544C4}" Name="Name" NameU="Name">
					<Text>VsIServiceProviderUtilities</Text>
					<XForm>
						<PinX Unit="MM">6.712598425196850</PinX>
						<PinY Unit="MM">2.261811023622047</PinY>
					</XForm>
				</Shape>
				<Shape ID="121" UniqueID="{E92EDA12-98F3-4045-81EB-A23F1093F929}" Name="Parameters" NameU="Parameters">
					<Text>VsSiteCache_T</Text>
					<XForm>
						<PinX Unit="MM">7.454284073618942</PinX>
						<PinY Unit="MM">2.460250030026306</PinY>
					</XForm>
				</Shape>
				<Shape ID="122" UniqueID="{53B383E7-4CD9-4EE0-88A1-0B55AE526560}" Name="Binding.122" NameU="Binding.122" Master="32">
					<Text>«bind»
VsSiteCache_T()</Text>
					<XForm>
						<PinX Unit="MM">5.738188976377954</PinX>
						<PinY Unit="MM">2.701486735118155</PinY>
					</XForm>
				</Shape>
				<Shape ID="123" UniqueID="{69784C77-CA4A-4247-841B-538E1E03F354}" Name="Class.123" NameU="Class.123" Master="22">
					<XForm>
						<PinX Unit="MM">6.496062992125984</PinX>
						<PinY Unit="MM">0.708661417322835</PinY>
					</XForm>
				</Shape>
				<Shape ID="130" UniqueID="{D77AEBF7-E435-4BA7-BF55-FF1BC2EE19B4}" Name="Name" NameU="Name">
					<Text>GlobalVSServiceProvider</Text>
					<XForm>
						<PinX Unit="MM">6.496062992125984</PinX>
						<PinY Unit="MM">0.883858267716535</PinY>
					</XForm>
				</Shape>
				<Shape ID="132" UniqueID="{7CD4E434-DE57-498E-B501-630A4EEFBE30}" Name="Usage" NameU="Usage" Master="28">
					<Text>«uses»</Text>
					<XForm>
						<PinX Unit="MM">6.789752120766940</PinX>
						<PinY Unit="MM">1.348615142467162</PinY>
					</XForm>
				</Shape>
			</Shapes>
		</Page>
		<Page ID="16" Name="ISupportErrorInfo" NameU="ISupportErrorInfo">
			<Shapes>
				<Shape ID="1" UniqueID="{96A0A4CB-80E2-43D2-9326-618FDA78CFEE}" Name="Watermark Title" NameU="Watermark Title" Master="18">
					<Text>Static Structure</Text>
					<XForm>
						<PinX Unit="MM">0.000000000000000</PinX>
						<PinY Unit="MM">10.999999999999998</PinY>
					</XForm>
				</Shape>
				<Shape ID="2" UniqueID="{D4A8B2A9-7FDB-4BDA-9C4C-7856D04571BF}" Name="Class" NameU="Class" Master="22">
					<XForm>
						<PinX Unit="MM">4.267124815430678</PinX>
						<PinY Unit="MM">5.285243125249373</PinY>
					</XForm>
				</Shape>
				<Shape ID="9" UniqueID="{B081A1D2-653E-4856-A407-F46B734F834F}" Name="Name" NameU="Name">
					<Text>ATL::ISupportErrorInfoImpl</Text>
					<XForm>
						<PinX Unit="MM">4.267124815430678</PinX>
						<PinY Unit="MM">5.460439975643074</PinY>
					</XForm>
				</Shape>
				<Shape ID="10" UniqueID="{3C7A0C27-C757-4A8F-8DBE-4F144B6FF9E3}" Name="Parameters" NameU="Parameters">
					<Text>InterfaceList_T</Text>
					<XForm>
						<PinX Unit="MM">5.014645043320543</PinX>
						<PinY Unit="MM">5.658878982047334</PinY>
					</XForm>
				</Shape>
				<Shape ID="11" UniqueID="{A22F7D6C-0137-4999-8412-16D51E76BAB0}" Name="Interface" NameU="Interface" Master="23">
					<Text>ISupportErrorInfo</Text>
					<XForm>
						<PinX Unit="MM">3.375854587540812</PinX>
						<PinY Unit="MM">5.285243125249373</PinY>
					</XForm>
				</Shape>
				<Shape ID="12" UniqueID="{CACB7239-6336-48A2-B49C-FDED719D87D4}" Name="Class.12" NameU="Class.12" Master="22">
					<XForm>
						<PinX Unit="MM">4.271735943389201</PinX>
						<PinY Unit="MM">7.470662386561649</PinY>
					</XForm>
				</Shape>
				<Shape ID="19" UniqueID="{CF37983D-87CF-4B54-BCE5-A7564B357048}" Name="Name" NameU="Name">
					<Text>InterfaceSupportsErrorInfoList</Text>
					<XForm>
						<PinX Unit="MM">4.271735943389201</PinX>
						<PinY Unit="MM">7.645859236955350</PinY>
					</XForm>
				</Shape>
				<Shape ID="20" UniqueID="{F98BB53E-124D-4E05-AD40-FE3054C35BF3}" Name="Parameters" NameU="Parameters">
					<Text>Interface_T, Next_T</Text>
					<XForm>
						<PinX Unit="MM">5.118110236220473</PinX>
						<PinY Unit="MM">7.844298243359610</PinY>
					</XForm>
				</Shape>
				<Shape ID="21" UniqueID="{0E2E48FD-2DCC-40E8-ADE3-A3D3412747E7}" Name="Class.21" NameU="Class.21" Master="22">
					<XForm>
						<PinX Unit="MM">4.257152010317374</PinX>
						<PinY Unit="MM">9.222250999265121</PinY>
					</XForm>
				</Shape>
				<Shape ID="28" UniqueID="{D500CB97-D92F-47A0-BFF1-759E7AAB002F}" Name="Name" NameU="Name">
					<Text>InterfaceSupportsErrorInfoListTerminator</Text>
					<XForm>
						<PinX Unit="MM">4.257152010317374</PinX>
						<PinY Unit="MM">9.397447849658823</PinY>
					</XForm>
				</Shape>
				<Shape ID="30" UniqueID="{E0127EF4-8E74-4082-A69A-2C844A9A12A5}" Name="Binding" NameU="Binding" Master="32">
					<Text>«bind»
Next_T(,)</Text>
					<XForm>
						<PinX Unit="MM">4.264443976853288</PinX>
						<PinY Unit="MM">8.395479345721814</PinY>
					</XForm>
				</Shape>
				<Shape ID="31" UniqueID="{FDC3C7E2-FC7E-4073-BF6E-DC268A73F3E4}" Name="Binding.31" NameU="Binding.31" Master="32">
					<Text>«bind»
InterfaceList_T()</Text>
					<XForm>
						<PinX Unit="MM">4.269430379409940</PinX>
						<PinY Unit="MM">6.377952755905511</PinY>
					</XForm>
				</Shape>
			</Shapes>
		</Page>
		<Page ID="17" Name="Common Utility Classes" NameU="Common Utility Classes">
			<Shapes>
				<Shape ID="1" UniqueID="{C3E249BC-5BFE-4A55-B99C-AF3B686DA397}" Name="Watermark Title" NameU="Watermark Title" Master="18">
					<Text>Static Structure</Text>
					<XForm>
						<PinX Unit="MM">0.000000000000000</PinX>
						<PinY Unit="MM">10.999999999999998</PinY>
					</XForm>
				</Shape>
				<Shape ID="2" UniqueID="{7D661568-6C1D-4B44-92AB-640B5FD602C7}" Name="Class" NameU="Class" Master="22">
					<XForm>
						<PinX Unit="MM">1.771653543307087</PinX>
						<PinY Unit="MM">9.272033434540623</PinY>
					</XForm>
				</Shape>
				<Shape ID="9" UniqueID="{AD19D8FE-7732-4C95-9E4B-5DB4940F06C6}" Name="Name" NameU="Name">
					<Text>GlobalRefCount</Text>
					<XForm>
						<PinX Unit="MM">1.771653543307087</PinX>
						<PinY Unit="MM">9.447230284934323</PinY>
					</XForm>
				</Shape>
				<Shape ID="10" UniqueID="{E6B7DAAA-B4BD-4E31-8A32-AF46E22DEB97}" Name="Parameters" NameU="Parameters">
					<Text>Unique_T, Count_T</Text>
					<XForm>
						<PinX Unit="MM">2.229006916338554</PinX>
						<PinY Unit="MM">9.645669291338582</PinY>
					</XForm>
				</Shape>
				<Shape ID="11" UniqueID="{FE019C8E-FCCE-457C-82AA-D54928746F6D}" Name="Class.11" NameU="Class.11" Master="22">
					<XForm>
						<PinX Unit="MM">4.017557137775120</PinX>
						<PinY Unit="MM">9.251968503937009</PinY>
					</XForm>
				</Shape>
				<Shape ID="18" UniqueID="{EF3458C6-9211-4DB0-B771-0C357572C77F}" Name="Name" NameU="Name">
					<Text>IProvideCppClass</Text>
					<XForm>
						<PinX Unit="MM">4.017557137775120</PinX>
						<PinY Unit="MM">9.427165354330709</PinY>
					</XForm>
				</Shape>
				<Shape ID="19" UniqueID="{50319A87-241D-4F14-8E14-613365734349}" Name="Parameters" NameU="Parameters">
					<Text>ToProvide_T</Text>
					<XForm>
						<PinX Unit="MM">4.527559055118111</PinX>
						<PinY Unit="MM">9.625604360734968</PinY>
					</XForm>
				</Shape>
				<Shape ID="20" UniqueID="{B90345D9-CCEE-4D09-9688-86748C23D156}" Name="Class.20" NameU="Class.20" Master="22">
					<XForm>
						<PinX Unit="MM">4.813738809037846</PinX>
						<PinY Unit="MM">7.381509872545990</PinY>
					</XForm>
				</Shape>
				<Shape ID="27" UniqueID="{97ADBE79-CAA3-4EEF-B76E-F9FED92389AC}" Name="Name" NameU="Name">
					<Text>VsOutputWindowUtilities</Text>
					<XForm>
						<PinX Unit="MM">4.813738809037846</PinX>
						<PinY Unit="MM">7.556706722939691</PinY>
					</XForm>
				</Shape>
				<Shape ID="28" UniqueID="{E727F88F-9C68-49C2-A7AE-E0751ECBD518}" Name="Parameters" NameU="Parameters">
					<Text>SiteControl_T</Text>
					<XForm>
						<PinX Unit="MM">5.511811023622046</PinX>
						<PinY Unit="MM">7.755145729343951</PinY>
					</XForm>
				</Shape>
				<Shape ID="29" UniqueID="{3F453F21-E77C-4720-BC3C-1A098A550BA0}" Name="Class.29" NameU="Class.29" Master="22">
					<XForm>
						<PinX Unit="MM">1.810214239023312</PinX>
						<PinY Unit="MM">7.992125984251969</PinY>
					</XForm>
				</Shape>
				<Shape ID="36" UniqueID="{68A7A12A-3032-4E7B-A2C0-845D24F7F1B0}" Name="Name" NameU="Name">
					<Text>VsUtilityLocalSiteControl</Text>
					<XForm>
						<PinX Unit="MM">1.810214239023312</PinX>
						<PinY Unit="MM">8.167322834645669</PinY>
					</XForm>
				</Shape>
				<Shape ID="38" UniqueID="{576A4ACA-B7E8-4486-88B5-37A7F370ABE0}" Name="Class.38" NameU="Class.38" Master="22">
					<XForm>
						<PinX Unit="MM">1.771653543307086</PinX>
						<PinY Unit="MM">6.732283464566929</PinY>
					</XForm>
				</Shape>
				<Shape ID="45" UniqueID="{24A74B27-93BA-4752-A04D-1743B75FE9D0}" Name="Name" NameU="Name">
					<Text>VsUtilityGlobalSiteControl</Text>
					<XForm>
						<PinX Unit="MM">1.771653543307086</PinX>
						<PinY Unit="MM">6.907480314960629</PinY>
					</XForm>
				</Shape>
				<Shape ID="47" UniqueID="{97AC4C52-A68A-49ED-86C4-BA4DE87E3882}" Name="Binding" NameU="Binding" Master="32">
					<Text>«bind»
SiteControl_T()</Text>
					<XForm>
						<PinX Unit="MM">3.488108194619988</PinX>
						<PinY Unit="MM">7.873635856797960</PinY>
					</XForm>
				</Shape>
				<Shape ID="48" UniqueID="{1E26D6BB-42E9-42FA-A1A6-B9B1A7123F28}" Name="Binding.48" NameU="Binding.48" Master="32">
					<Text>«bind»
SiteControl_T()</Text>
					<XForm>
						<PinX Unit="MM">3.482702854391270</PinX>
						<PinY Unit="MM">6.870078740157480</PinY>
					</XForm>
				</Shape>
				<Shape ID="49" UniqueID="{07E03292-AD4F-4830-BD0E-4483ACD6C8FA}" Name="Class.49" NameU="Class.49" Master="22">
					<XForm>
						<PinX Unit="MM">4.854373682960301</PinX>
						<PinY Unit="MM">4.901954694383142</PinY>
					</XForm>
				</Shape>
				<Shape ID="56" UniqueID="{C374168A-D683-4FA0-9412-947568ED0CA7}" Name="Name" NameU="Name">
					<Text>OleComponentUIManagerUtilities</Text>
					<XForm>
						<PinX Unit="MM">4.854373682960301</PinX>
						<PinY Unit="MM">5.077151544776843</PinY>
					</XForm>
				</Shape>
				<Shape ID="57" UniqueID="{1241AC99-772E-468C-8682-4CC0198A6882}" Name="Parameters" NameU="Parameters">
					<Text>SiteControl_T</Text>
					<XForm>
						<PinX Unit="MM">5.771739491904854</PinX>
						<PinY Unit="MM">5.275590551181102</PinY>
					</XForm>
				</Shape>
				<Shape ID="58" UniqueID="{1929F9E9-3F58-466F-9B3F-9F723691DC36}" Name="Class.58" NameU="Class.58" Master="22">
					<XForm>
						<PinX Unit="MM">1.751862127949872</PinX>
						<PinY Unit="MM">5.511811023622047</PinY>
					</XForm>
				</Shape>
				<Shape ID="65" UniqueID="{1B766452-13AF-4148-AC72-E0FA389A31BC}" Name="Name" NameU="Name">
					<Text>VsUtilityLocalSiteControl</Text>
					<XForm>
						<PinX Unit="MM">1.751862127949872</PinX>
						<PinY Unit="MM">5.687007874015747</PinY>
					</XForm>
				</Shape>
				<Shape ID="67" UniqueID="{8C4A122B-FA9A-4020-8878-164E2C56EBBE}" Name="Class.67" NameU="Class.67" Master="22">
					<XForm>
						<PinX Unit="MM">1.713301432233646</PinX>
						<PinY Unit="MM">4.251968503937007</PinY>
					</XForm>
				</Shape>
				<Shape ID="74" UniqueID="{B2F8FB35-75CF-4A34-865B-BAEEFA068CF0}" Name="Name" NameU="Name">
					<Text>VsUtilityGlobalSiteControl</Text>
					<XForm>
						<PinX Unit="MM">1.713301432233646</PinX>
						<PinY Unit="MM">4.427165354330708</PinY>
					</XForm>
				</Shape>
				<Shape ID="76" UniqueID="{FBDE78F0-B583-4ADB-9A92-0CFB7890A4C8}" Name="Binding.76" NameU="Binding.76" Master="32">
					<Text>«bind»
SiteControl_T(,)</Text>
					<XForm>
						<PinX Unit="MM">3.424426177454408</PinX>
						<PinY Unit="MM">5.393700787401574</PinY>
					</XForm>
				</Shape>
				<Shape ID="77" UniqueID="{D286DFD8-31A1-47F3-80C2-0F40BE10AC68}" Name="Binding.77" NameU="Binding.77" Master="32">
					<Text>«bind»
SiteControl_T(,)</Text>
					<XForm>
						<PinX Unit="MM">3.419020837225690</PinX>
						<PinY Unit="MM">4.390143670761095</PinY>
					</XForm>
				</Shape>
				<Shape ID="78" UniqueID="{8089F28D-311F-4DE6-89D6-942CF9829E73}" Name="Class.78" NameU="Class.78" Master="22">
					<XForm>
						<PinX Unit="MM">5.098425196850394</PinX>
						<PinY Unit="MM">2.165354330708661</PinY>
					</XForm>
				</Shape>
				<Shape ID="85" UniqueID="{4691DEA0-7707-4A3C-84D8-E57EB2673738}" Name="Name" NameU="Name">
					<Text>Pointer</Text>
					<XForm>
						<PinX Unit="MM">5.098425196850394</PinX>
						<PinY Unit="MM">2.340551181102362</PinY>
					</XForm>
				</Shape>
				<Shape ID="86" UniqueID="{F5EA0DC9-FC49-47E0-B7DA-80D4536C9945}" Name="Parameters" NameU="Parameters">
					<Text>Traits_T</Text>
					<XForm>
						<PinX Unit="MM">5.472440944881889</PinX>
						<PinY Unit="MM">2.538990187506621</PinY>
					</XForm>
				</Shape>
				<Shape ID="87" UniqueID="{2862F2DF-0AB0-4EA2-861C-ADC93A5DB10E}" Name="Class.87" NameU="Class.87" Master="22">
					<XForm>
						<PinX Unit="MM">1.673228346456693</PinX>
						<PinY Unit="MM">3.070866141732283</PinY>
					</XForm>
				</Shape>
				<Shape ID="94" UniqueID="{A2DB7001-BE1A-4EAF-8F71-3AEDD42C5A5F}" Name="Name" NameU="Name">
					<Text>CoTaskMemPointerTraits</Text>
					<XForm>
						<PinX Unit="MM">1.673228346456693</PinX>
						<PinY Unit="MM">3.246062992125984</PinY>
					</XForm>
				</Shape>
				<Shape ID="96" UniqueID="{DF1D4F3C-D9D6-41D3-A6E5-875BB21F393B}" Name="Class.96" NameU="Class.96" Master="22">
					<XForm>
						<PinX Unit="MM">1.594488188976378</PinX>
						<PinY Unit="MM">1.574803149606299</PinY>
					</XForm>
				</Shape>
				<Shape ID="103" UniqueID="{9161F1D8-EB24-4097-92C9-D9BA7C8F3AE1}" Name="Name" NameU="Name">
					<Text>StdArrayPointerTraits</Text>
					<XForm>
						<PinX Unit="MM">1.594488188976378</PinX>
						<PinY Unit="MM">1.750000000000000</PinY>
					</XForm>
				</Shape>
				<Shape ID="105" UniqueID="{8D83136D-1723-4A08-8E50-5A335E0EE2B1}" Name="Binding.105" NameU="Binding.105" Master="32">
					<Text>«bind»
Traits()</Text>
					<XForm>
						<PinX Unit="MM">3.558884691444683</PinX>
						<PinY Unit="MM">1.683260811758500</PinY>
					</XForm>
				</Shape>
				<Shape ID="106" UniqueID="{7472987C-C76A-4EDE-BC1A-09E31BB03531}" Name="Binding.106" NameU="Binding.106" Master="32">
					<Text>«bind»
Traits()</Text>
					<XForm>
						<PinX Unit="MM">3.644560426617946</PinX>
						<PinY Unit="MM">2.804928164619452</PinY>
					</XForm>
				</Shape>
				<Shape ID="107" UniqueID="{A7076B1B-5947-4460-A352-97D20C6DB50B}" Name="Class.107" NameU="Class.107" Master="22">
					<XForm>
						<PinX Unit="MM">6.712598425196850</PinX>
						<PinY Unit="MM">9.133858267716533</PinY>
					</XForm>
				</Shape>
				<Shape ID="114" UniqueID="{678E3B38-3B9B-450B-9F78-D63A835276FC}" Name="Name" NameU="Name">
					<Text>File</Text>
					<XForm>
						<PinX Unit="MM">6.712598425196850</PinX>
						<PinY Unit="MM">9.309055118110235</PinY>
					</XForm>
				</Shape>
			</Shapes>
		</Page>
		<Page ID="18" Name="Containers" NameU="Containers">
			<Shapes>
				<Shape ID="1" UniqueID="{C472198D-51F9-446D-8D2E-F12A93885043}" Name="Watermark Title" NameU="Watermark Title" Master="18">
					<Text>Static Structure</Text>
					<XForm>
						<PinX Unit="MM">0.000000000000000</PinX>
						<PinY Unit="MM">10.999999999999998</PinY>
					</XForm>
				</Shape>
				<Shape ID="2" UniqueID="{51C6A07C-4F16-4BE2-A728-63D5E6F3CCFC}" Name="Class" NameU="Class" Master="22">
					<XForm>
						<PinX Unit="MM">2.189894254571360</PinX>
						<PinY Unit="MM">9.055118110236219</PinY>
					</XForm>
				</Shape>
				<Shape ID="9" UniqueID="{B0889319-6631-4C15-AA6F-08FD96BEEB08}" Name="Name" NameU="Name">
					<Text>StaticArray</Text>
					<XForm>
						<PinX Unit="MM">2.189894254571360</PinX>
						<PinY Unit="MM">9.230314960629919</PinY>
					</XForm>
				</Shape>
				<Shape ID="10" UniqueID="{1D43571C-90BC-492F-8B9E-80C74EF802A2}" Name="Parameters" NameU="Parameters">
					<Text>Type_T, NumberOfElements_T</Text>
					<XForm>
						<PinX Unit="MM">2.563910002602856</PinX>
						<PinY Unit="MM">9.428753967034178</PinY>
					</XForm>
				</Shape>
				<Shape ID="11" UniqueID="{34E6EE59-ED64-4875-953B-3186BA888D24}" Name="Class.11" NameU="Class.11" Master="22">
					<XForm>
						<PinX Unit="MM">2.129291543052402</PinX>
						<PinY Unit="MM">5.433070866141733</PinY>
					</XForm>
				</Shape>
				<Shape ID="18" UniqueID="{4956805D-A882-425D-AFBC-44FAFE83CF1F}" Name="Name" NameU="Name">
					<Text>HierarchyNode</Text>
					<XForm>
						<PinX Unit="MM">2.129291543052402</PinX>
						<PinY Unit="MM">5.608267716535434</PinY>
					</XForm>
				</Shape>
				<Shape ID="19" UniqueID="{8ABD96A2-F7FB-4EBF-840A-D8544D5A5645}" Name="Parameters" NameU="Parameters">
					<Text>Traits_T</Text>
					<XForm>
						<PinX Unit="MM">2.559055118110237</PinX>
						<PinY Unit="MM">5.806706722939694</PinY>
					</XForm>
				</Shape>
				<Shape ID="20" UniqueID="{AB5A9976-5647-4C80-B5A9-E418764475FB}" Name="Class.20" NameU="Class.20" Master="22">
					<XForm>
						<PinX Unit="MM">4.960629921259844</PinX>
						<PinY Unit="MM">5.433070866141733</PinY>
					</XForm>
				</Shape>
				<Shape ID="27" UniqueID="{E2F986B0-E123-40AA-AC12-A4C85574E595}" Name="Name" NameU="Name">
					<Text>HierarchyNodeTraits</Text>
					<XForm>
						<PinX Unit="MM">4.960629921259844</PinX>
						<PinY Unit="MM">5.608267716535434</PinY>
					</XForm>
				</Shape>
				<Shape ID="28" UniqueID="{5915FACD-68E1-4FBB-A74D-D9EA2109507B}" Name="Parameters" NameU="Parameters">
					<Text>Item_T, ItemContainer_T, HeapNodes_T</Text>
					<XForm>
						<PinX Unit="MM">5.541678667826466</PinX>
						<PinY Unit="MM">5.806706722939694</PinY>
					</XForm>
				</Shape>
				<Shape ID="29" UniqueID="{2C32F148-B2D8-4CD6-8D85-26D272D7B845}" Name="Binding" NameU="Binding" Master="32">
					<Text>«bind»
Traits_T(,,)</Text>
					<XForm>
						<PinX Unit="MM">3.469318146401728</PinX>
						<PinY Unit="MM">5.433070866141733</PinY>
					</XForm>
				</Shape>
			</Shapes>
		</Page>
		<Page ID="19" Name="Package Utility Classes" NameU="Package Utility Classes">
			<Shapes>
				<Shape ID="1" UniqueID="{C1E384AC-CE8D-4C83-81F2-3C8869554451}" Name="Watermark Title" NameU="Watermark Title" Master="18">
					<Text>Static Structure</Text>
					<XForm>
						<PinX Unit="MM">0.000000000000000</PinX>
						<PinY Unit="MM">10.999999999999998</PinY>
					</XForm>
				</Shape>
				<Shape ID="2" UniqueID="{3E4049F5-628E-4F35-A83D-E92210B88875}" Name="Class" NameU="Class" Master="22">
					<XForm>
						<PinX Unit="MM">1.636181604963138</PinX>
						<PinY Unit="MM">3.563751908451326</PinY>
					</XForm>
				</Shape>
				<Shape ID="9" UniqueID="{AF39CA7E-80A6-4681-96D9-0DB9C84E8B0D}" Name="Name" NameU="Name">
					<Text>LoadUILibraryRequired</Text>
					<XForm>
						<PinX Unit="MM">1.636181604963138</PinX>
						<PinY Unit="MM">3.738948758845027</PinY>
					</XForm>
				</Shape>
				<Shape ID="10" UniqueID="{BAAF07B6-B674-490F-BB30-0F20ED302553}" Name="Parameters" NameU="Parameters">
					<Text>clsidPackage_T, VsSiteCache_T, VsShellUtilities_T, ExtendedErrorInfo_T</Text>
					<XForm>
						<PinX Unit="MM">2.288111241422340</PinX>
						<PinY Unit="MM">3.937387765249286</PinY>
					</XForm>
				</Shape>
				<Shape ID="11" UniqueID="{A0FC0018-E4A6-485A-81C1-8F871EFF14A6}" Name="Class.11" NameU="Class.11" Master="22">
					<XForm>
						<PinX Unit="MM">6.627826997433611</PinX>
						<PinY Unit="MM">2.677545245564247</PinY>
					</XForm>
				</Shape>
				<Shape ID="18" UniqueID="{67897BDF-9DC7-4B5B-B635-74E1A7666F7F}" Name="Name" NameU="Name">
					<Text>VsRegistryUtilities</Text>
					<XForm>
						<PinX Unit="MM">6.627826997433611</PinX>
						<PinY Unit="MM">2.852742095957948</PinY>
					</XForm>
				</Shape>
				<Shape ID="20" UniqueID="{3B81D839-826C-4BF5-9C0D-A63D48FF3049}" Name="Class.20" NameU="Class.20" Master="22">
					<XForm>
						<PinX Unit="MM">1.650697491481059</PinX>
						<PinY Unit="MM">1.732663355800467</PinY>
					</XForm>
				</Shape>
				<Shape ID="27" UniqueID="{208EBBE0-F818-4DFB-A012-F961D3FCCF72}" Name="Name" NameU="Name">
					<Text>VsShellUtilities</Text>
					<XForm>
						<PinX Unit="MM">1.650697491481059</PinX>
						<PinY Unit="MM">1.907860206194168</PinY>
					</XForm>
				</Shape>
				<Shape ID="29" UniqueID="{726BD7D7-BB56-4430-9900-EB9572548FF6}" Name="Class.29" NameU="Class.29" Master="22">
					<XForm>
						<PinX Unit="MM">1.417322834645669</PinX>
						<PinY Unit="MM">9.468883828241410</PinY>
					</XForm>
				</Shape>
				<Shape ID="36" UniqueID="{2906C1D2-17A0-4B91-A1E6-F782C86A8013}" Name="Name" NameU="Name">
					<Text>VsSiteCache</Text>
					<XForm>
						<PinX Unit="MM">1.417322834645669</PinX>
						<PinY Unit="MM">9.644080678635110</PinY>
					</XForm>
				</Shape>
				<Shape ID="37" UniqueID="{D729D63A-5470-4265-A5FE-36EF42D1C481}" Name="Parameters" NameU="Parameters">
					<Text>IServiceProviderCache_T, CommonServiceCache_T, GeneralServiceCache_T</Text>
					<XForm>
						<PinX Unit="MM">1.791338582677165</PinX>
						<PinY Unit="MM">9.842519685039369</PinY>
					</XForm>
				</Shape>
				<Shape ID="38" UniqueID="{E915F31C-5E53-4527-8078-162DBCD5A320}" Name="Binding" NameU="Binding" Master="32">
					<Text>«bind»
VsSiteCache_T(,,,)</Text>
					<XForm>
						<PinX Unit="MM">1.270265873681729</PinX>
						<PinY Unit="MM">6.516317868346367</PinY>
					</XForm>
				</Shape>
				<Shape ID="39" UniqueID="{F7A66DAB-9E09-4E68-B275-FCA0FDAB54EF}" Name="Binding.39" NameU="Binding.39" Master="32">
					<Text>«bind»
VsShellUtilities_T(,,,)</Text>
					<XForm>
						<PinX Unit="MM">1.643439548222099</PinX>
						<PinY Unit="MM">2.599184979317467</PinY>
					</XForm>
				</Shape>
				<Shape ID="40" UniqueID="{10AA3298-41B8-41B8-8048-F84370D1F3B3}" Name="Class.40" NameU="Class.40" Master="22">
					<XForm>
						<PinX Unit="MM">4.055118110236220</PinX>
						<PinY Unit="MM">2.756285403044561</PinY>
					</XForm>
				</Shape>
				<Shape ID="47" UniqueID="{2D317B13-E47B-4919-959A-522058660852}" Name="Name" NameU="Name">
					<Text>ExtendedErrorInfo</Text>
					<XForm>
						<PinX Unit="MM">4.055118110236220</PinX>
						<PinY Unit="MM">2.931482253438262</PinY>
					</XForm>
				</Shape>
				<Shape ID="49" UniqueID="{FD29B3B6-FDB0-4B16-907F-0E52ACA3D944}" Name="Binding.49" NameU="Binding.49" Master="32">
					<Text>«bind»
ExtendedErrorInfo_T(,,,)</Text>
					<XForm>
						<PinX Unit="MM">2.910482544977609</PinX>
						<PinY Unit="MM">3.066609691548454</PinY>
					</XForm>
				</Shape>
				<Shape ID="50" UniqueID="{B3D158C3-84E1-4A4E-B35A-9D5C6CEB0863}" Name="Class.50" NameU="Class.50" Master="22">
					<XForm>
						<PinX Unit="MM">2.952755905511811</PinX>
						<PinY Unit="MM">7.461009812493379</PinY>
					</XForm>
				</Shape>
				<Shape ID="57" UniqueID="{66CAB9C9-5767-4351-87CA-B07AA40E8AE7}" Name="Name" NameU="Name">
					<Text>LoadUILibraryNoop</Text>
					<XForm>
						<PinX Unit="MM">2.952755905511811</PinX>
						<PinY Unit="MM">7.636206662887080</PinY>
					</XForm>
				</Shape>
				<Shape ID="58" UniqueID="{CFABDCC0-63BB-4302-9932-C02EC0B15937}" Name="Parameters" NameU="Parameters">
					<Text>VsSiteCache_T</Text>
					<XForm>
						<PinX Unit="MM">3.505837199075505</PinX>
						<PinY Unit="MM">7.834645669291339</PinY>
					</XForm>
				</Shape>
				<Shape ID="59" UniqueID="{3201A903-97F3-4DC8-AA54-D7D5F3BBADA1}" Name="Binding.59" NameU="Binding.59" Master="32">
					<Text>«bind»
VsSiteCache_T()</Text>
					<XForm>
						<PinX Unit="MM">2.095506597312641</PinX>
						<PinY Unit="MM">8.558355784566885</PinY>
					</XForm>
				</Shape>
				<Shape ID="60" UniqueID="{9237F7AA-D144-4518-A8ED-7250BDCB318D}" Name="Class.60" NameU="Class.60" Master="22">
					<XForm>
						<PinX Unit="MM">4.384901190547941</PinX>
						<PinY Unit="MM">5.334645669291340</PinY>
					</XForm>
				</Shape>
				<Shape ID="67" UniqueID="{90F7088E-B760-4748-8924-45AD1FDEF6FE}" Name="Name" NameU="Name">
					<Text>IVsPackageImpl</Text>
					<XForm>
						<PinX Unit="MM">4.384901190547941</PinX>
						<PinY Unit="MM">5.509842519685041</PinY>
					</XForm>
				</Shape>
				<Shape ID="68" UniqueID="{AB4A1FB3-E2A6-43ED-B6AE-0F351C456DAA}" Name="Parameters" NameU="Parameters">
					<Text>DerivedClass_T, clsidPackage_T, VsSiteCache_T, LoadUILibrary_T</Text>
					<XForm>
						<PinX Unit="MM">4.842519685039370</PinX>
						<PinY Unit="MM">5.708281526089300</PinY>
					</XForm>
				</Shape>
				<Shape ID="70" UniqueID="{8EC0D5AE-EB7C-43AF-AFA6-3818DDADB1C8}" Name="Binding.70" NameU="Binding.70" Master="32">
					<Text>«bind»
VsSiteCache_T(,,,)</Text>
					<XForm>
						<PinX Unit="MM">2.765806702358965</PinX>
						<PinY Unit="MM">7.121537856167905</PinY>
					</XForm>
				</Shape>
				<Shape ID="71" UniqueID="{0389E999-A6E7-4337-AA48-09334E269D48}" Name="Binding.71" NameU="Binding.71" Master="32">
					<Text>«bind»
LoadUILibrary_T(,,,)</Text>
					<XForm>
						<PinX Unit="MM">3.124946021378396</PinX>
						<PinY Unit="MM">4.449198788871333</PinY>
					</XForm>
				</Shape>
				<Shape ID="72" UniqueID="{9B88B2B4-54AA-4B02-9D8C-03891475AF97}" Name="Binding.72" NameU="Binding.72" Master="32">
					<Text>«bind»
LoadUILibrary_T(,,,)</Text>
					<XForm>
						<PinX Unit="MM">3.692694247797943</PinX>
						<PinY Unit="MM">6.397827740892359</PinY>
					</XForm>
				</Shape>
				<Shape ID="73" UniqueID="{6C6D379D-62A9-4ED4-91C1-D8AFD12BF239}" Name="Metaclass" NameU="Metaclass" Master="34">
					<Text>«metaclass»
Package</Text>
					<XForm>
						<PinX Unit="MM">6.633858267716534</PinX>
						<PinY Unit="MM">4.205495382362027</PinY>
					</XForm>
				</Shape>
				<Shape ID="82" UniqueID="{5CC2359B-3252-4D15-820F-CCD374C8CE20}" Name="Generalization" NameU="Generalization" Master="24">
					<XForm>
						<PinX Unit="MM">5.551181102362204</PinX>
						<PinY Unit="MM">4.676661561627194</PinY>
					</XForm>
				</Shape>
				<Shape ID="84" UniqueID="{2D6A8407-D1AD-4E20-82B8-1C3288AD3A12}" Name="Binding.84" NameU="Binding.84" Master="32">
					<Text>«bind»
DerivedClass_T(,,,)</Text>
					<XForm>
						<PinX Unit="MM">5.738188976377952</PinX>
						<PinY Unit="MM">5.024701272020984</PinY>
					</XForm>
				</Shape>
				<Shape ID="85" UniqueID="{FD9C40E1-B982-4DE0-8ECD-8D5C0D0829A7}" Name="Usage" NameU="Usage" Master="28">
					<Text>«uses»</Text>
					<XForm>
						<PinX Unit="MM">6.630842632575073</PinX>
						<PinY Unit="MM">3.418093807558877</PinY>
					</XForm>
				</Shape>
				<Shape ID="86" UniqueID="{1887C2DD-ABD2-48B9-9CBD-89C73EC7D492}" Name="Class.86" NameU="Class.86" Master="22">
					<XForm>
						<PinX Unit="MM">4.782116828760313</PinX>
						<PinY Unit="MM">7.460250030026307</PinY>
					</XForm>
				</Shape>
				<Shape ID="93" UniqueID="{CF6A31B7-C175-4E73-BB09-2C7CF8C8296E}" Name="Name" NameU="Name">
					<Text>VsSiteBaseImpl</Text>
					<XForm>
						<PinX Unit="MM">4.782116828760313</PinX>
						<PinY Unit="MM">7.635446880420008</PinY>
					</XForm>
				</Shape>
				<Shape ID="94" UniqueID="{B23A2A19-307B-4B2C-8002-00BE70F5D33E}" Name="Parameters" NameU="Parameters">
					<Text>DerivedClass_T, DirectlyDerivedClass_T, Base_T, VsSiteCache_T</Text>
					<XForm>
						<PinX Unit="MM">5.233524996103303</PinX>
						<PinY Unit="MM">7.833885886824268</PinY>
					</XForm>
				</Shape>
				<Shape ID="69" UniqueID="{A8135FD2-92B3-466B-92FC-E7BA81F9D769}" Name="Generalization.69" NameU="Generalization.69" Master="24">
					<XForm>
						<PinX Unit="MM">4.470656967818379</PinX>
						<PinY Unit="MM">6.397447849658823</PinY>
					</XForm>
				</Shape>
				<Shape ID="97" UniqueID="{29A1EAE7-9C81-4FF9-8F1F-AFBDE3A2E10A}" Name="Interface" NameU="Interface" Master="29">
					<Text>«interface»
Global::IVsPackage</Text>
					<XForm>
						<PinX Unit="MM">4.133858267716535</PinX>
						<PinY Unit="MM">9.055118110236220</PinY>
					</XForm>
				</Shape>
				<Shape ID="96" UniqueID="{402F43A1-EE25-4181-A93E-3E1B08ECFD8F}" Name="Binding.96" NameU="Binding.96" Master="32">
					<Text>«bind»
Base_T(,,,)</Text>
					<XForm>
						<PinX Unit="MM">4.098565028688213</PinX>
						<PinY Unit="MM">8.233670464934368</PinY>
					</XForm>
				</Shape>
				<Shape ID="109" UniqueID="{E873D8CC-5265-4793-9734-8F99AF106B3D}" Name="Generalization.109" NameU="Generalization.109" Master="24">
					<XForm>
						<PinX Unit="MM">4.478853942281392</PinX>
						<PinY Unit="MM">8.327079429133859</PinY>
					</XForm>
				</Shape>
			</Shapes>
		</Page>
		<Page ID="20" Name="CommandTarget" NameU="CommandTarget">
			<Shapes>
				<Shape ID="1" UniqueID="{7A159E0F-0676-4766-A65F-B909605FE1CF}" Name="Watermark Title" NameU="Watermark Title" Master="18">
					<Text>Static Structure</Text>
					<XForm>
						<PinX Unit="MM">0.000000000000000</PinX>
						<PinY Unit="MM">10.999999999999998</PinY>
					</XForm>
				</Shape>
				<Shape ID="2" UniqueID="{125211EC-F2C5-4458-AE38-B7CDED16F3E7}" Name="Class" NameU="Class" Master="22">
					<XForm>
						<PinX Unit="MM">2.185039370078740</PinX>
						<PinY Unit="MM">8.740157480314959</PinY>
					</XForm>
				</Shape>
				<Shape ID="9" UniqueID="{7D24170A-EF67-48FE-ADA9-72D3BDBD8D13}" Name="Name" NameU="Name">
					<Text>CommandId</Text>
					<XForm>
						<PinX Unit="MM">2.185039370078740</PinX>
						<PinY Unit="MM">8.915354330708661</PinY>
					</XForm>
				</Shape>
				<Shape ID="11" UniqueID="{B2A449D8-B1BF-41C3-85D7-4F8EF9519DD3}" Name="Class.11" NameU="Class.11" Master="22">
					<XForm>
						<PinX Unit="MM">4.153543307086615</PinX>
						<PinY Unit="MM">8.740157480314959</PinY>
					</XForm>
				</Shape>
				<Shape ID="18" UniqueID="{CC826AC9-4A30-4CCD-B159-36957847CCD7}" Name="Name" NameU="Name">
					<Text>CommandHandlerBase</Text>
					<XForm>
						<PinX Unit="MM">4.153543307086615</PinX>
						<PinY Unit="MM">8.915354330708659</PinY>
					</XForm>
				</Shape>
				<Shape ID="19" UniqueID="{B9268B4B-D71F-4B29-BB74-573E50542D7F}" Name="Parameters" NameU="Parameters">
					<Text>Target_T</Text>
					<XForm>
						<PinX Unit="MM">4.799373242618082</PinX>
						<PinY Unit="MM">9.113793337112918</PinY>
					</XForm>
				</Shape>
				<Shape ID="20" UniqueID="{2E5863BA-1C48-400F-BD65-062CC84E6B5A}" Name="Class.20" NameU="Class.20" Master="22">
					<XForm>
						<PinX Unit="MM">4.159711363566693</PinX>
						<PinY Unit="MM">6.220472440944882</PinY>
					</XForm>
				</Shape>
				<Shape ID="27" UniqueID="{965CF477-FF38-4870-A8A5-6D278A9818B3}" Name="Name" NameU="Name">
					<Text>IOleCommandTargetImpl</Text>
					<XForm>
						<PinX Unit="MM">4.159711363566693</PinX>
						<PinY Unit="MM">6.395669291338582</PinY>
					</XForm>
				</Shape>
				<Shape ID="28" UniqueID="{94A5840F-F1EC-4978-8BFA-97E946C794F8}" Name="Parameters" NameU="Parameters">
					<Text>Target_T</Text>
					<XForm>
						<PinX Unit="MM">4.854855797999528</PinX>
						<PinY Unit="MM">6.594108297742842</PinY>
					</XForm>
				</Shape>
				<Shape ID="29" UniqueID="{2B8C8EBC-B42F-4E26-BC08-1FC96CD64E25}" Name="Interface" NameU="Interface" Master="23">
					<Text>IOleCommandTarget</Text>
					<XForm>
						<PinX Unit="MM">3.320816929133859</PinX>
						<PinY Unit="MM">6.220472440944882</PinY>
					</XForm>
				</Shape>
				<Shape ID="30" UniqueID="{6A891D27-9EEF-40BD-9681-7E6B16417B69}" Name="Usage" NameU="Usage" Master="28">
					<Text>«uses»</Text>
					<XForm>
						<PinX Unit="MM">4.156627335326654</PinX>
						<PinY Unit="MM">7.480314960629920</PinY>
					</XForm>
				</Shape>
				<Shape ID="31" UniqueID="{A47A5A4E-2400-47EE-AB29-649AD5FD6E12}" Name="Metaclass" NameU="Metaclass" Master="34">
					<Text>«metaclass»
CommandTarget</Text>
					<XForm>
						<PinX Unit="MM">4.137380696476464</PinX>
						<PinY Unit="MM">4.141341201784897</PinY>
					</XForm>
				</Shape>
				<Shape ID="40" UniqueID="{C4486B80-91FD-4985-B130-49E60B22BA3D}" Name="Generalization" NameU="Generalization" Master="24">
					<XForm>
						<PinX Unit="MM">4.148546030021579</PinX>
						<PinY Unit="MM">5.155310674960720</PinY>
					</XForm>
				</Shape>
				<Shape ID="42" UniqueID="{AB0E161A-C5FE-4748-B2C3-22FF861EAF5E}" Name="Composition" NameU="Composition" Master="27">
					<XForm>
						<PinX Unit="MM">4.706358656368182</PinX>
						<PinY Unit="MM">6.427951267847844</PinY>
					</XForm>
				</Shape>
				<Shape ID="44" UniqueID="{C70DDBBF-2AA2-4F5A-9991-5CBE56D0B380}" Name="end1_mp" NameU="end1_mp">
					<Text>1</Text>
					<XForm>
						<PinX Unit="IN">4.895338258182397</PinX>
						<PinY Unit="IN">4.231852305661054</PinY>
					</XForm>
				</Shape>
				<Shape ID="46" UniqueID="{F7C21C5E-28A8-43A4-9274-E96787952D64}" Name="end2_mp" NameU="end2_mp">
					<Text>*</Text>
					<XForm>
						<PinX Unit="IN">5.081367430682197</PinX>
						<PinY Unit="IN">8.624050230034634</PinY>
					</XForm>
				</Shape>
				<Shape ID="47" UniqueID="{7BE086D0-8FCF-419D-A033-5B693003EE23}" Name="Composition.47" NameU="Composition.47" Master="27">
					<XForm>
						<PinX Unit="MM">3.033384244832692</PinX>
						<PinY Unit="MM">8.740157480314959</PinY>
					</XForm>
				</Shape>
				<Shape ID="49" UniqueID="{74CB6F3B-0985-4302-BF97-83BF34EE13E9}" Name="end1_mp" NameU="end1_mp">
					<Text>1</Text>
					<XForm>
						<PinX Unit="IN">3.408542945833144</PinX>
						<PinY Unit="IN">8.810868158433614</PinY>
					</XForm>
				</Shape>
				<Shape ID="51" UniqueID="{0D3C3D92-7340-42DA-9F85-9C4B59265DE7}" Name="end2_mp" NameU="end2_mp">
					<Text>1</Text>
					<XForm>
						<PinX Unit="IN">2.658225543832240</PinX>
						<PinY Unit="IN">8.810868158433612</PinY>
					</XForm>
				</Shape>
			</Shapes>
		</Page>
		<Page ID="21" Name="Win32 Control Classes" NameU="Win32 Control Wrappers">
			<Shapes>
				<Shape ID="1" UniqueID="{1855AF86-FFE2-4277-828B-C56E50F6D617}" Name="Watermark Title" NameU="Watermark Title" Master="18">
					<Text>Static Structure</Text>
					<XForm>
						<PinX Unit="MM">0.000000000000000</PinX>
						<PinY Unit="MM">10.999999999999998</PinY>
					</XForm>
				</Shape>
				<Shape ID="2" UniqueID="{BA27BFF3-9603-4A86-B561-428EF6441A4C}" Name="Class" NameU="Class" Master="22">
					<XForm>
						<PinX Unit="MM">2.274471667049887</PinX>
						<PinY Unit="MM">8.878332647139047</PinY>
					</XForm>
				</Shape>
				<Shape ID="9" UniqueID="{C2D154D2-6B98-4356-8DA4-7329A09A84B3}" Name="Name" NameU="Name">
					<Text>ReportViewTraits</Text>
					<XForm>
						<PinX Unit="MM">2.274471667049887</PinX>
						<PinY Unit="MM">9.053529497532747</PinY>
					</XForm>
				</Shape>
				<Shape ID="10" UniqueID="{E52D79BC-2511-44CD-B6C1-FC77B79C86B4}" Name="Parameters" NameU="Parameters">
					<Text>7 Traits</Text>
					<XForm>
						<PinX Unit="MM">2.765920804241510</PinX>
						<PinY Unit="MM">9.251968503937006</PinY>
					</XForm>
				</Shape>
				<Shape ID="11" UniqueID="{7DD4506C-5A14-458A-9EC9-5368D92A991C}" Name="Class.11" NameU="Class.11" Master="22">
					<XForm>
						<PinX Unit="MM">2.274547192813393</PinX>
						<PinY Unit="MM">6.949198788871330</PinY>
					</XForm>
				</Shape>
				<Shape ID="18" UniqueID="{1DA75735-177F-4441-8537-AE6B0A00B257}" Name="Name" NameU="Name">
					<Text>ListViewWin32Control</Text>
					<XForm>
						<PinX Unit="MM">2.274547192813393</PinX>
						<PinY Unit="MM">7.124395639265031</PinY>
					</XForm>
				</Shape>
				<Shape ID="19" UniqueID="{5BFD10EC-F844-4895-926F-548363D5E0B7}" Name="Parameters" NameU="Parameters">
					<Text>Traits_T, WindowBase_T</Text>
					<XForm>
						<PinX Unit="MM">2.895551078540172</PinX>
						<PinY Unit="MM">7.322834645669291</PinY>
					</XForm>
				</Shape>
				<Shape ID="20" UniqueID="{B35224B0-CAE3-461D-971A-6A3BC41F1898}" Name="Binding" NameU="Binding" Master="32">
					<Text>«bind»
Traits_T(,)</Text>
					<XForm>
						<PinX Unit="MM">2.274509429931640</PinX>
						<PinY Unit="MM">7.913765718005188</PinY>
					</XForm>
				</Shape>
				<Shape ID="21" UniqueID="{275906FB-8DAC-4A6B-810A-3FADE4235477}" Name="Class.21" NameU="Class.21" Master="22">
					<XForm>
						<PinX Unit="MM">6.122047244094487</PinX>
						<PinY Unit="MM">6.948439006404259</PinY>
					</XForm>
				</Shape>
				<Shape ID="28" UniqueID="{A148683D-EABC-4CAC-A839-0C4E46B661CB}" Name="Name" NameU="Name">
					<Text>Window</Text>
					<XForm>
						<PinX Unit="MM">6.122047244094487</PinX>
						<PinY Unit="MM">7.123635856797960</PinY>
					</XForm>
				</Shape>
				<Shape ID="29" UniqueID="{AA3E7192-CA84-4094-A889-E207BA716652}" Name="Parameters" NameU="Parameters">
					<Text>Parent_T</Text>
					<XForm>
						<PinX Unit="MM">6.496062992125983</PinX>
						<PinY Unit="MM">7.322074863202220</PinY>
					</XForm>
				</Shape>
				<Shape ID="30" UniqueID="{56069039-450E-4AAA-B057-9FEC845EF178}" Name="Generalization" NameU="Generalization" Master="24">
					<XForm>
						<PinX Unit="MM">4.321791287301581</PinX>
						<PinY Unit="MM">6.762000969238815</PinY>
					</XForm>
				</Shape>
				<Shape ID="32" UniqueID="{54010ABD-6AF9-406C-BFFB-09350443BC3D}" Name="Binding.32" NameU="Binding.32" Master="32">
					<Text>«bind»
WindowBase_T(,)</Text>
					<XForm>
						<PinX Unit="MM">4.321791287301581</PinX>
						<PinY Unit="MM">7.135636826036775</PinY>
					</XForm>
				</Shape>
				<Shape ID="33" UniqueID="{69167BE4-6657-4ECA-BD66-DADE9B696BC2}" Name="Class.33" NameU="Class.33" Master="22">
					<XForm>
						<PinX Unit="MM">3.937007874015748</PinX>
						<PinY Unit="MM">5.098045305616857</PinY>
					</XForm>
				</Shape>
				<Shape ID="40" UniqueID="{0E8B9C1C-B923-41B6-B2A0-87EFA59F2CF7}" Name="Name" NameU="Name">
					<Text>Win32ControlContainer</Text>
					<XForm>
						<PinX Unit="MM">3.937007874015748</PinX>
						<PinY Unit="MM">5.273242156010558</PinY>
					</XForm>
				</Shape>
				<Shape ID="41" UniqueID="{F1257643-6177-4258-9353-2B96CF0D3E92}" Name="Parameters" NameU="Parameters">
					<Text>Control_T, WindowBase_T</Text>
					<XForm>
						<PinX Unit="MM">4.591922511085301</PinX>
						<PinY Unit="MM">5.471681162414818</PinY>
					</XForm>
				</Shape>
				<Shape ID="42" UniqueID="{3FFF3F5A-1CC3-4748-B745-A55095FD28BE}" Name="Binding.42" NameU="Binding.42" Master="32">
					<Text>«bind»
Control_T(,)</Text>
					<XForm>
						<PinX Unit="MM">2.942048874147182</PinX>
						<PinY Unit="MM">6.023622047244094</PinY>
					</XForm>
				</Shape>
				<Shape ID="43" UniqueID="{735E9AC8-C583-4191-911B-0A89B7BB5882}" Name="Class.43" NameU="Class.43" Master="22">
					<XForm>
						<PinX Unit="MM">1.181102362204724</PinX>
						<PinY Unit="MM">4.409448818897637</PinY>
					</XForm>
				</Shape>
				<Shape ID="50" UniqueID="{A1912D63-0CAC-42B8-A355-663054092C1A}" Name="Name" NameU="Name">
					<Text>ATL::CWindowImplBaseT</Text>
					<XForm>
						<PinX Unit="MM">1.181102362204724</PinX>
						<PinY Unit="MM">4.584645669291337</PinY>
					</XForm>
				</Shape>
				<Shape ID="52" UniqueID="{D9E0372D-5F6A-4142-85C6-8E8978F3D49E}" Name="Binding.52" NameU="Binding.52" Master="32">
					<Text>«bind»
WindowBase_T(,)</Text>
					<XForm>
						<PinX Unit="MM">2.582233218696174</PinX>
						<PinY Unit="MM">4.916053664252013</PinY>
					</XForm>
				</Shape>
				<Shape ID="53" UniqueID="{E340B000-0FC3-4AE7-8A5B-F985C0D25583}" Name="Generalization.53" NameU="Generalization.53" Master="24">
					<XForm>
						<PinX Unit="MM">2.582233218696174</PinX>
						<PinY Unit="MM">4.591440460262481</PinY>
					</XForm>
				</Shape>
				<Shape ID="55" UniqueID="{FCB8E56A-7B00-46D7-814A-57EFB1CCCA0B}" Name="Class.55" NameU="Class.55" Master="22">
					<XForm>
						<PinX Unit="MM">6.723312684689470</PinX>
						<PinY Unit="MM">4.350773592020937</PinY>
					</XForm>
				</Shape>
				<Shape ID="62" UniqueID="{70CC4491-53A8-4173-91CA-C7404B0D5BB7}" Name="Name" NameU="Name">
					<Text>RichEditWin32Control</Text>
					<XForm>
						<PinX Unit="MM">6.723312684689470</PinX>
						<PinY Unit="MM">4.525970442414638</PinY>
					</XForm>
				</Shape>
				<Shape ID="63" UniqueID="{7E8174B6-99D8-4541-B705-7468A0F9521D}" Name="Parameters" NameU="Parameters">
					<Text>Traits_T, WindowBase_T</Text>
					<XForm>
						<PinX Unit="MM">7.344263164654530</PinX>
						<PinY Unit="MM">4.724409448818898</PinY>
					</XForm>
				</Shape>
				<Shape ID="64" UniqueID="{6DBFE83A-2E9A-4EF2-814E-56D499B1B653}" Name="Class.64" NameU="Class.64" Master="22">
					<XForm>
						<PinX Unit="MM">6.718682558337085</PinX>
						<PinY Unit="MM">2.755905511811024</PinY>
					</XForm>
				</Shape>
				<Shape ID="71" UniqueID="{6363E7A5-3D08-46C8-AD94-AAA24BB142B2}" Name="Name" NameU="Name">
					<Text>RichEditAsWindowTraits</Text>
					<XForm>
						<PinX Unit="MM">6.718682558337085</PinX>
						<PinY Unit="MM">2.931102362204725</PinY>
					</XForm>
				</Shape>
				<Shape ID="73" UniqueID="{F6400CDB-9DF4-454A-B523-584A7D310341}" Name="Generalization.73" NameU="Generalization.73" Master="24">
					<XForm>
						<PinX Unit="MM">6.609687838407726</PinX>
						<PinY Unit="MM">5.743015263412088</PinY>
					</XForm>
				</Shape>
				<Shape ID="75" UniqueID="{32B1C42A-5BF8-4B52-A133-3CBBE384FD3D}" Name="Binding.75" NameU="Binding.75" Master="32">
					<Text>«bind»
WindowBast_T(,)</Text>
					<XForm>
						<PinX Unit="MM">6.018700787401574</PinX>
						<PinY Unit="MM">5.556197335013108</PinY>
					</XForm>
				</Shape>
				<Shape ID="76" UniqueID="{85DE3DB6-C70A-49FB-893E-2471ED5DE8EB}" Name="Binding.76" NameU="Binding.76" Master="32">
					<Text>«bind»
Traits_T(,)</Text>
					<XForm>
						<PinX Unit="MM">6.720997621513277</PinX>
						<PinY Unit="MM">3.504316899107552</PinY>
					</XForm>
				</Shape>
				<Shape ID="77" UniqueID="{AD7715FD-474F-489C-8152-BA9CD3129029}" Name="Binding.77" NameU="Binding.77" Master="32">
					<Text>«bind»
Control_T(,)</Text>
					<XForm>
						<PinX Unit="MM">5.144043619897309</PinX>
						<PinY Unit="MM">3.671259842519685</PinY>
					</XForm>
				</Shape>
			</Shapes>
		</Page>
		<Page ID="22" Name="ToolWindow Classes" NameU="Window Classes">
			<Shapes>
				<Shape ID="1" UniqueID="{7A3AABF9-DBAB-416C-9D50-13E0C958ABFA}" Name="Watermark Title" NameU="Watermark Title" Master="18">
					<Text>Static Structure</Text>
					<XForm>
						<PinX Unit="MM">0.000000000000000</PinX>
						<PinY Unit="MM">10.999999999999998</PinY>
					</XForm>
				</Shape>
				<Shape ID="2" UniqueID="{DF206A5D-5F5E-4A90-B9F0-C17DCACAAD66}" Name="Class" NameU="Class" Master="22">
					<XForm>
						<PinX Unit="MM">1.069787975739756</PinX>
						<PinY Unit="MM">2.844298243359609</PinY>
					</XForm>
				</Shape>
				<Shape ID="9" UniqueID="{750D3895-D87C-4849-A0FF-FB53FBBB8994}" Name="Name" NameU="Name">
					<Text>Window</Text>
					<XForm>
						<PinX Unit="MM">1.069787975739756</PinX>
						<PinY Unit="MM">3.019495093753309</PinY>
					</XForm>
				</Shape>
				<Shape ID="10" UniqueID="{51B117A0-7EAA-4D9F-8108-136A137AD671}" Name="Parameters" NameU="Parameters">
					<Text>Parent_T</Text>
					<XForm>
						<PinX Unit="MM">1.443803723771252</PinX>
						<PinY Unit="MM">3.217934100157569</PinY>
					</XForm>
				</Shape>
				<Shape ID="11" UniqueID="{618F66AB-6864-4B3C-995F-3C6D5A180ACF}" Name="Class.11" NameU="Class.11" Master="22">
					<XForm>
						<PinX Unit="MM">4.277841366362834</PinX>
						<PinY Unit="MM">2.736220472440944</PinY>
					</XForm>
				</Shape>
				<Shape ID="18" UniqueID="{E16BAE4F-75DC-4CAA-854E-FEEBCEBE64CA}" Name="Name" NameU="Name">
					<Text>VsWindowPaneFromResource</Text>
					<XForm>
						<PinX Unit="MM">4.277841366362834</PinX>
						<PinY Unit="MM">2.911417322834645</PinY>
					</XForm>
				</Shape>
				<Shape ID="19" UniqueID="{94F69735-05B1-4C68-A298-BCF81DCAB914}" Name="Parameters" NameU="Parameters">
					<Text>Derived_T, DialogResouceString_T, Window_T, IVsWindowPaneImpl_T</Text>
					<XForm>
						<PinX Unit="MM">5.118110236220473</PinX>
						<PinY Unit="MM">3.109856329238904</PinY>
					</XForm>
				</Shape>
				<Shape ID="20" UniqueID="{45B9A832-F4A6-4F6E-A169-A116147E76C2}" Name="Class.20" NameU="Class.20" Master="22">
					<XForm>
						<PinX Unit="MM">6.335864804103130</PinX>
						<PinY Unit="MM">8.838202785931818</PinY>
					</XForm>
				</Shape>
				<Shape ID="27" UniqueID="{5AAEFFDA-BEC1-475C-8C91-EC5BF92EC275}" Name="Name" NameU="Name">
					<Text>VsWindowFrameEventSink</Text>
					<XForm>
						<PinX Unit="MM">6.335864804103130</PinX>
						<PinY Unit="MM">9.013399636325518</PinY>
					</XForm>
				</Shape>
				<Shape ID="28" UniqueID="{C4246BA3-6E74-4435-8E5F-C7F860CAFADF}" Name="Parameters" NameU="Parameters">
					<Text>Derived_T</Text>
					<XForm>
						<PinX Unit="MM">7.086614173228346</PinX>
						<PinY Unit="MM">9.211838642729777</PinY>
					</XForm>
				</Shape>
				<Shape ID="29" UniqueID="{643C53AE-40F8-4DBE-893F-8F86C6972FE1}" Name="Interface" NameU="Interface" Master="23">
					<Text>IVsWindowPane</Text>
					<XForm>
						<PinX Unit="MM">3.557037401574803</PinX>
						<PinY Unit="MM">4.901574803149606</PinY>
					</XForm>
				</Shape>
				<Shape ID="30" UniqueID="{436D4CA9-E799-4EBC-87E9-C76452127A52}" Name="Class.30" NameU="Class.30" Master="22">
					<XForm>
						<PinX Unit="MM">1.089473015109836</PinX>
						<PinY Unit="MM">4.497841550446223</PinY>
					</XForm>
				</Shape>
				<Shape ID="37" UniqueID="{25D6A900-DE3E-49FF-8BFA-54173568CC29}" Name="Name" NameU="Name">
					<Text>ATL::CWindow</Text>
					<XForm>
						<PinX Unit="MM">1.089473015109836</PinX>
						<PinY Unit="MM">4.673038400839923</PinY>
					</XForm>
				</Shape>
				<Shape ID="39" UniqueID="{944413A2-852E-44B2-9E9E-08A4BD84842D}" Name="Binding" NameU="Binding" Master="32">
					<Text>«bind»
Parent_T()</Text>
					<XForm>
						<PinX Unit="MM">0.881046485422727</PinX>
						<PinY Unit="MM">3.720092549711344</PinY>
					</XForm>
				</Shape>
				<Shape ID="40" UniqueID="{F8085201-77B3-4424-B03A-722324279DDD}" Name="Class.40" NameU="Class.40" Master="22">
					<XForm>
						<PinX Unit="MM">1.678599701910996</PinX>
						<PinY Unit="MM">8.838202785931818</PinY>
					</XForm>
				</Shape>
				<Shape ID="47" UniqueID="{CE33C9ED-A1FE-44E1-BB14-51B431CB5174}" Name="Name" NameU="Name">
					<Text>ToolWindowBase</Text>
					<XForm>
						<PinX Unit="MM">1.678599701910996</PinX>
						<PinY Unit="MM">9.013399636325518</PinY>
					</XForm>
				</Shape>
				<Shape ID="48" UniqueID="{4743C9C3-B3F9-433B-9F62-671444E5EC9A}" Name="Parameters" NameU="Parameters">
					<Text>Derived_T, PackageVsSiteCache_T</Text>
					<XForm>
						<PinX Unit="MM">2.176097041617268</PinX>
						<PinY Unit="MM">9.211838642729777</PinY>
					</XForm>
				</Shape>
				<Shape ID="49" UniqueID="{A2FEDBB9-38DA-4729-AAB5-3E77167DFEE0}" Name="Interface.49" NameU="Interface.49" Master="23">
					<Text>IVsWindowFrameNotify</Text>
					<XForm>
						<PinX Unit="MM">5.441365434977913</PinX>
						<PinY Unit="MM">9.025020714330797</PinY>
					</XForm>
				</Shape>
				<Shape ID="50" UniqueID="{E1AA9CC5-53A8-4F7B-812B-2506D86B1458}" Name="Interface.50" NameU="Interface.50" Master="23">
					<Text>IVsWindowFrameNotify3</Text>
					<XForm>
						<PinX Unit="MM">5.441365434977913</PinX>
						<PinY Unit="MM">8.651384857532838</PinY>
					</XForm>
				</Shape>
				<Shape ID="51" UniqueID="{0464742C-F2C0-41E3-BEB1-C60E85DB4A6B}" Name="Class.51" NameU="Class.51" Master="22">
					<XForm>
						<PinX Unit="MM">4.278603192208809</PinX>
						<PinY Unit="MM">4.901574803149606</PinY>
					</XForm>
				</Shape>
				<Shape ID="58" UniqueID="{2FAAF696-D507-4CBD-8F39-F721B949C30A}" Name="Name" NameU="Name">
					<Text>IVsWindowPaneImpl</Text>
					<XForm>
						<PinX Unit="MM">4.278603192208809</PinX>
						<PinY Unit="MM">5.076771653543307</PinY>
					</XForm>
				</Shape>
				<Shape ID="59" UniqueID="{EBBD3621-2ECD-480C-8A88-0CBFB6B396FC}" Name="Parameters" NameU="Parameters">
					<Text>Derived_T, VsSiteCache_T</Text>
					<XForm>
						<PinX Unit="MM">4.856418982842816</PinX>
						<PinY Unit="MM">5.275210659947566</PinY>
					</XForm>
				</Shape>
				<Shape ID="62" UniqueID="{0E928FE9-2A3C-474A-9195-45899601D477}" Name="Binding.62" NameU="Binding.62" Master="32">
					<Text>«bind»
IVsWindowPaneImpl_T(,,,)</Text>
					<XForm>
						<PinX Unit="MM">4.422676226944323</PinX>
						<PinY Unit="MM">3.818897637795275</PinY>
					</XForm>
				</Shape>
				<Shape ID="63" UniqueID="{94545FC9-5C07-4B9E-ACBD-EB40DB37E11D}" Name="Generalization.63" NameU="Generalization.63" Master="24">
					<XForm>
						<PinX Unit="MM">2.440688110138224</PinX>
						<PinY Unit="MM">2.603441429501296</PinY>
					</XForm>
				</Shape>
				<Shape ID="65" UniqueID="{D6AA83BE-57EB-430D-8C53-8D3B7BC11029}" Name="Binding.65" NameU="Binding.65" Master="32">
					<Text>«bind»
Window_T(,,,)</Text>
					<XForm>
						<PinX Unit="MM">2.440688110138224</PinX>
						<PinY Unit="MM">2.977077286299256</PinY>
					</XForm>
				</Shape>
				<Shape ID="66" UniqueID="{8A34402B-0BD8-4804-9632-CF336630FC11}" Name="Class.66" NameU="Class.66" Master="22">
					<XForm>
						<PinX Unit="MM">1.574803149606299</PinX>
						<PinY Unit="MM">7.106679103831960</PinY>
					</XForm>
				</Shape>
				<Shape ID="73" UniqueID="{E409C09B-028B-4E4D-A753-5DEB00AF0BB5}" Name="Name" NameU="Name">
					<Text>ISelectionContainerImpl</Text>
					<XForm>
						<PinX Unit="MM">1.574803149606299</PinX>
						<PinY Unit="MM">7.281875954225661</PinY>
					</XForm>
				</Shape>
				<Shape ID="74" UniqueID="{64588EFD-0B98-47AF-B616-D1CDADC8D96E}" Name="Parameters" NameU="Parameters">
					<Text>Derived_T, bSingleSelection_T</Text>
					<XForm>
						<PinX Unit="MM">2.245258863336008</PinX>
						<PinY Unit="MM">7.480314960629920</PinY>
					</XForm>
				</Shape>
			</Shapes>
		</Page>
		<Page ID="23" Name="Automation and Macro Recording" NameU="Automation">
			<Shapes>
				<Shape ID="1" UniqueID="{A18B203E-B691-4136-9099-B53BA5934467}" Name="Watermark Title" NameU="Watermark Title" Master="18">
					<Text>Static Structure</Text>
					<XForm>
						<PinX Unit="MM">0.000000000000000</PinX>
						<PinY Unit="MM">10.999999999999998</PinY>
					</XForm>
				</Shape>
				<Shape ID="2" UniqueID="{F787C186-7F6A-40E7-B9AD-2896400F50F5}" Name="Class" NameU="Class" Master="22">
					<XForm>
						<PinX Unit="MM">4.424278973775096</PinX>
						<PinY Unit="MM">8.590160099422691</PinY>
					</XForm>
				</Shape>
				<Shape ID="9" UniqueID="{2F2E5A89-44A2-4770-868C-B74BC88C8382}" Name="Name" NameU="Name">
					<Text>«implementation class»
IExtensibleObjectImpl</Text>
					<XForm>
						<PinX Unit="MM">4.424278973775096</PinX>
						<PinY Unit="MM">8.765356949816393</PinY>
					</XForm>
				</Shape>
				<Shape ID="10" UniqueID="{C4439BC4-9C62-43C2-B198-DD3F17F133CE}" Name="Parameters" NameU="Parameters">
					<Text>Derived_T</Text>
					<XForm>
						<PinX Unit="MM">5.039370078740157</PinX>
						<PinY Unit="MM">9.030462368574167</PinY>
					</XForm>
				</Shape>
				<Shape ID="11" UniqueID="{88291B92-5D67-4E8D-AE55-43D0B80928B4}" Name="Interface" NameU="Interface" Master="23">
					<Text>IExtensibleObject</Text>
					<XForm>
						<PinX Unit="MM">3.665437868810036</PinX>
						<PinY Unit="MM">8.810311233998430</PinY>
					</XForm>
				</Shape>
				<Shape ID="12" UniqueID="{E358E2F7-8D44-45AD-8B7F-9CF05CDECD4B}" Name="Metaclass" NameU="Metaclass" Master="34">
					<Text>«metaclass»
Automation Target and Macro Recorder</Text>
					<XForm>
						<PinX Unit="MM">4.430817590165774</PinX>
						<PinY Unit="MM">6.031104981312455</PinY>
					</XForm>
				</Shape>
				<Shape ID="21" UniqueID="{32FDC2F0-2669-423C-8475-29506C512561}" Name="Generalization" NameU="Generalization" Master="24">
					<XForm>
						<PinX Unit="MM">4.427548281970435</PinX>
						<PinY Unit="MM">7.251703187786646</PinY>
					</XForm>
				</Shape>
				<Shape ID="23" UniqueID="{783F9E23-7409-43FE-BA20-A00BC5B3173E}" Name="Class.23" NameU="Class.23" Master="22">
					<XForm>
						<PinX Unit="MM">4.411202612066343</PinX>
						<PinY Unit="MM">3.601982313490874</PinY>
					</XForm>
				</Shape>
				<Shape ID="30" UniqueID="{9F76A64B-B430-48A2-90B1-E9C9E0EB8C54}" Name="Name" NameU="Name">
					<Text>«implementation class»
VsMacroRecorder</Text>
					<XForm>
						<PinX Unit="MM">4.411202612066343</PinX>
						<PinY Unit="MM">3.777179163884575</PinY>
					</XForm>
				</Shape>
				<Shape ID="31" UniqueID="{55B49181-8783-4239-865C-C6CE70BD4C0C}" Name="Parameters" NameU="Parameters">
					<Text>pguidEmitter_T, Macro_T, NoLastMacroRecorded_T</Text>
					<XForm>
						<PinX Unit="MM">5.026293717031404</PinX>
						<PinY Unit="MM">4.042284582642349</PinY>
					</XForm>
				</Shape>
				<Shape ID="32" UniqueID="{7B1115EF-31A1-48AB-B8AB-0B501ECE16C9}" Name="Composition" NameU="Composition" Master="27">
					<XForm>
						<PinX Unit="MM">4.421010101116059</PinX>
						<PinY Unit="MM">4.875472999982591</PinY>
					</XForm>
				</Shape>
				<Shape ID="34" UniqueID="{77FCE3E2-6373-4999-A5DC-C8B412E90B93}" Name="end1_mp" NameU="end1_mp">
					<Text>1</Text>
					<XForm>
						<PinX Unit="IN">4.360106912047119</PinX>
						<PinY Unit="IN">5.587370984820782</PinY>
					</XForm>
				</Shape>
				<Shape ID="36" UniqueID="{CF6944A2-6E35-4440-B858-56553BBC2323}" Name="end2_mp" NameU="end2_mp">
					<Text>1</Text>
					<XForm>
						<PinX Unit="IN">4.340491933947688</PinX>
						<PinY Unit="IN">4.163575015144400</PinY>
					</XForm>
				</Shape>
			</Shapes>
		</Page>
		<Page ID="24" Name="Find and Replace Classes" NameU="Find and Replace Classes">
			<Shapes>
				<Shape ID="1" UniqueID="{5884B0F7-2643-44AC-A8C8-C2C2D47EC445}" Name="Watermark Title" NameU="Watermark Title" Master="18">
					<Text>Static Structure</Text>
					<XForm>
						<PinX Unit="MM">0.000000000000000</PinX>
						<PinY Unit="MM">10.999999999999998</PinY>
					</XForm>
				</Shape>
				<Shape ID="2" UniqueID="{0F1B1AA7-AC7E-4BC1-83DD-719304E6EBD5}" Name="Class" NameU="Class" Master="22">
					<XForm>
						<PinX Unit="MM">2.559055118110236</PinX>
						<PinY Unit="MM">3.937007874015748</PinY>
					</XForm>
				</Shape>
				<Shape ID="9" UniqueID="{1948B354-97BD-4604-8C00-649724085599}" Name="Name" NameU="Name">
					<Text>«implementation class»
IVsTextSpanSetImpl</Text>
					<XForm>
						<PinX Unit="MM">2.559055118110236</PinX>
						<PinY Unit="MM">4.112204724409449</PinY>
					</XForm>
				</Shape>
				<Shape ID="11" UniqueID="{DACFAED1-F81B-46BB-A905-A545DCD86D78}" Name="Interface" NameU="Interface" Master="23">
					<Text>IVsTextSpanSet</Text>
					<XForm>
						<PinX Unit="MM">1.800214013145175</PinX>
						<PinY Unit="MM">4.098229656010559</PinY>
					</XForm>
				</Shape>
				<Shape ID="12" UniqueID="{41AD9E75-3E43-4240-A6BF-E9C1EBF682CA}" Name="Class.12" NameU="Class.12" Master="22">
					<XForm>
						<PinX Unit="MM">2.452854330708661</PinX>
						<PinY Unit="MM">9.377561674225841</PinY>
					</XForm>
				</Shape>
				<Shape ID="19" UniqueID="{CCDB66E0-A8A5-44B1-84C3-2B776CE48F1E}" Name="Name" NameU="Name">
					<Text>«implementation class»
IVsTextViewSimpleImpl</Text>
					<XForm>
						<PinX Unit="MM">2.452854330708661</PinX>
						<PinY Unit="MM">9.552758524619541</PinY>
					</XForm>
				</Shape>
				<Shape ID="21" UniqueID="{A424BD16-C9AE-4E8A-A341-D84CC20E5B0E}" Name="Interface.21" NameU="Interface.21" Master="23">
					<Text>IVsTextView</Text>
					<XForm>
						<PinX Unit="MM">1.653977977940866</PinX>
						<PinY Unit="MM">9.538783456220651</PinY>
					</XForm>
				</Shape>
				<Shape ID="22" UniqueID="{6347BD87-A73D-4739-B581-7744776B1AD5}" Name="Class.22" NameU="Class.22" Master="22">
					<XForm>
						<PinX Unit="MM">5.838999728323417</PinX>
						<PinY Unit="MM">9.377561674225841</PinY>
					</XForm>
				</Shape>
				<Shape ID="29" UniqueID="{89EBD749-400F-4B76-8362-641DC1D10D1E}" Name="Name" NameU="Name">
					<Text>«implementation class»
IVsTextViewEventsNotImpl</Text>
					<XForm>
						<PinX Unit="MM">5.838999728323417</PinX>
						<PinY Unit="MM">9.552758524619541</PinY>
					</XForm>
				</Shape>
				<Shape ID="31" UniqueID="{1BD905A9-DB42-4A8C-B1AE-03DBFC60D109}" Name="Interface.31" NameU="Interface.31" Master="23">
					<Text>IVsTextViewEvents</Text>
					<XForm>
						<PinX Unit="MM">4.947536858221637</PinX>
						<PinY Unit="MM">9.538783456220651</PinY>
					</XForm>
				</Shape>
				<Shape ID="32" UniqueID="{F06974FE-50AA-438A-B4D3-99FE33AAF44F}" Name="Class.32" NameU="Class.32" Master="22">
					<XForm>
						<PinX Unit="MM">2.602053222874468</PinX>
						<PinY Unit="MM">7.802758524619541</PinY>
					</XForm>
				</Shape>
				<Shape ID="39" UniqueID="{AD72259A-BD72-436A-86BA-314067320498}" Name="Name" NameU="Name">
					<Text>«implementation class»
IVsCodeWindowSingleViewSimpleImpl</Text>
					<XForm>
						<PinX Unit="MM">2.602053222874468</PinX>
						<PinY Unit="MM">7.977955375013242</PinY>
					</XForm>
				</Shape>
				<Shape ID="41" UniqueID="{EA08DFE1-C68E-4951-AE13-1CD0275ACE0C}" Name="Interface.41" NameU="Interface.41" Master="23">
					<Text>IVsCodeWindow</Text>
					<XForm>
						<PinX Unit="MM">1.398939122914290</PinX>
						<PinY Unit="MM">7.963980306614352</PinY>
					</XForm>
				</Shape>
				<Shape ID="42" UniqueID="{D7C5A8AC-C8CE-4FFE-AE29-B6E567B90A0A}" Name="Class.42" NameU="Class.42" Master="22">
					<XForm>
						<PinX Unit="MM">6.955873461964073</PinX>
						<PinY Unit="MM">7.802758524619541</PinY>
					</XForm>
				</Shape>
				<Shape ID="49" UniqueID="{32CAC960-57F7-4C9F-B983-A711840D0B3F}" Name="Name" NameU="Name">
					<Text>«implementation class»
IVsTextLinesNotImpl</Text>
					<XForm>
						<PinX Unit="MM">6.955873461964073</PinX>
						<PinY Unit="MM">7.977955375013242</PinY>
					</XForm>
				</Shape>
				<Shape ID="51" UniqueID="{1B3420F9-E47F-44EB-AB1B-ECE3EC15CCEA}" Name="Interface.51" NameU="Interface.51" Master="23">
					<Text>IVsTextLines</Text>
					<XForm>
						<PinX Unit="MM">6.197032356999012</PinX>
						<PinY Unit="MM">7.963980306614352</PinY>
					</XForm>
				</Shape>
				<Shape ID="52" UniqueID="{3510D19D-EA12-4776-A538-4347D7B20840}" Name="Class.52" NameU="Class.52" Master="22">
					<XForm>
						<PinX Unit="MM">4.173099659378623</PinX>
						<PinY Unit="MM">5.905511811023621</PinY>
					</XForm>
				</Shape>
				<Shape ID="59" UniqueID="{1FD72243-7F9D-4A4D-9037-0173E9A60426}" Name="Name" NameU="Name">
					<Text>«implementation class»
SingleViewFindInFilesOutputWindowIntegrationImpl</Text>
					<XForm>
						<PinX Unit="MM">4.173099659378623</PinX>
						<PinY Unit="MM">6.080708661417321</PinY>
					</XForm>
				</Shape>
				<Shape ID="60" UniqueID="{19C90896-5C72-4B17-986A-CD659D1434BE}" Name="Parameters" NameU="Parameters">
					<Text>Derived_T</Text>
					<XForm>
						<PinX Unit="MM">5.590293806946223</PinX>
						<PinY Unit="MM">6.345814080175097</PinY>
					</XForm>
				</Shape>
				<Shape ID="61" UniqueID="{8FB45D07-3309-4F4E-9170-EBCD7A9BF45A}" Name="Generalization" NameU="Generalization" Master="24">
					<XForm>
						<PinX Unit="MM">5.918785097563248</PinX>
						<PinY Unit="MM">6.913064520402509</PinY>
					</XForm>
				</Shape>
				<Shape ID="63" UniqueID="{615A99CE-F734-446C-801B-991E14D80612}" Name="Generalization.63" NameU="Generalization.63" Master="24">
					<XForm>
						<PinX Unit="MM">5.006049693851020</PinX>
						<PinY Unit="MM">7.661096016465502</PinY>
					</XForm>
				</Shape>
				<Shape ID="65" UniqueID="{B96C7B5C-FA6D-4845-9B29-361EC3D23847}" Name="Generalization.65" NameU="Generalization.65" Master="24">
					<XForm>
						<PinX Unit="MM">3.312976995043642</PinX>
						<PinY Unit="MM">7.700466095205659</PinY>
					</XForm>
				</Shape>
				<Shape ID="67" UniqueID="{480DCBAD-5D9E-4C98-A66A-9A74BA0878E3}" Name="Generalization.67" NameU="Generalization.67" Master="24">
					<XForm>
						<PinX Unit="MM">3.033277904234645</PinX>
						<PinY Unit="MM">6.913064520402509</PinY>
					</XForm>
				</Shape>
				<Shape ID="69" UniqueID="{E9BFC3B3-1513-482B-9D8D-1CFAA10409AA}" Name="Metaclass" NameU="Metaclass" Master="34">
					<Text>«metaclass»
Single View Document</Text>
					<XForm>
						<PinX Unit="MM">4.172814971060713</PinX>
						<PinY Unit="MM">2.086614173228347</PinY>
					</XForm>
				</Shape>
				<Shape ID="78" UniqueID="{A7F6E631-679D-4580-ACBA-8BC76AF49021}" Name="Generalization.78" NameU="Generalization.78" Master="24">
					<XForm>
						<PinX Unit="MM">4.172957315219668</PinX>
						<PinY Unit="MM">3.937133639545056</PinY>
					</XForm>
				</Shape>
				<Shape ID="80" UniqueID="{60C671DB-EAD3-4733-A7F5-192C6D03BADC}" Name="Generalization.80" NameU="Generalization.80" Master="24">
					<XForm>
						<PinX Unit="MM">3.208351385775850</PinX>
						<PinY Unit="MM">3.011811023622047</PinY>
					</XForm>
				</Shape>
				<Shape ID="82" UniqueID="{53179CC9-5725-4CEE-8D24-612817C79E02}" Name="Class.82" NameU="Class.82" Master="22">
					<XForm>
						<PinX Unit="MM">6.227831959543755</PinX>
						<PinY Unit="MM">3.858267716535432</PinY>
					</XForm>
				</Shape>
				<Shape ID="89" UniqueID="{996CFF98-85DC-4ECB-B988-7189E697B629}" Name="Name" NameU="Name">
					<Text>«implementation class»
IVsFindTargetImpl</Text>
					<XForm>
						<PinX Unit="MM">6.227831959543755</PinX>
						<PinY Unit="MM">4.033464566929133</PinY>
					</XForm>
				</Shape>
				<Shape ID="91" UniqueID="{B115B185-8823-4EFC-8A45-F667BADF6D0A}" Name="Interface.91" NameU="Interface.91" Master="23">
					<Text>IVsFindTarget</Text>
					<XForm>
						<PinX Unit="MM">5.468990854578694</PinX>
						<PinY Unit="MM">4.019489498530243</PinY>
					</XForm>
				</Shape>
				<Shape ID="92" UniqueID="{B0AE6E76-FB9A-4AAB-8675-D115E7A19774}" Name="Generalization.92" NameU="Generalization.92" Master="24">
					<XForm>
						<PinX Unit="MM">5.357907124111859</PinX>
						<PinY Unit="MM">2.972440944881889</PinY>
					</XForm>
				</Shape>
			</Shapes>
		</Page>
		<Page ID="25" Name="VsFontCommandHandling" NameU="VsFontCommandHandling">
			<Shapes>
				<Shape ID="1" UniqueID="{EE86FCB4-967C-4A99-81E2-5B31459F8131}" Name="Watermark Title" NameU="Watermark Title" Master="18">
					<Text>Static Structure</Text>
					<XForm>
						<PinX Unit="MM">0.000000000000000</PinX>
						<PinY Unit="MM">10.999999999999998</PinY>
					</XForm>
				</Shape>
				<Shape ID="2" UniqueID="{2E9F9B34-D04C-4D73-8D2A-1605AD8C6EDF}" Name="Class" NameU="Class" Master="22">
					<XForm>
						<PinX Unit="MM">3.149606299212598</PinX>
						<PinY Unit="MM">6.496062992125983</PinY>
					</XForm>
				</Shape>
				<Shape ID="9" UniqueID="{E604697E-CE7E-465B-9A4A-08865C464219}" Name="Name" NameU="Name">
					<Text>«implementation class»
VsFontCommandHandling</Text>
					<XForm>
						<PinX Unit="MM">3.149606299212598</PinX>
						<PinY Unit="MM">6.671259842519684</PinY>
					</XForm>
				</Shape>
				<Shape ID="11" UniqueID="{0EBB51FA-6A37-4CF2-A03B-33B964AFA82E}" Name="Class.11" NameU="Class.11" Master="22">
					<XForm>
						<PinX Unit="MM">5.735448768577727</PinX>
						<PinY Unit="MM">6.496062992125983</PinY>
					</XForm>
				</Shape>
				<Shape ID="18" UniqueID="{AEF8F9D6-E1D1-429B-A864-576A63C72F72}" Name="Name" NameU="Name">
					<Text>«implementation class»
DeviceContext</Text>
					<XForm>
						<PinX Unit="MM">5.735448768577727</PinX>
						<PinY Unit="MM">6.671259842519684</PinY>
					</XForm>
				</Shape>
				<Shape ID="20" UniqueID="{3B2D45ED-452E-40D5-B1D4-E007EB69259D}" Name="Composition" NameU="Composition" Master="27">
					<XForm>
						<PinX Unit="MM">4.501014472371725</PinX>
						<PinY Unit="MM">6.496062992125983</PinY>
					</XForm>
				</Shape>
				<Shape ID="22" UniqueID="{0F4D665A-2826-4B58-87C4-B4A12B16E44D}" Name="end1_mp" NameU="end1_mp">
					<Text>1</Text>
					<XForm>
						<PinX Unit="IN">3.989542550723894</PinX>
						<PinY Unit="IN">6.425352314007329</PinY>
					</XForm>
				</Shape>
				<Shape ID="24" UniqueID="{48A3D6BC-D08F-40DA-A112-23B5EC2F28F3}" Name="end2_mp" NameU="end2_mp">
					<Text>1</Text>
					<XForm>
						<PinX Unit="IN">5.012486394019554</PinX>
						<PinY Unit="IN">6.425352314007329</PinY>
					</XForm>
				</Shape>
			</Shapes>
		</Page>
		<Page ID="27" Name="IVsEditorFactoryImpl" NameU="Static Structure-2">
			<Shapes>
				<Shape ID="1" UniqueID="{6FBB6DB6-489C-4C11-BCBD-5085ABC26669}" Name="Watermark Title" NameU="Watermark Title" Master="18">
					<Text>Static Structure</Text>
					<XForm>
						<PinX Unit="MM">0.000000000000000</PinX>
						<PinY Unit="MM">10.999999999999998</PinY>
					</XForm>
				</Shape>
				<Shape ID="2" UniqueID="{CE7FBED5-8BAA-4852-A2DE-90B786554AFB}" Name="Class" NameU="Class" Master="22">
					<XForm>
						<PinX Unit="MM">2.967781962570508</PinX>
						<PinY Unit="MM">5.058675226876700</PinY>
					</XForm>
				</Shape>
				<Shape ID="9" UniqueID="{3C012D7C-8208-4CE2-B253-70B25974A8D5}" Name="Name" NameU="Name">
					<Text>«implementation class»
IVsEditorFactoryImpl</Text>
					<XForm>
						<PinX Unit="MM">2.967781962570508</PinX>
						<PinY Unit="MM">5.233872077270401</PinY>
					</XForm>
				</Shape>
				<Shape ID="10" UniqueID="{2275F653-6FD5-49A0-B413-F9FB897E4F2A}" Name="Parameters" NameU="Parameters">
					<Text>Derived_T, VsSiteCache_T</Text>
					<XForm>
						<PinX Unit="MM">3.582873067535569</PinX>
						<PinY Unit="MM">5.498977496028176</PinY>
					</XForm>
				</Shape>
				<Shape ID="11" UniqueID="{39C03715-B800-479B-BA12-A134644C51BD}" Name="Class.11" NameU="Class.11" Master="22">
					<XForm>
						<PinX Unit="MM">2.965025867443161</PinX>
						<PinY Unit="MM">6.843162297777658</PinY>
					</XForm>
				</Shape>
				<Shape ID="18" UniqueID="{68F9FF15-BFAF-4601-8100-3A986A47039F}" Name="Name" NameU="Name">
					<Text>«implementation class»
VsSiteBaseImpl</Text>
					<XForm>
						<PinX Unit="MM">2.965025867443161</PinX>
						<PinY Unit="MM">7.018359148171359</PinY>
					</XForm>
				</Shape>
				<Shape ID="19" UniqueID="{B6B42636-59D1-4F05-A5C9-AB3388EC8F3C}" Name="Parameters" NameU="Parameters">
					<Text>DerivedClass_T, DirectlyDerivedClass_T, Base_T, VsSiteCache_T</Text>
					<XForm>
						<PinX Unit="MM">3.580116972408222</PinX>
						<PinY Unit="MM">7.283464566929134</PinY>
					</XForm>
				</Shape>
				<Shape ID="29" UniqueID="{6FDF7DF5-3312-4BBC-8484-7064AD19F5AD}" Name="Generalization" NameU="Generalization" Master="24">
					<XForm>
						<PinX Unit="MM">3.064144483701451</PinX>
						<PinY Unit="MM">8.070866141732283</PinY>
					</XForm>
				</Shape>
				<Shape ID="31" UniqueID="{052876B3-EB41-4934-8AD0-FBF373D6881A}" Name="Generalization.31" NameU="Generalization.31" Master="24">
					<XForm>
						<PinX Unit="MM">2.966403915006834</PinX>
						<PinY Unit="MM">5.950918762327179</PinY>
					</XForm>
				</Shape>
				<Shape ID="33" UniqueID="{60A96D05-F131-4AD3-AA8C-99B41D631A1E}" Name="Metaclass" NameU="Metaclass" Master="34">
					<Text>«metaclass»
Editor Factory</Text>
					<XForm>
						<PinX Unit="MM">2.965025867443161</PinX>
						<PinY Unit="MM">3.385826771653543</PinY>
					</XForm>
				</Shape>
				<Shape ID="42" UniqueID="{704A27E7-1996-4450-99FE-A721C5F75DFD}" Name="Generalization.42" NameU="Generalization.42" Master="24">
					<XForm>
						<PinX Unit="MM">2.966403915006834</PinX>
						<PinY Unit="MM">4.163321646684194</PinY>
					</XForm>
				</Shape>
				<Shape ID="44" UniqueID="{8DE091D1-6FE8-4F17-B7BF-77697CAE90D5}" Name="Class.44" NameU="Class.44" Master="22">
					<XForm>
						<PinX Unit="MM">5.543766024923476</PinX>
						<PinY Unit="MM">3.385826771653543</PinY>
					</XForm>
				</Shape>
				<Shape ID="51" UniqueID="{B3742C17-5D2C-4CC2-9ED9-7859E031DC39}" Name="Name" NameU="Name">
					<Text>«metaclass»
Package</Text>
					<XForm>
						<PinX Unit="MM">5.543766024923476</PinX>
						<PinY Unit="MM">3.561023622047244</PinY>
					</XForm>
				</Shape>
				<Shape ID="53" UniqueID="{D84B5043-5091-47EA-9C74-E4853CB3424A}" Name="Usage" NameU="Usage" Master="28">
					<Text>«uses»</Text>
					<XForm>
						<PinX Unit="MM">4.272964859391312</PinX>
						<PinY Unit="MM">3.385826771653543</PinY>
					</XForm>
				</Shape>
				<Shape ID="54" UniqueID="{C9518418-720F-4EF7-A158-B7F508169985}" Name="Interface" NameU="Interface" Master="29">
					<Text>«interface»
Global::IVsEditorFactory</Text>
					<XForm>
						<PinX Unit="MM">2.827981837333168</PinX>
						<PinY Unit="MM">9.093112855328203</PinY>
					</XForm>
				</Shape>
				<Shape ID="57" UniqueID="{C9831CB4-BB02-4E75-B4DB-4DD9CDAF70D4}" Name="Binding" NameU="Binding" Master="32">
					<Text>«bind»
Base_T(,,,)</Text>
					<XForm>
						<PinX Unit="MM">2.575090444833612</PinX>
						<PinY Unit="MM">8.070866141732283</PinY>
					</XForm>
				</Shape>
			</Shapes>
		</Page>
		<Page ID="26" Name="Functors and Delegates" NameU="Blah">
			<Shapes>
				<Shape ID="1" UniqueID="{B39087DD-6148-4906-87A8-6CCBDB72C8F5}" Name="Watermark Title" NameU="Watermark Title" Master="18">
					<Text>Static Structure</Text>
					<XForm>
						<PinX Unit="MM">0.000000000000000</PinX>
						<PinY Unit="MM">10.999999999999998</PinY>
					</XForm>
				</Shape>
				<Shape ID="2" UniqueID="{52CC7C75-D7E2-4309-9192-5482D0AD1E6D}" Name="Class" NameU="Class" Master="22">
					<XForm>
						<PinX Unit="MM">4.153543307086615</PinX>
						<PinY Unit="MM">6.122427135328023</PinY>
					</XForm>
				</Shape>
				<Shape ID="9" UniqueID="{6325A433-0D16-4BDE-BB40-B436C3D5FB94}" Name="Name" NameU="Name">
					<Text>Functor</Text>
					<XForm>
						<PinX Unit="MM">4.153543307086615</PinX>
						<PinY Unit="MM">6.297623985721724</PinY>
					</XForm>
				</Shape>
				<Shape ID="10" UniqueID="{CEC6CCE4-54A0-488E-9EF7-EC969B495AF8}" Name="Parameters" NameU="Parameters">
					<Text>Return_T, ParametersNNN_T...</Text>
					<XForm>
						<PinX Unit="MM">4.527559055118111</PinX>
						<PinY Unit="MM">6.496062992125983</PinY>
					</XForm>
				</Shape>
				<Shape ID="11" UniqueID="{BAA60C46-805B-4B1D-9FDB-C908248CC438}" Name="Class.11" NameU="Class.11" Master="22">
					<XForm>
						<PinX Unit="MM">2.635707621318638</PinX>
						<PinY Unit="MM">4.113793337112921</PinY>
					</XForm>
				</Shape>
				<Shape ID="18" UniqueID="{1F990333-7E8A-41A4-8F67-B1BAD89DCF69}" Name="Name" NameU="Name">
					<Text>«implementation class»
FunctionPointerFunctor</Text>
					<XForm>
						<PinX Unit="MM">2.635707621318638</PinX>
						<PinY Unit="MM">4.288990187506622</PinY>
					</XForm>
				</Shape>
				<Shape ID="19" UniqueID="{0F0F33F5-700D-4841-A0DC-5476A74DD0DB}" Name="Parameters" NameU="Parameters">
					<Text>Return_T, ParametersNNN_T...</Text>
					<XForm>
						<PinX Unit="MM">3.302911305629402</PinX>
						<PinY Unit="MM">4.554095606264397</PinY>
					</XForm>
				</Shape>
				<Shape ID="20" UniqueID="{84A0A6BA-9667-4F7A-A763-CF50F4C95BFC}" Name="Class.20" NameU="Class.20" Master="22">
					<XForm>
						<PinX Unit="MM">5.604639179882591</PinX>
						<PinY Unit="MM">4.113793337112920</PinY>
					</XForm>
				</Shape>
				<Shape ID="27" UniqueID="{A9DDD09D-9ED3-4BDD-896A-FDA8AEC141E9}" Name="Name" NameU="Name">
					<Text>«implementation class»
MemberFunctionPointerFunctor</Text>
					<XForm>
						<PinX Unit="MM">5.604639179882591</PinX>
						<PinY Unit="MM">4.288990187506621</PinY>
					</XForm>
				</Shape>
				<Shape ID="28" UniqueID="{D2882EA0-1CBF-44B8-AD86-356BC0E78C30}" Name="Parameters" NameU="Parameters">
					<Text>Return_T, ParametersNNN_T...</Text>
					<XForm>
						<PinX Unit="MM">6.484868910946284</PinX>
						<PinY Unit="MM">4.554095606264395</PinY>
					</XForm>
				</Shape>
				<Shape ID="29" UniqueID="{F4273C64-E276-48E0-9CE6-44A0417FD2EC}" Name="Class.29" NameU="Class.29" Master="22">
					<XForm>
						<PinX Unit="MM">1.751968503937008</PinX>
						<PinY Unit="MM">6.102362204724409</PinY>
					</XForm>
				</Shape>
				<Shape ID="36" UniqueID="{8315DAE3-64D3-44FA-ACDC-06972BA5E258}" Name="Name" NameU="Name">
					<Text>«implementation class»
Delegate</Text>
					<XForm>
						<PinX Unit="MM">1.751968503937008</PinX>
						<PinY Unit="MM">6.277559055118110</PinY>
					</XForm>
				</Shape>
				<Shape ID="38" UniqueID="{108DFF88-9FE4-488F-A6C6-C43B230513E6}" Name="Generalization" NameU="Generalization" Master="24">
					<XForm>
						<PinX Unit="MM">4.972595180492476</PinX>
						<PinY Unit="MM">5.151443442397229</PinY>
					</XForm>
				</Shape>
				<Shape ID="40" UniqueID="{45AF5EF8-F4F1-4DC9-8BE0-0F40A3758306}" Name="Generalization.40" NameU="Generalization.40" Master="24">
					<XForm>
						<PinX Unit="MM">3.301121527194752</PinX>
						<PinY Unit="MM">5.151443442397230</PinY>
					</XForm>
				</Shape>
				<Shape ID="42" UniqueID="{9CE41DE2-81FF-451C-89B2-535E2EDE4439}" Name="Usage" NameU="Usage" Master="28">
					<Text>«uses»</Text>
					<XForm>
						<PinX Unit="MM">3.073293583978594</PinX>
						<PinY Unit="MM">6.112394670026216</PinY>
					</XForm>
				</Shape>
			</Shapes>
		</Page>
		<Page ID="28" Name="DocumentPersistanceBase" NameU="DocumentPersistanceBase">
			<Shapes>
				<Shape ID="1" UniqueID="{B61F2CE8-C666-4AEB-9211-1EC171866B38}" Name="Watermark Title" NameU="Watermark Title" Master="18">
					<Text>Static Structure</Text>
					<XForm>
						<PinX Unit="MM">0.000000000000000</PinX>
						<PinY Unit="MM">10.999999999999998</PinY>
					</XForm>
				</Shape>
				<Shape ID="2" UniqueID="{573BA7D5-8988-4490-A8DB-B9BAC564B571}" Name="Class" NameU="Class" Master="22">
					<XForm>
						<PinX Unit="MM">4.097373908718290</PinX>
						<PinY Unit="MM">7.157871396640299</PinY>
					</XForm>
				</Shape>
				<Shape ID="9" UniqueID="{FA80B355-564B-476A-B9B0-1512A6A6FDA4}" Name="Name" NameU="Name">
					<Text>«implementation class»
DocumentPersistanceBase</Text>
					<XForm>
						<PinX Unit="MM">4.097373908718290</PinX>
						<PinY Unit="MM">7.333068247034000</PinY>
					</XForm>
				</Shape>
				<Shape ID="10" UniqueID="{1E9A9632-F6E0-4A87-B786-CE1EF56CD83A}" Name="Parameters" NameU="Parameters">
					<Text>Derived_T, File_T, VsSiteCache_T</Text>
					<XForm>
						<PinX Unit="MM">4.848291124523195</PinX>
						<PinY Unit="MM">7.598173665791776</PinY>
					</XForm>
				</Shape>
				<Shape ID="11" UniqueID="{2C230C90-7F0D-41E4-8F73-B5BE9FA728E6}" Name="Interface" NameU="Interface" Master="23">
					<Text>IVsPersistDocData</Text>
					<XForm>
						<PinX Unit="MM">3.202706692913386</PinX>
						<PinY Unit="MM">7.378022531216038</PinY>
					</XForm>
				</Shape>
				<Shape ID="12" UniqueID="{62C09698-404E-40CE-9F1A-991FF8B923CC}" Name="Interface.12" NameU="Interface.12" Master="23">
					<Text>IVsFileChangeEvents</Text>
					<XForm>
						<PinX Unit="MM">3.202706692913386</PinX>
						<PinY Unit="MM">7.157871396640299</PinY>
					</XForm>
				</Shape>
				<Shape ID="13" UniqueID="{AA52C7EF-221C-4FE9-997B-93CD447566C4}" Name="Interface.13" NameU="Interface.13" Master="23">
					<Text>IVsDocDataFileChangeControl</Text>
					<XForm>
						<PinX Unit="MM">3.202706692913386</PinX>
						<PinY Unit="MM">6.937720262064562</PinY>
					</XForm>
				</Shape>
				<Shape ID="14" UniqueID="{6735AF19-FB5C-4710-8805-60936196D2C8}" Name="Interface.14" NameU="Interface.14" Master="23">
					<Text>IPersistFileFormat</Text>
					<XForm>
						<PinX Unit="MM">4.992041124523194</PinX>
						<PinY Unit="MM">7.378022531216038</PinY>
					</XForm>
				</Shape>
				<Shape ID="15" UniqueID="{4C195C9A-F0D3-416D-A8BE-C7FDC4736371}" Name="Interface.15" NameU="Interface.15" Master="23">
					<Text>IVsFileBackup</Text>
					<XForm>
						<PinX Unit="MM">4.992041124523194</PinX>
						<PinY Unit="MM">7.157871396640299</PinY>
					</XForm>
				</Shape>
				<Shape ID="16" UniqueID="{0170E3A9-C08D-4457-8147-033B03DC7BDF}" Name="Metaclass" NameU="Metaclass" Master="34">
					<Text>«metaclass»
Document</Text>
					<XForm>
						<PinX Unit="MM">4.094488188976378</PinX>
						<PinY Unit="MM">5.243703406509305</PinY>
					</XForm>
				</Shape>
				<Shape ID="25" UniqueID="{F4FFE83C-AB2F-46F8-A7ED-B4AC06C49852}" Name="Generalization" NameU="Generalization" Master="24">
					<XForm>
						<PinX Unit="MM">4.095931048847334</PinX>
						<PinY Unit="MM">6.141858048993875</PinY>
					</XForm>
				</Shape>
			</Shapes>
		</Page>
		<Page ID="35" Name="IVsUIHierarchyImpl" NameU="Hierarchies">
			<Shapes>
				<Shape ID="1" UniqueID="{881D84BD-18CC-49FD-A482-A0551AA21957}" Name="Watermark Title" NameU="Watermark Title" Master="18">
					<Text>Static Structure</Text>
					<XForm>
						<PinX Unit="MM">0.000000000000000</PinX>
						<PinY Unit="MM">10.999999999999998</PinY>
					</XForm>
				</Shape>
				<Shape ID="2" UniqueID="{4045D0EA-2B4A-426B-A773-26DEC78487E8}" Name="Class" NameU="Class" Master="22">
					<XForm>
						<PinX Unit="MM">3.732993950813325</PinX>
						<PinY Unit="MM">3.916942943412133</PinY>
					</XForm>
				</Shape>
				<Shape ID="9" UniqueID="{BC5C8478-6C0E-4788-9B3E-27673176F613}" Name="Name" NameU="Name">
					<Text>IVsUIHierarchyImpl</Text>
					<XForm>
						<PinX Unit="MM">3.732993950813325</PinX>
						<PinY Unit="MM">4.092139793805834</PinY>
					</XForm>
				</Shape>
				<Shape ID="10" UniqueID="{0082F59B-E105-4222-BEE7-9BB0D4B5316A}" Name="Parameters" NameU="Parameters">
					<Text>DerivedClass_T, HierarchyRootItem_T, Base_T</Text>
					<XForm>
						<PinX Unit="MM">4.277011523673894</PinX>
						<PinY Unit="MM">4.290578800210094</PinY>
					</XForm>
				</Shape>
				<Shape ID="11" UniqueID="{B05F1DD3-774C-4F8C-9B6E-2630C56817E5}" Name="Class.11" NameU="Class.11" Master="22">
					<XForm>
						<PinX Unit="MM">3.741851705662439</PinX>
						<PinY Unit="MM">5.845317019212777</PinY>
					</XForm>
				</Shape>
				<Shape ID="18" UniqueID="{98D04F76-6F1E-432A-8915-18D9DB1EA3B8}" Name="Name" NameU="Name">
					<Text>IVsHierarchyImpl</Text>
					<XForm>
						<PinX Unit="MM">3.741851705662439</PinX>
						<PinY Unit="MM">6.020513869606478</PinY>
					</XForm>
				</Shape>
				<Shape ID="19" UniqueID="{CB4CC714-A40F-4F61-BB3C-7A53EC1AC0B6}" Name="Parameters" NameU="Parameters">
					<Text>DerivedClass_T, HierarchyRootItem_T, Base_T, VsSiteCache_T</Text>
					<XForm>
						<PinX Unit="MM">4.230313934895078</PinX>
						<PinY Unit="MM">6.218952876010738</PinY>
					</XForm>
				</Shape>
				<Shape ID="20" UniqueID="{C3B33BF9-40DA-441B-ABB5-6006BBF5D3DB}" Name="Class.20" NameU="Class.20" Master="22">
					<XForm>
						<PinX Unit="MM">3.745515460681767</PinX>
						<PinY Unit="MM">7.479555178162849</PinY>
					</XForm>
				</Shape>
				<Shape ID="27" UniqueID="{AD19A4B0-1C57-42FB-A357-1074976D4C4A}" Name="Name" NameU="Name">
					<Text>VsSiteBaseImpl</Text>
					<XForm>
						<PinX Unit="MM">3.745515460681767</PinX>
						<PinY Unit="MM">7.654752028556550</PinY>
					</XForm>
				</Shape>
				<Shape ID="28" UniqueID="{E0C38F37-B724-4B3D-B421-0DBA9678B6C6}" Name="Parameters" NameU="Parameters">
					<Text>DerivedClass_T, DirectlyDerivedClass_T, Base_T, VsSiteCache_T</Text>
					<XForm>
						<PinX Unit="MM">4.196923628024758</PinX>
						<PinY Unit="MM">7.853191034960810</PinY>
					</XForm>
				</Shape>
				<Shape ID="29" UniqueID="{E0F72543-D660-42C1-B078-4109D3E6E90D}" Name="Generalization" NameU="Generalization" Master="24">
					<XForm>
						<PinX Unit="MM">3.743683583172103</PinX>
						<PinY Unit="MM">6.662436098687813</PinY>
					</XForm>
				</Shape>
				<Shape ID="31" UniqueID="{FF0E976E-0B31-496F-9E38-4E86E577A4E1}" Name="Generalization.31" NameU="Generalization.31" Master="24">
					<XForm>
						<PinX Unit="MM">3.737422828237882</PinX>
						<PinY Unit="MM">4.881129981312455</PinY>
					</XForm>
				</Shape>
				<Shape ID="34" UniqueID="{12665A0B-65FA-410E-8AA1-7CD50538C49D}" Name="Interface" NameU="Interface" Master="29">
					<Text>«interface»
Global::IVsUIHiearchy</Text>
					<XForm>
						<PinX Unit="MM">3.749259324343675</PinX>
						<PinY Unit="MM">9.249833387821763</PinY>
					</XForm>
				</Shape>
				<Shape ID="33" UniqueID="{DE799631-EABC-4428-9588-3A77364479E8}" Name="Generalization.33" NameU="Generalization.33" Master="24">
					<XForm>
						<PinX Unit="MM">3.747387392512721</PinX>
						<PinY Unit="MM">8.434089641994902</PinY>
					</XForm>
				</Shape>
				<Shape ID="38" UniqueID="{DA4CA834-38B5-4E89-9AFF-370FC72FA751}" Name="Class.38" NameU="Class.38" Master="22">
					<XForm>
						<PinX Unit="MM">3.740157480314961</PinX>
						<PinY Unit="MM">2.165354330708662</PinY>
					</XForm>
				</Shape>
				<Shape ID="45" UniqueID="{FD989CE1-2D1A-4C16-ADD5-0C0999F1202E}" Name="Name" NameU="Name">
					<Text>UI Hierarchy Provider</Text>
					<XForm>
						<PinX Unit="MM">3.740157480314961</PinX>
						<PinY Unit="MM">2.340551181102363</PinY>
					</XForm>
				</Shape>
				<Shape ID="47" UniqueID="{EAA8067F-5673-45EC-9CD9-69B8963F45FB}" Name="Generalization.47" NameU="Generalization.47" Master="24">
					<XForm>
						<PinX Unit="MM">3.736575715564143</PinX>
						<PinY Unit="MM">2.992125984251969</PinY>
					</XForm>
				</Shape>
			</Shapes>
		</Page>
		<Page ID="36" Name="IVsHierarchyImpl" NameU="IVsHierarchyImpl">
			<Shapes>
				<Shape ID="1" UniqueID="{2529D663-315A-4FEA-8A1E-22823C16CD8E}" Name="Watermark Title" NameU="Watermark Title" Master="18">
					<Text>Static Structure</Text>
					<XForm>
						<PinX Unit="MM">0.000000000000000</PinX>
						<PinY Unit="MM">10.999999999999998</PinY>
					</XForm>
				</Shape>
				<Shape ID="2" UniqueID="{61840995-34B9-40AD-8E7A-012E03992BEB}" Name="Watermark Title.2" NameU="Watermark Title.2" Master="18">
					<Text>Static Structure</Text>
					<XForm>
						<PinX Unit="MM">0.000000000000000</PinX>
						<PinY Unit="MM">10.999999999999998</PinY>
					</XForm>
				</Shape>
				<Shape ID="3" UniqueID="{C0F0F858-26E1-40B5-B324-5F6F303D4EAB}" Name="Watermark Title.3" NameU="Watermark Title.3" Master="18">
					<Text>Static Structure</Text>
					<XForm>
						<PinX Unit="MM">0.000000000000000</PinX>
						<PinY Unit="MM">10.999999999999998</PinY>
					</XForm>
				</Shape>
				<Shape ID="4" UniqueID="{1F5885E1-D546-4908-82F6-9A4DF5225B9F}" Name="Class" NameU="Class" Master="22">
					<XForm>
						<PinX Unit="MM">4.153543307086615</PinX>
						<PinY Unit="MM">4.133858267716536</PinY>
					</XForm>
				</Shape>
				<Shape ID="11" UniqueID="{C90C646E-2BC3-447D-9A12-A0042834D1BF}" Name="Name" NameU="Name">
					<Text>IVsHierarchyImpl</Text>
					<XForm>
						<PinX Unit="MM">4.153543307086615</PinX>
						<PinY Unit="MM">4.309055118110237</PinY>
					</XForm>
				</Shape>
				<Shape ID="12" UniqueID="{49E2D50C-15B2-4500-9F12-175C9627447C}" Name="Parameters" NameU="Parameters">
					<Text>DerivedClass_T, HierarchyRootItem_T, Base_T, VsSiteCache_T</Text>
					<XForm>
						<PinX Unit="MM">4.642005536319254</PinX>
						<PinY Unit="MM">4.507494124514496</PinY>
					</XForm>
				</Shape>
				<Shape ID="13" UniqueID="{F46FDFD3-CDF2-4E6E-B836-84A2401F6945}" Name="Class.13" NameU="Class.13" Master="22">
					<XForm>
						<PinX Unit="MM">4.133858267716535</PinX>
						<PinY Unit="MM">6.141732283464568</PinY>
					</XForm>
				</Shape>
				<Shape ID="20" UniqueID="{D39D3BF7-F929-495A-B93B-78C5A976D5C2}" Name="Name" NameU="Name">
					<Text>«implementation class»
VsSiteBaseImpl</Text>
					<XForm>
						<PinX Unit="MM">4.133858267716535</PinX>
						<PinY Unit="MM">6.316929133858268</PinY>
					</XForm>
				</Shape>
				<Shape ID="21" UniqueID="{E6234877-E758-4AC7-895A-DB592F372E02}" Name="Parameters" NameU="Parameters">
					<Text>DerivedClass_T, DirectlyDerivedClass_T, Base_T, VsSiteCache_T</Text>
					<XForm>
						<PinX Unit="MM">4.748949372681596</PinX>
						<PinY Unit="MM">6.582034552616043</PinY>
					</XForm>
				</Shape>
				<Shape ID="22" UniqueID="{68FDDBC0-69BF-4BC1-A87F-1048E68EDF02}" Name="Generalization" NameU="Generalization" Master="24">
					<XForm>
						<PinX Unit="MM">4.143700787401575</PinX>
						<PinY Unit="MM">5.104462069413794</PinY>
					</XForm>
				</Shape>
				<Shape ID="25" UniqueID="{1B7E4DE1-1669-443C-AA2D-28F1756385F7}" Name="Interface" NameU="Interface" Master="29">
					<Text>«interface»
Global::IVsHierarchy</Text>
					<XForm>
						<PinX Unit="MM">4.133858267716535</PinX>
						<PinY Unit="MM">8.237204724409450</PinY>
					</XForm>
				</Shape>
				<Shape ID="24" UniqueID="{BF9F2081-48A6-47FB-ACAA-A0F116E6367F}" Name="Generalization.24" NameU="Generalization.24" Master="24">
					<XForm>
						<PinX Unit="MM">4.133858267716535</PinX>
						<PinY Unit="MM">7.292197069116361</PinY>
					</XForm>
				</Shape>
				<Shape ID="38" UniqueID="{A495AEDA-27B2-40D0-9A70-32486DAA943C}" Name="Generalization.38" NameU="Generalization.38" Master="24">
					<XForm>
						<PinX Unit="MM">4.143700787401575</PinX>
						<PinY Unit="MM">3.179323803884485</PinY>
					</XForm>
				</Shape>
				<Shape ID="29" UniqueID="{D8AF05A4-D3FC-4C44-AC9A-BC619AE7AF5B}" Name="Metaclass" NameU="Metaclass" Master="34">
					<Text>«metaclass»
Hidden Hiearchy Provider</Text>
					<XForm>
						<PinX Unit="MM">4.133858267716535</PinX>
						<PinY Unit="MM">2.275981632860773</PinY>
					</XForm>
				</Shape>
				<Shape ID="40" UniqueID="{95CACC63-821E-4B35-AA52-6CEAD8187597}" Name="Class.40" NameU="Class.40" Master="22">
					<XForm>
						<PinX Unit="MM">1.575424350910789</PinX>
						<PinY Unit="MM">4.133858267716536</PinY>
					</XForm>
				</Shape>
				<Shape ID="47" UniqueID="{9A709495-F2D4-4857-8BD8-3145050D12FE}" Name="Name" NameU="Name">
					<Text>IVsHierarchyEventsDelegate</Text>
					<XForm>
						<PinX Unit="MM">1.575424350910789</PinX>
						<PinY Unit="MM">4.309055118110237</PinY>
					</XForm>
				</Shape>
				<Shape ID="49" UniqueID="{565315FD-25D0-47FD-ABE3-57D7FC0446D0}" Name="Binary Association" NameU="Binary Association" Master="30">
					<XForm>
						<PinX Unit="MM">3.014264102436202</PinX>
						<PinY Unit="MM">4.133858267716536</PinY>
					</XForm>
				</Shape>
				<Shape ID="51" UniqueID="{18D60E51-1BE0-4654-B1B2-F64782238249}" Name="end1_mp" NameU="end1_mp">
					<Text>1</Text>
					<XForm>
						<PinX Unit="IN">2.473206823662149</PinX>
						<PinY Unit="IN">4.063147589597882</PinY>
					</XForm>
				</Shape>
				<Shape ID="53" UniqueID="{27BADBD1-A404-49B5-8BC0-BAD1A48B3A59}" Name="end2_mp" NameU="end2_mp">
					<Text>1</Text>
					<XForm>
						<PinX Unit="IN">3.555321381210255</PinX>
						<PinY Unit="IN">4.063147589597882</PinY>
					</XForm>
				</Shape>
				<Shape ID="54" UniqueID="{FDB40FCC-8CEE-440C-AF74-F67CC71E52E6}" Name="Interface .54" NameU="Interface .54" Master="29">
					<Text>«interface»
IVsHierarchyEvents</Text>
					<XForm>
						<PinX Unit="MM">1.574803149606299</PinX>
						<PinY Unit="MM">6.141732283464567</PinY>
					</XForm>
				</Shape>
				<Shape ID="57" UniqueID="{498CD8D9-AEDA-41BD-A174-EBA544720504}" Name="Generalization.57" NameU="Generalization.57" Master="24">
					<XForm>
						<PinX Unit="MM">1.575113750258544</PinX>
						<PinY Unit="MM">5.158167981784718</PinY>
					</XForm>
				</Shape>
			</Shapes>
		</Page>
		<Page ID="39" Name="HierarchyItem C++ Interfaces" NameU="HierarchyItem Classes">
			<Shapes>
				<Shape ID="1" UniqueID="{5414C230-8105-4550-AE36-715DC579E13C}" Name="Watermark Title" NameU="Watermark Title" Master="18">
					<Text>Static Structure</Text>
					<XForm>
						<PinX Unit="MM">0.000000000000000</PinX>
						<PinY Unit="MM">10.999999999999998</PinY>
					</XForm>
				</Shape>
				<Shape ID="2" UniqueID="{3E22EF87-9B97-4213-98D0-EB78D4B1928E}" Name="Class" NameU="Class" Master="22">
					<XForm>
						<PinX Unit="MM">1.887983723491606</PinX>
						<PinY Unit="MM">8.700027619107733</PinY>
					</XForm>
				</Shape>
				<Shape ID="9" UniqueID="{6FC5E50E-B401-488F-A631-32127B16B0E2}" Name="Name" NameU="Name">
					<Text>IVsHierarchyItem</Text>
					<XForm>
						<PinX Unit="MM">1.887983723491606</PinX>
						<PinY Unit="MM">8.875224469501434</PinY>
					</XForm>
				</Shape>
				<Shape ID="11" UniqueID="{D6FF6E8D-BEC7-4241-B6D2-2B618569310C}" Name="Class.11" NameU="Class.11" Master="22">
					<XForm>
						<PinX Unit="MM">1.896898698799703</PinX>
						<PinY Unit="MM">6.161037431601111</PinY>
					</XForm>
				</Shape>
				<Shape ID="18" UniqueID="{E4589345-DBC0-4771-908B-451C13F347EE}" Name="Name" NameU="Name">
					<Text>IVsUIHierarchyItem</Text>
					<XForm>
						<PinX Unit="MM">1.896898698799703</PinX>
						<PinY Unit="MM">6.336234281994811</PinY>
					</XForm>
				</Shape>
				<Shape ID="20" UniqueID="{91E2BB02-A9D5-4021-83CB-9890CFA13DC9}" Name="Class.20" NameU="Class.20" Master="22">
					<XForm>
						<PinX Unit="MM">5.693724450921940</PinX>
						<PinY Unit="MM">8.700027619107734</PinY>
					</XForm>
				</Shape>
				<Shape ID="27" UniqueID="{E5025038-4BBD-408A-8DB8-E7449620BC0F}" Name="Name" NameU="Name">
					<Text>IVsHierarchyRootItem</Text>
					<XForm>
						<PinX Unit="MM">5.693724450921940</PinX>
						<PinY Unit="MM">8.875224469501434</PinY>
					</XForm>
				</Shape>
				<Shape ID="28" UniqueID="{72512D44-AF17-491D-8FB4-A10176ECCAD0}" Name="Parameters" NameU="Parameters">
					<Text>ItemInterface_T</Text>
					<XForm>
						<PinX Unit="MM">6.308708744363563</PinX>
						<PinY Unit="MM">9.073663475905693</PinY>
					</XForm>
				</Shape>
				<Shape ID="29" UniqueID="{CD993268-91BF-4DB5-BDB1-DE738D5D605A}" Name="Class.29" NameU="Class.29" Master="22">
					<XForm>
						<PinX Unit="MM">5.708661417322836</PinX>
						<PinY Unit="MM">6.102362204724409</PinY>
					</XForm>
				</Shape>
				<Shape ID="36" UniqueID="{94D50FB3-1587-4D66-83C3-65591AB5384C}" Name="Name" NameU="Name">
					<Text>IVsUIHierarchyRootItem</Text>
					<XForm>
						<PinX Unit="MM">5.708661417322836</PinX>
						<PinY Unit="MM">6.277559055118110</PinY>
					</XForm>
				</Shape>
				<Shape ID="37" UniqueID="{BD740677-20EE-4C79-8579-681CB9EB6DDE}" Name="Parameters" NameU="Parameters">
					<Text>ItemInterface_T</Text>
					<XForm>
						<PinX Unit="MM">6.379201054392389</PinX>
						<PinY Unit="MM">6.475998061522370</PinY>
					</XForm>
				</Shape>
				<Shape ID="38" UniqueID="{E709BB50-13BB-487E-9EEB-E81D124E2724}" Name="Binding" NameU="Binding" Master="32">
					<Text>«bind»
ItemInterface_T default</Text>
					<XForm>
						<PinX Unit="MM">3.727607360217027</PinX>
						<PinY Unit="MM">8.700027619107733</PinY>
					</XForm>
				</Shape>
				<Shape ID="39" UniqueID="{3F1A7E81-317D-45B8-90DF-6EF9ED6816B6}" Name="Binding.39" NameU="Binding.39" Master="32">
					<Text>«bind»
ItemInterface_T default()</Text>
					<XForm>
						<PinX Unit="MM">5.533558024854999</PinX>
						<PinY Unit="MM">7.401194911916072</PinY>
					</XForm>
				</Shape>
				<Shape ID="40" UniqueID="{C5F082E5-8D4C-4DFF-964C-3DEA34A0804D}" Name="Generalization" NameU="Generalization" Master="24">
					<XForm>
						<PinX Unit="MM">6.343954899377976</PinX>
						<PinY Unit="MM">7.307785947716582</PinY>
					</XForm>
				</Shape>
				<Shape ID="42" UniqueID="{9851241D-DF9F-4F39-A99F-E0D0828883D3}" Name="Usage" NameU="Usage" Master="28">
					<Text>«uses»
Specializes IVsHierarchyRootItem</Text>
					<XForm>
						<PinX Unit="MM">4.067334666405852</PinX>
						<PinY Unit="MM">6.701032958725122</PinY>
					</XForm>
				</Shape>
				<Shape ID="43" UniqueID="{A0864AD2-1DA6-48A1-AF0A-1D00BA1A038E}" Name="Generalization.43" NameU="Generalization.43" Master="24">
					<XForm>
						<PinX Unit="MM">1.892441211145655</PinX>
						<PinY Unit="MM">7.430532525354422</PinY>
					</XForm>
				</Shape>
			</Shapes>
		</Page>
		<Page ID="40" Name="HierarchyItem Classess" NameU="HierarchyItem Classess">
			<Shapes>
				<Shape ID="1" UniqueID="{C1161251-5F83-45CE-867B-E73F37D28A6C}" Name="Watermark Title" NameU="Watermark Title" Master="18">
					<Text>Static Structure</Text>
					<XForm>
						<PinX Unit="MM">0.000000000000000</PinX>
						<PinY Unit="MM">10.999999999999998</PinY>
					</XForm>
				</Shape>
				<Shape ID="2" UniqueID="{ED5D644B-8E84-4EF4-BE6C-BABE3BC4E434}" Name="Class" NameU="Class" Master="22">
					<XForm>
						<PinX Unit="MM">2.594113645013824</PinX>
						<PinY Unit="MM">8.188976377952757</PinY>
					</XForm>
				</Shape>
				<Shape ID="9" UniqueID="{0FEDF18F-F390-4EA4-B679-C75205A0028E}" Name="Name" NameU="Name">
					<Text>VsHierarchyItemBase</Text>
					<XForm>
						<PinX Unit="MM">2.594113645013824</PinX>
						<PinY Unit="MM">8.364173228346459</PinY>
					</XForm>
				</Shape>
				<Shape ID="10" UniqueID="{99DFABC6-7C49-4567-8513-3CA1082CBEE6}" Name="Parameters" NameU="Parameters">
					<Text>Base_T, HierarchyNode_T</Text>
					<XForm>
						<PinX Unit="MM">3.199982719339237</PinX>
						<PinY Unit="MM">8.562612234750718</PinY>
					</XForm>
				</Shape>
				<Shape ID="11" UniqueID="{7E73E29B-EE92-42D7-8EB6-A5269863A43C}" Name="Class.11" NameU="Class.11" Master="22">
					<XForm>
						<PinX Unit="MM">7.025037278521229</PinX>
						<PinY Unit="MM">8.247651604829459</PinY>
					</XForm>
				</Shape>
				<Shape ID="18" UniqueID="{EF67A62C-99CF-4612-85AE-592ECC25934C}" Name="Name" NameU="Name">
					<Text>IVsHierarchyItem</Text>
					<XForm>
						<PinX Unit="MM">7.025037278521229</PinX>
						<PinY Unit="MM">8.422848455223159</PinY>
					</XForm>
				</Shape>
				<Shape ID="20" UniqueID="{F9C317D2-2F09-4D3C-9D48-7999006024FC}" Name="Generalization" NameU="Generalization" Master="24">
					<XForm>
						<PinX Unit="MM">4.868264579199167</PinX>
						<PinY Unit="MM">8.380620593385874</PinY>
					</XForm>
				</Shape>
				<Shape ID="22" UniqueID="{0C45926D-4F20-43BA-8F2A-A32C21D7FFBB}" Name="Binding" NameU="Binding" Master="32">
					<Text>«bind»
Base_T default</Text>
					<XForm>
						<PinX Unit="MM">4.838920020483347</PinX>
						<PinY Unit="MM">7.893700787401577</PinY>
					</XForm>
				</Shape>
				<Shape ID="23" UniqueID="{BF7E1137-22BD-41D8-B6F9-86A00929FBCE}" Name="Class.23" NameU="Class.23" Master="22">
					<XForm>
						<PinX Unit="MM">2.592268275463675</PinX>
						<PinY Unit="MM">10.019305148136544</PinY>
					</XForm>
				</Shape>
				<Shape ID="30" UniqueID="{0669C5A4-3FB4-4524-9187-441CADB0DA61}" Name="Name" NameU="Name">
					<Text>HierarchyNode</Text>
					<XForm>
						<PinX Unit="MM">2.592268275463675</PinX>
						<PinY Unit="MM">10.194501998530244</PinY>
					</XForm>
				</Shape>
				<Shape ID="31" UniqueID="{02CBDC9F-D8C6-4FAA-9C72-E31AE9B3A156}" Name="Parameters" NameU="Parameters">
					<Text>Traits_T</Text>
					<XForm>
						<PinX Unit="MM">3.022031850521509</PinX>
						<PinY Unit="MM">10.392941004934503</PinY>
					</XForm>
				</Shape>
				<Shape ID="32" UniqueID="{40868EC4-70FA-4C7D-8F6D-9A87EF8DDA23}" Name="Binding.32" NameU="Binding.32" Master="32">
					<Text>«bind»
HierarchyNode_T default()</Text>
					<XForm>
						<PinX Unit="MM">2.593190960238749</PinX>
						<PinY Unit="MM">9.104140763044651</PinY>
					</XForm>
				</Shape>
				<Shape ID="33" UniqueID="{3199AE1C-C90B-4301-821A-2F386B58F5DB}" Name="Binary Association" NameU="Binary Association" Master="30">
					<XForm>
						<PinX Unit="MM">2.226841904128479</PinX>
						<PinY Unit="MM">9.197549727244141</PinY>
					</XForm>
				</Shape>
				<Shape ID="35" UniqueID="{9B5A5565-DC1F-41AC-ADE3-36AB448CD0C3}" Name="end1_mp" NameU="end1_mp">
					<Text>1</Text>
					<XForm>
						<PinX Unit="IN">2.009481622734227</PinX>
						<PinY Unit="IN">9.903197897856218</PinY>
					</XForm>
				</Shape>
				<Shape ID="37" UniqueID="{EEE3B12A-1C1C-41C8-AA97-D612A168AFB8}" Name="end2_mp" NameU="end2_mp">
					<Text>1</Text>
					<XForm>
						<PinX Unit="IN">2.220468429732463</PinX>
						<PinY Unit="IN">8.715635312422334</PinY>
					</XForm>
				</Shape>
				<Shape ID="38" UniqueID="{75AD8E80-4EDD-49F5-ADAB-A774E8950CBC}" Name="Binary Association.38" NameU="Binary Association.38" Master="30">
					<XForm>
						<PinX Unit="MM">4.901411854655835</PinX>
						<PinY Unit="MM">9.177864687874063</PinY>
					</XForm>
				</Shape>
				<Shape ID="40" UniqueID="{B4E9B2EB-842C-4697-A5EF-0D0B124D102A}" Name="end1_mp" NameU="end1_mp">
					<Text>1</Text>
					<XForm>
						<PinX Unit="IN">3.244782680800031</PinX>
						<PinY Unit="IN">9.761776541618911</PinY>
					</XForm>
				</Shape>
				<Shape ID="42" UniqueID="{7B3F0474-D307-4A33-980F-0F68486FBC1E}" Name="end2_mp" NameU="end2_mp">
					<Text>1</Text>
					<XForm>
						<PinX Unit="IN">6.710081180671508</PinX>
						<PinY Unit="IN">8.745992986289089</PinY>
					</XForm>
				</Shape>
				<Shape ID="43" UniqueID="{A7B3DA19-E5F5-464C-9620-107BB6E430E1}" Name="Class.43" NameU="Class.43" Master="22">
					<XForm>
						<PinX Unit="MM">2.629928354961217</PinX>
						<PinY Unit="MM">5.728726347926449</PinY>
					</XForm>
				</Shape>
				<Shape ID="50" UniqueID="{76C08E73-B10F-40BE-93DE-FCDF9AE8BE75}" Name="Name" NameU="Name">
					<Text>VsUIHierarchyItemBase</Text>
					<XForm>
						<PinX Unit="MM">2.629928354961217</PinX>
						<PinY Unit="MM">5.903923198320150</PinY>
					</XForm>
				</Shape>
				<Shape ID="51" UniqueID="{4FF4D3DF-2EAD-43A8-94EE-4C8D9B0C4C43}" Name="Parameters" NameU="Parameters">
					<Text>Base_T</Text>
					<XForm>
						<PinX Unit="MM">3.291352772914559</PinX>
						<PinY Unit="MM">6.102362204724409</PinY>
					</XForm>
				</Shape>
				<Shape ID="52" UniqueID="{D311916E-00EC-49A8-83D6-4BECBFD44037}" Name="Class.52" NameU="Class.52" Master="22">
					<XForm>
						<PinX Unit="MM">7.008852013633458</PinX>
						<PinY Unit="MM">5.826771653543307</PinY>
					</XForm>
				</Shape>
				<Shape ID="59" UniqueID="{D89D01DC-6B13-4C0E-97FE-6CFC22326EDB}" Name="Name" NameU="Name">
					<Text>IVsUIHierarchyItem</Text>
					<XForm>
						<PinX Unit="MM">7.008852013633458</PinX>
						<PinY Unit="MM">6.001968503937007</PinY>
					</XForm>
				</Shape>
				<Shape ID="61" UniqueID="{9BB6F03C-15D2-4AFE-ABB0-6A529CEC2F0D}" Name="Generalization.61" NameU="Generalization.61" Master="24">
					<XForm>
						<PinX Unit="MM">7.016944646077343</PinX>
						<PinY Unit="MM">7.037211629186382</PinY>
					</XForm>
				</Shape>
				<Shape ID="63" UniqueID="{1E31DC94-4747-44BD-9E9E-86AA2E7CF349}" Name="Generalization.63" NameU="Generalization.63" Master="24">
					<XForm>
						<PinX Unit="MM">1.978374253848143</PinX>
						<PinY Unit="MM">6.958851362939603</PinY>
					</XForm>
				</Shape>
				<Shape ID="65" UniqueID="{A656B3B1-11FB-4D2A-BBBB-F021AA17DE40}" Name="Usage" NameU="Usage" Master="28">
					<Text>«uses»</Text>
					<XForm>
						<PinX Unit="MM">4.377992469197258</PinX>
						<PinY Unit="MM">6.459699886503373</PinY>
					</XForm>
				</Shape>
				<Shape ID="66" UniqueID="{24CDD871-E415-49EC-925D-F6DD923338A0}" Name="Binding.66" NameU="Binding.66" Master="32">
					<Text>«bind»
Base_T default(,)</Text>
					<XForm>
						<PinX Unit="MM">2.295197626917831</PinX>
						<PinY Unit="MM">6.958851362939603</PinY>
					</XForm>
				</Shape>
				<Shape ID="67" UniqueID="{E8659945-7CEE-4073-9549-5E68AA484D0D}" Name="Metaclass" NameU="Metaclass" Master="34">
					<Text>«metaclass»
Hidden Hierarchy Item</Text>
					<XForm>
						<PinX Unit="MM">1.968503937007874</PinX>
						<PinY Unit="MM">3.472049863202220</PinY>
					</XForm>
				</Shape>
				<Shape ID="76" UniqueID="{8C8D4857-1EC2-4DD0-B5BF-D327365A9FBB}" Name="Generalization.76" NameU="Generalization.76" Master="24">
					<XForm>
						<PinX Unit="MM">1.978374253848143</PinX>
						<PinY Unit="MM">5.991734902572299</PinY>
					</XForm>
				</Shape>
				<Shape ID="78" UniqueID="{3399E5A3-5006-469D-99A4-DB7B98AD3B7E}" Name="Metaclass.78" NameU="Metaclass.78" Master="34">
					<Text>«metaclass»
UI Hierarchy Item</Text>
					<XForm>
						<PinX Unit="MM">4.751248298486877</PinX>
						<PinY Unit="MM">3.464566929133859</PinY>
					</XForm>
				</Shape>
				<Shape ID="87" UniqueID="{C465E192-2BB6-4E8D-9297-A27DE08C5BD1}" Name="Generalization.87" NameU="Generalization.87" Master="24">
					<XForm>
						<PinX Unit="MM">3.690588326724046</PinX>
						<PinY Unit="MM">4.571050492125984</PinY>
					</XForm>
				</Shape>
			</Shapes>
		</Page>
		<Page ID="41" Name="VsHierarchyRootItemBase" NameU="Hier">
			<Shapes>
				<Shape ID="1" UniqueID="{5BF139DC-7F55-451F-91EC-6EA47402C358}" Name="Watermark Title" NameU="Watermark Title" Master="18">
					<Text>Static Structure</Text>
					<XForm>
						<PinX Unit="MM">0.000000000000000</PinX>
						<PinY Unit="MM">10.999999999999998</PinY>
					</XForm>
				</Shape>
				<Shape ID="2" UniqueID="{E5099689-4DAA-410C-8936-34CD4D2F2C44}" Name="Class" NameU="Class" Master="22">
					<XForm>
						<PinX Unit="MM">6.299212598425197</PinX>
						<PinY Unit="MM">7.736600363674482</PinY>
					</XForm>
				</Shape>
				<Shape ID="9" UniqueID="{508B2D0D-5A99-444D-8BF6-8D0AC75BA7A2}" Name="Name" NameU="Name">
					<Text>IVsHierarchyRootItem</Text>
					<XForm>
						<PinX Unit="MM">6.299212598425197</PinX>
						<PinY Unit="MM">7.911797214068183</PinY>
					</XForm>
				</Shape>
				<Shape ID="10" UniqueID="{D00D1848-2B5A-44B2-A5EE-3C2525EF31EA}" Name="Parameters" NameU="Parameters">
					<Text>ItemInterface_T</Text>
					<XForm>
						<PinX Unit="MM">6.914196891866820</PinX>
						<PinY Unit="MM">8.110236220472443</PinY>
					</XForm>
				</Shape>
				<Shape ID="11" UniqueID="{2998014E-B10D-4619-AD2F-7E97825D513B}" Name="Class.11" NameU="Class.11" Master="22">
					<XForm>
						<PinX Unit="MM">2.516945002206892</PinX>
						<PinY Unit="MM">7.726567898372672</PinY>
					</XForm>
				</Shape>
				<Shape ID="18" UniqueID="{EB6D70D5-A1AA-493E-9032-7D7205800F0A}" Name="Name" NameU="Name">
					<Text>VsHierarchyRootItemBase</Text>
					<XForm>
						<PinX Unit="MM">2.516945002206892</PinX>
						<PinY Unit="MM">7.901764748766373</PinY>
					</XForm>
				</Shape>
				<Shape ID="19" UniqueID="{D011E652-344E-44F3-A325-B9D6BE1295B5}" Name="Parameters" NameU="Parameters">
					<Text>BaseImpl_T, RootInterface_T</Text>
					<XForm>
						<PinX Unit="MM">3.249307530511796</PinX>
						<PinY Unit="MM">8.100203755170632</PinY>
					</XForm>
				</Shape>
				<Shape ID="20" UniqueID="{6B844E67-908C-4632-9DBD-CBBAD57AEC91}" Name="Class.20" NameU="Class.20" Master="22">
					<XForm>
						<PinX Unit="MM">3.385826771653544</PinX>
						<PinY Unit="MM">9.606299212598428</PinY>
					</XForm>
				</Shape>
				<Shape ID="27" UniqueID="{D381CF2E-73D7-4586-9CC4-2BB0C6854056}" Name="Name" NameU="Name">
					<Text>VsHierarchyItemBase</Text>
					<XForm>
						<PinX Unit="MM">3.385826771653544</PinX>
						<PinY Unit="MM">9.781496062992128</PinY>
					</XForm>
				</Shape>
				<Shape ID="28" UniqueID="{3E1ECD29-465C-4348-BBC2-FD6D0616C384}" Name="Parameters" NameU="Parameters">
					<Text>Base_T, HierarchyNode_T</Text>
					<XForm>
						<PinX Unit="MM">3.991695845978956</PinX>
						<PinY Unit="MM">9.979935069396387</PinY>
					</XForm>
				</Shape>
				<Shape ID="29" UniqueID="{9A61EFC0-16F3-4009-95D2-FB2FDF4D5011}" Name="Binding" NameU="Binding" Master="32">
					<Text>«bind»
BaseImpl_T default(,)</Text>
					<XForm>
						<PinX Unit="MM">2.282270085615060</PinX>
						<PinY Unit="MM">8.853251483884529</PinY>
					</XForm>
				</Shape>
				<Shape ID="30" UniqueID="{256158DA-D912-4A01-865F-AAAAD86B8610}" Name="Binding.30" NameU="Binding.30" Master="32">
					<Text>«bind»
RootInterface_T default()</Text>
					<XForm>
						<PinX Unit="MM">4.466767917747685</PinX>
						<PinY Unit="MM">7.544766202624597</PinY>
					</XForm>
				</Shape>
				<Shape ID="31" UniqueID="{B747030F-B7B8-49BE-8AB6-4F33DBBD2074}" Name="Generalization" NameU="Generalization" Master="24">
					<XForm>
						<PinX Unit="MM">4.437423359031865</PinX>
						<PinY Unit="MM">7.357948274225617</PinY>
					</XForm>
				</Shape>
				<Shape ID="33" UniqueID="{346C2E42-7ED6-4B09-A441-2742642F8CA6}" Name="Generalization.33" NameU="Generalization.33" Master="24">
					<XForm>
						<PinX Unit="MM">2.951385886930218</PinX>
						<PinY Unit="MM">8.666433555485551</PinY>
					</XForm>
				</Shape>
				<Shape ID="35" UniqueID="{6CBF6C2F-9E9D-49AF-9A30-7BED9A7BF085}" Name="Metaclass" NameU="Metaclass" Master="34">
					<Text>«metaclass»
HierarchyRoot</Text>
					<XForm>
						<PinX Unit="MM">2.519685039370079</PinX>
						<PinY Unit="MM">5.511811023622047</PinY>
					</XForm>
				</Shape>
				<Shape ID="44" UniqueID="{3683704B-0E29-42BC-A22D-144825E9C048}" Name="Generalization.44" NameU="Generalization.44" Master="24">
					<XForm>
						<PinX Unit="MM">2.518315020788486</PinX>
						<PinY Unit="MM">6.593593314593190</PinY>
					</XForm>
				</Shape>
			</Shapes>
		</Page>
	</Pages>
</VisioDocument>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\VisualStudio\VS10RTM\VisualStudioIntegration\Common\Source\CPP\VSL\VSLArchitecture_files\filelist.xml ===
<xml xmlns:o="urn:schemas-microsoft-com:office:office">
 <o:File HRef="arrow.gif"/>
 <o:File HRef="minimize.gif"/>
 <o:File HRef="maximize.gif"/>
 <o:File HRef="go.gif"/>
 <o:File HRef="fullpage.gif"/>
 <o:File HRef="plus.gif"/>
 <o:File HRef="minus.gif"/>
 <o:File HRef="panminus.gif"/>
 <o:File HRef="panplus.gif"/>
 <o:File HRef="tick-foc.gif"/>
 <o:File HRef="tick-off.gif"/>
 <o:File HRef="tick-on.gif"/>
 <o:File HRef="toc.gif"/>
 <o:File HRef="toc2.gif"/>
 <o:File HRef="data.xml"/>
 <o:File HRef="frameset.js"/>
 <o:File HRef="keys.js"/>
 <o:File HRef="visio.css"/>
 <o:File HRef="vml_1.emz"/>
 <o:File HRef="gif_1.gif"/>
 <o:File HRef="vml_1.js"/>
 <o:File HRef="vml_1.htm"/>
 <o:File HRef="gif_1.js"/>
 <o:File HRef="gif_1.htm"/>
 <o:File HRef="vml_2.emz"/>
 <o:File HRef="gif_2.gif"/>
 <o:File HRef="vml_2.htm"/>
 <o:File HRef="gif_2.htm"/>
 <o:File HRef="vml_3.emz"/>
 <o:File HRef="gif_3.gif"/>
 <o:File HRef="vml_3.htm"/>
 <o:File HRef="gif_3.htm"/>
 <o:File HRef="vml_4.emz"/>
 <o:File HRef="gif_4.gif"/>
 <o:File HRef="vml_4.htm"/>
 <o:File HRef="gif_4.htm"/>
 <o:File HRef="vml_5.emz"/>
 <o:File HRef="gif_5.gif"/>
 <o:File HRef="vml_5.htm"/>
 <o:File HRef="gif_5.htm"/>
 <o:File HRef="vml_6.emz"/>
 <o:File HRef="gif_6.gif"/>
 <o:File HRef="vml_6.htm"/>
 <o:File HRef="gif_6.htm"/>
 <o:File HRef="vml_7.emz"/>
 <o:File HRef="gif_7.gif"/>
 <o:File HRef="vml_7.htm"/>
 <o:File HRef="gif_7.htm"/>
 <o:File HRef="vml_8.emz"/>
 <o:File HRef="gif_8.gif"/>
 <o:File HRef="vml_8.htm"/>
 <o:File HRef="gif_8.htm"/>
 <o:File HRef="vml_9.emz"/>
 <o:File HRef="gif_9.gif"/>
 <o:File HRef="vml_9.htm"/>
 <o:File HRef="gif_9.htm"/>
 <o:File HRef="vml_10.emz"/>
 <o:File HRef="gif_10.gif"/>
 <o:File HRef="vml_10.htm"/>
 <o:File HRef="gif_10.htm"/>
 <o:File HRef="vml_11.emz"/>
 <o:File HRef="gif_11.gif"/>
 <o:File HRef="vml_11.htm"/>
 <o:File HRef="gif_11.htm"/>
 <o:File HRef="vml_12.emz"/>
 <o:File HRef="gif_12.gif"/>
 <o:File HRef="vml_12.htm"/>
 <o:File HRef="gif_12.htm"/>
 <o:File HRef="vml_13.emz"/>
 <o:File HRef="gif_13.gif"/>
 <o:File HRef="vml_13.htm"/>
 <o:File HRef="gif_13.htm"/>
 <o:File HRef="vml_14.emz"/>
 <o:File HRef="gif_14.gif"/>
 <o:File HRef="vml_14.htm"/>
 <o:File HRef="gif_14.htm"/>
 <o:File HRef="vml_15.emz"/>
 <o:File HRef="gif_15.gif"/>
 <o:File HRef="vml_15.htm"/>
 <o:File HRef="gif_15.htm"/>
 <o:File HRef="vml_16.emz"/>
 <o:File HRef="gif_16.gif"/>
 <o:File HRef="vml_16.htm"/>
 <o:File HRef="gif_16.htm"/>
 <o:File HRef="vml_17.emz"/>
 <o:File HRef="gif_17.gif"/>
 <o:File HRef="vml_17.htm"/>
 <o:File HRef="gif_17.htm"/>
 <o:File HRef="vml_18.emz"/>
 <o:File HRef="gif_18.gif"/>
 <o:File HRef="vml_18.htm"/>
 <o:File HRef="gif_18.htm"/>
 <o:File HRef="vml_19.emz"/>
 <o:File HRef="gif_19.gif"/>
 <o:File HRef="vml_19.htm"/>
 <o:File HRef="gif_19.htm"/>
 <o:File HRef="zoom.htm"/>
 <o:File HRef="find.js"/>
 <o:File HRef="widgets.htm"/>
 <o:File HRef="toolbar.htm"/>
 <o:MainFile HRef="../VSLArchitecture.htm"/>
 <o:File HRef="filelist.xml"/>
</xml>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\VisualStudio\VS10RTM\VisualStudioIntegration\Common\Source\CSharp\LanguageService100\Legal Notices for MPF Library Reference Source files.txt ===
//***************************************************************************
//
//    Copyright (c) Microsoft Corporation. All rights reserved.
//    This code is licensed under the Visual Studio SDK license terms.
//    THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
//    ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
//    IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
//    PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//***************************************************************************
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\VisualStudio\VS10RTM\VisualStudioIntegration\Common\Source\CSharp\Shell\Legal Notices for MPF Library Reference Source files.txt ===
//***************************************************************************
//
//    Copyright (c) Microsoft Corporation. All rights reserved.
//    This code is licensed under the Visual Studio SDK license terms.
//    THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
//    ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
//    IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
//    PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//***************************************************************************
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\VisualStudio\VS10RTM\VisualStudioIntegration\Common\Source\CSharp\Shell\Resources.txt ===
General_MissingService=The service '{0}' must be installed for this feature to work.  Ensure that this service is available.
General_InvalidType=Expected object of type {0}.
General_UnsupportedValue=Unsupported value: {0}.
General_ExpectedNonEmptyString=Expected string that is not empty.
General_ObjectDisposed=Method called on a disposed object of type {0}.
General_ArraySizeShouldBeAtLeast1=Expecting an array of size greater than zero.

Attributes_ExtensionNeedsDot=To register the {0} file extension, you must prefix the extension with a '.'.
Attributes_InvalidFactoryType=The factoryType must be of one of those type: Type, Guid, string (representing a Guid).
Attributes_ProductNameNotSpecified=No Product Name was specified.  To register as an Installed Product, a Product Name is required.
Attributes_NoPrjForEditorFactoryNotify=No project guid provided, but it is needed to register the extension for EditorFactoryNotify.
Attributes_UnknownDockingStyle=Unknown docking style: {0}.
Attributes_UnknownPosition=Unknown relative position: {0}.

Flavor_FailedToGetService=Failed to retrieve service {0}.

Package_InvalidServiceInstance=The service instance must derive from or implement {0}.
Package_DuplicateService=The service {0} already exists in the service container.
Package_SiteAlreadySet=A site has already been set on package {0}.
Package_PageNotDialogPage=The page class {0} must derive from DialogPage.
Package_PageCtorMissing=The page type {0} does not offer an empty constructor.
Package_BadDialogPageType=The dialog page type {0} does not derive from DialogPage.
Package_PageMissingInterface=The page type {0} does not implement {1}.
Package_BadOptionName=The solution option name {0} is invalid.  It cannot contain '.', '/' or other special characters.
Package_OptionNameUsed=The solution option name {0} is already used by this package.
Package_MissingService=The package requires that service '{0}' be installed.  Ensure that this service is available.
Package_InvalidInstanceID=Instance ID {0} is invalid.
Package_InvalidToolWindowClass=CreateToolWindow only creates Tool Windows derived from ToolWindowPane.

Reg_NotifyAutoLoad=Autoload package:         {0}
Reg_NotifyPackage=Package:          {0} {1}
Reg_NotifyService=Service:          {0}
Reg_NotifyMenuResource=Menu:             {0}, {1}
Reg_NotifyExtender=Extender:         {0}, {1}
Reg_NotifyToolResource=ToolWindow:       {0}, {1}
Reg_NotifyToolVisibility=Tool Visibility:  {0}, {1}
Reg_NotifyOptionPage=Option Page:      {0}\\{1}
Reg_NotifyToolboxPage=Toolbox Page:     {0}
Reg_NotifyCreateObject=Creatable Object: {0}
Reg_NotifyEditorFactory=Editor Factory:   {0}
Reg_NotifyProjectFactory=Project Factory:  {0}
Reg_NotifyProjectItems=Project Items:    {0}
Reg_NotifyEditorView=Logical View:     {0}
Reg_NotifyKeyBinding=Key Binding: {0}, {1}
Reg_NotifyEditorExtension=Editor Extension: {0}, {1}
Reg_NotifyLanguageCodeExpansion=Language Code Expansion: {0}
Reg_NotifyLanguageExtension=Language Extension: {0}, {1}
Reg_NotifyLanguageOptionPage=Language Option Page: {0}, {1}
Reg_NotifyLanguageOptionCategory=LanguageOptionCategory: {0}, {1}
Reg_NotifyLanguageService=Language Service: {0}, {1}
Reg_NotifyLoadKey=LoadKey:          {0} {1}\r\n                  Version {2}\r\n                  Edition Required: {3}
Reg_NotifyToolboxItem=Toolbox Items:    Version {0} (Formats: {1})
Reg_NotifyToolboxItemConfiguration=Toolbox Config:   {0}
Reg_NotifyToolboxItemFilter=                   Filter: {0}
Reg_NotifyInstalledProduct=Installed Product:   {0}, Version {1}
Reg_NotifyInstalledProductInterface=Installed Product:   Using IVsInstalledProduct interface

Reg_ErrorIncompatibleParametersTypes=Parameters {0} and {1} have incompatible types

ToolWindow_TooLateToAddToolbar=Toolbar cannot be added after the Frame is created.\nAdd the ToolBar in the ToolWindow constructor.
ToolWindow_TooLateToAddTool=toolClsid cannot be added after the Frame is created.\nAdd the toolClsid in the ToolWindow constructor.
ToolWindow_PackageOnlySetByCreator=The package property of the tool window should only be set by the creator of the tool window.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\VisualStudio\VS10RTM\VisualStudioIntegration\Common\Source\CSharp\Shell100\Legal Notices for MPF Library Reference Source files.txt ===
//***************************************************************************
//
//    Copyright (c) Microsoft Corporation. All rights reserved.
//    This code is licensed under the Visual Studio SDK license terms.
//    THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
//    ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
//    IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
//    PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//***************************************************************************
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\VisualStudio\VS10RTM\VisualStudioIntegration\Common\Source\CSharp\Shell90\Legal Notices for MPF Library Reference Source files.txt ===
//***************************************************************************
//
//    Copyright (c) Microsoft Corporation. All rights reserved.
//    This code is licensed under the Visual Studio SDK license terms.
//    THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
//    ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
//    IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
//    PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//***************************************************************************
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\VisualStudio\VS10RTM\VisualStudioIntegration\Licenses\MSPL-CHS.txt ===
M i c r o s o f t   lQqQS
 
 
 
 M D S N W i k i   - -   S a m p l e   c o d e 
 
 
 
 [DoNvO(uS,gSv6R~0O(uoNsSh:y`cS,gS0Yg`
NcS,gS
NO(uoN0
 
 
 
 1 . [IN
 
 /g 
Y6R 0 Mu\OT T RS NVHrCgl-Nv[INvT0
 
 
 
  ?zN /fcSYoNb[oNۏLvNUOmRbf9e0
 
 
 
  d?zN /fcOncdkSRSvQ?zNvNUON0
 
 
 
  SN)R /fcd?zN(WvQ?zN
NvclfvN)R;N _0
 
 
 
 2 . Cg)RvcN
 
 ( A ) HrCgcN  -   9hnc,gSvag>kSb,{  3 -NvSagNTP6Rk*Nd?zNcN`
Y6RvQ?zN0QYvQ?zNvMu\OTNSRSvQ?zNb`R\OvNUOMu\OTv^cN'`v0NLuVv0MQHrCgzvHrCgS0
 
 
 
 ( B )   N)RcN  -   9hnc,gSvag>kSb,{  3   -NvSagNTP6Rk*Nd?zNcN`OncSN)R6R\O0N6R\O0O(u0Q.U0c 0[eQT/ bNvQNe_YtoN-Nv?zNboN-N?zNvMu\OTv^cN'`v0NLuVv0MQHrCgzvS0
 
 
 
 3 . agNTP6R
 
 ( A )   eFUhS  -   ,gS
NcN`O(uNUOd?zNvY
T0_hbFUhvCg)R0
 
 
 
 ( B )   Yg`[NUOd?zN1\oNOr`vN)RCgcQN)R;N _R`N勰d?zNY_v0[NoNvN)RS\ꁨR~bk0
 
 
 
 ( C )   Yg`RSoNvNUORR_{OYuoN
Ns	gv@b	gHrCg0N)R0FUhTR_^\Xf0
 
 
 
 ( D )   Yg`NnNxb__RSoNvNUORRSǏ(WRSeS+T,gSv[teoR,gegOnc,gSۏLRS0Yg`NыvbvhNxvb__RSoNvNUORRSOnc N*N&{T,gSvSۏLRS0
 
 
 
 ( E )   oN	c S7h cNS0O(uoNvΘi `]bb0d?zN
NcONUOf:yvbO0ObagN09hnc@b(W0W:Svl_`Sb	gvQN,gSelf9evm9Cg)R0(W`S_0Wl_AQvVQd?zNcd	gsQ '`0[yr[vvv(u'`T
NOCgv؞:ybO0
 
 
 
 
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\VisualStudio\VS10RTM\VisualStudioIntegration\Licenses\MSPL-CHT.txt ===
M i c r o s o f t   lQqQc
k
 
 
 
 M S D N W i k i   - -   S a m p l e   C o d e 
 
 
 
 
 
 @bDߎԚKNO(uS,gc
kh>kKN}_g0ߎԚ N}O(usSh:y 0(u6bcS,gc
kh>k0 0(u6b
NTa,gc
kh>kˊRO(u,gߎԚ0
 
 
 
 1 . [
 
 ,gc
kh>k-N@bcSKN0
000MuW\O
0T0ce^
0I{(uGWWW\O
k
klwQ	gvTa0
 
 
 
 0W\O
0OcߎԚKNSYHr,g0vQNUODRirbf0
 
 
 
 0W\ON
0OcOd,gc
kh>kce^vQW\OKNNUON0
 
 
 
 0c
k\)R
0OcSvc(WW\ONKNW\O
NvNUOW\ON\)Rrf0
 
 
 
 2 . 
k)RKNc
 
 ( A )   W\O
kc  -   Od,gc
kKNh>kSb,{3   {vc
khNTP6RkMOW\ON2c   0(u6b NP^\l\0hQt'`0MQN
k)RёKNO(u
kO      (u6b_NrW\O0\OrW\OKNMuW\ONSce^rW\Ob 0(u6b@b^zvNUOMuW\O0
 
 
 
 ( B )   \)RKNc  -   Od,gc
kKNh>kSb,{3   {vc
khNTP6RkMOW\ON2c   0(u6b NP^\l\0hQt'`0MQN
k)RёKNO(u
kO      (u6b_\O0ONN\O0O(u0.U0cO.U02ST/ bSLUNvQߎԚ-NKNW\ObvQߎԚ-NW\OKNMuW\O0
 
 
 
 3 . hNTP6R
 
 ( A )   !qFUjc
k  -   ,gc
k*gc 0(u6bO(uNUOW\ON
T1z0FUjWHhbFUjKN
k)R0
 
 
 
 ( B )    0(u6b1\ߎԚO[ 0(u6b\)RKN`b_
\NUOW\ONcQ\)R"}GR 0(u6b
NW\ONS_KNߎԚ\)Rc
k\RB}bk0
 
 
 
 ( C )    0(u6bce^,gߎԚKNNUOR_OYu@b	g,gߎԚs	gvW\O
k0\)R0FUjTY
Tj:yrf0
 
 
 
 ( D )    0(u6bNSYz_xb__ce^ߎԚKNNUORGR      (u6bP_Od,gc
kh>kKN[ece^BfDYNN[teKN,gc
kh>k,g0 0(u6bN}oxbvvxb__ce^ߎԚKNNUORGR      (u6bP_Od,gc
kh>k-NKN[ce^ߎԚ0
 
 
 
 ( E )   ,gߎԚN0sr
0cO0 0(u6bLbdO(u0W\ON
NcOf:ydO0OIbhN0 0(u6b@b(W0W@Svl_SgcO,gc
kh>k!ql9evMYm
k)R0(W 0(u6b@bl\KNvu0Wl_1SNW\ON2dkcdi.U'`0iTgyr[(ub*gO
kN[KN؞:ydON0
 
 
 
 
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\VisualStudio\VS10RTM\VisualStudioIntegration\Licenses\MSPL-ENU.txt ===
Microsoft Public License (Ms-PL)

This license governs use of the accompanying software. If you use the software, you accept this license. If you do not accept the license, do not use the software.

1. Definitions

The terms "reproduce," "reproduction," "derivative works," and "distribution" have the same meaning here as under U.S. copyright law.

A "contribution" is the original software, or any additions or changes to the software.

A "contributor" is any person that distributes its contribution under this license.

"Licensed patents" are a contributor's patent claims that read directly on its contribution.

2. Grant of Rights

(A) Copyright Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, each contributor grants you a non-exclusive, worldwide, royalty-free copyright license to reproduce its contribution, prepare derivative works of its contribution, and distribute its contribution or any derivative works that you create.

(B) Patent Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, each contributor grants you a non-exclusive, worldwide, royalty-free license under its licensed patents to make, have made, use, sell, offer for sale, import, and/or otherwise dispose of its contribution in the software or derivative works of the contribution in the software.

3. Conditions and Limitations

(A) No Trademark License- This license does not grant you rights to use any contributors' name, logo, or trademarks.

(B) If you bring a patent claim against any contributor over patents that you claim are infringed by the software, your patent license from such contributor to the software ends automatically.

(C) If you distribute any portion of the software, you must retain all copyright, patent, trademark, and attribution notices that are present in the software.

(D) If you distribute any portion of the software in source code form, you may do so only under this license by including a complete copy of this license with your distribution. If you distribute any portion of the software in compiled or object code form, you may only do so under a license that complies with this license.

(E) The software is licensed "as-is." You bear the risk of using it. The contributors give no express warranties, guarantees or conditions. You may have additional consumer rights under your local laws which this license cannot change. To the extent permitted under your local laws, the contributors exclude the implied warranties of merchantability, fitness for a particular purpose and non-infringement.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\VisualStudio\VS10RTM\VisualStudioIntegration\Licenses\Microsoft Visual Studio 2010 SDK EULA.rtf ===
{\rtf1\ansi\ansicpg1252\deff0\deflang1033\deflangfe1033{\fonttbl{\f0\fswiss\fprq2\fcharset0 Tahoma;}{\f1\fswiss\fprq2\fcharset0 Calibri;}{\f2\froman\fprq2\fcharset2 Symbol;}{\f3\froman\fprq2\fcharset0 Times New Roman;}} {\colortbl ;\red0\green0\blue255;} {\*\generator Msftedit 5.41.21.2508;}\viewkind4\uc1\pard\nowidctlpar\sb120\sa120\b\f0\fs20 MICROSOFT SOFTWARE LICENSE TERMS\par \pard\brdrb\brdrs\brdrw10\brsp20 \nowidctlpar\sb120\sa120 MICROSOFT VISUAL STUDIO 2010 SOFTWARE DEVELOPMENT KIT\f1\par \pard\nowidctlpar\sb120\sa120\b0\f0 These license terms are an agreement between Microsoft Corporation (or based on where you live, one of its affiliates) and you. Please read them. They apply to the software named above, which includes the media on which you received it, if any. The terms also apply to any Microsoft\par \pard\nowidctlpar\fi-360\li360\sb120\sa120\tx360 updates,\par supplements,\par Internet-based services, and \par support services\par \pard\nowidctlpar\sb120\sa120 for this software, unless other terms accompany those items. If so, those terms apply.\par \b BY USING THE SOFTWARE, YOU ACCEPT THESE TERMS. IF YOU DO NOT ACCEPT THEM, DO NOT USE THE SOFTWARE.\par \pard\brdrt\brdrs\brdrw10\brsp20 \nowidctlpar\sb120\sa120 If you comply with these license terms, you have the rights below.\par \pard\nowidctlpar\fi-360\li360\sb120\sa120\tx360 1.\tab INSTALLATION AND USE RIGHTS. \b0 One user may install and use any number of copies of the software on your devices to design, develop and test your programs that work in conjunction with Visual Studio 2010.\b\f1\par \f0 2.\tab ADDITIONAL LICENSING REQUIREMENTS AND/OR USE RIGHTS.\f1\par \pard\nowidctlpar\fi-360\li720\sb120\sa120\tx720\f0 a.\tab Distributable Code.\b0  The software contains code that you are permitted to distribute in programs you develop if you comply with the terms below.\b\f1\par \pard\nowidctlpar\fi-360\li1080\sb120\sa120\tx1080\f0 i.\tab Right to Use and Distribute. \b0 The code and text files listed below are \ldblquote Distributable Code.\rdblquote\par \pard\fi-360\li1800\tx1800\f2\'b7\tab\ul\f0 REDIST.TXT Files\ulnone . You may copy and distribute the object code form of code listed in REDIST.TXT files, plus any files listed on the REDIST list located at:  http://go.microsoft.com/fwlink/?LinkId=180900\f3 .\f1\par \pard\nowidctlpar\fi-360\li1800\sb120\sa120\tx1800\f2\'b7\tab\ul\f0 Sample Code\ulnone . You may modify, copy, and distribute the source and object code form of code marked as \ldblquote sample.\rdblquote\par \f2\'b7\tab\ul\f0 Third Party Distribution\ulnone . You may permit distributors of your programs to copy and distribute the Distributable Code as part of those programs.\par \pard\nowidctlpar\fi-360\li1080\sb120\sa120\tx1080\b ii.\tab Distribution Requirements. For any Distributable Code you distribute, you must\par \pard\nowidctlpar\fi-360\li1797\sb120\sa120\tx1437\b0\f2\'b7\tab\f0 add significant primary functionality to it in your programs;\par \f2\'b7\tab\f0 require distributors and external end users to agree to terms that protect it at least as much as this agreement, except that with respect to the Visual Studio Shell, you must require them to agree to terms that protect the Shell at least as much as its Microsoft Software License Terms, which grant installation and use rights; \par \f2\'b7\tab\f0 display your valid copyright notice on your programs; and\par \f2\'b7\tab\f0 indemnify, defend, and hold harmless Microsoft from any claims, including attorneys\rquote  fees, related to the distribution or use of your programs.\par \pard\nowidctlpar\fi-360\li1080\sb120\sa120\b iii.\tab Distribution Restrictions. You may not\par \pard\nowidctlpar\fi-360\li1797\sb120\sa120\tx1437\b0\f2\'b7\tab\f0 alter any copyright, trademark or patent notice in the Distributable Code; \par \f2\'b7\tab\f0 use Microsoft\rquote s trademarks in your programs\rquote  names or in a way that suggests your programs come from or are endorsed by Microsoft; \par \f2\'b7\tab\f0 distribute Distributable Code to run on a platform other than the Windows platform;\par \f2\'b7\tab\f0 include Distributable Code in malicious, deceptive or unlawful programs; or\par \f2\'b7\tab\f0 modify or distribute the source code of any Distributable Code so that any part of it becomes subject to an Excluded License. An Excluded License is one that requires, as a condition of use, modification or distribution, that\par \pard\nowidctlpar\fi-360\li2517\sb120\sa120\tx2520\f2\'b7\tab\f0 the code be disclosed or distributed in source code form; or \par \f2\'b7\tab\f0 others have the right to modify it.\par \pard\nowidctlpar\fi-360\li1080\sb120\sa120\tx1080\b iv.\tab Developing for the Visual Studio Shell.  \b0 In addition to the requirements and restrictions for Distributable Code described above, the following applies to your programs that work in conjunction with the Visual Studio Shell:\b\f1\par \pard\nowidctlpar\fi-360\li1797\sb120\sa120\tx1437\b0\f2\'b7\tab\ul\f0 Automatic Download Feature\ulnone .  The Visual Studio Shell includes a feature that will detect whether your customer\rquote s machine contains Microsoft components that are needed for the Shell to run, such as the .NET Framework, and automatically download and install such components over the Internet if they are not present without notifying the user so that installation of the Shell may be completed. \~You will comply with all applicable laws as necessary to allow such automatic download and installation over the Internet.\par \f2\'b7\tab\ul\f0 Visual Studio Shell (Isolated) - Product Information\ulnone .  You will not alter or hide our Visual Studio sub-branding in the corner of the splash screen of the Visual Studio Shell (Isolated), and you will supply your own primary branding for your programs that work in conjunction with Visual Studio Shell (Isolated) to indicate to your customers that such programs are yours.\f1\par \pard\nowidctlpar\fi-360\li1800\tx1800\f2\'b7\tab\f0 You will find the Visual Studio Shell (Isolated) here: http://go.microsoft.com/fwlink/?LinkId=180901; and, Visual Studio Shell (Integrated) here:  http://go.microsoft.com/fwlink/?LinkId=180902\f1 . \par \pard\nowidctlpar\fi-360\li720\sb120\sa120\tx720\b\f0 b.\tab General Requirements.\par \pard\nowidctlpar\fi-360\li1080\sb120\sa120\tx1080 i.\tab Limits on Extensions.  \b0 You will not use or enable others to use the software to develop extensions for Visual Studio that (a) allow development of other extensions to Visual Studio without the software, or (b) circumvent any technical limitations implemented by Microsoft for integrating with Visual Studio.  For example, we have put technical limitations in place in the Visual Studio Shell (Isolated) such that extensions to it may not load certain Microsoft packages (including packages from commercial Visual Studio product software) that may already be installed in the end user\rquote s machine.\par \b ii.\tab No Degrading Visual Studio.  \b0 You will design and test the installation, uninstallation, and operation of your programs to ensure that such processes do not disable any features or adversely affect any functionality of Visual Studio (a \ldblquote\b Breakage\b0\rdblquote ).  If we learn or have a reason to suspect a Breakage, we may notify you in writing, at which point you will take commercially reasonable\fs19  efforts to investigate the problem.  Whether we notify you or you discover the Breakage independently, you will correct any Breakage to our satisfaction within the earlier of (a) 90 days after your discovery of the Breakage or after our notice, as the case may be; or (b) the next release of your program.\par \pard\nowidctlpar\fi-360\li360\sb120\sa120\tx360\b\fs20 3.\tab SCOPE OF LICENSE. \b0 The software is licensed, not sold. This agreement only gives you some rights to use the software. Microsoft reserves all other rights. Unless applicable law gives you more rights despite this limitation, you may use the software only as expressly permitted in this agreement. In doing so, you must comply with any technical limitations in the software that only allow you to use it in certain ways. You may not\par \pard\nowidctlpar\fi-360\li1077\sb120\sa120\tx720\f2\'b7\tab\f0 disclose the results of any benchmark tests of the software to any third party without Microsoft\rquote s prior written approval\fs19 ;\f1\fs20\par \f2\'b7\tab\f0 work around any technical limitations in the software\fs19 ;\f1\fs20\par \f2\'b7\tab\f0 reverse engineer, decompile or disassemble the software, except and only to the extent that applicable law expressly permits, despite this limitation\fs19 ;\f1\fs20\par \f2\'b7\tab\f0 make more copies of the software than specified in this agreement or allowed by applicable law, despite this limitation\fs19 ;\f1\fs20\par \f2\'b7\tab\f0 publish the software for others to copy\fs19 ;\f1\fs20\par \f2\'b7\tab\f0 rent, lease or lend the software\fs19 ;\f1\fs20\par \f2\'b7\tab\f0 transfer the software or this agreement to any third party\fs19 ; or\f1\fs20\par \f2\'b7\tab\f0 use the software for commercial software hosting services\f1\fs19 .\fs20\par \pard\nowidctlpar\fi-360\li360\sb120\sa120\tx360\b\f0 4.\tab BACKUP COPY.  \b0 You may make one backup copy of the software. You may use it only to reinstall the software.\b\f1\par \f0 5.\tab DOCUMENTATION. \b0 Any person that has valid access to your computer or internal network may copy and use the documentation for your internal, reference purposes.\par \pard\fi-360\li360\tx360\b 6.\tab EXPORT RESTRICTIONS\f1 .\f0  \b0 The software is subject to United States export laws and regulations. You must comply with all domestic and international export laws and regulations that apply to the software. These laws include restrictions on destinations, end users and end use. For additional information, see {\field{\*\fldinst{HYPERLINK "http://www.microsoft.com/exporting"}}{\fldrslt{\cf1\ul www.microsoft.com/exporting}}}\cf0\ulnone\f0\fs20 .\par \b 7.\tab SUPPORT SERVICES. \b0 Because this software is \ldblquote as is,\rdblquote  we may not provide support services for it.\par \b 8.\tab ENTIRE AGREEMENT. \b0 This agreement, and the terms for supplements, updates, Internet-based services and support services that you use, are the entire agreement for the software and support services.\par \b 9.\tab APPLICABLE LAW\f1 .\par \pard\nowidctlpar\fi-360\li720\sb120\sa120\tx720\f0 i.\tab United States. \b0 If you acquired the software in the United States, Washington state law governs the interpretation of this agreement and applies to claims for breach of it, regardless of conflict of laws principles. The laws of the state where you live govern all other claims, including claims under state consumer protection laws, unfair competition laws, and in tort.\par \b ii.\tab Outside the United States. \b0 If you acquired the software in any other country, the laws of that country apply.\par \pard\nowidctlpar\fi-360\li360\sb120\sa120\tx360\b\caps 10.\tab Legal Effect.\b0\caps0  This agreement describes certain legal rights. You may have other rights under the laws of your country. You may also have rights with respect to the party from whom you acquired the software. This agreement does not change your rights under the laws of your country if the laws of your country do not permit it to do so.\f1\par \b\caps\f0 11.\tab Disclaimer of Warranty. The software is licensed \ldblquote as-is.\rdblquote  You bear the risk of using it. Microsoft gives no express warranties, guarantees or conditions. You may have additional consumer rights under your local laws which this agreement cannot change. To the extent permitted under your local laws, Microsoft excludes the implied warranties of merchantability, fitness for a particular purpose and non-infringement.\par 12.\tab Limitation on and Exclusion of Remedies and Damages. You can recover from Microsoft and its suppliers only direct damages up to U.S. $5.00. You cannot recover any other damages, including consequential, lost profits, special, indirect or incidental damages.\par \pard\nowidctlpar\li357\sb120\sa120\b0\caps0 This limitation applies to\par \pard\nowidctlpar\fi-360\li1077\sb120\sa120\tx720\f2\'b7\tab\f0 anything related to the software, services, content (including code) on third party Internet sites, or third party programs; and\par \f2\'b7\tab\f0 claims for breach of contract, breach of warranty, guarantee or condition, strict liability, negligence, or other tort to the extent permitted by applicable law.\par \pard\nowidctlpar\li360\sb120\sa120 It also applies even if Microsoft knew or should have known about the possibility of the damages. The above limitation or exclusion may not apply to you because your country may not allow the exclusion or limitation of incidental, consequential or other damages.\par \b Please note: As this software is distributed in Quebec, Canada, some of the clauses in this agreement are provided below in French.\par \pard\nowidctlpar\sb240\lang1036\fs19 Remarque : Ce logiciel \'e9tant distribu\'e9 au Qu\'e9bec, Canada, certaines des clauses dans ce contrat sont fournies ci-dessous en fran\'e7ais.\lang1033\par \pard\nowidctlpar\sb120\sa120\lang1036 EXON\'c9RATION DE GARANTIE.\b0  Le logiciel vis\'e9 par une licence est offert \'ab tel quel \'bb. Toute utilisation de ce logiciel est \'e0 votre seule risque et p\'e9ril. Microsoft n\rquote accorde aucune autre garantie expresse. Vous pouvez b\'e9n\'e9ficier de droits additionnels en vertu du droit local sur la protection dues consommateurs, que ce contrat ne peut modifier. La ou elles sont permises par le droit locale, les garanties implicites de qualit\'e9 marchande, d\rquote ad\'e9quation \'e0 un usage particulier et d\rquote absence de contrefa\'e7on sont exclues.\lang1033\par \lang1036\b LIMITATION DES DOMMAGES-INT\'c9R\'caTS ET EXCLUSION DE RESPONSABILIT\'c9 POUR LES DOMMAGES.\b0\~ Vous pouvez obtenir de Microsoft et de ses fournisseurs une indemnisation en cas de dommages directs uniquement \'e0 hauteur de 5,00 $ US. Vous ne pouvez pr\'e9tendre \'e0 aucune indemnisation pour les autres dommages, y compris les dommages sp\'e9ciaux, indirects ou accessoires et pertes de b\'e9n\'e9fices.\lang1033\par Cette limitation concerne:\par \pard\nowidctlpar\fi-360\li720\sb120\sa120\lang1036\f2\'b7\f3\fs14\~\~\~\~\~\~\~\~ \f0\fs19 tout\~ ce qui est reli\'e9 au logiciel, aux services ou au contenu (y compris le code) figurant sur des sites Internet tiers ou dans des programmes tiers ; et\lang1033\par \pard\nowidctlpar\fi-363\li720\sb120\sa120\lang1036\f2\'b7\f3\fs14\~\~\~\~\~\~\~\~ \f0\fs19 les r\'e9clamations au titre de violation de contrat ou de garantie, ou au titre de responsabilit\'e9 stricte, de n\'e9gligence ou d\rquote une autre faute dans la limite autoris\'e9e par la loi en vigueur.\lang1033\par \pard\nowidctlpar\sb120\sa120\lang1036 Elle s\rquote applique \'e9galement, m\'eame si Microsoft connaissait ou devrait conna\'eetre l\rquote\'e9ventualit\'e9 d\rquote un tel dommage.\~ Si votre pays n\rquote autorise pas l\rquote exclusion ou la limitation de responsabilit\'e9 pour les dommages indirects, accessoires ou de quelque nature que ce soit, il se peut que la limitation ou l\rquote exclusion ci-dessus ne s\rquote appliquera pas \'e0 votre \'e9gard.\lang1033\par \pard\nowidctlpar\sa200\sl276\slmult1\lang1036\b EFFET JURIDIQUE.\b0\~ Le pr\'e9sent contrat d\'e9crit certains droits juridiques. Vous pourriez avoir d\rquote autres droits pr\'e9vus par les lois de votre pays.\~ Le pr\'e9sent contrat ne modifie pas les droits que vous conf\'e8rent les lois de votre pays si celles ci ne le permettent pas.\lang1033\f1\fs22\par
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\VisualStudio\VS10RTM\VisualStudioIntegration\Licenses\MSPL-ESN.txt ===
L i c e n c i a   P  b l i c a   d e   M i c r o s o f t 
 
 
 
 C o n t e n i d o   d e   l a   c o m u n i d a d   ( M S D N   W i k i ) 
 
 
 
 L a   p r e s e n t e   l i c e n c i a   r i g e   e l   u s o   d e l   s o f t w a r e   q u e   l a   a c o m p a  a .   S i   u s t e d   u t i l i z a   e l   s o f t w a r e   e s t a r    a c e p t a n d o   e s t a   l i c e n c i a .   S i   n o   a c e p t a   l a   l i c e n c i a ,   n o   u t i l i c e   e l   s o f t w a r e . 
 
 
 
 1 .   D e f i n i c i o n e s 
 
 L o s   t  r m i n o s    r e p r o d u c i r  ,    r e p r o d u c c i  n  ,    o b r a s   d e r i v a d a s    y    d i s t r i b u c i  n    t i e n e n   a q u    e l   m i s m o   s i g n i f i c a d o   q u e   e n   l a   n o r m a t i v a   e s t a d o u n i d e n s e   s o b r e   d e r e c h o s   d e   a u t o r . 
 
 
 
 U n a    c o n t r i b u c i  n    e s   e l   s o f t w a r e   o r i g i n a l ,   a s    c o m o   c u a l q u i e r   a m p l i a c i  n   o   m o d i f i c a c i  n   q u e   s e   r e a l i c e   s o b r e   e l   s o f t w a r e . 
 
 
 
 U n    c o l a b o r a d o r    e s   t o d a   p e r s o n a   q u e   d i s t r i b u y e   s u   c o n t r i b u c i  n   s o m e t i d a   a   l a   p r e s e n t e   l i c e n c i a . 
 
 
 
  P a t e n t e s   l i c e n c i a d a s    s o n   l a s   r e i v i n d i c a c i o n e s   d e   c u a l q u i e r   p a t e n t e   d e   u n   c o l a b o r a d o r   q u e   e s t  n   r e l a c i o n a d a s   d i r e c t a m e n t e   c o n   s u   c o n t r i b u c i  n . 
 
 
 
 2 .   C o n c e s i  n   d e   d e r e c h o s 
 
 ( A )   C o n c e s i  n   d e   l i c e n c i a   d e   d e r e c h o s   d e   a u t o r :   c o n   s u j e c i  n   a   l o s   t  r m i n o s   d e   e s t a   l i c e n c i a ,   i n c l u y e n d o   l a s   c o n d i c i o n e s   y   l i m i t a c i o n e s   p r e v i s t a s   e n   l a   c l  u s u l a   3 ,   c a d a   c o l a b o r a d o r   l e   c o n c e d e   a   u s t e d   u n a   l i c e n c i a   n o   e x c l u s i v a ,   d e    m b i t o   m u n d i a l   y   l i b r e   d e   r e g a l  a s   ( r o y a l t i e s )   s o b r e   s u s   d e r e c h o s   d e   a u t o r   p a r a   q u e   u s t e d   p u e d a   r e p r o d u c i r   l a   c o n t r i b u c i  n   d e   d i c h o   c o l a b o r a d o r ,   p r e p a r a r   o b r a s   d e r i v a d a s   d e   e l l a   y   d i s t r i b u i r l a   o   d i s t r i b u i r   l a s   o b r a s   d e r i v a d a s   q u e   u s t e d   c r e e . 
 
 
 
 ( B )   C o n c e s i  n   d e   l i c e n c i a   d e   p a t e n t e :   c o n   s u j e c i  n   a   l o s   t  r m i n o s   d e   e s t a   l i c e n c i a ,   i n c l u y e n d o   l a s   c o n d i c i o n e s   y   l i m i t a c i o n e s   p r e v i s t a s   e n   l a   c l  u s u l a   3 ,   c a d a   c o l a b o r a d o r   l e   c o n c e d e   a   u s t e d   u n a   l i c e n c i a   n o   e x c l u s i v a ,   d e    m b i t o   m u n d i a l   y   l i b r e   d e   r e g a l  a s   ( r o y a l t i e s )   s o b r e   s u s   p a t e n t e s   l i c e n c i a d a s   p a r a   q u e   u s t e d   p u e d a   r e a l i z a r ,   h a c e r   q u e   o t r o s   r e a l i c e n ,   u t i l i z a r ,   v e n d e r ,   o f r e c e r   a   l a   v e n t a ,   i m p o r t a r   y / o   d i s p o n e r   d e   c u a l q u i e r   o t r a   f o r m a   d e   l a   c o n t r i b u c i  n   q u e   d i c h o   c o l a b o r a d o r   h a   h e c h o   e n   e l   s o f t w a r e   o   d e   l a s   o b r a s   d e r i v a d a s   d e   d i c h a   c o n t r i b u c i  n   e n   e l   s o f t w a r e .   
 
 
 
 3 .   C o n d i c i o n e s   y   l i m i t a c i o n e s 
 
 ( A )   A u s e n c i a   d e   l i c e n c i a   d e   m a r c a s :   e s t a   l i c e n c i a   n o   l e   o t o r g a   a   u s t e d   n i n g  n   d e r e c h o   a   u t i l i z a r   e l   n o m b r e ,   l o g o t i p o   o   m a r c a   d e   n i n g  n   c o l a b o r a d o r . 
 
 
 
 ( B )   S i   u s t e d   i n t e r p o n e   u n a   d e m a n d a   c o n t r a   u n   c o l a b o r a d o r   a l e g a n d o   q u e   e l   s o f t w a r e   i n f r i n g e   c u a l q u i e r   p a t e n t e ,   l a   l i c e n c i a   d e   p a t e n t e   q u e   d i c h o   c o l a b o r a d o r   l e   h a y a   c o n c e d i d o   a   u s t e d   f i n a l i z a r    a u t o m  t i c a m e n t e . 
 
 
 
 ( C )   S i   u s t e d   d i s t r i b u y e   c u a l q u i e r   p a r t e   d e l   s o f t w a r e ,   d e b e   c o n s e r v a r   t o d o s   l o s   a v i s o s   d e   d e r e c h o s   d e   a u t o r ,   p a t e n t e s ,   m a r c a s   c o m e r c i a l e s   y   r e c o n o c i m i e n t o s   q u e   e s t  n   p r e s e n t e s   e n   e l   s o f t w a r e . 
 
 
 
 ( D )   S i   u s t e d   d i s t r i b u y e   c u a l q u i e r   p a r t e   d e l   s o f t w a r e   e n   f o r m a   d e   c  d i g o   f u e n t e ,    n i c a m e n t e   p o d r    h a c e r l o   s o m e t i  n d o l o   a   l a   p r e s e n t e   l i c e n c i a ,   p a r a   l o   c u a l ,   u s t e d   d e b e r    i n c l u i r   u n a   c o p i a   c o m p l e t a   d e   e s t a   l i c e n c i a   j u n t o   c o n   l a   d i s t r i b u c i  n .   S i   u s t e d   d i s t r i b u y e   c u a l q u i e r   p a r t e   d e l   s o f t w a r e   e n   f o r m a   c o m p i l a d a   o   d e   c  d i g o   a b i e r t o ,    n i c a m e n t e   p o d r    h a c e r l o   s o m e t i  n d o l o   a   u n a   l i c e n c i a   q u e   c u m p l a   c o n   l a   p r e s e n t e   l i c e n c i a . 
 
 
 
 ( E )   E l   s o f t w a r e   s e   c e d e   b a j o   l i c e n c i a    t a l   c u a l  .   U s t e d   a s u m e   t o d o   e l   r i e s g o   d e   u t i l i z a r l o .   L o s   c o l a b o r a d o r e s   n o   o t o r g a n   n i n g u n a   c o n d i c i  n   o   g a r a n t  a   e x p r e s a .   E s   p o s i b l e   q u e   l a   l e g i s l a c i  n   l o c a l   e n   m a t e r i a   d e   c o n s u m o   l e   o t o r g u e   a   u s t e d   d e r e c h o s   q u e   l a   p r e s e n t e   l i c e n c i a   n o   p u e d e   m o d i f i c a r .   E n   l a   m e d i d a   e n   q u e   a s    l o   p e r m i t a   l a   l e g i s l a c i  n   l o c a l ,   l o s   c o l a b o r a d o r e s   e x c l u y e n   l a s   g a r a n t  a s   i m p l  c i t a s   d e   c o m e r c i a b i l i d a d ,   i d o n e i d a d   p a r a   u n   f i n   g e n e r a l   o   p a r t i c u l a r   y   a u s e n c i a   d e   i n f r a c c i  n . 
 
 
 
 
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\VisualStudio\VS10RTM\VisualStudioIntegration\Licenses\MSPL-JPN.txt ===
M i c r o s o f t   lQ00000  
 
 
 
 M S D N   00000000000 0000000
 
 
 
 zvL:     2 0 0 6 t^1 0 g1 2 e
 
 
 
   
 
 
 
 ,g00000o0N^\Y00000000( NN0,g000000
0h0D0D0~0Y0) n0O(uk0i(uU00~0Y00J0[iL0,g0000000O(uU0004XTo00,g00000k0TaY000n0h0W0~0Y00,g00000k0TaW0j0D04XT0,g0000000O(uY00S0h0o0g0M0~0[000
 
 
 
 1 . [
 
 0Y00
000
000N!kvW\Oir
000^
0h0D0F0(uo0]00^0000000TFVW\O)jlk0J0Q004XTh0Tin0asT0	gW0~0Y00
 
 
 
 0b?zir
0h0o000000n00000000~0_0o0K0K00000000x0n0R0W0O0o0	Yf0asTW0~0Y00
 
 
 
 0b?z
0h0o00,g00000k0We0D0f0b?z0LF0N0asTW0~0Y00
 
 
 
 0O(u1U00_0yr1
0h0o00b?zirk0vcfK00_0b?zn0yr100000asTW0~0Y00
 
 
 
   
 
 
 
 2 . )j)Rn01S
 
 ( A )   W\O)jn01  -   ,{  3   agn0O(u1agNJ00s06RP0+T0,g00000n0[k0_D00Tb?zo0J0[ik0[W0f00]00^00n0b?zir0W00b?zirn0N!kvW\Oir0\ObW00b?zir~0_0o0J0[iL0\ObW0_0N!kW\Oir0^Y00_00n00^r`Sv0hQNLuv0!qQn0W\O)j01W0~0Y00
 
 
 
 ( B )   yr1n01  -   ,{  3   agn0O(u1agNJ00s06RP0+T0,gQY}fn0[k0_D00Tb?zo0J0[ik0[W0f00,g000000Qn0b?zir0W0O0o0,g000000Qn0b?zirn0N!kW\Oirk0d0M00O(u1U00_0yr1k0We0D0f0 0,{	N0W0f0n0 0O(u0X08eQ0]0n0Nn0Kbkk000QR0[eY00_00n00^r`Sv0hQNLuv0!qQn0W\O)j01W0~0Y00
 
 
 
   
 
 
 
 3 . agNh06RP
 
 ( A )   FUjO(u1n0cd  -   ,g00000o0J0[ik0[W00b?zn0
Ty0000FUj0O(uY00)j)R0NNY000n0g0o0B00~0[000
 
 
 
 ( B ) J0[iL0b?zk0[W0f0,g000000k000yr1O[03uW0zf004XT0K0K00b?zK00J0[ik0NNU00f0D0_0yr100000o0Rvk0B}NY000n0h0W0~0Y00
 
 
 
 ( C )   ,g000000n0 N萒0^Y004XT0J0[io00,g000000k0B00W\O)j0yr1)j0FUj)j00^^\k0Y00Y0y0f0n0w0]0n0~0~0h:yY000n0h0W0~0Y00
 
 
 
 ( D )   ,g000000n0 N萒0000000b__g0^Y004XT0J0[io00,g00000n0[hQj00000J0[in0^irk0D}0eQ00S0h0k0000,g00000k0We0D0f0n00^0LF0S0h0L0g0M0~0Y00,g000000n0 N萒000000n0000b__~0_0o0000000  000b__g0^Y004XT0J0[io00,g00000k0nbW0_000000k0We0D0f0n00^0LF0S0h0L0g0M0~0Y00
 
 
 
 ( E ) ,g000000o0  sr	gYk0f0  O(u1U00~0Y00,g000000n0O(uK00uX00qSzo00J0[iL0bY000n0h0W0~0Y00b?zo00Nn0O<0Ut^bO]0n0N NRn0N0D0~0[000J0[in00WWn0lNk00c0f0o00,g00000k00c0f0	YfY00S0h0n0g0M0j0D00]0n0Nn0mn0)j)RL0X[(WY004XTL0B00~0Y00J0[in00WWn0l_k00c0f00000{Vk0J0D0f00b?zo00FUT'`0yr[vviT'`0^O['`k0Y00ٞ:yn0O<0MQ0~0Y00
 
 
 
 
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\VisualStudio\VS10RTM\VisualStudioIntegration\Licenses\MSPL-FRA.txt ===
M i c r o s o f t   P u b l i c   L i c e n s e 
 
 
 
 L  u t i l i s a t i o n   d u   l o g i c i e l   e s t   r  g i e   p a r   l e s   t e r m e s   d e   l a   p r  s e n t e   l i c e n c e .   V o u s   a c c e p t e z   c e t t e   l i c e n c e   e n   u t i l i s a n t   l e   l o g i c i e l .   S i   v o u s   n  a c c e p t e z   p a s   l a   l i c e n c e ,   n  u t i l i s e z   p a s   l e   l o g i c i e l . 
 
 
 
 1 .   D  f i n i t i o n s 
 
 L e s   t e r m e s      r e p r o d u i r e    ,      r e p r o d u c t i o n    ,      Su v r e s   d  r i v  e s      e t      d i s t r i b u t i o n      o n t   l a   m  m e   s i g n i f i c a t i o n   d a n s   l a   p r  s e n t e   l i c e n c e   q u e   d a n s   l e s   l o i s   a m  r i c a i n e s   r e l a t i v e s   a u x   d r o i t s   d  a u t e u r . 
 
 
 
 U n e      c o n t r i b u t i o n      r e p r  s e n t e   l e   l o g i c i e l   i n i t i a l ,   o u   t o u t   a j o u t   o u   c h a n g e m e n t   a p p o r t    a u   l o g i c i e l . 
 
 
 
 U n      c o l l a b o r a t e u r      d  s i g n e   t o u t e   p e r s o n n e   q u i   d i s t r i b u e   s a   c o n t r i b u t i o n   d a n s   l e   c a d r e   d e   l a   p r  s e n t e   l i c e n c e . 
 
 
 
 L e s      b r e v e t s   s o u s   l i c e n c e      s o n t   l e s   r e v e n d i c a t i o n s   d u   b r e v e t   d  u n   c o l l a b o r a t e u r ,   t e l l e s   q u e   m e n t i o n n  e s   d a n s   s a   c o n t r i b u t i o n . 
 
 
 
 2 .   C o n c e s s i o n   d e   d r o i t s . 
 
 ( A )   C o n c e s s i o n   d e   d r o i t s   d  a u t e u r -   S o u s   r  s e r v e   d u   r e s p e c t   d e s   t e r m e s   d e   l a   p r  s e n t e   l i c e n c e ,   y   c o m p r i s   d e s   c o n d i t i o n s   e t   d e s   l i m i t a t i o n s   d e   l a   l i c e n c e    n o n c  e s      l  a r t i c l e   3 ,   c h a q u e   c o l l a b o r a t e u r   v o u s   c o n c  d e   u n e   l i c e n c e   d e   d r o i t s   d  a u t e u r   n o n   e x c l u s i v e ,   v a l a b l e   d a n s   l e   m o n d e   e n t i e r   e t   l i b r e   d e   r e d e v a n c e   q u i   v o u s   a u t o r i s e      r e p r o d u i r e   s a   c o n t r i b u t i o n ,      p r  p a r e r   d e s   Su v r e s   d  r i v  e s   d e   s a   c o n t r i b u t i o n   e t      d i s t r i b u e r   s a   c o n t r i b u t i o n   o u   t o u t e   Su v r e   d  r i v  e   q u e   v o u s   a v e z   c r   e . 
 
 
 
 ( B )   C o n c e s s i o n   d e   b r e v e t s -   S o u s   r  s e r v e   d u   r e s p e c t   d e s   t e r m e s   d e   l a   p r  s e n t e   l i c e n c e ,   y   c o m p r i s   d e s   c o n d i t i o n s   e t   d e s   l i m i t a t i o n s   d e   l a   l i c e n c e    n o n c  e s      l  a r t i c l e   3 ,   c h a q u e   c o l l a b o r a t e u r   v o u s   c o n c  d e   u n e   l i c e n c e   n o n   e x c l u s i v e ,   v a l a b l e   d a n s   l e   m o n d e   e n t i e r   e t   l i b r e   d e   r e d e v a n c e ,   a u   t i t r e   d e   s e s   b r e v e t s   s o u s   l i c e n c e ,   q u i   v o u s   a u t o r i s e      e f f e c t u e r ,      f a i r e   e f f e c t u e r ,      u t i l i s e r ,      v e n d r e ,      p r o p o s e r      l a   v e n t e ,      i m p o r t e r   e t / o u      c  d e r   s a   c o n t r i b u t i o n   d a n s   l e   l o g i c i e l   o u   t o u t e   Su v r e   d  r i v  e   d e   s a   c o n t r i b u t i o n   d a n s   l e   l o g i c i e l . 
 
 
 
 3 .   C o n d i t i o n s   e t   l i m i t a t i o n s 
 
 ( A )   P a s   d e   l i c e n c e   d e   m a r q u e   c o m m e r c i a l e -   L a   p r  s e n t e   l i c e n c e   n e   v o u s   c o n c  d e   a u c u n   d r o i t   d  u t i l i s e r   l e   n o m ,   l e   l o g o   o u   l e s   m a r q u e s   d u   c o l l a b o r a t e u r . 
 
 
 
 ( B )   S i   v o u s   i n t e n t e z   u n e   a c t i o n      l  e n c o n t r e   d  u n   c o l l a b o r a t e u r   p o u r   d e s   b r e v e t s   c o n t r e f a i t s   p a r   l e   l o g i c i e l ,   v o t r e   l i c e n c e   d e   b r e v e t s   c o n c  d  e   p a r   l e   c o l l a b o r a t e u r   p o u r   l e   l o g i c i e l   p r e n d   f i n   a u t o m a t i q u e m e n t . 
 
 
 
 ( C )   S i   v o u s   d i s t r i b u e z   u n e   p a r t i e   d u   l o g i c i e l ,   v o u s   d e v e z   c o n s e r v e r   t o u t e s   l e s   m e n t i o n s   d e   d r o i t s   d  a u t e u r ,   d e   b r e v e t s ,   d e   m a r q u e s   o u   d e   p r o p r i  t    i n t e l l e c t u e l l e   f i g u r a n t   s u r   l e   l o g i c i e l . 
 
 
 
 ( D )   S i   v o u s   d i s t r i b u e z   u n e   p a r t i e   d u   l o g i c i e l   s o u s   l a   f o r m e   d e   c o d e   s o u r c e ,   v o u s   d e v e z   l e   f a i r e   u n i q u e m e n t   e n   v e r t u   d e   l a   p r  s e n t e   l i c e n c e   e n   f o u r n i s s a n t   u n e   c o p i e   c o m p l  t e   d e   c e t t e   l i c e n c e   d a n s   l e   c a d r e   d e   v o t r e   d i s t r i b u t i o n .   S i   v o u s   d i s t r i b u e z   u n e   p a r t i e   d u   l o g i c i e l   s o u s   l a   f o r m e   d e   c o d e   o b j e t   o u   d e   c o d e   c o m p i l  ,   v o u s   d e v e z   l e   f a i r e   u n i q u e m e n t   e n   v e r t u   d  u n e   l i c e n c e   c o n f o r m e      l a   p r  s e n t e   l i c e n c e . 
 
 
 
 ( E )   L e   l o g i c i e l   e s t   c o n c  d    s o u s   l i c e n c e      e n   l   t a t    .   V o u s   a s s u m e z   t o u s   l e s   r i s q u e s   l i  s      s o n   u t i l i s a t i o n .   L e s   c o l l a b o r a t e u r s   n  a c c o r d e n t   a u c u n e   g a r a n t i e   e x p r e s s e .   V o u s   p o u v e z   b  n  f i c i e r   d e   d r o i t s   s u p p l  m e n t a i r e s   r e l a t i f s   a u x   c o n s o m m a t e u r s   e n   v e r t u   d u   d r o i t   d e   v o t r e   p a y s ,   q u e   c e t t e   l i c e n c e   n e   p e u t   m o d i f i e r .   D a n s   l a   m e s u r e   o    c e l a   e s t   a u t o r i s    p a r   l a   l  g i s l a t i o n   d e   v o t r e   p a y s ,   l e s   c o l l a b o r a t e u r s   e x c l u e n t   l e s   g a r a n t i e s   i m p l i c i t e s   d e   q u a l i t  ,   d  a d  q u a t i o n      u n   u s a g e   p a r t i c u l i e r   e t   d  a b s e n c e   d e   c o n t r e f a  o n . 
 
 
 
 
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\VisualStudio\VS10RTM\VisualStudioIntegration\Licenses\MSPL-DEU.txt ===
M i c r o s o f t   P u b l i c   L i c e n s e 
 
 
 
 M S D N   W i k i 
 
 
 
 D i e s e   L i z e n z   r e g e l t   d i e   V e r w e n d u n g   d e r   b e i l i e g e n d e n   S o f t w a r e .   W e n n   S i e   d i e   S o f t w a r e   v e r w e n d e n ,   n e h m e n   S i e   d i e s e   L i z e n z   a n .   F a l l s   S i e   d i e   L i z e n z   n i c h t   a n n e h m e n ,   s i n d   S i e   n i c h t   b e r e c h t i g t ,   d i e   S o f t w a r e   z u   v e r w e n d e n . 
 
 
 
 1 .   D e f i n i t i o n e n 
 
 D i e   B e g r i f f e    v e r v i e l f  l t i g e n  ,    V e r v i e l f  l t i g u n g  ,    B e a r b e i t u n g e n    u n d    V e r t r i e b    h a b e n   h i e r   d i e   g l e i c h e   B e d e u t u n g   w i e   u n t e r   d e m   U r h e b e r r e c h t s g e s e t z   d e r   U S A . 
 
 
 
 E i n    B e i t r a g    i s t   d i e   u r s p r  n g l i c h e   S o f t w a r e   o d e r   H i n z u f  g u n g e n   b z w .    n d e r u n g e n   d e r   S o f t w a r e . 
 
 
 
 E i n    M i t w i r k e n d e r    i s t   e i n e   P e r s o n ,   d i e   i h r e n   B e i t r a g   u n t e r   d i e s e r   L i z e n z   v e r t r e i b t . 
 
 
 
  L i z e n z i e r t e   P a t e n t e    s i n d   d i e   P a t e n t a n s p r  c h e   e i n e s   M i t w i r k e n d e n ,   d i e   s i c h   d i r e k t   a u f   s e i n e n   B e i t r a g   b e z i e h e n . 
 
 
 
   
 
 
 
 2 .   G e w  h r u n g   v o n   R e c h t e n 
 
 ( A )   G e w  h r u n g   v o n   R e c h t e n   u n t e r   d e m   U r h e b e r r e c h t   -   V o r b e h a l t l i c h   d e r   B e s t i m m u n g e n   d i e s e r   L i z e n z ,   e i n s c h l i e  l i c h   d e r   L i z e n z b e d i n g u n g e n   u n d    b e s c h r  n k u n g e n   i n   Z i f f e r   3 ,   g e w  h r t   I h n e n   j e d e r   M i t w i r k e n d e   e i n e   n i c h t   a u s s c h l i e  l i c h e ,   w e l t w e i t e ,   l i z e n z g e b  h r e n f r e i e   U r h e b e r r e c h t s l i z e n z ,   s e i n e n   B e i t r a g   z u   v e r v i e l f  l t i g e n ,   B e a r b e i t u n g e n   s e i n e s   B e i t r a g s   z u   e r s t e l l e n   u n d   s e i n e n   B e i t r a g   o d e r   v o n   I h n e n   e r s t e l l t e   B e a r b e i t u n g e n   z u   v e r t r e i b e n . 
 
 
 
 ( B )   P a t e n t g e w  h r u n g   -   V o r b e h a l t l i c h   d e r   B e s t i m m u n g e n   d i e s e r   L i z e n z ,   e i n s c h l i e  l i c h   d e r   L i z e n z b e d i n g u n g e n   u n d    b e s c h r  n k u n g e n   i n   Z i f f e r   3 ,   g e w  h r t   I h n e n   j e d e r   M i t w i r k e n d e   e i n e   n i c h t   a u s s c h l i e  l i c h e ,   w e l t w e i t e ,   l i z e n z g e b  h r e n f r e i e   L i z e n z   u n t e r   s e i n e n   l i z e n z i e r t e n   P a t e n t e n ,   s e i n e n   B e i t r a g   i n   d e r   S o f t w a r e   o d e r   B e a r b e i t u n g e n   d e s   B e i t r a g s   i n   d e r   S o f t w a r e   a n z u f e r t i g e n ,   a n g e f e r t i g t   z u   h a b e n ,   z u   v e r w e n d e n ,   z u   v e r k a u f e n ,   z u m   V e r k a u f   a n z u b i e t e n ,   z u   i m p o r t i e r e n   u n d / o d e r   a n d e r w e i t i g   d a r  b e r   z u   v e r f  g e n . 
 
 
 
   
 
 
 
 3 .   B e d i n g u n g e n   u n d   B e s c h r  n k u n g e n 
 
 ( A )   K e i n e   M a r k e n l i z e n z   -   D i e s e   L i z e n z   g e w  h r t   I h n e n   k e i n e   R e c h t e ,   d e n   N a m e n ,   d a s   L o g o   o d e r   M a r k e n   e i n e s   M i t w i r k e n d e n   z u   v e r w e n d e n . 
 
 
 
 ( B )   W e n n   S i e   e i n e n   P a t e n t a n s p r u c h   g e g e n   e i n e n   M i t w i r k e n d e n   f  r   P a t e n t e   e r h e b e n ,   v o n   d e n e n   S i e   b e h a u p t e n ,   d a s s   s i e   d u r c h   d i e   S o f t w a r e   v e r l e t z t   w e r d e n ,   e n d e t   I h r e   P a t e n t l i z e n z   v o n   d e m   e n t s p r e c h e n d e n   a n   d e r   S o f t w a r e   M i t w i r k e n d e n   a u t o m a t i s c h . 
 
 
 
 ( C )   W e n n   S i e   T e i l e   d e r   S o f t w a r e   v e r t r e i b e n ,   s i n d   S i e   v e r p f l i c h t e t ,   a l l e   i n   d e r   S o f t w a r e   v o r h a n d e n e n   U r h e b e r r e c h t s - ,   P a t e n t -   u n d   M a r k e n h i n w e i s e   s o w i e   a l l e   H e r k u n f t s a n g a b e n   b e i z u b e h a l t e n . 
 
 
 
 ( D )   W e n n   S i e   T e i l e   d e r   S o f t w a r e   i n   Q u e l l c o d e f o r m   v e r t r e i b e n ,   d  r f e n   S i e   d i e s   n u r   u n t e r   d i e s e r   L i z e n z   t u n ,   i n d e m   S i e   I h r e m   B e i t r a g   e i n e   v o l l s t  n d i g e   K o p i e   d i e s e r   L i z e n z   b e i f  g e n .   W e n n   S i e   T e i l e   d e r   S o f t w a r e   i n   k o m p i l i e r t e r   o d e r   O b j e k t c o d e f o r m   v e r t r e i b e n ,   d  r f e n   S i e   d i e s   n u r   u n t e r   e i n e r   L i z e n z   t u n ,   d i e   d i e s e   L i z e n z   e i n h  l t . 
 
 
 
 ( E )   D i e   S o f t w a r e   w i r d    w i e   b e s e h e n    l i z e n z i e r t .   S i e   t r a g e n   d a s   m i t   d e r   V e r w e n d u n g   v e r b u n d e n e   R i s i k o .   D i e   M i t w i r k e n d e n   g e w  h r e n   k e i n e   a u s d r  c k l i c h e n   G e w  h r l e i s t u n g e n   o d e r   G a r a n t i e n .   M  g l i c h e r w e i s e   h a b e n   S i e   u n t e r   d e n    r t l i c h   a n w e n d b a r e n   G e s e t z e n   z u s  t z l i c h e   V e r b r a u c h e r r e c h t e ,   d i e   d u r c h   d i e s e   L i z e n z   n i c h t   a b g e  n d e r t   w e r d e n   k  n n e n .   I m   d u r c h   d a s    r t l i c h   a n w e n d b a r e   R e c h t   g e s t a t t e t e n   U m f a n g   s c h l i e  e n   d i e   M i t w i r k e n d e n   k o n k l u d e n t e   G a r a n t i e n   d e r   H a n d e l s  b l i c h k e i t ,   E i g n u n g   f  r   e i n e n   b e s t i m m t e n   Z w e c k   u n d   N i c h t v e r l e t z u n g   v o n   R e c h t e n   D r i t t e r   a u s . 
 
 
 
 
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\VisualStudio\VS10RTM\VisualStudioIntegration\Licenses\MSPL-KOR.txt ===
M i c r o s o f t     |t 
 
 
 
   ƌ  }@  ٳ	  ոƴ      ȩ)Ȳ. ոƴ|  h  ٳ  XՔ    }D  XՔ  t  )Ȳ.   }D  X  JD  Ŕ  ոƴ|  X  ȹ$. 
 
 
 
 1 . ƴ  X
 
   }  " " ,   " 2 (   ȑ<"     " 0"   m   ȑǌ  XՔ  ٳ|\  X|   Ȳ. 
 
 
 
 " 0" tǀ    ոƴŘ  ոƴ         D  XiȲ. 
 
 
 
 " 0Ő"     }  XpX  t踴  0D  0XՔ  D  XiȲ. 
 
 
 
 ƌtՌ" tǀ0\0ŐXǹՌDXiȲ. 
 
 
 
 2 .     
 
 ( A )    ȑǌ      -     }  pt( 3 pX  ƌ  pt    \  h)   0|    0Őǔ  XŌ  0D  X  0X  2 (   ȑ<D  1Xp  0    X   1\  2 (   ȑ<D  0`    ǔ  Dųt    8Ĭx  4X   ȑǌ  ƌD  iȲ. 
 
 
 
 Ռ-   }pt( 3 pXpt\h) 0|0ŐǔXŌոƴX0t0X2 ( ȑ<DȑXpȑXՌXpXp,   Xp,   Xp,   Xp/ 00`ǔDųt8Ĭx4XǹDiȲ. 
 
 
 
 3 .   pt    \
 
 ( A )   \  ƌ  L-     }@  XŌ  0ŐX  tǄ,   \    \|  `    ǔ  Š\  ĳ  X  JŵȲ. 
 
 
 
 ( B )   ոƴ  Xt  ht  X   ȥXՔ  Ռ   t  X   0Ő|   \  ՌD  0`  ,   t  ոƴ   t  0Ő\0  @  XX    @  ٳ<\  ̸)Ȳ. 
 
 
 
 ( C )   ոƴX  |  D    Tܴ  \  0`  ,   XՔ  ոƴ       ȑǌ,   Ռ,   \Ԍ    \  |   t|  iȲ. 
 
 
 
 ( D )   X   ոƴX  |  D    Tܴ  \  0XՔ  Ŕ,   ܴ    }X  ȴ  D  h  0h<\h    }  pt  0||  iȲ. X   ոƴX  |  D        $ȸ  Tܴ  \  0XՔ  @,     }D   XՔ  ƌ  X̹  թ)Ȳ. 
 
 
 
 ( E )   ոƴŔ  " ǔ \" ƌt)Ȳ. ոƴX    0x  @  X   iȲ. 0Őǔ  Š\    ,     ptD  X  JŵȲ. XՔ  X   pXՔ  X  `  0x   x  D  |   `    <p, t      ƌD  t    JŵȲ. X   pXՔ  X  ܭ   թXՔ      0Őǔ  1,   X  i1    Dht1     \  5  D  0iȲ. 
 
 
 
 
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\VisualStudio\VS10RTM\VisualStudioIntegration\Licenses\MSPL-ITA.txt ===
M i c r o s o f t   P u b l i c   L i c e n s e 
 
 
 
 L a   p r e s e n t e   l i c e n z a   d i s c i p l i n a   l ' u t i l i z z o   d e l   s o f t w a r e   a d   e s s a   a c c l u s o .   U t i l i z z a n d o   i l   s o f t w a r e   l ' u t e n t e   a c c e t t a   l e   c o n d i z i o n i   d e l l a   p r e s e n t e   l i c e n z a .   Q u a l o r a   l ' u t e n t e   n o n   a c c e t t i   l e   p r e s e n t i   c o n d i z i o n i ,   n o n   d e v e   u t i l i z z a r e   i l   s o f t w a r e . 
 
 
 
 1 .   D e f i n i z i o n i 
 
 I   t e r m i n i   " r i p r o d u r r e " ,   " r i p r o d u z i o n e " ,   " l a v o r o   d e r i v a t o "   e   " d i s t r i b u z i o n e "   h a n n o   l o   s t e s s o   s i g n i f i c a t o   a s s e g n a t o   l o r o   d a l l a   l e g g e   s t a t u n i t e n s e   s u l   c o p y r i g h t . 
 
 
 
 P e r   " c o n t r i b u t o "   s i   i n t e n d e   i l   s o f t w a r e   o r i g i n a l e ,   o p p u r e   q u a l s i a s i   a g g i u n t a   o   m o d i f i c a   a l   s o f t w a r e . 
 
 
 
 P e r   " a u t o r e   d i   c o n t r i b u t o "   s i   i n t e n d e   q u a l s i a s i   p e r s o n a   c h e   d i s t r i b u i s c e   i l   p r o p r i o   c o n t r i b u t o   a i   s e n s i   d e l l e   c o n d i z i o n i   d e l l a   p r e s e n t e   l i c e n z a . 
 
 
 
 P e r   " b r e v e t t i   c o n c e s s i   i n   l i c e n z a "   s i   i n t e n d o n o   i   d i r i t t i   d i   b r e v e t t o   d i   u n   a u t o r e   d i   c o n t r i b u t o   i n e r e n t i   a l   c o n t r i b u t o   s t e s s o . 
 
 
 
   
 
 
 
 2 .   C o n c e s s i o n e   d i   d i r i t t i 
 
 ( A )   C o n c e s s i o n e   d i   c o p y r i g h t .   N e l   r i s p e t t o   d e l l e   p r e s e n t i   c o n d i z i o n i   d i   l i c e n z a ,   i n c l u s e   l e   c o n d i z i o n i   e   l i m i t a z i o n i   d i   l i c e n z a   r i p o r t a t e   a l l ' a r t i c o l o   3 ,   c i a s c u n   a u t o r e   d i   c o n t r i b u t o   c o n c e d e   a l   l i c e n z i a t a r i o   u n a   l i c e n z a   d i   c o p y r i g h t   n o n   e s c l u s i v a ,   v a l i d a   i n   t u t t o   i l   m o n d o   e   g r a t u i t a   p e r   r i p r o d u r r e   i l   s u o   c o n t r i b u t o ,   c r e a r e   l a v o r i   d e r i v a t i   e   d i s t r i b u i r e   i l   c o n t r i b u t o   o   q u a l s i a s i   l a v o r o   d e r i v a t o   c r e a t o   d a l   l i c e n z i a t a r i o . 
 
 
 
 ( B )   C o n c e s s i o n e   r e l a t i v a   a i   d i r i t t i   d i   b r e v e t t o .   S u b o r d i n a t a m e n t e   a l l e   p r e s e n t i   c o n d i z i o n i   d i   l i c e n z a ,   i n c l u s e   l e   c o n d i z i o n i   e   l i m i t a z i o n i   d i   l i c e n z a   r i p o r t a t e   a l l ' a r t i c o l o   3 ,   c i a s c u n   a u t o r e   d i   c o n t r i b u t o   c o n c e d e   a l   l i c e n z i a t a r i o   u n a   l i c e n z a   n o n   e s c l u s i v a ,   v a l i d a   i n   t u t t o   i l   m o n d o   e   g r a t u i t a ,   r e l a t i v a   a i   s u o i   b r e v e t t i   d i   e f f e t t u a r e ,   d i   f a r   e f f e t t u a r e   d a   a l t r i ,   u t i l i z z a r e ,   v e n d e r e ,   o f f r i r e   i n   v e n d i t a ,   i m p o r t a r e   e / o   d i v e r s a m e n t e   d i s p o r r e   d e l   s u o   c o n t r i b u t o   r e l a t i v o   a l   s o f t w a r e   o   a i   l a v o r i   d e r i v a t i . 
 
 
 
 3 .   C o n d i z i o n i   e   l i m i t a z i o n i 
 
 ( A )   N e s s u n a   l i c e n z a   r e l a t i v a   a i   m a r c h i .   L a   p r e s e n t e   l i c e n z a   n o n   c o n c e d e   a l   l i c e n z i a t a r i o   i l   d i r i t t o   d i   u t i l i z z a r e   i l   n o m e ,   i l   l o g o   o   i l   m a r c h i o   d e g l i   a u t o r i   d i   c o n t r i b u t o . 
 
 
 
 ( B )   I n   c a s o   d i   r e c l a m o   p r e s e n t a t o   d a l   l i c e n z i a t a r i o   c o n t r o   q u a l s i a s i   a u t o r e   d i   c o n t r i b u t o   a v e n t e   a d   o g g e t t o   l a   v i o l a z i o n e   d i   b r e v e t t i   d a   p a r t e   d e l   s o f t w a r e ,   l a   r e l a t i v a   l i c e n z a   i n e r e n t e   a l   b r e v e t t o   d e l   s o f t w a r e   c o n c e s s a   d a l l ' a u t o r e   d i   c o n t r i b u t o   a l   l i c e n z i a t a r i o   c e s s a   a u t o m a t i c a m e n t e . 
 
 
 
 ( C )   I n   c a s o   d i   d i s t r i b u z i o n e   d a   p a r t e   d e l   l i c e n z i a t a r i o   d i   q u a l s i a s i   c o m p o n e n t e   d e l   s o f t w a r e ,   i l   l i c e n z i a t a r i o   s i   i m p e g n a   a   m a n t e n e r e   t u t t e   l e   c o m u n i c a z i o n i   d i   c o p y r i g h t ,   b r e v e t t o ,   m a r c h i o   e   a t t r i b u z i o n e   p r e s e n t i   n e l   s o f t w a r e . 
 
 
 
 ( D )   L a   d i s t r i b u z i o n e   d i   q u a l s i a s i   c o m p o n e n t e   d e l   s o f t w a r e   i n   f o r m a   d i   c o d i c e   s o r g e n t e      c o n c e s s a   s o l o   a i   s e n s i   d e l l a   p r e s e n t e   l i c e n z a   e   u n a   c o p i a   c o m p l e t a   d e l l a   p r e s e n t e   l i c e n z a   d o v r    e s s e r e   a c c l u s a   a l   m o m e n t o   d e l l a   d i s t r i b u z i o n e   d a   p a r t e   d e l   l i c e n z i a t a r i o   d e i   p r e d e t t i   c o m p o n e n t i .   I l   l i c e n z i a t a r i o   p u    d i s t r i b u i r e   i   c o m p o n e n t i   d e l   s o f t w a r e   i n   f o r m a   d i   c o d i c e   o g g e t t o   o   c o m p i l a t o   s o l o   a i   s e n s i   d i   u n a   l i c e n z a   c h e   s i a   c o n f o r m e   a l l e   c o n d i z i o n i   d e l l a   p r e s e n t e   l i c e n z a . 
 
 
 
 ( E )   I l   s o f t w a r e      c o n c e s s o   i n   l i c e n z a   " c o s    c o m '  " .   I l   l i c e n z i a t a r i o   s i   a s s u m e   o g n i   r i s c h i o   d e r i v a n t e   d a l l ' u t i l i z z o   d e l   s o f t w a r e .   G l i   a u t o r i   d i   c o n t r i b u t o   n o n   f o r n i s c o n o   g a r a n z i e   o   c o n d i z i o n i   e s p l i c i t e .   L a   p r e s e n t e   l i c e n z a   n o n   m o d i f i c a   g l i   e v e n t u a l i   d i r i t t i   a   t u t e l a   d e i   c o n s u m a t o r i   r i c o n o s c i u t i   a l   l i c e n z i a t a r i o   d a l l a   l e g g e   l o c a l e .   N e l l a   m i s u r a   m a s s i m a   c o n s e n t i t a   d a l l a   l e g g e   l o c a l e   d e l   l i c e n z i a t a r i o ,   l ' a u t o r e   d i   c o n t r i b u t o   e s c l u d e   e v e n t u a l i   g a r a n z i e   i m p l i c i t e   d i   c o m m e r c i a b i l i t  ,   d i   i d o n e i t    p e r   u n o   s c o p o   s p e c i f i c o   e   d i   n o n   v i o l a z i o n e   d e i   d i r i t t i   a l t r u i . 
 
 
 
 
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\VisualStudio\VS10RTM\VisualStudioIntegration\Licenses\MSPL-RUS.txt ===
C1;8G=0O;8F5=78O  :>@?>@