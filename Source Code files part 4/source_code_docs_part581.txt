m.UInt16.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Int64)">
      <summary>
                    Converts the value of the specified 64-bit signed integer to an equivalent 16-bit unsigned integer.
                </summary>
      <returns>
                    A 16-bit unsigned integer equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 64-bit signed integer. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt16.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Object)">
      <summary>
                    Converts the value of the specified <see cref="T:System.Object" /> to a 16-bit unsigned integer.
                </summary>
      <returns>
                    A 16-bit unsigned integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.
                </returns>
      <param name="value">
                    An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or null. 
                </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)">
      <summary>
                    Converts the value of the specified <see cref="T:System.Object" /> to a 16-bit unsigned integer using the specified culture-specific formatting information.
                </summary>
      <returns>
                    A 16-bit unsigned integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.
                </returns>
      <param name="value">
                    An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
    </member>
    <member name="M:System.Convert.ToUInt16(System.SByte)">
      <summary>
                    Converts the value of the specified 8-bit signed integer to the equivalent 16-bit unsigned integer.
                </summary>
      <returns>
                    The 16-bit unsigned integer equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    An 8-bit signed integer. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero. 
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Single)">
      <summary>
                    Converts the value of the specified single-precision floating point number to an equivalent 16-bit unsigned integer.
                </summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 16-bit unsigned integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.
                </returns>
      <param name="value">
                    A single-precision floating point number. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt16.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.String)">
      <summary>
                    Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent 16-bit unsigned integer.
                </summary>
      <returns>
                    A 16-bit unsigned integer equivalent to the value of <paramref name="value" />.
                
                    -or- 
                
                    Zero if <paramref name="value" /> is null.
                </returns>
      <param name="value">
                    A <see cref="T:System.String" /> containing a number to convert. 
                </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (zero through nine). 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.String,System.IFormatProvider)">
      <summary>
                    Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent 16-bit unsigned integer using specified culture-specific formatting information.
                </summary>
      <returns>
                    A 16-bit unsigned integer equivalent to the value of <paramref name="value" />.
                
                    -or- 
                
                    Zero if <paramref name="value" /> is null.
                </returns>
      <param name="value">
                    A <see cref="T:System.String" /> containing a number to convert. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (zero through nine). 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.String,System.Int32)">
      <summary>
                    Converts the string representation of a number in a specified base to an equivalent 16-bit unsigned integer.
                </summary>
      <returns>
                    A 16-bit unsigned integer equivalent to the number in <paramref name="value" />.
                
                    -or- 
                
                    Zero if <paramref name="value" /> is null.
                </returns>
      <param name="value">
                    A string containing a number. 
                </param>
      <param name="fromBase">
                    The base of the number in <paramref name="value" />, which must be 2, 8, 10, or 16. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> is not 2, 8, 10, or 16. 
                
                    -or-
                <paramref name="value" />, which represents a non-base 10 unsigned number, is prefixed with a negative sign. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> contains a character that is not a valid digit in the base specified by <paramref name="fromBase" />. The exception message indicates that there are no digits to convert if the first character in <paramref name="value" /> is invalid; otherwise, the message indicates that <paramref name="value" /> contains invalid trailing characters.
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />, which represents a non-base 10 unsigned number, is prefixed with a negative sign.
                
                    -or-
                
                    The return value is less than <see cref="F:System.UInt16.MinValue" /> or larger than <see cref="F:System.UInt16.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.UInt16)">
      <summary>
                    Returns the specified 16-bit unsigned integer; no actual conversion is performed.
                </summary>
      <returns>
                    Parameter <paramref name="value" /> is returned unchanged.
                </returns>
      <param name="value">
                    A 16-bit unsigned integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToUInt16(System.UInt32)">
      <summary>
                    Converts the value of the specified 32-bit unsigned integer to an equivalent 16-bit unsigned integer.
                </summary>
      <returns>
                    A 16-bit unsigned integer equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 32-bit unsigned integer. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.UInt16.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.UInt64)">
      <summary>
                    Converts the value of the specified 64-bit unsigned integer to an equivalent 16-bit unsigned integer.
                </summary>
      <returns>
                    A 16-bit unsigned integer equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 64-bit unsigned integer. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.UInt16.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Boolean)">
      <summary>
                    Converts the value of the specified Boolean value to the equivalent 32-bit unsigned integer.
                </summary>
      <returns>
                    The number 1 if <paramref name="value" /> is true; otherwise, 0.
                </returns>
      <param name="value">
                    A Boolean value. 
                </param>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Byte)">
      <summary>
                    Converts the value of the specified 8-bit unsigned integer to the equivalent 32-bit unsigned integer.
                </summary>
      <returns>
                    The 32-bit unsigned integer equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    An 8-bit unsigned integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Char)">
      <summary>
                    Converts the value of the specified Unicode character to the equivalent 32-bit unsigned integer.
                </summary>
      <returns>
                    The 32-bit unsigned integer equivalent to <paramref name="value" />.
                </returns>
      <param name="value">
                    A Unicode character. 
                </param>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Decimal)">
      <summary>
                    Converts the value of the specified <see cref="T:System.Decimal" /> number to an equivalent 32-bit unsigned integer.
                </summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 32-bit unsigned integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.
                </returns>
      <param name="value">
                    A <see cref="T:System.Decimal" /> number. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt32.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Double)">
      <summary>
                    Converts the value of the specified double-precision floating point number to an equivalent 32-bit unsigned integer.
                </summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 32-bit unsigned integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.
                </returns>
      <param name="value">
                    A double-precision floating point number. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt32.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Int16)">
      <summary>
                    Converts the value of the specified 16-bit signed integer to the equivalent 32-bit unsigned integer.
                </summary>
      <returns>
                    The 32-bit unsigned integer equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 16-bit signed integer. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero. 
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Int32)">
      <summary>
                    Converts the value of the specified 32-bit signed integer to an equivalent 32-bit unsigned integer.
                </summary>
      <returns>
                    The 32-bit unsigned integer equivalent of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 32-bit signed integer. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero. 
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Int64)">
      <summary>
                    Converts the value of the specified 64-bit signed integer to an equivalent 32-bit unsigned integer.
                </summary>
      <returns>
                    A 32-bit unsigned integer equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 64-bit signed integer. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt32.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Object)">
      <summary>
                    Converts the value of the specified <see cref="T:System.Object" /> to a 32-bit unsigned integer.
                </summary>
      <returns>
                    A 32-bit unsigned integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.
                </returns>
      <param name="value">
                    An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or null. 
                </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)">
      <summary>
                    Converts the value of the specified <see cref="T:System.Object" /> to a 32-bit unsigned integer using the specified culture-specific formatting information.
                </summary>
      <returns>
                    A 32-bit unsigned integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.
                </returns>
      <param name="value">
                    An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
    </member>
    <member name="M:System.Convert.ToUInt32(System.SByte)">
      <summary>
                    Converts the value of the specified 8-bit signed integer to the equivalent 32-bit unsigned integer.
                </summary>
      <returns>
                    The 8-bit unsigned integer equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    An 8-bit signed integer. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero. 
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Single)">
      <summary>
                    Converts the value of the specified single-precision floating point number to an equivalent 32-bit unsigned integer.
                </summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 32-bit unsigned integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.
                </returns>
      <param name="value">
                    A single-precision floating point number. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt32.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.String)">
      <summary>
                    Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent 32-bit unsigned integer.
                </summary>
      <returns>
                    A 32-bit unsigned integer equivalent to the value of <paramref name="value" />.
                
                    -or- 
                
                    Zero if <paramref name="value" /> is null.
                </returns>
      <param name="value">
                    A <see cref="T:System.String" /> containing a number to convert. 
                </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (zero through nine). 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.String,System.IFormatProvider)">
      <summary>
                    Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent 32-bit unsigned integer using the specified culture-specific formatting information.
                </summary>
      <returns>
                    A 32-bit unsigned integer equivalent to the value of <paramref name="value" />.
                
                    -or- 
                
                    Zero if <paramref name="value" /> is null.
                </returns>
      <param name="value">
                    A <see cref="T:System.String" /> containing a number to convert. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (zero through nine). 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.String,System.Int32)">
      <summary>
                    Converts the string representation of a number in a specified base to an equivalent 32-bit unsigned integer.
                </summary>
      <returns>
                    A 32-bit unsigned integer equivalent to the number in <paramref name="value" />.
                
                    -or- 
                
                    Zero if <paramref name="value" /> is null.
                </returns>
      <param name="value">
                    A string containing a number. 
                </param>
      <param name="fromBase">
                    The base of the number in <paramref name="value" />, which must be 2, 8, 10, or 16. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> is not 2, 8, 10, or 16. 
                
                    -or-
                <paramref name="value" />, which represents a non-base 10 unsigned number, is prefixed with a negative sign. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> contains a character that is not a valid digit in the base specified by <paramref name="fromBase" />. The exception message indicates that there are no digits to convert if the first character in <paramref name="value" /> is invalid; otherwise, the message indicates that <paramref name="value" /> contains invalid trailing characters.
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />, which represents a non-base 10 unsigned number, is prefixed with a negative sign.
                
                    -or-
                
                    The return value is less than <see cref="F:System.UInt32.MinValue" /> or larger than <see cref="F:System.UInt32.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.UInt16)">
      <summary>
                    Converts the value of the specified 16-bit unsigned integer to the equivalent 32-bit unsigned integer.
                </summary>
      <returns>
                    The 32-bit unsigned integer equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 16-bit unsigned integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToUInt32(System.UInt32)">
      <summary>
                    Returns the specified 32-bit unsigned integer; no actual conversion is performed.
                </summary>
      <returns>
                    Parameter <paramref name="value" /> is returned unchanged.
                </returns>
      <param name="value">
                    A 32-bit unsigned integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToUInt32(System.UInt64)">
      <summary>
                    Converts the value of the specified 64-bit unsigned integer to an equivalent 32-bit unsigned integer.
                </summary>
      <returns>
                    A 32-bit unsigned integer equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 64-bit unsigned integer. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.UInt32.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Boolean)">
      <summary>
                    Converts the value of the specified Boolean value to the equivalent 64-bit unsigned integer.
                </summary>
      <returns>
                    The number 1 if <paramref name="value" /> is true; otherwise, 0.
                </returns>
      <param name="value">
                    A Boolean value. 
                </param>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Byte)">
      <summary>
                    Converts the value of the specified 8-bit unsigned integer to the equivalent 64-bit signed integer.
                </summary>
      <returns>
                    The 64-bit signed integer equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    An 8-bit unsigned integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Char)">
      <summary>
                    Converts the value of the specified Unicode character to the equivalent 64-bit unsigned integer.
                </summary>
      <returns>
                    The 64-bit unsigned integer equivalent to <paramref name="value" />.
                </returns>
      <param name="value">
                    A Unicode character. 
                </param>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Decimal)">
      <summary>
                    Converts the value of the specified <see cref="T:System.Decimal" /> number to an equivalent 64-bit unsigned integer.
                </summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 64-bit unsigned integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.
                </returns>
      <param name="value">
                    A <see cref="T:System.Decimal" /> number. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt64.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Double)">
      <summary>
                    Converts the value of the specified double-precision floating point number to an equivalent 64-bit unsigned integer.
                </summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 64-bit unsigned integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.
                </returns>
      <param name="value">
                    A double-precision floating point number. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt64.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Int16)">
      <summary>
                    Converts the value of the specified 16-bit signed integer to the equivalent 64-bit unsigned integer.
                </summary>
      <returns>
                    The 64-bit unsigned integer equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 16-bit signed integer. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero. 
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Int32)">
      <summary>
                    Converts the value of the specified 32-bit signed integer to an equivalent 64-bit unsigned integer.
                </summary>
      <returns>
                    The 64-bit unsigned integer equivalent of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 32-bit signed integer. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero. 
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Int64)">
      <summary>
                    Converts the value of the specified 64-bit signed integer to an equivalent 64-bit unsigned integer.
                </summary>
      <returns>
                    A 64-bit unsigned integer equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 64-bit signed integer. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero. 
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Object)">
      <summary>
                    Converts the value of the specified <see cref="T:System.Object" /> to a 64-bit unsigned integer.
                </summary>
      <returns>
                    A 64-bit unsigned integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.
                </returns>
      <param name="value">
                    An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or null. 
                </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)">
      <summary>
                    Converts the value of the specified <see cref="T:System.Object" /> to a 64-bit unsigned integer using the specified culture-specific formatting information.
                </summary>
      <returns>
                    A 64-bit unsigned integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.
                </returns>
      <param name="value">
                    An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
    </member>
    <member name="M:System.Convert.ToUInt64(System.SByte)">
      <summary>
                    Converts the value of the specified 8-bit signed integer to the equivalent 64-bit unsigned integer.
                </summary>
      <returns>
                    The 64-bit unsigned integer equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    An 8-bit signed integer. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero. 
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Single)">
      <summary>
                    Converts the value of the specified single-precision floating point number to an equivalent 64-bit unsigned integer.
                </summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 64-bit unsigned integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.
                </returns>
      <param name="value">
                    A single-precision floating point number. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt64.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.String)">
      <summary>
                    Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent 64-bit signed integer.
                </summary>
      <returns>
                    A 64-bit signed integer equivalent to the value of <paramref name="value" />.
                
                    -or- 
                
                    Zero if <paramref name="value" /> is null.
                </returns>
      <param name="value">
                    A <see cref="T:System.String" /> containing a number to convert. 
                </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (zero through nine). 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.String,System.IFormatProvider)">
      <summary>
                    Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent 64-bit unsigned integer using the specified culture-specific formatting information.
                </summary>
      <returns>
                    A 64-bit unsigned integer equivalent to the value of <paramref name="value" />.
                
                    -or- 
                
                    Zero if <paramref name="value" /> is null.
                </returns>
      <param name="value">
                    A <see cref="T:System.String" /> containing a number to convert. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (zero through nine). 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.String,System.Int32)">
      <summary>
                    Converts the string representation of a number in a specified base to an equivalent 64-bit unsigned integer.
                </summary>
      <returns>
                    A 64-bit unsigned integer equivalent to the number in <paramref name="value" />.
                
                    -or- 
                
                    Zero if <paramref name="value" /> is null.
                </returns>
      <param name="value">
                    A string containing a number. 
                </param>
      <param name="fromBase">
                    The base of the number in <paramref name="value" />, which must be 2, 8, 10, or 16. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> is not 2, 8, 10, or 16. 
                
                    -or-
                <paramref name="value" />, which represents a non-base 10 unsigned number, is prefixed with a negative sign. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> contains a character that is not a valid digit in the base specified by <paramref name="fromBase" />. The exception message indicates that there are no digits to convert if the first character in <paramref name="value" /> is invalid; otherwise, the message indicates that <paramref name="value" /> contains invalid trailing characters.
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />, which represents a non-base 10 unsigned number, is prefixed with a negative sign.
                
                    -or-
                
                    The return value is less than <see cref="F:System.UInt64.MinValue" /> or larger than <see cref="F:System.UInt64.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.UInt16)">
      <summary>
                    Converts the value of the specified 16-bit unsigned integer to the equivalent 64-bit unsigned integer.
                </summary>
      <returns>
                    The 64-bit unsigned integer equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 16-bit unsigned integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToUInt64(System.UInt32)">
      <summary>
                    Converts the value of the specified 32-bit unsigned integer to an equivalent 64-bit unsigned integer.
                </summary>
      <returns>
                    The 64-bit unsigned integer equivalent of <paramref name="value" />.
                </returns>
      <param name="value">
                    A 32-bit unsigned integer. 
                </param>
    </member>
    <member name="M:System.Convert.ToUInt64(System.UInt64)">
      <summary>
                    Returns the specified 64-bit unsigned integer; no actual conversion is performed.
                </summary>
      <returns>
                    Parameter <paramref name="value" /> is returned unchanged.
                </returns>
      <param name="value">
                    A 64-bit unsigned integer. 
                </param>
    </member>
    <member name="T:System.Converter`2">
      <summary>
                    Represents a method that converts an object from one type to another type.
                </summary>
      <returns>
                    The <paramref name="TOutput" /> that represents the converted <paramref name="TInput" />.
                </returns>
      <param name="input">
                    The object to convert.
                </param>
      <typeparam name="TInput">
                    The type of object that is to be converted.
                </typeparam>
      <typeparam name="TOutput">
                    The type the input object is to be converted to.
                </typeparam>
    </member>
    <member name="T:System.DataMisalignedException">
      <summary>
                    The exception that is thrown when a unit of data is read from or written to an address that is not a multiple of the data size. This class cannot be inherited.
                </summary>
    </member>
    <member name="T:System.DateTime">
      <summary>
                    Represents an instant in time, typically expressed as a date and time of day. 
                </summary>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, and day.
                </summary>
      <param name="year">
                    The year (1 through 9999). 
                </param>
      <param name="month">
                    The month (1 through 12). 
                </param>
      <param name="day">
                    The day (1 through the number of days in <paramref name="month" />). 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than 1 or greater than 9999.
                
                    -or- 
                <paramref name="month" /> is less than 1 or greater than 12.
                
                    -or- 
                <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />. 
                </exception>
      <exception cref="T:System.ArgumentException">
                    The specified parameters evaluate to less than <see cref="F:System.DateTime.MinValue" /> or more than <see cref="F:System.DateTime.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, and day for the specified calendar.
                </summary>
      <param name="year">
                    The year (1 through the number of years in <paramref name="calendar" />). 
                </param>
      <param name="month">
                    The month (1 through the number of months in <paramref name="calendar" />). 
                </param>
      <param name="day">
                    The day (1 through the number of days in <paramref name="month" />). 
                </param>
      <param name="calendar">
                    The <see cref="T:System.Globalization.Calendar" /> that applies to this <see cref="T:System.DateTime" />. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="calendar" /> is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is not in the range supported by <paramref name="calendar" />.
                
                    -or- 
                <paramref name="month" /> is less than 1 or greater than the number of months in <paramref name="calendar" />.
                
                    -or- 
                <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />. 
                </exception>
      <exception cref="T:System.ArgumentException">
                    Specified parameters evaluate to less than <see cref="F:System.DateTime.MinValue" /> or more than <see cref="F:System.DateTime.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, and second.
                </summary>
      <param name="year">
                    The year (1 through 9999). 
                </param>
      <param name="month">
                    The month (1 through 12). 
                </param>
      <param name="day">
                    The day (1 through the number of days in <paramref name="month" />). 
                </param>
      <param name="hour">
                    The hours (0 through 23). 
                </param>
      <param name="minute">
                    The minutes (0 through 59). 
                </param>
      <param name="second">
                    The seconds (0 through 59). 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than 1 or greater than 9999. 
                
                    -or- 
                <paramref name="month" /> is less than 1 or greater than 12. 
                
                    -or- 
                <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.
                
                    -or- 
                <paramref name="hour" /> is less than 0 or greater than 23. 
                
                    -or- 
                <paramref name="minute" /> is less than 0 or greater than 59. 
                
                    -or- 
                <paramref name="second" /> is less than 0 or greater than 59. 
                </exception>
      <exception cref="T:System.ArgumentException">
                    Specified parameters evaluate to less than <see cref="F:System.DateTime.MinValue" /> or more than <see cref="F:System.DateTime.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second, and Coordinated Universal Time (UTC) or local time.
                </summary>
      <param name="year">
                    The year (1 through 9999). 
                </param>
      <param name="month">
                    The month (1 through 12). 
                </param>
      <param name="day">
                    The day (1 through the number of days in <paramref name="month" />). 
                </param>
      <param name="hour">
                    The hours (0 through 23). 
                </param>
      <param name="minute">
                    The minutes (0 through 59). 
                </param>
      <param name="second">
                    The seconds (0 through 59). 
                </param>
      <param name="kind">
                    One of the <see cref="T:System.DateTimeKind" /> values that indicates whether <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, <paramref name="hour" />, <paramref name="minute" /> and <paramref name="second" /> specify a local time, Coordinated Universal Time (UTC), or neither.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than 1 or greater than 9999. 
                
                    -or- 
                <paramref name="month" /> is less than 1 or greater than 12. 
                
                    -or- 
                <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.
                
                    -or- 
                <paramref name="hour" /> is less than 0 or greater than 23. 
                
                    -or- 
                <paramref name="minute" /> is less than 0 or greater than 59. 
                
                    -or- 
                <paramref name="second" /> is less than 0 or greater than 59. 
                </exception>
      <exception cref="T:System.ArgumentException">
                    The specified time parameters evaluate to less than <see cref="F:System.DateTime.MinValue" /> or more than <see cref="F:System.DateTime.MaxValue" />. 
                
                    -or-
                <paramref name="kind" /> is not one of the <see cref="T:System.DateTimeKind" /> values.
                </exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, and second for the specified calendar.
                </summary>
      <param name="year">
                    The year (1 through the number of years in <paramref name="calendar" />). 
                </param>
      <param name="month">
                    The month (1 through the number of months in <paramref name="calendar" />). 
                </param>
      <param name="day">
                    The day (1 through the number of days in <paramref name="month" />). 
                </param>
      <param name="hour">
                    The hours (0 through 23). 
                </param>
      <param name="minute">
                    The minutes (0 through 59). 
                </param>
      <param name="second">
                    The seconds (0 through 59). 
                </param>
      <param name="calendar">
                    The <see cref="T:System.Globalization.Calendar" /> that applies to this <see cref="T:System.DateTime" />. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="calendar" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is not in the range supported by <paramref name="calendar" />.
                
                    -or- 
                <paramref name="month" /> is less than 1 or greater than the number of months in <paramref name="calendar" />.
                
                    -or- 
                <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.
                
                    -or- 
                <paramref name="hour" /> is less than 0 or greater than 23 
                
                    -or- 
                <paramref name="minute" /> is less than 0 or greater than 59. 
                
                    -or- 
                <paramref name="second" /> is less than 0 or greater than 59. 
                </exception>
      <exception cref="T:System.ArgumentException">
                    Specified parameters evaluate to less than <see cref="F:System.DateTime.MinValue" /> or more than <see cref="F:System.DateTime.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second, and millisecond.
                </summary>
      <param name="year">
                    The year (1 through 9999). 
                </param>
      <param name="month">
                    The month (1 through 12). 
                </param>
      <param name="day">
                    The day (1 through the number of days in <paramref name="month" />). 
                </param>
      <param name="hour">
                    The hours (0 through 23). 
                </param>
      <param name="minute">
                    The minutes (0 through 59). 
                </param>
      <param name="second">
                    The seconds (0 through 59). 
                </param>
      <param name="millisecond">
                    The milliseconds (0 through 999). 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than 1 or greater than 9999.
                
                    -or- 
                <paramref name="month" /> is less than 1 or greater than 12.
                
                    -or- 
                <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.
                
                    -or- 
                <paramref name="hour" /> is less than 0 or greater than 23.
                
                    -or- 
                <paramref name="minute" /> is less than 0 or greater than 59.
                
                    -or- 
                <paramref name="second" /> is less than 0 or greater than 59.
                
                    -or- 
                <paramref name="millisecond" /> is less than 0 or greater than 999. 
                </exception>
      <exception cref="T:System.ArgumentException">
                    Specified parameters evaluate to less than <see cref="F:System.DateTime.MinValue" /> or more than <see cref="F:System.DateTime.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second, millisecond, and Coordinated Universal Time (UTC) or local time.
                </summary>
      <param name="year">
                    The year (1 through 9999). 
                </param>
      <param name="month">
                    The month (1 through 12). 
                </param>
      <param name="day">
                    The day (1 through the number of days in <paramref name="month" />). 
                </param>
      <param name="hour">
                    The hours (0 through 23). 
                </param>
      <param name="minute">
                    The minutes (0 through 59). 
                </param>
      <param name="second">
                    The seconds (0 through 59). 
                </param>
      <param name="millisecond">
                    The milliseconds (0 through 999). 
                </param>
      <param name="kind">
                    One of the <see cref="T:System.DateTimeKind" /> values that indicates whether <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, <paramref name="hour" />, <paramref name="minute" />, <paramref name="second" />, and <paramref name="millisecond" /> specify a local time, Coordinated Universal Time (UTC), or neither.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than 1 or greater than 9999.
                
                    -or- 
                <paramref name="month" /> is less than 1 or greater than 12.
                
                    -or- 
                <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.
                
                    -or- 
                <paramref name="hour" /> is less than 0 or greater than 23.
                
                    -or- 
                <paramref name="minute" /> is less than 0 or greater than 59.
                
                    -or- 
                <paramref name="second" /> is less than 0 or greater than 59.
                
                    -or- 
                <paramref name="millisecond" /> is less than 0 or greater than 999. 
                </exception>
      <exception cref="T:System.ArgumentException">
                    The specified time parameters evaluate to less than <see cref="F:System.DateTime.MinValue" /> or more than <see cref="F:System.DateTime.MaxValue" />. 
                
                    -or-
                <paramref name="kind" /> is not one of the <see cref="T:System.DateTimeKind" /> values.
                </exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second, and millisecond for the specified calendar.
                </summary>
      <param name="year">
                    The year (1 through the number of years in <paramref name="calendar" />). 
                </param>
      <param name="month">
                    The month (1 through the number of months in <paramref name="calendar" />). 
                </param>
      <param name="day">
                    The day (1 through the number of days in <paramref name="month" />). 
                </param>
      <param name="hour">
                    The hours (0 through 23). 
                </param>
      <param name="minute">
                    The minutes (0 through 59). 
                </param>
      <param name="second">
                    The seconds (0 through 59). 
                </param>
      <param name="millisecond">
                    The milliseconds (0 through 999). 
                </param>
      <param name="calendar">
                    The <see cref="T:System.Globalization.Calendar" /> that applies to this <see cref="T:System.DateTime" />. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="calendar" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is not in the range supported by <paramref name="calendar" />.
                
                    -or- 
                <paramref name="month" /> is less than 1 or greater than the number of months in <paramref name="calendar" />.
                
                    -or- 
                <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.
                
                    -or- 
                <paramref name="hour" /> is less than 0 or greater than 23.
                
                    -or- 
                <paramref name="minute" /> is less than 0 or greater than 59.
                
                    -or- 
                <paramref name="second" /> is less than 0 or greater than 59.
                
                    -or- 
                <paramref name="millisecond" /> is less than 0 or greater than 999. 
                </exception>
      <exception cref="T:System.ArgumentException">
                    Specified parameters evaluate to less than <see cref="F:System.DateTime.MinValue" /> or more than <see cref="F:System.DateTime.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.DateTimeKind)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second, millisecond, and Coordinated Universal Time (UTC) or local time for the specified calendar.
                </summary>
      <param name="year">
                    The year (1 through the number of years in <paramref name="calendar" />). 
                </param>
      <param name="month">
                    The month (1 through the number of months in <paramref name="calendar" />). 
                </param>
      <param name="day">
                    The day (1 through the number of days in <paramref name="month" />). 
                </param>
      <param name="hour">
                    The hours (0 through 23). 
                </param>
      <param name="minute">
                    The minutes (0 through 59). 
                </param>
      <param name="second">
                    The seconds (0 through 59). 
                </param>
      <param name="millisecond">
                    The milliseconds (0 through 999). 
                </param>
      <param name="calendar">
                    The <see cref="T:System.Globalization.Calendar" /> object that applies to this <see cref="T:System.DateTime" /> object. 
                </param>
      <param name="kind">
                    One of the <see cref="T:System.DateTimeKind" /> values that indicates whether <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, <paramref name="hour" />, <paramref name="minute" />, <paramref name="second" />, and <paramref name="millisecond" /> specify a local time, Coordinated Universal Time (UTC), or neither.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="calendar" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is not in the range supported by <paramref name="calendar" />.
                
                    -or- 
                <paramref name="month" /> is less than 1 or greater than the number of months in <paramref name="calendar" />.
                
                    -or- 
                <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.
                
                    -or- 
                <paramref name="hour" /> is less than 0 or greater than 23.
                
                    -or- 
                <paramref name="minute" /> is less than 0 or greater than 59.
                
                    -or- 
                <paramref name="second" /> is less than 0 or greater than 59.
                
                    -or- 
                <paramref name="millisecond" /> is less than 0 or greater than 999. 
                </exception>
      <exception cref="T:System.ArgumentException">
                    The specified time parameters evaluate to less than <see cref="F:System.DateTime.MinValue" /> or more than <see cref="F:System.DateTime.MaxValue" />. 
                
                    -or-
                <paramref name="kind" /> is not one of the <see cref="T:System.DateTimeKind" /> values.
                </exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int64)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.DateTime" /> structure to a specified number of ticks.
                </summary>
      <param name="ticks">
                    A date and time expressed in 100-nanosecond units. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ticks" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int64,System.DateTimeKind)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.DateTime" /> structure to a specified number of ticks and to Coordinated Universal Time (UTC) or local time.
                </summary>
      <param name="ticks">
                    A date and time expressed in 100-nanosecond units. 
                </param>
      <param name="kind">
                    One of the <see cref="T:System.DateTimeKind" /> values that indicates whether <paramref name="ticks" /> specifies a local time, Coordinated Universal Time (UTC), or neither.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ticks" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="kind" /> is not one of the <see cref="T:System.DateTimeKind" /> values.
                </exception>
    </member>
    <member name="M:System.DateTime.Add(System.TimeSpan)">
      <summary>
                    Adds the value of the specified <see cref="T:System.TimeSpan" /> to the value of this instance.
                </summary>
      <returns>
                    A <see cref="T:System.DateTime" /> whose value is the sum of the date and time represented by this instance and the time interval represented by <paramref name="value" />.
                </returns>
      <param name="value">
                    A <see cref="T:System.TimeSpan" /> that represents a positive or negative time interval.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.DateTime.AddDays(System.Double)">
      <summary>
                    Adds the specified number of days to the value of this instance.
                </summary>
      <returns>
                    A <see cref="T:System.DateTime" /> whose value is the sum of the date and time represented by this instance and the number of days represented by <paramref name="value" />.
                </returns>
      <param name="value">
                    A number of whole and fractional days. The <paramref name="value" /> parameter can be negative or positive. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.DateTime.AddHours(System.Double)">
      <summary>
                    Adds the specified number of hours to the value of this instance.
                </summary>
      <returns>
                    A <see cref="T:System.DateTime" /> whose value is the sum of the date and time represented by this instance and the number of hours represented by <paramref name="value" />.
                </returns>
      <param name="value">
                    A number of whole and fractional hours. The <paramref name="value" /> parameter can be negative or positive. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.DateTime.AddMilliseconds(System.Double)">
      <summary>
                    Adds the specified number of milliseconds to the value of this instance.
                </summary>
      <returns>
                    A <see cref="T:System.DateTime" /> whose value is the sum of the date and time represented by this instance and the number of milliseconds represented by <paramref name="value" />.
                </returns>
      <param name="value">
                    A number of whole and fractional milliseconds. The <paramref name="value" /> parameter can be negative or positive. Note that this value is rounded to the nearest integer.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.DateTime.AddMinutes(System.Double)">
      <summary>
                    Adds the specified number of minutes to the value of this instance.
                </summary>
      <returns>
                    A <see cref="T:System.DateTime" /> whose value is the sum of the date and time represented by this instance and the number of minutes represented by <paramref name="value" />.
                </returns>
      <param name="value">
                    A number of whole and fractional minutes. The <paramref name="value" /> parameter can be negative or positive. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.DateTime.AddMonths(System.Int32)">
      <summary>
                    Adds the specified number of months to the value of this instance.
                </summary>
      <returns>
                    A <see cref="T:System.DateTime" /> whose value is the sum of the date and time represented by this instance and <paramref name="months" />.
                </returns>
      <param name="months">
                    A number of months. The <paramref name="months" /> parameter can be negative or positive. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.
                
                    -or- 
                <paramref name="months" /> is less than -120,000 or greater than 120,000. 
                </exception>
    </member>
    <member name="M:System.DateTime.AddSeconds(System.Double)">
      <summary>
                    Adds the specified number of seconds to the value of this instance.
                </summary>
      <returns>
                    A <see cref="T:System.DateTime" /> whose value is the sum of the date and time represented by this instance and the number of seconds represented by <paramref name="value" />.
                </returns>
      <param name="value">
                    A number of whole and fractional seconds. The <paramref name="value" /> parameter can be negative or positive. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.DateTime.AddTicks(System.Int64)">
      <summary>
                    Adds the specified number of ticks to the value of this instance.
                </summary>
      <returns>
                    A <see cref="T:System.DateTime" /> whose value is the sum of the date and time represented by this instance and the time represented by <paramref name="value" />.
                </returns>
      <param name="value">
                    A number of 100-nanosecond ticks. The <paramref name="value" /> parameter can be positive or negative. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.DateTime.AddYears(System.Int32)">
      <summary>
                    Adds the specified number of years to the value of this instance.
                </summary>
      <returns>
                    A <see cref="T:System.DateTime" /> whose value is the sum of the date and time represented by this instance and the number of years represented by <paramref name="value" />.
                </returns>
      <param name="value">
                    A number of years. The <paramref name="value" /> parameter can be negative or positive. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> or the resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.DateTime.Compare(System.DateTime,System.DateTime)">
      <summary>
                    Compares two instances of <see cref="T:System.DateTime" /> and returns an integer that indicates whether the first <see cref="T:System.DateTime" /> instance is earlier than, the same as, or later than the second <see cref="T:System.DateTime" /> instance.
                </summary>
      <returns>
                    A signed number indicating the relative values of <paramref name="t1" /> and <paramref name="t2" />.
                
                    Value Type 
                
                    Condition 
                
                    Less than zero 
                <paramref name="t1" /> is earlier than <paramref name="t2" />. 
                
                    Zero 
                <paramref name="t1" /> is the same as <paramref name="t2" />. 
                
                    Greater than zero 
                <paramref name="t1" /> is later than <paramref name="t2" />. 
                </returns>
      <param name="t1">
                    The first <see cref="T:System.DateTime" />. 
                </param>
      <param name="t2">
                    The second <see cref="T:System.DateTime" />. 
                </param>
    </member>
    <member name="M:System.DateTime.CompareTo(System.DateTime)">
      <summary>
                    Compares the value of this instance to a specified <see cref="T:System.DateTime" /> value and returns an integer that indicates whether this instance is earlier than, the same as, or later than the specified <see cref="T:System.DateTime" /> value.
                </summary>
      <returns>
                    A signed number indicating the relative values of this instance and the <paramref name="value" /> parameter.
                
                    Value 
                
                    Description 
                
                    Less than zero 
                
                    This instance is earlier than <paramref name="value" />. 
                
                    Zero 
                
                    This instance is the same as <paramref name="value" />. 
                
                    Greater than zero 
                
                    This instance is later than <paramref name="value" />. 
                </returns>
      <param name="value">
                    A <see cref="T:System.DateTime" /> object to compare. 
                </param>
    </member>
    <member name="M:System.DateTime.CompareTo(System.Object)">
      <summary>
                    Compares the value of this instance to a specified object that contains a specified <see cref="T:System.DateTime" /> value, and returns an integer that indicates whether this instance is earlier than, the same as, or later than the specified <see cref="T:System.DateTime" /> value.
                </summary>
      <returns>
                    A signed number indicating the relative values of this instance and <paramref name="value" />.
                
                    Value 
                
                    Description 
                
                    Less than zero 
                
                    This instance is earlier than <paramref name="value" />. 
                
                    Zero 
                
                    This instance is the same as <paramref name="value" />. 
                
                    Greater than zero 
                
                    This instance is later than <paramref name="value" />, or <paramref name="value" /> is null. 
                </returns>
      <param name="value">
                    A boxed <see cref="T:System.DateTime" /> object to compare, or null. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.DateTime" />. 
                </exception>
    </member>
    <member name="P:System.DateTime.Date">
      <summary>
                    Gets the date component of this instance.
                </summary>
      <returns>
                    A new <see cref="T:System.DateTime" /> with the same date as this instance, and the time value set to 12:00:00 midnight (00:00:00).
                </returns>
    </member>
    <member name="P:System.DateTime.Day">
      <summary>
                    Gets the day of the month represented by this instance.
                </summary>
      <returns>
                    The day component, expressed as a value between 1 and 31.
                </returns>
    </member>
    <member name="P:System.DateTime.DayOfWeek">
      <summary>
                    Gets the day of the week represented by this instance.
                </summary>
      <returns>
                    A <see cref="T:System.DayOfWeek" /> enumerated constant that indicates the day of the week of this <see cref="T:System.DateTime" /> value. 
                </returns>
    </member>
    <member name="P:System.DateTime.DayOfYear">
      <summary>
                    Gets the day of the year represented by this instance.
                </summary>
      <returns>
                    The day of the year, expressed as a value between 1 and 366.
                </returns>
    </member>
    <member name="M:System.DateTime.DaysInMonth(System.Int32,System.Int32)">
      <summary>
                    Returns the number of days in the specified month and year.
                </summary>
      <returns>
                    The number of days in <paramref name="month" /> for the specified <paramref name="year" />.
                
                    For example, if <paramref name="month" /> equals 2 for February, the return value is 28 or 29 depending upon whether <paramref name="year" /> is a leap year.
                </returns>
      <param name="year">
                    The year. 
                </param>
      <param name="month">
                    The month (a number ranging from 1 to 12). 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="month" /> is less than 1 or greater than 12.
                
                    -or-
                <paramref name="year" /> is less than 1 or greater than 9999.
                </exception>
    </member>
    <member name="M:System.DateTime.Equals(System.DateTime)">
      <summary>
                    Returns a value indicating whether this instance is equal to the specified <see cref="T:System.DateTime" /> instance.
                </summary>
      <returns>true if the <paramref name="value" /> parameter equals the value of this instance; otherwise, false.
                </returns>
      <param name="value">
                    A <see cref="T:System.DateTime" /> instance to compare to this instance. 
                </param>
    </member>
    <member name="M:System.DateTime.Equals(System.DateTime,System.DateTime)">
      <summary>
                    Returns a value indicating whether two instances of <see cref="T:System.DateTime" /> are equal.
                </summary>
      <returns>true if the two <see cref="T:System.DateTime" /> values are equal; otherwise, false.
                </returns>
      <param name="t1">
                    The first <see cref="T:System.DateTime" /> instance. 
                </param>
      <param name="t2">
                    The second <see cref="T:System.DateTime" /> instance. 
                </param>
    </member>
    <member name="M:System.DateTime.Equals(System.Object)">
      <summary>
                    Returns a value indicating whether this instance is equal to a specified object.
                </summary>
      <returns>true if <paramref name="value" /> is an instance of <see cref="T:System.DateTime" /> and equals the value of this instance; otherwise, false.
                </returns>
      <param name="value">
                    An object to compare to this instance. 
                </param>
    </member>
    <member name="M:System.DateTime.FromFileTime(System.Int64)">
      <summary>
                    Converts the specified Windows file time to an equivalent local time.
                </summary>
      <returns>
                    A <see cref="T:System.DateTime" /> object that represents a local time equivalent to the date and time represented by the <paramref name="fileTime" /> parameter.
                </returns>
      <param name="fileTime">
                    A Windows file time expressed in ticks. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="fileTime" /> is less than 0 or represents a time greater than <see cref="F:System.DateTime.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.DateTime.FromFileTimeUtc(System.Int64)">
      <summary>
                    Converts the specified Windows file time to an equivalent UTC time.
                </summary>
      <returns>
                    A <see cref="T:System.DateTime" /> object that represents a UTC time equivalent to the date and time represented by the <paramref name="fileTime" /> parameter.
                </returns>
      <param name="fileTime">
                    A Windows file time expressed in ticks. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="fileTime" /> is less than 0 or represents a time greater than <see cref="F:System.DateTime.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.DateTime.FromOADate(System.Double)">
      <summary>
                    Returns a <see cref="T:System.DateTime" /> equivalent to the specified OLE Automation Date.
                </summary>
      <returns>
                    A <see cref="T:System.DateTime" /> that represents the same date and time as <paramref name="d" />.
                </returns>
      <param name="d">
                    An OLE Automation Date value. 
                </param>
      <exception cref="T:System.ArgumentException">
                    The date is not a valid OLE Automation Date value. 
                </exception>
    </member>
    <member name="M:System.DateTime.GetHashCode">
      <summary>
                    Returns the hash code for this instance.
                </summary>
      <returns>
                    A 32-bit signed integer hash code.
                </returns>
    </member>
    <member name="M:System.DateTime.GetTypeCode">
      <summary>
                    Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    The enumerated constant, <see cref="F:System.TypeCode.DateTime" />.
                </returns>
    </member>
    <member name="P:System.DateTime.Hour">
      <summary>
                    Gets the hour component of the date represented by this instance.
                </summary>
      <returns>
                    The hour component, expressed as a value between 0 and 23.
                </returns>
    </member>
    <member name="M:System.DateTime.IsDaylightSavingTime">
      <summary>
                    Indicates whether this instance of <see cref="T:System.DateTime" /> is within the Daylight Saving Time range for the current time zone.
                </summary>
      <returns>true if <see cref="P:System.DateTime.Kind" /> is <see cref="F:System.DateTimeKind.Local" /> or <see cref="F:System.DateTimeKind.Unspecified" /> and the value of this instance of <see cref="T:System.DateTime" /> is within the Daylight Saving Time range for the current time zone. false if <see cref="P:System.DateTime.Kind" /> is <see cref="F:System.DateTimeKind.Utc" />.
                </returns>
    </member>
    <member name="M:System.DateTime.IsLeapYear(System.Int32)">
      <summary>
                    Returns an indication whether the specified year is a leap year.
                </summary>
      <returns>true if <paramref name="year" /> is a leap year; otherwise, false.
                </returns>
      <param name="year">
                    A 4-digit year. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than 1 or greater than 9999.
                </exception>
    </member>
    <member name="P:System.DateTime.Kind">
      <summary>
                    Gets a value that indicates whether the time represented by this instance is based on local time, Coordinated Universal Time (UTC), or neither.
                </summary>
      <returns>
                    One of the <see cref="T:System.DateTimeKind" /> values. The default is <see cref="F:System.DateTimeKind.Unspecified" />.
                </returns>
    </member>
    <member name="F:System.DateTime.MaxValue">
      <summary>
                    Represents the largest possible value of <see cref="T:System.DateTime" />. This field is read-only.
                </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="F:System.DateTime.MaxValue" /> is outside the range of the current culture's default calendar or of a specified culture's default calendar.
                </exception>
    </member>
    <member name="P:System.DateTime.Millisecond">
      <summary>
                    Gets the milliseconds component of the date represented by this instance.
                </summary>
      <returns>
                    The milliseconds component, expressed as a value between 0 and 999.
                </returns>
    </member>
    <member name="P:System.DateTime.Minute">
      <summary>
                    Gets the minute component of the date represented by this instance.
                </summary>
      <returns>
                    The minute component, expressed as a value between 0 and 59.
                </returns>
    </member>
    <member name="F:System.DateTime.MinValue">
      <summary>
                    Represents the smallest possible value of <see cref="T:System.DateTime" />. This field is read-only.
                </summary>
    </member>
    <member name="P:System.DateTime.Month">
      <summary>
                    Gets the month component of the date represented by this instance.
                </summary>
      <returns>
                    The month component, expressed as a value between 1 and 12.
                </returns>
    </member>
    <member name="P:System.DateTime.Now">
      <summary>
                    Gets a <see cref="T:System.DateTime" /> object that is set to the current date and time on this computer, expressed as the local time.
                </summary>
      <returns>
                    A <see cref="T:System.DateTime" /> whose value is the current local date and time.
                </returns>
    </member>
    <member name="M:System.DateTime.op_Addition(System.DateTime,System.TimeSpan)">
      <summary>
                    Adds a specified time interval to a specified date and time, yielding a new date and time.
                </summary>
      <returns>
                    A <see cref="T:System.DateTime" /> that is the sum of the values of <paramref name="d" /> and <paramref name="t" />.
                </returns>
      <param name="d">
                    A <see cref="T:System.DateTime" />. 
                </param>
      <param name="t">
                    A <see cref="T:System.TimeSpan" />. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.DateTime.op_Equality(System.DateTime,System.DateTime)">
      <summary>
                    Determines whether two specified instances of <see cref="T:System.DateTime" /> are equal.
                </summary>
      <returns>true if <paramref name="d1" /> and <paramref name="d2" /> represent the same date and time; otherwise, false.
                </returns>
      <param name="d1">
                    A <see cref="T:System.DateTime" />. 
                </param>
      <param name="d2">
                    A <see cref="T:System.DateTime" />. 
                </param>
    </member>
    <member name="M:System.DateTime.op_GreaterThan(System.DateTime,System.DateTime)">
      <summary>
                    Determines whether one specified <see cref="T:System.DateTime" /> is greater than another specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>true if <paramref name="t1" /> is greater than <paramref name="t2" />; otherwise, false.
                </returns>
      <param name="t1">
                    A <see cref="T:System.DateTime" />. 
                </param>
      <param name="t2">
                    A <see cref="T:System.DateTime" />. 
                </param>
    </member>
    <member name="M:System.DateTime.op_GreaterThanOrEqual(System.DateTime,System.DateTime)">
      <summary>
                    Determines whether one specified <see cref="T:System.DateTime" /> is greater than or equal to another specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>true if <paramref name="t1" /> is greater than or equal to <paramref name="t2" />; otherwise, false.
                </returns>
      <param name="t1">
                    A <see cref="T:System.DateTime" />. 
                </param>
      <param name="t2">
                    A <see cref="T:System.DateTime" />. 
                </param>
    </member>
    <member name="M:System.DateTime.op_Inequality(System.DateTime,System.DateTime)">
      <summary>
                    Determines whether two specified instances of <see cref="T:System.DateTime" /> are not equal.
                </summary>
      <returns>true if <paramref name="d1" /> and <paramref name="d2" /> do not represent the same date and time; otherwise, false.
                </returns>
      <param name="d1">
                    A <see cref="T:System.DateTime" />. 
                </param>
      <param name="d2">
                    A <see cref="T:System.DateTime" />. 
                </param>
    </member>
    <member name="M:System.DateTime.op_LessThan(System.DateTime,System.DateTime)">
      <summary>
                    Determines whether one specified <see cref="T:System.DateTime" /> is less than another specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>true if <paramref name="t1" /> is less than <paramref name="t2" />; otherwise, false.
                </returns>
      <param name="t1">
                    A <see cref="T:System.DateTime" />. 
                </param>
      <param name="t2">
                    A <see cref="T:System.DateTime" />. 
                </param>
    </member>
    <member name="M:System.DateTime.op_LessThanOrEqual(System.DateTime,System.DateTime)">
      <summary>
                    Determines whether one specified <see cref="T:System.DateTime" /> is less than or equal to another specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>true if <paramref name="t1" /> is less than or equal to <paramref name="t2" />; otherwise, false.
                </returns>
      <param name="t1">
                    A <see cref="T:System.DateTime" />. 
                </param>
      <param name="t2">
                    A <see cref="T:System.DateTime" />. 
                </param>
    </member>
    <member name="M:System.DateTime.op_Subtraction(System.DateTime,System.DateTime)">
      <summary>
                    Subtracts a specified date and time from another specified date and time and returns a time interval.
                </summary>
      <returns>
                    A <see cref="T:System.TimeSpan" /> that is the time interval between <paramref name="d1" /> and <paramref name="d2" />; that is, <paramref name="d1" /> minus <paramref name="d2" />.
                </returns>
      <param name="d1">
                    A <see cref="T:System.DateTime" /> (the minuend). 
                </param>
      <param name="d2">
                    A <see cref="T:System.DateTime" /> (the subtrahend). 
                </param>
    </member>
    <member name="M:System.DateTime.op_Subtraction(System.DateTime,System.TimeSpan)">
      <summary>
                    Subtracts a specified time interval from a specified date and time and returns a new date and time.
                </summary>
      <returns>
                    A <see cref="T:System.DateTime" /> whose value is the value of <paramref name="d" /> minus the value of <paramref name="t" />.
                </returns>
      <param name="d">
                    A <see cref="T:System.DateTime" />. 
                </param>
      <param name="t">
                    A <see cref="T:System.TimeSpan" />. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.DateTime.Parse(System.String)">
      <summary>
                    Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent.
                </summary>
      <returns>
                    A <see cref="T:System.DateTime" /> equivalent to the date and time contained in <paramref name="s" />.
                </returns>
      <param name="s">
                    A string containing a date and time to convert. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not contain a valid string representation of a date and time. 
                </exception>
    </member>
    <member name="M:System.DateTime.Parse(System.String,System.IFormatProvider)">
      <summary>
                    Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified culture-specific format information.
                </summary>
      <returns>
                    A <see cref="T:System.DateTime" /> equivalent to the date and time contained in <paramref name="s" /> as specified by <paramref name="provider" />.
                </returns>
      <param name="s">
                    A string containing a date and time to convert. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific format information about <paramref name="s" />. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not contain a valid string representation of a date and time. 
                </exception>
    </member>
    <member name="M:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>
                    Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified culture-specific format information and formatting style.
                </summary>
      <returns>
                    A <see cref="T:System.DateTime" /> equivalent to the date and time contained in <paramref name="s" /> as specified by <paramref name="provider" /> and <paramref name="styles" />.
                </returns>
      <param name="s">
                    A string containing a date and time to convert. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about <paramref name="s" />. 
                </param>
      <param name="styles">
                    A bitwise combination of the enumeration values that indicates the style elements that can be present in <paramref name="s" /> for the parse operation to succeed and that defines how to interpret the parsed date in relation to the current time zone or the current date. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not contain a valid string representation of a date and time. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values. For example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.
                </exception>
    </member>
    <member name="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)">
      <summary>
                    Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified format and culture-specific format information. The format of the string representation must match the specified format exactly.
                </summary>
      <returns>
                    A <see cref="T:System.DateTime" /> equivalent to the date and time contained in <paramref name="s" /> as specified by <paramref name="format" /> and <paramref name="provider" />.
                </returns>
      <param name="s">
                    A string that contains a date and time to convert. 
                </param>
      <param name="format">
                    A format specifier that defines the required format of <paramref name="s" />. 
                </param>
      <param name="provider">
                    An object that supplies culture-specific format information about <paramref name="s" />. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> or <paramref name="format" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> or <paramref name="format" /> is an empty string. 
                
                    -or- 
                <paramref name="s" /> does not contain a date and time that corresponds to the pattern specified in <paramref name="format" />. 
                </exception>
    </member>
    <member name="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>
                    Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified format, culture-specific format information, and style. The format of the string representation must match the specified format exactly or an exception is thrown.
                </summary>
      <returns>
                    A <see cref="T:System.DateTime" /> equivalent to the date and time contained in <paramref name="s" /> as specified by <paramref name="format" />, <paramref name="provider" />, and <paramref name="style" />.
                </returns>
      <param name="s">
                    A string containing a date and time to convert. 
                </param>
      <param name="format">
                    A format specifier that defines the required format of <paramref name="s" />. 
                </param>
      <param name="provider">
                    An object that supplies culture-specific formatting information about <paramref name="s" />. 
                </param>
      <param name="style">
                    A bitwise combination of the enumeration values that provides additional information about <paramref name="s" />, about style elements that may be present in <paramref name="s" />, or about the conversion from <paramref name="s" /> to a <see cref="T:System.DateTime" /> value. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> or <paramref name="format" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> or <paramref name="format" /> is an empty string. 
                
                    -or- 
                <paramref name="s" /> does not contain a date and time that corresponds to the pattern specified in <paramref name="format" />. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values. For example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.
                </exception>
    </member>
    <member name="M:System.DateTime.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>
                    Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified array of formats, culture-specific format information, and style. The format of the string representation must match at least one of the specified formats exactly or an exception is thrown.
                </summary>
      <returns>
                    A <see cref="T:System.DateTime" /> equivalent to the date and time contained in <paramref name="s" /> as specified by <paramref name="formats" />, <paramref name="provider" />, and <paramref name="style" />.
                </returns>
      <param name="s">
                    A string containing one or more dates and times to convert. 
                </param>
      <param name="formats">
                    An array of allowable formats of <paramref name="s" />. 
                </param>
      <param name="provider">
                    An object that supplies culture-specific format information about <paramref name="s" />. 
                </param>
      <param name="style">
                    A bitwise combination of <see cref="T:System.Globalization.DateTimeStyles" /> values that indicates the required format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> or <paramref name="formats" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is an empty string. 
                
                    -or- 
                
                    an element of <paramref name="formats" /> is an empty string. 
                
                    -or- 
                <paramref name="s" /> does not contain a date and time that corresponds to any element of <paramref name="formats" />. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values. For example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.
                </exception>
    </member>
    <member name="P:System.DateTime.Second">
      <summary>
                    Gets the seconds component of the date represented by this instance.
                </summary>
      <returns>
                    The seconds, between 0 and 59.
                </returns>
    </member>
    <member name="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)">
      <summary>
                    Creates a new <see cref="T:System.DateTime" /> object that represents the same time as the specified <see cref="T:System.DateTime" />, but is designated in either local time, Coordinated Universal Time (UTC), or neither, as indicated by the specified <see cref="T:System.DateTimeKind" /> value.
                </summary>
      <returns>
                    A new <see cref="T:System.DateTime" /> object consisting of the same time represented by the <paramref name="value" /> parameter and the <see cref="T:System.DateTimeKind" /> value specified by the <paramref name="kind" /> parameter.
                </returns>
      <param name="value">
                    A <see cref="T:System.DateTime" /> object.
                </param>
      <param name="kind">
                    One of the <see cref="T:System.DateTimeKind" /> values.
                </param>
    </member>
    <member name="M:System.DateTime.Subtract(System.DateTime)">
      <summary>
                    Subtracts the specified date and time from this instance.
                </summary>
      <returns>
                    A <see cref="T:System.TimeSpan" /> interval equal to the date and time represented by this instance minus the date and time represented by <paramref name="value" />.
                </returns>
      <param name="value">
                    An instance of <see cref="T:System.DateTime" />. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The result is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.DateTime.Subtract(System.TimeSpan)">
      <summary>
                    Subtracts the specified duration from this instance.
                </summary>
      <returns>
                    A <see cref="T:System.DateTime" /> equal to the date and time represented by this instance minus the time interval represented by <paramref name="value" />.
                </returns>
      <param name="value">
                    An instance of <see cref="T:System.TimeSpan" />. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The result is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>
                    This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.
                </summary>
      <returns>
                    The return value for this member is not used.
                </returns>
      <param name="provider">
                    An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)
                </param>
      <exception cref="T:System.InvalidCastException">
                    In all cases.
                </exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>
                    This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.
                </summary>
      <returns>
                    The return value for this member is not used.
                </returns>
      <param name="provider">
                    An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)
                </param>
      <exception cref="T:System.InvalidCastException">
                    In all cases.
                </exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>
                    This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.
                </summary>
      <returns>
                    The return value for this member is not used.
                </returns>
      <param name="provider">
                    An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)
                </param>
      <exception cref="T:System.InvalidCastException">
                    In all cases.
                </exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>
                    Returns the current <see cref="T:System.DateTime" /> object.
                </summary>
      <returns>
                    The current <see cref="T:System.DateTime" /> object.
                </returns>
      <param name="provider">
                    An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)
                </param>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>
                    This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.
                </summary>
      <returns>
                    The return value for this member is not used.
                </returns>
      <param name="provider">
                    An object that implements the <see cref="T:System.IFormatProvider" /> interface or null.
                </param>
      <exception cref="T:System.InvalidCastException">
                    In all cases.
                </exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>
                    This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.
                </summary>
      <returns>
                    The return value for this member is not used.
                </returns>
      <param name="provider">
                    An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)
                </param>
      <exception cref="T:System.InvalidCastException">
                    In all cases.
                </exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>
                    This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.
                </summary>
      <returns>
                    The return value for this member is not used.
                </returns>
      <param name="provider">
                    An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)
                </param>
      <exception cref="T:System.InvalidCastException">
                    In all cases.
                </exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>
                    This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.
                </summary>
      <returns>
                    The return value for this member is not used.
                </returns>
      <param name="provider">
                    An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)
                </param>
      <exception cref="T:System.InvalidCastException">
                    In all cases.
                </exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>
                    This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.
                </summary>
      <returns>
                    The return value for this member is not used.
                </returns>
      <param name="provider">
                    An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)
                </param>
      <exception cref="T:System.InvalidCastException">
                    In all cases.
                </exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>
                    This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.
                </summary>
      <returns>
                    The return value for this member is not used.
                </returns>
      <param name="provider">
                    An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)
                </param>
      <exception cref="T:System.InvalidCastException">
                    In all cases.
                </exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>
                    This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.
                </summary>
      <returns>
                    The return value for this member is not used.
                </returns>
      <param name="provider">
                    An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)
                </param>
      <exception cref="T:System.InvalidCastException">
                    In all cases. 
                </exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>
                    Converts the current <see cref="T:System.DateTime" /> object to an object of a specified type.
                </summary>
      <returns>
                    An object of the type specified by the <paramref name="type" /> parameter, with a value equivalent to the current <see cref="T:System.DateTime" /> object.
                </returns>
      <param name="type">
                    The desired type. 
                </param>
      <param name="provider">
                    An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null. 
                </exception>
      <exception cref="T:System.InvalidCastException">
                    This conversion is not supported for the <see cref="T:System.DateTime" /> type.
                </exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>
                    This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.
                </summary>
      <returns>
                    The return value for this member is not used.
                </returns>
      <param name="provider">
                    An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)
                </param>
      <exception cref="T:System.InvalidCastException">
                    In all cases.
                </exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>
                    This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.
                </summary>
      <returns>
                    The return value for this member is not used.
                </returns>
      <param name="provider">
                    An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)
                </param>
      <exception cref="T:System.InvalidCastException">
                    In all cases.
                </exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>
                    This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.
                </summary>
      <returns>
                    The return value for this member is not used.
                </returns>
      <param name="provider">
                    An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)
                </param>
      <exception cref="T:System.InvalidCastException">
                    In all cases.
                </exception>
    </member>
    <member name="P:System.DateTime.Ticks">
      <summary>
                    Gets the number of ticks that represent the date and time of this instance.
                </summary>
      <returns>
                    The number of ticks that represents the date and time of this instance. The value is between DateTime.MinValue.Ticks and DateTime.MaxValue.Ticks.
                </returns>
    </member>
    <member name="P:System.DateTime.TimeOfDay">
      <summary>
                    Gets the time of day for this instance.
                </summary>
      <returns>
                    A <see cref="T:System.TimeSpan" /> that represents the fraction of the day that has elapsed since midnight.
                </returns>
    </member>
    <member name="P:System.DateTime.Today">
      <summary>
                    Gets the current date.
                </summary>
      <returns>
                    A <see cref="T:System.DateTime" /> set to today's date, with the time component set to 00:00:00.
                </returns>
    </member>
    <member name="M:System.DateTime.ToFileTime">
      <summary>
                    Converts the value of the current <see cref="T:System.DateTime" /> object to a Windows file time.
                </summary>
      <returns>
                    The value of the current <see cref="T:System.DateTime" /> object expressed as a Windows file time.
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The resulting file time would represent a date and time before 12:00 midnight January 1, 1601 C.E. UTC. 
                </exception>
    </member>
    <member name="M:System.DateTime.ToFileTimeUtc">
      <summary>
                    Converts the value of the current <see cref="T:System.DateTime" /> object to a Windows file time.
                </summary>
      <returns>
                    The value of the current <see cref="T:System.DateTime" /> object expressed as a Windows file time.
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The resulting file time would represent a date and time before 12:00 midnight January 1, 1601 C.E. UTC. 
                </exception>
    </member>
    <member name="M:System.DateTime.ToLocalTime">
      <summary>
                    Converts the value of the current <see cref="T:System.DateTime" /> object to local time.
                </summary>
      <returns>
                    A <see cref="T:System.DateTime" /> object whose <see cref="P:System.DateTime.Kind" /> property is <see cref="F:System.DateTimeKind.Local" />, and whose value is the local time equivalent to the value of the current <see cref="T:System.DateTime" /> object, or <see cref="F:System.DateTime.MaxValue" /> if the converted value is too large to be represented by a <see cref="T:System.DateTime" /> object, or <see cref="F:System.DateTime.MinValue" /> if the converted value is too small to be represented as a <see cref="T:System.DateTime" /> object.
                </returns>
    </member>
    <member name="M:System.DateTime.ToLongDateString">
      <summary>
                    Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent long date string representation.
                </summary>
      <returns>
                    A string that contains the long date string representation of the current <see cref="T:System.DateTime" /> object.
                </returns>
    </member>
    <member name="M:System.DateTime.ToLongTimeString">
      <summary>
                    Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent long time string representation.
                </summary>
      <returns>
                    A string that contains the long time string representation of the current <see cref="T:System.DateTime" /> object.
                </returns>
    </member>
    <member name="M:System.DateTime.ToOADate">
      <summary>
                    Converts the value of this instance to the equivalent OLE Automation date.
                </summary>
      <returns>
                    A double-precision floating-point number that contains an OLE Automation date equivalent to the value of this instance.
                </returns>
      <exception cref="T:System.OverflowException">
                    The value of this instance cannot be represented as an OLE Automation Date. 
                </exception>
    </member>
    <member name="M:System.DateTime.ToShortDateString">
      <summary>
                    Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent short date string representation.
                </summary>
      <returns>
                    A string that contains the short date string representation of the current <see cref="T:System.DateTime" /> object.
                </returns>
    </member>
    <member name="M:System.DateTime.ToShortTimeString">
      <summary>
                    Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent short time string representation.
                </summary>
      <returns>
                    A string that contains the short time string representation of the current <see cref="T:System.DateTime" /> object.
                </returns>
    </member>
    <member name="M:System.DateTime.ToString">
      <summary>
                    Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent string representation.
                </summary>
      <returns>
                    A string representation of the value of the current <see cref="T:System.DateTime" /> object.
                </returns>
    </member>
    <member name="M:System.DateTime.ToString(System.IFormatProvider)">
      <summary>
                    Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent string representation using the specified culture-specific format information.
                </summary>
      <returns>
                    A string representation of value of the current <see cref="T:System.DateTime" /> object as specified by <paramref name="provider" />.
                </returns>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information. 
                </param>
    </member>
    <member name="M:System.DateTime.ToString(System.String)">
      <summary>
                    Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent string representation using the specified format.
                </summary>
      <returns>
                    A string representation of value of the current <see cref="T:System.DateTime" /> object as specified by <paramref name="format" />.
                </returns>
      <param name="format">
                    A standard date and time format strings or a custom date and time format string.
                </param>
      <exception cref="T:System.FormatException">
                    The length of <paramref name="format" /> is 1, and it is not one of the format specifier characters defined for <see cref="T:System.Globalization.DateTimeFormatInfo" />.
                
                    -or- 
                <paramref name="format" /> does not contain a valid custom format pattern. 
                </exception>
    </member>
    <member name="M:System.DateTime.ToString(System.String,System.IFormatProvider)">
      <summary>
                    Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent string representation using the specified format and culture-specific format information.
                </summary>
      <returns>
                    A string representation of value of the current <see cref="T:System.DateTime" /> object as specified by <paramref name="format" /> and <paramref name="provider" />.
                </returns>
      <param name="format">
                    A standard date and time format strings or a custom date and time format string. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information. 
                </param>
      <exception cref="T:System.FormatException">
                    The length of <paramref name="format" /> is 1, and it is not one of the format specifier characters defined for <see cref="T:System.Globalization.DateTimeFormatInfo" />.
                
                    -or- 
                <paramref name="format" /> does not contain a valid custom format pattern. 
                </exception>
    </member>
    <member name="M:System.DateTime.ToUniversalTime">
      <summary>
                    Converts the value of the current <see cref="T:System.DateTime" /> object to Coordinated Universal Time (UTC).
                </summary>
      <returns>
                    A <see cref="T:System.DateTime" /> object whose <see cref="P:System.DateTime.Kind" /> property is <see cref="F:System.DateTimeKind.Utc" />, and whose value is the UTC equivalent to the value of the current <see cref="T:System.DateTime" /> object, or <see cref="F:System.DateTime.MaxValue" /> if the converted value is too large to be represented by a <see cref="T:System.DateTime" /> object, or <see cref="F:System.DateTime.MinValue" /> if the converted value is too small to be represented by a <see cref="T:System.DateTime" /> object.
                </returns>
    </member>
    <member name="M:System.DateTime.TryParse(System.String,System.DateTime@)">
      <summary>
                    Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent and returns a value that indicates whether the conversion succeeded.
                </summary>
      <returns>true if the <paramref name="s" /> parameter was converted successfully; otherwise, false.
                </returns>
      <param name="s">
                    A string containing a date and time to convert. 
                </param>
      <param name="result">
                    When this method returns, contains the <see cref="T:System.DateTime" /> value equivalent to the date and time contained in <paramref name="s" />, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is an empty string, or does not contain a valid string representation of a date and time. This parameter is passed uninitialized. 
                </param>
    </member>
    <member name="M:System.DateTime.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
      <summary>
                    Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified culture-specific format information and formatting style, and returns a value that indicates whether the conversion succeeded.
                </summary>
      <returns>true if the <paramref name="s" /> parameter was converted successfully; otherwise, false.
                </returns>
      <param name="s">
                    A string containing a date and time to convert. 
                </param>
      <param name="provider">
                    An object that supplies culture-specific formatting information about <paramref name="s" />. 
                </param>
      <param name="styles">
                    A bitwise combination of enumeration values that defines how to interpret the parsed date in relation to the current time zone or the current date. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.
                </param>
      <param name="result">
                    When this method returns, contains the <see cref="T:System.DateTime" /> value equivalent to the date and time contained in <paramref name="s" />, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is an empty string (""), or does not contain a valid string representation of a date and time. This parameter is passed uninitialized. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> is not a valid <see cref="T:System.Globalization.DateTimeStyles" /> value.
                
                    -or-
                <paramref name="styles" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values (for example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).
                </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="provider" /> is a neutral culture and cannot be used in a parsing operation.
                </exception>
    </member>
    <member name="M:System.DateTime.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
      <summary>
                    Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified format, culture-specific format information, and style. The format of the string representation must match the specified format exactly. The method returns a value that indicates whether the conversion succeeded.
                </summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.
                </returns>
      <param name="s">
                    A string containing a date and time to convert. 
                </param>
      <param name="format">
                    The required format of <paramref name="s" />. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about <paramref name="s" />. 
                </param>
      <param name="style">
                    A bitwise combination of one or more enumeration values that indicate the permitted format of <paramref name="s" />. 
                </param>
      <param name="result">
                    When this method returns, contains the <see cref="T:System.DateTime" /> value equivalent to the date and time contained in <paramref name="s" />, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails if either the <paramref name="s" /> or <paramref name="format" /> parameter is null, is an empty string, or does not contain a date and time that correspond to the pattern specified in <paramref name="format" />. This parameter is passed uninitialized. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> is not a valid <see cref="T:System.Globalization.DateTimeStyles" /> value.
                
                    -or-
                <paramref name="styles" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values (for example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).
                </exception>
    </member>
    <member name="M:System.DateTime.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
      <summary>
                    Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified array of formats, culture-specific format information, and style. The format of the string representation must match at least one of the specified formats exactly. The method returns a value that indicates whether the conversion succeeded.
                </summary>
      <returns>true if the <paramref name="s" /> parameter was converted successfully; otherwise, false.
                </returns>
      <param name="s">
                    A string containing one or more dates and times to convert. 
                </param>
      <param name="formats">
                    An array of allowable formats of <paramref name="s" />. 
                </param>
      <param name="provider">
                    An object that supplies culture-specific format information about <paramref name="s" />. 
                </param>
      <param name="style">
                    A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.
                </param>
      <param name="result">
                    When this method returns, contains the <see cref="T:System.DateTime" /> value equivalent to the date and time contained in <paramref name="s" />, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails if <paramref name="s" /> or <paramref name="formats" /> is null, <paramref name="s" /> or an element of <paramref name="formats" /> is an empty string, or the format of <paramref name="s" /> is not exactly as specified by at least one of the format patterns in <paramref name="formats" />. This parameter is passed uninitialized. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> is not a valid <see cref="T:System.Globalization.DateTimeStyles" /> value.
                
                    -or-
                <paramref name="styles" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values (for example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).
                </exception>
    </member>
    <member name="P:System.DateTime.UtcNow">
      <summary>
                    Gets a <see cref="T:System.DateTime" /> object that is set to the current date and time on this computer, expressed as the Coordinated Universal Time (UTC).
                </summary>
      <returns>
                    A <see cref="T:System.DateTime" /> whose value is the current UTC date and time.
                </returns>
    </member>
    <member name="P:System.DateTime.Year">
      <summary>
                    Gets the year component of the date represented by this instance.
                </summary>
      <returns>
                    The year, between 1 and 9999.
                </returns>
    </member>
    <member name="T:System.DateTimeKind">
      <summary>
                    Specifies whether a <see cref="T:System.DateTime" /> object represents a local time, a Coordinated Universal Time (UTC), or is not specified as either local time or UTC.
                </summary>
    </member>
    <member name="F:System.DateTimeKind.Unspecified">
      <summary>
                    The time represented is not specified as either local time or Coordinated Universal Time (UTC).
                </summary>
    </member>
    <member name="F:System.DateTimeKind.Utc">
      <summary>
                    The time represented is UTC.
                </summary>
    </member>
    <member name="F:System.DateTimeKind.Local">
      <summary>
                    The time represented is local time.
                </summary>
    </member>
    <member name="T:System.DateTimeOffset">
      <summary>
                    Represents a point in time, typically expressed as a date and time of day, relative to Coordinated Universal Time (UTC).
                </summary>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.DateTime)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.DateTimeOffset" /> structure using the specified <see cref="T:System.DateTime" /> value.
                </summary>
      <param name="dateTime">
                    A date and time.   
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The Coordinated Universal Time (UTC) date and time that results from applying the offset is earlier than <see cref="F:System.DateTimeOffset.MinValue" />.
                
                    -or-
                
                    The UTC date and time that results from applying the offset is later than <see cref="F:System.DateTimeOffset.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.DateTime,System.TimeSpan)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.DateTimeOffset" /> structure using the specified <see cref="T:System.DateTime" /> value and offset.
                </summary>
      <param name="dateTime">
                    A date and time.   
                </param>
      <param name="offset">
                    The time's offset from Coordinated Universal Time (UTC).
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime.Kind" /> equals <see cref="F:System.DateTimeKind.Utc" /> and <paramref name="offset" /> does not equal zero.
                
                    -or-
                <paramref name="dateTime.Kind" /> equals <see cref="F:System.DateTimeKind.Local" /> and <paramref name="offset" /> does not equal the offset of the system's local time zone.
                
                    -or-
                <paramref name="offset" /> is not specified in whole minutes.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is less than -14 hours or greater than 14 hours.
                
                    -or-
                <see cref="P:System.DateTimeOffset.UtcDateTime" /> is less than <see cref="F:System.DateTimeOffset.MinValue" /> or greater than <see cref="F:System.DateTimeOffset.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.TimeSpan)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.DateTimeOffset" /> structure using the specified year, month, day, hour, minute, second, millisecond, and offset of a specified calendar.
                </summary>
      <param name="year">
                    The year.
                </param>
      <param name="month">
                    The month (1 through 12).
                </param>
      <param name="day">
                    The day (1 through the number of days in <paramref name="month" />).
                </param>
      <param name="hour">
                    The hours (0 through 23).   
                </param>
      <param name="minute">
                    The minutes (0 through 59).
                </param>
      <param name="second">
                    The seconds (0 through 59).
                </param>
      <param name="millisecond">
                    The milliseconds (0 through 999).
                </param>
      <param name="calendar">
                    The calendar whose time is defined.
                </param>
      <param name="offset">
                    The time's offset from Coordinated Universal Time (UTC).
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> does not represent whole minutes.
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="calendar" /> cannot be null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than the <paramref name="calendar" /> parameter's MinSupportedDateTime.Year or greater than MaxSupportedDateTime.Year.
                
                    -or-
                <paramref name="month" /> is either less than or greater than the number of months in <paramref name="year" /> in the <paramref name="calendar" />. 
                
                    -or-
                <paramref name="day" /> is less than one or greater than the number of days in <paramref name="month" />.
                
                    -or-
                <paramref name="hour" /> is less than zero or greater than 23.
                
                    -or-
                <paramref name="minute" /> is less than 0 or greater than 59.
                
                    -or-
                <paramref name="second" /> is less than 0 or greater than 59.
                
                    -or-
                <paramref name="millisecond" /> is less than 0 or greater than 999.
                
                    -or-
                <paramref name="offset" /> is less than -14 hours or greater than 14 hours.
                
                    -or-
                
                    The <paramref name="year" />, <paramref name="month" />, and <paramref name="day" /> parameters cannot be represented as a date and time value.
                
                    -or-
                
                    The <see cref="P:System.DateTimeOffset.UtcDateTime" /> property is earlier than <see cref="F:System.DateTimeOffset.MinValue" /> or later than <see cref="F:System.DateTimeOffset.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.DateTimeOffset" /> structure using the specified year, month, day, hour, minute, second, millisecond, and offset.
                </summary>
      <param name="year">
                    The year (1 through 9999).
                </param>
      <param name="month">
                    The month (1 through 12).
                </param>
      <param name="day">
                    The day (1 through the number of days in <paramref name="month" />).
                </param>
      <param name="hour">
                    The hours (0 through 23).   
                </param>
      <param name="minute">
                    The minutes (0 through 59).
                </param>
      <param name="second">
                    The seconds (0 through 59).
                </param>
      <param name="millisecond">
                    The milliseconds (0 through 999).
                </param>
      <param name="offset">
                    The time's offset from Coordinated Universal Time (UTC).
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> does not represent whole minutes.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than one or greater than 9999.
                
                    -or-
                <paramref name="month" /> is less than one or greater than 12.
                
                    -or-
                <paramref name="day" /> is less than one or greater than the number of days in <paramref name="month" />.
                
                    -or-
                <paramref name="hour" /> is less than zero or greater than 23.
                
                    -or-
                <paramref name="minute" /> is less than 0 or greater than 59.
                
                    -or-
                <paramref name="second" /> is less than 0 or greater than 59.
                
                    -or-
                <paramref name="millisecond" /> is less than 0 or greater than 999.
                
                    -or-
                <paramref name="offset" /> is less than -14 or greater than 14.
                
                    -or-
                
                    The <see cref="P:System.DateTimeOffset.UtcDateTime" /> property is earlier than <see cref="F:System.DateTimeOffset.MinValue" /> or later than <see cref="F:System.DateTimeOffset.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.DateTimeOffset" /> structure using the specified year, month, day, hour, minute, second, and offset.
                </summary>
      <param name="year">
                    The year (1 through 9999).
                </param>
      <param name="month">
                    The month (1 through 12).
                </param>
      <param name="day">
                    The day (1 through the number of days in <paramref name="month" />).
                </param>
      <param name="hour">
                    The hours (0 through 23).   
                </param>
      <param name="minute">
                    The minutes (0 through 59).
                </param>
      <param name="second">
                    The seconds (0 through 59).
                </param>
      <param name="offset">
                    The time's offset from Coordinated Universal Time (UTC).
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> does not represent whole minutes.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than one or greater than 9999.
                
                    -or-
                <paramref name="month" /> is less than one or greater than 12.
                
                    -or-
                <paramref name="day" /> is less than one or greater than the number of days in <paramref name="month" />.
                
                    -or-
                <paramref name="hour" /> is less than zero or greater than 23.
                
                    -or-
                <paramref name="minute" /> is less than 0 or greater than 59.
                
                    -or-
                <paramref name="second" /> is less than 0 or greater than 59.
                
                    -or-
                <paramref name="offset" /> is less than -14 hours or greater than 14 hours.
                
                    -or-
                
                    The <see cref="P:System.DateTimeOffset.UtcDateTime" /> property is earlier than <see cref="F:System.DateTimeOffset.MinValue" /> or later than <see cref="F:System.DateTimeOffset.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.Int64,System.TimeSpan)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.DateTimeOffset" /> structure using the specified number of ticks and offset.
                </summary>
      <param name="ticks">
                    A date and time expressed as the number of 100-nanosecond intervals that have elapsed since 12:00:00 midnight on January 1, 0001.
                </param>
      <param name="offset">
                    The time's offset from Coordinated Universal Time (UTC).
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> is not specified in whole minutes.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The <see cref="P:System.DateTimeOffset.UtcDateTime" /> property is earlier than <see cref="F:System.DateTimeOffset.MinValue" /> or later than <see cref="F:System.DateTimeOffset.MaxValue" />.
                
                    -or-
                <paramref name="ticks" /> is less than DateTimeOffset.MinValue.Ticks or greater than DateTimeOffset.MaxValue.Ticks.
                
                    -or-
                <paramref name="Offset" /> s less than -14 hours or greater than 14 hours.
                </exception>
    </member>
    <member name="M:System.DateTimeOffset.Add(System.TimeSpan)">
      <summary>
                    Adds a specified time interval to a <see cref="T:System.DateTimeOffset" /> object.
                </summary>
      <returns>
                    A <see cref="T:System.DateTimeOffset" /> object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the time interval represented by <paramref name="timeSpan" />.
                </returns>
      <param name="timeSpan">
                    A <see cref="T:System.TimeSpan" /> object that represents a positive or a negative time interval.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.
                
                    -or- 
                
                    The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.DateTimeOffset.AddDays(System.Double)">
      <summary>
                    Adds a specified number of whole and fractional days to the current <see cref="T:System.DateTimeOffset" /> object.
                </summary>
      <returns>
                    A <see cref="T:System.DateTimeOffset" /> object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of days represented by <paramref name="days" />.
                </returns>
      <param name="days">
                    A number of whole and fractional days. The number can be negative or positive.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.
                
                    -or- 
                
                    The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.DateTimeOffset.AddHours(System.Double)">
      <summary>
                    Adds a specified number of whole and fractional hours to the current <see cref="T:System.DateTimeOffset" /> object.
                </summary>
      <returns>
                    A <see cref="T:System.DateTimeOffset" /> object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of hours represented by <paramref name="hours" />.
                </returns>
      <param name="hours">
                    A number of whole and fractional hours. The number can be negative or positive.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.
                
                    -or- 
                
                    The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.DateTimeOffset.AddMilliseconds(System.Double)">
      <summary>
                    Adds a specified number of milliseconds to the current <see cref="T:System.DateTimeOffset" /> object.
                </summary>
      <returns>
                    A <see cref="T:System.DateTimeOffset" /> object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of whole milliseconds represented by <paramref name="milliseconds" />.
                </returns>
      <param name="milliseconds">
                    A number of whole and fractional milliseconds. The number can be negative or positive.   
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.
                
                    -or- 
                
                    The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.DateTimeOffset.AddMinutes(System.Double)">
      <summary>
                    Adds a specified number of whole and fractional minutes to the current <see cref="T:System.DateTimeOffset" /> object.
                </summary>
      <returns>
                    A <see cref="T:System.DateTimeOffset" /> object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of minutes represented by <paramref name="minutes" />.
                </returns>
      <param name="minutes">
                    A number of whole and fractional minutes. The number can be negative or positive.   
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.
                
                    -or- 
                
                    The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.DateTimeOffset.AddMonths(System.Int32)">
      <summary>
                    Adds a specified number of months to the current <see cref="T:System.DateTimeOffset" /> object.
                </summary>
      <returns>
                    A <see cref="T:System.DateTimeOffset" /> object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of months represented by <paramref name="months" />.
                </returns>
      <param name="months">
                    A number of whole months. The number can be negative or positive.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.
                
                    -or- 
                
                    The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.DateTimeOffset.AddSeconds(System.Double)">
      <summary>
                    Adds a specified number of whole and fractional seconds to the current <see cref="T:System.DateTimeOffset" /> object.
                </summary>
      <returns>
                    A <see cref="T:System.DateTimeOffset" /> object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of seconds represented by <paramref name="seconds" />.
                </returns>
      <param name="seconds">
                    A number of whole and fractional seconds. The number can be negative or positive.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.
                
                    -or- 
                
                    The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.DateTimeOffset.AddTicks(System.Int64)">
      <summary>
                    Adds a specified number of ticks to the current <see cref="T:System.DateTimeOffset" /> object.
                </summary>
      <returns>
                    A <see cref="T:System.DateTimeOffset" /> object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of ticks represented by <paramref name="ticks" />.
                </returns>
      <param name="ticks">
                    A number of 100-nanosecond ticks. The number can be negative or positive.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.
                
                    -or- 
                
                    The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.DateTimeOffset.AddYears(System.Int32)">
      <summary>
                    Adds a specified number of years to the <see cref="T:System.DateTimeOffset" /> object.
                </summary>
      <returns>
                    A <see cref="T:System.DateTimeOffset" /> object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of seconds represented by <paramref name="years" />.
                </returns>
      <param name="years">
                    A number of years. The number can be negative or positive.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.
                
                    -or- 
                
                    The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.DateTimeOffset.Compare(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>
                    Compares two <see cref="T:System.DateTimeOffset" /> objects and indicates whether the first is earlier than the second, equal to the second, or later than the second.
                </summary>
      <returns>
                    A signed integer that indicates whether the value of the <paramref name="first" /> parameter is earlier than, later than, or the same time as the value of the <paramref name="second" /> parameter, as the following table shows.
                
                    Return value
                
                    Condition
                
                    Less than zero
                <paramref name="first" /> is earlier than <paramref name="second" />.
                
                    Zero
                <paramref name="first" /> is equal to <paramref name="second" />.
                
                    Greater than zero
                <paramref name="first" /> is later than <paramref name="second" />.
                </returns>
      <param name="first">
                    The first <see cref="T:System.DateTimeOffset" /> object.
                </param>
      <param name="second">
                    The second <see cref="T:System.DateTimeOffset" /> object.
                </param>
    </member>
    <member name="M:System.DateTimeOffset.CompareTo(System.DateTimeOffset)">
      <summary>
                    Compares the current <see cref="T:System.DateTimeOffset" /> object to a specified <see cref="T:System.DateTimeOffset" /> object and indicates whether the current object is earlier than, the same as, or later than the second <see cref="T:System.DateTimeOffset" /> object.
                </summary>
      <returns>
                    A signed integer that indicates the relationship between the current <see cref="T:System.DateTimeOffset" /> object and <paramref name="other" />, as the following table shows.
                
                    Return Value
                
                    Description
                
                    Less than zero
                
                    The current <see cref="T:System.DateTimeOffset" /> object is earlier than <paramref name="other" />.
                
                    Zero
                
                    The current <see cref="T:System.DateTimeOffset" /> object is the same as <paramref name="other" />.
                
                    Greater than zero.
                
                    The current <see cref="T:System.DateTimeOffset" /> object is later than <paramref name="other" />.
                </returns>
      <param name="other">
                    A <see cref="T:System.DateTimeOffset" /> object to compare with the current <see cref="T:System.DateTimeOffset" /> object.
                </param>
    </member>
    <member name="P:System.DateTimeOffset.Date">
      <summary>
                    Gets a <see cref="T:System.DateTime" /> value that represents the date component of the current <see cref="T:System.DateTimeOffset" /> object.
                </summary>
      <returns>
                    A <see cref="T:System.DateTime" /> value that represents the date component of the current <see cref="T:System.DateTimeOffset" /> object.
                </returns>
    </member>
    <member name="P:System.DateTimeOffset.DateTime">
      <summary>
                    Gets a <see cref="T:System.DateTime" /> value that represents the date and time of the current <see cref="T:System.DateTimeOffset" /> object.
                </summary>
      <returns>
                    A <see cref="T:System.DateTime" /> value that represents the date and time of the current <see cref="T:System.DateTimeOffset" /> object.
                </returns>
    </member>
    <member name="P:System.DateTimeOffset.Day">
      <summary>
                    Gets the day of the month represented by the current <see cref="T:System.DateTimeOffset" /> object.
                </summary>
      <returns>
                    The day component of the current <see cref="T:System.DateTimeOffset" /> object, expressed as a value between 1 and 31.
                </returns>
    </member>
    <member name="P:System.DateTimeOffset.DayOfWeek">
      <summary>
                    Gets the day of the week represented by the current <see cref="T:System.DateTimeOffset" /> object.
                </summary>
      <returns>
                    One of the <see cref="T:System.DayOfWeek" /> values that indicates the day of the week of the current <see cref="T:System.DateTimeOffset" /> object.
                </returns>
    </member>
    <member name="P:System.DateTimeOffset.DayOfYear">
      <summary>
                    Gets the day of the year represented by the current <see cref="T:System.DateTimeOffset" /> object.
                </summary>
      <returns>
                    The day of the year of the current <see cref="T:System.DateTimeOffset" /> object, expressed as a value between 1 and 366.
                </returns>
    </member>
    <member name="M:System.DateTimeOffset.Equals(System.DateTimeOffset)">
      <summary>
                    Determines whether the current <see cref="T:System.DateTimeOffset" /> object represents the same point in time as a specified <see cref="T:System.DateTimeOffset" /> object.
                </summary>
      <returns>true if both <see cref="T:System.DateTimeOffset" /> objects have the same <see cref="P:System.DateTimeOffset.UtcDateTime" /> value; otherwise, false.
                </returns>
      <param name="other">
                    A <see cref="T:System.DateTimeOffset" /> object to compare to the current <see cref="T:System.DateTimeOffset" /> object.   
                </param>
    </member>
    <member name="M:System.DateTimeOffset.Equals(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>
                    Determines whether two specified <see cref="T:System.DateTimeOffset" /> objects represent the same point in time.
                </summary>
      <returns>true if the two <see cref="T:System.DateTimeOffset" /> objects have the same <see cref="P:System.DateTimeOffset.UtcDateTime" /> value; otherwise, false.
                </returns>
      <param name="first">
                    The first <see cref="T:System.DateTimeOffset" /> object.
                </param>
      <param name="second">
                    The second <see cref="T:System.DateTimeOffset" /> object.
                </param>
    </member>
    <member name="M:System.DateTimeOffset.Equals(System.Object)">
      <summary>
                    Determines whether a <see cref="T:System.DateTimeOffset" /> object represents the same point in time as a specified object.
                </summary>
      <returns>true if the <paramref name="obj" /> parameter is a <see cref="T:System.DateTimeOffset" /> object and represents the same point in time as the current <see cref="T:System.DateTimeOffset" /> object; otherwise, false.
                </returns>
      <param name="obj">
                    The object to compare to the current <see cref="T:System.DateTimeOffset" /> object.
                </param>
    </member>
    <member name="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)">
      <summary>
                    Determines whether the current <see cref="T:System.DateTimeOffset" /> object represents the same time and has the same offset as a specified <see cref="T:System.DateTimeOffset" /> object.
                </summary>
      <returns>true if the current <see cref="T:System.DateTimeOffset" /> object and <paramref name="other" /> have the same date and time value and the same <see cref="P:System.DateTimeOffset.Offset" /> value; otherwise, false.
                </returns>
      <param name="other">
                    The <see cref="T:System.DateTimeOffset" /> object to compare to the current <see cref="T:System.DateTimeOffset" /> object. 
                </param>
    </member>
    <member name="M:System.DateTimeOffset.FromFileTime(System.Int64)">
      <summary>
                    Converts the specified Windows file time to an equivalent local time.
                </summary>
      <returns>
                    A <see cref="T:System.DateTimeOffset" /> object that represents the date and time of <paramref name="fileTime" /> with the offset set to the local time offset.
                </returns>
      <param name="fileTime">
                    A Windows file time, expressed in ticks.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="filetime" /> is less than zero.
                
                    -or-
                <paramref name="filetime" /> is greater than DateTimeOffset.MaxValue.Ticks.
                </exception>
    </member>
    <member name="M:System.DateTimeOffset.GetHashCode">
      <summary>
                    Returns the hash code for the current <see cref="T:System.DateTimeOffset" /> object.
                </summary>
      <returns>
                    A 32-bit signed integer hash code.
                </returns>
    </member>
    <member name="P:System.DateTimeOffset.Hour">
      <summary>
                    Gets the hour component of the time represented by the current <see cref="T:System.DateTimeOffset" /> object.
                </summary>
      <returns>
                    The hour component of the current <see cref="T:System.DateTimeOffset" /> object. This property uses a 24-hour clock; the value ranges from 0 to 23.
                </returns>
    </member>
    <member name="P:System.DateTimeOffset.LocalDateTime">
      <summary>
                    Gets a <see cref="T:System.DateTime" /> value that represents the local date and time of the current <see cref="T:System.DateTimeOffset" /> object.
                </summary>
      <returns>
                    A <see cref="T:System.DateTime" /> value that represents the local date and time of the current <see cref="T:System.DateTimeOffset" /> object.
                </returns>
    </member>
    <member name="F:System.DateTimeOffset.MaxValue">
      <summary>
                    Represents the greatest possible value of <see cref="T:System.DateTimeOffset" />. This field is read-only.
                </summary>
    </member>
    <member name="P:System.DateTimeOffset.Millisecond">
      <summary>
                    Gets the millisecond component of the time represented by the current <see cref="T:System.DateTimeOffset" /> object.
                </summary>
      <returns>
                    The millisecond component of the current <see cref="T:System.DateTimeOffset" /> object, expressed as an integer between 0 and 999.
                </returns>
    </member>
    <member name="P:System.DateTimeOffset.Minute">
      <summary>
                    Gets the minute component of the time represented by the current <see cref="T:System.DateTimeOffset" /> object.
                </summary>
      <returns>
                    The minute component of the current <see cref="T:System.DateTimeOffset" /> object, expressed as an integer between 0 and 59.
                </returns>
    </member>
    <member name="F:System.DateTimeOffset.MinValue">
      <summary>
                    Represents the earliest possible <see cref="T:System.DateTimeOffset" /> value. This field is read-only.
                </summary>
    </member>
    <member name="P:System.DateTimeOffset.Month">
      <summary>
                    Gets the month component of the date represented by the current <see cref="T:System.DateTimeOffset" /> object.
                </summary>
      <returns>
                    The month component of the current <see cref="T:System.DateTimeOffset" /> object, expressed as an integer between 1 and 12.
                </returns>
    </member>
    <member name="P:System.DateTimeOffset.Now">
      <summary>
                    Gets a <see cref="T:System.DateTimeOffset" /> object that is set to the current date and time on the current computer, with the offset set to the local time's offset from Coordinated Universal Time (UTC).
                </summary>
      <returns>
                    A <see cref="T:System.DateTimeOffset" /> object whose date and time is the current local time and whose offset is the local time zone's offset from Coordinated Universal Time (UTC).
                </returns>
    </member>
    <member name="P:System.DateTimeOffset.Offset">
      <summary>
                    Gets the time's offset from Coordinated Universal Time (UTC). 
                </summary>
      <returns>
                    A <see cref="T:System.TimeSpan" /> object that represents the difference between the current <see cref="T:System.DateTimeOffset" /> object's time value and Coordinated Universal Time (UTC).
                </returns>
    </member>
    <member name="M:System.DateTimeOffset.op_Addition(System.DateTimeOffset,System.TimeSpan)">
      <summary>
                    Adds a specified time interval to a <see cref="T:System.DateTimeOffset" /> object that has a specified date and time, and yields a <see cref="T:System.DateTimeOffset" /> object that has new a date and time.
                </summary>
      <returns>
                    A <see cref="T:System.DateTimeOffset" /> object whose value is the sum of the values of <paramref name="dateTimeTz" /> and <paramref name="timeSpan" />.
                </returns>
      <param name="dateTimeOffset">
                    A <see cref="T:System.DateTimeOffset" /> object.
                </param>
      <param name="timeSpan">
                    A <see cref="T:System.TimeSpan" /> object that specifies the time interval to add to the <see cref="T:System.DateTimeOffset" /> object.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.
                
                    -or- 
                
                    The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.DateTimeOffset.op_Equality(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>
                    Determines whether two specified <see cref="T:System.DateTimeOffset" /> objects represent the same point in time.
                </summary>
      <returns>true if both <see cref="T:System.DateTimeOffset" /> objects have the same <see cref="P:System.DateTimeOffset.UtcDateTime" /> value; otherwise, false.
                </returns>
      <param name="left">
                    The first <see cref="T:System.DateTimeOffset" /> object.
                </param>
      <param name="right">
                    The second <see cref="T:System.DateTimeOffset" /> object.
                </param>
    </member>
    <member name="M:System.DateTimeOffset.op_GreaterThan(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>
                    Determines whether one specified <see cref="T:System.DateTimeOffset" /> object is greater than (or later than) a second specified <see cref="T:System.DateTimeOffset" /> object.
                </summary>
      <returns>true if the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="left" /> is later than the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="right" />; otherwise, false.
                </returns>
      <param name="left">
                    The first <see cref="T:System.DateTimeOffset" /> object.
                </param>
      <param name="right">
                    The second <see cref="T:System.DateTimeOffset" /> object.
                </param>
    </member>
    <member name="M:System.DateTimeOffset.op_GreaterThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>
                    Determines whether one specified <see cref="T:System.DateTimeOffset" /> object is greater than or equal to a second specified <see cref="T:System.DateTimeOffset" /> object.
                </summary>
      <returns>true if the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="left" /> is the same as or later than the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="right" />; otherwise, false.
                </returns>
      <param name="left">
                    The first <see cref="T:System.DateTimeOffset" /> object.
                </param>
      <param name="right">
                    The second <see cref="T:System.DateTimeOffset" /> object.
                </param>
    </member>
    <member name="M:System.DateTimeOffset.op_Implicit(System.DateTime)~System.DateTimeOffset">
      <summary>
                    Defines an implicit conversion of a <see cref="T:System.DateTime" /> object to a <see cref="T:System.DateTimeOffset" /> object.
                </summary>
      <returns>
                    A <see cref="T:System.DateTimeOffset" /> object.
                </returns>
      <param name="dateTime">
                    A <see cref="T:System.DateTime" /> object. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The Coordinated Universal Time (UTC) date and time that results from applying the offset is earlier than <see cref="F:System.DateTimeOffset.MinValue" />.
                
                    -or-
                
                    The UTC date and time that results from applying the offset is later than <see cref="F:System.DateTimeOffset.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.DateTimeOffset.op_Inequality(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>
                    Determines whether two specified <see cref="T:System.DateTimeOffset" /> objects refer to different points in time.
                </summary>
      <returns>true if <paramref name="left" /> and <paramref name="right" /> do not have the same <see cref="P:System.DateTimeOffset.UtcDateTime" /> value; otherwise, false.
                </returns>
      <param name="left">
                    The first <see cref="T:System.DateTimeOffset" /> object.
                </param>
      <param name="right">
                    The second <see cref="T:System.DateTimeOffset" /> object.
                </param>
    </member>
    <member name="M:System.DateTimeOffset.op_LessThan(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>
                    Determines whether one specified <see cref="T:System.DateTimeOffset" /> object is less than a second specified <see cref="T:System.DateTimeOffset" /> object.
                </summary>
      <returns>true if the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="left" /> is earlier than the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="right" />; otherwise, false.
                </returns>
      <param name="left">
                    The first <see cref="T:System.DateTimeOffset" /> object.
                </param>
      <param name="right">
                    The second <see cref="T:System.DateTimeOffset" /> object.
                </param>
    </member>
    <member name="M:System.DateTimeOffset.op_LessThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>
                    Determines whether one specified <see cref="T:System.DateTimeOffset" /> object is less than a second specified <see cref="T:System.DateTimeOffset" /> object.
                </summary>
      <returns>true if the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="left" /> is earlier than the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="right" />; otherwise, false.
                </returns>
      <param name="left">
                    The first <see cref="T:System.DateTimeOffset" /> object.
                </param>
      <param name="right">
                    The second <see cref="T:System.DateTimeOffset" /> object.
                </param>
    </member>
    <member name="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>
                    Subtracts one <see cref="T:System.DateTimeOffset" /> object from another and yields a time interval.
                </summary>
      <returns>
                    A <see cref="T:System.TimeSpan" /> object that represents the difference between <paramref name="left" /> and <paramref name="right" />.
                </returns>
      <param name="left">
                    A <see cref="T:System.DateTimeOffset" /> object (the minuend).   
                </param>
      <param name="right">
                    A second <see cref="T:System.DateTimeOffset" /> object (the subtrahend).
                </param>
    </member>
    <member name="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.TimeSpan)">
      <summary>
                    Subtracts a specified time interval from a specified date and time, and yields a new date and time.
                </summary>
      <returns>
                    A <see cref="T:System.DateTimeOffset" /> object equal to the value of <paramref name="dateTimeTz" /> minus <paramref name="timeSpan" />.
                </returns>
      <param name="dateTimeOffset">
                    A <see cref="T:System.DateTimeOffset" /> object that represents a particular date and time.
                </param>
      <param name="timeSpan">
                    A time interval.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" /> or greater than <see cref="F:System.DateTimeOffset.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.DateTimeOffset.Parse(System.String)">
      <summary>
                    Converts the specified string representation of a date, time, and offset to its <see cref="T:System.DateTimeOffset" /> equivalent.
                </summary>
      <returns>
                    A <see cref="T:System.DateTimeOffset" /> object that is equivalent to the date and time that is contained in <paramref name="input" />.
                </returns>
      <param name="input">
                    A string that contains a date and time to convert.
                </param>
      <exception cref="T:System.ArgumentException">
                    The offset is greater than 14 hours or less than -14 hours.
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null.
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> does not contain a valid string representation of a date and time.
                
                    -or-
                <paramref name="input" /> contains the string representation of an offset value without a date or time.
                </exception>
    </member>
    <member name="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider)">
      <summary>
                    Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified culture-specific format information.
                </summary>
      <returns>
                    A <see cref="T:System.DateTimeOffset" /> equivalent to the date and time that is contained in <paramref name="input" /> as specified by <paramref name="formatProvider" />.
                </returns>
      <param name="input">
                    A string that contains a date and time to convert.   
                </param>
      <param name="formatProvider">
                    An <see cref="T:System.IFormatProvider" /> object that provides culture-specific format information about <paramref name="input" />.
                </param>
      <exception cref="T:System.ArgumentException">
                    The offset is greater than 14 hours or less than -14 hours.
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null.
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> does not contain a valid string representation of a date and time.
                
                    -or-
                <paramref name="input" /> contains the string representation of an offset value without a date or time.
                </exception>
    </member>
    <member name="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>
                    Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified culture-specific format information and formatting style.
                </summary>
      <returns>
                    A <see cref="T:System.DateTimeOffset" /> object that is equivalent to the date and time that is contained in <paramref name="input" /> as specified by <paramref name="formatProvider" /> and <paramref name="styles" />.
                </returns>
      <param name="input">
                    A string that contains a date and time to convert.   
                </param>
      <param name="formatProvider">
                    An <see cref="T:System.IFormatProvider" /> object that provides culture-specific format information about <paramref name="input" />.
                </param>
      <param name="styles">
                    A bitwise combination of <see cref="T:System.Globalization.DateTimeStyles" /> values that indicates the permitted format of <paramref name="input" />. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.   
                </param>
      <exception cref="T:System.ArgumentException">
                    The offset is greater than 14 hours or less than -14 hours.
                
                    -or-
                <paramref name="styles" /> is not a valid <see cref="T:System.Globalization.DateTimeStyles" /> value.
                
                    -or-
                <paramref name="styles" /> includes an unsupported <see cref="T:System.Globalization.DateTimeStyles" /> value.
                
                    -or-
                <paramref name="styles" /> includes <see cref="T:System.Globalization.DateTimeStyles" /> values that cannot be used together.
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null.
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> does not contain a valid string representation of a date and time.
                
                    -or-
                <paramref name="input" /> contains the string representation of an offset value without a date or time.
                </exception>
    </member>
    <member name="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider)">
      <summary>
                    Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified format and culture-specific format information. The format of the string representation must match the specified format exactly.
                </summary>
      <returns>
                    A <see cref="T:System.DateTimeOffset" /> object that is equivalent to the date and time that is contained in <paramref name="input" /> as specified by <paramref name="format" /> and <paramref name="formatProvider" />.
                </returns>
      <param name="input">
                    A string that contains a date and time to convert.
                </param>
      <param name="format">
                    A format specifier that defines the expected format of <paramref name="input" />.
                </param>
      <param name="formatProvider">
                    An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about <paramref name="input" />.
                </param>
      <exception cref="T:System.ArgumentException">
                    The offset is greater than 14 hours or less than -14 hours.
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null.
                
                    -or-
                <paramref name="format" /> is null.
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> is an empty string ("").
                
                    -or-
                <paramref name="input" /> does not contain a valid string representation of a date and time.
                
                    -or-
                <paramref name="format" /> is an empty string.
                </exception>
    </member>
    <member name="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>
                    Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified format, culture-specific format information, and style. The format of the string representation must match the specified format exactly.
                </summary>
      <returns>
                    A <see cref="T:System.DateTimeOffset" /> equivalent to the date and time that is contained in the <paramref name="input" /> parameter as specified by the <paramref name="format" />, <paramref name="formatProvider" />, and <paramref name="styles" /> parameters.
                </returns>
      <param name="input">
                    A string that contains a date and time to convert.
                </param>
      <param name="format">
                    A format specifier that defines the expected format of <paramref name="input" />.
                </param>
      <param name="formatProvider">
                    An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about <paramref name="input" />.
                </param>
      <param name="styles">
                    A bitwise combination of <see cref="T:System.Globalization.DateTimeStyles" /> values that indicates the permitted format of <paramref name="input" />.
                </param>
      <exception cref="T:System.ArgumentException">
                    The offset is greater than 14 hours or less than -14 hours.
                
                    -or-
                
                    The <paramref name="styles" /> parameter includes an unsupported value.
                
                    -or-
                
                    The <paramref name="styles" /> parameter contains <see cref="T:System.Globalization.DateTimeStyles" /> values that cannot be used together.
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null.
                
                    -or-
                <paramref name="format" /> is null.
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> is an empty string ("").
                
                    -or-
                <paramref name="input" /> does not contain a valid string representation of a date and time.
                
                    -or-
                <paramref name="format" /> is an empty string.
                </exception>
    </member>
    <member name="M:System.DateTimeOffset.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>
                    Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified formats, culture-specific format information, and style. The format of the string representation must match one of the specified formats exactly.
                </summary>
      <returns>
                    A <see cref="T:System.DateTimeOffset" /> equivalent to the date and time that is contained in the <paramref name="input" /> parameter as specified by the <paramref name="formats" />, <paramref name="formatProvider" />, and <paramref name="styles" /> parameters.
                </returns>
      <param name="input">
                    A string that contains a date and time to convert.
                </param>
      <param name="formats">
                    An array of format specifiers that define the expected formats of <paramref name="input" />.
                </param>
      <param name="formatProvider">
                    An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about <paramref name="input" />.
                </param>
      <param name="styles">
                    A bitwise combination of <see cref="T:System.Globalization.DateTimeStyles" /> values that indicates the permitted format of <paramref name="input" />.
                </param>
      <exception cref="T:System.ArgumentException">
                    The offset is greater than 14 hours or less than -14 hours.
                
                    -or-
                <paramref name="styles" /> includes an unsupported value.
                
                    -or-
                
                    The <paramref name="styles" /> parameter contains <see cref="T:System.Globalization.DateTimeStyles" /> values that cannot be used together.
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null.
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> is an empty string ("").
                
                    -or-
                <paramref name="input" /> does not contain a valid string representation of a date and time.
                
                    -or-
                
                    No element of <paramref name="formats" /> contains a valid format specifier.
                </exception>
    </member>
    <member name="P:System.DateTimeOffset.Second">
      <summary>
                    Gets the second component of the clock time represented by the current <see cref="T:System.DateTimeOffset" /> object.
                </summary>
      <returns>
                    The second component of the <see cref="T:System.DateTimeOffset" /> object, expressed as an integer value between 0 and 59.
                </returns>
    </member>
    <member name="M:System.DateTimeOffset.Subtract(System.DateTimeOffset)">
      <summary>
                    Subtracts a <see cref="T:System.DateTimeOffset" /> value that represents a specific date and time from the current <see cref="T:System.DateTimeOffset" /> object.
                </summary>
      <returns>
                    A <see cref="T:System.TimeSpan" /> object that specifies the interval between the two <see cref="T:System.DateTimeOffset" /> objects.
                </returns>
      <param name="value">
                    A <see cref="T:System.DateTimeOffset" /> object.
                </param>
    </member>
    <member name="M:System.DateTimeOffset.Subtract(System.TimeSpan)">
      <summary>
                    Subtracts a specified time interval from the current <see cref="T:System.DateTimeOffset" /> object.
                </summary>
      <returns>
                    A <see cref="T:System.DateTimeOffset" /> object that is equal to the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object, minus the time interval represented by <paramref name="value" />.
                </returns>
      <param name="value">
                    A <see cref="T:System.TimeSpan" /> object that represents a time interval.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.
                
                    -or- 
                
                    The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.DateTimeOffset.System#IComparable#CompareTo(System.Object)">
      <summary>
                    Compares the value of the current <see cref="T:System.DateTimeOffset" /> object with another object of the same type.
                </summary>
      <returns>
                    A 32-bit signed integer that indicates whether the current <see cref="T:System.DateTimeOffset" /> object is less than, equal to, or greater than <paramref name="obj" />. The return values of the method are interpreted as follows:
                
                    Return Value
                
                    Description
                
                    Less than zero
                
                    The current <see cref="T:System.DateTimeOffset" /> object is less than (earlier than) <paramref name="obj" />.
                
                    Zero
                
                    The current <see cref="T:System.DateTimeOffset" /> object is equal to (the same point in time as) <paramref name="obj" />.
                
                    Greater than zero
                
                    The current <see cref="T:System.DateTimeOffset" /> object is greater than (later than) <paramref name="obj" />.
                </returns>
      <param name="obj">
                    The object to compare with the current <see cref="T:System.DateTimeOffset" /> object.
                </param>
    </member>
    <member name="P:System.DateTimeOffset.Ticks">
      <summary>
                    Gets the number of ticks that represents the date and time of the current <see cref="T:System.DateTimeOffset" /> object in clock time.
                </summary>
      <returns>
                    An <see cref="T:System.Int64" /> value that represents the number of ticks in the <see cref="T:System.DateTimeOffset" /> object's clock time.
                </returns>
    </member>
    <member name="P:System.DateTimeOffset.TimeOfDay">
      <summary>
                    Gets the time of day for the current <see cref="T:System.DateTimeOffset" /> object.
                </summary>
      <returns>
                    A <see cref="T:System.TimeSpan" /> object that represents the time interval of the current date that has elapsed since midnight.
                </returns>
    </member>
    <member name="M:System.DateTimeOffset.ToFileTime">
      <summary>
                    Converts the value of the current <see cref="T:System.DateTimeOffset" /> object to a Windows file time.
                </summary>
      <returns>
                    The value of the current <see cref="T:System.DateTimeOffset" /> object, expressed as a Windows file time.
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The resulting file time would represent a date and time before midnight on January 1, 1601 C.E. Coordinated Universal Time (UTC).
                </exception>
    </member>
    <member name="M:System.DateTimeOffset.ToLocalTime">
      <summary>
                    Converts the current <see cref="T:System.DateTimeOffset" /> object to a <see cref="T:System.DateTimeOffset" /> object that represents the local time.
                </summary>
      <returns>
                    A <see cref="T:System.DateTimeOffset" /> object that represents the date and time of the current <see cref="T:System.DateTimeOffset" /> object converted to local time.
                </returns>
    </member>
    <member name="M:System.DateTimeOffset.ToOffset(System.TimeSpan)">
      <summary>
                    Converts the value of the current <see cref="T:System.DateTimeOffset" /> object to the date and time specified by an offset value.
                </summary>
      <returns>
                    A <see cref="T:System.DateTimeOffset" /> object that is equal to the original <see cref="T:System.DateTimeOffset" /> object (that is, their <see cref="M:System.DateTimeOffset.ToUniversalTime" /> methods return identical points in time) but whose <see cref="P:System.DateTimeOffset.Offset" /> property is set to <paramref name="offset" />.
                </returns>
      <param name="offset">
                    The offset to convert the <see cref="T:System.DateTimeOffset" /> value to.   
                </param>
      <exception cref="T:System.ArgumentException">
                    The resulting <see cref="T:System.DateTimeOffset" /> object has a <see cref="P:System.DateTimeOffset.DateTime" /> value earlier than <see cref="F:System.DateTimeOffset.MinValue" />.
                
                    -or-
                
                    The resulting <see cref="T:System.DateTimeOffset" /> object has a <see cref="P:System.DateTimeOffset.DateTime" /> value later than <see cref="F:System.DateTimeOffset.MaxValue" />.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is less than -14 hours.
                
                    -or-
                <paramref name="offset" /> is greater than 14 hours.
                </exception>
    </member>
    <member name="M:System.DateTimeOffset.ToString">
      <summary>
                    Converts the value of the current <see cref="T:System.DateTimeOffset" /> object to its equivalent string representation.
                </summary>
      <returns>
                    A string representation of a <see cref="T:System.DateTimeOffset" /> object that includes the offset appended at the end of the string.
                </returns>
    </member>
    <member name="M:System.DateTimeOffset.ToString(System.IFormatProvider)">
      <summary>
                    Converts the value of the current <see cref="T:System.DateTimeOffset" /> object to its equivalent string representation using the specified culture-specific formatting information.
                </summary>
      <returns>
                    A string representation of the value of the current <see cref="T:System.DateTimeOffset" /> object, as specified by <paramref name="formatProvider" />.
                </returns>
      <param name="formatProvider">
                    An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information.
                </param>
    </member>
    <member name="M:System.DateTimeOffset.ToString(System.String)">
      <summary>
                    Converts the value of the current <see cref="T:System.DateTimeOffset" /> object to its equivalent string representation using the specified format.
                </summary>
      <returns>
                    A string representation of the value of the current <see cref="T:System.DateTimeOffset" /> object, as specified by <paramref name="format" />.
                </returns>
      <param name="format">
                    A format string.
                </param>
      <exception cref="T:System.FormatException">
                    The length of <paramref name="format" /> is one, and it is not one of the standard format specifier characters defined for <see cref="T:System.Globalization.DateTimeFormatInfo" />. 
                
                    -or-
                <paramref name="format" /> does not contain a valid custom format pattern.
                </exception>
    </member>
    <member name="M:System.DateTimeOffset.ToString(System.String,System.IFormatProvider)">
      <summary>
                    Converts the value of the current <see cref="T:System.DateTimeOffset" /> object to its equivalent string representation using the specified format and culture-specific format information.
                </summary>
      <returns>
                    A string representation of the value of the current <see cref="T:System.DateTimeOffset" /> object, as specified by <paramref name="format" /> and <paramref name="provider" />.
                </returns>
      <param name="format">
                    A format string.
                </param>
      <param name="formatProvider">
                    An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information.
                </param>
      <exception cref="T:System.FormatException">
                    The length of <paramref name="format" /> is one, and it is not one of the standard format specifier characters defined for <see cref="T:System.Globalization.DateTimeFormatInfo" />.
                
                    -or-
                <paramref name="format" /> does not contain a valid custom format pattern. 
                </exception>
    </member>
    <member name="M:System.DateTimeOffset.ToUniversalTime">
      <summary>
                    Converts the current <see cref="T:System.DateTimeOffset" /> object to a <see cref="T:System.DateTimeOffset" /> value that represents the Coordinated Universal Time (UTC).
                </summary>
      <returns>
                    A <see cref="T:System.DateTimeOffset" /> object that represents the date and time of the current <see cref="T:System.DateTimeOffset" /> object converted to Coordinated Universal Time (UTC).
                </returns>
    </member>
    <member name="M:System.DateTimeOffset.TryParse(System.String,System.DateTimeOffset@)">
      <summary>
                    Tries to converts a specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent, and returns a value that indicates whether the conversion succeeded.
                </summary>
      <returns>true if the <paramref name="input" /> parameter is successfully converted; otherwise, false.
                </returns>
      <param name="input">
                    A string that contains a date and time to convert.
                </param>
      <param name="result">
                    When the method returns, contains the <see cref="T:System.DateTimeOffset" /> equivalent to the date and time of <paramref name="input" />, if the conversion succeeded, or <see cref="F:System.DateTimeOffset.MinValue" />, if the conversion failed. The conversion fails if the <paramref name="input" /> parameter is null or does not contain a valid string representation of a date and time. This parameter is passed uninitialized.
                </param>
    </member>
    <member name="M:System.DateTimeOffset.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)">
      <summary>
                    Tries to convert a specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent, and returns a value that indicates whether the conversion succeeded.
                </summary>
      <returns>true if the <paramref name="input" /> parameter is successfully converted; otherwise, false.
                </returns>
      <param name="input">
                    A string that contains a date and time to convert.
                </param>
      <param name="formatProvider">
                    An <see cref="T:System.IFormatProvider" /> object that provides culture-specific formatting information about <paramref name="input" />.
                </param>
      <param name="styles">
                    A bitwise combination of <see cref="T:System.Globalization.DateTimeStyles" /> values that indicates the permitted format of <paramref name="input" />. 
                </param>
      <param name="result">
                    When the method returns, contains the <see cref="T:System.DateTimeOffset" /> value equivalent to the date and time of <paramref name="input" />, if the conversion succeeded, or <see cref="F:System.DateTimeOffset.MinValue" />, if the conversion failed. The conversion fails if the <paramref name="input" /> parameter is null or does not contain a valid string representation of a date and time. This parameter is passed uninitialized.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> includes an undefined <see cref="T:System.Globalization.DateTimeStyles" /> value.
                
                    -or-
                <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" />  is not supported.
                
                    -or-
                <paramref name="styles" /> includes mutually exclusive <see cref="T:System.Globalization.DateTimeStyles" /> values.
                </exception>
    </member>
    <member name="M:System.DateTimeOffset.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)">
      <summary>
                    Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified format, culture-specific format information, and style. The format of the string representation must match the specified format exactly.
                </summary>
      <returns>true if the <paramref name="input" /> parameter is successfully converted; otherwise, false.
                </returns>
      <param name="input">
                    A string that contains a date and time to convert.
                </param>
      <param name="format">
                    A format specifier that defines the required format of <paramref name="input" />.
                </param>
      <param name="formatProvider">
                    An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about <paramref name="input" />.
                </param>
      <param name="styles">
                    A bitwise combination of <see cref="T:System.Globalization.DateTimeStyles" /> values that indicates the permitted format of input. A typical value to specify is None.
                </param>
      <param name="result">
                    When the method returns, contains the <see cref="T:System.DateTimeOffset" /> equivalent to the date and time of <paramref name="input" />, if the conversion succeeded, or <see cref="F:System.DateTimeOffset.MinValue" />, if the conversion failed. The conversion fails if the <paramref name="input" /> parameter is null, or does not contain a valid string representation of a date and time in the expected format defined by <paramref name="format" /> and <paramref name="provider" />. This parameter is passed uninitialized.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> includes an undefined <see cref="T:System.Globalization.DateTimeStyles" /> value.
                
                    -or-
                <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" />  is not supported.
                
                    -or-
                <paramref name="styles" /> includes mutually exclusive <see cref="T:System.Globalization.DateTimeStyles" /> values.
                </exception>
    </member>
    <member name="M:System.DateTimeOffset.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)">
      <summary>
                    Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified array of formats, culture-specific format information, and style. The format of the string representation must match one of the specified formats exactly.
                </summary>
      <returns>true if the <paramref name="input" /> parameter is successfully converted; otherwise, false.
                </returns>
      <param name="input">
                    A string that contains a date and time to convert.
                </param>
      <param name="formats">
                    An array that defines the expected formats of <paramref name="input" />.
                </param>
      <param name="formatProvider">
                    An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about <paramref name="input" />.
                </param>
      <param name="styles">
                    A bitwise combination of <see cref="T:System.Globalization.DateTimeStyles" /> values that indicates the permitted format of input. A typical value to specify is None.
                </param>
      <param name="result">
                    When the method returns, contains the <see cref="T:System.DateTimeOffset" /> equivalent to the date and time of <paramref name="input" />, if the conversion succeeded, or <see cref="F:System.DateTimeOffset.MinValue" />, if the conversion failed. The conversion fails if the <paramref name="input" /> does not contain a valid string representation of a date and time, or does not contain the date and time in the expected format defined by <paramref name="format" />, or if <paramref name="formats" /> is null. This parameter is passed uninitialized.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> includes an undefined <see cref="T:System.Globalization.DateTimeStyles" /> value.
                
                    -or-
                <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" />  is not supported.
                
                    -or-
                <paramref name="styles" /> includes mutually exclusive <see cref="T:System.Globalization.DateTimeStyles" /> values.
                </exception>
    </member>
    <member name="P:System.DateTimeOffset.UtcDateTime">
      <summary>
                    Gets a <see cref="T:System.DateTime" /> value that represents the Coordinated Universal Time (UTC) date and time of the current <see cref="T:System.DateTimeOffset" /> object.
                </summary>
      <returns>
                    A <see cref="T:System.DateTime" /> value that represents the Coordinated Universal Time (UTC) date and time of the current <see cref="T:System.DateTimeOffset" /> object.
                </returns>
    </member>
    <member name="P:System.DateTimeOffset.UtcNow">
      <summary>
                    Gets a <see cref="T:System.DateTimeOffset" /> object whose date and time are set to the current Coordinated Universal Time (UTC) date and time and whose offset is <see cref="F:System.TimeSpan.Zero" />.
                </summary>
      <returns>
                    A <see cref="T:System.DateTimeOffset" /> value whose date and time is the current Coordinated Universal Time (UTC) and whose offset is <see cref="F:System.TimeSpan.Zero" />.
                </returns>
    </member>
    <member name="P:System.DateTimeOffset.UtcTicks">
      <summary>
                    Gets the number of ticks that represents the date and time of the current <see cref="T:System.DateTimeOffset" /> object in Coordinated Universal Time (UTC).
                </summary>
      <returns>
                    An <see cref="T:System.Int64" /> value that represents the number of ticks in the <see cref="T:System.DateTimeOffset" /> object's Coordinated Universal Time (UTC).
                </returns>
    </member>
    <member name="P:System.DateTimeOffset.Year">
      <summary>
                    Gets the year component of the date represented by the current <see cref="T:System.DateTimeOffset" /> object.
                </summary>
      <returns>
                    The year component of the current <see cref="T:System.DateTimeOffset" /> object, expressed as an integer value between 0 and 9999.
                </returns>
    </member>
    <member name="T:System.DayOfWeek">
      <summary>
                    Specifies the day of the week.
                </summary>
    </member>
    <member name="F:System.DayOfWeek.Sunday">
      <summary>
                    Indicates Sunday.
                </summary>
    </member>
    <member name="F:System.DayOfWeek.Monday">
      <summary>
                    Indicates Monday.
                </summary>
    </member>
    <member name="F:System.DayOfWeek.Tuesday">
      <summary>
                    Indicates Tuesday.
                </summary>
    </member>
    <member name="F:System.DayOfWeek.Wednesday">
      <summary>
                    Indicates Wednesday.
                </summary>
    </member>
    <member name="F:System.DayOfWeek.Thursday">
      <summary>
                    Indicates Thursday.
                </summary>
    </member>
    <member name="F:System.DayOfWeek.Friday">
      <summary>
                    Indicates Friday.
                </summary>
    </member>
    <member name="F:System.DayOfWeek.Saturday">
      <summary>
                    Indicates Saturday.
                </summary>
    </member>
    <member name="T:System.DBNull">
      <summary>
                    Represents a nonexistent value. This class cannot be inherited.
                </summary>
    </member>
    <member name="M:System.DBNull.GetTypeCode">
      <summary>
                    Gets the <see cref="T:System.TypeCode" /> value for <see cref="T:System.DBNull" />.
                </summary>
      <returns>
                    The <see cref="T:System.TypeCode" /> value for <see cref="T:System.DBNull" />, which is <see cref="F:System.TypeCode.DBNull" />.
                </returns>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>
                    This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException" />.
                </summary>
      <returns>
                    None. The return value for this member is not used.
                </returns>
      <param name="provider">
                    An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)
                </param>
      <exception cref="T:System.InvalidCastException">
                    This conversion is not supported for the <see cref="T:System.DBNull" /> type.
                </exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>
                    This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException" />.
                </summary>
      <returns>
                    None. The return value for this member is not used.
                </returns>
      <param name="provider">
                    An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)
                </param>
      <exception cref="T:System.InvalidCastException">
                    This conversion is not supported for the <see cref="T:System.DBNull" /> type.
                </exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>
                    This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException" />.
                </summary>
      <returns>
                    None. The return value for this member is not used.
                </returns>
      <param name="provider">
                    An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)
                </param>
      <exception cref="T:System.InvalidCastException">
                    This conversion is not supported for the <see cref="T:System.DBNull" /> type.
                </exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>
                    This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException" />.
                </summary>
      <returns>
                    None. The return value for this member is not used.
                </returns>
      <param name="provider">
                    An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)
                </param>
      <exception cref="T:System.InvalidCastException">
                    This conversion is not supported for the <see cref="T:System.DBNull" /> type.
                </exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>
                    This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException" />.
                </summary>
      <returns>
                    None. The return value for this member is not used.
                </returns>
      <param name="provider">
                    An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)
                </param>
      <exception cref="T:System.InvalidCastException">
                    This conversion is not supported for the <see cref="T:System.DBNull" /> type.
                </exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>
                    This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException" />.
                </summary>
      <returns>
                    None. The return value for this member is not used.
                </returns>
      <param name="provider">
                    An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)
                </param>
      <exception cref="T:System.InvalidCastException">
                    This conversion is not supported for the <see cref="T:System.DBNull" /> type.
                </exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>
                    This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException" />.
                </summary>
      <returns>
                    None. The return value for this member is not used.
                </returns>
      <param name="provider">
                    An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)
                </param>
      <exception cref="T:System.InvalidCastException">
                    This conversion is not supported for the <see cref="T:System.DBNull" /> type.
                </exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>
                    This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException" />.
                </summary>
      <returns>
                    None. The return value for this member is not used.
                </returns>
      <param name="provider">
                    An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)
                </param>
      <exception cref="T:System.InvalidCastException">
                    This conversion is not supported for the <see cref="T:System.DBNull" /> type.
                </exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>
                    This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException" />.
                </summary>
      <returns>
                    None. The return value for this member is not used.
                </returns>
      <param name="provider">
                    An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)
                </param>
      <exception cref="T:System.InvalidCastException">
                    This conversion is not supported for the <see cref="T:System.DBNull" /> type.
                </exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>
                    This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException" />.
                </summary>
      <returns>
                    None. The return value for this member is not used.
                </returns>
      <param name="provider">
                    An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)
                </param>
      <exception cref="T:System.InvalidCastException">
                    This conversion is not supported for the <see cref="T:System.DBNull" /> type.
                </exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>
                    This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException" />.
                </summary>
      <returns>
                    None. The return value for this member is not used.
                </returns>
      <param name="provider">
                    An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)
                </param>
      <exception cref="T:System.InvalidCastException">
                    This conversion is not supported for the <see cref="T:System.DBNull" /> type.
                </exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>
                    Converts the current <see cref="T:System.DBNull" /> object to the specified type.
                </summary>
      <returns>
                    The boxed equivalent of the current <see cref="T:System.DBNull" /> object, if that conversion is supported; otherwise, an exception is thrown and no value is returned. 
                </returns>
      <param name="type">
                    The type to convert the current <see cref="T:System.DBNull" /> object to. 
                </param>
      <param name="provider">
                    An object that implements the <see cref="T:System.IFormatProvider" /> interface and is used to augment the conversion. If null is specified, format information is obtained from the current culture. 
                </param>
      <exception cref="T:System.InvalidCastException">
                    This conversion is not supported for the <see cref="T:System.DBNull" /> type.
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.
                </exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>
                    This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException" />.
                </summary>
      <returns>
                    None. The return value for this member is not used.
                </returns>
      <param name="provider">
                    An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)
                </param>
      <exception cref="T:System.InvalidCastException">
                    This conversion is not supported for the <see cref="T:System.DBNull" /> type.
                </exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>
                    This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException" />.
                </summary>
      <returns>
                    None. The return value for this member is not used.
                </returns>
      <param name="provider">
                    An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)
                </param>
      <exception cref="T:System.InvalidCastException">
                    This conversion is not supported for the <see cref="T:System.DBNull" /> type.
                </exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>
                    This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException" />.
                </summary>
      <returns>
                    None. The return value for this member is not used.
                </returns>
      <param name="provider">
                    An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)
                </param>
      <exception cref="T:System.InvalidCastException">
                    This conversion is not supported for the <see cref="T:System.DBNull" /> type.
                </exception>
    </member>
    <member name="M:System.DBNull.ToString">
      <summary>
                    Returns an empty string (<see cref="F:System.String.Empty" />).
                </summary>
      <returns>
                    An empty string (<see cref="F:System.String.Empty" />).
                </returns>
    </member>
    <member name="M:System.DBNull.ToString(System.IFormatProvider)">
      <summary>
                    Returns an empty string using the specified <see cref="T:System.IFormatProvider" />.
                </summary>
      <returns>
                    An empty string (<see cref="F:System.String.Empty" />).
                </returns>
      <param name="provider">
                    The <see cref="T:System.IFormatProvider" /> to be used to format the return value.
                
                    -or- 
                null to obtain the format information from the current locale setting of the operating system. 
                </param>
    </member>
    <member name="F:System.DBNull.Value">
      <summary>
                    Represents the sole instance of the <see cref="T:System.DBNull" /> class.
                </summary>
    </member>
    <member name="T:System.Decimal">
      <summary>
                    Represents a decimal number.
                </summary>
    </member>
    <member name="M:System.Decimal.#ctor(System.Double)">
      <summary>
                    Initializes a new instance of <see cref="T:System.Decimal" /> to the value of the specified double-precision floating-point number.
                </summary>
      <param name="value">
                    The value to represent as a <see cref="T:System.Decimal" />. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Decimal.MaxValue" /> or less than <see cref="F:System.Decimal.MinValue" />.
                
                    -or- 
                <paramref name="value" /> is <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.PositiveInfinity" />, or <see cref="F:System.Double.NegativeInfinity" />. 
                </exception>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int32)">
      <summary>
                    Initializes a new instance of <see cref="T:System.Decimal" /> to the value of the specified 32-bit signed integer.
                </summary>
      <param name="value">
                    The value to represent as a <see cref="T:System.Decimal" />. 
                </param>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean,System.Byte)">
      <summary>
                    Initializes a new instance of <see cref="T:System.Decimal" /> from parameters specifying the instance's constituent parts.
                </summary>
      <param name="lo">
                    The low 32 bits of a 96-bit integer. 
                </param>
      <param name="mid">
                    The middle 32 bits of a 96-bit integer. 
                </param>
      <param name="hi">
                    The high 32 bits of a 96-bit integer. 
                </param>
      <param name="isNegative">
                    The sign of the number; 1 is negative, 0 is positive. 
                </param>
      <param name="scale">
                    A power of 10 ranging from 0 to 28. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="scale" /> is greater than 28. 
                </exception>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int32[])">
      <summary>
                    Initializes a new instance of <see cref="T:System.Decimal" /> to a decimal value represented in binary and contained in a specified array.
                </summary>
      <param name="bits">
                    An array of 32-bit signed integers containing a representation of a decimal value. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bits" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
                    The length of the <paramref name="bits" /> is not 4.
                
                    -or- 
                
                    The representation of the decimal value in <paramref name="bits" /> is not valid. 
                </exception>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int64)">
      <summary>
                    Initializes a new instance of <see cref="T:System.Decimal" /> to the value of the specified 64-bit signed integer.
                </summary>
      <param name="value">
                    The value to represent as a <see cref="T:System.Decimal" />. 
                </param>
    </member>
    <member name="M:System.Decimal.#ctor(System.Single)">
      <summary>
                    Initializes a new instance of <see cref="T:System.Decimal" /> to the value of the specified single-precision floating-point number.
                </summary>
      <param name="value">
                    The value to represent as a <see cref="T:System.Decimal" />. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Decimal.MaxValue" /> or less than <see cref="F:System.Decimal.MinValue" />.
                
                    -or- 
                <paramref name="value" /> is <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.PositiveInfinity" />, or <see cref="F:System.Single.NegativeInfinity" />. 
                </exception>
    </member>
    <member name="M:System.Decimal.#ctor(System.UInt32)">
      <summary>
                    Initializes a new instance of <see cref="T:System.Decimal" /> to the value of the specified 32-bit unsigned integer.
                </summary>
      <param name="value">
                    The value to represent as a <see cref="T:System.Decimal" />. 
                </param>
    </member>
    <member name="M:System.Decimal.#ctor(System.UInt64)">
      <summary>
                    Initializes a new instance of <see cref="T:System.Decimal" /> to the value of the specified 64-bit unsigned integer.
                </summary>
      <param name="value">
                    The value to represent as a <see cref="T:System.Decimal" />. 
                </param>
    </member>
    <member name="M:System.Decimal.Add(System.Decimal,System.Decimal)">
      <summary>
                    Adds two specified <see cref="T:System.Decimal" /> values.
                </summary>
      <returns>
                    A <see cref="T:System.Decimal" /> value that is the sum of <paramref name="d1" /> and <paramref name="d2" />.
                </returns>
      <param name="d1">
                    A <see cref="T:System.Decimal" />. 
                </param>
      <param name="d2">
                    A <see cref="T:System.Decimal" />. 
                </param>
      <exception cref="T:System.OverflowException">
                    The sum of <paramref name="d1" /> and <paramref name="d2" /> is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Decimal.Ceiling(System.Decimal)">
      <summary>
                    Returns the smallest integral value greater than or equal to the specified decimal number. 
                </summary>
      <returns>
                    The smallest integral value greater than or equal to the <paramref name="d" /> parameter. Note that this method returns a <see cref="T:System.Decimal" /> rather than an integral type.
                </returns>
      <param name="d">
                    A decimal number.
                </param>
    </member>
    <member name="M:System.Decimal.Compare(System.Decimal,System.Decimal)">
      <summary>
                    Compares two specified <see cref="T:System.Decimal" /> values and returns an integer that indicates whether the first value is greater than, less than, or equal to the second value.
                </summary>
      <returns>
                    A signed number indicating the relationship between <paramref name="d1" /> and <paramref name="d2" />.
                
                    Return Value 
                
                    Meaning 
                
                    Less than zero 
                <paramref name="d1" /> is less than <paramref name="d2" />. 
                
                    Zero 
                <paramref name="d1" /> and <paramref name="d2" /> are equal. 
                
                    Greater than zero 
                <paramref name="d1" /> is greater than <paramref name="d2" />. 
                </returns>
      <param name="d1">
                    A <see cref="T:System.Decimal" />. 
                </param>
      <param name="d2">
                    A <see cref="T:System.Decimal" />. 
                </param>
    </member>
    <member name="M:System.Decimal.CompareTo(System.Decimal)">
      <summary>
                    Compares this instance to a specified <see cref="T:System.Decimal" /> object and returns an integer that indicates whether the value of this instance is greater than, less than, or equal to the value of the specified <see cref="T:System.Decimal" />.
                </summary>
      <returns>
                    A signed number indicating the relationship between this instance and <paramref name="value" />.
                
                    Return Value 
                
                    Meaning 
                
                    Less than zero 
                
                    This instance is less than <paramref name="value" />. 
                
                    Zero 
                
                    This instance is equal to <paramref name="value" />. 
                
                    Greater than zero 
                
                    This instance is greater than <paramref name="value" />. 
                </returns>
      <param name="value">
                    A <see cref="T:System.Decimal" /> object.
                </param>
    </member>
    <member name="M:System.Decimal.CompareTo(System.Object)">
      <summary>
                    Compares this instance to a specified <see cref="T:System.Object" /> and returns an integer that indicates whether the value of this instance is greater than, less than, or equal to the value of the specified <see cref="T:System.Object" />.
                </summary>
      <returns>
                    A signed number indicating the relationship between this instance and <paramref name="value" />.
                
                    Return Value 
                
                    Meaning 
                
                    Less than zero 
                
                    This instance is less than <paramref name="value" />. 
                
                    Zero 
                
                    This instance is equal to <paramref name="value" />. 
                
                    Greater than zero 
                
                    This instance is greater than <paramref name="value" />.
                
                    -or- 
                <paramref name="value" /> is null. 
                </returns>
      <param name="value">
                    An <see cref="T:System.Object" /> or null. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.Decimal" />. 
                </exception>
    </member>
    <member name="M:System.Decimal.Divide(System.Decimal,System.Decimal)">
      <summary>
                    Divides two specified <see cref="T:System.Decimal" /> values.
                </summary>
      <returns>
                    The <see cref="T:System.Decimal" /> that is the result of dividing <paramref name="d1" /> by <paramref name="d2" />.
                </returns>
      <param name="d1">
                    A <see cref="T:System.Decimal" /> (the dividend). 
                </param>
      <param name="d2">
                    A <see cref="T:System.Decimal" /> (the divisor). 
                </param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="d2" /> is zero. 
                </exception>
      <exception cref="T:System.OverflowException">
                    The return value (that is, the quotient) is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Decimal.Equals(System.Decimal)">
      <summary>
                    Returns a value indicating whether this instance and a specified <see cref="T:System.Decimal" /> object represent the same value.
                </summary>
      <returns>true if <paramref name="value" /> is equal to this instance; otherwise, false.
                </returns>
      <param name="value">
                    A <see cref="T:System.Decimal" /> object to compare to this instance.
                </param>
    </member>
    <member name="M:System.Decimal.Equals(System.Decimal,System.Decimal)">
      <summary>
                    Returns a value indicating whether two specified instances of <see cref="T:System.Decimal" /> represent the same value.
                </summary>
      <returns>true if <paramref name="d1" /> and <paramref name="d2" /> are equal; otherwise, false.
                </returns>
      <param name="d1">
                    A <see cref="T:System.Decimal" />. 
                </param>
      <param name="d2">
                    A <see cref="T:System.Decimal" />. 
                </param>
    </member>
    <member name="M:System.Decimal.Equals(System.Object)">
      <summary>
                    Returns a value indicating whether this instance and a specified <see cref="T:System.Object" /> represent the same type and value.
                </summary>
      <returns>true if <paramref name="value" /> is a <see cref="T:System.Decimal" /> and equal to this instance; otherwise, false.
                </returns>
      <param name="value">
                    An <see cref="T:System.Object" />. 
                </param>
    </member>
    <member name="M:System.Decimal.Floor(System.Decimal)">
      <summary>
                    Rounds a specified <see cref="T:System.Decimal" /> number to the closest integer toward negative infinity.
                </summary>
      <returns>
                    If <paramref name="d" /> has a fractional part, the next whole <see cref="T:System.Decimal" /> number toward negative infinity that is less than <paramref name="d" />.
                
                    -or- 
                
                    If <paramref name="d" /> doesn't have a fractional part, <paramref name="d" /> is returned unchanged.
                </returns>
      <param name="d">
                    A <see cref="T:System.Decimal" />. 
                </param>
    </member>
    <member name="M:System.Decimal.GetBits(System.Decimal)">
      <summary>
                    Converts the value of a specified instance of <see cref="T:System.Decimal" /> to its equivalent binary representation.
                </summary>
      <returns>
                    A 32-bit signed integer array with four elements that contain the binary representation of <paramref name="d" />.
                </returns>
      <param name="d">
                    A <see cref="T:System.Decimal" /> value. 
                </param>
    </member>
    <member name="M:System.Decimal.GetHashCode">
      <summary>
                    Returns the hash code for this instance.
                </summary>
      <returns>
                    A 32-bit signed integer hash code.
                </returns>
    </member>
    <member name="M:System.Decimal.GetTypeCode">
      <summary>
                    Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Decimal" />.
                </summary>
      <returns>
                    The enumerated constant <see cref="F:System.TypeCode.Decimal" />.
                </returns>
    </member>
    <member name="F:System.Decimal.MaxValue">
      <summary>
                    Represents the largest possible value of <see cref="T:System.Decimal" />. This field is constant and read-only.
                </summary>
    </member>
    <member name="F:System.Decimal.MinusOne">
      <summary>
                    Represents the number negative one (-1).
                </summary>
    </member>
    <member name="F:System.Decimal.MinValue">
      <summary>
                    Represents the smallest possible value of <see cref="T:System.Decimal" />. This field is constant and read-only.
                </summary>
    </member>
    <member name="M:System.Decimal.Multiply(System.Decimal,System.Decimal)">
      <summary>
                    Multiplies two specified <see cref="T:System.Decimal" /> values.
                </summary>
      <returns>
                    A <see cref="T:System.Decimal" /> that is the result of multiplying <paramref name="d1" /> and <paramref name="d2" />.
                </returns>
      <param name="d1">
                    A <see cref="T:System.Decimal" /> (the multiplicand). 
                </param>
      <param name="d2">
                    A <see cref="T:System.Decimal" /> (the multiplier). 
                </param>
      <exception cref="T:System.OverflowException">
                    The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Decimal.Negate(System.Decimal)">
      <summary>
                    Returns the result of multiplying the specified <see cref="T:System.Decimal" /> value by negative one.
                </summary>
      <returns>
                    A <see cref="T:System.Decimal" /> with the value of <paramref name="d" />, but the opposite sign.
                
                    -or- 
                
                    Zero, if <paramref name="d" /> is zero.
                </returns>
      <param name="d">
                    A <see cref="T:System.Decimal" />. 
                </param>
    </member>
    <member name="F:System.Decimal.One">
      <summary>
                    Represents the number one (1).
                </summary>
    </member>
    <member name="M:System.Decimal.op_Addition(System.Decimal,System.Decimal)">
      <summary>
                    Adds two specified <see cref="T:System.Decimal" /> values.
                </summary>
      <returns>
                    The <see cref="T:System.Decimal" /> result of adding <paramref name="d1" /> and <paramref name="d2" />.
                </returns>
      <param name="d1">
                    A <see cref="T:System.Decimal" />. 
                </param>
      <param name="d2">
                    A <see cref="T:System.Decimal" />. 
                </param>
      <exception cref="T:System.OverflowException">
                    The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Decimal.op_Decrement(System.Decimal)">
      <summary>
                    Decrements the <see cref="T:System.Decimal" /> operand by one.
                </summary>
      <returns>
                    The value of <paramref name="d" /> decremented by 1.
                </returns>
      <param name="d">
                    The <see cref="T:System.Decimal" /> operand. 
                </param>
      <exception cref="T:System.OverflowException">
                    The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Decimal.op_Division(System.Decimal,System.Decimal)">
      <summary>
                    Divides two specified <see cref="T:System.Decimal" /> values.
                </summary>
      <returns>
                    The <see cref="T:System.Decimal" /> result of <paramref name="d1" /> by <paramref name="d2" />.
                </returns>
      <param name="d1">
                    A <see cref="T:System.Decimal" /> (the dividend). 
                </param>
      <param name="d2">
                    A <see cref="T:System.Decimal" /> (the divisor). 
                </param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="d2" /> is zero. 
                </exception>
      <exception cref="T:System.OverflowException">
                    The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Decimal.op_Equality(System.Decimal,System.Decimal)">
      <summary>
                    Returns a value indicating whether two instances of <see cref="T:System.Decimal" /> are equal.
                </summary>
      <returns>true if <paramref name="d1" /> and <paramref name="d2" /> are equal; otherwise, false.
                </returns>
      <param name="d1">
                    A <see cref="T:System.Decimal" />. 
                </param>
      <param name="d2">
                    A <see cref="T:System.Decimal" />. 
                </param>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Int32">
      <summary>
                    Converts a <see cref="T:System.Decimal" /> to a 32-bit signed integer.
                </summary>
      <returns>
                    A 32-bit signed integer that represents the converted <see cref="T:System.Decimal" />.
                </returns>
      <param name="value">
                    A <see cref="T:System.Decimal" /> to convert. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Int16">
      <summary>
                    Converts a <see cref="T:System.Decimal" /> to a 16-bit signed integer.
                </summary>
      <returns>
                    A 16-bit signed integer that represents the converted <see cref="T:System.Decimal" />.
                </returns>
      <param name="value">
                    A <see cref="T:System.Decimal" /> to convert. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Byte">
      <summary>
                    Converts a <see cref="T:System.Decimal" /> to an 8-bit unsigned integer.
                </summary>
      <returns>
                    An 8-bit unsigned integer that represents the converted <see cref="T:System.Decimal" />.
                </returns>
      <param name="value">
                    A <see cref="T:System.Decimal" /> to convert. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.UInt16">
      <summary>
                    Converts a <see cref="T:System.Decimal" /> to a 16-bit unsigned integer.
                </summary>
      <returns>
                    A 16-bit unsigned integer that represents the converted <see cref="T:System.Decimal" />.
                </returns>
      <param name="value">
                    A <see cref="T:System.Decimal" /> to convert. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.UInt16.MaxValue" /> or less than <see cref="F:System.UInt16.MinValue" />. 
                </exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Int64">
      <summary>
                    Converts a <see cref="T:System.Decimal" /> to a 64-bit signed integer.
                </summary>
      <returns>
                    A 64-bit signed integer that represents the converted <see cref="T:System.Decimal" />.
                </returns>
      <param name="value">
                    A <see cref="T:System.Decimal" /> to convert. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Char">
      <summary>
                    Converts a <see cref="T:System.Decimal" /> to a Unicode character.
                </summary>
      <returns>
                    A Unicode character that represents the converted <see cref="T:System.Decimal" />.
                </returns>
      <param name="value">
                    A <see cref="T:System.Decimal" /> to convert. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Double">
      <summary>
                    Converts a <see cref="T:System.Decimal" /> to a double-precision floating-point number.
                </summary>
      <returns>
                    A double-precision floating-point number that represents the converted <see cref="T:System.Decimal" />.
                </returns>
      <param name="value">
                    A <see cref="T:System.Decimal" /> to convert. 
                </param>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Single">
      <summary>
                    Converts a <see cref="T:System.Decimal" /> to a single-precision floating-point number.
                </summary>
      <returns>
                    A single-precision floating-point number that represents the converted <see cref="T:System.Decimal" />.
                </returns>
      <param name="value">
                    A <see cref="T:System.Decimal" /> to convert. 
                </param>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.UInt64">
      <summary>
                    Converts a <see cref="T:System.Decimal" /> to a 64-bit unsigned integer.
                </summary>
      <returns>
                    A 64-bit unsigned integer that represents the converted <see cref="T:System.Decimal" />.
                </returns>
      <param name="value">
                    A <see cref="T:System.Decimal" /> to convert. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is negative or greater than <see cref="F:System.UInt64.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.SByte">
      <summary>
                    Converts a <see cref="T:System.Decimal" /> to an 8-bit signed integer.
                </summary>
      <returns>
                    An 8-bit signed integer that represents the converted <see cref="T:System.Decimal" />.
                </returns>
      <param name="value">
                    A <see cref="T:System.Decimal" /> to convert. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.UInt32">
      <summary>
                    Converts a <see cref="T:System.Decimal" /> to a 32-bit unsigned integer.
                </summary>
      <returns>
                    A 32-bit unsigned integer that represents the converted <see cref="T:System.Decimal" />.
                </returns>
      <param name="value">
                    A <see cref="T:System.Decimal" /> to convert. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is negative or greater than <see cref="F:System.UInt32.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Double)~System.Decimal">
      <summary>
                    Converts a double-precision floating-point number to a <see cref="T:System.Decimal" />.
                </summary>
      <returns>
                    A <see cref="T:System.Decimal" /> that represents the converted double-precision floating point number.
                </returns>
      <param name="value">
                    A double-precision floating-point number. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.
                
                    -or- 
                <paramref name="value" /> is <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.PositiveInfinity" />, or <see cref="F:System.Double.NegativeInfinity" />. 
                </exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Single)~System.Decimal">
      <summary>
                    Converts a single-precision floating-point number to a <see cref="T:System.Decimal" />.
                </summary>
      <returns>
                    A <see cref="T:System.Decimal" /> that represents the converted single-precision floating point number.
                </returns>
      <param name="value">
                    A single-precision floating-point number. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.
                
                    -or- 
                <paramref name="value" /> is <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.PositiveInfinity" />, or <see cref="F:System.Single.NegativeInfinity" />. 
                </exception>
    </member>
    <member name="M:System.Decimal.op_GreaterThan(System.Decimal,System.Decimal)">
      <summary>
                    Returns a value indicating whether a specified <see cref="T:System.Decimal" /> is greater than another specified <see cref="T:System.Decimal" />.
                </summary>
      <returns>true if <paramref name="d1" /> is greater than <paramref name="d2" />; otherwise, false.
                </returns>
      <param name="d1">
                    A <see cref="T:System.Decimal" />. 
                </param>
      <param name="d2">
                    A <see cref="T:System.Decimal" />. 
                </param>
    </member>
    <member name="M:System.Decimal.op_GreaterThanOrEqual(System.Decimal,System.Decimal)">
      <summary>
                    Returns a value indicating whether a specified <see cref="T:System.Decimal" /> is greater than or equal to another specified <see cref="T:System.Decimal" />.
                </summary>
      <returns>true if <paramref name="d1" /> is greater than or equal to <paramref name="d2" />; otherwise, false.
                </returns>
      <param name="d1">
                    A <see cref="T:System.Decimal" />. 
                </param>
      <param name="d2">
                    A <see cref="T:System.Decimal" />. 
                </param>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Byte)~System.Decimal">
      <summary>
                    Converts an 8-bit unsigned integer to a <see cref="T:System.Decimal" />.
                </summary>
      <returns>
                    A <see cref="T:System.Decimal" /> that represents the converted 8-bit unsigned integer.
                </returns>
      <param name="value">
                    An 8-bit unsigned integer. 
                </param>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Char)~System.Decimal">
      <summary>
                    Converts a Unicode character to a <see cref="T:System.Decimal" />.
                </summary>
      <returns>
                    A <see cref="T:System.Decimal" /> that represents the converted Unicode character.
                </returns>
      <param name="value">
                    A Unicode character. 
                </param>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Int16)~System.Decimal">
      <summary>
                    Converts a 16-bit signed integer to a <see cref="T:System.Decimal" />.
                </summary>
      <returns>
                    A <see cref="T:System.Decimal" /> that represents the converted 16-bit signed integer.
                </returns>
      <param name="value">
                    A 16-bit signed integer. 
                </param>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Int32)~System.Decimal">
      <summary>
                    Converts a 32-bit signed integer to a <see cref="T:System.Decimal" />.
                </summary>
      <returns>
                    A <see cref="T:System.Decimal" /> that represents the converted 32-bit signed integer.
                </returns>
      <param name="value">
                    A 32-bit signed integer. 
                </param>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Int64)~System.Decimal">
      <summary>
                    Converts a 64-bit signed integer to a <see cref="T:System.Decimal" />.
                </summary>
      <returns>
                    A <see cref="T:System.Decimal" /> that represents the converted 64-bit signed integer.
                </returns>
      <param name="value">
                    A 64-bit signed integer. 
                </param>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.SByte)~System.Decimal">
      <summary>
                    Converts an 8-bit signed integer to a <see cref="T:System.Decimal" />.
                </summary>
      <returns>
                    A <see cref="T:System.Decimal" /> that represents the converted 8-bit signed integer.
                </returns>
      <param name="value">
                    An 8-bit signed integer. 
                </param>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.UInt16)~System.Decimal">
      <summary>
                    Converts a 16-bit unsigned integer to a <see cref="T:System.Decimal" />.
                </summary>
      <returns>
                    A <see cref="T:System.Decimal" /> that represents the converted 16-bit unsigned integer.
                </returns>
      <param name="value">
                    A 16-bit unsigned integer. 
                </param>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.UInt32)~System.Decimal">
      <summary>
                    Converts a 32-bit unsigned integer to a <see cref="T:System.Decimal" />.
                </summary>
      <returns>
                    A <see cref="T:System.Decimal" /> that represents the converted 32-bit unsigned integer.
                </returns>
      <param name="value">
                    A 32-bit unsigned integer. 
                </param>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.UInt64)~System.Decimal">
      <summary>
                    Converts a 64-bit unsigned integer to a <see cref="T:System.Decimal" />.
                </summary>
      <returns>
                    A <see cref="T:System.Decimal" /> that represents the converted 64-bit unsigned integer.
                </returns>
      <param name="value">
                    A 64-bit unsigned integer. 
                </param>
    </member>
    <member name="M:System.Decimal.op_Increment(System.Decimal)">
      <summary>
                    Increments the <see cref="T:System.Decimal" /> operand by 1.
                </summary>
      <returns>
                    The value of <paramref name="d" /> incremented by 1.
                </returns>
      <param name="d">
                    The <see cref="T:System.Decimal" /> operand. 
                </param>
      <exception cref="T:System.OverflowException">
                    The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Decimal.op_Inequality(System.Decimal,System.Decimal)">
      <summary>
                    Returns a value indicating whether two instances of <see cref="T:System.Decimal" /> are not equal.
                </summary>
      <returns>true if <paramref name="d1" /> and <paramref name="d2" /> are not equal; otherwise, false.
                </returns>
      <param name="d1">
                    A <see cref="T:System.Decimal" />. 
                </param>
      <param name="d2">
                    A <see cref="T:System.Decimal" />. 
                </param>
    </member>
    <member name="M:System.Decimal.op_LessThan(System.Decimal,System.Decimal)">
      <summary>
                    Returns a value indicating whether a specified <see cref="T:System.Decimal" /> is less than another specified <see cref="T:System.Decimal" />.
                </summary>
      <returns>true if <paramref name="d1" /> is less than <paramref name="d2" />; otherwise, false.
                </returns>
      <param name="d1">
                    A <see cref="T:System.Decimal" />. 
                </param>
      <param name="d2">
                    A <see cref="T:System.Decimal" />. 
                </param>
    </member>
    <member name="M:System.Decimal.op_LessThanOrEqual(System.Decimal,System.Decimal)">
      <summary>
                    Returns a value indicating whether a specified <see cref="T:System.Decimal" /> is less than or equal to another specified <see cref="T:System.Decimal" />.
                </summary>
      <returns>true if <paramref name="d1" /> is less than or equal to <paramref name="d2" />; otherwise, false.
                </returns>
      <param name="d1">
                    A <see cref="T:System.Decimal" />. 
                </param>
      <param name="d2">
                    A <see cref="T:System.Decimal" />. 
                </param>
    </member>
    <member name="M:System.Decimal.op_Modulus(System.Decimal,System.Decimal)">
      <summary>
                    Returns the remainder resulting from dividing two specified <see cref="T:System.Decimal" /> values.
                </summary>
      <returns>
                    The <see cref="T:System.Decimal" /> remainder resulting from dividing <paramref name="d1" /> by <paramref name="d2" />.
                </returns>
      <param name="d1">
                    A <see cref="T:System.Decimal" /> (the dividend). 
                </param>
      <param name="d2">
                    A <see cref="T:System.Decimal" /> (the divisor). 
                </param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="d2" /> is zero. 
                </exception>
      <exception cref="T:System.OverflowException">
                    The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Decimal.op_Multiply(System.Decimal,System.Decimal)">
      <summary>
                    Multiplies two specified <see cref="T:System.Decimal" /> values.
                </summary>
      <returns>
                    The <see cref="T:System.Decimal" /> result of multiplying <paramref name="d1" /> by <paramref name="d2" />.
                </returns>
      <param name="d1">
                    A <see cref="T:System.Decimal" />. 
                </param>
      <param name="d2">
                    A <see cref="T:System.Decimal" />. 
                </param>
      <exception cref="T:System.OverflowException">
                    The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Decimal.op_Subtraction(System.Decimal,System.Decimal)">
      <summary>
                    Subtracts two specified <see cref="T:System.Decimal" /> values.
                </summary>
      <returns>
                    The <see cref="T:System.Decimal" /> result of subtracting <paramref name="d2" /> from <paramref name="d1" />.
                </returns>
      <param name="d1">
                    A <see cref="T:System.Decimal" />. 
                </param>
      <param name="d2">
                    A <see cref="T:System.Decimal" />. 
                </param>
      <exception cref="T:System.OverflowException">
                    The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Decimal.op_UnaryNegation(System.Decimal)">
      <summary>
                    Negates the value of the specified <see cref="T:System.Decimal" /> operand.
                </summary>
      <returns>
                    The result of <paramref name="d" /> multiplied by negative one (-1).
                </returns>
      <param name="d">
                    The <see cref="T:System.Decimal" /> operand. 
                </param>
    </member>
    <member name="M:System.Decimal.op_UnaryPlus(System.Decimal)">
      <summary>
                    Returns the value of the <see cref="T:System.Decimal" /> operand (the sign of the operand is unchanged).
                </summary>
      <returns>
                    The value of the operand, <paramref name="d" />.
                </returns>
      <param name="d">
                    The <see cref="T:System.Decimal" /> operand. 
                </param>
    </member>
    <member name="M:System.Decimal.Parse(System.String)">
      <summary>
                    Converts the string representation of a number to its <see cref="T:System.Decimal" /> equivalent.
                </summary>
      <returns>
                    The <see cref="T:System.Decimal" /> number equivalent to the number contained in <paramref name="s" />.
                </returns>
      <param name="s">
                    The string representation of the number to convert.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Decimal.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
                    Converts the string representation of a number in a specified style to its <see cref="T:System.Decimal" /> equivalent.
                </summary>
      <returns>
                    The <see cref="T:System.Decimal" /> number equivalent to the number contained in <paramref name="s" /> as specified by <paramref name="style" />.
                </returns>
      <param name="s">
                    The string representation of the number to convert. 
                </param>
      <param name="style">
                    A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Number" />.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. 
                
                    -or-
                <paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" /></exception>
    </member>
    <member name="M:System.Decimal.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
                    Converts the string representation of a number to its <see cref="T:System.Decimal" /> equivalent using the specified style and culture-specific format.
                </summary>
      <returns>
                    The <see cref="T:System.Decimal" /> number equivalent to the number contained in <paramref name="s" /> as specified by <paramref name="style" /> and <paramref name="provider" />.
                </returns>
      <param name="s">
                    The string representation of the number to convert. 
                </param>
      <param name="style">
                    A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Number" />.
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific information about the format of <paramref name="s" />. 
                </param>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. 
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. 
                
                    -or-
                <paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.
                </exception>
    </member>
    <member name="M:System.Decimal.Parse(System.String,System.IFormatProvider)">
      <summary>
                    Converts the string representation of a number to its <see cref="T:System.Decimal" /> equivalent using the specified culture-specific format information.
                </summary>
      <returns>
                    The <see cref="T:System.Decimal" /> number equivalent to the number contained in <paramref name="s" /> as specified by <paramref name="provider" />.
                </returns>
      <param name="s">
                    The string representation of the number to convert. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> that supplies culture-specific parsing information about <paramref name="s" />. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not of the correct format 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" /></exception>
    </member>
    <member name="M:System.Decimal.Remainder(System.Decimal,System.Decimal)">
      <summary>
                    Computes the remainder after dividing two <see cref="T:System.Decimal" /> values.
                </summary>
      <returns>
                    The <see cref="T:System.Decimal" /> that is the remainder after dividing <paramref name="d1" /> by <paramref name="d2" />.
                </returns>
      <param name="d1">
                    A <see cref="T:System.Decimal" /> (the dividend). 
                </param>
      <param name="d2">
                    A <see cref="T:System.Decimal" /> (the divisor). 
                </param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="d2" /> is zero. 
                </exception>
      <exception cref="T:System.OverflowException">
                    The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Decimal.Round(System.Decimal,System.Int32)">
      <summary>
                    Rounds a <see cref="T:System.Decimal" /> value to a specified number of decimal places.
                </summary>
      <returns>
                    The <see cref="T:System.Decimal" /> number equivalent to <paramref name="d" /> rounded to <paramref name="decimals" /> number of decimal places.
                </returns>
      <param name="d">
                    A <see cref="T:System.Decimal" /> value to round. 
                </param>
      <param name="decimals">
                    A value from 0 to 28 that specifies the number of decimal places to round to. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="decimals" /> is not a value from 0 to 28. 
                </exception>
    </member>
    <member name="M:System.Decimal.Subtract(System.Decimal,System.Decimal)">
      <summary>
                    Subtracts one specified <see cref="T:System.Decimal" /> value from another.
                </summary>
      <returns>
                    The <see cref="T:System.Decimal" /> result of subtracting <paramref name="d2" /> from <paramref name="d1" />.
                </returns>
      <param name="d1">
                    A <see cref="T:System.Decimal" /> (the minuend). 
                </param>
      <param name="d2">
                    A <see cref="T:System.Decimal" /> (the subtrahend). 
                </param>
      <exception cref="T:System.OverflowException">
                    The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />.
                </summary>
      <returns>true if the value of the current instance is not zero; otherwise, false.
                </returns>
      <param name="provider">
                    This parameter is ignored. 
                </param>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.Byte" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
      <exception cref="T:System.OverflowException">
                    The resulting integer value is less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>
                    This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.
                </summary>
      <returns>
                    This conversion is not supported. No value is returned.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
      <exception cref="T:System.InvalidCastException">
                    In all cases. 
                </exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>
                    This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.
                </summary>
      <returns>
                    This conversion is not supported. No value is returned.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
      <exception cref="T:System.InvalidCastException">
                    In all cases.
                </exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />.
                </summary>
      <returns>
                    The value of the current instance, unchanged.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />.
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.Double" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.Int16" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
      <exception cref="T:System.OverflowException">
                    The resulting integer value is less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.Int32" />.
                </returns>
      <param name="provider">
                    The parameter is ignored.
                </param>
      <exception cref="T:System.OverflowException">
                    The resulting integer value is less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.Int64" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
      <exception cref="T:System.OverflowException">
                    The resulting integer value is less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.SByte" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
      <exception cref="T:System.OverflowException">
                    The resulting integer value is less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />.
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.Single" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.
                </summary>
      <returns>
                    The value of the current instance, converted to a <paramref name="type" />.
                </returns>
      <param name="type">
                    The type to which to convert the value of this <see cref="T:System.Decimal" /> instance. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> implementation that supplies culture-specific information about the format of the returned value.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null. 
                </exception>
      <exception cref="T:System.InvalidCastException">
                    The requested type conversion is not supported. 
                </exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.UInt16" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
      <exception cref="T:System.OverflowException">
                    The resulting integer value is less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.UInt32" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
      <exception cref="T:System.OverflowException">
                    The resulting integer value is less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.UInt64" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
      <exception cref="T:System.OverflowException">
                    The resulting integer value is less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Decimal.ToByte(System.Decimal)">
      <summary>
                    Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent 8-bit unsigned integer.
                </summary>
      <returns>
                    An 8-bit unsigned integer equivalent to <paramref name="value" />.
                </returns>
      <param name="value">
                    The <see cref="T:System.Decimal" /> value. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Decimal.ToDouble(System.Decimal)">
      <summary>
                    Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent double-precision floating-point number.
                </summary>
      <returns>
                    A double-precision floating-point number equivalent to <paramref name="d" />.
                </returns>
      <param name="d">
                    The <see cref="T:System.Decimal" /> value to convert. 
                </param>
    </member>
    <member name="M:System.Decimal.ToInt16(System.Decimal)">
      <summary>
                    Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent 16-bit signed integer.
                </summary>
      <returns>
                    A 16-bit signed integer equivalent to <paramref name="value" />.
                </returns>
      <param name="value">
                    A <see cref="T:System.Decimal" /> value. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Decimal.ToInt32(System.Decimal)">
      <summary>
                    Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent 32-bit signed integer.
                </summary>
      <returns>
                    A 32-bit signed integer equivalent to the value of <paramref name="d" />.
                </returns>
      <param name="d">
                    The <see cref="T:System.Decimal" /> value to convert. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="d" /> is less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Decimal.ToInt64(System.Decimal)">
      <summary>
                    Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent 64-bit signed integer.
                </summary>
      <returns>
                    A 64-bit signed integer equivalent to the value of <paramref name="d" />.
                </returns>
      <param name="d">
                    The <see cref="T:System.Decimal" /> value to convert. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="d" /> is less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Decimal.ToSByte(System.Decimal)">
      <summary>
                    Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent 8-bit signed integer.
                </summary>
      <returns>
                    An 8-bit signed integer equivalent to <paramref name="value" />.
                </returns>
      <param name="value">
                    A <see cref="T:System.Decimal" /> value. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Decimal.ToSingle(System.Decimal)">
      <summary>
                    Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent single-precision floating-point number.
                </summary>
      <returns>
                    A single-precision floating-point number equivalent to the value of <paramref name="d" />.
                </returns>
      <param name="d">
                    A <see cref="T:System.Decimal" /> value to convert. 
                </param>
    </member>
    <member name="M:System.Decimal.ToString">
      <summary>
                    Converts the numeric value of this instance to its equivalent string representation.
                </summary>
      <returns>
                    A string that represents the value of this instance.
                </returns>
    </member>
    <member name="M:System.Decimal.ToString(System.IFormatProvider)">
      <summary>
                    Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.
                </summary>
      <returns>
                    The string representation of the value of this instance as specified by <paramref name="provider" />.
                </returns>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information. 
                </param>
    </member>
    <member name="M:System.Decimal.ToString(System.String)">
      <summary>
                    Converts the numeric value of this instance to its equivalent string representation, using the specified format.
                </summary>
      <returns>
                    The string representation of the value of this instance as specified by <paramref name="format" />.
                </returns>
      <param name="format">
                    A standard numeric format string or a Custom Numeric Format Strings.
                </param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid. 
                </exception>
    </member>
    <member name="M:System.Decimal.ToString(System.String,System.IFormatProvider)">
      <summary>
                    Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.
                </summary>
      <returns>
                    The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.
                </returns>
      <param name="format">
                    A standard numeric format string or a Custom Numeric Format Strings.
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> implementation that supplies culture-specific formatting information. 
                </param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid. 
                </exception>
    </member>
    <member name="M:System.Decimal.ToUInt16(System.Decimal)">
      <summary>
                    Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent 16-bit unsigned integer.
                </summary>
      <returns>
                    A 16-bit unsigned integer equivalent to the value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A <see cref="T:System.Decimal" /> value to convert. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.UInt16.MaxValue" /> or less than <see cref="F:System.UInt16.MinValue" />. 
                </exception>
    </member>
    <member name="M:System.Decimal.ToUInt32(System.Decimal)">
      <summary>
                    Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent 32-bit unsigned integer.
                </summary>
      <returns>
                    A 32-bit unsigned integer equivalent to the value of <paramref name="d" />.
                </returns>
      <param name="d">
                    A <see cref="T:System.Decimal" /> value to convert. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="d" /> is negative or greater than <see cref="F:System.UInt32.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Decimal.ToUInt64(System.Decimal)">
      <summary>
                    Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent 64-bit unsigned integer.
                </summary>
      <returns>
                    A 64-bit unsigned integer equivalent to the value of <paramref name="d" />.
                </returns>
      <param name="d">
                    A <see cref="T:System.Decimal" /> value to convert. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="d" /> is negative or greater than <see cref="F:System.UInt64.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Decimal.Truncate(System.Decimal)">
      <summary>
                    Returns the integral digits of the specified <see cref="T:System.Decimal" />; any fractional digits are discarded.
                </summary>
      <returns>
                    The <see cref="T:System.Decimal" /> result of <paramref name="d" /> rounded toward zero, to the nearest whole number.
                </returns>
      <param name="d">
                    A <see cref="T:System.Decimal" /> to truncate. 
                </param>
    </member>
    <member name="M:System.Decimal.TryParse(System.String,System.Decimal@)">
      <summary>
                    Converts the string representation of a number to its <see cref="T:System.Decimal" /> equivalent. A return value indicates whether the conversion succeeded or failed.
                </summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.
                </returns>
      <param name="s">
                    The string representation of the number to convert.
                </param>
      <param name="result">
                    When this method returns, contains the <see cref="T:System.Decimal" /> number that is equivalent to the numeric value contained in <paramref name="s" />, if the conversion succeeded, or is zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not a number in a valid format, or represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. This parameter is passed uninitialized. 
                </param>
    </member>
    <member name="M:System.Decimal.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Decimal@)">
      <summary>
                    Converts the string representation of a number to its <see cref="T:System.Decimal" /> equivalent using the specified style and culture-specific format. A return value indicates whether the conversion succeeded or failed.
                </summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.
                </returns>
      <param name="s">
                    The string representation of the number to convert.
                </param>
      <param name="style">
                    A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Number" />.
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific parsing information about <paramref name="s" />. 
                </param>
      <param name="result">
                    When this method returns, contains the <see cref="T:System.Decimal" /> number that is equivalent to the numeric value contained in <paramref name="s" />, if the conversion succeeded, or is zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not in a format compliant with <paramref name="style" />, or represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. This parameter is passed uninitialized. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. 
                
                    -or-
                <paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.
                </exception>
    </member>
    <member name="F:System.Decimal.Zero">
      <summary>
                    Represents the number zero (0).
                </summary>
    </member>
    <member name="T:System.Delegate">
      <summary>
                    Represents a delegate, which is a data structure that refers to a static method or to a class instance and an instance method of that class.
                </summary>
    </member>
    <member name="M:System.Delegate.#ctor(System.Object,System.String)">
      <summary>
                    Initializes a delegate that invokes the specified instance method on the specified class instance.
                </summary>
      <param name="target">
                    The class instance on which the delegate invokes <paramref name="method" />. 
                </param>
      <param name="method">
                    The name of the instance method that the delegate represents. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> is null.
                
                    -or- 
                <paramref name="method" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
                    There was an error binding to the target method.
                </exception>
      <exception cref="T:System.MethodAccessException">
                    Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method. 
                </exception>
    </member>
    <member name="M:System.Delegate.#ctor(System.Type,System.String)">
      <summary>
                    Initializes a delegate that invokes the specified static method from the specified class.
                </summary>
      <param name="target">
                    The class that defines <paramref name="method" />. 
                </param>
      <param name="method">
                    The name of the static method that the delegate represents. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> is null.
                
                    -or- 
                <paramref name="method" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> is not a RuntimeType. See Runtime Types in Reflection.
                
                    -or-
                <paramref name="target" /> represents an open generic type.
                </exception>
      <exception cref="T:System.MethodAccessException">
                    Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method. 
                </exception>
    </member>
    <member name="M:System.Delegate.Combine(System.Delegate,System.Delegate)">
      <summary>
                    Concatenates the invocation lists of two delegates.
                </summary>
      <returns>
                    A new delegate with an invocation list that concatenates the invocation lists of <paramref name="a" /> and <paramref name="b" /> in that order. Returns <paramref name="a" /> if <paramref name="b" /> is null, returns <paramref name="b" /> if <paramref name="a" /> is a null reference, and returns a null reference if both <paramref name="a" /> and <paramref name="b" /> are null references.
                </returns>
      <param name="a">
                    The delegate whose invocation list comes first. 
                </param>
      <param name="b">
                    The delegate whose invocation list comes last. 
                </param>
      <exception cref="T:System.ArgumentException">
                    Both <paramref name="a" /> and <paramref name="b" /> are not null, and <paramref name="a" /> and <paramref name="b" /> are not instances of the same delegate type. 
                </exception>
      <exception cref="T:System.MethodAccessException">
                    Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method. 
                </exception>
    </member>
    <member name="M:System.Delegate.CombineImpl(System.Delegate)">
      <summary>
                    Concatenates the invocation lists of the specified delegate and the current delegate.
                </summary>
      <returns>
                    A new delegate with an invocation list that concatenates the invocation list of the current delegate and the invocation list of <paramref name="d" />, or the current delegate if <paramref name="d" /> is null.
                </returns>
      <param name="d">
                    The delegate whose invocation list is to be combined with the invocation list of the current delegate. 
                </param>
      <exception cref="T:System.MulticastNotSupportedException">
                    In all cases. 
                </exception>
      <exception cref="T:System.MethodAccessException">
                    Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method. 
                </exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.Reflection.MethodInfo)">
      <summary>
                    Creates a delegate of the specified type that represents the specified static or instance method, with the specified first argument.
                </summary>
      <returns>
                    A delegate of the specified type that represents the specified static or instance method. 
                </returns>
      <param name="type">
                    The type of delegate to create. 
                </param>
      <param name="firstArgument">
                    The object to which the delegate is bound, or null to treat <paramref name="method" /> as static (Shared in Visual Basic). 
                </param>
      <param name="method">
                    The static or instance method the delegate is to represent.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.
                
                    -or- 
                <paramref name="method" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.
                
                    -or-
                <paramref name="type" /> is not a RuntimeType. See Runtime Types in Reflection. 
                
                    -or-
                <paramref name="method" /> cannot be bound.
                
                    -or-
                <paramref name="method" /> is not a RuntimeMethodInfo. See Runtime Types in Reflection.
                </exception>
      <exception cref="T:System.MissingMethodException">
                    The Invoke method of <paramref name="type" /> is not found. 
                </exception>
      <exception cref="T:System.MethodAccessException">
                    The caller does not have access to <paramref name="method" />. 
                
                    -or-
                
                    Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method.
                </exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.Reflection.MethodInfo,System.Boolean)">
      <summary>
                    Creates a delegate of the specified type that represents the specified static or instance method, with the specified first argument and the specified behavior on failure to bind.
                </summary>
      <returns>
                    A delegate of the specified type that represents the specified static or instance method, or null if <paramref name="throwOnBindFailure" /> is false and the delegate cannot be bound to <paramref name="method" />. 
                </returns>
      <param name="type">
                    A type representing the type of delegate to create. 
                </param>
      <param name="firstArgument">
                    The first argument of the method the delegate represents. For instance methods, it must be compatible with the instance type. 
                </param>
      <param name="method">
                    The static or instance method the delegate is to represent.
                </param>
      <param name="throwOnBindFailure">true to throw an exception if <paramref name="method" /> cannot be bound; otherwise, false.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.
                
                    -or- 
                <paramref name="method" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.
                
                    -or-
                <paramref name="type" /> is not a RuntimeType. See Runtime Types in Reflection. 
                
                    -or-
                <paramref name="method" /> cannot be bound, and <paramref name="throwOnBindFailure" /> is true.
                
                    -or-
                <paramref name="method" /> is not a RuntimeMethodInfo. See Runtime Types in Reflection.
                </exception>
      <exception cref="T:System.MissingMethodException">
                    The Invoke method of <paramref name="type" /> is not found. 
                </exception>
      <exception cref="T:System.MethodAccessException">
                    The caller does not have access to <paramref name="method" />. 
                
                    -or-
                
                    Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method.
                </exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String)">
      <summary>
                    Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance.
                </summary>
      <returns>
                    A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.
                </returns>
      <param name="type">
                    The type of delegate to create. 
                </param>
      <param name="target">
                    The class instance on which <paramref name="method" /> is invoked. 
                </param>
      <param name="method">
                    The name of the instance method that the delegate is to represent. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.
                
                    -or- 
                <paramref name="target" /> is null.
                
                    -or- 
                <paramref name="method" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />. 
                
                    -or-
                <paramref name="type" /> is not a RuntimeType. See Runtime Types in Reflection.
                
                    -or- 
                <paramref name="method" /> is not an instance method. 
                
                    -or-
                <paramref name="method" /> cannot be bound; for example, because it cannot be found.
                </exception>
      <exception cref="T:System.MissingMethodException">
                    The Invoke method of <paramref name="type" /> is not found. 
                </exception>
      <exception cref="T:System.MethodAccessException">
                    The caller does not have access to <paramref name="method" />. 
                
                    -or-
                
                    Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method.
                </exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String,System.Boolean)">
      <summary>
                    Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance with the specified case-sensitivity.
                </summary>
      <returns>
                    A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.
                </returns>
      <param name="type">
                    The type of delegate to create. 
                </param>
      <param name="target">
                    The class instance on which <paramref name="method" /> is invoked. 
                </param>
      <param name="method">
                    The name of the instance method that the delegate is to represent. 
                </param>
      <param name="ignoreCase">true to ignore the case when comparing the name of the method; otherwise, false. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.
                
                    -or- 
                <paramref name="target" /> is null.
                
                    -or- 
                <paramref name="method" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.
                
                    -or-
                <paramref name="type" /> is not a RuntimeType. See Runtime Types in Reflection.
                
                    -or- 
                <paramref name="method" /> is not an instance method. 
                
                    -or-
                <paramref name="method" /> cannot be bound; for example, because it cannot be found.
                </exception>
      <exception cref="T:System.MissingMethodException">
                    The Invoke method of <paramref name="type" /> is not found. 
                </exception>
      <exception cref="T:System.MethodAccessException">
                    The caller does not have access to <paramref name="method" />. 
                
                    -or-
                
                    Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method.
                </exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String,System.Boolean,System.Boolean)">
      <summary>
                    Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance, with the specified case-sensitivity and the specified behavior on failure to bind.
                </summary>
      <returns>
                    A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.
                </returns>
      <param name="type">
                    The type of delegate to create. 
                </param>
      <param name="target">
                    The class instance on which <paramref name="method" /> is invoked. 
                </param>
      <param name="method">
                    The name of the instance method that the delegate is to represent. 
                </param>
      <param name="ignoreCase">true to ignore the case when comparing the name of the method; otherwise, false. 
                </param>
      <param name="throwOnBindFailure">true to throw an exception if <paramref name="method" /> cannot be bound; otherwise, false.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.
                
                    -or- 
                <paramref name="target" /> is null.
                
                    -or- 
                <paramref name="method" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.
                
                    -or-
                <paramref name="type" /> is not a RuntimeType. See Runtime Types in Reflection. 
                
                    -or-  
                <paramref name="method" /> is not an instance method. 
                
                    -or-
                <paramref name="method" /> cannot be bound; for example, because it cannot be found, and <paramref name="throwOnBindFailure" /> is true.
                </exception>
      <exception cref="T:System.MissingMethodException">
                    The Invoke method of <paramref name="type" /> is not found. 
                </exception>
      <exception cref="T:System.MethodAccessException">
                    The caller does not have access to <paramref name="method" />. 
                
                    -or-
                
                    Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method.
                </exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Reflection.MethodInfo)">
      <summary>
                    Creates a delegate of the specified type to represent the specified static method.
                </summary>
      <returns>
                    A delegate of the specified type to represent the specified static method.
                </returns>
      <param name="type">
                    The type of delegate to create. 
                </param>
      <param name="method">
                    The static or instance method the delegate is to represent. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.
                
                    -or- 
                <paramref name="method" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.
                
                    -or-
                <paramref name="type" /> is not a RuntimeType. See Runtime Types in Reflection. 
                
                    -or- 
                <paramref name="method" /> cannot be bound.
                
                    -or-
                <paramref name="method" /> is not a RuntimeMethodInfo. See Runtime Types in Reflection.
                </exception>
      <exception cref="T:System.MissingMethodException">
                    The Invoke method of <paramref name="type" /> is not found. 
                </exception>
      <exception cref="T:System.MethodAccessException">
                    The caller does not have access to <paramref name="method" />. 
                
                    -or-
                
                    Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method.
                </exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Reflection.MethodInfo,System.Boolean)">
      <summary>
                    Creates a delegate of the specified type to represent the specified static method, with the specified behavior on failure to bind.
                </summary>
      <returns>
                    A delegate of the specified type to represent the specified static method.
                </returns>
      <param name="type">
                    The type of delegate to create. 
                </param>
      <param name="method">
                    The static or instance method the delegate is to represent.
                </param>
      <param name="throwOnBindFailure">true to throw an exception if <paramref name="method" /> cannot be bound; otherwise, false.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.
                
                    -or- 
                <paramref name="method" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.
                
                    -or-
                <paramref name="type" /> is not a RuntimeType. See Runtime Types in Reflection. 
                
                    -or-
                <paramref name="method" /> cannot be bound, and <paramref name="throwOnBindFailure" /> is true.
                
                    -or-
                <paramref name="method" /> is not a RuntimeMethodInfo. See Runtime Types in Reflection.
                </exception>
      <exception cref="T:System.MissingMethodException">
                    The Invoke method of <paramref name="type" /> is not found. 
                </exception>
      <exception cref="T:System.MethodAccessException">
                    The caller does not have access to <paramref name="method" />. 
                
                    -or-
                
                    Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method.
                </exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String)">
      <summary>
                    Creates a delegate of the specified type that represents the specified static method of the specified class.
                </summary>
      <returns>
                    A delegate of the specified type that represents the specified static method of the specified class.
                </returns>
      <param name="type">
                    The type of delegate to create. 
                </param>
      <param name="target">
                    The class that implements <paramref name="method" />. 
                </param>
      <param name="method">
                    The name of the static method that the delegate is to represent. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.
                
                    -or- 
                <paramref name="target" /> is null.
                
                    -or- 
                <paramref name="method" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.
                
                    -or- 
                <paramref name="type" /> is not a RuntimeType. See Runtime Types in Reflection. 
                
                    -or-
                <paramref name="target" /> is not a RuntimeType.
                
                    -or-
                <paramref name="target" /> is an open generic type. That is, its <see cref="P:System.Type.ContainsGenericParameters" /> property is true.
                
                    -or-
                <paramref name="method" /> is not a static method (Shared method in Visual Basic). 
                
                    -or-
                <paramref name="method" /> cannot be bound; for example, because it cannot be found, and <paramref name="throwOnBindFailure" /> is true.
                </exception>
      <exception cref="T:System.MissingMethodException">
                    The Invoke method of <paramref name="type" /> is not found. 
                </exception>
      <exception cref="T:System.MethodAccessException">
                    The caller does not have access to <paramref name="method" />. 
                
                    -or-
                
                    Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method.
                </exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String,System.Boolean)">
      <summary>
                    Creates a delegate of the specified type that represents the specified static method of the specified class, with the specified case-sensitivity.
                </summary>
      <returns>
                    A delegate of the specified type that represents the specified static method of the specified class.
                </returns>
      <param name="type">
                    The type of delegate to create. 
                </param>
      <param name="target">
                    The class that implements <paramref name="method" />. 
                </param>
      <param name="method">
                    The name of the static method that the delegate is to represent. 
                </param>
      <param name="ignoreCase">true to ignore the case when comparing the name of the method; otherwise, false.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.
                
                    -or- 
                <paramref name="target" /> is null.
                
                    -or- 
                <paramref name="method" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.
                
                    -or- 
                <paramref name="type" /> is not a RuntimeType. See Runtime Types in Reflection. 
                
                    -or-
                <paramref name="target" /> is not a RuntimeType.
                
                    -or-
                <paramref name="target" /> is an open generic type. That is, its <see cref="P:System.Type.ContainsGenericParameters" /> property is true.
                
                    -or-
                <paramref name="method" /> is not a static method (Shared method in Visual Basic). 
                
                    -or-
                <paramref name="method" /> cannot be bound; for example, because it cannot be found.
                </exception>
      <exception cref="T:System.MissingMethodException">
                    The Invoke method of <paramref name="type" /> is not found. 
                </exception>
      <exception cref="T:System.MethodAccessException">
                    The caller does not have access to <paramref name="method" />. 
                
                    -or-
                
                    Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method.
                </exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String,System.Boolean,System.Boolean)">
      <summary>
                    Creates a delegate of the specified type that represents the specified static method of the specified class, with the specified case-sensitivity and the specified behavior on failure to bind.
                </summary>
      <returns>
                    A delegate of the specified type that represents the specified static method of the specified class.
                </returns>
      <param name="type">
                    The type of delegate to create. 
                </param>
      <param name="target">
                    The class that implements <paramref name="method" />. 
                </param>
      <param name="method">
                    The name of the static method that the delegate is to represent. 
                </param>
      <param name="ignoreCase">true to ignore the case when comparing the name of the method; otherwise, false.
                </param>
      <param name="throwOnBindFailure">true to throw an exception if <paramref name="method" /> cannot be bound; otherwise, false.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.
                
                    -or- 
                <paramref name="target" /> is null.
                
                    -or- 
                <paramref name="method" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.
                
                    -or- 
                <paramref name="type" /> is not a RuntimeType. See Runtime Types in Reflection. 
                
                    -or-
                <paramref name="target" /> is not a RuntimeType.
                
                    -or-
                <paramref name="target" /> is an open generic type. That is, its <see cref="P:System.Type.ContainsGenericParameters" /> property is true.
                
                    -or-
                <paramref name="method" /> is not a static method (Shared method in Visual Basic). 
                
                    -or-
                <paramref name="method" /> cannot be bound; for example, because it cannot be found, and <paramref name="throwOnBindFailure" /> is true. 
                </exception>
      <exception cref="T:System.MissingMethodException">
                    The Invoke method of <paramref name="type" /> is not found. 
                </exception>
      <exception cref="T:System.MethodAccessException">
                    The caller does not have access to <paramref name="method" />. 
                
                    -or-
                
                    Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method.
                </exception>
    </member>
    <member name="M:System.Delegate.DynamicInvoke(System.Object[])">
      <summary>
                    Dynamically invokes (late-bound) the method represented by the current delegate.
                </summary>
      <returns>
                    The object returned by the method represented by the delegate.
                </returns>
      <param name="args">
                    An array of objects that are the arguments to pass to the method represented by the current delegate.
                
                    -or- 
                
                    A null reference (Nothing in Visual Basic), if the method represented by the current delegate does not require arguments. 
                </param>
      <exception cref="T:System.MemberAccessException">
                    The caller does not have access to the method represented by the delegate (for example, if the method is private).
                
                    -or- 
                
                    The number, order, or type of parameters listed in <paramref name="args" /> is invalid. 
                </exception>
      <exception cref="T:System.Reflection.TargetException">
                    The method represented by the delegate is an instance method and the target object is null.
                
                    -or- 
                
                    The method represented by the delegate is invoked on an object or a class that does not support it. 
                </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">
                    One of the encapsulated methods throws an exception. 
                </exception>
      <exception cref="T:System.MethodAccessException">
                    Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method. 
                </exception>
    </member>
    <member name="M:System.Delegate.Equals(System.Object)">
      <summary>
                    Determines whether the specified object and the current delegate are of the same type and share the same targets, methods, and invocation list.
                </summary>
      <returns>true if <paramref name="obj" /> and the current delegate have the same targets, methods, and invocation list; otherwise, false.
                </returns>
      <param name="obj">
                    The object to compare with the current delegate. 
                </param>
      <exception cref="T:System.MemberAccessException">
                    The caller does not have access to the method represented by the delegate (for example, if the method is private). 
                </exception>
      <exception cref="T:System.MethodAccessException">
                    Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method. 
                </exception>
    </member>
    <member name="M:System.Delegate.GetHashCode">
      <summary>
                    Returns a hash code for the delegate.
                </summary>
      <returns>
                    A hash code for the delegate.
                </returns>
      <exception cref="T:System.MethodAccessException">
                    Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method. 
                </exception>
    </member>
    <member name="M:System.Delegate.GetInvocationList">
      <summary>
                    Returns the invocation list of the delegate.
                </summary>
      <returns>
                    An array of delegates representing the invocation list of the current delegate.
                </returns>
      <exception cref="T:System.MethodAccessException">
                    Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method. 
                </exception>
    </member>
    <member name="P:System.Delegate.Method">
      <summary>
                    Gets the method represented by the delegate.
                </summary>
      <returns>
                    A <see cref="T:System.Reflection.MethodInfo" /> describing the method represented by the delegate.
                </returns>
      <exception cref="T:System.MemberAccessException">
                    The caller does not have access to the method represented by the delegate (for example, if the method is private). 
                </exception>
      <exception cref="T:System.MethodAccessException">
                    Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method. 
                </exception>
    </member>
    <member name="M:System.Delegate.op_Equality(System.Delegate,System.Delegate)">
      <summary>
                    Determines whether the specified delegates are equal.
                </summary>
      <returns>true if <paramref name="d1" /> is equal to <paramref name="d2" />; otherwise, false.
                </returns>
      <param name="d1">
                    The first delegate to compare. 
                </param>
      <param name="d2">
                    The second delegate to compare. 
                </param>
      <exception cref="T:System.MethodAccessException">
                    Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method. 
                </exception>
    </member>
    <member name="M:System.Delegate.op_Inequality(System.Delegate,System.Delegate)">
      <summary>
                    Determines whether the specified delegates are not equal.
                </summary>
      <returns>true if <paramref name="d1" /> is not equal to <paramref name="d2" />; otherwise, false.
                </returns>
      <param name="d1">
                    The first delegate to compare. 
                </param>
      <param name="d2">
                    The second delegate to compare. 
                </param>
      <exception cref="T:System.MethodAccessException">
                    Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method. 
                </exception>
    </member>
    <member name="M:System.Delegate.Remove(System.Delegate,System.Delegate)">
      <summary>
                    Removes the last occurrence of the invocation list of a delegate from the invocation list of another delegate.
                </summary>
      <returns>
                    A new delegate with an invocation list formed by taking the invocation list of <paramref name="source" /> and removing the last occurrence of the invocation list of <paramref name="value" />, if the invocation list of <paramref name="value" /> is found within the invocation list of <paramref name="source" />. Returns <paramref name="source" /> if <paramref name="value" /> is null or if the invocation list of <paramref name="value" /> is not found within the invocation list of <paramref name="source" />. Returns a null reference if the invocation list of <paramref name="value" /> is equal to the invocation list of <paramref name="source" /> or if <paramref name="source" /> is a null reference.
                </returns>
      <param name="source">
                    The delegate from which to remove the invocation list of <paramref name="value" />. 
                </param>
      <param name="value">
                    The delegate that supplies the invocation list to remove from the invocation list of <paramref name="source" />. 
                </param>
      <exception cref="T:System.MemberAccessException">
                    The caller does not have access to the method represented by the delegate (for example, if the method is private). 
                </exception>
      <exception cref="T:System.ArgumentException">
                    The delegate types do not match.
                </exception>
      <exception cref="T:System.MethodAccessException">
                    Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method. 
                </exception>
    </member>
    <member name="M:System.Delegate.RemoveImpl(System.Delegate)">
      <summary>
                    Removes the invocation list of a delegate from the invocation list of another delegate.
                </summary>
      <returns>
                    A new delegate with an invocation list formed by taking the invocation list of the current delegate and removing the invocation list of <paramref name="value" />, if the invocation list of <paramref name="value" /> is found within the current delegate's invocation list. Returns the current delegate if <paramref name="value" /> is null or if the invocation list of <paramref name="value" /> is not found within the current delegate's invocation list. Returns null if the invocation list of <paramref name="value" /> is equal to the current delegate's invocation list.
                </returns>
      <param name="d">
                    The delegate that supplies the invocation list to remove from the invocation list of the current delegate. 
                </param>
      <exception cref="T:System.MemberAccessException">
                    The caller does not have access to the method represented by the delegate (for example, if the method is private). 
                </exception>
      <exception cref="T:System.MethodAccessException">
                    Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method. 
                </exception>
    </member>
    <member name="P:System.Delegate.Target">
      <summary>
                    Gets the class instance on which the current delegate invokes the instance method.
                </summary>
      <returns>
                    The object on which the current delegate invokes the instance method, if the delegate represents an instance method; null if the delegate represents a static method.
                </returns>
      <exception cref="T:System.MethodAccessException">
                    Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method. 
                </exception>
    </member>
    <member name="T:System.DivideByZeroException">
      <summary>
                    The exception that is thrown when there is an attempt to divide an integral or decimal value by zero.
                </summary>
    </member>
    <member name="M:System.DivideByZeroException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.DivideByZeroException" /> class.
                </summary>
    </member>
    <member name="M:System.DivideByZeroException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.DivideByZeroException" /> class with a specified error message.
                </summary>
      <param name="message">
                    A <see cref="T:System.String" /> that describes the error. 
                </param>
    </member>
    <member name="M:System.DivideByZeroException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.DivideByZeroException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
                </summary>
      <param name="message">
                    The error message that explains the reason for the exception. 
                </param>
      <param name="innerException">
                    The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. 
                </param>
    </member>
    <member name="T:System.DllNotFoundException">
      <summary>
                    The exception that is thrown when a DLL specified in a DLL import cannot be found.
                </summary>
    </member>
    <member name="M:System.DllNotFoundException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.DllNotFoundException" /> class with default properties.
                </summary>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.DllNotFoundException" /> class with a specified error message.
                </summary>
      <param name="message">
                    The error message that explains the reason for the exception. 
                </param>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.DllNotFoundException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
                </summary>
      <param name="message">
                    The error message that explains the reason for the exception. 
                </param>
      <param name="inner">
                    The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. 
                </param>
    </member>
    <member name="T:System.Double">
      <summary>
                    Represents a double-precision floating-point number.
                </summary>
    </member>
    <member name="M:System.Double.CompareTo(System.Double)">
      <summary>
                    Compares this instance to a specified double-precision floating-point number and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified double-precision floating-point number.
                </summary>
      <returns>
                    A signed number indicating the relative values of this instance and <paramref name="value" />.
                
                    Return Value 
                
                    Description 
                
                    Less than zero 
                
                    This instance is less than <paramref name="value" />.
                
                    -or- 
                
                    This instance is not a number (<see cref="F:System.Double.NaN" />) and <paramref name="value" /> is a number. 
                
                    Zero 
                
                    This instance is equal to <paramref name="value" />.
                
                    -or- 
                
                    Both this instance and <paramref name="value" /> are not a number (<see cref="F:System.Double.NaN" />), <see cref="F:System.Double.PositiveInfinity" />, or <see cref="F:System.Double.NegativeInfinity" />. 
                
                    Greater than zero 
                
                    This instance is greater than <paramref name="value" />.
                
                    -or- 
                
                    This instance is a number and <paramref name="value" /> is not a number (<see cref="F:System.Double.NaN" />). 
                </returns>
      <param name="value">
                    A double-precision floating-point number to compare. 
                </param>
    </member>
    <member name="M:System.Double.CompareTo(System.Object)">
      <summary>
                    Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.
                </summary>
      <returns>
                    A signed number indicating the relative values of this instance and <paramref name="value" />.
                
                    Value 
                
                    Description 
                
                    A negative integer 
                
                    This instance is less than <paramref name="value" />.
                
                    -or- 
                
                    This instance is not a number (<see cref="F:System.Double.NaN" />) and <paramref name="value" /> is a number. 
                
                    Zero 
                
                    This instance is equal to <paramref name="value" />.
                
                    -or- 
                
                    This instance and <paramref name="value" /> are both Double.NaN, <see cref="F:System.Double.PositiveInfinity" />, or <see cref="F:System.Double.NegativeInfinity" />
                    A positive integer 
                
                    This instance is greater than <paramref name="value" />.
                
                    -or- 
                
                    This instance is a number and <paramref name="value" /> is not a number (<see cref="F:System.Double.NaN" />).
                
                    -or- 
                <paramref name="value" /> is null. 
                </returns>
      <param name="value">
                    An object to compare, or null. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.Double" />. 
                </exception>
    </member>
    <member name="F:System.Double.Epsilon">
      <summary>
                    Represents the smallest positive <see cref="T:System.Double" /> value greater than zero. This field is constant.
                </summary>
    </member>
    <member name="M:System.Double.Equals(System.Double)">
      <summary>
                    Returns a value indicating whether this instance and a specified <see cref="T:System.Double" /> object represent the same value.
                </summary>
      <returns>true if <paramref name="obj" /> is equal to this instance; otherwise, false.
                </returns>
      <param name="obj">
                    A <see cref="T:System.Double" /> object to compare to this instance.
                </param>
    </member>
    <member name="M:System.Double.Equals(System.Object)">
      <summary>
                    Returns a value indicating whether this instance is equal to a specified object.
                </summary>
      <returns>true if <paramref name="obj" /> is an instance of <see cref="T:System.Double" /> and equals the value of this instance; otherwise, false.
                </returns>
      <param name="obj">
                    An object to compare with this instance. 
                </param>
    </member>
    <member name="M:System.Double.GetHashCode">
      <summary>
                    Returns the hash code for this instance.
                </summary>
      <returns>
                    A 32-bit signed integer hash code.
                </returns>
    </member>
    <member name="M:System.Double.GetTypeCode">
      <summary>
                    Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Double" />.
                </summary>
      <returns>
                    The enumerated constant, <see cref="F:System.TypeCode.Double" />.
                </returns>
    </member>
    <member name="M:System.Double.IsInfinity(System.Double)">
      <summary>
                    Returns a value indicating whether the specified number evaluates to negative or positive infinity 
                </summary>
      <returns>true if <paramref name="d" /> evaluates to <see cref="F:System.Double.PositiveInfinity" /> or <see cref="F:System.Double.NegativeInfinity" />; otherwise, false.
                </returns>
      <param name="d">
                    A double-precision floating-point number. 
                </param>
    </member>
    <member name="M:System.Double.IsNaN(System.Double)">
      <summary>
                    Returns a value indicating whether the specified number evaluates to a value that is not a number (<see cref="F:System.Double.NaN" />).
                </summary>
      <returns>true if <paramref name="d" /> evaluates to <see cref="F:System.Double.NaN" />; otherwise, false.
                </returns>
      <param name="d">
                    A double-precision floating-point number. 
                </param>
    </member>
    <member name="M:System.Double.IsNegativeInfinity(System.Double)">
      <summary>
                    Returns a value indicating whether the specified number evaluates to negative infinity.
                </summary>
      <returns>true if <paramref name="d" /> evaluates to <see cref="F:System.Double.NegativeInfinity" />; otherwise, false.
                </returns>
      <param name="d">
                    A double-precision floating-point number. 
                </param>
    </member>
    <member name="M:System.Double.IsPositiveInfinity(System.Double)">
      <summary>
                    Returns a value indicating whether the specified number evaluates to positive infinity.
                </summary>
      <returns>true if <paramref name="d" /> evaluates to <see cref="F:System.Double.PositiveInfinity" />; otherwise, false.
                </returns>
      <param name="d">
                    A double-precision floating-point number. 
                </param>
    </member>
    <member name="F:System.Double.MaxValue">
      <summary>
                    Represents the largest possible value of a <see cref="T:System.Double" />. This field is constant.
                </summary>
    </member>
    <member name="F:System.Double.MinValue">
      <summary>
                    Represents the smallest possible value of a <see cref="T:System.Double" />. This field is constant.
                </summary>
    </member>
    <member name="F:System.Double.NaN">
      <summary>
                    Represents a value that is not a number (NaN). This field is constant.
                </summary>
    </member>
    <member name="F:System.Double.NegativeInfinity">
      <summary>
                    Represents negative infinity. This field is constant.
                </summary>
    </member>
    <member name="M:System.Double.Parse(System.String)">
      <summary>
                    Converts the string representation of a number to its double-precision floating-point number equivalent.
                </summary>
      <returns>
                    A double-precision floating-point number equivalent to the numeric value or symbol specified in <paramref name="s" />.
                </returns>
      <param name="s">
                    A string containing a number to convert. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not a number in a valid format. 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
                    Converts the string representation of a number in a specified style to its double-precision floating-point number equivalent.
                </summary>
      <returns>
                    A double-precision floating-point number equivalent to the numeric value or symbol specified in <paramref name="s" />.
                </returns>
      <param name="s">
                    A string containing a number to convert. 
                </param>
      <param name="style">
                    A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is a combination of <see cref="F:System.Globalization.NumberStyles.Float" /> and <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not a number in a valid format. 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. 
                
                    -or-
                <paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.
                </exception>
    </member>
    <member name="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
                    Converts the string representation of a number in a specified style and culture-specific format to its double-precision floating-point number equivalent.
                </summary>
      <returns>
                    A double-precision floating-point number equivalent to the numeric value or symbol specified in <paramref name="s" />.
                </returns>
      <param name="s">
                    A string containing a number to convert. 
                </param>
      <param name="style">
                    A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Float" /> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about <paramref name="s" />. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not a numeric value. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. 
                
                    -or-
                <paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Double.Parse(System.String,System.IFormatProvider)">
      <summary>
                    Converts the string representation of a number in a specified culture-specific format to its double-precision floating-point number equivalent.
                </summary>
      <returns>
                    A double-precision floating-point number equivalent to the numeric value or symbol specified in <paramref name="s" />.
                </returns>
      <param name="s">
                    A string containing a number to convert. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not a number in a valid format. 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. 
                </exception>
    </member>
    <member name="F:System.Double.PositiveInfinity">
      <summary>
                    Represents positive infinity. This field is constant.
                </summary>
    </member>
    <member name="M:System.Double.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />. 
                </summary>
      <returns>true if the value of the current instance is not zero; otherwise, false.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.Byte" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>
                    This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />. 
                </summary>
      <returns>
                    This conversion is not supported. No value is returned.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
      <exception cref="T:System.InvalidCastException">
                    In all cases.
                </exception>
    </member>
    <member name="M:System.Double.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>
                    This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" /></summary>
      <returns>
                    This conversion is not supported. No value is returned.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
      <exception cref="T:System.InvalidCastException">
                    In all cases.
                </exception>
    </member>
    <member name="M:System.Double.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.Decimal" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, unchanged.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to an <see cref="T:System.Int16" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to an <see cref="T:System.Int32" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to an <see cref="T:System.Int64" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to an <see cref="T:System.SByte" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.Single" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to <paramref name="type" />.
                </returns>
      <param name="type">
                    The type to which to convert this <see cref="T:System.Double" /> value.
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> implementation that supplies culture-specific information about the format of the returned value.
                </param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.UInt16" />.
                </returns>
      <param name="provider">
                    This parameter is ignored. 
                </param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.UInt32" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.   
                </param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.UInt64" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Double.ToString">
      <summary>
                    Converts the numeric value of this instance to its equivalent string representation.
                </summary>
      <returns>
                    The string representation of the value of this instance.
                </returns>
    </member>
    <member name="M:System.Double.ToString(System.IFormatProvider)">
      <summary>
                    Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.
                </summary>
      <returns>
                    The string representation of the value of this instance as specified by <paramref name="provider" />.
                </returns>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information. 
                </param>
    </member>
    <member name="M:System.Double.ToString(System.String)">
      <summary>
                    Converts the numeric value of this instance to its equivalent string representation, using the specified format.
                </summary>
      <returns>
                    The string representation of the value of this instance as specified by <paramref name="format" />.
                </returns>
      <param name="format">
                    A standard numeric format string or a Custom Numeric Format Strings.
                </param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid. 
                </exception>
    </member>
    <member name="M:System.Double.ToString(System.String,System.IFormatProvider)">
      <summary>
                    Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.
                </summary>
      <returns>
                    The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.
                </returns>
      <param name="format">
                    A standard numeric format string or a Custom Numeric Format Strings.
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information. 
                </param>
    </member>
    <member name="M:System.Double.TryParse(System.String,System.Double@)">
      <summary>
                    Converts the string representation of a number to its double-precision floating-point number equivalent. A return value indicates whether the conversion succeeded or failed.
                </summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.
                </returns>
      <param name="s">
                    A string containing a number to convert. 
                </param>
      <param name="result">
                    When this method returns, contains the double-precision floating-point number equivalent to the <paramref name="s" /> parameter, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not a number in a valid format, or represents a number less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. This parameter is passed uninitialized. 
                </param>
    </member>
    <member name="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
      <summary>
                    Converts the string representation of a number in a specified style and culture-specific format to its double-precision floating-point number equivalent. A return value indicates whether the conversion succeeded or failed.
                </summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.
                </returns>
      <param name="s">
                    A string containing a number to convert. 
                </param>
      <param name="style">
                    A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Float" /> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />. 
                </param>
      <param name="result">
                    When this method returns, contains a double-precision floating-point number equivalent to the numeric value or symbol contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not in a format compliant with <paramref name="style" />, represents a number less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />, or if <paramref name="style" /> is not a valid combination of <see cref="T:System.Globalization.NumberStyles" /> enumerated constants. This parameter is passed uninitialized. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. 
                
                    -or-
                <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.
                </exception>
    </member>
    <member name="T:System.EntryPointNotFoundException">
      <summary>
                    The exception that is thrown when an attempt to load a class fails due to the absence of an entry method.
                </summary>
    </member>
    <member name="M:System.EntryPointNotFoundException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.EntryPointNotFoundException" /> class.
                </summary>
    </member>
    <member name="M:System.EntryPointNotFoundException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.EntryPointNotFoundException" /> class with a specified error message.
                </summary>
      <param name="message">
                    The error message that explains the reason for the exception. 
                </param>
    </member>
    <member name="M:System.EntryPointNotFoundException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.EntryPointNotFoundException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
                </summary>
      <param name="message">
                    The error message that explains the reason for the exception. 
                </param>
      <param name="inner">
                    The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. 
                </param>
    </member>
    <member name="T:System.Enum">
      <summary>
                    Provides the base class for enumerations.
                </summary>
    </member>
    <member name="M:System.Enum.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Enum" /> class. 
                </summary>
    </member>
    <member name="M:System.Enum.CompareTo(System.Object)">
      <summary>
                    Compares this instance to a specified object and returns an indication of their relative values.
                </summary>
      <returns>
                    A signed number indicating the relationship of this instance to <paramref name="target" />.
                
                    Return Value 
                
                    Description 
                
                    Less than zero 
                
                    The value of this instance is less than the value of <paramref name="target" />. 
                
                    Zero 
                
                    The value of this instance is equal to the value of <paramref name="target" />. 
                
                    Greater than zero 
                
                    The value of this instance is greater than the value of <paramref name="target" />.
                
                    -or- 
                <paramref name="target" /> is null. 
                </returns>
      <param name="target">
                    An object to compare, or null. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> and this instance are not the same type. 
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    This instance is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />. 
                </exception>
      <exception cref="T:System.NullReferenceException">
                    This instance is null.
                </exception>
    </member>
    <member name="M:System.Enum.Equals(System.Object)">
      <summary>
                    Returns a value indicating whether this instance is equal to a specified object.
                </summary>
      <returns>true if <paramref name="obj" /> is an <see cref="T:System.Enum" /> with the same underlying type and value as this instance; otherwise, false.
                </returns>
      <param name="obj">
                    An object to compare with this instance, or null. 
                </param>
    </member>
    <member name="M:System.Enum.GetHashCode">
      <summary>
                    Returns the hash code for the value of this instance.
                </summary>
      <returns>
                    A 32-bit signed integer hash code.
                </returns>
    </member>
    <member name="M:System.Enum.GetName(System.Type,System.Object)">
      <summary>
                    Retrieves the name of the constant in the specified enumeration that has the specified value.
                </summary>
      <returns>
                    A string containing the name of the enumerated constant in <paramref name="enumType" /> whose value is <paramref name="value" />, or a null if no such constant is found.
                </returns>
      <param name="enumType">
                    An enumeration type.
                </param>
      <param name="value">
                    The value of the underlying type of a particular enumerated constant.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> or <paramref name="value" /> is a null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.
                
                    -or-
                <paramref name="value" /> is neither of type <paramref name="enumType" /> nor does it have the same underlying type as <paramref name="enumType" />.
                </exception>
    </member>
    <member name="M:System.Enum.GetTypeCode">
      <summary>
                    Returns the underlying <see cref="T:System.TypeCode" /> for this instance.
                </summary>
      <returns>
                    The <see cref="T:System.TypeCode" /> for this instance.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The enumeration type is unknown.
                </exception>
    </member>
    <member name="M:System.Enum.GetUnderlyingType(System.Type)">
      <summary>
                    Returns the underlying type of the specified enumeration.
                </summary>
      <returns>
                    The underlying <see cref="T:System.Type" /> of <paramref name="enumType" />.
                </returns>
      <param name="enumType">
                    An enumeration type. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />. 
                </exception>
    </member>
    <member name="M:System.Enum.IsDefined(System.Type,System.Object)">
      <summary>
                    Returns an indication whether a constant with a specified value exists in a specified enumeration.
                </summary>
      <returns>true if a constant in <paramref name="enumType" /> has a value equal to <paramref name="value" />; otherwise, false.
                </returns>
      <param name="enumType">
                    An enumeration type. 
                </param>
      <param name="value">
                    The value or name of a constant in <paramref name="enumType" />. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> or <paramref name="value" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an Enum.
                
                    -or- 
                
                    The type of <paramref name="value" /> is not an <paramref name="enumType" />.
                
                    -or- 
                
                    The type of <paramref name="value" /> is not an underlying type of <paramref name="enumType" />. 
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />, or <see cref="T:System.String" />. 
                </exception>
    </member>
    <member name="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
      <summary>
                    Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object. A parameter specifies whether the operation is case-sensitive.
                </summary>
      <returns>
                    An object of type <paramref name="enumType" /> whose value is represented by <paramref name="value" />.
                </returns>
      <param name="enumType">
                    The <see cref="T:System.Type" /> of the enumeration. 
                </param>
      <param name="value">
                    A string containing the name or value to convert. 
                </param>
      <param name="ignoreCase">
                    If true, ignore case; otherwise, regard case. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> or <paramref name="value" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.
                
                    -or- 
                <paramref name="value" /> is either an empty string ("") or only contains white space.
                
                    -or- 
                <paramref name="value" /> is a name, but not one of the named constants defined for the enumeration. 
                </exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>
                    Converts the current value to a Boolean value based on the underlying type.
                </summary>
      <returns>
                    This member always throws an exception.
                </returns>
      <param name="provider">
                    An object that supplies culture-specific formatting information.
                </param>
      <exception cref="T:System.InvalidCastException">
                    In all cases. 
                </exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>
                    Converts the current value to an 8-bit unsigned integer based on the underlying type.
                </summary>
      <returns>
                    The converted value.
                </returns>
      <param name="provider">
                    An object that supplies culture-specific formatting information.
                </param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>
                    Converts the current value to a Unicode character based on the underlying type.
                </summary>
      <returns>
                    This member always throws an exception.
                </returns>
      <param name="provider">
                    An object that supplies culture-specific formatting information.
                </param>
      <exception cref="T:System.InvalidCastException">
                    In all cases. 
                </exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>
                    Converts the current value to a <see cref="T:System.DateTime" /> based on the underlying type.
                </summary>
      <returns>
                    This member always throws an exception.
                </returns>
      <param name="provider">
                    An object that supplies culture-specific formatting information.
                </param>
      <exception cref="T:System.InvalidCastException">
                    In all cases. 
                </exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>
                    Converts the current value to a <see cref="T:System.Decimal" /> based on the underlying type.
                </summary>
      <returns>
                    This member always throws an exception.
                </returns>
      <param name="provider">
                    An object that supplies culture-specific formatting information.
                </param>
      <exception cref="T:System.InvalidCastException">
                    In all cases. 
                </exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>
                    Converts the current value to a double-precision floating point number based on the underlying type.
                </summary>
      <returns>
                    This member always throws an exception.
                </returns>
      <param name="provider">
                    An object that supplies culture-specific formatting information.
                </param>
      <exception cref="T:System.InvalidCastException">
                    In all cases. 
                </exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>
                    Converts the current value to a 16-bit signed integer based on the underlying type.
                </summary>
      <returns>
                    The converted value.
                </returns>
      <param name="provider">
                    An object that supplies culture-specific formatting information.
                </param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>
                    Converts the current value to a 32-bit signed integer based on the underlying type.
                </summary>
      <returns>
                    The converted value.
                </returns>
      <param name="provider">
                    An object that supplies culture-specific formatting information.
                </param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>
                    Converts the current value to a 64-bit signed integer based on the underlying type.
                </summary>
      <returns>
                    The converted value.
                </returns>
      <param name="provider">
                    An object that supplies culture-specific formatting information.
                </param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>
                    Converts the current value to an 8-bit signed integer based on the underlying type.
                </summary>
      <returns>
                    The converted value.
                </returns>
      <param name="provider">
                    An object that supplies culture-specific formatting information.
                </param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>
                    Converts the current value to a single-precision floating point number based on the underlying type.
                </summary>
      <returns>
                    This member always throws an exception.
                </returns>
      <param name="provider">
                    An object that supplies culture-specific formatting information.
                </param>
      <exception cref="T:System.InvalidCastException">
                    In all cases. 
                </exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>
                    Converts the current value to a specified type based on the underlying type.
                </summary>
      <returns>
                    The converted value.
                </returns>
      <param name="type">
                    The type to convert to. 
                </param>
      <param name="provider">
                    An object that supplies culture-specific formatting information.
                </param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>
                    Converts the current value to a 16-bit unsigned integer based on the underlying type.
                </summary>
      <returns>
                    The converted value.
                </returns>
      <param name="provider">
                    An object that supplies culture-specific formatting information.
                </param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>
                    Converts the current value to a 32-bit unsigned integer based on the underlying type.
                </summary>
      <returns>
                    The converted value.
                </returns>
      <param name="provider">
                    An object that supplies culture-specific formatting information.
                </param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>
                    Converts the current value to a 64-bit unsigned integer based on the underlying type.
                </summary>
      <returns>
                    The converted value.
                </returns>
      <param name="provider">
                    An object that supplies culture-specific formatting information.
                </param>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.Object)">
      <summary>
                    Returns an instance of the specified enumeration set to the specified value.
                </summary>
      <returns>
                    An enumeration object whose value is <paramref name="value" />.
                </returns>
      <param name="enumType">
                    An enumeration. 
                </param>
      <param name="value">
                    The value. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.
                
                    -or- 
                <paramref name="value" /> is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />. 
                </exception>
    </member>
    <member name="M:System.Enum.ToString">
      <summary>
                    Converts the value of this instance to its equivalent string representation.
                </summary>
      <returns>
                    The string representation of the value of this instance.
                </returns>
    </member>
    <member name="M:System.Enum.ToString(System.IFormatProvider)">
      <summary>
                    This method overload is obsolete; use <see cref="M:System.Enum.ToString" />.
                </summary>
      <param name="provider">
                    (obsolete) 
                </param>
    </member>
    <member name="M:System.Enum.ToString(System.String)">
      <summary>
                    Converts the value of this instance to its equivalent string representation using the specified format.
                </summary>
      <returns>
                    The string representation of the value of this instance as specified by <paramref name="format" />.
                </returns>
      <param name="format">
                    A format string. 
                </param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> contains an invalid specification. 
                </exception>
    </member>
    <member name="M:System.Enum.ToString(System.String,System.IFormatProvider)">
      <summary>
                    This method overload is obsolete; use <see cref="M:System.Enum.ToString(System.String)" />.
                </summary>
      <param name="format">
                    A format specification. 
                </param>
      <param name="provider">
                    (obsolete)
                </param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> does not contain a valid format specification. 
                </exception>
    </member>
    <member name="T:System.Environment">
      <summary>
                    Provides information about, and means to manipulate, the current environment and platform. This class cannot be inherited.
                </summary>
    </member>
    <member name="P:System.Environment.CurrentDirectory">
      <summary>[SECURITY CRITICAL] 
                    Gets or sets the fully qualified path of the current working directory.
                </summary>
      <returns>
                    A string containing a directory path. 
                </returns>
    </member>
    <member name="P:System.Environment.ExitCode">
      <summary>
                    Gets or sets the exit code of the process.
                </summary>
      <returns>
                    A 32-bit signed integer containing the exit code. The default value is zero.
                </returns>
    </member>
    <member name="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder)">
      <summary>[SECURITY CRITICAL] 
                    Gets the path to the system special folder identified by the specified enumeration.
                </summary>
      <returns>
                    The path to the specified system special folder, if that folder physically exists on your computer; otherwise, the empty string ("").
                
                    A folder will not physically exist if the operating system did not create it, the existing folder was deleted, or the folder is a virtual directory, such as My Computer, which does not correspond to a physical path.
                </returns>
      <param name="folder">
                    An enumerated constant that identifies a system special folder. 
                </param>
    </member>
    <member name="P:System.Environment.HasShutdownStarted">
      <summary>
                    Gets a value indicating whether the common language runtime is shutting down or the current application domain is unloading.
                </summary>
      <returns>true if the common language runtime is shutting down or the current <see cref="T:System.AppDomain" /> is unloading; otherwise, false.
                
                    The current application domain is the <see cref="T:System.AppDomain" /> that contains the object that is calling <see cref="P:System.Environment.HasShutdownStarted" />.
                </returns>
    </member>
    <member name="P:System.Environment.NewLine">
      <summary>
                    Gets the newline string defined for this environment.
                </summary>
      <returns>
                    A string containing "\r\n" for non-Unix platforms, 
                
                     or 
                
                    a string containing "\n" for Unix platforms.
                </returns>
    </member>
    <member name="P:System.Environment.OSVersion">
      <summary>
                    Gets an <see cref="T:System.OperatingSystem" /> object that contains the current platform identifier and version number.
                </summary>
      <returns>
                    An <see cref="T:System.OperatingSystem" /> object.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    This property was unable to obtain the system version.
                
                    -or- 
                
                    The obtained platform identifier is not a member of <see cref="T:System.PlatformID" />. 
                </exception>
    </member>
    <member name="P:System.Environment.ProcessorCount">
      <summary>[SECURITY CRITICAL] 
                    Gets the number of processors on the current machine.
                </summary>
      <returns>
                    The 32-bit signed integer that specifies the number of processors on the current machine. There is no default.
                </returns>
    </member>
    <member name="P:System.Environment.TickCount">
      <summary>
                    Gets the number of milliseconds elapsed since the system started.
                </summary>
      <returns>
                    A 32-bit signed integer containing the amount of time in milliseconds that has passed since the last time the computer was started.
                </returns>
    </member>
    <member name="P:System.Environment.Version">
      <summary>
                    Gets a <see cref="T:System.Version" /> object that describes the major, minor, build, and revision numbers of the common language runtime.
                </summary>
      <returns>
                    A <see cref="T:System.Version" /> object.
                </returns>
    </member>
    <member name="T:System.Environment.SpecialFolder">
      <summary>
                    Specifies enumerated constants used to retrieve directory paths to system special folders.
                </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.ApplicationData">
      <summary>
                    The directory that serves as a common repository for application-specific data for the current roaming user.
                </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonApplicationData">
      <summary>
                    The directory that serves as a common repository for application-specific data that is used by all users.
                </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.LocalApplicationData">
      <summary>
                    The directory that serves as a common repository for application-specific data that is used by the current, non-roaming user.
                </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Cookies">
      <summary>
                    The directory that serves as a common repository for Internet cookies.
                </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Desktop">
      <summary>
                    The logical Desktop rather than the physical file system location.
                </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Favorites">
      <summary>
                    The directory that serves as a common repository for the user's favorite items.
                </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.History">
      <summary>
                    The directory that serves as a common repository for Internet history items.
                </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.InternetCache">
      <summary>
                    The directory that serves as a common repository for temporary Internet files.
                </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Programs">
      <summary>
                    The directory that contains the user's program groups.
                </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyComputer">
      <summary>
                    The "My Computer" folder. 
                </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyMusic">
      <summary>
                    The "My Music" folder.
                </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyPictures">
      <summary>
                    The "My Pictures" folder.
                </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Recent">
      <summary>
                    The directory that contains the user's most recently used documents.
                </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.SendTo">
      <summary>
                    The directory that contains the Send To menu items.
                </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.StartMenu">
      <summary>
                    The directory that contains the Start menu items.
                </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Startup">
      <summary>
                    The directory that corresponds to the user's Startup program group.
                </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.System">
      <summary>
                    The System directory.
                </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Templates">
      <summary>
                    The directory that serves as a common repository for document templates.
                </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.DesktopDirectory">
      <summary>
                    The directory used to physically store file objects on the desktop.
                </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Personal">
      <summary>
                    The directory that serves as a common repository for documents.
                </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyDocuments">
      <summary>
                    The "My Documents" folder.
                </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.ProgramFiles">
      <summary>
                    The program files directory.
                </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonProgramFiles">
      <summary>
                    The directory for components that are shared across applications.
                </summary>
    </member>
    <member name="T:System.EventArgs">
      <summary>
        <see cref="T:System.EventArgs" /> is the base class for classes containing event data. 
                </summary>
    </member>
    <member name="M:System.EventArgs.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.EventArgs" /> class.
                </summary>
    </member>
    <member name="F:System.EventArgs.Empty">
      <summary>
                    Represents an event with no event data.
                </summary>
    </member>
    <member name="T:System.EventHandler">
      <summary>
                    Represents the method that will handle an event that has no event data.
                </summary>
      <param name="sender">
                    The source of the event. 
                </param>
      <param name="e">
                    An <see cref="T:System.EventArgs" /> that contains no event data. 
                </param>
    </member>
    <member name="T:System.EventHandler`1">
      <summary>
                    Represents the method that will handle an event. 
                </summary>
      <param name="sender">
                    The source of the event.
                </param>
      <param name="e">
                    An <see cref="T:System.EventArgs" /> that contains the event data. 
                </param>
      <typeparam name="TEventArgs">
                    The type of the event data generated by the event.
                </typeparam>
    </member>
    <member name="T:System.Exception">
      <summary>
                    Represents errors that occur during application execution.
                </summary>
    </member>
    <member name="M:System.Exception.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Exception" /> class.
                </summary>
    </member>
    <member name="M:System.Exception.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message.
                </summary>
      <param name="message">
                    The message that describes the error. 
                </param>
    </member>
    <member name="M:System.Exception.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
                </summary>
      <param name="message">
                    The error message that explains the reason for the exception. 
                </param>
      <param name="innerException">
                    The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. 
                </param>
    </member>
    <member name="P:System.Exception.Data">
      <summary>
                    Gets a collection of key/value pairs that provide additional user-defined information about the exception.
                </summary>
      <returns>
                    An object that implements the <see cref="T:System.Collections.IDictionary" /> interface and contains a collection of user-defined key/value pairs. The default is an empty collection.
                </returns>
    </member>
    <member name="M:System.Exception.GetBaseException">
      <summary>
                    When overridden in a derived class, returns the <see cref="T:System.Exception" /> that is the root cause of one or more subsequent exceptions.
                </summary>
      <returns>
                    The first exception thrown in a chain of exceptions. If the <see cref="P:System.Exception.InnerException" /> property of the current exception is a null reference (Nothing in Visual Basic), this property returns the current exception.
                </returns>
    </member>
    <member name="M:System.Exception.GetType">
      <summary>
                    Gets the runtime type of the current instance.
                </summary>
      <returns>
                    A <see cref="T:System.Type" /> object that represents the exact runtime type of the current instance.
                </returns>
    </member>
    <member name="P:System.Exception.HResult">
      <summary>
                    Gets or sets HRESULT, a coded numerical value that is assigned to a specific exception.
                </summary>
      <returns>
                    The HRESULT value.
                </returns>
    </member>
    <member name="P:System.Exception.InnerException">
      <summary>
                    Gets the <see cref="T:System.Exception" /> instance that caused the current exception.
                </summary>
      <returns>
                    An instance of Exception that describes the error that caused the current exception. The InnerException property returns the same value as was passed into the constructor, or a null reference (Nothing in Visual Basic) if the inner exception value was not supplied to the constructor. This property is read-only.
                </returns>
    </member>
    <member name="P:System.Exception.Message">
      <summary>
                    Gets a message that describes the current exception.
                </summary>
      <returns>
                    The error message that explains the reason for the exception, or an empty string("").
                </returns>
    </member>
    <member name="P:System.Exception.StackTrace">
      <summary>
                    Gets a string representation of the frames on the call stack at the time the current exception was thrown.
                </summary>
      <returns>
                    A string that describes the contents of the call stack, with the most recent method call appearing first.
                </returns>
    </member>
    <member name="M:System.Exception.ToString">
      <summary>
                    Creates and returns a string representation of the current exception.
                </summary>
      <returns>
                    A string representation of the current exception.
                </returns>
    </member>
    <member name="T:System.ExecutionEngineException">
      <summary>
                    The exception that is thrown when there is an internal error in the execution engine of the common language runtime. This class cannot be inherited.  
                </summary>
    </member>
    <member name="T:System.FieldAccessException">
      <summary>
                    The exception that is thrown when there is an invalid attempt to access a private or protected field inside a class.
                </summary>
    </member>
    <member name="T:System.FlagsAttribute">
      <summary>
                    Indicates that an enumeration can be treated as a bit field; that is, a set of flags.
                </summary>
    </member>
    <member name="M:System.FlagsAttribute.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.FlagsAttribute" /> class.
                </summary>
    </member>
    <member name="T:System.FormatException">
      <summary>
                    The exception that is thrown when the format of an argument does not meet the parameter specifications of the invoked method.
                </summary>
    </member>
    <member name="M:System.FormatException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.FormatException" /> class.
                </summary>
    </member>
    <member name="M:System.FormatException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.FormatException" /> class with a specified error message.
                </summary>
      <param name="message">
                    The message that describes the error. 
                </param>
    </member>
    <member name="M:System.FormatException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.FormatException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
                </summary>
      <param name="message">
                    The error message that explains the reason for the exception. 
                </param>
      <param name="innerException">
                    The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. 
                </param>
    </member>
    <member name="T:System.GC">
      <summary>
                    Controls the system garbage collector, a service that automatically reclaims unused memory.
                </summary>
    </member>
    <member name="M:System.GC.Collect">
      <summary>
                    Induces an immediate garbage collection of all generations. 
                </summary>
    </member>
    <member name="M:System.GC.GetTotalMemory(System.Boolean)">
      <summary>
                    Retrieves the number of bytes currently thought to be allocated. A parameter indicates whether this method can wait a short interval before returning, to allow the system to collect garbage and finalize objects.
                </summary>
      <returns>
                    A number that is the best available approximation of the number of bytes currently allocated in managed memory.
                </returns>
      <param name="forceFullCollection">true to indicate that this method can wait for garbage collection to occur before returning; otherwise, false.
                </param>
    </member>
    <member name="M:System.GC.KeepAlive(System.Object)">
      <summary>
                    References the specified object, which makes it ineligible for garbage collection from the start of the current routine to the point where this method is called.
                </summary>
      <param name="obj">
                    The object to reference. 
                </param>
    </member>
    <member name="P:System.GC.MaxGeneration">
      <summary>
                    Gets the maximum number of generations that the system currently supports.
                </summary>
      <returns>
                    A value that ranges from zero to the maximum number of supported generations.
                </returns>
    </member>
    <member name="M:System.GC.ReRegisterForFinalize(System.Object)">
      <summary>
                    Requests that the system call the finalizer for the specified object for which <see cref="M:System.GC.SuppressFinalize(System.Object)" /> has previously been called.
                </summary>
      <param name="obj">
                    The object that a finalizer must be called for. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> is null. 
                </exception>
    </member>
    <member name="M:System.GC.SuppressFinalize(System.Object)">
      <summary>
                    Requests that the system not call the finalizer for the specified object.
                </summary>
      <param name="obj">
                    The object that a finalizer must not be called for. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> is null. 
                </exception>
    </member>
    <member name="M:System.GC.WaitForPendingFinalizers">
      <summary>
                    Suspends the current thread until the thread that is processing the queue of finalizers has emptied that queue.
                </summary>
    </member>
    <member name="T:System.Guid">
      <summary>
                    Represents a globally unique identifier (GUID).
                </summary>
    </member>
    <member name="M:System.Guid.#ctor(System.Byte[])">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Guid" /> class using the specified array of bytes.
                </summary>
      <param name="b">
                    A 16 element byte array containing values with which to initialize the GUID. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="b" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="b" /> is not 16 bytes long. 
                </exception>
    </member>
    <member name="M:System.Guid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Guid" /> class using the specified integers and bytes.
                </summary>
      <param name="a">
                    The first 4 bytes of the GUID. 
                </param>
      <param name="b">
                    The next 2 bytes of the GUID. 
                </param>
      <param name="c">
                    The next 2 bytes of the GUID. 
                </param>
      <param name="d">
                    The next byte of the GUID. 
                </param>
      <param name="e">
                    The next byte of the GUID. 
                </param>
      <param name="f">
                    The next byte of the GUID. 
                </param>
      <param name="g">
                    The next byte of the GUID. 
                </param>
      <param name="h">
                    The next byte of the GUID. 
                </param>
      <param name="i">
                    The next byte of the GUID. 
                </param>
      <param name="j">
                    The next byte of the GUID. 
                </param>
      <param name="k">
                    The next byte of the GUID. 
                </param>
    </member>
    <member name="M:System.Guid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte[])">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Guid" /> class using the specified integers and byte array.
                </summary>
      <param name="a">
                    The first 4 bytes of the GUID. 
                </param>
      <param name="b">
                    The next 2 bytes of the GUID. 
                </param>
      <param name="c">
                    The next 2 bytes of the GUID. 
                </param>
      <param name="d">
                    The remaining 8 bytes of the GUID. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="d" /> is not 8 bytes long. 
                </exception>
    </member>
    <member name="M:System.Guid.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Guid" /> class using the value represented by the specified string.
                </summary>
      <param name="g">
                    A <see cref="T:System.String" /> that contains a GUID in one of the following formats ('d' represents a hexadecimal digit whose case is ignored): 
                
                    32 contiguous digits: 
                
                    dddddddddddddddddddddddddddddddd 
                
                    -or- 
                
                    Groups of 8, 4, 4, 4, and 12 digits with hyphens between the groups. The entire GUID can optionally be enclosed in matching braces or parentheses: 
                
                    dddddddd-dddd-dddd-dddd-dddddddddddd 
                
                    -or- 
                
                    {dddddddd-dddd-dddd-dddd-dddddddddddd} 
                
                    -or- 
                
                    (dddddddd-dddd-dddd-dddd-dddddddddddd) 
                
                    -or- 
                
                    Groups of 8, 4, and 4 digits, and a subset of eight groups of 2 digits, with each group prefixed by "0x" or "0X", and separated by commas. The entire GUID, as well as the subset, is enclosed in matching braces: 
                
                    {0xdddddddd, 0xdddd, 0xdddd,{0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd}} 
                
                    All braces, commas, and "0x" prefixes are required. All embedded spaces are ignored. All leading zeroes in a group are ignored.
                
                    The digits shown in a group are the maximum number of meaningful digits that can appear in that group. You can specify from 1 to the number of digits shown for a group. The specified digits are assumed to be the low order digits of the group. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="g" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
                    The format of <paramref name="g" /> is invalid. 
                </exception>
      <exception cref="T:System.OverflowException">
                    The format of <paramref name="g" /> is invalid. 
                </exception>
    </member>
    <member name="M:System.Guid.CompareTo(System.Guid)">
      <summary>
                    Compares this instance to a specified <see cref="T:System.Guid" /> object and returns an indication of their relative values.
                </summary>
      <returns>
                    A signed number indicating the relative values of this instance and <paramref name="value" />.
                
                    Value 
                
                    Description 
                
                    A negative integer 
                
                    This instance is less than <paramref name="value" />. 
                
                    Zero 
                
                    This instance is equal to <paramref name="value" />. 
                
                    A positive integer 
                
                    This instance is greater than <paramref name="value" />. 
                </returns>
      <param name="value">
                    A <see cref="T:System.Guid" /> object to compare to this instance.
                </param>
    </member>
    <member name="M:System.Guid.CompareTo(System.Object)">
      <summary>
                    Compares this instance to a specified object and returns an indication of their relative values.
                </summary>
      <returns>
                    A signed number indicating the relative values of this instance and <paramref name="value" />.
                
                    Value 
                
                    Description 
                
                    A negative integer 
                
                    This instance is less than <paramref name="value" />. 
                
                    Zero 
                
                    This instance is equal to <paramref name="value" />. 
                
                    A positive integer 
                
                    This instance is greater than <paramref name="value" />.
                
                    -or- 
                <paramref name="value" /> is null. 
                </returns>
      <param name="value">
                    An object to compare, or null. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.Guid" />. 
                </exception>
    </member>
    <member name="F:System.Guid.Empty">
      <summary>
                    A read-only instance of the <see cref="T:System.Guid" /> class whose value is guaranteed to be all zeroes.
                </summary>
    </member>
    <member name="M:System.Guid.Equals(System.Guid)">
      <summary>
                    Returns a value indicating whether this instance and a specified <see cref="T:System.Guid" /> object represent the same value.
                </summary>
      <returns>true if <paramref name="g" /> is equal to this instance; otherwise, false.
                </returns>
      <param name="g">
                    A <see cref="T:System.Guid" /> object to compare to this instance.
                </param>
    </member>
    <member name="M:System.Guid.Equals(System.Object)">
      <summary>
                    Returns a value indicating whether this instance is equal to a specified object.
                </summary>
      <returns>true if <paramref name="o" /> is a <see cref="T:System.Guid" /> that has the same value as this instance; otherwise, false.
                </returns>
      <param name="o">
                    The object to compare with this instance. 
                </param>
    </member>
    <member name="M:System.Guid.GetHashCode">
      <summary>
                    Returns the hash code for this instance.
                </summary>
      <returns>
                    The hash code for this instance.
                </returns>
    </member>
    <member name="M:System.Guid.NewGuid">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Guid" /> class.
                </summary>
      <returns>
                    A new <see cref="T:System.Guid" /> object.
                </returns>
    </member>
    <member name="M:System.Guid.op_Equality(System.Guid,System.Guid)">
      <summary>
                    Returns an indication whether the values of two specified <see cref="T:System.Guid" /> objects are equal.
                </summary>
      <returns>true if <paramref name="a" /> and <paramref name="b" /> are equal; otherwise, false.
                </returns>
      <param name="a">
                    A <see cref="T:System.Guid" /> object. 
                </param>
      <param name="b">
                    A <see cref="T:System.Guid" /> object. 
                </param>
    </member>
    <member name="M:System.Guid.op_Inequality(System.Guid,System.Guid)">
      <summary>
                    Returns an indication whether the values of two specified <see cref="T:System.Guid" /> objects are not equal.
                </summary>
      <returns>true if <paramref name="a" /> and <paramref name="b" /> are not equal; otherwise, false.
                </returns>
      <param name="a">
                    A <see cref="T:System.Guid" /> object. 
                </param>
      <param name="b">
                    A <see cref="T:System.Guid" /> object. 
                </param>
    </member>
    <member name="M:System.Guid.ToByteArray">
      <summary>
                    Returns a 16-element byte array that contains the value of this instance.
                </summary>
      <returns>
                    A 16-element byte array.
                </returns>
    </member>
    <member name="M:System.Guid.ToString">
      <summary>
                    Returns a <see cref="T:System.String" /> representation of the value of this instance in registry format.
                </summary>
      <returns>
                    A String formatted in this pattern: 
                
                    xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx 
                
                    where the value of the GUID is represented as a series of lower-case hexadecimal digits in groups of 8, 4, 4, 4, and 12 digits and separated by hyphens. An example of a return value is "382c74c3-721d-4f34-80e5-57657b6cbc27".
                </returns>
    </member>
    <member name="M:System.Guid.ToString(System.String)">
      <summary>
                    Returns a <see cref="T:System.String" /> representation of the value of this <see cref="T:System.Guid" /> instance, according to the provided format specifier.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> representation of the value of this <see cref="T:System.Guid" />.
                </returns>
      <param name="format">
                    A single format specifier that indicates how to format the value of this <see cref="T:System.Guid" />. The <paramref name="format" /> parameter can be "N", "D", "B", or "P". If <paramref name="format" /> is null or the empty string (""), "D" is used. 
                </param>
      <exception cref="T:System.FormatException">
                    The value of <paramref name="format" /> is not null, the empty string (""), "N", "D", "B", or "P". 
                </exception>
    </member>
    <member name="M:System.Guid.ToString(System.String,System.IFormatProvider)">
      <summary>
                    Returns a <see cref="T:System.String" /> representation of the value of this instance of the <see cref="T:System.Guid" /> class, according to the provided format specifier and culture-specific format information.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> representation of the value of this <see cref="T:System.Guid" />.
                </returns>
      <param name="format">
                    A single format specifier that indicates how to format the value of this <see cref="T:System.Guid" />. The <paramref name="format" /> parameter can be "N", "D", "B", or "P". If <paramref name="format" /> is null or the empty string (""), "D" is used. 
                </param>
      <param name="provider">
                    (Reserved) An IFormatProvider reference that supplies culture-specific formatting services. 
                </param>
      <exception cref="T:System.FormatException">
                    The value of <paramref name="format" /> is not null, the empty string (""), "N", "D", "B", or "P". 
                </exception>
    </member>
    <member name="T:System.IAsyncResult">
      <summary>
                    Represents the status of an asynchronous operation. 
                </summary>
    </member>
    <member name="P:System.IAsyncResult.AsyncState">
      <summary>
                    Gets a user-defined object that qualifies or contains information about an asynchronous operation.
                </summary>
      <returns>
                    A user-defined object that qualifies or contains information about an asynchronous operation.
                </returns>
    </member>
    <member name="P:System.IAsyncResult.AsyncWaitHandle">
      <summary>
                    Gets a <see cref="T:System.Threading.WaitHandle" /> that is used to wait for an asynchronous operation to complete.
                </summary>
      <returns>
                    A wait handle that is used to wait for an asynchronous operation to complete.
                </returns>
    </member>
    <member name="P:System.IAsyncResult.CompletedSynchronously">
      <summary>
                    Gets a value that indicates whether the asynchronous operation completed synchronously.
                </summary>
      <returns>true if the asynchronous operation completed synchronously; otherwise, false.
                </returns>
    </member>
    <member name="P:System.IAsyncResult.IsCompleted">
      <summary>
                    Gets a value that indicates whether the asynchronous operation has completed.
                </summary>
      <returns>true if the operation is complete; otherwise, false.
                </returns>
    </member>
    <member name="T:System.IComparable">
      <summary>
                    Defines a generalized type-specific comparison method that a value type or class implements to order or sort its instances.
                </summary>
    </member>
    <member name="M:System.IComparable.CompareTo(System.Object)">
      <summary>
                    Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
                </summary>
      <returns>
                    A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings: 
                
                    Value 
                
                    Meaning 
                
                    Less than zero 
                
                    This instance is less than <paramref name="obj" />. 
                
                    Zero 
                
                    This instance is equal to <paramref name="obj" />. 
                
                    Greater than zero 
                
                    This instance is greater than <paramref name="obj" />. 
                </returns>
      <param name="obj">
                    An object to compare with this instance. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not the same type as this instance. 
                </exception>
    </member>
    <member name="T:System.IComparable`1">
      <summary>
                    Defines a generalized comparison method that a value type or class implements to create a type-specific comparison method for ordering instances.
                </summary>
      <typeparam name="T">
                    The type of objects to compare.
                </typeparam>
    </member>
    <member name="M:System.IComparable`1.CompareTo(`0)">
      <summary>
                    Compares the current object with another object of the same type.
                </summary>
      <returns>
                    A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: 
                
                    Value 
                
                    Meaning 
                
                    Less than zero 
                
                    This object is less than the <paramref name="other" /> parameter.
                
                    Zero 
                
                    This object is equal to <paramref name="other" />. 
                
                    Greater than zero 
                
                    This object is greater than <paramref name="other" />. 
                </returns>
      <param name="other">
                    An object to compare with this object.
                </param>
    </member>
    <member name="T:System.IConvertible">
      <summary>
                    Defines methods that convert the value of the implementing reference or value type to a common language runtime type that has an equivalent value.
                </summary>
    </member>
    <member name="M:System.IConvertible.GetTypeCode">
      <summary>
                    Returns the <see cref="T:System.TypeCode" /> for this instance.
                </summary>
      <returns>
                    The enumerated constant that is the <see cref="T:System.TypeCode" /> of the class or value type that implements this interface.
                </returns>
    </member>
    <member name="M:System.IConvertible.ToBoolean(System.IFormatProvider)">
      <summary>
                    Converts the value of this instance to an equivalent Boolean value using the specified culture-specific formatting information.
                </summary>
      <returns>
                    A Boolean value equivalent to the value of this instance.
                </returns>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
    </member>
    <member name="M:System.IConvertible.ToByte(System.IFormatProvider)">
      <summary>
                    Converts the value of this instance to an equivalent 8-bit unsigned integer using the specified culture-specific formatting information.
                </summary>
      <returns>
                    An 8-bit unsigned integer equivalent to the value of this instance.
                </returns>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
    </member>
    <member name="M:System.IConvertible.ToChar(System.IFormatProvider)">
      <summary>
                    Converts the value of this instance to an equivalent Unicode character using the specified culture-specific formatting information.
                </summary>
      <returns>
                    A Unicode character equivalent to the value of this instance.
                </returns>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
    </member>
    <member name="M:System.IConvertible.ToDateTime(System.IFormatProvider)">
      <summary>
                    Converts the value of this instance to an equivalent <see cref="T:System.DateTime" /> using the specified culture-specific formatting information.
                </summary>
      <returns>
                    A <see cref="T:System.DateTime" /> instance equivalent to the value of this instance.
                </returns>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
    </member>
    <member name="M:System.IConvertible.ToDecimal(System.IFormatProvider)">
      <summary>
                    Converts the value of this instance to an equivalent <see cref="T:System.Decimal" /> number using the specified culture-specific formatting information.
                </summary>
      <returns>
                    A <see cref="T:System.Decimal" /> number equivalent to the value of this instance.
                </returns>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
    </member>
    <member name="M:System.IConvertible.ToDouble(System.IFormatProvider)">
      <summary>
                    Converts the value of this instance to an equivalent double-precision floating-point number using the specified culture-specific formatting information.
                </summary>
      <returns>
                    A double-precision floating-point number equivalent to the value of this instance.
                </returns>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
    </member>
    <member name="M:System.IConvertible.ToInt16(System.IFormatProvider)">
      <summary>
                    Converts the value of this instance to an equivalent 16-bit signed integer using the specified culture-specific formatting information.
                </summary>
      <returns>
                    An 16-bit signed integer equivalent to the value of this instance.
                </returns>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
    </member>
    <member name="M:System.IConvertible.ToInt32(System.IFormatProvider)">
      <summary>
                    Converts the value of this instance to an equivalent 32-bit signed integer using the specified culture-specific formatting information.
                </summary>
      <returns>
                    An 32-bit signed integer equivalent to the value of this instance.
                </returns>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
    </member>
    <member name="M:System.IConvertible.ToInt64(System.IFormatProvider)">
      <summary>
                    Converts the value of this instance to an equivalent 64-bit signed integer using the specified culture-specific formatting information.
                </summary>
      <returns>
                    An 64-bit signed integer equivalent to the value of this instance.
                </returns>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
    </member>
    <member name="M:System.IConvertible.ToSByte(System.IFormatProvider)">
      <summary>
                    Converts the value of this instance to an equivalent 8-bit signed integer using the specified culture-specific formatting information.
                </summary>
      <returns>
                    An 8-bit signed integer equivalent to the value of this instance.
                </returns>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
    </member>
    <member name="M:System.IConvertible.ToSingle(System.IFormatProvider)">
      <summary>
                    Converts the value of this instance to an equivalent single-precision floating-point number using the specified culture-specific formatting information.
                </summary>
      <returns>
                    A single-precision floating-point number equivalent to the value of this instance.
                </returns>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
    </member>
    <member name="M:System.IConvertible.ToString(System.IFormatProvider)">
      <summary>
                    Converts the value of this instance to an equivalent <see cref="T:System.String" /> using the specified culture-specific formatting information.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> instance equivalent to the value of this instance.
                </returns>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
    </member>
    <member name="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)">
      <summary>
                    Converts the value of this instance to an <see cref="T:System.Object" /> of the specified <see cref="T:System.Type" /> that has an equivalent value, using the specified culture-specific formatting information.
                </summary>
      <returns>
                    An <see cref="T:System.Object" /> instance of type <paramref name="conversionType" /> whose value is equivalent to the value of this instance.
                </returns>
      <param name="conversionType">
                    The <see cref="T:System.Type" /> to which the value of this instance is converted. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
    </member>
    <member name="M:System.IConvertible.ToUInt16(System.IFormatProvider)">
      <summary>
                    Converts the value of this instance to an equivalent 16-bit unsigned integer using the specified culture-specific formatting information.
                </summary>
      <returns>
                    An 16-bit unsigned integer equivalent to the value of this instance.
                </returns>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
    </member>
    <member name="M:System.IConvertible.ToUInt32(System.IFormatProvider)">
      <summary>
                    Converts the value of this instance to an equivalent 32-bit unsigned integer using the specified culture-specific formatting information.
                </summary>
      <returns>
                    An 32-bit unsigned integer equivalent to the value of this instance.
                </returns>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
    </member>
    <member name="M:System.IConvertible.ToUInt64(System.IFormatProvider)">
      <summary>
                    Converts the value of this instance to an equivalent 64-bit unsigned integer using the specified culture-specific formatting information.
                </summary>
      <returns>
                    An 64-bit unsigned integer equivalent to the value of this instance.
                </returns>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. 
                </param>
    </member>
    <member name="T:System.ICustomFormatter">
      <summary>
                    Defines a method that supports custom, user-defined formatting of the value of an object.
                </summary>
    </member>
    <member name="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
      <summary>
                    Converts the value of a specified object to an equivalent string representation using specified format and culture-specific formatting information.
                </summary>
      <returns>
                    The string representation of the value of <paramref name="arg" />, formatted as specified by <paramref name="format" /> and <paramref name="formatProvider" />.
                </returns>
      <param name="format">
                    A format string containing formatting specifications. 
                </param>
      <param name="arg">
                    An object to format. 
                </param>
      <param name="formatProvider">
                    An <see cref="T:System.IFormatProvider" /> object that supplies format information about the current instance. 
                </param>
    </member>
    <member name="T:System.IDisposable">
      <summary>
                    Defines a method to release allocated resources.
                </summary>
    </member>
    <member name="M:System.IDisposable.Dispose">
      <summary>
                    Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
                </summary>
    </member>
    <member name="T:System.IEquatable`1">
      <summary>
                    Defines a generalized method that a value type or class implements to create a type-specific method for determining equality of instances.
                </summary>
      <typeparam name="T">
                    The type of objects to compare.
                </typeparam>
    </member>
    <member name="M:System.IEquatable`1.Equals(`0)">
      <summary>
                    Indicates whether the current object is equal to another object of the same type.
                </summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
                </returns>
      <param name="other">
                    An object to compare with this object.
                </param>
    </member>
    <member name="T:System.IFormatProvider">
      <summary>
                    Provides a mechanism for retrieving an object to control formatting.
                </summary>
    </member>
    <member name="M:System.IFormatProvider.GetFormat(System.Type)">
      <summary>
                    Returns an object that provides formatting services for the specified type.
                </summary>
      <returns>
                    An instance of the object specified by <paramref name="formatType" />, if the <see cref="T:System.IFormatProvider" /> implementation can supply that type of object; otherwise, null.
                </returns>
      <param name="formatType">
                    An object that specifies the type of format object to return. 
                </param>
    </member>
    <member name="T:System.IFormattable">
      <summary>
                    Provides functionality to format the value of an object into a string representation.
                </summary>
    </member>
    <member name="M:System.IFormattable.ToString(System.String,System.IFormatProvider)">
      <summary>
                    Formats the value of the current instance using the specified format.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> containing the value of the current instance in the specified format.
                </returns>
      <param name="format">
                    The <see cref="T:System.String" /> specifying the format to use.
                
                    -or- 
                null to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation. 
                </param>
      <param name="formatProvider">
                    The <see cref="T:System.IFormatProvider" /> to use to format the value.
                
                    -or- 
                null to obtain the numeric format information from the current locale setting of the operating system. 
                </param>
    </member>
    <member name="T:System.IndexOutOfRangeException">
      <summary>
                    The exception that is thrown when an attempt is made to access an element of an array with an index that is outside the bounds of the array. This class cannot be inherited.
                </summary>
    </member>
    <member name="M:System.IndexOutOfRangeException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.IndexOutOfRangeException" /> class.
                </summary>
    </member>
    <member name="M:System.IndexOutOfRangeException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.IndexOutOfRangeException" /> class with a specified error message.
                </summary>
      <param name="message">
                    The message that describes the error. 
                </param>
    </member>
    <member name="M:System.IndexOutOfRangeException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.IndexOutOfRangeException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
                </summary>
      <param name="message">
                    The error message that explains the reason for the exception. 
                </param>
      <param name="innerException">
                    The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. 
                </param>
    </member>
    <member name="T:System.Int16">
      <summary>
                    Represents a 16-bit signed integer.
                </summary>
    </member>
    <member name="M:System.Int16.CompareTo(System.Int16)">
      <summary>
                    Compares this instance to a specified 16-bit signed integer and returns an integer that indicates whether this instance is less than, equal to, or greater than the specified 16-bit signed integer value.
                </summary>
      <returns>
                    A signed number indicating the relative values of this instance and <paramref name="value" />.
                
                    Return Value 
                
                    Description 
                
                    Less than zero 
                
                    This instance is less than <paramref name="value" />. 
                
                    Zero 
                
                    This instance is equal to <paramref name="value" />. 
                
                    Greater than zero 
                
                    This instance is greater than <paramref name="value" />. 
                </returns>
      <param name="value">
                    An integer to compare. 
                </param>
    </member>
    <member name="M:System.Int16.CompareTo(System.Object)">
      <summary>
                    Compares this instance to a specified object and returns an integer that indicates whether this instance is less than, equal to, or greater than the specified object.
                </summary>
      <returns>
                    A signed number indicating the relative values of this instance and <paramref name="value" />.
                
                    Return Value 
                
                    Description 
                
                    Less than zero 
                
                    This instance is less than <paramref name="value" />. 
                
                    Zero 
                
                    This instance is equal to <paramref name="value" />. 
                
                    Greater than zero 
                
                    This instance is greater than <paramref name="value" />.
                
                    -or- 
                <paramref name="value" /> is null. 
                </returns>
      <param name="value">
                    An object to compare, or null. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not an <see cref="T:System.Int16" />. 
                </exception>
    </member>
    <member name="M:System.Int16.Equals(System.Int16)">
      <summary>
                    Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Int16" /> value.
                </summary>
      <returns>true if <paramref name="obj" /> has the same value as this instance; otherwise, false.
                </returns>
      <param name="obj">
                    An <see cref="T:System.Int16" /> value to compare to this instance.
                </param>
    </member>
    <member name="M:System.Int16.Equals(System.Object)">
      <summary>
                    Returns a value indicating whether this instance is equal to a specified object.
                </summary>
      <returns>true if <paramref name="obj" /> is an instance of <see cref="T:System.Int16" /> and equals the value of this instance; otherwise, false.
                </returns>
      <param name="obj">
                    An object to compare to this instance. 
                </param>
    </member>
    <member name="M:System.Int16.GetHashCode">
      <summary>
                    Returns the hash code for this instance.
                </summary>
      <returns>
                    A 32-bit signed integer hash code.
                </returns>
    </member>
    <member name="M:System.Int16.GetTypeCode">
      <summary>
                    Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Int16" />.
                </summary>
      <returns>
                    The enumerated constant, <see cref="F:System.TypeCode.Int16" />.
                </returns>
    </member>
    <member name="F:System.Int16.MaxValue">
      <summary>
                    Represents the largest possible value of an <see cref="T:System.Int16" />. This field is constant.
                </summary>
    </member>
    <member name="F:System.Int16.MinValue">
      <summary>
                    Represents the smallest possible value of <see cref="T:System.Int16" />. This field is constant.
                </summary>
    </member>
    <member name="M:System.Int16.Parse(System.String)">
      <summary>
                    Converts the string representation of a number to its 16-bit signed integer equivalent.
                </summary>
      <returns>
                    A 16-bit signed integer equivalent to the number contained in <paramref name="s" />.
                </returns>
      <param name="s">
                    A string containing a number to convert. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Int16.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
                    Converts the string representation of a number in a specified style to its 16-bit signed integer equivalent.
                </summary>
      <returns>
                    A 16-bit signed integer equivalent to the number specified in <paramref name="s" />.
                </returns>
      <param name="s">
                    A string containing a number to convert. 
                </param>
      <param name="style">
                    A bitwise combination of the enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. 
                
                    -or-
                <paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. 
                
                    -or-
                <paramref name="s" /> includes non-zero fractional digits.
                </exception>
    </member>
    <member name="M:System.Int16.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
                    Converts the string representation of a number in a specified style and culture-specific format to its 16-bit signed integer equivalent.
                </summary>
      <returns>
                    A 16-bit signed integer equivalent to the number specified in <paramref name="s" />.
                </returns>
      <param name="s">
                    A string containing a number to convert. 
                </param>
      <param name="style">
                    A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. 
                
                    -or-
                <paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. 
                
                    -or-
                <paramref name="s" /> includes non-zero fractional digits.
                </exception>
    </member>
    <member name="M:System.Int16.Parse(System.String,System.IFormatProvider)">
      <summary>
                    Converts the string representation of a number in a specified culture-specific format to its 16-bit signed integer equivalent.
                </summary>
      <returns>
                    A 16-bit signed integer equivalent to the number specified in <paramref name="s" />.
                </returns>
      <param name="s">
                    A string containing a number to convert. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />. 
                </summary>
      <returns>true if the value of the current instance is not zero; otherwise, false.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.Byte" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.Char" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>
                    This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.
                </summary>
      <returns>
                    This conversion is not supported. No value is returned.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
      <exception cref="T:System.InvalidCastException">
                    In all cases.
                </exception>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.Decimal" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.Double" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, unchanged.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to an <see cref="T:System.Int32" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to an <see cref="T:System.Int64" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to an <see cref="T:System.SByte" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.Single" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to <paramref name="type" />.
                </returns>
      <param name="type">
                    The type to which to convert this <see cref="T:System.Int16" /> value.
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> implementation that supplies information about the format of the returned value.
                </param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, unchanged.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.UInt32" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.UInt64" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Int16.ToString">
      <summary>
                    Converts the numeric value of this instance to its equivalent string representation.
                </summary>
      <returns>
                    The string representation of the value of this instance, consisting of a minus sign if the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes.
                </returns>
    </member>
    <member name="M:System.Int16.ToString(System.IFormatProvider)">
      <summary>
                    Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.
                </summary>
      <returns>
                    The string representation of the value of this instance as specified by <paramref name="provider" />.
                </returns>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information. 
                </param>
    </member>
    <member name="M:System.Int16.ToString(System.String)">
      <summary>
                    Converts the numeric value of this instance to its equivalent string representation, using the specified format.
                </summary>
      <returns>
                    The string representation of the value of this instance as specified by <paramref name="format" />.
                </returns>
      <param name="format">
                    A standard numeric format string or a Custom Numeric Format Strings.
                </param>
    </member>
    <member name="M:System.Int16.ToString(System.String,System.IFormatProvider)">
      <summary>
                    Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific formatting information.
                </summary>
      <returns>
                    The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.
                </returns>
      <param name="format">
                    A standard numeric format string or a Custom Numeric Format Strings.
                </param>
      <param name="provider">
                    An object that supplies culture-specific formatting information. 
                </param>
    </member>
    <member name="M:System.Int16.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int16@)">
      <summary>
                    Converts the string representation of a number in a specified style and culture-specific format to its 16-bit signed integer equivalent. A return value indicates whether the conversion succeeded or failed.
                </summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.
                </returns>
      <param name="s">
                    A string containing a number to convert. The string is interpreted using the style specified by <paramref name="style" />.
                </param>
      <param name="style">
                    A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.
                </param>
      <param name="provider">
                    An object that supplies culture-specific formatting information about <paramref name="s" />. 
                </param>
      <param name="result">
                    When this method returns, contains the 16-bit signed integer value equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not in a format compliant with <paramref name="style" />, or represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. This parameter is passed uninitialized. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. 
                
                    -or-
                <paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.
                </exception>
    </member>
    <member name="M:System.Int16.TryParse(System.String,System.Int16@)">
      <summary>
                    Converts the string representation of a number to its 16-bit signed integer equivalent. A return value indicates whether the conversion succeeded or failed.
                </summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.
                </returns>
      <param name="s">
                    A string containing a number to convert. 
                </param>
      <param name="result">
                    When this method returns, contains the 16-bit signed integer value equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not of the correct format, or represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. This parameter is passed uninitialized. 
                </param>
    </member>
    <member name="T:System.Int32">
      <summary>
                    Represents a 32-bit signed integer.
                </summary>
    </member>
    <member name="M:System.Int32.CompareTo(System.Int32)">
      <summary>
                    Compares this instance to a specified 32-bit signed integer and returns an integer that indicates whether the value of this instance is greater than, less than, or equal to the value of the specified 32-bit signed integer.
                </summary>
      <returns>
                    A signed number indicating the relative values of this instance and <paramref name="value" />.
                
                    Return Value 
                
                    Description 
                
                    Less than zero 
                
                    This instance is less than <paramref name="value" />. 
                
                    Zero 
                
                    This instance is equal to <paramref name="value" />. 
                
                    Greater than zero 
                
                    This instance is greater than <paramref name="value" />. 
                </returns>
      <param name="value">
                    An integer to compare. 
                </param>
    </member>
    <member name="M:System.Int32.CompareTo(System.Object)">
      <summary>
                    Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is greater than, less than, or equal to the value of the specified object.
                </summary>
      <returns>
                    A signed number indicating the relative values of this instance and <paramref name="value" />.
                
                    Return Value 
                
                    Description 
                
                    Less than zero 
                
                    This instance is less than <paramref name="value" />. 
                
                    Zero 
                
                    This instance is equal to <paramref name="value" />. 
                
                    Greater than zero 
                
                    This instance is greater than <paramref name="value" />.
                
                    -or- 
                <paramref name="value" /> is null. 
                </returns>
      <param name="value">
                    An object to compare, or null. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not an <see cref="T:System.Int32" />. 
                </exception>
    </member>
    <member name="M:System.Int32.Equals(System.Int32)">
      <summary>
                    Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Int32" /> value. 
                </summary>
      <returns>true if <paramref name="obj" /> has the same value as this instance; otherwise, false.
                </returns>
      <param name="obj">
                    An <see cref="T:System.Int32" /> value to compare to this instance.
                </param>
    </member>
    <member name="M:System.Int32.Equals(System.Object)">
      <summary>
                    Returns a value indicating whether this instance is equal to a specified object.
                </summary>
      <returns>true if <paramref name="obj" /> is an instance of <see cref="T:System.Int32" /> and equals the value of this instance; otherwise, false.
                </returns>
      <param name="obj">
                    An object to compare with this instance. 
                </param>
    </member>
    <member name="M:System.Int32.GetHashCode">
      <summary>
                    Returns the hash code for this instance.
                </summary>
      <returns>
                    A 32-bit signed integer hash code.
                </returns>
    </member>
    <member name="M:System.Int32.GetTypeCode">
      <summary>
                    Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Int32" />.
                </summary>
      <returns>
                    The enumerated constant, <see cref="F:System.TypeCode.Int32" />.
                </returns>
    </member>
    <member name="F:System.Int32.MaxValue">
      <summary>
                    Represents the largest possible value of an <see cref="T:System.Int32" />. This field is constant.
                </summary>
    </member>
    <member name="F:System.Int32.MinValue">
      <summary>
                    Represents the smallest possible value of <see cref="T:System.Int32" />. This field is constant.
                </summary>
    </member>
    <member name="M:System.Int32.Parse(System.String)">
      <summary>
                    Converts the string representation of a number to its 32-bit signed integer equivalent.
                </summary>
      <returns>
                    A 32-bit signed integer equivalent to the number contained in <paramref name="s" />.
                </returns>
      <param name="s">
                    A string containing a number to convert. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Int32.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
                    Converts the string representation of a number in a specified style to its 32-bit signed integer equivalent.
                </summary>
      <returns>
                    A 32-bit signed integer equivalent to the number specified in <paramref name="s" />.
                </returns>
      <param name="s">
                    A string containing a number to convert. 
                </param>
      <param name="style">
                    A bitwise combination of the enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. 
                
                    -or-
                <paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. 
                
                    -or-
                <paramref name="s" /> includes non-zero, fractional digits.
                </exception>
    </member>
    <member name="M:System.Int32.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
                    Converts the string representation of a number in a specified style and culture-specific format to its 32-bit signed integer equivalent.
                </summary>
      <returns>
                    A 32-bit signed integer equivalent to the number specified in <paramref name="s" />.
                </returns>
      <param name="s">
                    A string containing a number to convert. 
                </param>
      <param name="style">
                    A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> that supplies culture-specific information about the format of <paramref name="s" />.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. 
                
                    -or-
                <paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. 
                
                    -or-
                <paramref name="s" /> includes non-zero fractional digits.
                </exception>
    </member>
    <member name="M:System.Int32.Parse(System.String,System.IFormatProvider)">
      <summary>
                    Converts the string representation of a number in a specified culture-specific format to its 32-bit signed integer equivalent.
                </summary>
      <returns>
                    A 32-bit signed integer equivalent to the number specified in <paramref name="s" />.
                </returns>
      <param name="s">
                    A string containing a number to convert. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not of the correct format. 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />. 
                </summary>
      <returns>true if the value of the current instance is not zero; otherwise, false.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.Byte" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.Char" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>
                    This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.
                </summary>
      <returns>
                    This conversion is not supported. No value is returned.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
      <exception cref="T:System.InvalidCastException">
                    In all cases.
                </exception>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />.
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.Decimal" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.Double" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to an <see cref="T:System.Int16" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, unchanged.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to an <see cref="T:System.Int64" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to an <see cref="T:System.SByte" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.Single" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to <paramref name="type" />.
                </returns>
      <param name="type">
                    The type to which to convert this <see cref="T:System.Int32" /> value.
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> implementation that provides information about the format of the returned value.
                </param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.UInt16" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.UInt32" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.UInt64" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Int32.ToString">
      <summary>
                    Converts the numeric value of this instance to its equivalent string representation.
                </summary>
      <returns>
                    The string representation of the value of this instance, consisting of a negative sign if the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes.
                </returns>
    </member>
    <member name="M:System.Int32.ToString(System.IFormatProvider)">
      <summary>
                    Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.
                </summary>
      <returns>
                    The string representation of the value of this instance as specified by <paramref name="provider" />.
                </returns>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information. 
                </param>
    </member>
    <member name="M:System.Int32.ToString(System.String)">
      <summary>
                    Converts the numeric value of this instance to its equivalent string representation, using the specified format.
                </summary>
      <returns>
                    The string representation of the value of this instance as specified by <paramref name="format" />.
                </returns>
      <param name="format">
                    A standard numeric format string or a Custom Numeric Format Strings.
                </param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid or not supported.
                </exception>
    </member>
    <member name="M:System.Int32.ToString(System.String,System.IFormatProvider)">
      <summary>
                    Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.
                </summary>
      <returns>
                    The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.
                </returns>
      <param name="format">
                    A standard numeric format string or a Custom Numeric Format Strings.
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information. 
                </param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid or not supported.
                </exception>
    </member>
    <member name="M:System.Int32.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int32@)">
      <summary>
                    Converts the string representation of a number in a specified style and culture-specific format to its 32-bit signed integer equivalent. A return value indicates whether the conversion succeeded.
                </summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.
                </returns>
      <param name="s">
                    A string containing a number to convert. The string is interpreted using the style specified by <paramref name="style" />.
                </param>
      <param name="style">
                    A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.
                </param>
      <param name="provider">
                    An object that supplies culture-specific formatting information about <paramref name="s" />. 
                </param>
      <param name="result">
                    When this method returns, contains the 32-bit signed integer value equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not in a format compliant with <paramref name="style" />, or represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. This parameter is passed uninitialized. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. 
                
                    -or-
                <paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.
                </exception>
    </member>
    <member name="M:System.Int32.TryParse(System.String,System.Int32@)">
      <summary>
                    Converts the string representation of a number to its 32-bit signed integer equivalent. A return value indicates whether the conversion succeeded.
                </summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.
                </returns>
      <param name="s">
                    A string containing a number to convert. 
                </param>
      <param name="result">
                    When this method returns, contains the 32-bit signed integer value equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not of the correct format, or represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. This parameter is passed uninitialized. 
                </param>
    </member>
    <member name="T:System.Int64">
      <summary>
                    Represents a 64-bit signed integer.
                </summary>
    </member>
    <member name="M:System.Int64.CompareTo(System.Int64)">
      <summary>
                    Compares this instance to a specified 64-bit signed integer and returns an indication of their relative values.
                </summary>
      <returns>
                    A signed number indicating the relative values of this instance and <paramref name="value" />.
                
                    Return Value 
                
                    Description 
                
                    Less than zero 
                
                    This instance is less than <paramref name="value" />. 
                
                    Zero 
                
                    This instance is equal to <paramref name="value" />. 
                
                    Greater than zero 
                
                    This instance is greater than <paramref name="value" />. 
                </returns>
      <param name="value">
                    An integer to compare. 
                </param>
    </member>
    <member name="M:System.Int64.CompareTo(System.Object)">
      <summary>
                    Compares this instance to a specified object and returns an indication of their relative values.
                </summary>
      <returns>
                    A signed number indicating the relative values of this instance and <paramref name="value" />.
                
                    Return Value 
                
                    Description 
                
                    Less than zero 
                
                    This instance is less than <paramref name="value" />. 
                
                    Zero 
                
                    This instance is equal to <paramref name="value" />. 
                
                    Greater than zero 
                
                    This instance is greater than <paramref name="value" />.
                
                    -or- 
                <paramref name="value" /> is null. 
                </returns>
      <param name="value">
                    An object to compare, or null. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not an <see cref="T:System.Int64" />. 
                </exception>
    </member>
    <member name="M:System.Int64.Equals(System.Int64)">
      <summary>
                    Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Int64" /> value.
                </summary>
      <returns>true if <paramref name="obj" /> has the same value as this instance; otherwise, false.
                </returns>
      <param name="obj">
                    An <see cref="T:System.Int64" /> value to compare to this instance.
                </param>
    </member>
    <member name="M:System.Int64.Equals(System.Object)">
      <summary>
                    Returns a value indicating whether this instance is equal to a specified object.
                </summary>
      <returns>true if <paramref name="obj" /> is an instance of an <see cref="T:System.Int64" /> and equals the value of this instance; otherwise, false.
                </returns>
      <param name="obj">
                    An object to compare with this instance. 
                </param>
    </member>
    <member name="M:System.Int64.GetHashCode">
      <summary>
                    Returns the hash code for this instance.
                </summary>
      <returns>
                    A 32-bit signed integer hash code.
                </returns>
    </member>
    <member name="M:System.Int64.GetTypeCode">
      <summary>
                    Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Int64" />.
                </summary>
      <returns>
                    The enumerated constant, <see cref="F:System.TypeCode.Int64" />.
                </returns>
    </member>
    <member name="F:System.Int64.MaxValue">
      <summary>
                    Represents the largest possible value of an Int64. This field is constant.
                </summary>
    </member>
    <member name="F:System.Int64.MinValue">
      <summary>
                    Represents the smallest possible value of an Int64. This field is constant.
                </summary>
    </member>
    <member name="M:System.Int64.Parse(System.String)">
      <summary>
                    Converts the string representation of a number to its 64-bit signed integer equivalent.
                </summary>
      <returns>
                    A 64-bit signed integer equivalent to the number contained in <paramref name="s" />.
                </returns>
      <param name="s">
                    A string containing a number to convert. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Int64.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
                    Converts the string representation of a number in a specified style to its 64-bit signed integer equivalent.
                </summary>
      <returns>
                    A 64-bit signed integer equivalent to the number specified in <paramref name="s" />.
                </returns>
      <param name="s">
                    A string containing a number to convert. 
                </param>
      <param name="style">
                    A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. 
                
                    -or-
                <paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Int64.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
                    Converts the string representation of a number in a specified style and culture-specific format to its 64-bit signed integer equivalent.
                </summary>
      <returns>
                    A 64-bit signed integer equivalent to the number specified in <paramref name="s" />.
                </returns>
      <param name="s">
                    A string containing a number to convert. 
                </param>
      <param name="style">
                    A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. 
                
                    -or-
                <paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Int64.Parse(System.String,System.IFormatProvider)">
      <summary>
                    Converts the string representation of a number in a specified culture-specific format to its 64-bit signed integer equivalent.
                </summary>
      <returns>
                    A 64-bit signed integer equivalent to the number specified in <paramref name="s" />.
                </returns>
      <param name="s">
                    A string containing a number to convert. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />. 
                </summary>
      <returns>true if the value of the current instance is not zero; otherwise, false.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.Byte" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.Char" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>
                    This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />. 
                </summary>
      <returns>
                    This conversion is not supported. No value is returned.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
      <exception cref="T:System.InvalidCastException">
                    In all cases.
                </exception>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.Decimal" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.Double" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to an <see cref="T:System.Int16" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to an <see cref="T:System.Int32" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, unchanged.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to an <see cref="T:System.SByte" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.Single" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to <paramref name="type" />.
                </returns>
      <param name="type">
                    The type to which to convert this <see cref="T:System.Int64" /> value.
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> implementation that provides information about the format of the returned value.
                </param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.UInt16" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.UInt32" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.UInt64" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Int64.ToString">
      <summary>
                    Converts the numeric value of this instance to its equivalent string representation.
                </summary>
      <returns>
                    The string representation of the value of this instance, consisting of a minus sign if the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes.
                </returns>
    </member>
    <member name="M:System.Int64.ToString(System.IFormatProvider)">
      <summary>
                    Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.
                </summary>
      <returns>
                    The string representation of the value of this instance as specified by <paramref name="provider" />.
                </returns>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information. 
                </param>
    </member>
    <member name="M:System.Int64.ToString(System.String)">
      <summary>
                    Converts the numeric value of this instance to its equivalent string representation, using the specified format.
                </summary>
      <returns>
                    The string representation of the value of this instance as specified by <paramref name="format" />.
                </returns>
      <param name="format">
                    A standard numeric format string or a Custom Numeric Format Strings.
                </param>
    </member>
    <member name="M:System.Int64.ToString(System.String,System.IFormatProvider)">
      <summary>
                    Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.
                </summary>
      <returns>
                    The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.
                </returns>
      <param name="format">
                    A standard numeric format string or a Custom Numeric Format Strings.
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about this instance. 
                </param>
    </member>
    <member name="M:System.Int64.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int64@)">
      <summary>
                    Converts the string representation of a number in a specified style and culture-specific format to its 64-bit signed integer equivalent. A return value indicates whether the conversion succeeded or failed.
                </summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.
                </returns>
      <param name="s">
                    A string containing a number to convert. 
                </param>
      <param name="style">
                    A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about <paramref name="s" />. 
                </param>
      <param name="result">
                    When this method returns, contains the 64-bit signed integer value equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not in a format compliant with <paramref name="style" />, or represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. This parameter is passed uninitialized. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. 
                
                    -or-
                <paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.
                </exception>
    </member>
    <member name="M:System.Int64.TryParse(System.String,System.Int64@)">
      <summary>
                    Converts the string representation of a number to its 64-bit signed integer equivalent. A return value indicates whether the conversion succeeded or failed.
                </summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.
                </returns>
      <param name="s">
                    A string containing a number to convert. 
                </param>
      <param name="result">
                    When this method returns, contains the 64-bit signed integer value equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not of the correct format, or represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. This parameter is passed uninitialized. 
                </param>
    </member>
    <member name="T:System.IntPtr">
      <summary>
                    A platform-specific type that is used to represent a pointer or a handle.
                </summary>
    </member>
    <member name="M:System.IntPtr.#ctor(System.Int32)">
      <summary>
                    Initializes a new instance of <see cref="T:System.IntPtr" /> using the specified 32-bit pointer or handle.
                </summary>
      <param name="value">
                    A pointer or handle contained in a 32-bit signed integer. 
                </param>
    </member>
    <member name="M:System.IntPtr.#ctor(System.Int64)">
      <summary>
                    Initializes a new instance of <see cref="T:System.IntPtr" /> using the specified 64-bit pointer.
                </summary>
      <param name="value">
                    A pointer or handle contained in a 64-bit signed integer. 
                </param>
      <exception cref="T:System.OverflowException">
                    On a 32-bit platform, <paramref name="value" /> is too large or too small to represent as an <see cref="T:System.IntPtr" />. 
                </exception>
    </member>
    <member name="M:System.IntPtr.#ctor(System.Void*)">
      <summary>
                    Initializes a new instance of <see cref="T:System.IntPtr" /> using the specified pointer to an unspecified type.
                </summary>
      <param name="value">
                    A pointer to an unspecified type. 
                </param>
    </member>
    <member name="M:System.IntPtr.Equals(System.Object)">
      <summary>
                    Returns a value indicating whether this instance is equal to a specified object.
                </summary>
      <returns>true if <paramref name="obj" /> is an instance of <see cref="T:System.IntPtr" /> and equals the value of this instance; otherwise, false.
                </returns>
      <param name="obj">
                    An object to compare with this instance or null. 
                </param>
    </member>
    <member name="M:System.IntPtr.GetHashCode">
      <summary>
                    Returns the hash code for this instance.
                </summary>
      <returns>
                    A 32-bit signed integer hash code.
                </returns>
    </member>
    <member name="M:System.IntPtr.op_Equality(System.IntPtr,System.IntPtr)">
      <summary>
                    Determines whether two specified instances of <see cref="T:System.IntPtr" /> are equal.
                </summary>
      <returns>true if <paramref name="value1" /> equals <paramref name="value2" />; otherwise, false.
                </returns>
      <param name="value1">
                    An <see cref="T:System.IntPtr" />. 
                </param>
      <param name="value2">
                    An <see cref="T:System.IntPtr" />. 
                </param>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.Int32)~System.IntPtr">
      <summary>
                    Converts the value of a 32-bit signed integer to an <see cref="T:System.IntPtr" />.
                </summary>
      <returns>
                    A new instance of <see cref="T:System.IntPtr" /> initialized to <paramref name="value" />.
                </returns>
      <param name="value">
                    A 32-bit signed integer. 
                </param>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.Int64)~System.IntPtr">
      <summary>
                    Converts the value of a 64-bit signed integer to an <see cref="T:System.IntPtr" />.
                </summary>
      <returns>
                    A new instance of <see cref="T:System.IntPtr" /> initialized to <paramref name="value" />.
                </returns>
      <param name="value">
                    A 64-bit signed integer. 
                </param>
      <exception cref="T:System.OverflowException">
                    On a 32-bit platform, <paramref name="value" /> is too large to represent as an <see cref="T:System.IntPtr" />. 
                </exception>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Void*">
      <summary>
                    Converts the value of the specified <see cref="T:System.IntPtr" /> to a pointer to an unspecified type.
                </summary>
      <returns>
                    The contents of <paramref name="value" />.
                </returns>
      <param name="value">
                    An <see cref="T:System.IntPtr" />. 
                </param>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Int64">
      <summary>
                    Converts the value of the specified <see cref="T:System.IntPtr" /> to a 64-bit signed integer.
                </summary>
      <returns>
                    The contents of <paramref name="value" />.
                </returns>
      <param name="value">
                    An <see cref="T:System.IntPtr" />. 
                </param>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Int32">
      <summary>
                    Converts the value of the specified <see cref="T:System.IntPtr" /> to a 32-bit signed integer.
                </summary>
      <returns>
                    The contents of <paramref name="value" />.
                </returns>
      <param name="value">
                    An <see cref="T:System.IntPtr" />. 
                </param>
      <exception cref="T:System.OverflowException">
                    On a 64-bit platform, the value of <paramref name="value" /> is too large to represent as a 32-bit signed integer. 
                </exception>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.Void*)~System.IntPtr">
      <summary>
                    Converts the specified pointer to an unspecified type to an <see cref="T:System.IntPtr" />.
                </summary>
      <returns>
                    A new instance of <see cref="T:System.IntPtr" /> initialized to <paramref name="value" />.
                </returns>
      <param name="value">
                    A pointer to an unspecified type. 
                </param>
    </member>
    <member name="M:System.IntPtr.op_Inequality(System.IntPtr,System.IntPtr)">
      <summary>
                    Determines whether two specified instances of <see cref="T:System.IntPtr" /> are not equal.
                </summary>
      <returns>true if <paramref name="value1" /> does not equal <paramref name="value2" />; otherwise, false.
                </returns>
      <param name="value1">
                    An <see cref="T:System.IntPtr" />. 
                </param>
      <param name="value2">
                    An <see cref="T:System.IntPtr" />. 
                </param>
    </member>
    <member name="P:System.IntPtr.Size">
      <summary>
                    Gets the size of this instance.
                </summary>
      <returns>
                    The size of a pointer or handle on this platform, measured in bytes. The value of this property is 4 on a 32-bit platform, and 8 on a 64-bit platform.
                </returns>
    </member>
    <member name="M:System.IntPtr.ToInt32">
      <summary>
                    Converts the value of this instance to a 32-bit signed integer.
                </summary>
      <returns>
                    A 32-bit signed integer equal to the value of this instance.
                </returns>
      <exception cref="T:System.OverflowException">
                    On a 64-bit platform, the value of this instance is too large or too small to represent as a 32-bit signed integer. 
                </exception>
    </member>
    <member name="M:System.IntPtr.ToInt64">
      <summary>
                    Converts the value of this instance to a 64-bit signed integer.
                </summary>
      <returns>
                    A 64-bit signed integer equal to the value of this instance.
                </returns>
    </member>
    <member name="M:System.IntPtr.ToPointer">
      <summary>
                    Converts the value of this instance to a pointer to an unspecified type.
                </summary>
      <returns>
                    A pointer to <see cref="T:System.Void" />; that is, a pointer to memory containing data of an unspecified type.
                </returns>
    </member>
    <member name="M:System.IntPtr.ToString">
      <summary>
                    Converts the numeric value of the current <see cref="T:System.IntPtr" /> object to its equivalent string representation.
                </summary>
      <returns>
                    The string representation of the value of this instance.
                </returns>
    </member>
    <member name="F:System.IntPtr.Zero">
      <summary>
                    A read-only field that represents a pointer or handle that has been initialized to zero.
                </summary>
    </member>
    <member name="T:System.InvalidCastException">
      <summary>
                    The exception that is thrown for invalid casting or explicit conversion.
                </summary>
    </member>
    <member name="M:System.InvalidCastException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.InvalidCastException" /> class.
                </summary>
    </member>
    <member name="M:System.InvalidCastException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.InvalidCastException" /> class with a specified error message.
                </summary>
      <param name="message">
                    The message that describes the error. 
                </param>
    </member>
    <member name="M:System.InvalidCastException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.InvalidCastException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
                </summary>
      <param name="message">
                    The error message that explains the reason for the exception. 
                </param>
      <param name="innerException">
                    The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. 
                </param>
    </member>
    <member name="T:System.InvalidOperationException">
      <summary>
                    The exception that is thrown when a method call is invalid for the object's current state.
                </summary>
    </member>
    <member name="M:System.InvalidOperationException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.InvalidOperationException" /> class.
                </summary>
    </member>
    <member name="M:System.InvalidOperationException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.InvalidOperationException" /> class with a specified error message.
                </summary>
      <param name="message">
                    The message that describes the error. 
                </param>
    </member>
    <member name="M:System.InvalidOperationException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.InvalidOperationException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
                </summary>
      <param name="message">
                    The error message that explains the reason for the exception. 
                </param>
      <param name="innerException">
                    The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. 
                </param>
    </member>
    <member name="T:System.InvalidProgramException">
      <summary>
                    The exception that is thrown when a program contains invalid Microsoft intermediate language (MSIL) or metadata. Generally this indicates a bug in the compiler that generated the program.
                </summary>
    </member>
    <member name="M:System.InvalidProgramException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.InvalidProgramException" /> class with default properties.
                </summary>
    </member>
    <member name="M:System.InvalidProgramException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.InvalidProgramException" /> class with a specified error message.
                </summary>
      <param name="message">
                    The error message that explains the reason for the exception. 
                </param>
    </member>
    <member name="M:System.InvalidProgramException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.InvalidProgramException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
                </summary>
      <param name="message">
                    The error message that explains the reason for the exception. 
                </param>
      <param name="inner">
                    The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. 
                </param>
    </member>
    <member name="T:System.IServiceProvider">
      <summary>
                    Defines a mechanism for retrieving a service object; that is, an object that provides custom support to other objects.
                </summary>
    </member>
    <member name="M:System.IServiceProvider.GetService(System.Type)">
      <summary>
                    Gets the service object of the specified type.
                </summary>
      <returns>
                    A service object of type <paramref name="serviceType" />.
                
                    -or- 
                null if there is no service object of type <paramref name="serviceType" />.
                </returns>
      <param name="serviceType">
                    An object that specifies the type of service object to get. 
                </param>
    </member>
    <member name="T:System.LoaderOptimization">
      <summary>
                    An enumeration used to specify loader optimizations for an executable.
                </summary>
    </member>
    <member name="F:System.LoaderOptimization.NotSpecified">
      <summary>
                    Indicates that no optimizations for sharing internal resources are specified. If the default domain or hosting interface specified an optimization, then the loader uses that; otherwise, the loader uses <see cref="F:System.LoaderOptimization.SingleDomain" />.
                </summary>
    </member>
    <member name="F:System.LoaderOptimization.SingleDomain">
      <summary>
                    Indicates that the application will probably have a single domain, and loader must not share internal resources across application domains. 
                </summary>
    </member>
    <member name="F:System.LoaderOptimization.MultiDomain">
      <summary>
                    Indicates that the application will probably have many domains that use the same code, and the loader must share maximal internal resources across application domains. 
                </summary>
    </member>
    <member name="F:System.LoaderOptimization.MultiDomainHost">
      <summary>
                    Indicates that the application will probably host unique code in multiple domains, and the loader must share resources across application domains only for globally available (strong-named) assemblies that have been added to the global assembly cache. 
                </summary>
    </member>
    <member name="T:System.Math">
      <summary>
                    Provides constants and static methods for trigonometric, logarithmic, and other common mathematical functions.
                </summary>
    </member>
    <member name="M:System.Math.Abs(System.Decimal)">
      <summary>
                    Returns the absolute value of a <see cref="T:System.Decimal" /> number.
                </summary>
      <returns>
                    A <see cref="T:System.Decimal" />, x, such that 0 ≤ x ≤<see cref="F:System.Decimal.MaxValue" />.
                </returns>
      <param name="value">
                    A number in the range <see cref="F:System.Decimal.MinValue" />≤ value ≤<see cref="F:System.Decimal.MaxValue" />. 
                </param>
    </member>
    <member name="M:System.Math.Abs(System.Double)">
      <summary>
                    Returns the absolute value of a double-precision floating-point number.
                </summary>
      <returns>
                    A double-precision floating-point number, x, such that 0 ≤ x ≤<see cref="F:System.Double.MaxValue" />.
                </returns>
      <param name="value">
                    A number in the range <see cref="F:System.Double.MinValue" />≤<paramref name="value" />≤<see cref="F:System.Double.MaxValue" />. 
                </param>
    </member>
    <member name="M:System.Math.Abs(System.Int16)">
      <summary>
                    Returns the absolute value of a 16-bit signed integer.
                </summary>
      <returns>
                    A 16-bit signed integer, x, such that 0 ≤ x ≤<see cref="F:System.Int16.MaxValue" />.
                </returns>
      <param name="value">
                    A number in the range <see cref="F:System.Int16.MinValue" /> &lt; <paramref name="value" />≤<see cref="F:System.Int16.MaxValue" />. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> equals <see cref="F:System.Int16.MinValue" />. 
                </exception>
    </member>
    <member name="M:System.Math.Abs(System.Int32)">
      <summary>
                    Returns the absolute value of a 32-bit signed integer.
                </summary>
      <returns>
                    A 32-bit signed integer, x, such that 0 ≤ x ≤<see cref="F:System.Int32.MaxValue" />.
                </returns>
      <param name="value">
                    A number in the range <see cref="F:System.Int32.MinValue" /> &lt; <paramref name="value" />≤<see cref="F:System.Int32.MaxValue" />. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> equals <see cref="F:System.Int32.MinValue" />. 
                </exception>
    </member>
    <member name="M:System.Math.Abs(System.Int64)">
      <summary>
                    Returns the absolute value of a 64-bit signed integer.
                </summary>
      <returns>
                    A 64-bit signed integer, x, such that 0 ≤ x ≤<see cref="F:System.Int64.MaxValue" />.
                </returns>
      <param name="value">
                    A number in the range <see cref="F:System.Int64.MinValue" /> &lt; <paramref name="value" />≤<see cref="F:System.Int64.MaxValue" />. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> equals <see cref="F:System.Int64.MinValue" />. 
                </exception>
    </member>
    <member name="M:System.Math.Abs(System.SByte)">
      <summary>
                    Returns the absolute value of an 8-bit signed integer.
                </summary>
      <returns>
                    An 8-bit signed integer, x, such that 0 ≤ x ≤<see cref="F:System.SByte.MaxValue" />.
                </returns>
      <param name="value">
                    A number in the range <see cref="F:System.SByte.MinValue" /> &lt; <paramref name="value" />≤<see cref="F:System.SByte.MaxValue" />. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> equals <see cref="F:System.SByte.MinValue" />. 
                </exception>
    </member>
    <member name="M:System.Math.Abs(System.Single)">
      <summary>
                    Returns the absolute value of a single-precision floating-point number.
                </summary>
      <returns>
                    A single-precision floating-point number, x, such that 0 ≤ x ≤<see cref="F:System.Single.MaxValue" />.
                </returns>
      <param name="value">
                    A number in the range <see cref="F:System.Single.MinValue" />≤<paramref name="value" />≤<see cref="F:System.Single.MaxValue" />. 
                </param>
    </member>
    <member name="M:System.Math.Acos(System.Double)">
      <summary>
                    Returns the angle whose cosine is the specified number.
                </summary>
      <returns>
                    An angle, θ, measured in radians, such that 0 ≤θ≤π
                    -or- 
                <see cref="F:System.Double.NaN" /> if <paramref name="d" /> &lt; -1 or <paramref name="d" /> &gt; 1.
                </returns>
      <param name="d">
                    A number representing a cosine, where -1 ≤<paramref name="d" />≤ 1. 
                </param>
    </member>
    <member name="M:System.Math.Asin(System.Double)">
      <summary>
                    Returns the angle whose sine is the specified number.
                </summary>
      <returns>
                    An angle, θ, measured in radians, such that -π/2 ≤θ≤π/2 
                
                    -or- 
                <see cref="F:System.Double.NaN" /> if <paramref name="d" /> &lt; -1 or <paramref name="d" /> &gt; 1.
                </returns>
      <param name="d">
                    A number representing a sine, where -1 ≤<paramref name="d" />≤ 1. 
                </param>
    </member>
    <member name="M:System.Math.Atan(System.Double)">
      <summary>
                    Returns the angle whose tangent is the specified number.
                </summary>
      <returns>
                    An angle, θ, measured in radians, such that -π/2 ≤θ≤π/2.
                
                    -or- 
                <see cref="F:System.Double.NaN" /> if <paramref name="d" /> equals <see cref="F:System.Double.NaN" />, -π/2 rounded to double precision (-1.5707963267949) if <paramref name="d" /> equals <see cref="F:System.Double.NegativeInfinity" />, or π/2 rounded to double precision (1.5707963267949) if <paramref name="d" /> equals <see cref="F:System.Double.PositiveInfinity" />.
                </returns>
      <param name="d">
                    A number representing a tangent. 
                </param>
    </member>
    <member name="M:System.Math.Atan2(System.Double,System.Double)">
      <summary>
                    Returns the angle whose tangent is the quotient of two specified numbers.
                </summary>
      <returns>
                    An angle, θ, measured in radians, such that -π≤θ≤π, and tan(θ) = <paramref name="y" /> / <paramref name="x" />, where (<paramref name="x" />, <paramref name="y" />) is a point in the Cartesian plane. Observe the following: 
                
                    For (<paramref name="x" />, <paramref name="y" />) in quadrant 1, 0 &lt; θ &lt; π/2.
                
                    For (<paramref name="x" />, <paramref name="y" />) in quadrant 2, π/2 &lt; θ≤π.
                
                    For (<paramref name="x" />, <paramref name="y" />) in quadrant 3, -π &lt; θ &lt; -π/2.
                
                    For (<paramref name="x" />, <paramref name="y" />) in quadrant 4, -π/2 &lt; θ &lt; 0.
                
                    For points on the boundaries of the quadrants, the return value is the following:
                
                    If y is 0 and <paramref name="x" /> is not negative, θ = 0.
                
                    If y is 0 and <paramref name="x" /> is negative, θ = π.
                
                    If y is positive and <paramref name="x" /> is 0, θ = π/2.
                
                    If y is negative and x is 0, θ = -π/2.
                </returns>
      <param name="y">
                    The y coordinate of a point. 
                </param>
      <param name="x">
                    The x coordinate of a point. 
                </param>
    </member>
    <member name="M:System.Math.Ceiling(System.Double)">
      <summary>
                    Returns the smallest integral value greater than or equal to the specified double-precision floating-point number.
                </summary>
      <returns>
                    The smallest integral value greater than or equal to <paramref name="a" />. If <paramref name="a" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />, that value is returned. Note that the method returns a <see cref="T:System.Double" /> rather than an integral type.
                </returns>
      <param name="a">
                    A double-precision floating-point number. 
                </param>
    </member>
    <member name="M:System.Math.Cos(System.Double)">
      <summary>
                    Returns the cosine of the specified angle.
                </summary>
      <returns>
                    The cosine of <paramref name="d" />.
                </returns>
      <param name="d">
                    An angle, measured in radians. 
                </param>
    </member>
    <member name="M:System.Math.Cosh(System.Double)">
      <summary>
                    Returns the hyperbolic cosine of the specified angle.
                </summary>
      <returns>
                    The hyperbolic cosine of <paramref name="value" />. If <paramref name="value" /> is equal to <see cref="F:System.Double.NegativeInfinity" /> or <see cref="F:System.Double.PositiveInfinity" />, <see cref="F:System.Double.PositiveInfinity" /> is returned. If <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NaN" /> is returned.
                </returns>
      <param name="value">
                    An angle, measured in radians. 
                </param>
    </member>
    <member name="F:System.Math.E">
      <summary>
                    Represents the natural logarithmic base, specified by the constant, e.
                </summary>
    </member>
    <member name="M:System.Math.Exp(System.Double)">
      <summary>
                    Returns e raised to the specified power.
                </summary>
      <returns>
                    The number e raised to the power <paramref name="d" />. If <paramref name="d" /> equals <see cref="F:System.Double.NaN" /> or <see cref="F:System.Double.PositiveInfinity" />, that value is returned. If <paramref name="d" /> equals <see cref="F:System.Double.NegativeInfinity" />, 0 is returned.
                </returns>
      <param name="d">
                    A number specifying a power. 
                </param>
    </member>
    <member name="M:System.Math.Floor(System.Double)">
      <summary>
                    Returns the largest integer less than or equal to the specified double-precision floating-point number.
                </summary>
      <returns>
                    The largest integer less than or equal to <paramref name="d" />. If <paramref name="d" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />, that value is returned.
                </returns>
      <param name="d">
                    A double-precision floating-point number. 
                </param>
    </member>
    <member name="M:System.Math.IEEERemainder(System.Double,System.Double)">
      <summary>
                    Returns the remainder resulting from the division of a specified number by another specified number.
                </summary>
      <returns>
                    A number equal to <paramref name="x" /> - (<paramref name="y" /> Q), where Q is the quotient of <paramref name="x" /> / <paramref name="y" /> rounded to the nearest integer (if <paramref name="x" /> / <paramref name="y" /> falls halfway between two integers, the even integer is returned).
                
                    If <paramref name="x" /> - (<paramref name="y" /> Q) is zero, the value +0 is returned if <paramref name="x" /> is positive, or -0 if <paramref name="x" /> is negative.
                
                    If <paramref name="y" /> = 0, <see cref="F:System.Double.NaN" /> (Not-A-Number) is returned.
                </returns>
      <param name="x">
                    A dividend. 
                </param>
      <param name="y">
                    A divisor. 
                </param>
    </member>
    <member name="M:System.Math.Log(System.Double)">
      <summary>
                    Returns the natural (base e) logarithm of a specified number.
                </summary>
      <returns>
                    Sign of <paramref name="d" />
                    Returns 
                
                    Positive 
                
                    The natural logarithm of <paramref name="d" />; that is, ln <paramref name="d" />, or log e<paramref name="d" />
                    Zero 
                <see cref="F:System.Double.NegativeInfinity" />
                    Negative 
                <see cref="F:System.Double.NaN" />
                    If <paramref name="d" /> is equal to <see cref="F:System.Double.NaN" />, returns <see cref="F:System.Double.NaN" />. If <paramref name="d" /> is equal to <see cref="F:System.Double.PositiveInfinity" />, returns <see cref="F:System.Double.PositiveInfinity" />.
                </returns>
      <param name="d">
                    A number whose logarithm is to be found. 
                </param>
    </member>
    <member name="M:System.Math.Log(System.Double,System.Double)">
      <summary>
                    Returns the logarithm of a specified number in a specified base.
                </summary>
      <returns>
                    In the following table +Infinity denotes <see cref="F:System.Double.PositiveInfinity" />, -Infinity denotes <see cref="F:System.Double.NegativeInfinity" />, and NaN denotes <see cref="F:System.Double.NaN" />.
                <paramref name="a" /><paramref name="newBase" />
                    Return Value
                <paramref name="a" />&gt; 0
                
                    (0 &lt;<paramref name="newBase" />&lt; 1) -or-(<paramref name="newBase" />&gt; 1)
                
                    lognewBase(a)
                <paramref name="a" />&lt; 0
                
                    (any value)
                
                    NaN
                
                    (any value)
                <paramref name="newBase" />&lt; 0
                
                    NaN
                <paramref name="a" /> != 1
                <paramref name="newBase" /> = 0
                
                    NaN
                <paramref name="a" /> != 1
                <paramref name="newBase" /> = +Infinity
                
                    NaN
                <paramref name="a" /> = NaN
                
                    (any value)
                
                    NaN
                
                    (any value)
                <paramref name="newBase" /> = NaN
                
                    NaN
                
                    (any value)
                <paramref name="newBase" /> = 1
                
                    NaN
                <paramref name="a" /> = 0
                
                    0 &lt;<paramref name="newBase" />&lt; 1 
                
                    +Infinity
                <paramref name="a" /> = 0
                <paramref name="newBase" />&gt; 1
                
                    -Infinity
                <paramref name="a" /> =  +Infinity
                
                    0 &lt;<paramref name="newBase" />&lt; 1
                
                    -Infinity
                <paramref name="a" /> =  +Infinity
                <paramref name="newBase" />&gt; 1
                
                    +Infinity
                <paramref name="a" /> = 1
                <paramref name="newBase" /> = 0
                
                    0
                <paramref name="a" /> = 1
                <paramref name="newBase" /> = +Infinity
                
                    0
                </returns>
      <param name="a">
                    A number whose logarithm is to be found. 
                </param>
      <param name="newBase">
                    The base of the logarithm. 
                </param>
    </member>
    <member name="M:System.Math.Log10(System.Double)">
      <summary>
                    Returns the base 10 logarithm of a specified number.
                </summary>
      <returns>
                    Sign of <paramref name="d" />
                    Returns 
                
                    Positive 
                
                    The base 10 log of <paramref name="d" />; that is, log 10<paramref name="d" />. 
                
                    Zero 
                <see cref="F:System.Double.NegativeInfinity" />
                    Negative 
                <see cref="F:System.Double.NaN" />
                    If <paramref name="d" /> is equal to <see cref="F:System.Double.NaN" />, this method returns <see cref="F:System.Double.NaN" />. If <paramref name="d" /> is equal to <see cref="F:System.Double.PositiveInfinity" />, this method returns <see cref="F:System.Double.PositiveInfinity" />.
                </returns>
      <param name="d">
                    A number whose logarithm is to be found. 
                </param>
    </member>
    <member name="M:System.Math.Max(System.Byte,System.Byte)">
      <summary>
                    Returns the larger of two 8-bit unsigned integers.
                </summary>
      <returns>
                    Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.
                </returns>
      <param name="val1">
                    The first of two 8-bit unsigned integers to compare. 
                </param>
      <param name="val2">
                    The second of two 8-bit unsigned integers to compare. 
                </param>
    </member>
    <member name="M:System.Math.Max(System.Decimal,System.Decimal)">
      <summary>
                    Returns the larger of two decimal numbers.
                </summary>
      <returns>
                    Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.
                </returns>
      <param name="val1">
                    The first of two <see cref="T:System.Decimal" /> numbers to compare. 
                </param>
      <param name="val2">
                    The second of two <see cref="T:System.Decimal" /> numbers to compare. 
                </param>
    </member>
    <member name="M:System.Math.Max(System.Double,System.Double)">
      <summary>
                    Returns the larger of two double-precision floating-point numbers.
                </summary>
      <returns>
                    Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger. If <paramref name="val1" />, <paramref name="val2" />, or both <paramref name="val1" /> and <paramref name="val2" /> are equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NaN" /> is returned.
                </returns>
      <param name="val1">
                    The first of two double-precision floating-point numbers to compare. 
                </param>
      <param name="val2">
                    The second of two double-precision floating-point numbers to compare. 
                </param>
    </member>
    <member name="M:System.Math.Max(System.Int16,System.Int16)">
      <summary>
                    Returns the larger of two 16-bit signed integers.
                </summary>
      <returns>
                    Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.
                </returns>
      <param name="val1">
                    The first of two 16-bit signed integers to compare. 
                </param>
      <param name="val2">
                    The second of two 16-bit signed integers to compare. 
                </param>
    </member>
    <member name="M:System.Math.Max(System.Int32,System.Int32)">
      <summary>
                    Returns the larger of two 32-bit signed integers.
                </summary>
      <returns>
                    Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.
                </returns>
      <param name="val1">
                    The first of two 32-bit signed integers to compare. 
                </param>
      <param name="val2">
                    The second of two 32-bit signed integers to compare. 
                </param>
    </member>
    <member name="M:System.Math.Max(System.Int64,System.Int64)">
      <summary>
                    Returns the larger of two 64-bit signed integers.
                </summary>
      <returns>
                    Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.
                </returns>
      <param name="val1">
                    The first of two 64-bit signed integers to compare. 
                </param>
      <param name="val2">
                    The second of two 64-bit signed integers to compare. 
                </param>
    </member>
    <member name="M:System.Math.Max(System.SByte,System.SByte)">
      <summary>
                    Returns the larger of two 8-bit signed integers.
                </summary>
      <returns>
                    Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.
                </returns>
      <param name="val1">
                    The first of two 8-bit signed integers to compare. 
                </param>
      <param name="val2">
                    The second of two 8-bit signed integers to compare. 
                </param>
    </member>
    <member name="M:System.Math.Max(System.Single,System.Single)">
      <summary>
                    Returns the larger of two single-precision floating-point numbers.
                </summary>
      <returns>
                    Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger. If <paramref name="val1" />, or <paramref name="val2" />, or both <paramref name="val1" /> and <paramref name="val2" /> are equal to <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NaN" /> is returned.
                </returns>
      <param name="val1">
                    The first of two single-precision floating-point numbers to compare. 
                </param>
      <param name="val2">
                    The second of two single-precision floating-point numbers to compare. 
                </param>
    </member>
    <member name="M:System.Math.Max(System.UInt16,System.UInt16)">
      <summary>
                    Returns the larger of two 16-bit unsigned integers.
                </summary>
      <returns>
                    Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.
                </returns>
      <param name="val1">
                    The first of two 16-bit unsigned integers to compare. 
                </param>
      <param name="val2">
                    The second of two 16-bit unsigned integers to compare. 
                </param>
    </member>
    <member name="M:System.Math.Max(System.UInt32,System.UInt32)">
      <summary>
                    Returns the larger of two 32-bit unsigned integers.
                </summary>
      <returns>
                    Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.
                </returns>
      <param name="val1">
                    The first of two 32-bit unsigned integers to compare. 
                </param>
      <param name="val2">
                    The second of two 32-bit unsigned integers to compare. 
                </param>
    </member>
    <member name="M:System.Math.Max(System.UInt64,System.UInt64)">
      <summary>
                    Returns the larger of two 64-bit unsigned integers.
                </summary>
      <returns>
                    Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.
                </returns>
      <param name="val1">
                    The first of two 64-bit unsigned integers to compare. 
                </param>
      <param name="val2">
                    The second of two 64-bit unsigned integers to compare. 
                </param>
    </member>
    <member name="M:System.Math.Min(System.Byte,System.Byte)">
      <summary>
                    Returns the smaller of two 8-bit unsigned integers.
                </summary>
      <returns>
                    Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.
                </returns>
      <param name="val1">
                    The first of two 8-bit unsigned integers to compare. 
                </param>
      <param name="val2">
                    The second of two 8-bit unsigned integers to compare. 
                </param>
    </member>
    <member name="M:System.Math.Min(System.Decimal,System.Decimal)">
      <summary>
                    Returns the smaller of two decimal numbers.
                </summary>
      <returns>
                    Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.
                </returns>
      <param name="val1">
                    The first of two <see cref="T:System.Decimal" /> numbers to compare. 
                </param>
      <param name="val2">
                    The second of two <see cref="T:System.Decimal" /> numbers to compare. 
                </param>
    </member>
    <member name="M:System.Math.Min(System.Double,System.Double)">
      <summary>
                    Returns the smaller of two double-precision floating-point numbers.
                </summary>
      <returns>
                    Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller. If <paramref name="val1" />, <paramref name="val2" />, or both <paramref name="val1" /> and <paramref name="val2" /> are equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NaN" /> is returned.
                </returns>
      <param name="val1">
                    The first of two double-precision floating-point numbers to compare. 
                </param>
      <param name="val2">
                    The second of two double-precision floating-point numbers to compare. 
                </param>
    </member>
    <member name="M:System.Math.Min(System.Int16,System.Int16)">
      <summary>
                    Returns the smaller of two 16-bit signed integers.
                </summary>
      <returns>
                    Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.
                </returns>
      <param name="val1">
                    The first of two 16-bit signed integers to compare. 
                </param>
      <param name="val2">
                    The second of two 16-bit signed integers to compare. 
                </param>
    </member>
    <member name="M:System.Math.Min(System.Int32,System.Int32)">
      <summary>
                    Returns the smaller of two 32-bit signed integers.
                </summary>
      <returns>
                    Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.
                </returns>
      <param name="val1">
                    The first of two 32-bit signed integers to compare. 
                </param>
      <param name="val2">
                    The second of two 32-bit signed integers to compare. 
                </param>
    </member>
    <member name="M:System.Math.Min(System.Int64,System.Int64)">
      <summary>
                    Returns the smaller of two 64-bit signed integers.
                </summary>
      <returns>
                    Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.
                </returns>
      <param name="val1">
                    The first of two 64-bit signed integers to compare. 
                </param>
      <param name="val2">
                    The second of two 64-bit signed integers to compare. 
                </param>
    </member>
    <member name="M:System.Math.Min(System.SByte,System.SByte)">
      <summary>
                    Returns the smaller of two 8-bit signed integers.
                </summary>
      <returns>
                    Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.
                </returns>
      <param name="val1">
                    The first of two 8-bit signed integers to compare. 
                </param>
      <param name="val2">
                    The second of two 8-bit signed integers to compare. 
                </param>
    </member>
    <member name="M:System.Math.Min(System.Single,System.Single)">
      <summary>
                    Returns the smaller of two single-precision floating-point numbers.
                </summary>
      <returns>
                    Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller. If <paramref name="val1" />, <paramref name="val2" />, or both <paramref name="val1" /> and <paramref name="val2" /> are equal to <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NaN" /> is returned.
                </returns>
      <param name="val1">
                    The first of two single-precision floating-point numbers to compare. 
                </param>
      <param name="val2">
                    The second of two single-precision floating-point numbers to compare. 
                </param>
    </member>
    <member name="M:System.Math.Min(System.UInt16,System.UInt16)">
      <summary>
                    Returns the smaller of two 16-bit unsigned integers.
                </summary>
      <returns>
                    Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.
                </returns>
      <param name="val1">
                    The first of two 16-bit unsigned integers to compare. 
                </param>
      <param name="val2">
                    The second of two 16-bit unsigned integers to compare. 
                </param>
    </member>
    <member name="M:System.Math.Min(System.UInt32,System.UInt32)">
      <summary>
                    Returns the smaller of two 32-bit unsigned integers.
                </summary>
      <returns>
                    Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.
                </returns>
      <param name="val1">
                    The first of two 32-bit unsigned integers to compare. 
                </param>
      <param name="val2">
                    The second of two 32-bit unsigned integers to compare. 
                </param>
    </member>
    <member name="M:System.Math.Min(System.UInt64,System.UInt64)">
      <summary>
                    Returns the smaller of two 64-bit unsigned integers.
                </summary>
      <returns>
                    Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.
                </returns>
      <param name="val1">
                    The first of two 64-bit unsigned integers to compare. 
                </param>
      <param name="val2">
                    The second of two 64-bit unsigned integers to compare. 
                </param>
    </member>
    <member name="F:System.Math.PI">
      <summary>
                    Represents the ratio of the circumference of a circle to its diameter, specified by the constant, π.
                </summary>
    </member>
    <member name="M:System.Math.Pow(System.Double,System.Double)">
      <summary>
                    Returns a specified number raised to the specified power.
                </summary>
      <returns>
                    The number <paramref name="x" /> raised to the power <paramref name="y" />.
                </returns>
      <param name="x">
                    A double-precision floating-point number to be raised to a power. 
                </param>
      <param name="y">
                    A double-precision floating-point number that specifies a power. 
                </param>
    </member>
    <member name="M:System.Math.Round(System.Decimal)">
      <summary>
                    Rounds a decimal value to the nearest integer.
                </summary>
      <returns>
                    The integer nearest parameter <paramref name="d" />. If the fractional component of <paramref name="d" /> is halfway between two integers, one of which is even and the other odd, then the even number is returned.
                </returns>
      <param name="d">
                    A decimal number to be rounded. 
                </param>
      <exception cref="T:System.OverflowException">
                    The result is outside the range of a <see cref="T:System.Decimal" />.
                </exception>
    </member>
    <member name="M:System.Math.Round(System.Decimal,System.Int32)">
      <summary>
                    Rounds a decimal value to a specified number of fractional digits.
                </summary>
      <returns>
                    The number nearest <paramref name="d" /> with a number of fractional digits equal to <paramref name="decimals" />. 
                </returns>
      <param name="d">
                    A decimal number to be rounded. 
                </param>
      <param name="decimals">
                    The number of decimal places in the return value. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="decimals" /> is less than 0 or greater than 28. 
                </exception>
      <exception cref="T:System.OverflowException">
                    The result is outside the range of a <see cref="T:System.Decimal" />.
                </exception>
    </member>
    <member name="M:System.Math.Round(System.Double)">
      <summary>
                    Rounds a double-precision floating-point value to the nearest integer.
                </summary>
      <returns>
                    The integer nearest <paramref name="a" />. If the fractional component of <paramref name="a" /> is halfway between two integers, one of which is even and the other odd, then the even number is returned.
                </returns>
      <param name="a">
                    A double-precision floating-point number to be rounded. 
                </param>
    </member>
    <member name="M:System.Math.Round(System.Double,System.Int32)">
      <summary>
                    Rounds a double-precision floating-point value to a specified number of fractional digits.
                </summary>
      <returns>
                    The number nearest <paramref name="value" /> with a number of fractional digits equal to <paramref name="digits" />.
                </returns>
      <param name="value">
                    A double-precision floating-point number to be rounded. 
                </param>
      <param name="digits">
                    The number of fractional digits in the return value. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="digits" /> is less than 0 or greater than 15. 
                </exception>
    </member>
    <member name="M:System.Math.Sign(System.Decimal)">
      <summary>
                    Returns a value indicating the sign of a decimal number.
                </summary>
      <returns>
                    A number indicating the sign of <paramref name="value" />.
                
                    Number 
                
                    Description 
                
                    -1 
                <paramref name="value" /> is less than zero. 
                
                    0 
                <paramref name="value" /> is equal to zero. 
                
                    1 
                <paramref name="value" /> is greater than zero. 
                </returns>
      <param name="value">
                    A signed <see cref="T:System.Decimal" /> number. 
                </param>
    </member>
    <member name="M:System.Math.Sign(System.Double)">
      <summary>
                    Returns a value indicating the sign of a double-precision floating-point number.
                </summary>
      <returns>
                    A number indicating the sign of <paramref name="value" />.
                
                    Number 
                
                    Description 
                
                    -1 
                <paramref name="value" /> is less than zero. 
                
                    0 
                <paramref name="value" /> is equal to zero. 
                
                    1 
                <paramref name="value" /> is greater than zero. 
                </returns>
      <param name="value">
                    A signed number. 
                </param>
      <exception cref="T:System.ArithmeticException">
        <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />. 
                </exception>
    </member>
    <member name="M:System.Math.Sign(System.Int16)">
      <summary>
                    Returns a value indicating the sign of a 16-bit signed integer.
                </summary>
      <returns>
                    A number indicating the sign of <paramref name="value" />.
                
                    Number 
                
                    Description 
                
                    -1 
                <paramref name="value" /> is less than zero. 
                
                    0 
                <paramref name="value" /> is equal to zero. 
                
                    1 
                <paramref name="value" /> is greater than zero. 
                </returns>
      <param name="value">
                    A signed number. 
                </param>
    </member>
    <member name="M:System.Math.Sign(System.Int32)">
      <summary>
                    Returns a value indicating the sign of a 32-bit signed integer.
                </summary>
      <returns>
                    A number indicating the sign of <paramref name="value" />.
                
                    Number 
                
                    Description 
                
                    -1 
                <paramref name="value" /> is less than zero. 
                
                    0 
                <paramref name="value" /> is equal to zero. 
                
                    1 
                <paramref name="value" /> is greater than zero. 
                </returns>
      <param name="value">
                    A signed number. 
                </param>
    </member>
    <member name="M:System.Math.Sign(System.Int64)">
      <summary>
                    Returns a value indicating the sign of a 64-bit signed integer.
                </summary>
      <returns>
                    A number indicating the sign of <paramref name="value" />.
                
                    Number 
                
                    Description 
                
                    -1 
                <paramref name="value" /> is less than zero. 
                
                    0 
                <paramref name="value" /> is equal to zero. 
                
                    1 
                <paramref name="value" /> is greater than zero. 
                </returns>
      <param name="value">
                    A signed number. 
                </param>
    </member>
    <member name="M:System.Math.Sign(System.SByte)">
      <summary>
                    Returns a value indicating the sign of an 8-bit signed integer.
                </summary>
      <returns>
                    A number indicating the sign of <paramref name="value" />.
                
                    Number 
                
                    Description 
                
                    -1 
                <paramref name="value" /> is less than zero. 
                
                    0 
                <paramref name="value" /> is equal to zero. 
                
                    1 
                <paramref name="value" /> is greater than zero. 
                </returns>
      <param name="value">
                    A signed number. 
                </param>
    </member>
    <member name="M:System.Math.Sign(System.Single)">
      <summary>
                    Returns a value indicating the sign of a single-precision floating-point number.
                </summary>
      <returns>
                    A number indicating the sign of <paramref name="value" />.
                
                    Number 
                
                    Description 
                
                    -1 
                <paramref name="value" /> is less than zero. 
                
                    0 
                <paramref name="value" /> is equal to zero. 
                
                    1 
                <paramref name="value" /> is greater than zero. 
                </returns>
      <param name="value">
                    A signed number. 
                </param>
      <exception cref="T:System.ArithmeticException">
        <paramref name="value" /> is equal to <see cref="F:System.Single.NaN" />. 
                </exception>
    </member>
    <member name="M:System.Math.Sin(System.Double)">
      <summary>
                    Returns the sine of the specified angle.
                </summary>
      <returns>
                    The sine of <paramref name="a" />. If <paramref name="a" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />, this method returns <see cref="F:System.Double.NaN" />.
                </returns>
      <param name="a">
                    An angle, measured in radians. 
                </param>
    </member>
    <member name="M:System.Math.Sinh(System.Double)">
      <summary>
                    Returns the hyperbolic sine of the specified angle.
                </summary>
      <returns>
                    The hyperbolic sine of <paramref name="value" />. If <paramref name="value" /> is equal to <see cref="F:System.Double.NegativeInfinity" />, <see cref="F:System.Double.PositiveInfinity" />, or <see cref="F:System.Double.NaN" />, this method returns a <see cref="T:System.Double" /> equal to <paramref name="value" />.
                </returns>
      <param name="value">
                    An angle, measured in radians. 
                </param>
    </member>
    <member name="M:System.Math.Sqrt(System.Double)">
      <summary>
                    Returns the square root of a specified number.
                </summary>
      <returns>
                    Value of <paramref name="d" />
                    Returns 
                
                    Zero, or positive 
                
                    The positive square root of <paramref name="d" />. 
                
                    Negative 
                <see cref="F:System.Double.NaN" />
                    If <paramref name="d" /> is equal to <see cref="F:System.Double.NaN" /> or <see cref="F:System.Double.PositiveInfinity" />, that value is returned.
                </returns>
      <param name="d">
                    A number. 
                </param>
    </member>
    <member name="M:System.Math.Tan(System.Double)">
      <summary>
                    Returns the tangent of the specified angle.
                </summary>
      <returns>
                    The tangent of <paramref name="a" />. If <paramref name="a" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />, this method returns <see cref="F:System.Double.NaN" />.
                </returns>
      <param name="a">
                    An angle, measured in radians. 
                </param>
    </member>
    <member name="M:System.Math.Tanh(System.Double)">
      <summary>
                    Returns the hyperbolic tangent of the specified angle.
                </summary>
      <returns>
                    The hyperbolic tangent of <paramref name="value" />. If <paramref name="value" /> is equal to <see cref="F:System.Double.NegativeInfinity" />, this method returns -1. If value is equal to <see cref="F:System.Double.PositiveInfinity" />, this method returns 1. If <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />, this method returns <see cref="F:System.Double.NaN" />.
                </returns>
      <param name="value">
                    An angle, measured in radians. 
                </param>
    </member>
    <member name="T:System.MemberAccessException">
      <summary>
                    The exception that is thrown when an attempt to access a class member fails.
                </summary>
    </member>
    <member name="M:System.MemberAccessException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.MemberAccessException" /> class.
                </summary>
    </member>
    <member name="M:System.MemberAccessException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.MemberAccessException" /> class with a specified error message.
                </summary>
      <param name="message">
                    The error message that explains the reason for the exception. 
                </param>
    </member>
    <member name="M:System.MemberAccessException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.MemberAccessException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
                </summary>
      <param name="message">
                    The error message that explains the reason for the exception. 
                </param>
      <param name="inner">
                    The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. 
                </param>
    </member>
    <member name="T:System.MethodAccessException">
      <summary>
                    The exception that is thrown when there is an invalid attempt to access a private or protected method inside a class.
                </summary>
    </member>
    <member name="M:System.MethodAccessException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.MethodAccessException" /> class, setting the <see cref="P:System.Exception.Message" /> property of the new instance to a system-supplied message that describes the error, such as "Attempt to access the method failed." This message takes into account the current system culture.
                </summary>
    </member>
    <member name="M:System.MethodAccessException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.MethodAccessException" /> class with a specified error message.
                </summary>
      <param name="message">
                    A <see cref="T:System.String" /> that describes the error. 
                </param>
    </member>
    <member name="M:System.MethodAccessException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.MethodAccessException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
                </summary>
      <param name="message">
                    The error message that explains the reason for the exception. 
                </param>
      <param name="inner">
                    The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. 
                </param>
    </member>
    <member name="T:System.MissingFieldException">
      <summary>
                    The exception that is thrown when there is an attempt to dynamically access a field that does not exist.
                </summary>
    </member>
    <member name="M:System.MissingFieldException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.MissingFieldException" /> class.
                </summary>
    </member>
    <member name="M:System.MissingFieldException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.MissingFieldException" /> class with a specified error message.
                </summary>
      <param name="message">
                    A <see cref="T:System.String" /> that describes the error. 
                </param>
    </member>
    <member name="M:System.MissingFieldException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.MissingFieldException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
                </summary>
      <param name="message">
                    The error message that explains the reason for the exception. 
                </param>
      <param name="inner">
                    The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. 
                </param>
    </member>
    <member name="P:System.MissingFieldException.Message">
      <summary>
                    Gets the text string showing the signature of the missing field, the class name, and the field name. This property is read-only.
                </summary>
      <returns>
                    The error message string.
                </returns>
    </member>
    <member name="T:System.MissingMemberException">
      <summary>
                    The exception that is thrown when there is an attempt to dynamically access a class member that does not exist.
                </summary>
    </member>
    <member name="M:System.MissingMemberException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.MissingMemberException" /> class.
                </summary>
    </member>
    <member name="M:System.MissingMemberException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.MissingMemberException" /> class with a specified error message.
                </summary>
      <param name="message">
                    The message that describes the error. 
                </param>
    </member>
    <member name="M:System.MissingMemberException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.MissingMemberException" /> class with a specified error message and a reference to the inner exception that is the root cause of this exception.
                </summary>
      <param name="message">
                    The error message that explains the reason for the exception. 
                </param>
      <param name="inner">
                    An instance of <see cref="T:System.Exception" /> that is the cause of the current Exception. If <paramref name="inner" /> is not a null reference (Nothing in Visual Basic), then the current Exception is raised in a catch block handling <paramref name="inner" />. 
                </param>
    </member>
    <member name="P:System.MissingMemberException.Message">
      <summary>
                    Gets the text string showing the class name, the member name, and the signature of the missing member.
                </summary>
      <returns>
                    The error message string.
                </returns>
    </member>
    <member name="T:System.MissingMethodException">
      <summary>
                    The exception that is thrown when there is an attempt to dynamically access a method that does not exist.
                </summary>
    </member>
    <member name="M:System.MissingMethodException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.MissingMethodException" /> class.
                </summary>
    </member>
    <member name="M:System.MissingMethodException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.MissingMethodException" /> class with a specified error message.
                </summary>
      <param name="message">
                    A <see cref="T:System.String" /> that describes the error. 
                </param>
    </member>
    <member name="M:System.MissingMethodException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.MissingMethodException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
                </summary>
      <param name="message">
                    The error message that explains the reason for the exception. 
                </param>
      <param name="inner">
                    The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. 
                </param>
    </member>
    <member name="P:System.MissingMethodException.Message">
      <summary>
                    Gets the text string showing the class name, the method name, and the signature of the missing method. This property is read-only.
                </summary>
      <returns>
                    The error message string.
                </returns>
    </member>
    <member name="T:System.MulticastDelegate">
      <summary>
                    Represents a multicast delegate; that is, a delegate that can have more than one element in its invocation list.
                </summary>
    </member>
    <member name="M:System.MulticastDelegate.#ctor(System.Object,System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.MulticastDelegate" /> class.
                </summary>
      <param name="target">
                    The object on which <paramref name="method" /> is defined. 
                </param>
      <param name="method">
                    The name of the method for which a delegate is created. 
                </param>
      <exception cref="T:System.MemberAccessException">
                    Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism. 
                </exception>
    </member>
    <member name="M:System.MulticastDelegate.CombineImpl(System.Delegate)">
      <summary>
                    Combines this <see cref="T:System.Delegate" /> with the specified <see cref="T:System.Delegate" /> to form a new delegate.
                </summary>
      <returns>
                    A <see cref="T:System.Delegate" /> that is the new root of the <see cref="T:System.MulticastDelegate" /> invocation list.
                </returns>
      <param name="follow">
                    The delegate to combine with this delegate. 
                </param>
      <exception cref="T:System.MemberAccessException">
                    Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism. 
                </exception>
      <exception cref="T:System.ArgumentException">
                    Both <paramref name="a" /> and <paramref name="b" /> are not null, and <paramref name="a" /> and <paramref name="b" /> are not instances of the same delegate type. 
                </exception>
    </member>
    <member name="M:System.MulticastDelegate.Equals(System.Object)">
      <summary>
                    Determines whether this multicast delegate and the specified object are equal.
                </summary>
      <returns>true if <paramref name="obj" /> and this instance have the same invocation lists; otherwise, false.
                </returns>
      <param name="obj">
                    The object to compare with this instance. 
                </param>
      <exception cref="T:System.MemberAccessException">
                    Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism. 
                </exception>
    </member>
    <member name="M:System.MulticastDelegate.GetHashCode">
      <summary>
                    Returns the hash code for this instance.
                </summary>
      <returns>
                    A 32-bit signed integer hash code.
                </returns>
      <exception cref="T:System.MemberAccessException">
                    Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism. 
                </exception>
    </member>
    <member name="M:System.MulticastDelegate.GetInvocationList">
      <summary>
                    Returns the invocation list of this multicast delegate, in invocation order.
                </summary>
      <returns>
                    An array of delegates whose invocation lists collectively match the invocation list of this instance.
                </returns>
      <exception cref="T:System.MemberAccessException">
                    Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism. 
                </exception>
    </member>
    <member name="M:System.MulticastDelegate.op_Equality(System.MulticastDelegate,System.MulticastDelegate)">
      <summary>
                    Determines whether two <see cref="T:System.MulticastDelegate" /> objects are equal.
                </summary>
      <returns>true if <paramref name="d1" /> and <paramref name="d2" /> have the same invocation lists; otherwise, false.
                </returns>
      <param name="d1">
                    The left operand. 
                </param>
      <param name="d2">
                    The right operand. 
                </param>
      <exception cref="T:System.MemberAccessException">
                    Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism. 
                </exception>
    </member>
    <member name="M:System.MulticastDelegate.op_Inequality(System.MulticastDelegate,System.MulticastDelegate)">
      <summary>
                    Determines whether two <see cref="T:System.MulticastDelegate" /> objects are not equal.
                </summary>
      <returns>true if <paramref name="d1" /> and <paramref name="d2" /> do not have the same invocation lists; otherwise, false.
                </returns>
      <param name="d1">
                    The left operand. 
                </param>
      <param name="d2">
                    The right operand. 
                </param>
      <exception cref="T:System.MemberAccessException">
                    Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism. 
                </exception>
    </member>
    <member name="M:System.MulticastDelegate.RemoveImpl(System.Delegate)">
      <summary>
                    Removes an element from the invocation list of this <see cref="T:System.MulticastDelegate" /> that is equal to the specified delegate.
                </summary>
      <returns>
                    If <paramref name="value" /> is found in the invocation list for this instance, then a new <see cref="T:System.Delegate" /> without <paramref name="value" /> in its invocation list; otherwise, this instance with its original invocation list.
                </returns>
      <param name="value">
                    The delegate to search for in the invocation list. 
                </param>
      <exception cref="T:System.MemberAccessException">
                    Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism. 
                </exception>
    </member>
    <member name="T:System.MulticastNotSupportedException">
      <summary>
                    The exception that is thrown when there is an attempt to combine two delegates based on the <see cref="T:System.Delegate" /> type instead of the <see cref="T:System.MulticastDelegate" /> type. This class cannot be inherited. 
                </summary>
    </member>
    <member name="M:System.MulticastNotSupportedException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.MulticastNotSupportedException" /> class.
                </summary>
    </member>
    <member name="M:System.MulticastNotSupportedException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.MulticastNotSupportedException" /> class with a specified error message.
                </summary>
      <param name="message">
                    The message that describes the error. 
                </param>
    </member>
    <member name="M:System.MulticastNotSupportedException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.MulticastNotSupportedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
                </summary>
      <param name="message">
                    The error message that explains the reason for the exception. 
                </param>
      <param name="inner">
                    The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. 
                </param>
    </member>
    <member name="T:System.NotFiniteNumberException">
      <summary>
                    The exception that is thrown when a floating-point value is positive infinity, negative infinity, or Not-a-Number (NaN).
                </summary>
    </member>
    <member name="M:System.NotFiniteNumberException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.NotFiniteNumberException" /> class.
                </summary>
    </member>
    <member name="M:System.NotFiniteNumberException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.NotFiniteNumberException" /> class with a specified error message.
                </summary>
      <param name="message">
                    The message that describes the error. 
                </param>
    </member>
    <member name="M:System.NotFiniteNumberException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.NotFiniteNumberException" /> class with a specified error message and a reference to the inner exception that is root cause of this exception.
                </summary>
      <param name="message">
                    The error message that explains the reason for the exception. 
                </param>
      <param name="innerException">
                    The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. 
                </param>
    </member>
    <member name="T:System.NotImplementedException">
      <summary>
                    The exception that is thrown when a requested method or operation is not implemented.
                </summary>
    </member>
    <member name="M:System.NotImplementedException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.NotImplementedException" /> class with default properties.
                </summary>
    </member>
    <member name="M:System.NotImplementedException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.NotImplementedException" /> class with a specified error message.
                </summary>
      <param name="message">
                    The error message that explains the reason for the exception. 
                </param>
    </member>
    <member name="M:System.NotImplementedException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.NotImplementedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
                </summary>
      <param name="message">
                    The error message that explains the reason for the exception. 
                </param>
      <param name="inner">
                    The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. 
                </param>
    </member>
    <member name="T:System.NotSupportedException">
      <summary>
                    The exception that is thrown when an invoked method is not supported, or when there is an attempt to read, seek, or write to a stream that does not support the invoked functionality.
                </summary>
    </member>
    <member name="M:System.NotSupportedException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.NotSupportedException" /> class, setting the <see cref="P:System.Exception.Message" /> property of the new instance to a system-supplied message that describes the error. This message takes into account the current system culture.
                </summary>
    </member>
    <member name="M:System.NotSupportedException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.NotSupportedException" /> class with a specified error message.
                </summary>
      <param name="message">
                    A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture. 
                </param>
    </member>
    <member name="M:System.NotSupportedException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.NotSupportedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
                </summary>
      <param name="message">
                    The error message that explains the reason for the exception. 
                </param>
      <param name="innerException">
                    The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception. 
                </param>
    </member>
    <member name="T:System.Nullable">
      <summary>
                    Supports a value type that can be assigned null like a reference type. This class cannot be inherited.
                </summary>
    </member>
    <member name="M:System.Nullable.Compare``1(System.Nullable{``0},System.Nullable{``0})">
      <summary>
                    Compares the relative values of two <see cref="T:System.Nullable`1" /> objects.
                </summary>
      <returns>
                    An integer that indicates the relative values of the <paramref name="n1" /> and <paramref name="n2" /> parameters.
                
                    Return Value
                
                    Description
                
                    Less than zero
                
                    The <see cref="P:System.Nullable`1.HasValue" /> property for <paramref name="n1" /> is false, and the <see cref="P:System.Nullable`1.HasValue" /> property for <paramref name="n2" /> is true.
                
                    -or-
                
                    The <see cref="P:System.Nullable`1.HasValue" /> properties for <paramref name="n1" /> and <paramref name="n2" /> are true, and the value of the <see cref="P:System.Nullable`1.Value" /> property for <paramref name="n1" /> is less than the value of the <see cref="P:System.Nullable`1.Value" /> property for <paramref name="n2" />.
                
                    Zero
                
                    The <see cref="P:System.Nullable`1.HasValue" /> properties for <paramref name="n1" /> and <paramref name="n2" /> are false.
                
                    -or-
                
                    The <see cref="P:System.Nullable`1.HasValue" /> properties for <paramref name="n1" /> and <paramref name="n2" /> are true, and the value of the <see cref="P:System.Nullable`1.Value" /> property for <paramref name="n1" /> is equal to the value of the <see cref="P:System.Nullable`1.Value" /> property for <paramref name="n2" />.
                
                    Greater than zero
                
                    The <see cref="P:System.Nullable`1.HasValue" /> property for <paramref name="n1" /> is true, and the <see cref="P:System.Nullable`1.HasValue" /> property for <paramref name="n2" /> is false.
                
                    -or-
                
                    The <see cref="P:System.Nullable`1.HasValue" /> properties for <paramref name="n1" /> and <paramref name="n2" /> are true, and the value of the <see cref="P:System.Nullable`1.Value" /> property for <paramref name="n1" /> is greater than the value of the <see cref="P:System.Nullable`1.Value" /> property for <paramref name="n2" />.
                </returns>
      <param name="n1">
                    A <see cref="T:System.Nullable`1" /> object.
                </param>
      <param name="n2">
                    A <see cref="T:System.Nullable`1" /> object.
                </param>
      <typeparam name="T">
                    The underlying value type of the <paramref name="n1" /> and <paramref name="n2" /> parameters.
                </typeparam>
    </member>
    <member name="M:System.Nullable.Equals``1(System.Nullable{``0},System.Nullable{``0})">
      <summary>
                    Indicates whether two specified <see cref="T:System.Nullable`1" /> objects are equal.
                </summary>
      <returns>true if the <paramref name="n1" /> parameter is equal to the <paramref name="n2" /> parameter; otherwise, false. 
                
                    The return value depends on the <see cref="P:System.Nullable`1.HasValue" /> and <see cref="P:System.Nullable`1.Value" /> properties of the two parameters that are compared.
                
                    Return Value
                
                    Description
                true
                    The <see cref="P:System.Nullable`1.HasValue" /> properties for <paramref name="n1" /> and <paramref name="n2" /> are false. 
                
                    -or-
                
                    The <see cref="P:System.Nullable`1.HasValue" /> properties for <paramref name="n1" /> and <paramref name="n2" /> are true, and the <see cref="P:System.Nullable`1.Value" /> properties of the parameters are equal.
                false
                    The <see cref="P:System.Nullable`1.HasValue" /> property is true for one parameter and false for the other parameter.
                
                    -or-
                
                    The <see cref="P:System.Nullable`1.HasValue" /> properties for <paramref name="n1" /> and <paramref name="n2" /> are true, and the <see cref="P:System.Nullable`1.Value" /> properties of the parameters are unequal.
                </returns>
      <param name="n1">
                    A <see cref="T:System.Nullable`1" /> object.
                </param>
      <param name="n2">
                    A <see cref="T:System.Nullable`1" /> object.
                </param>
      <typeparam name="T">
                    The underlying value type of the <paramref name="n1" /> and <paramref name="n2" /> parameters.
                </typeparam>
    </member>
    <member name="M:System.Nullable.GetUnderlyingType(System.Type)">
      <summary>
                    Returns the underlying type argument of the specified nullable type.
                </summary>
      <returns>
                    The type argument of the <paramref name="nullableType" /> parameter, if the <paramref name="nullableType" /> parameter is a closed generic nullable type; otherwise, null. 
                </returns>
      <param name="nullableType">
                    A <see cref="T:System.Type" /> object that describes a closed generic nullable type. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nullableType" /> is null.
                </exception>
    </member>
    <member name="T:System.Nullable`1">
      <summary>
                    Represents an object whose underlying type is a value type that can also be assigned null like a reference type.
                </summary>
      <typeparam name="T">
                    The underlying value type of the <see cref="T:System.Nullable`1" /> generic type.
                </typeparam>
    </member>
    <member name="M:System.Nullable`1.#ctor(`0)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Nullable`1" /> structure to the specified value. 
                </summary>
      <param name="value">
                    A value type.
                </param>
    </member>
    <member name="M:System.Nullable`1.Equals(System.Object)">
      <summary>
                    Indicates whether the current <see cref="T:System.Nullable`1" /> object is equal to a specified object.
                </summary>
      <returns>true if the <paramref name="other" /> parameter is equal to the current <see cref="T:System.Nullable`1" /> object; otherwise, false. 
                
                    This table describes how equality is defined for the compared values: 
                
                    Return Value
                
                    Description
                true
                    The <see cref="P:System.Nullable`1.HasValue" /> property is false, and the <paramref name="other" /> parameter is null. That is, two null values are equal by definition.
                
                    -or-
                
                    The <see cref="P:System.Nullable`1.HasValue" /> property is true, and the value returned by the <see cref="P:System.Nullable`1.Value" /> property is equal to the <paramref name="other" /> parameter.
                false
                    The <see cref="P:System.Nullable`1.HasValue" /> property for the current <see cref="T:System.Nullable`1" /> structure is true, and the <paramref name="other" /> parameter is null.
                
                    -or-
                
                    The <see cref="P:System.Nullable`1.HasValue" /> property for the current <see cref="T:System.Nullable`1" /> structure is false, and the <paramref name="other" /> parameter is not null.
                
                    -or-
                
                    The <see cref="P:System.Nullable`1.HasValue" /> property for the current <see cref="T:System.Nullable`1" /> structure is true, and the value returned by the <see cref="P:System.Nullable`1.Value" /> property is not equal to the <paramref name="other" /> parameter.
                </returns>
      <param name="other">
                    An object.
                </param>
    </member>
    <member name="M:System.Nullable`1.GetHashCode">
      <summary>
                    Retrieves the hash code of the object returned by the <see cref="P:System.Nullable`1.Value" /> property.
                </summary>
      <returns>
                    The hash code of the object returned by the <see cref="P:System.Nullable`1.Value" /> property if the <see cref="P:System.Nullable`1.HasValue" /> property is true, or zero if the <see cref="P:System.Nullable`1.HasValue" /> property is false. 
                </returns>
    </member>
    <member name="M:System.Nullable`1.GetValueOrDefault">
      <summary>
                    Retrieves the value of the current <see cref="T:System.Nullable`1" /> object, or the object's default value.
                </summary>
      <returns>
                    The value of the <see cref="P:System.Nullable`1.Value" /> property if the  <see cref="P:System.Nullable`1.HasValue" /> property is true; otherwise, the default value of the current <see cref="T:System.Nullable`1" /> object. The type of the default value is the type argument of the current <see cref="T:System.Nullable`1" /> object, and the value of the default value consists solely of binary zeroes.
                </returns>
    </member>
    <member name="M:System.Nullable`1.GetValueOrDefault(`0)">
      <summary>
                    Retrieves the value of the current <see cref="T:System.Nullable`1" /> object, or the specified default value.
                </summary>
      <returns>
                    The value of the <see cref="P:System.Nullable`1.Value" /> property if the <see cref="P:System.Nullable`1.HasValue" /> property is true; otherwise, the <paramref name="defaultValue" /> parameter.
                </returns>
      <param name="defaultValue">
                    A value to return if the <see cref="P:System.Nullable`1.HasValue" /> property is false.
                </param>
    </member>
    <member name="P:System.Nullable`1.HasValue">
      <summary>
                    Gets a value indicating whether the current <see cref="T:System.Nullable`1" /> object has a value.
                </summary>
      <returns>true if the current <see cref="T:System.Nullable`1" /> object has a value; false if the current <see cref="T:System.Nullable`1" /> object has no value.
                </returns>
    </member>
    <member name="M:System.Nullable`1.op_Explicit(System.Nullable{`0})~`0">
      <summary>
                    Returns the value of a specified <see cref="T:System.Nullable`1" /> value.
                </summary>
      <returns>
                    The value of the <see cref="P:System.Nullable`1.Value" /> property for the <paramref name="value" /> parameter.
                </returns>
      <param name="value">
                    A <see cref="T:System.Nullable`1" /> value.
                </param>
    </member>
    <member name="M:System.Nullable`1.op_Implicit(`0)~System.Nullable{`0}">
      <summary>
                    Creates a new <see cref="T:System.Nullable`1" /> object initialized to a specified value. 
                </summary>
      <returns>
                    A <see cref="T:System.Nullable`1" /> object whose <see cref="P:System.Nullable`1.Value" /> property is initialized with the <paramref name="value" /> parameter.
                </returns>
      <param name="value">
                    A value type.
                </param>
    </member>
    <member name="M:System.Nullable`1.ToString">
      <summary>
                    Returns the text representation of the value of the current <see cref="T:System.Nullable`1" /> object.
                </summary>
      <returns>
                    The text representation of the value of the current <see cref="T:System.Nullable`1" /> object if the <see cref="P:System.Nullable`1.HasValue" /> property is true, or an empty string ("") if the <see cref="P:System.Nullable`1.HasValue" /> property is false.
                </returns>
    </member>
    <member name="P:System.Nullable`1.Value">
      <summary>
                    Gets the value of the current <see cref="T:System.Nullable`1" /> value.
                </summary>
      <returns>
                    The value of the current <see cref="T:System.Nullable`1" /> object if the <see cref="P:System.Nullable`1.HasValue" /> property is true. An exception is thrown if the <see cref="P:System.Nullable`1.HasValue" /> property is false.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="P:System.Nullable`1.HasValue" /> property is false.
                </exception>
    </member>
    <member name="T:System.NullReferenceException">
      <summary>
                    The exception that is thrown when there is an attempt to dereference a null object reference.
                </summary>
    </member>
    <member name="M:System.NullReferenceException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.NullReferenceException" /> class, setting the <see cref="P:System.Exception.Message" /> property of the new instance to a system-supplied message that describes the error, such as "The value 'null' was found where an instance of an object was required." This message takes into account the current system culture.
                </summary>
    </member>
    <member name="M:System.NullReferenceException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.NullReferenceException" /> class with a specified error message.
                </summary>
      <param name="message">
                    A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture. 
                </param>
    </member>
    <member name="M:System.NullReferenceException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.NullReferenceException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
                </summary>
      <param name="message">
                    The error message that explains the reason for the exception. 
                </param>
      <param name="innerException">
                    The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. 
                </param>
    </member>
    <member name="T:System.Object">
      <summary>
                    Supports all classes in the .NET Framework class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all classes in the .NET Framework; it is the root of the type hierarchy.
                </summary>
    </member>
    <member name="M:System.Object.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Object" /> class.
                </summary>
    </member>
    <member name="M:System.Object.Equals(System.Object)">
      <summary>
                    Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
                </summary>
      <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
                </returns>
      <param name="obj">
                    The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. 
                </param>
      <exception cref="T:System.NullReferenceException">
                    The <paramref name="obj" /> parameter is null.
                </exception>
    </member>
    <member name="M:System.Object.Equals(System.Object,System.Object)">
      <summary>
                    Determines whether the specified <see cref="T:System.Object" /> instances are considered equal.
                </summary>
      <returns>true if <paramref name="objA" /> is the same instance as <paramref name="objB" /> or if both are null references or if objA.Equals(objB) returns true; otherwise, false.
                </returns>
      <param name="objA">
                    The first <see cref="T:System.Object" /> to compare. 
                </param>
      <param name="objB">
                    The second <see cref="T:System.Object" /> to compare. 
                </param>
      <exception cref="T:System.NullReferenceException">
                    The <paramref name="obj" /> parameter is null.
                </exception>
    </member>
    <member name="M:System.Object.Finalize">
      <summary>
                    Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" /> is reclaimed by garbage collection.
                </summary>
    </member>
    <member name="M:System.Object.GetHashCode">
      <summary>
                    Serves as a hash function for a particular type. 
                </summary>
      <returns>
                    A hash code for the current <see cref="T:System.Object" />.
                </returns>
    </member>
    <member name="M:System.Object.GetType">
      <summary>
                    Gets the <see cref="T:System.Type" /> of the current instance.
                </summary>
      <returns>
                    The <see cref="T:System.Type" /> instance that represents the exact runtime type of the current instance.
                </returns>
    </member>
    <member name="M:System.Object.MemberwiseClone">
      <summary>
                    Creates a shallow copy of the current <see cref="T:System.Object" />.
                </summary>
      <returns>
                    A shallow copy of the current <see cref="T:System.Object" />.
                </returns>
    </member>
    <member name="M:System.Object.ReferenceEquals(System.Object,System.Object)">
      <summary>
                    Determines whether the specified <see cref="T:System.Object" /> instances are the same instance.
                </summary>
      <returns>true if <paramref name="objA" /> is the same instance as <paramref name="objB" /> or if both are null references; otherwise, false.
                </returns>
      <param name="objA">
                    The first <see cref="T:System.Object" /> to compare. 
                </param>
      <param name="objB">
                    The second <see cref="T:System.Object" /> to compare. 
                </param>
    </member>
    <member name="M:System.Object.ToString">
      <summary>
                    Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </returns>
    </member>
    <member name="T:System.ObjectDisposedException">
      <summary>
                    The exception that is thrown when an operation is performed on a disposed object.
                </summary>
    </member>
    <member name="M:System.ObjectDisposedException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ObjectDisposedException" /> class with a string containing the name of the disposed object.
                </summary>
      <param name="objectName">
                    A string containing the name of the disposed object. 
                </param>
    </member>
    <member name="M:System.ObjectDisposedException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ObjectDisposedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
                </summary>
      <param name="message">
                    The error message that explains the reason for the exception.
                </param>
      <param name="innerException">
                    The exception that is the cause of the current exception. If <paramref name="innerException" /> is not null, the current exception is raised in a catch block that handles the inner exception.
                </param>
    </member>
    <member name="M:System.ObjectDisposedException.#ctor(System.String,System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ObjectDisposedException" /> class with the specified object name and message.
                </summary>
      <param name="objectName">
                    The name of the disposed object. 
                </param>
      <param name="message">
                    The error message that explains the reason for the exception. 
                </param>
    </member>
    <member name="P:System.ObjectDisposedException.Message">
      <summary>
                    Gets the message that describes the error.
                </summary>
      <returns>
                    A string that describes the error.
                </returns>
    </member>
    <member name="P:System.ObjectDisposedException.ObjectName">
      <summary>
                    Gets the name of the disposed object.
                </summary>
      <returns>
                    A string containing the name of the disposed object.
                </returns>
    </member>
    <member name="T:System.ObsoleteAttribute">
      <summary>
                    Marks the program elements that are no longer in use. This class cannot be inherited.
                </summary>
    </member>
    <member name="M:System.ObsoleteAttribute.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ObsoleteAttribute" /> class with default properties.
                </summary>
    </member>
    <member name="M:System.ObsoleteAttribute.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ObsoleteAttribute" /> class with a specified workaround message.
                </summary>
      <param name="message">
                    The text string that describes alternative workarounds. 
                </param>
    </member>
    <member name="M:System.ObsoleteAttribute.#ctor(System.String,System.Boolean)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ObsoleteAttribute" /> class with a workaround message and a Boolean value indicating whether the obsolete element usage is considered an error.
                </summary>
      <param name="message">
                    The text string that describes alternative workarounds. 
                </param>
      <param name="error">
                    The Boolean value that indicates whether the obsolete element usage is considered an error. 
                </param>
    </member>
    <member name="P:System.ObsoleteAttribute.IsError">
      <summary>
                    Gets a Boolean value indicating whether the compiler will treat usage of the obsolete program element as an error.
                </summary>
      <returns>true if the obsolete element usage is considered an error; otherwise, false. The default is false.
                </returns>
    </member>
    <member name="P:System.ObsoleteAttribute.Message">
      <summary>
                    Gets the workaround message, including a description of the alternative program elements.
                </summary>
      <returns>
                    The workaround text string.
                </returns>
    </member>
    <member name="T:System.OperatingSystem">
      <summary>
                    Represents information about an operating system, such as the version and platform identifier. This class cannot be inherited.
                </summary>
    </member>
    <member name="M:System.OperatingSystem.#ctor(System.PlatformID,System.Version)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.OperatingSystem" /> class, using the specified platform identifier value and version object.
                </summary>
      <param name="platform">
                    One of the <see cref="T:System.PlatformID" /> values that indicates the operating system platform. 
                </param>
      <param name="version">
                    A <see cref="T:System.Version" /> object that indicates the version of the operating system. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="platform" /> is not a <see cref="T:System.PlatformID" /> enumeration value.
                </exception>
    </member>
    <member name="M:System.OperatingSystem.Clone">
      <summary>
                    Creates an <see cref="T:System.OperatingSystem" /> object that is identical to this instance.
                </summary>
      <returns>
                    An <see cref="T:System.OperatingSystem" /> object that is a copy of this instance.
                </returns>
    </member>
    <member name="P:System.OperatingSystem.Platform">
      <summary>
                    Gets a <see cref="T:System.PlatformID" /> enumeration value that identifies the operating system platform.
                </summary>
      <returns>
                    One of the <see cref="T:System.PlatformID" /> values.
                </returns>
    </member>
    <member name="M:System.OperatingSystem.ToString">
      <summary>
                    Converts the value of this <see cref="T:System.OperatingSystem" /> object to its equivalent string representation.
                </summary>
      <returns>
                    The string representation of the values returned by the <see cref="P:System.OperatingSystem.Platform" />,and <see cref="P:System.OperatingSystem.Version" />.
                </returns>
    </member>
    <member name="P:System.OperatingSystem.Version">
      <summary>
                    Gets a <see cref="T:System.Version" /> object that identifies the operating system.
                </summary>
      <returns>
                    A <see cref="T:System.Version" /> object that describes the major version, minor version, build, and revision numbers for the operating system.
                </returns>
    </member>
    <member name="T:System.OutOfMemoryException">
      <summary>
                    The exception that is thrown when there is not enough memory to continue the execution of a program.
                </summary>
    </member>
    <member name="M:System.OutOfMemoryException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.OutOfMemoryException" /> class.
                </summary>
    </member>
    <member name="M:System.OutOfMemoryException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.OutOfMemoryException" /> class with a specified error message.
                </summary>
      <param name="message">
                    The message that describes the error. 
                </param>
    </member>
    <member name="M:System.OutOfMemoryException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.OutOfMemoryException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
                </summary>
      <param name="message">
                    The error message that explains the reason for the exception. 
                </param>
      <param name="innerException">
                    The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. 
                </param>
    </member>
    <member name="T:System.OverflowException">
      <summary>
                    The exception that is thrown when an arithmetic, casting, or conversion operation in a checked context results in an overflow.
                </summary>
    </member>
    <member name="M:System.OverflowException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.OverflowException" /> class.
                </summary>
    </member>
    <member name="M:System.OverflowException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.OverflowException" /> class with a specified error message.
                </summary>
      <param name="message">
                    The message that describes the error. 
                </param>
    </member>
    <member name="M:System.OverflowException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.OverflowException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
                </summary>
      <param name="message">
                    The error message that explains the reason for the exception. 
                </param>
      <param name="innerException">
                    The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. 
                </param>
    </member>
    <member name="T:System.ParamArrayAttribute">
      <summary>
                    Indicates that the method will allow a variable number of arguments in its invocation. This class cannot be inherited.
                </summary>
    </member>
    <member name="M:System.ParamArrayAttribute.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ParamArrayAttribute" /> class with default properties.
                </summary>
    </member>
    <member name="T:System.PlatformID">
      <summary>
                    Identifies the operating system, or development platform, supported by an assembly.
                </summary>
    </member>
    <member name="F:System.PlatformID.Win32S">
      <summary>
                    The operating system is Win32s. Win32s is a layer that runs on 16-bit versions of Windows to provide access to 32-bit applications.
                </summary>
    </member>
    <member name="F:System.PlatformID.Win32Windows">
      <summary>
                    The operating system is Windows 95 or later.
                </summary>
    </member>
    <member name="F:System.PlatformID.Win32NT">
      <summary>
                    The operating system is Windows NT or later.
                </summary>
    </member>
    <member name="F:System.PlatformID.WinCE">
      <summary>
                    The operating system is Windows CE.
                </summary>
    </member>
    <member name="F:System.PlatformID.Unix">
      <summary>
                    The operating system is Unix.
                </summary>
    </member>
    <member name="F:System.PlatformID.Xbox">
      <summary>
                    The development platform is Xbox 360.
                </summary>
    </member>
    <member name="F:System.PlatformID.MacOSX">
      <summary>
                    The operating system is Macintosh.
                </summary>
    </member>
    <member name="T:System.PlatformNotSupportedException">
      <summary>
                    The exception that is thrown when a feature does not run on a particular platform.
                </summary>
    </member>
    <member name="M:System.PlatformNotSupportedException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.PlatformNotSupportedException" /> class with default properties.
                </summary>
    </member>
    <member name="M:System.PlatformNotSupportedException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.PlatformNotSupportedException" /> class with a specified error message.
                </summary>
      <param name="message">
                    The text message that explains the reason for the exception. 
                </param>
    </member>
    <member name="M:System.PlatformNotSupportedException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.PlatformNotSupportedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
                </summary>
      <param name="message">
                    The error message that explains the reason for the exception. 
                </param>
      <param name="inner">
                    The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. 
                </param>
    </member>
    <member name="T:System.Predicate`1">
      <summary>
                    Represents the method that defines a set of criteria and determines whether the specified object meets those criteria.
                </summary>
      <returns>true if <paramref name="obj" /> meets the criteria defined within the method represented by this delegate; otherwise, false.
                </returns>
      <param name="obj">
                    The object to compare against the criteria defined within the method represented by this delegate.
                </param>
      <typeparam name="T">
                    The type of the object to compare.
                </typeparam>
    </member>
    <member name="T:System.Random">
      <summary>
                    Represents a pseudo-random number generator, a device that produces a sequence of numbers that meet certain statistical requirements for randomness.
                </summary>
    </member>
    <member name="M:System.Random.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Random" /> class, using a time-dependent default seed value.
                </summary>
    </member>
    <member name="M:System.Random.#ctor(System.Int32)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Random" /> class, using the specified seed value.
                </summary>
      <param name="Seed">
                    A number used to calculate a starting value for the pseudo-random number sequence. If a negative number is specified, the absolute value of the number is used. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="Seed" /> is <see cref="F:System.Int32.MinValue" />, which causes an overflow when its absolute value is calculated. 
                </exception>
    </member>
    <member name="M:System.Random.Next">
      <summary>
                    Returns a nonnegative random number.
                </summary>
      <returns>
                    A 32-bit signed integer greater than or equal to zero and less than <see cref="F:System.Int32.MaxValue" />.
                </returns>
    </member>
    <member name="M:System.Random.Next(System.Int32)">
      <summary>
                    Returns a nonnegative random number less than the specified maximum.
                </summary>
      <returns>
                    A 32-bit signed integer greater than or equal to zero, and less than <paramref name="maxValue" />; that is, the range of return values ordinarily includes zero but not <paramref name="maxValue" />. However, if <paramref name="maxValue" /> equals zero, <paramref name="maxValue" /> is returned.
                </returns>
      <param name="maxValue">
                    The exclusive upper bound of the random number to be generated. <paramref name="maxValue" /> must be greater than or equal to zero. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxValue" /> is less than zero. 
                </exception>
    </member>
    <member name="M:System.Random.Next(System.Int32,System.Int32)">
      <summary>
                    Returns a random number within a specified range.
                </summary>
      <returns>
                    A 32-bit signed integer greater than or equal to <paramref name="minValue" /> and less than <paramref name="maxValue" />; that is, the range of return values includes <paramref name="minValue" /> but not <paramref name="maxValue" />. If <paramref name="minValue" /> equals <paramref name="maxValue" />, <paramref name="minValue" /> is returned.
                </returns>
      <param name="minValue">
                    The inclusive lower bound of the random number returned. 
                </param>
      <param name="maxValue">
                    The exclusive upper bound of the random number returned. <paramref name="maxValue" /> must be greater than or equal to <paramref name="minValue" />. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="minValue" /> is greater than <paramref name="maxValue" />. 
                </exception>
    </member>
    <member name="M:System.Random.NextBytes(System.Byte[])">
      <summary>
                    Fills the elements of a specified array of bytes with random numbers.
                </summary>
      <param name="buffer">
                    An array of bytes to contain random numbers. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. 
                </exception>
    </member>
    <member name="M:System.Random.NextDouble">
      <summary>
                    Returns a random number between 0.0 and 1.0.
                </summary>
      <returns>
                    A double-precision floating point number greater than or equal to 0.0, and less than 1.0.
                </returns>
    </member>
    <member name="M:System.Random.Sample">
      <summary>
                    Returns a random number between 0.0 and 1.0.
                </summary>
      <returns>
                    A double-precision floating point number greater than or equal to 0.0, and less than 1.0.
                </returns>
    </member>
    <member name="T:System.RankException">
      <summary>
                    The exception that is thrown when an array with the wrong number of dimensions is passed to a method.
                </summary>
    </member>
    <member name="M:System.RankException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.RankException" /> class.
                </summary>
    </member>
    <member name="M:System.RankException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.RankException" /> class with a specified error message.
                </summary>
      <param name="message">
                    A <see cref="T:System.String" /> that describes the error. 
                </param>
    </member>
    <member name="M:System.RankException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.RankException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
                </summary>
      <param name="message">
                    The error message that explains the reason for the exception. 
                </param>
      <param name="innerException">
                    The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. 
                </param>
    </member>
    <member name="T:System.ResolveEventArgs">
      <summary>
                    Provides data for the <see cref="E:System.AppDomain.AssemblyResolve" /> event.
                </summary>
    </member>
    <member name="M:System.ResolveEventArgs.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ResolveEventArgs" /> class.
                </summary>
      <param name="name">
                    The name of an item to resolve. 
                </param>
    </member>
    <member name="P:System.ResolveEventArgs.Name">
      <summary>
                    Gets the name of the item to resolve.
                </summary>
      <returns>
                    The name of the item to resolve.
                </returns>
    </member>
    <member name="T:System.ResolveEventHandler">
      <summary>[SECURITY CRITICAL] 
                    Represents the method that handles the <see cref="E:System.AppDomain.AssemblyResolve" /> event.
                </summary>
      <returns>
                    The resolved assembly, or null if the assembly cannot be resolved.
                </returns>
      <param name="sender">
                    The source of the event. 
                </param>
      <param name="args">
                    The event data. 
                </param>
    </member>
    <member name="T:System.RuntimeArgumentHandle">
      <summary>
                    References a variable-length argument list.
                </summary>
    </member>
    <member name="T:System.RuntimeFieldHandle">
      <summary>
                    Represents a field using an internal metadata token.
                </summary>
    </member>
    <member name="M:System.RuntimeFieldHandle.Equals(System.Object)">
      <summary>
                    Indicates whether the current instance is equal to the specified object.
                </summary>
      <returns>true if <paramref name="obj" /> is a <see cref="T:System.RuntimeFieldHandle" /> and equal to the value of the current instance; otherwise, false.
                </returns>
      <param name="obj">
                    The object to compare to the current instance.
                </param>
    </member>
    <member name="M:System.RuntimeFieldHandle.Equals(System.RuntimeFieldHandle)">
      <summary>
                    Indicates whether the current instance is equal to the specified <see cref="T:System.RuntimeFieldHandle" />.
                </summary>
      <returns>true if the value of <paramref name="handle" /> is equal to the value of the current instance; otherwise, false.
                </returns>
      <param name="handle">
                    The <see cref="T:System.RuntimeFieldHandle" /> to compare to the current instance.
                </param>
    </member>
    <member name="M:System.RuntimeFieldHandle.GetHashCode"></member>
    <member name="P:System.RuntimeFieldHandle.Value">
      <summary>
                    Gets a handle to the field represented by the current instance.
                </summary>
      <returns>
                    An <see cref="T:System.IntPtr" /> that contains the handle to the field represented by the current instance.
                </returns>
    </member>
    <member name="T:System.RuntimeMethodHandle">
      <summary>
        <see cref="T:System.RuntimeMethodHandle" /> is a handle to the internal metadata representation of a method.
                </summary>
    </member>
    <member name="M:System.RuntimeMethodHandle.Equals(System.Object)">
      <summary>
                    Indicates whether this instance is equal to a specified object.
                </summary>
      <returns>true if <paramref name="obj" /> is a <see cref="T:System.RuntimeMethodHandle" /> and equal to the value of this instance; otherwise, false.
                </returns>
      <param name="obj">
                    A <see cref="T:System.Object" /> to compare to this instance.
                </param>
    </member>
    <member name="M:System.RuntimeMethodHandle.Equals(System.RuntimeMethodHandle)">
      <summary>
                    Indicates whether this instance is equal to a specified <see cref="T:System.RuntimeMethodHandle" />.
                </summary>
      <returns>true if <paramref name="handle" /> is equal to the value of this instance; otherwise, false.
                </returns>
      <param name="handle">
                    A <see cref="T:System.RuntimeMethodHandle" /> to compare to this instance.
                </param>
    </member>
    <member name="M:System.RuntimeMethodHandle.GetHashCode">
      <summary>
                    Returns the hash code for this instance.
                </summary>
      <returns>
                    A 32-bit signed integer hash code.
                </returns>
    </member>
    <member name="M:System.RuntimeMethodHandle.op_Equality(System.RuntimeMethodHandle,System.RuntimeMethodHandle)">
      <summary>
                    Indicates whether two instances of <see cref="T:System.RuntimeMethodHandle" /> are equal.
                </summary>
      <returns>true if the value of <paramref name="left" /> is equal to the value of <paramref name="right" />; otherwise, false.
                </returns>
      <param name="left">
                    A <see cref="T:System.RuntimeMethodHandle" /> to compare to <paramref name="right" />.
                </param>
      <param name="right">
                    A <see cref="T:System.RuntimeMethodHandle" /> to compare to <paramref name="left" />.
                </param>
    </member>
    <member name="M:System.RuntimeMethodHandle.op_Inequality(System.RuntimeMethodHandle,System.RuntimeMethodHandle)">
      <summary>
                    Indicates whether two instances of <see cref="T:System.RuntimeMethodHandle" /> are not equal.
                </summary>
      <returns>true if the value of <paramref name="left" /> is unequal to the value of <paramref name="right" />; otherwise, false.
                </returns>
      <param name="left">
                    A <see cref="T:System.RuntimeMethodHandle" /> to compare to <paramref name="right" />.
                </param>
      <param name="right">
                    A <see cref="T:System.RuntimeMethodHandle" /> to compare to <paramref name="left" />.
                </param>
    </member>
    <member name="P:System.RuntimeMethodHandle.Value">
      <summary>
                    Gets the value of this instance.
                </summary>
      <returns>
                    A handle to the internal metadata representation of a method.
                </returns>
    </member>
    <member name="T:System.RuntimeTypeHandle">
      <summary>
                    Represents a type using an internal metadata token.
                </summary>
    </member>
    <member name="M:System.RuntimeTypeHandle.Equals(System.Object)">
      <summary>
                    Indicates whether the specified object is equal to the current <see cref="T:System.RuntimeTypeHandle" /> structure.
                </summary>
      <returns>true if <paramref name="obj" /> is a <see cref="T:System.RuntimeTypeHandle" /> structure and is equal to the value of this instance; otherwise, false.
                </returns>
      <param name="obj">
                    An object to compare to the current instance.
                </param>
    </member>
    <member name="M:System.RuntimeTypeHandle.Equals(System.RuntimeTypeHandle)">
      <summary>
                    Indicates whether the specified <see cref="T:System.RuntimeTypeHandle" /> structure is equal to the current <see cref="T:System.RuntimeTypeHandle" /> structure.
                </summary>
      <returns>true if the value of <paramref name="handle" /> is equal to the value of this instance; otherwise, false.
                </returns>
      <param name="handle">
                    The <see cref="T:System.RuntimeTypeHandle" /> structure to compare to the current instance.
                </param>
    </member>
    <member name="M:System.RuntimeTypeHandle.GetHashCode">
      <summary>
                    Returns the hash code for the current instance.
                </summary>
      <returns>
                    A 32-bit signed integer hash code.
                </returns>
    </member>
    <member name="M:System.RuntimeTypeHandle.op_Equality(System.RuntimeTypeHandle,System.Object)">
      <summary>
                    Indicates whether a <see cref="T:System.RuntimeTypeHandle" /> structure is equal to an object.
                </summary>
      <returns>true if <paramref name="right" /> is a <see cref="T:System.RuntimeTypeHandle" /> and is equal to <paramref name="left" />; otherwise, false.
                </returns>
      <param name="left">
                    A <see cref="T:System.RuntimeTypeHandle" /> structure to compare to <paramref name="right" />.
                </param>
      <param name="right">
                    An object to compare to <paramref name="left" />.
                </param>
    </member>
    <member name="M:System.RuntimeTypeHandle.op_Inequality(System.RuntimeTypeHandle,System.Object)">
      <summary>
                    Indicates whether a <see cref="T:System.RuntimeTypeHandle" /> structure is not equal to an object.
                </summary>
      <returns>true if <paramref name="right" /> is a <see cref="T:System.RuntimeTypeHandle" /> structure and is not equal to <paramref name="left" />; otherwise, false.
                </returns>
      <param name="left">
                    A <see cref="T:System.RuntimeTypeHandle" /> structure to compare to <paramref name="right" />.
                </param>
      <param name="right">
                    An object to compare to <paramref name="left" />.
                </param>
    </member>
    <member name="T:System.SByte">
      <summary>
                    Represents an 8-bit signed integer.
                </summary>
    </member>
    <member name="M:System.SByte.CompareTo(System.Object)">
      <summary>
                    Compares this instance to a specified object and returns an indication of their relative values.
                </summary>
      <returns>
                    A signed number indicating the relative values of this instance and <paramref name="obj" />.
                
                    Return Value 
                
                    Description 
                
                    Less than zero 
                
                    This instance is less than <paramref name="obj" />. 
                
                    Zero 
                
                    This instance is equal to <paramref name="obj" />. 
                
                    Greater than zero 
                
                    This instance is greater than <paramref name="obj" />.
                
                    -or- 
                <paramref name="obj" /> is null. 
                </returns>
      <param name="obj">
                    An object to compare, or null. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not an <see cref="T:System.SByte" />. 
                </exception>
    </member>
    <member name="M:System.SByte.CompareTo(System.SByte)">
      <summary>
                    Compares this instance to a specified 8-bit signed integer and returns an indication of their relative values.
                </summary>
      <returns>
                    A signed integer that indicates the relative order of this instance and <paramref name="value" />.
                
                    Return Value 
                
                    Description 
                
                    Less than zero 
                
                    This instance is less than <paramref name="value" />. 
                
                    Zero 
                
                    This instance is equal to <paramref name="value" />. 
                
                    Greater than zero 
                
                    This instance is greater than <paramref name="value" />. 
                </returns>
      <param name="value">
                    An 8-bit signed integer to compare. 
                </param>
    </member>
    <member name="M:System.SByte.Equals(System.Object)">
      <summary>
                    Returns a value indicating whether this instance is equal to a specified object.
                </summary>
      <returns>true if <paramref name="obj" /> is an instance of <see cref="T:System.SByte" /> and equals the value of this instance; otherwise, false.
                </returns>
      <param name="obj">
                    An object to compare with this instance. 
                </param>
    </member>
    <member name="M:System.SByte.Equals(System.SByte)">
      <summary>
                    Returns a value indicating whether this instance is equal to a specified <see cref="T:System.SByte" /> value.
                </summary>
      <returns>true if <paramref name="obj" /> has the same value as this instance; otherwise, false.
                </returns>
      <param name="obj">
                    An <see cref="T:System.SByte" /> value to compare to this instance.
                </param>
    </member>
    <member name="M:System.SByte.GetHashCode">
      <summary>
                    Returns the hash code for this instance.
                </summary>
      <returns>
                    A 32-bit signed integer hash code.
                </returns>
    </member>
    <member name="M:System.SByte.GetTypeCode">
      <summary>
                    Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.SByte" />.
                </summary>
      <returns>
                    The enumerated constant, <see cref="F:System.TypeCode.SByte" />.
                </returns>
    </member>
    <member name="F:System.SByte.MaxValue">
      <summary>
                    Represents the largest possible value of <see cref="T:System.SByte" />. This field is constant.
                </summary>
    </member>
    <member name="F:System.SByte.MinValue">
      <summary>
                    Represents the smallest possible value of <see cref="T:System.SByte" />. This field is constant.
                </summary>
    </member>
    <member name="M:System.SByte.Parse(System.String)">
      <summary>
                    Converts the string representation of a number to its 8-bit signed integer equivalent.
                </summary>
      <returns>
                    An 8-bit signed integer equivalent to the number contained in the <paramref name="s" /> parameter.
                </returns>
      <param name="s">
                    A string representing a number to convert. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not consist of an optional sign followed by a sequence of digits (zero through nine). 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.SByte.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
                    Converts the string representation of a number in a specified style to its 8-bit signed integer equivalent.
                </summary>
      <returns>
                    An 8-bit signed integer equivalent to the number specified in <paramref name="s" />.
                </returns>
      <param name="s">
                    A string containing a number to convert. 
                </param>
      <param name="style">
                    A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. 
                
                    -or-
                <paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.
                </exception>
    </member>
    <member name="M:System.SByte.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
                    Converts the string representation of a number that is in a specified style and culture-specific format to its 8-bit signed equivalent.
                </summary>
      <returns>
                    An 8-bit signed byte value that is equivalent to the number specified in the <paramref name="s" /> parameter.
                </returns>
      <param name="s">
                    A string that contains the number to convert.
                </param>
      <param name="style">
                    A bitwise combination of the <see cref="T:System.Globalization.NumberStyles" /> values that indicates the permitted format for <paramref name="s" />.
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about <paramref name="s" />.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.
                
                    -or-
                <paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null.
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format that is compliant with <paramref name="style" />.
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.SByte.Parse(System.String,System.IFormatProvider)">
      <summary>
                    Converts the string representation of a number in a specified culture-specific format to its 8-bit signed integer equivalent.
                </summary>
      <returns>
                    An 8-bit signed integer equivalent to the number specified in <paramref name="s" />.
                </returns>
      <param name="s">
                    A string representing a number to convert. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format.
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />. 
                </summary>
      <returns>true if the value of the current instance is not zero; otherwise, false.
                </returns>
      <param name="provider">
                    This parameter is unused.
                </param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.Byte" />.
                </returns>
      <param name="provider">
                    This parameter is unused.
                </param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.Char" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>
                    This conversion is not supported. Attempting to do so throws an <see cref="T:System.InvalidCastException" />.
                </summary>
      <returns>
                    This conversion is not supported. No value is returned.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
      <exception cref="T:System.InvalidCastException">
                    In all cases. 
                </exception>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.Decimal" />.
                </returns>
      <param name="provider">
                    This parameter is unused.
                </param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.Double" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to an <see cref="T:System.Int16" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to an <see cref="T:System.Int32" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to an <see cref="T:System.Int64" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, unchanged.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.Single" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to an object of type <paramref name="type" />.
                </returns>
      <param name="type">
                    The <see cref="T:System.Type" /> to which to convert this <see cref="T:System.SByte" /> value.
                </param>
      <param name="provider">
                    A <see cref="T:System.IFormatProvider" /> implementation that provides information about the format of the returned value.
                </param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.UInt16" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.UInt32" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.UInt64" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.SByte.ToString">
      <summary>
                    Converts the numeric value of this instance to its equivalent string representation.
                </summary>
      <returns>
                    The string representation of the value of this instance, consisting of a negative sign if the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes.
                </returns>
    </member>
    <member name="M:System.SByte.ToString(System.IFormatProvider)">
      <summary>
                    Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.
                </summary>
      <returns>
                    The string representation of the value of this instance, as specified by <paramref name="provider" />.
                </returns>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information. 
                </param>
    </member>
    <member name="M:System.SByte.ToString(System.String)">
      <summary>
                    Converts the numeric value of this instance to its equivalent string representation, using the specified format.
                </summary>
      <returns>
                    The string representation of the value of this instance as specified by <paramref name="format" />.
                </returns>
      <param name="format">
                    A standard numeric format string or a Custom Numeric Format Strings.
                </param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid. 
                </exception>
    </member>
    <member name="M:System.SByte.ToString(System.String,System.IFormatProvider)">
      <summary>
                    Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.
                </summary>
      <returns>
                    The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.
                </returns>
      <param name="format">
                    A standard numeric format string or a Custom Numeric Format Strings.
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information. 
                </param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid. 
                </exception>
    </member>
    <member name="M:System.SByte.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.SByte@)">
      <summary>
                    Converts the string representation of a number in a specified style and culture-specific format to its 8-bit signed integer equivalent. A return code indicates whether the conversion succeeded or failed.
                </summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.
                </returns>
      <param name="s">
                    A string representing a number to convert. 
                </param>
      <param name="style">
                    A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about <paramref name="s" />. 
                </param>
      <param name="result">
                    When this method returns, contains the 8-bit signed integer value equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not in a format compliant with <paramref name="style" />, or represents a number less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. This parameter is passed uninitialized. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. 
                
                    -or-
                <paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.
                </exception>
    </member>
    <member name="M:System.SByte.TryParse(System.String,System.SByte@)">
      <summary>
                    Converts the string representation of a number to its 8-bit signed integer equivalent. A return value indicates whether the conversion succeeded.
                </summary>
      <returns>true if s was converted successfully; otherwise, false.
                </returns>
      <param name="s">
                    A string that contains a number to convert.
                </param>
      <param name="result">
                    When this method returns, contains the 8-bit signed integer value that is equivalent to the number contained in <paramref name="s" /> if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not in the correct format, or represents a number that is less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. This parameter is passed uninitialized.
                </param>
    </member>
    <member name="T:System.Single">
      <summary>
                    Represents a single-precision floating-point number.
                </summary>
    </member>
    <member name="M:System.Single.CompareTo(System.Object)">
      <summary>
                    Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is greater than, less than, or equal to the value of the specified object.
                </summary>
      <returns>
                    A signed number indicating the relative values of this instance and <paramref name="value" />.
                
                    Return Value 
                
                    Description 
                
                    Less than zero 
                
                    This instance is less than <paramref name="value" />.
                
                    -or- 
                
                    This instance is not a number (<see cref="F:System.Single.NaN" />) and <paramref name="value" /> is a number. 
                
                    Zero 
                
                    This instance is equal to <paramref name="value" />.
                
                    -or- 
                
                    This instance and value are both not a number (<see cref="F:System.Single.NaN" />), <see cref="F:System.Single.PositiveInfinity" />, or <see cref="F:System.Single.NegativeInfinity" />. 
                
                    Greater than zero 
                
                    This instance is greater than <paramref name="value" />.
                
                    -or- 
                
                    This instance is a number and <paramref name="value" /> is not a number (<see cref="F:System.Single.NaN" />).
                
                    -or- 
                <paramref name="value" /> is null. 
                </returns>
      <param name="value">
                    An object to compare, or null. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.Single" />. 
                </exception>
    </member>
    <member name="M:System.Single.CompareTo(System.Single)">
      <summary>
                    Compares this instance to a specified single-precision floating-point number and returns an integer that indicates whether the value of this instance is greater than, less than, or equal to the value of the specified single-precision floating-point number.
                </summary>
      <returns>
                    A signed number indicating the relative values of this instance and <paramref name="value" />.
                
                    Return Value 
                
                    Description 
                
                    Less than zero 
                
                    This instance is less than <paramref name="value" />.
                
                    -or- 
                
                    This instance is not a number (<see cref="F:System.Single.NaN" />) and <paramref name="value" /> is a number. 
                
                    Zero 
                
                    This instance is equal to <paramref name="value" />.
                
                    -or- 
                
                    Both this instance and <paramref name="value" /> are not a number (<see cref="F:System.Single.NaN" />), <see cref="F:System.Single.PositiveInfinity" />, or <see cref="F:System.Single.NegativeInfinity" />. 
                
                    Greater than zero 
                
                    This instance is greater than <paramref name="value" />.
                
                    -or- 
                
                    This instance is a number and <paramref name="value" /> is not a number (<see cref="F:System.Single.NaN" />). 
                </returns>
      <param name="value">
                    A single-precision floating-point number to compare. 
                </param>
    </member>
    <member name="F:System.Single.Epsilon">
      <summary>
                    Represents the smallest positive <see cref="T:System.Single" /> value greater than zero. This field is constant.
                </summary>
    </member>
    <member name="M:System.Single.Equals(System.Object)">
      <summary>
                    Returns a value indicating whether this instance is equal to a specified object.
                </summary>
      <returns>true if <paramref name="obj" /> is an instance of <see cref="T:System.Single" /> and equals the value of this instance; otherwise, false.
                </returns>
      <param name="obj">
                    An object to compare with this instance. 
                </param>
    </member>
    <member name="M:System.Single.Equals(System.Single)">
      <summary>
                    Returns a value indicating whether this instance and a specified <see cref="T:System.Single" /> object represent the same value.
                </summary>
      <returns>true if <paramref name="obj" /> is equal to this instance; otherwise, false.
                </returns>
      <param name="obj">
                    A <see cref="T:System.Single" /> object to compare to this instance.
                </param>
    </member>
    <member name="M:System.Single.GetHashCode">
      <summary>
                    Returns the hash code for this instance.
                </summary>
      <returns>
                    A 32-bit signed integer hash code.
                </returns>
    </member>
    <member name="M:System.Single.GetTypeCode">
      <summary>
                    Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Single" />.
                </summary>
      <returns>
                    The enumerated constant, <see cref="F:System.TypeCode.Single" />.
                </returns>
    </member>
    <member name="M:System.Single.IsInfinity(System.Single)">
      <summary>
                    Returns a value indicating whether the specified number evaluates to negative or positive infinity.
                </summary>
      <returns>true if <paramref name="f" /> evaluates to <see cref="F:System.Single.PositiveInfinity" /> or <see cref="F:System.Single.NegativeInfinity" />; otherwise, false.
                </returns>
      <param name="f">
                    A single-precision floating-point number. 
                </param>
    </member>
    <member name="M:System.Single.IsNaN(System.Single)">
      <summary>
                    Returns a value indicating whether the specified number evaluates to not a number (<see cref="F:System.Single.NaN" />).
                </summary>
      <returns>true if <paramref name="f" /> evaluates to not a number (<see cref="F:System.Single.NaN" />); otherwise, false.
                </returns>
      <param name="f">
                    A single-precision floating-point number. 
                </param>
    </member>
    <member name="M:System.Single.IsNegativeInfinity(System.Single)">
      <summary>
                    Returns a value indicating whether the specified number evaluates to negative infinity.
                </summary>
      <returns>true if <paramref name="f" /> evaluates to <see cref="F:System.Single.NegativeInfinity" />; otherwise, false.
                </returns>
      <param name="f">
                    A single-precision floating-point number. 
                </param>
    </member>
    <member name="M:System.Single.IsPositiveInfinity(System.Single)">
      <summary>
                    Returns a value indicating whether the specified number evaluates to positive infinity.
                </summary>
      <returns>true if <paramref name="f" /> evaluates to <see cref="F:System.Single.PositiveInfinity" />; otherwise, false.
                </returns>
      <param name="f">
                    A single-precision floating-point number. 
                </param>
    </member>
    <member name="F:System.Single.MaxValue">
      <summary>
                    Represents the largest possible value of <see cref="T:System.Single" />. This field is constant.
                </summary>
    </member>
    <member name="F:System.Single.MinValue">
      <summary>
                    Represents the smallest possible value of <see cref="T:System.Single" />. This field is constant.
                </summary>
    </member>
    <member name="F:System.Single.NaN">
      <summary>
                    Represents not a number (NaN). This field is constant.
                </summary>
    </member>
    <member name="F:System.Single.NegativeInfinity">
      <summary>
                    Represents negative infinity. This field is constant.
                </summary>
    </member>
    <member name="M:System.Single.Parse(System.String)">
      <summary>
                    Converts the string representation of a number to its single-precision floating-point number equivalent.
                </summary>
      <returns>
                    A single-precision floating-point number equivalent to the numeric value or symbol specified in <paramref name="s" />.
                </returns>
      <param name="s">
                    A string representing a number to convert. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not a number in a valid format. 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Single.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
                    Converts the string representation of a number in a specified style to its single-precision floating-point number equivalent.
                </summary>
      <returns>
                    A single-precision floating-point number equivalent to the numeric value or symbol specified in <paramref name="s" />.
                </returns>
      <param name="s">
                    A string representing a number to convert. 
                </param>
      <param name="style">
                    A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Float" /> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not a number in a valid format. 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. 
                
                    -or-
                <paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.
                </exception>
    </member>
    <member name="M:System.Single.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
                    Converts the string representation of a number in a specified style and culture-specific format to its single-precision floating-point number equivalent.
                </summary>
      <returns>
                    A single-precision floating-point number equivalent to the numeric value or symbol specified in <paramref name="s" />.
                </returns>
      <param name="s">
                    A string representing a number to convert. 
                </param>
      <param name="style">
                    A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Float" /> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not a numeric value. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. 
                
                    -or-
                <paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.
                </exception>
    </member>
    <member name="M:System.Single.Parse(System.String,System.IFormatProvider)">
      <summary>
                    Converts the string representation of a number in a specified culture-specific format to its single-precision floating-point number equivalent.
                </summary>
      <returns>
                    A single-precision floating-point number equivalent to the numeric value or symbol specified in <paramref name="s" />.
                </returns>
      <param name="s">
                    A string representing a number to convert. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not a number in a valid format. 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />. 
                </exception>
    </member>
    <member name="F:System.Single.PositiveInfinity">
      <summary>
                    Represents positive infinity. This field is constant.
                </summary>
    </member>
    <member name="M:System.Single.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />. 
                </summary>
      <returns>true if the value of the current instance is not zero; otherwise, false.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.Byte" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>
                    This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />. 
                </summary>
      <returns>
                    This conversion is not supported. No value is returned.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
      <exception cref="T:System.InvalidCastException">
                    In all cases.
                </exception>
    </member>
    <member name="M:System.Single.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>
                    This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.
                </summary>
      <returns>
                    This conversion is not supported. No value is returned.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
      <exception cref="T:System.InvalidCastException">
                    In all cases.
                </exception>
    </member>
    <member name="M:System.Single.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.Decimal" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.Double" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to an <see cref="T:System.Int16" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to an <see cref="T:System.Int32" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to an <see cref="T:System.Int64" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to an <see cref="T:System.SByte" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, unchanged.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to <paramref name="type" />.
                </returns>
      <param name="type">
                    The type to which to convert this <see cref="T:System.Single" /> value.
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> implementation that supplies information about the format of the returned value.
                </param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.UInt16" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.UInt32" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.UInt64" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.Single.ToString">
      <summary>
                    Converts the numeric value of this instance to its equivalent string representation.
                </summary>
      <returns>
                    The string representation of the value of this instance.
                </returns>
    </member>
    <member name="M:System.Single.ToString(System.IFormatProvider)">
      <summary>
                    Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.
                </summary>
      <returns>
                    The string representation of the value of this instance as specified by <paramref name="provider" />.
                </returns>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information. 
                </param>
    </member>
    <member name="M:System.Single.ToString(System.String)">
      <summary>
                    Converts the numeric value of this instance to its equivalent string representation, using the specified format.
                </summary>
      <returns>
                    The string representation of the value of this instance as specified by <paramref name="format" />.
                </returns>
      <param name="format">
                    A standard numeric format string or a Custom Numeric Format Strings.
                </param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid. 
                </exception>
    </member>
    <member name="M:System.Single.ToString(System.String,System.IFormatProvider)">
      <summary>
                    Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.
                </summary>
      <returns>
                    The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.
                </returns>
      <param name="format">
                    A standard numeric format string or a Custom Numeric Format Strings.
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> implementation that supplies culture-specific formatting information. 
                </param>
    </member>
    <member name="M:System.Single.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Single@)">
      <summary>
                    Converts the string representation of a number in a specified style and culture-specific format to its single-precision floating-point number equivalent. A return code indicates whether the conversion succeeded or failed.
                </summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.
                </returns>
      <param name="s">
                    A string representing a number to convert. 
                </param>
      <param name="style">
                    A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Float" /> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about <paramref name="s" />. 
                </param>
      <param name="result">
                    When this method returns, contains the single-precision floating-point number equivalent to the numeric value or symbol contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not in a format compliant with <paramref name="style" />, represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />, or <paramref name="style" /> is not a valid combination of <see cref="T:System.Globalization.NumberStyles" /> enumerated constants. This parameter is passed uninitialized. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. 
                
                    -or-
                <paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.
                </exception>
    </member>
    <member name="M:System.Single.TryParse(System.String,System.Single@)">
      <summary>
                    Converts the string representation of a number to its single-precision floating-point number equivalent. A return code indicates whether the conversion succeeded or failed.
                </summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.
                </returns>
      <param name="s">
                    A string representing a number to convert. 
                </param>
      <param name="result">
                    When this method returns, contains single-precision floating-point number equivalent to the numeric value or symbol contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not a number in a valid format, or represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />. This parameter is passed uninitialized. 
                </param>
    </member>
    <member name="T:System.StackOverflowException">
      <summary>
                    The exception that is thrown when the execution stack overflows because it contains too many nested method calls. This class cannot be inherited.
                </summary>
    </member>
    <member name="M:System.StackOverflowException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.StackOverflowException" /> class, setting the <see cref="P:System.Exception.Message" /> property of the new instance to a system-supplied message that describes the error, such as "The requested operation caused a stack overflow." This message takes into account the current system culture.
                </summary>
    </member>
    <member name="M:System.StackOverflowException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.StackOverflowException" /> class with a specified error message.
                </summary>
      <param name="message">
                    A <see cref="T:System.String" /> that describes the error. The content of message is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture. 
                </param>
    </member>
    <member name="M:System.StackOverflowException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.StackOverflowException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
                </summary>
      <param name="message">
                    The error message that explains the reason for the exception. 
                </param>
      <param name="innerException">
                    The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. 
                </param>
    </member>
    <member name="T:System.STAThreadAttribute">
      <summary>
                    Indicates that the COM threading model for an application is single-threaded apartment (STA). 
                </summary>
    </member>
    <member name="M:System.STAThreadAttribute.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.STAThreadAttribute" /> class.
                </summary>
    </member>
    <member name="T:System.String">
      <summary>
                    Represents text as a series of Unicode characters.
                </summary>
    </member>
    <member name="M:System.String.#ctor(System.Char*)">
      <summary>[SECURITY CRITICAL] 
                    Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a specified pointer to an array of Unicode characters.
                </summary>
      <param name="value">
                    A pointer to a null terminated array of Unicode characters. 
                </param>
    </member>
    <member name="M:System.String.#ctor(System.Char*,System.Int32,System.Int32)">
      <summary>[SECURITY CRITICAL] 
                    Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a specified pointer to an array of Unicode characters, a starting character position within that array, and a length.
                </summary>
      <param name="value">
                    A pointer to an array of Unicode characters. 
                </param>
      <param name="startIndex">
                    The starting position within <paramref name="value" />. 
                </param>
      <param name="length">
                    The number of characters within <paramref name="value" /> to use. 
                </param>
    </member>
    <member name="M:System.String.#ctor(System.Char,System.Int32)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a specified Unicode character repeated a specified number of times.
                </summary>
      <param name="c">
                    A Unicode character. 
                </param>
      <param name="count">
                    The number of times <paramref name="c" /> occurs. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than zero. 
                </exception>
    </member>
    <member name="M:System.String.#ctor(System.Char[])">
      <summary>
                    Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by an array of Unicode characters.
                </summary>
      <param name="value">
                    An array of Unicode characters. 
                </param>
    </member>
    <member name="M:System.String.#ctor(System.Char[],System.Int32,System.Int32)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by an array of Unicode characters, a starting character position within that array, and a length.
                </summary>
      <param name="value">
                    An array of Unicode characters. 
                </param>
      <param name="startIndex">
                    The starting position within <paramref name="value" />. 
                </param>
      <param name="length">
                    The number of characters within <paramref name="value" /> to use. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> or <paramref name="length" /> is less than zero.
                
                    -or- 
                
                    The sum of <paramref name="startIndex" /> and <paramref name="length" /> is greater than the number of elements in <paramref name="value" />. 
                </exception>
    </member>
    <member name="M:System.String.#ctor(System.SByte*)">
      <summary>[SECURITY CRITICAL] 
                    Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a pointer to an array of 8-bit signed integers.
                </summary>
      <param name="value">
                    A pointer to a null terminated array of 8-bit signed integers. 
                </param>
    </member>
    <member name="P:System.String.Chars(System.Int32)">
      <summary>
                    Gets the character at a specified character position in the current <see cref="T:System.String" /> object.
                </summary>
      <returns>
                    A Unicode character.
                </returns>
      <param name="index">
                    A character position in the current <see cref="T:System.String" /> object. 
                </param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is greater than or equal to the length of this object or less than zero. 
                </exception>
    </member>
    <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
      <summary>
                    Performs a culture-sensitive comparison of substrings that are extracted from two specified <see cref="T:System.String" /> objects and returns an integer that indicates their relationship to one another in the sort order.
                </summary>
      <returns>
                    A 32-bit signed integer indicating the lexical relationship between the two comparands.
                
                    Value 
                
                    Condition 
                
                    Less than zero 
                
                    The substring in <paramref name="strA" /> is less than the substring in <paramref name="strB" />. 
                
                    Zero 
                
                    The substrings are equal, or <paramref name="length" /> is zero. 
                
                    Greater than zero 
                
                    The substring in <paramref name="strA" /> is greater than the substring in <paramref name="strB" />. 
                </returns>
      <param name="strA">
                    The first <see cref="T:System.String" />. 
                </param>
      <param name="indexA">
                    The position of the substring within <paramref name="strA" />. 
                </param>
      <param name="strB">
                    The second <see cref="T:System.String" />. 
                </param>
      <param name="indexB">
                    The position of the substring within <paramref name="strB" />. 
                </param>
      <param name="length">
                    The maximum number of characters in the substrings to compare. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="indexA" /> is greater than <paramref name="strA" />.<see cref="P:System.String.Length" />.
                
                    -or- 
                <paramref name="indexB" /> is greater than <paramref name="strB" />.<see cref="P:System.String.Length" />.
                
                    -or- 
                <paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative. 
                
                    -or-
                
                    Either <paramref name="indexA" /> or <paramref name="indexB" /> is null, and <paramref name="length" /> is greater than zero.
                </exception>
    </member>
    <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
      <summary>
                    Compares substrings of two specified <see cref="T:System.String" /> objects using the specified comparison options and culture-specific information to influence the comparison, and returns an integer that indicates the relationship of the two substrings to one another in the sort order. 
                </summary>
      <returns>
                    An integer that indicates the lexical relationship between the two substrings.
                
                    Value
                
                    Condition
                
                    Less than zero
                
                    The substring in <paramref name="strA" /> is less than the substring in <paramref name="strB" />.
                
                    Zero
                
                    The substrings are equal or <paramref name="length" /> is zero.
                
                    Greater than zero
                
                    The substring in <paramref name="strA" /> is greater than the substring in <paramref name="strB" />.
                </returns>
      <param name="strA">
                    The first string.   
                </param>
      <param name="indexA">
                    The starting position of the substring within <paramref name="strA" />.
                </param>
      <param name="strB">
                    The second string.
                </param>
      <param name="indexB">
                    The starting position of the substring within <paramref name="strB" />.
                </param>
      <param name="length">
                    The maximum number of characters in the substrings to compare.
                </param>
      <param name="culture">
                    The culture that supplies culture-specific comparison information.
                </param>
      <param name="options">
                    Options, such as ignoring case or symbols, to use when performing the comparison.  
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> is not a <see cref="T:System.Globalization.CompareOptions" /> value.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="indexA" /> is greater than strA.Length.
                
                    -or-
                <paramref name="indexB" /> is greater than strB.Length.
                
                    -or-
                <paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative.
                
                    -or-
                
                    Either <paramref name="strA" /> or <paramref name="strB" /> is null, and <paramref name="length" /> is greater than zero.
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> is null.
                </exception>
    </member>
    <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
      <summary>
                    Compares substrings of two specified <see cref="T:System.String" /> objects using the specified string comparison options and returns an integer that indicates their relationship to one another in the sort order.
                </summary>
      <returns>
                    A 32-bit signed integer indicating the lexical relationship between the two comparands.
                
                    Value 
                
                    Condition 
                
                    Less than zero 
                
                    The substring in the <paramref name="strA" /> parameter is less than the substring in the <paramref name="strB" /> parameter.
                
                    Zero 
                
                    The substrings are equal, or the <paramref name="length" /> parameter is zero. 
                
                    Greater than zero 
                
                    The substring in <paramref name="strA" /> is greater than the substring in <paramref name="strB" />. 
                </returns>
      <param name="strA">
                    The first <see cref="T:System.String" /> object. 
                </param>
      <param name="indexA">
                    The position of the substring within <paramref name="strA" />. 
                </param>
      <param name="strB">
                    The second <see cref="T:System.String" /> object.
                </param>
      <param name="indexB">
                    The position of the substring within <paramref name="strB" />. 
                </param>
      <param name="length">
                    The maximum number of characters in the substrings to compare. 
                </param>
      <param name="comparisonType">
                    One of the <see cref="T:System.StringComparison" /> values. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="indexA" /> is greater than <paramref name="strA" />.<see cref="P:System.String.Length" />.
                
                    -or- 
                <paramref name="indexB" /> is greater than <paramref name="strB" />.<see cref="P:System.String.Length" />.
                
                    -or- 
                <paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative. 
                
                    -or-
                
                    Either <paramref name="indexA" /> or <paramref name="indexB" /> is null, and <paramref name="length" /> is greater than zero.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value. 
                </exception>
    </member>
    <member name="M:System.String.Compare(System.String,System.String)">
      <summary>
                    Performs a culture-sensitive comparison of two specified <see cref="T:System.String" /> objects and returns an integer that indicates their relationship to one another in the sort order.
                </summary>
      <returns>
                    A 32-bit signed integer indicating the lexical relationship between the two comparands.
                
                    Value 
                
                    Condition 
                
                    Less than zero 
                <paramref name="strA" /> is less than <paramref name="strB" />. 
                
                    Zero 
                <paramref name="strA" /> equals <paramref name="strB" />. 
                
                    Greater than zero 
                <paramref name="strA" /> is greater than <paramref name="strB" />. 
                </returns>
      <param name="strA">
                    The first <see cref="T:System.String" />. 
                </param>
      <param name="strB">
                    The second <see cref="T:System.String" />. 
                </param>
    </member>
    <member name="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
      <summary>
                    Compares two specified <see cref="T:System.String" /> objects using the specified comparison options and culture-specific information to influence the comparison, and returns an integer that indicates the relationship of the two strings to one another in the sort order.
                </summary>
      <returns>
                    A 32-bit signed integer that indicates the lexical relationship between <paramref name="strA" /> and <paramref name="strB" />.
                
                    Value
                
                    Condition
                
                    Less than zero
                <paramref name="strA" /> is less than <paramref name="strB" />.
                
                    Zero
                <paramref name="strA" /> equals <paramref name="strB" />.
                
                    Greater than zero
                <paramref name="strA" /> is greater than <paramref name="strB" />.
                </returns>
      <param name="strA">
                    The first string.  
                </param>
      <param name="strB">
                    The second string.
                </param>
      <param name="culture">
                    The culture that supplies culture-specific comparison information.
                </param>
      <param name="options">
                    Options, such as ignoring case or symbols, to use when performing the comparison.  
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> is not a <see cref="T:System.Globalization.CompareOptions" /> value.
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> is null.
                </exception>
    </member>
    <member name="M:System.String.Compare(System.String,System.String,System.StringComparison)">
      <summary>
                    Compares two specified <see cref="T:System.String" /> objects using the specified string comparison options and returns an integer that indicates their relationship to one another in the sort order.
                </summary>
      <returns>
                    A 32-bit signed integer indicating the lexical relationship between the two comparands.
                
                    Value 
                
                    Condition 
                
                    Less than zero 
                <paramref name="strA" /> is less than <paramref name="strB" />. 
                
                    Zero 
                <paramref name="strA" /> equals <paramref name="strB" />. 
                
                    Greater than zero 
                <paramref name="strA" /> is greater than <paramref name="strB" />. 
                </returns>
      <param name="strA">
                    The first <see cref="T:System.String" /> object.
                </param>
      <param name="strB">
                    The second <see cref="T:System.String" /> object. 
                </param>
      <param name="comparisonType">
                    One of the <see cref="T:System.StringComparison" /> values. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value. 
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.StringComparison" /> is not supported.
                </exception>
    </member>
    <member name="M:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)">
      <summary>
                    Compares substrings of two specified <see cref="T:System.String" /> objects by evaluating the numeric values of the corresponding <see cref="T:System.Char" /> objects in each substring. 
                </summary>
      <returns>
                    A 32-bit signed integer indicating the lexical relationship between the two comparands.
                
                    Value
                
                    Condition 
                
                    Less than zero 
                
                    The substring in <paramref name="strA" /> is less than the substring in <paramref name="strB" />. 
                
                    Zero 
                
                    The substrings are equal, or <paramref name="length" /> is zero. 
                
                    Greater than zero 
                
                    The substring in <paramref name="strA" /> is greater than the substring in <paramref name="strB" />. 
                </returns>
      <param name="strA">
                    The first <see cref="T:System.String" />. 
                </param>
      <param name="indexA">
                    The starting index of the substring in <paramref name="strA" />. 
                </param>
      <param name="strB">
                    The second <see cref="T:System.String" />. 
                </param>
      <param name="indexB">
                    The starting index of the substring in <paramref name="strB" />. 
                </param>
      <param name="length">
                    The maximum number of characters in the substrings to compare. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="indexA" /> is greater than <paramref name="strA" />. <see cref="P:System.String.Length" />.
                
                    -or- 
                <paramref name="indexB" /> is greater than <paramref name="strB" />. <see cref="P:System.String.Length" />.
                
                    -or- 
                <paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative. 
                </exception>
    </member>
    <member name="M:System.String.CompareOrdinal(System.String,System.String)">
      <summary>
                    Compares two specified <see cref="T:System.String" /> objects by evaluating the numeric values of the corresponding <see cref="T:System.Char" /> objects in each string and returns an integer that indicates their relative position in the sort order.
                </summary>
      <returns>
                    An integer indicating the lexical relationship between the two comparands.
                
                    Value
                
                    Condition 
                
                    Less than zero 
                <paramref name="strA" /> is less than <paramref name="strB" />. 
                
                    Zero 
                <paramref name="strA" /> and <paramref name="strB" /> are equal. 
                
                    Greater than zero 
                <paramref name="strA" /> is greater than <paramref name="strB" />. 
                </returns>
      <param name="strA">
                    The first <see cref="T:System.String" />. 
                </param>
      <param name="strB">
                    The second <see cref="T:System.String" />. 
                </param>
    </member>
    <member name="M:System.String.CompareTo(System.Object)">
      <summary>
                    Compares this instance with a specified <see cref="T:System.Object" /> and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified <see cref="T:System.Object" />.
                </summary>
      <returns>
                    A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the <paramref name="value" /> parameter.
                
                    Value 
                
                    Condition 
                
                    Less than zero 
                
                    This instance precedes <paramref name="value" />. 
                
                    Zero 
                
                    This instance has the same position in the sort order as <paramref name="value" />. 
                
                    Greater than zero 
                
                    This instance follows <paramref name="value" />.
                
                    -or- 
                <paramref name="value" /> is null. 
                </returns>
      <param name="value">
                    An <see cref="T:System.Object" /> that evaluates to a String. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.String" />. 
                </exception>
    </member>
    <member name="M:System.String.CompareTo(System.String)">
      <summary>
                    Compares this instance with a specified <see cref="T:System.String" /> object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified <see cref="T:System.String" />.
                </summary>
      <returns>
                    A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the <paramref name="value" /> parameter.
                
                    Value 
                
                    Condition 
                
                    Less than zero 
                
                    This instance precedes <paramref name="strB" />. 
                
                    Zero 
                
                    This instance has the same position in the sort order as <paramref name="strB" />. 
                
                    Greater than zero 
                
                    This instance follows <paramref name="strB" />.
                
                    -or- 
                <paramref name="strB" /> is null. 
                </returns>
      <param name="strB">
                    A <see cref="T:System.String" />. 
                </param>
    </member>
    <member name="M:System.String.Concat(System.Object)">
      <summary>
                    Creates the <see cref="T:System.String" /> representation of a specified object.
                </summary>
      <returns>
                    The <see cref="T:System.String" /> representation of the value of <paramref name="arg0" />.
                </returns>
      <param name="arg0">
                    An <see cref="T:System.Object" /> or null. 
                </param>
    </member>
    <member name="M:System.String.Concat(System.Object,System.Object)">
      <summary>
                    Concatenates the <see cref="T:System.String" /> representations of two specified objects.
                </summary>
      <returns>
                    The concatenated <see cref="T:System.String" /> representations of the values of <paramref name="arg0" /> and <paramref name="arg1" />.
                </returns>
      <param name="arg0">
                    The first <see cref="T:System.Object" />. 
                </param>
      <param name="arg1">
                    The second <see cref="T:System.Object" />. 
                </param>
    </member>
    <member name="M:System.String.Concat(System.Object,System.Object,System.Object)">
      <summary>
                    Concatenates the <see cref="T:System.String" /> representations of three specified objects.
                </summary>
      <returns>
                    The concatenated <see cref="T:System.String" /> representations of the values of <paramref name="arg0" />, <paramref name="arg1" />, and <paramref name="arg2" />.
                </returns>
      <param name="arg0">
                    The first <see cref="T:System.Object" />. 
                </param>
      <param name="arg1">
                    The second <see cref="T:System.Object" />. 
                </param>
      <param name="arg2">
                    The third <see cref="T:System.Object" />. 
                </param>
    </member>
    <member name="M:System.String.Concat(System.Object[])">
      <summary>
                    Concatenates the <see cref="T:System.String" /> representations of the elements in a specified <see cref="T:System.Object" /> array.
                </summary>
      <returns>
                    The concatenated <see cref="T:System.String" /> representations of the values of the elements in <paramref name="args" />.
                </returns>
      <param name="args">
                    An <see cref="T:System.Object" /> array. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="args" /> is null. 
                </exception>
      <exception cref="T:System.OutOfMemoryException">
                    Out of memory.
                </exception>
    </member>
    <member name="M:System.String.Concat(System.String,System.String)">
      <summary>
                    Concatenates two specified instances of <see cref="T:System.String" />.
                </summary>
      <returns>
                    The concatenation of <paramref name="str0" /> and <paramref name="str1" />.
                </returns>
      <param name="str0">
                    The first <see cref="T:System.String" />. 
                </param>
      <param name="str1">
                    The second <see cref="T:System.String" />. 
                </param>
    </member>
    <member name="M:System.String.Concat(System.String,System.String,System.String)">
      <summary>
                    Concatenates three specified instances of <see cref="T:System.String" />.
                </summary>
      <returns>
                    The concatenation of <paramref name="str0" />, <paramref name="str1" />, and <paramref name="str2" />.
                </returns>
      <param name="str0">
                    The first <see cref="T:System.String" />. 
                </param>
      <param name="str1">
                    The second <see cref="T:System.String" />. 
                </param>
      <param name="str2">
                    The third <see cref="T:System.String" />. 
                </param>
    </member>
    <member name="M:System.String.Concat(System.String,System.String,System.String,System.String)">
      <summary>
                    Concatenates four specified instances of <see cref="T:System.String" />.
                </summary>
      <returns>
                    The concatenation of <paramref name="str0" />, <paramref name="str1" />, <paramref name="str2" />, and <paramref name="str3" />.
                </returns>
      <param name="str0">
                    The first <see cref="T:System.String" />. 
                </param>
      <param name="str1">
                    The second <see cref="T:System.String" />. 
                </param>
      <param name="str2">
                    The third <see cref="T:System.String" />. 
                </param>
      <param name="str3">
                    The fourth <see cref="T:System.String" />. 
                </param>
    </member>
    <member name="M:System.String.Concat(System.String[])">
      <summary>
                    Concatenates the elements of a specified <see cref="T:System.String" /> array.
                </summary>
      <returns>
                    The concatenated elements of <paramref name="values" />.
                </returns>
      <param name="values">
                    An array of <see cref="T:System.String" /> instances. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is null. 
                </exception>
      <exception cref="T:System.OutOfMemoryException">
                    Out of memory.
                </exception>
    </member>
    <member name="M:System.String.Contains(System.String)">
      <summary>
                    Returns a value indicating whether the specified <see cref="T:System.String" /> object occurs within this string.
                </summary>
      <returns>true if the <paramref name="value" /> parameter occurs within this string, or if <paramref name="value" /> is the empty string (""); otherwise, false.
                </returns>
      <param name="value">
                    The <see cref="T:System.String" /> object to seek. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. 
                </exception>
    </member>
    <member name="M:System.String.Copy(System.String)">
      <summary>
                    Creates a new instance of <see cref="T:System.String" /> with the same value as a specified <see cref="T:System.String" />.
                </summary>
      <returns>
                    A new <see cref="T:System.String" /> with the same value as <paramref name="str" />.
                </returns>
      <param name="str">
                    The <see cref="T:System.String" /> to copy. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> is null. 
                </exception>
    </member>
    <member name="M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
      <summary>
                    Copies a specified number of characters from a specified position in this instance to a specified position in an array of Unicode characters.
                </summary>
      <param name="sourceIndex">
                    A character position in this instance. 
                </param>
      <param name="destination">
                    An array of Unicode characters. 
                </param>
      <param name="destinationIndex">
                    An array element in <paramref name="destination" />. 
                </param>
      <param name="count">
                    The number of characters in this instance to copy to <paramref name="destination" />. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceIndex" />, <paramref name="destinationIndex" />, or <paramref name="count" /> is negative 
                
                    -or- 
                <paramref name="count" /> is greater than the length of the substring from <paramref name="startIndex" /> to the end of this instance 
                
                    -or- 
                <paramref name="count" /> is greater than the length of the subarray from <paramref name="destinationIndex" /> to the end of <paramref name="destination" /></exception>
    </member>
    <member name="F:System.String.Empty">
      <summary>
                    Represents the empty string. This field is read-only.
                </summary>
    </member>
    <member name="M:System.String.EndsWith(System.String)">
      <summary>
                    Determines whether the end of this instance matches the specified string.
                </summary>
      <returns>true if <paramref name="value" /> matches the end of this instance; otherwise, false.
                </returns>
      <param name="value">
                    A <see cref="T:System.String" /> to compare to. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. 
                </exception>
    </member>
    <member name="M:System.String.EndsWith(System.String,System.StringComparison)">
      <summary>
                    Determines whether the end of this string matches the specified string when compared using the specified comparison option.
                </summary>
      <returns>true if the <paramref name="value" /> parameter matches the end of this string; otherwise, false.
                </returns>
      <param name="value">
                    A <see cref="T:System.String" /> object to compare to. 
                </param>
      <param name="comparisonType">
                    One of the <see cref="T:System.StringComparison" /> values that determines how this string and <paramref name="value" /> are compared. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value.
                </exception>
    </member>
    <member name="M:System.String.Equals(System.Object)">
      <summary>
                    Determines whether this instance of <see cref="T:System.String" /> and a specified object, which must also be a <see cref="T:System.String" /> object, have the same value.
                </summary>
      <returns>true if <paramref name="obj" /> is a <see cref="T:System.String" /> and its value is the same as this instance; otherwise, false.
                </returns>
      <param name="obj">
                    An <see cref="T:System.Object" />. 
                </param>
      <exception cref="T:System.NullReferenceException">
                    This instance is null. 
                </exception>
    </member>
    <member name="M:System.String.Equals(System.String)">
      <summary>
                    Determines whether this instance and another specified <see cref="T:System.String" /> object have the same value.
                </summary>
      <returns>true if the value of the <paramref name="value" /> parameter is the same as this instance; otherwise, false.
                </returns>
      <param name="value">
                    A <see cref="T:System.String" />. 
                </param>
      <exception cref="T:System.NullReferenceException">
                    This instance is null. 
                </exception>
    </member>
    <member name="M:System.String.Equals(System.String,System.String)">
      <summary>
                    Determines whether two specified <see cref="T:System.String" /> objects have the same value.
                </summary>
      <returns>true if the value of <paramref name="a" /> is the same as the value of <paramref name="b" />; otherwise, false.
                </returns>
      <param name="a">
                    A <see cref="T:System.String" /> or null. 
                </param>
      <param name="b">
                    A <see cref="T:System.String" /> or null. 
                </param>
    </member>
    <member name="M:System.String.Equals(System.String,System.String,System.StringComparison)">
      <summary>
                    Determines whether two specified <see cref="T:System.String" /> objects have the same value. A parameter specifies the culture, case, and sort rules used in the comparison.
                </summary>
      <returns>true if the value of the <paramref name="a" /> parameter is equal to the value of the <paramref name="b" /> parameter; otherwise, false.
                </returns>
      <param name="a">
                    A <see cref="T:System.String" /> object or null. 
                </param>
      <param name="b">
                    A <see cref="T:System.String" /> object or null. 
                </param>
      <param name="comparisonType">
                    One of the <see cref="T:System.StringComparison" /> values. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value. 
                </exception>
    </member>
    <member name="M:System.String.Equals(System.String,System.StringComparison)">
      <summary>
                    Determines whether this string and a specified <see cref="T:System.String" /> object have the same value. A parameter specifies the culture, case, and sort rules used in the comparison.
                </summary>
      <returns>true if the value of the <paramref name="value" /> parameter is the same as this string; otherwise, false.
                </returns>
      <param name="value">
                    A <see cref="T:System.String" /> object.
                </param>
      <param name="comparisonType">
                    One of the <see cref="T:System.StringComparison" /> values. 
                </param>
      <exception cref="T:System.NullReferenceException">
                    This string is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value. 
                </exception>
    </member>
    <member name="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])">
      <summary>
                    Replaces the format item in a specified <see cref="T:System.String" /> with the text equivalent of the value of a corresponding <see cref="T:System.Object" /> instance in a specified array. A specified parameter supplies culture-specific formatting information.
                </summary>
      <returns>
                    A copy of <paramref name="format" /> in which the format items have been replaced by the <see cref="T:System.String" /> equivalent of the corresponding instances of <see cref="T:System.Object" /> in <paramref name="args" />.
                </returns>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information. 
                </param>
      <param name="format">
                    A composite format string. 
                </param>
      <param name="args">
                    An <see cref="T:System.Object" /> array containing zero or more objects to format. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> or <paramref name="args" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.
                
                    -or- 
                
                    The number indicating an argument to format is less than zero, or greater than or equal to the length of the <paramref name="args" /> array. 
                </exception>
    </member>
    <member name="M:System.String.Format(System.String,System.Object)">
      <summary>
                    Replaces the format item in a specified <see cref="T:System.String" /> with the text equivalent of the value of a specified <see cref="T:System.Object" /> instance.
                </summary>
      <returns>
                    A copy of <paramref name="format" /> in which the first format item has been replaced by the <see cref="T:System.String" /> equivalent of <paramref name="arg0" />.
                </returns>
      <param name="format">
                    A composite format string. 
                </param>
      <param name="arg0">
                    An <see cref="T:System.Object" /> to format. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
                    The format item in <paramref name="format" /> is invalid.
                
                    -or- 
                
                    The number indicating an argument to format is less than zero, or greater than or equal to the number of specified objects to format. 
                </exception>
    </member>
    <member name="M:System.String.Format(System.String,System.Object,System.Object)">
      <summary>
                    Replaces the format item in a specified <see cref="T:System.String" /> with the text equivalent of the value of two specified <see cref="T:System.Object" /> instances.
                </summary>
      <returns>
                    A copy of <paramref name="format" /> in which the first and second format items have been replaced by the <see cref="T:System.String" /> equivalents of <paramref name="arg0" /> and <paramref name="arg1" />.
                </returns>
      <param name="format">
                    A composite format string. 
                </param>
      <param name="arg0">
                    The first <see cref="T:System.Object" /> to format. 
                </param>
      <param name="arg1">
                    The second <see cref="T:System.Object" /> to format. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.
                
                    -or- 
                
                    The number indicating an argument to format is less than zero, or greater than or equal to the number of specified objects to format. 
                </exception>
    </member>
    <member name="M:System.String.Format(System.String,System.Object,System.Object,System.Object)">
      <summary>
                    Replaces the format item in a specified <see cref="T:System.String" /> with the text equivalent of the value of three specified <see cref="T:System.Object" /> instances.
                </summary>
      <returns>
                    A copy of <paramref name="format" /> in which the first, second, and third format items have been replaced by the <see cref="T:System.String" /> equivalents of <paramref name="arg0" />, <paramref name="arg1" />, and <paramref name="arg2" />.
                </returns>
      <param name="format">
                    A composite format string. 
                </param>
      <param name="arg0">
                    The first <see cref="T:System.Object" /> to format. 
                </param>
      <param name="arg1">
                    The second <see cref="T:System.Object" /> to format. 
                </param>
      <param name="arg2">
                    The third <see cref="T:System.Object" /> to format. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.
                
                    -or- 
                
                    The number indicating an argument to format is less than zero, or greater than or equal to the number of specified objects to format. 
                </exception>
    </member>
    <member name="M:System.String.Format(System.String,System.Object[])">
      <summary>
                    Replaces the format item in a specified <see cref="T:System.String" /> with the text equivalent of the value of a corresponding <see cref="T:System.Object" /> instance in a specified array.
                </summary>
      <returns>
                    A copy of <paramref name="format" /> in which the format items have been replaced by the <see cref="T:System.String" /> equivalent of the corresponding instances of <see cref="T:System.Object" /> in <paramref name="args" />.
                </returns>
      <param name="format">
                    A composite format string. 
                </param>
      <param name="args">
                    An <see cref="T:System.Object" /> array containing zero or more objects to format. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> or <paramref name="args" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.
                
                    -or- 
                
                    The number indicating an argument to format is less than zero, or greater than or equal to the length of the <paramref name="args" /> array. 
                </exception>
    </member>
    <member name="M:System.String.GetHashCode">
      <summary>
                    Returns the hash code for this string.
                </summary>
      <returns>
                    A 32-bit signed integer hash code.
                </returns>
    </member>
    <member name="M:System.String.GetTypeCode">
      <summary>
                    Returns the <see cref="T:System.TypeCode" /> for class <see cref="T:System.String" />.
                </summary>
      <returns>
                    The enumerated constant, <see cref="F:System.TypeCode.String" />.
                </returns>
    </member>
    <member name="M:System.String.IndexOf(System.Char)">
      <summary>
                    Reports the index of the first occurrence of the specified Unicode character in this string.
                </summary>
      <returns>
                    The zero-based index position of <paramref name="value" /> if that character is found, or -1 if it is not.
                </returns>
      <param name="value">
                    A Unicode character to seek. 
                </param>
    </member>
    <member name="M:System.String.IndexOf(System.Char,System.Int32)">
      <summary>
                    Reports the index of the first occurrence of the specified Unicode character in this string. The search starts at a specified character position.
                </summary>
      <returns>
                    The zero-based index position of <paramref name="value" /> if that character is found, or -1 if it is not.
                </returns>
      <param name="value">
                    A Unicode character to seek. 
                </param>
      <param name="startIndex">
                    The search starting position. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or specifies a position beyond the end of this instance. 
                </exception>
    </member>
    <member name="M:System.String.IndexOf(System.Char,System.Int32,System.Int32)">
      <summary>
                    Reports the index of the first occurrence of the specified character in this instance. The search starts at a specified character position and examines a specified number of character positions.
                </summary>
      <returns>
                    The zero-based index position of <paramref name="value" /> if that character is found, or -1 if it is not.
                </returns>
      <param name="value">
                    A Unicode character to seek. 
                </param>
      <param name="startIndex">
                    The search starting position. 
                </param>
      <param name="count">
                    The number of character positions to examine. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> or <paramref name="startIndex" /> is negative.
                
                    -or- 
                <paramref name="count" /> + <paramref name="startIndex" /> specifies a position beyond the end of this instance. 
                </exception>
    </member>
    <member name="M:System.String.IndexOf(System.String)">
      <summary>
                    Reports the index of the first occurrence of the specified <see cref="T:System.String" /> in this instance.
                </summary>
      <returns>
                    The zero-based index position of <paramref name="value" /> if that string is found, or -1 if it is not. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is 0.
                </returns>
      <param name="value">
                    The <see cref="T:System.String" /> to seek. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. 
                </exception>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32)">
      <summary>
                    Reports the index of the first occurrence of the specified <see cref="T:System.String" /> in this instance. The search starts at a specified character position.
                </summary>
      <returns>
                    The zero-based index position of <paramref name="value" /> if that string is found, or -1 if it is not. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is <paramref name="startIndex" />.
                </returns>
      <param name="value">
                    The <see cref="T:System.String" /> to seek. 
                </param>
      <param name="startIndex">
                    The search starting position. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is negative.
                
                    -or- 
                <paramref name="startIndex" /> specifies a position not within this instance. 
                </exception>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32,System.Int32)">
      <summary>
                    Reports the index of the first occurrence of the specified <see cref="T:System.String" /> in this instance. The search starts at a specified character position and examines a specified number of character positions.
                </summary>
      <returns>
                    The zero-based index position of <paramref name="value" /> if that string is found, or -1 if it is not. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is <paramref name="startIndex" />.
                </returns>
      <param name="value">
                    The <see cref="T:System.String" /> to seek. 
                </param>
      <param name="startIndex">
                    The search starting position. 
                </param>
      <param name="count">
                    The number of character positions to examine. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> or <paramref name="startIndex" /> is negative.
                
                    -or- 
                <paramref name="count" /> plus <paramref name="startIndex" /> specify a position not within this instance. 
                </exception>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
      <summary>
                    Reports the index of the first occurrence of the specified string in the current <see cref="T:System.String" /> object. Parameters specify the starting search position in the current string, the number of characters in the current string to search, and the type of search to use for the specified string.
                </summary>
      <returns>
                    The zero-based index position of the <paramref name="value" /> parameter if that string is found, or -1 if it is not. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is <paramref name="startIndex" />.
                </returns>
      <param name="value">
                    The <see cref="T:System.String" /> object to seek. 
                </param>
      <param name="startIndex">
                    The search starting position. 
                </param>
      <param name="count">
                    The number of character positions to examine. 
                </param>
      <param name="comparisonType">
                    One of the <see cref="T:System.StringComparison" /> values. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> or <paramref name="startIndex" /> is negative.
                
                    -or- 
                <paramref name="count" /> plus <paramref name="startIndex" /> specify a position that is not within this instance. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.
                </exception>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)">
      <summary>
                    Reports the index of the first occurrence of the specified string in the current <see cref="T:System.String" /> object. Parameters specify the starting search position in the current string and the type of search to use for the specified string.
                </summary>
      <returns>
                    The zero-based index position of the <paramref name="value" /> parameter if that string is found, or -1 if it is not. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is <paramref name="startIndex" />.
                </returns>
      <param name="value">
                    The <see cref="T:System.String" /> object to seek. 
                </param>
      <param name="startIndex">
                    The search starting position. 
                </param>
      <param name="comparisonType">
                    One of the <see cref="T:System.StringComparison" /> values. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is negative, or specifies a position that is not within this instance. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.
                </exception>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.StringComparison)">
      <summary>
                    Reports the index of the first occurrence of the specified string in the current <see cref="T:System.String" /> object. A parameter specifies the type of search to use for the specified string.
                </summary>
      <returns>
                    The zero-based index position of the <paramref name="value" /> parameter if that string is found, or -1 if it is not. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is 0.
                </returns>
      <param name="value">
                    The <see cref="T:System.String" /> object to seek. 
                </param>
      <param name="comparisonType">
                    One of the <see cref="T:System.StringComparison" /> values. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.
                </exception>
    </member>
    <member name="M:System.String.IndexOfAny(System.Char[])">
      <summary>
                    Reports the index of the first occurrence in this instance of any character in a specified array of Unicode characters.
                </summary>
      <returns>
                    The zero-based index position of the first occurrence in this instance where any character in <paramref name="anyOf" /> was found; otherwise, -1 if no character in <paramref name="anyOf" /> was found.
                </returns>
      <param name="anyOf">
                    A Unicode character array containing one or more characters to seek. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> is null. 
                </exception>
    </member>
    <member name="M:System.String.IndexOfAny(System.Char[],System.Int32)">
      <summary>
                    Reports the index of the first occurrence in this instance of any character in a specified array of Unicode characters. The search starts at a specified character position.
                </summary>
      <returns>
                    The zero-based index position of the first occurrence in this instance where any character in <paramref name="anyOf" /> was found; otherwise, -1 if no character in <paramref name="anyOf" /> was found.
                </returns>
      <param name="anyOf">
                    A Unicode character array containing one or more characters to seek. 
                </param>
      <param name="startIndex">
                    The search starting position. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is negative.
                
                    -or- 
                <paramref name="startIndex" /> is greater than the number of characters in this instance. 
                </exception>
    </member>
    <member name="M:System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)">
      <summary>
                    Reports the index of the first occurrence in this instance of any character in a specified array of Unicode characters. The search starts at a specified character position and examines a specified number of character positions.
                </summary>
      <returns>
                    The zero-based index position of the first occurrence in this instance where any character in <paramref name="anyOf" /> was found; otherwise, -1 if no character in <paramref name="anyOf" /> was found.
                </returns>
      <param name="anyOf">
                    A Unicode character array containing one or more characters to seek. 
                </param>
      <param name="startIndex">
                    The search starting position. 
                </param>
      <param name="count">
                    The number of character positions to examine. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> or <paramref name="startIndex" /> is negative.
                
                    -or- 
                <paramref name="count" /> + <paramref name="startIndex" /> is greater than the number of characters in this instance. 
                </exception>
    </member>
    <member name="M:System.String.Insert(System.Int32,System.String)">
      <summary>
                    Inserts a specified instance of <see cref="T:System.String" /> at a specified index position in this instance.
                </summary>
      <returns>
                    A new <see cref="T:System.String" /> equivalent to this instance but with <paramref name="value" /> inserted at position <paramref name="startIndex" />.
                </returns>
      <param name="startIndex">
                    The index position of the insertion. 
                </param>
      <param name="value">
                    The <see cref="T:System.String" /> to insert. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is negative or greater than the length of this instance. 
                </exception>
    </member>
    <member name="M:System.String.Intern(System.String)">
      <summary>
                    Retrieves the system's reference to the specified <see cref="T:System.String" />.
                </summary>
      <returns>
                    If the value of <paramref name="str" /> is already interned, the system's reference is returned; otherwise, a new reference to a string with the value of <paramref name="str" /> is returned.
                </returns>
      <param name="str">
                    A <see cref="T:System.String" />. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> is null. 
                </exception>
    </member>
    <member name="M:System.String.IsInterned(System.String)">
      <summary>
                    Retrieves a reference to a specified <see cref="T:System.String" />.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> reference to <paramref name="str" /> if it is in the common language runtime "intern pool"; otherwise null.
                </returns>
      <param name="str">
                    A <see cref="T:System.String" />. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> is null. 
                </exception>
    </member>
    <member name="M:System.String.IsNullOrEmpty(System.String)">
      <summary>
                    Indicates whether the specified <see cref="T:System.String" /> object is null or an <see cref="F:System.String.Empty" /> string.
                </summary>
      <returns>true if the <paramref name="value" /> parameter is null or an empty string (""); otherwise, false.
                </returns>
      <param name="value">
                    A <see cref="T:System.String" /> reference. 
                </param>
    </member>
    <member name="M:System.String.Join(System.String,System.String[])">
      <summary>
                    Concatenates a specified separator <see cref="T:System.String" /> between each element of a specified <see cref="T:System.String" /> array, yielding a single concatenated string.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> consisting of the elements of <paramref name="value" /> interspersed with the <paramref name="separator" /> string.
                </returns>
      <param name="separator">
                    A <see cref="T:System.String" />. 
                </param>
      <param name="value">
                    An array of <see cref="T:System.String" />. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. 
                </exception>
    </member>
    <member name="M:System.String.Join(System.String,System.String[],System.Int32,System.Int32)">
      <summary>
                    Concatenates a specified separator <see cref="T:System.String" /> between each element of a specified <see cref="T:System.String" /> array, yielding a single concatenated string. Parameters specify the first array element and number of elements to use.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> object consisting of the strings in <paramref name="value" /> joined by <paramref name="separator" />. Or, <see cref="F:System.String.Empty" /> if <paramref name="count" /> is zero, <paramref name="value" /> has no elements, or <paramref name="separator" /> and all the elements of <paramref name="value" /> are <see cref="F:System.String.Empty" />.
                </returns>
      <param name="separator">
                    A <see cref="T:System.String" />. 
                </param>
      <param name="value">
                    An array of <see cref="T:System.String" />. 
                </param>
      <param name="startIndex">
                    The first array element in <paramref name="value" /> to use. 
                </param>
      <param name="count">
                    The number of elements of <paramref name="value" /> to use. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> or <paramref name="count" /> is less than 0.
                
                    -or- 
                <paramref name="startIndex" /> plus <paramref name="count" /> is greater than the number of elements in <paramref name="value" />. 
                </exception>
      <exception cref="T:System.OutOfMemoryException">
                    Out of memory.
                </exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.Char)">
      <summary>
                    Reports the index position of the last occurrence of a specified Unicode character within this instance.
                </summary>
      <returns>
                    The zero-based index position of <paramref name="value" /> if that character is found, or -1 if it is not.
                </returns>
      <param name="value">
                    A Unicode character to seek. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. 
                </exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.Char,System.Int32)">
      <summary>
                    Reports the index position of the last occurrence of a specified Unicode character within this instance. The search starts at a specified character position.
                </summary>
      <returns>
                    The zero-based index position of <paramref name="value" /> if that character is found, or -1 if it is not.
                </returns>
      <param name="value">
                    A Unicode character to seek. 
                </param>
      <param name="startIndex">
                    The starting position of a substring within this instance. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or greater than the length of this instance. 
                </exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.Char,System.Int32,System.Int32)">
      <summary>
                    Reports the index position of the last occurrence of the specified Unicode character in a substring within this instance. The search starts at a specified character position and examines a specified number of character positions.
                </summary>
      <returns>
                    The zero-based index position of <paramref name="value" /> if that character is found, or -1 if it is not.
                </returns>
      <param name="value">
                    A Unicode character to seek. 
                </param>
      <param name="startIndex">
                    The starting position of a substring within this instance. 
                </param>
      <param name="count">
                    The number of character positions to examine. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or greater than or equal to the length of this instance.
                
                    -or-
                <paramref name="startIndex" /> + 1 - <paramref name="count" /> is less than zero.
                </exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String)">
      <summary>
                    Reports the index position of the last occurrence of a specified <see cref="T:System.String" /> within this instance.
                </summary>
      <returns>
                    The zero-based index position of <paramref name="value" /> if that string is found, or -1 if it is not. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is the last index position in this instance.
                </returns>
      <param name="value">
                    A <see cref="T:System.String" /> to seek. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. 
                </exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32)">
      <summary>
                    Reports the index position of the last occurrence of a specified <see cref="T:System.String" /> within this instance. The search starts at a specified character position.
                </summary>
      <returns>
                    The zero-based index position of <paramref name="value" /> if that string is found, or -1 if it is not. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is <paramref name="startIndex" />.
                </returns>
      <param name="value">
                    The <see cref="T:System.String" /> to seek. 
                </param>
      <param name="startIndex">
                    The search starting position. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or specifies a position not within this instance. 
                </exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)">
      <summary>
                    Reports the index position of the last occurrence of a specified <see cref="T:System.String" /> within this instance. The search starts at a specified character position and examines a specified number of character positions.
                </summary>
      <returns>
                    The zero-based index position of <paramref name="value" /> if that string is found, or -1 if it is not. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is <paramref name="startIndex" />.
                </returns>
      <param name="value">
                    The <see cref="T:System.String" /> to seek. 
                </param>
      <param name="startIndex">
                    The search starting position. 
                </param>
      <param name="count">
                    The number of character positions to examine. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> or <paramref name="startIndex" /> is negative.
                
                    -or- 
                <paramref name="startIndex" /> is greater than the length of this instance.
                
                    -or-
                <paramref name="startIndex" /> + 1 minus <paramref name="count" /> specifies a position that is not within this instance. 
                </exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
      <summary>
                    Reports the index position of the last occurrence of a specified <see cref="T:System.String" /> object within this instance. Parameters specify the starting search position in the current string, the number of characters in the current string to search, and the type of search to use for the specified string.
                </summary>
      <returns>
                    The zero-based index position of the <paramref name="value" /> parameter if that string is found, or -1 if it is not. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is <paramref name="startIndex" />.
                </returns>
      <param name="value">
                    The <see cref="T:System.String" /> object to seek. 
                </param>
      <param name="startIndex">
                    The search starting position. 
                </param>
      <param name="count">
                    The number of character positions to examine. 
                </param>
      <param name="comparisonType">
                    One of the <see cref="T:System.StringComparison" /> values. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> or <paramref name="startIndex" /> is negative.
                
                    -or- 
                <paramref name="startIndex" /> is greater than the length of this instance.
                
                    -or-
                <paramref name="startIndex" /> +1 - <paramref name="count" /> specifies a position that is not within this instance. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.
                </exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)">
      <summary>
                    Reports the index of the last occurrence of a specified string within the current <see cref="T:System.String" /> object. Parameters specify the starting search position in the current string, and type of search to use for the specified string.
                </summary>
      <returns>
                    The zero-based index position of the <paramref name="value" /> parameter if that string is found, or -1 if it is not. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is <paramref name="startIndex" />.
                </returns>
      <param name="value">
                    The <see cref="T:System.String" /> object to seek. 
                </param>
      <param name="startIndex">
                    The search starting position. 
                </param>
      <param name="comparisonType">
                    One of the <see cref="T:System.StringComparison" /> values. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or specifies a position that is not within this instance. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.
                </exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.StringComparison)">
      <summary>
                    Reports the index of the last occurrence of a specified string within the current <see cref="T:System.String" /> object. A parameter specifies the type of search to use for the specified string.
                </summary>
      <returns>
                    The zero-based index position of the <paramref name="value" /> parameter if that string is found, or -1 if it is not. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is the last index position in this instance.
                </returns>
      <param name="value">
                    The <see cref="T:System.String" /> object to seek. 
                </param>
      <param name="comparisonType">
                    One of the <see cref="T:System.StringComparison" /> values. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.
                </exception>
    </member>
    <member name="M:System.String.LastIndexOfAny(System.Char[])">
      <summary>
                    Reports the index position of the last occurrence in this instance of one or more characters specified in a Unicode array.
                </summary>
      <returns>
                    The index position of the last occurrence in this instance where any character in <paramref name="anyOf" /> was found; otherwise, -1 if no character in <paramref name="anyOf" /> was found.
                </returns>
      <param name="anyOf">
                    A Unicode character array containing one or more characters to seek. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> is null. 
                </exception>
    </member>
    <member name="M:System.String.LastIndexOfAny(System.Char[],System.Int32)">
      <summary>
                    Reports the index position of the last occurrence in this instance of one or more characters specified in a Unicode array. The search starts at a specified character position.
                </summary>
      <returns>
                    The index position of the last occurrence in this instance where any character in <paramref name="anyOf" /> was found; otherwise, -1 if no character in <paramref name="anyOf" /> was found.
                </returns>
      <param name="anyOf">
                    A Unicode character array containing one or more characters to seek. 
                </param>
      <param name="startIndex">
                    The search starting position. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> specifies a position not within this instance. 
                </exception>
    </member>
    <member name="M:System.String.LastIndexOfAny(System.Char[],System.Int32,System.Int32)">
      <summary>
                    Reports the index position of the last occurrence in this instance of one or more characters specified in a Unicode array. The search starts at a specified character position and examines a specified number of character positions.
                </summary>
      <returns>
                    The index position of the last occurrence in this instance where any character in <paramref name="anyOf" /> was found; otherwise, -1 if no character in <paramref name="anyOf" /> was found.
                </returns>
      <param name="anyOf">
                    A Unicode character array containing one or more characters to seek. 
                </param>
      <param name="startIndex">
                    The search starting position. 
                </param>
      <param name="count">
                    The number of character positions to examine. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> or <paramref name="startIndex" /> is negative.
                
                    -or- 
                <paramref name="startIndex" /> minus <paramref name="count" /> specify a position that is not within this instance. 
                </exception>
    </member>
    <member name="P:System.String.Length">
      <summary>
                    Gets the number of characters in the current <see cref="T:System.String" /> object.
                </summary>
      <returns>
                    The number of characters in this instance.
                </returns>
    </member>
    <member name="M:System.String.op_Equality(System.String,System.String)">
      <summary>
                    Determines whether two specified <see cref="T:System.String" /> objects have the same value.
                </summary>
      <returns>true if the value of <paramref name="a" /> is the same as the value of <paramref name="b" />; otherwise, false.
                </returns>
      <param name="a">
                    A <see cref="T:System.String" /> or null. 
                </param>
      <param name="b">
                    A <see cref="T:System.String" /> or null. 
                </param>
    </member>
    <member name="M:System.String.op_Inequality(System.String,System.String)">
      <summary>
                    Determines whether two specified <see cref="T:System.String" /> objects have different values.
                </summary>
      <returns>true if the value of <paramref name="a" /> is different from the value of <paramref name="b" />; otherwise, false.
                </returns>
      <param name="a">
                    A String or null. 
                </param>
      <param name="b">
                    A String or null. 
                </param>
    </member>
    <member name="M:System.String.PadLeft(System.Int32)">
      <summary>
                    Right-aligns the characters in this instance, padding with spaces on the left for a specified total length.
                </summary>
      <returns>
                    A new <see cref="T:System.String" /> that is equivalent to this instance, but right-aligned and padded on the left with as many spaces as needed to create a length of <paramref name="totalWidth" />. Or, if <paramref name="totalWidth" /> is less than the length of this instance, a new <see cref="T:System.String" /> object that is identical to this instance.
                </returns>
      <param name="totalWidth">
                    The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalWidth" /> is less than zero. 
                </exception>
    </member>
    <member name="M:System.String.PadLeft(System.Int32,System.Char)">
      <summary>
                    Right-aligns the characters in this instance, padding on the left with a specified Unicode character for a specified total length.
                </summary>
      <returns>
                    A new <see cref="T:System.String" /> that is equivalent to this instance, but right-aligned and padded on the left with as many <paramref name="paddingChar" /> characters as needed to create a length of <paramref name="totalWidth" />. Or, if <paramref name="totalWidth" /> is less than the length of this instance, a new <see cref="T:System.String" /> that is identical to this instance.
                </returns>
      <param name="totalWidth">
                    The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters. 
                </param>
      <param name="paddingChar">
                    A Unicode padding character. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalWidth" /> is less than zero. 
                </exception>
    </member>
    <member name="M:System.String.PadRight(System.Int32)">
      <summary>
                    Left-aligns the characters in this string, padding with spaces on the right, for a specified total length.
                </summary>
      <returns>
                    A new <see cref="T:System.String" /> that is equivalent to this instance, but left-aligned and padded on the right with as many spaces as needed to create a length of <paramref name="totalWidth" />. Or, if <paramref name="totalWidth" /> is less than the length of this instance, a new <see cref="T:System.String" /> that is identical to this instance.
                </returns>
      <param name="totalWidth">
                    The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalWidth" /> is less than zero. 
                </exception>
    </member>
    <member name="M:System.String.PadRight(System.Int32,System.Char)">
      <summary>
                    Left-aligns the characters in this string, padding on the right with a specified Unicode character, for a specified total length.
                </summary>
      <returns>
                    A new <see cref="T:System.String" /> that is equivalent to this instance, but left-aligned and padded on the right with as many <paramref name="paddingChar" /> characters as needed to create a length of <paramref name="totalWidth" />. Or, if <paramref name="totalWidth" /> is less than the length of this instance, a new <see cref="T:System.String" /> that is identical to this instance.
                </returns>
      <param name="totalWidth">
                    The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters. 
                </param>
      <param name="paddingChar">
                    A Unicode padding character. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalWidth" /> is less than zero. 
                </exception>
    </member>
    <member name="M:System.String.Remove(System.Int32)">
      <summary>
                    Deletes all the characters from this string beginning at a specified position and continuing through the last position.
                </summary>
      <returns>
                    A new <see cref="T:System.String" /> object that is equivalent to this string without the removed characters.
                </returns>
      <param name="startIndex">
                    The zero-based position to begin deleting characters.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero.
                
                    -or- 
                <paramref name="startIndex" /> specifies a position that is not within this string. 
                </exception>
    </member>
    <member name="M:System.String.Remove(System.Int32,System.Int32)">
      <summary>
                    Deletes a specified number of characters from this instance beginning at a specified position.
                </summary>
      <returns>
                    A new <see cref="T:System.String" /> that is equivalent to this instance less <paramref name="count" /> number of characters.
                </returns>
      <param name="startIndex">
                    The zero-based position to begin deleting characters. 
                </param>
      <param name="count">
                    The number of characters to delete. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    Either <paramref name="startIndex" /> or <paramref name="count" /> is less than zero.
                
                    -or- 
                <paramref name="startIndex" /> plus <paramref name="count" /> specify a position outside this instance. 
                </exception>
    </member>
    <member name="M:System.String.Replace(System.Char,System.Char)">
      <summary>
                    Replaces all occurrences of a specified Unicode character in this instance with another specified Unicode character.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> equivalent to this instance but with all instances of <paramref name="oldChar" /> replaced with <paramref name="newChar" />.
                </returns>
      <param name="oldChar">
                    A Unicode character to be replaced. 
                </param>
      <param name="newChar">
                    A Unicode character to replace all occurrences of <paramref name="oldChar" />. 
                </param>
    </member>
    <member name="M:System.String.Replace(System.String,System.String)">
      <summary>
                    Replaces all occurrences of a specified <see cref="T:System.String" /> in this instance, with another specified <see cref="T:System.String" />.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> equivalent to this instance but with all instances of <paramref name="oldValue" /> replaced with <paramref name="newValue" />.
                </returns>
      <param name="oldValue">
                    A <see cref="T:System.String" /> to be replaced. 
                </param>
      <param name="newValue">
                    A <see cref="T:System.String" /> to replace all occurrences of <paramref name="oldValue" />. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oldValue" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> is the empty string (""). 
                </exception>
    </member>
    <member name="M:System.String.Split(System.Char[])">
      <summary>
                    Returns a string array that contains the substrings in this instance that are delimited by elements of a specified Unicode character array.
                </summary>
      <returns>
                    An array whose elements contain the substrings in this instance that are delimited by one or more characters in <paramref name="separator" />. For more information, see the Remarks section.
                </returns>
      <param name="separator">
                    An array of Unicode characters that delimit the substrings in this instance, an empty array that contains no delimiters, or null. 
                </param>
    </member>
    <member name="M:System.String.Split(System.Char[],System.StringSplitOptions)">
      <summary>
                    Returns a string array that contains the substrings in this string that are delimited by elements of a specified Unicode character array. A parameter specifies whether to return empty array elements.
                </summary>
      <returns>
                    An array whose elements contain the substrings in this string that are delimited by one or more characters in <paramref name="separator" />. For more information, see the Remarks section.
                </returns>
      <param name="separator">
                    An array of Unicode characters that delimit the substrings in this string, an empty array that contains no delimiters, or null.
                </param>
      <param name="options">
                    A flag that indicates whether to include empty elements in the returned array. Specify <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" /> to omit empty elements from the returned array. Specify <see cref="F:System.StringSplitOptions.None" /> to include empty elements in the returned array.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> is a member of the <see cref="T:System.StringSplitOptions" /> enumeration.
                </exception>
    </member>
    <member name="M:System.String.Split(System.String[],System.StringSplitOptions)">
      <summary>
                    Returns a string array that contains the substrings in this string that are delimited by elements of a specified string array. A parameter specifies whether to return empty array elements.
                </summary>
      <returns>
                    An array whose elements contain the substrings in this string that are delimited by one or more strings in <paramref name="separator" />. For more information, see the Remarks section.
                </returns>
      <param name="separator">
                    An array of strings that delimits the substrings in this string, an empty array that contains no delimiters, or null. 
                </param>
      <param name="options">
                    A flag that indicates whether to include empty elements in the returned array. Specify <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" /> to omit empty array elements from the returned array. Specify <see cref="F:System.StringSplitOptions.None" /> to include empty array elements in the returned array. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> is not a member of the <see cref="T:System.StringSplitOptions" /> enumeration.
                </exception>
    </member>
    <member name="M:System.String.StartsWith(System.String)">
      <summary>
                    Determines whether the beginning of this instance matches the specified string.
                </summary>
      <returns>true if <paramref name="value" /> matches the beginning of this string; otherwise, false.
                </returns>
      <param name="value">
                    The <see cref="T:System.String" /> to compare. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. 
                </exception>
    </member>
    <member name="M:System.String.StartsWith(System.String,System.StringComparison)">
      <summary>
                    Determines whether the beginning of this string matches the specified string when compared using the specified comparison option.
                </summary>
      <returns>true if the <paramref name="value" /> parameter matches the beginning of this string; otherwise, false.
                </returns>
      <param name="value">
                    A <see cref="T:System.String" /> object to compare to. 
                </param>
      <param name="comparisonType">
                    One of the <see cref="T:System.StringComparison" /> values that determines how this string and <paramref name="value" /> are compared. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value.
                </exception>
    </member>
    <member name="M:System.String.Substring(System.Int32)">
      <summary>
                    Retrieves a substring from this instance. The substring starts at a specified character position.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> object equivalent to the substring that begins at <paramref name="startIndex" /> in this instance, or <see cref="F:System.String.Empty" /> if <paramref name="startIndex" /> is equal to the length of this instance.
                </returns>
      <param name="startIndex">
                    The zero-based starting character position of a substring in this instance. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or greater than the length of this instance. 
                </exception>
    </member>
    <member name="M:System.String.Substring(System.Int32,System.Int32)">
      <summary>
                    Retrieves a substring from this instance. The substring starts at a specified character position and has a specified length.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> equivalent to the substring of length <paramref name="length" /> that begins at <paramref name="startIndex" /> in this instance, or <see cref="F:System.String.Empty" /> if <paramref name="startIndex" /> is equal to the length of this instance and <paramref name="length" /> is zero.
                </returns>
      <param name="startIndex">
                    The zero-based starting character position of a substring in this instance. 
                </param>
      <param name="length">
                    The number of characters in the substring. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> plus <paramref name="length" /> indicates a position not within this instance.
                
                    -or- 
                <paramref name="startIndex" /> or <paramref name="length" /> is less than zero. 
                </exception>
    </member>
    <member name="M:System.String.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>
                    Returns an enumerator that iterates through the current <see cref="T:System.String" /> object. 
                </summary>
      <returns>
                    A <see cref="T:System.Collections.Generic.IEnumerator`1" /> of type <see cref="T:System.Char" /> that can be used to iterate through the current <see cref="T:System.String" /> object.
                </returns>
    </member>
    <member name="M:System.String.System#Collections#IEnumerable#GetEnumerator">
      <summary>
                    Returns an enumerator that iterates through the current <see cref="T:System.String" /> object. 
                </summary>
      <returns>
                    An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the current <see cref="T:System.String" /> object.
                </returns>
    </member>
    <member name="M:System.String.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />.
                </summary>
      <returns>true if the value of the current <see cref="T:System.String" /> object is <see cref="F:System.Boolean.TrueString" />, or false if the value of the current <see cref="T:System.String" /> object is <see cref="F:System.Boolean.FalseString" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
      <exception cref="T:System.FormatException">
                    The value of the current <see cref="T:System.String" /> object is not <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" />.
                </exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.
                </summary>
      <returns>
                    The converted value of the current <see cref="T:System.String" /> object.
                </returns>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> object that provides culture-specific formatting information. 
                </param>
      <exception cref="T:System.FormatException">
                    The value of the current <see cref="T:System.String" /> object cannot be parsed. 
                </exception>
      <exception cref="T:System.OverflowException">
                    The value of the current <see cref="T:System.String" /> object is a number greater than <see cref="F:System.Byte.MaxValue" /> or less than <see cref="F:System.Byte.MinValue" />. 
                </exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />.
                </summary>
      <returns>
                    The character at index 0 in the current <see cref="T:System.String" /> object.
                </returns>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> object that provides culture-specific formatting information. 
                </param>
    </member>
    <member name="M:System.String.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToDateTime(System.IFormatProvider)" />.
                </summary>
      <returns>
                    The converted value of the current <see cref="T:System.String" /> object.
                </returns>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> object that provides culture-specific formatting information. 
                </param>
    </member>
    <member name="M:System.String.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />.
                </summary>
      <returns>
                    The converted value of the current <see cref="T:System.String" /> object.
                </returns>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> object that provides culture-specific formatting information. 
                </param>
      <exception cref="T:System.FormatException">
                    The value of the current <see cref="T:System.String" /> object cannot be parsed. 
                </exception>
      <exception cref="T:System.OverflowException">
                    The value of the current <see cref="T:System.String" /> object is a number less than <see cref="F:System.Decimal.MinValue" /> or than <see cref="F:System.Decimal.MaxValue" /> greater. 
                </exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />.
                </summary>
      <returns>
                    The converted value of the current <see cref="T:System.String" /> object.
                </returns>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> object that provides culture-specific formatting information. 
                </param>
      <exception cref="T:System.FormatException">
                    The value of the current <see cref="T:System.String" /> object cannot be parsed. 
                </exception>
      <exception cref="T:System.OverflowException">
                    The value of the current <see cref="T:System.String" /> object is a number less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.
                </summary>
      <returns>
                    The converted value of the current <see cref="T:System.String" /> object.
                </returns>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> object that provides culture-specific formatting information. 
                </param>
      <exception cref="T:System.FormatException">
                    The value of the current <see cref="T:System.String" /> object cannot be parsed. 
                </exception>
      <exception cref="T:System.OverflowException">
                    The value of the current <see cref="T:System.String" /> object is a number greater than <see cref="F:System.Int16.MaxValue" /> or less than <see cref="F:System.Int16.MinValue" />.
                </exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.
                </summary>
      <returns>
                    The converted value of the current <see cref="T:System.String" /> object.
                </returns>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> object that provides culture-specific formatting information. 
                </param>
    </member>
    <member name="M:System.String.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.
                </summary>
      <returns>
                    The converted value of the current <see cref="T:System.String" /> object.
                </returns>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> object that provides culture-specific formatting information. 
                </param>
    </member>
    <member name="M:System.String.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.
                </summary>
      <returns>
                    The converted value of the current <see cref="T:System.String" /> object.
                </returns>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> object that provides culture-specific formatting information. 
                </param>
      <exception cref="T:System.FormatException">
                    The value of the current <see cref="T:System.String" /> object cannot be parsed. 
                </exception>
      <exception cref="T:System.OverflowException">
                    The value of the current <see cref="T:System.String" /> object is a number greater than <see cref="F:System.SByte.MaxValue" /> or less than <see cref="F:System.SByte.MinValue" />. 
                </exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />.
                </summary>
      <returns>
                    The converted value of the current <see cref="T:System.String" /> object.
                </returns>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> object that provides culture-specific formatting information. 
                </param>
    </member>
    <member name="M:System.String.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.
                </summary>
      <returns>
                    The converted value of the current <see cref="T:System.String" /> object.
                </returns>
      <param name="type">
                    The type of the returned object. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> object that provides culture-specific formatting information.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.
                </exception>
      <exception cref="T:System.InvalidCastException">
                    The value of the current <see cref="T:System.String" /> object cannot be converted to the type specified by the <paramref name="type" /> parameter. 
                </exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.
                </summary>
      <returns>
                    The converted value of the current <see cref="T:System.String" /> object.
                </returns>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> object that provides culture-specific formatting information. 
                </param>
      <exception cref="T:System.FormatException">
                    The value of the current <see cref="T:System.String" /> object cannot be parsed. 
                </exception>
      <exception cref="T:System.OverflowException">
                    The value of the current <see cref="T:System.String" /> object is a number greater than <see cref="F:System.UInt16.MaxValue" /> or less than <see cref="F:System.UInt16.MinValue" />.
                </exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.
                </summary>
      <returns>
                    The converted value of the current <see cref="T:System.String" /> object.
                </returns>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> object. 
                </param>
      <exception cref="T:System.FormatException">
                    The value of the current <see cref="T:System.String" /> object cannot be parsed. 
                </exception>
      <exception cref="T:System.OverflowException">
                    The value of the current <see cref="T:System.String" /> object is a number greater <see cref="F:System.UInt32.MaxValue" /> or less than <see cref="F:System.UInt32.MinValue" /></exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.
                </summary>
      <returns>
                    The converted value of the current <see cref="T:System.String" /> object.
                </returns>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> object. 
                </param>
    </member>
    <member name="M:System.String.ToCharArray">
      <summary>
                    Copies the characters in this instance to a Unicode character array.
                </summary>
      <returns>
                    A Unicode character array whose elements are the individual characters of this instance. If this instance is an empty string, the returned array is empty and has a zero length.
                </returns>
    </member>
    <member name="M:System.String.ToLower">
      <summary>
                    Returns a copy of this <see cref="T:System.String" /> converted to lowercase, using the casing rules of the invariant culture.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> in lowercase.
                </returns>
    </member>
    <member name="M:System.String.ToLower(System.Globalization.CultureInfo)">
      <summary>
                    Returns a copy of this <see cref="T:System.String" /> converted to lowercase, using the casing rules of the specified culture.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> in lowercase.
                </returns>
      <param name="culture">
                    A <see cref="T:System.Globalization.CultureInfo" /> object that supplies culture-specific casing rules. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> is null. 
                </exception>
    </member>
    <member name="M:System.String.ToString">
      <summary>
                    Returns this instance of <see cref="T:System.String" />; no actual conversion is performed.
                </summary>
      <returns>
                    This <see cref="T:System.String" />.
                </returns>
    </member>
    <member name="M:System.String.ToString(System.IFormatProvider)">
      <summary>
                    Returns this instance of <see cref="T:System.String" />; no actual conversion is performed.
                </summary>
      <returns>
                    This <see cref="T:System.String" />.
                </returns>
      <param name="provider">
                    (Reserved) An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information. 
                </param>
    </member>
    <member name="M:System.String.ToUpper">
      <summary>
                    Returns a copy of this <see cref="T:System.String" /> converted to uppercase, using the casing rules of the invariant culture.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> in uppercase.
                </returns>
    </member>
    <member name="M:System.String.ToUpper(System.Globalization.CultureInfo)">
      <summary>
                    Returns a copy of this <see cref="T:System.String" /> converted to uppercase, using the casing rules of the specified culture.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> in uppercase.
                </returns>
      <param name="culture">
                    A <see cref="T:System.Globalization.CultureInfo" /> object that supplies culture-specific casing rules. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> is null. 
                </exception>
    </member>
    <member name="M:System.String.Trim">
      <summary>
                    Removes all leading and trailing white-space characters from the current <see cref="T:System.String" /> object.
                </summary>
      <returns>
                    The string that remains after all white-space characters are removed from the start and end of the current <see cref="T:System.String" /> object.
                </returns>
    </member>
    <member name="M:System.String.Trim(System.Char[])">
      <summary>
                    Removes all leading and trailing occurrences of a set of characters specified in an array from the current <see cref="T:System.String" /> object.
                </summary>
      <returns>
                    The string that remains after all occurrences of the characters in the <paramref name="trimChars" /> parameter are removed from the start and end of the current <see cref="T:System.String" /> object. If <paramref name="trimChars" /> is null, white-space characters are removed instead.
                </returns>
      <param name="trimChars">
                    An array of Unicode characters to remove or null. 
                </param>
    </member>
    <member name="M:System.String.TrimEnd(System.Char[])">
      <summary>
                    Removes all trailing occurrences of a set of characters specified in an array from the current <see cref="T:System.String" /> object.
                </summary>
      <returns>
                    The string that remains after all occurrences of the characters in the <paramref name="trimChars" /> parameter are removed from the end of the current <see cref="T:System.String" /> object. If <paramref name="trimChars" /> is null, white-space characters are removed instead.
                </returns>
      <param name="trimChars">
                    An array of Unicode characters to remove or null. 
                </param>
    </member>
    <member name="M:System.String.TrimStart(System.Char[])">
      <summary>
                    Removes all leading occurrences of a set of characters specified in an array from the current <see cref="T:System.String" /> object.
                </summary>
      <returns>
                    The string that remains after all occurrences of characters in the <paramref name="trimChars" /> parameter are removed from the start of the current <see cref="T:System.String" /> object. If <paramref name="trimChars" /> is null, white-space characters are removed instead.
                </returns>
      <param name="trimChars">
                    An array of Unicode characters to remove or null. 
                </param>
    </member>
    <member name="T:System.StringComparer">
      <summary>
                    Represents a string comparison operation that uses specific case and culture-based or ordinal comparison rules.
                </summary>
    </member>
    <member name="M:System.StringComparer.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.StringComparer" /> class. 
                </summary>
    </member>
    <member name="M:System.StringComparer.Compare(System.Object,System.Object)">
      <summary>
                    When overridden in a derived class, compares two objects and returns an indication of their relative sort order.
                </summary>
      <returns>
                    Value
                
                    Meaning
                
                    Less than zero
                <paramref name="x" /> is less than <paramref name="y" />. 
                
                    -or-
                <paramref name="x" /> is null.
                
                    Zero
                <paramref name="x" /> is equal to <paramref name="y" />.
                
                    Greater than zero
                <paramref name="x" /> is greater than <paramref name="y" />.
                
                    -or-
                <paramref name="y" /> is null.
                </returns>
      <param name="x">
                    An object to compare to <paramref name="y" />.
                </param>
      <param name="y">
                    An object to compare to <paramref name="x" />.
                </param>
      <exception cref="T:System.ArgumentException">
                    Neither <paramref name="x" /> nor <paramref name="y" /> is a <see cref="T:System.String" /> object, and neither <paramref name="x" /> nor <paramref name="y" /> implements the <see cref="T:System.IComparable" /> interface.
                </exception>
    </member>
    <member name="M:System.StringComparer.Compare(System.String,System.String)">
      <summary>
                    When overridden in a derived class, compares two strings and returns an indication of their relative sort order.
                </summary>
      <returns>
                    Value
                
                    Meaning
                
                    Less than zero
                <paramref name="x" /> is less than <paramref name="y" />.
                
                    -or-
                <paramref name="x" /> is null.
                
                    Zero
                <paramref name="x" /> is equal to <paramref name="y" />.
                
                    Greater than zero
                <paramref name="x" /> is greater than <paramref name="y" />.
                
                    -or-
                <paramref name="y" /> is null.
                </returns>
      <param name="x">
                    A string to compare to <paramref name="y" />.
                </param>
      <param name="y">
                    A string to compare to <paramref name="x" />.
                </param>
    </member>
    <member name="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)">
      <summary>
                    Creates a <see cref="T:System.StringComparer" /> object that compares strings according to the rules of a specified culture.
                </summary>
      <returns>
                    A new <see cref="T:System.StringComparer" /> object that performs string comparisons according to the comparison rules used by the <paramref name="culture" /> parameter and the case rule specified by the <paramref name="ignoreCase" /> parameter.
                </returns>
      <param name="culture">
                    A culture whose linguistic rules are used to perform a string comparison.
                </param>
      <param name="ignoreCase">true to specify that comparison operations be case-insensitive; false to specify that comparison operations be case-sensitive.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> is null.
                </exception>
    </member>
    <member name="P:System.StringComparer.CurrentCulture">
      <summary>
                    Gets a <see cref="T:System.StringComparer" /> object that performs a case-sensitive string comparison using the word comparison rules of the current culture.
                </summary>
      <returns>
                    A new <see cref="T:System.StringComparer" /> object.
                </returns>
    </member>
    <member name="P:System.StringComparer.CurrentCultureIgnoreCase">
      <summary>
                    Gets a <see cref="T:System.StringComparer" /> object that performs case-insensitive string comparisons using the word comparison rules of the current culture.
                </summary>
      <returns>
                    A new <see cref="T:System.StringComparer" /> object.
                </returns>
    </member>
    <member name="M:System.StringComparer.Equals(System.Object,System.Object)">
      <summary>
                    When overridden in a derived class, indicates whether two objects are equal.
                </summary>
      <returns>true if <paramref name="x" /> and <paramref name="y" /> refer to the same object, or <paramref name="x" /> and <paramref name="y" /> are both the same type of object and those objects are equal; otherwise, false.
                </returns>
      <param name="x">
                    An object to compare to <paramref name="y" />.
                </param>
      <param name="y">
                    An object to compare to <paramref name="x" />.
                </param>
    </member>
    <member name="M:System.StringComparer.Equals(System.String,System.String)">
      <summary>
                    When overridden in a derived class, indicates whether two strings are equal.
                </summary>
      <returns>true if <paramref name="x" /> and <paramref name="y" /> refer to the same object, or <paramref name="x" /> and <paramref name="y" /> are equal; otherwise, false.
                </returns>
      <param name="x">
                    A string to compare to <paramref name="y" />.
                </param>
      <param name="y">
                    A string to compare to <paramref name="x" />.
                </param>
    </member>
    <member name="M:System.StringComparer.GetHashCode(System.Object)">
      <summary>
                    When overridden in a derived class, gets the hash code for the specified object.
                </summary>
      <returns>
                    A 32-bit signed hash code calculated from the value of the <paramref name="obj" /> parameter.
                </returns>
      <param name="obj">
                    An object.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> is null.
                </exception>
    </member>
    <member name="M:System.StringComparer.GetHashCode(System.String)">
      <summary>
                    When overridden in a derived class, gets the hash code for the specified string.
                </summary>
      <returns>
                    A 32-bit signed hash code calculated from the value of the <paramref name="obj" /> parameter.
                </returns>
      <param name="obj">
                    A string.
                </param>
    </member>
    <member name="P:System.StringComparer.InvariantCulture">
      <summary>
                    Gets a <see cref="T:System.StringComparer" /> object that performs a case-sensitive string comparison using the word comparison rules of the invariant culture.
                </summary>
      <returns>
                    A new <see cref="T:System.StringComparer" /> object.
                </returns>
    </member>
    <member name="P:System.StringComparer.InvariantCultureIgnoreCase">
      <summary>
                    Gets a <see cref="T:System.StringComparer" /> object that performs a case-insensitive string comparison using the word comparison rules of the invariant culture.
                </summary>
      <returns>
                    A new <see cref="T:System.StringComparer" /> object.
                </returns>
    </member>
    <member name="P:System.StringComparer.Ordinal">
      <summary>
                    Gets a <see cref="T:System.StringComparer" /> object that performs a case-sensitive ordinal string comparison.
                </summary>
      <returns>
                    A <see cref="T:System.StringComparer" /> object.
                </returns>
    </member>
    <member name="P:System.StringComparer.OrdinalIgnoreCase">
      <summary>
                    Gets a <see cref="T:System.StringComparer" /> object that performs a case-insensitive ordinal string comparison.
                </summary>
      <returns>
                    A <see cref="T:System.StringComparer" /> object.
                </returns>
    </member>
    <member name="T:System.StringComparison">
      <summary>
                    Specifies the culture, case, and sort rules to be used by certain overloads of the <see cref="M:System.String.Compare(System.String,System.String)" /> and <see cref="M:System.String.Equals(System.Object)" /> methods.
                </summary>
    </member>
    <member name="F:System.StringComparison.CurrentCulture">
      <summary>
                    Compare strings using culture-sensitive sort rules and the current culture.
                </summary>
    </member>
    <member name="F:System.StringComparison.CurrentCultureIgnoreCase">
      <summary>
                    Compare strings using culture-sensitive sort rules, the current culture, and ignoring the case of the strings being compared.
                </summary>
    </member>
    <member name="F:System.StringComparison.InvariantCulture">
      <summary>
                    Compare strings using culture-sensitive sort rules and the invariant culture.
                </summary>
    </member>
    <member name="F:System.StringComparison.InvariantCultureIgnoreCase">
      <summary>
                    Compare strings using culture-sensitive sort rules, the invariant culture, and ignoring the case of the strings being compared.
                </summary>
    </member>
    <member name="F:System.StringComparison.Ordinal">
      <summary>
                    Compare strings using ordinal sort rules.
                </summary>
    </member>
    <member name="F:System.StringComparison.OrdinalIgnoreCase">
      <summary>
                    Compare strings using ordinal sort rules and ignoring the case of the strings being compared.
                </summary>
    </member>
    <member name="T:System.StringSplitOptions">
      <summary>
                    Specifies whether methods that split delimited substrings include or omit empty substrings from the returned array.
                </summary>
    </member>
    <member name="F:System.StringSplitOptions.None">
      <summary>
                    The return value includes array elements that contain an empty string
                </summary>
    </member>
    <member name="F:System.StringSplitOptions.RemoveEmptyEntries">
      <summary>
                    The return value does not include array elements that contain an empty string
                </summary>
    </member>
    <member name="T:System.SystemException">
      <summary>
                    Defines the base class for predefined exceptions in the <see cref="N:System" /> namespace.
                </summary>
    </member>
    <member name="M:System.SystemException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.SystemException" /> class.
                </summary>
    </member>
    <member name="M:System.SystemException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.SystemException" /> class with a specified error message.
                </summary>
      <param name="message">
                    The message that describes the error. 
                </param>
    </member>
    <member name="M:System.SystemException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.SystemException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
                </summary>
      <param name="message">
                    The error message that explains the reason for the exception. 
                </param>
      <param name="innerException">
                    The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. 
                </param>
    </member>
    <member name="T:System.ThreadStaticAttribute">
      <summary>
                    Indicates that the value of a static field is unique for each thread.
                </summary>
    </member>
    <member name="M:System.ThreadStaticAttribute.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ThreadStaticAttribute" /> class.
                </summary>
    </member>
    <member name="T:System.TimeoutException">
      <summary>
                    The exception that is thrown when the time allotted for a process or operation has expired.
                </summary>
    </member>
    <member name="M:System.TimeoutException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.TimeoutException" /> class.
                </summary>
    </member>
    <member name="M:System.TimeoutException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.TimeoutException" /> class with the specified error message.
                </summary>
      <param name="message">
                    The message that describes the error. 
                </param>
    </member>
    <member name="M:System.TimeoutException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.TimeoutException" /> class with the specified error message and inner exception.
                </summary>
      <param name="message">
                    The message that describes the error. 
                </param>
      <param name="innerException">
                    The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. 
                </param>
    </member>
    <member name="T:System.TimeSpan">
      <summary>
                    Represents a time interval.
                </summary>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
                    Initializes a new <see cref="T:System.TimeSpan" /> to a specified number of hours, minutes, and seconds.
                </summary>
      <param name="hours">
                    Number of hours. 
                </param>
      <param name="minutes">
                    Number of minutes. 
                </param>
      <param name="seconds">
                    Number of seconds. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The parameters specify a <see cref="T:System.TimeSpan" /> value less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
                    Initializes a new <see cref="T:System.TimeSpan" /> to a specified number of days, hours, minutes, and seconds.
                </summary>
      <param name="days">
                    Number of days. 
                </param>
      <param name="hours">
                    Number of hours. 
                </param>
      <param name="minutes">
                    Number of minutes. 
                </param>
      <param name="seconds">
                    Number of seconds. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The parameters specify a <see cref="T:System.TimeSpan" /> value less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
                    Initializes a new <see cref="T:System.TimeSpan" /> to a specified number of days, hours, minutes, seconds, and milliseconds.
                </summary>
      <param name="days">
                    Number of days. 
                </param>
      <param name="hours">
                    Number of hours. 
                </param>
      <param name="minutes">
                    Number of minutes. 
                </param>
      <param name="seconds">
                    Number of seconds. 
                </param>
      <param name="milliseconds">
                    Number of milliseconds. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The parameters specify a <see cref="T:System.TimeSpan" /> value less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int64)">
      <summary>
                    Initializes a new <see cref="T:System.TimeSpan" /> to the specified number of ticks.
                </summary>
      <param name="ticks">
                    A time period expressed in 100-nanosecond units. 
                </param>
    </member>
    <member name="M:System.TimeSpan.Add(System.TimeSpan)">
      <summary>
                    Adds the specified <see cref="T:System.TimeSpan" /> to this instance.
                </summary>
      <returns>
                    A <see cref="T:System.TimeSpan" /> that represents the value of this instance plus the value of <paramref name="ts" />.
                </returns>
      <param name="ts">
                    A <see cref="T:System.TimeSpan" />. 
                </param>
      <exception cref="T:System.OverflowException">
                    The resulting <see cref="T:System.TimeSpan" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)">
      <summary>
                    Compares two <see cref="T:System.TimeSpan" /> values and returns an integer that indicates whether the first time interval is longer than, equal to, or shorter than the second time interval.
                </summary>
      <returns>
                    Value 
                
                    Condition 
                
                    -1 
                <paramref name="t1" /> is shorter than <paramref name="t2" />
                    0 
                <paramref name="t1" /> is equal to <paramref name="t2" />
                    1 
                <paramref name="t1" /> is longer than <paramref name="t2" /></returns>
      <param name="t1">
                    A <see cref="T:System.TimeSpan" />. 
                </param>
      <param name="t2">
                    A <see cref="T:System.TimeSpan" />. 
                </param>
    </member>
    <member name="M:System.TimeSpan.CompareTo(System.Object)">
      <summary>
                    Compares this instance to a specified object and returns an integer that indicates whether the time interval represented by this instance is longer than, equal to, or shorter than the time interval represented by the specified object.
                </summary>
      <returns>
                    Value 
                
                    Condition 
                
                    -1 
                
                    The value of this instance is shorter than the value of <paramref name="value" />. 
                
                    0 
                
                    The value of this instance is equal to the value of <paramref name="value" />. 
                
                    1 
                
                    The value of this instance is longer than the value of <paramref name="value" />.
                
                    -or- 
                <paramref name="value" /> is null. 
                </returns>
      <param name="value">
                    An object to compare, or null. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.TimeSpan" />. 
                </exception>
    </member>
    <member name="M:System.TimeSpan.CompareTo(System.TimeSpan)">
      <summary>
                    Compares this instance to a specified <see cref="T:System.TimeSpan" /> object and returns an integer that indicates whether the time interval represented by this instance is longer than, equal to, or shorter than the time interval represented by the specified <see cref="T:System.TimeSpan" /> object.
                </summary>
      <returns>
                    A signed number indicating the relative values of this instance and <paramref name="value" />.
                
                    Value 
                
                    Description 
                
                    A negative integer 
                
                    This instance is shorter than <paramref name="value" />. 
                
                    Zero 
                
                    This instance is equal to <paramref name="value" />. 
                
                    A positive integer 
                
                    This instance is longer than <paramref name="value" />. 
                </returns>
      <param name="value">
                    A <see cref="T:System.TimeSpan" /> object to compare to this instance.
                </param>
    </member>
    <member name="P:System.TimeSpan.Days">
      <summary>
                    Gets the days component of the time interval represented by the current <see cref="T:System.TimeSpan" /> structure.
                </summary>
      <returns>
                    The day component of this instance. The return value can be positive or negative.
                </returns>
    </member>
    <member name="M:System.TimeSpan.Duration">
      <summary>
                    Returns a new <see cref="T:System.TimeSpan" /> object whose value is the absolute value of the current <see cref="T:System.TimeSpan" /> object.
                </summary>
      <returns>
                    A new <see cref="T:System.TimeSpan" /> whose value is the absolute value of the current <see cref="T:System.TimeSpan" /> object.
                </returns>
      <exception cref="T:System.OverflowException">
                    The value of this instance is <see cref="F:System.TimeSpan.MinValue" />. 
                </exception>
    </member>
    <member name="M:System.TimeSpan.Equals(System.Object)">
      <summary>
                    Returns a value indicating whether this instance is equal to a specified object.
                </summary>
      <returns>true if <paramref name="value" /> is a <see cref="T:System.TimeSpan" /> object that represents the same time interval as the current <see cref="T:System.TimeSpan" /> structure; otherwise, false.
                </returns>
      <param name="value">
                    An object to compare with this instance. 
                </param>
    </member>
    <member name="M:System.TimeSpan.Equals(System.TimeSpan)">
      <summary>
                    Returns a value indicating whether this instance is equal to a specified <see cref="T:System.TimeSpan" /> object.
                </summary>
      <returns>true if <paramref name="obj" /> represents the same time interval as this instance; otherwise, false.
                </returns>
      <param name="obj">
                    An <see cref="T:System.TimeSpan" /> object to compare with this instance. 
                </param>
    </member>
    <member name="M:System.TimeSpan.Equals(System.TimeSpan,System.TimeSpan)">
      <summary>
                    Returns a value indicating whether two specified instances of <see cref="T:System.TimeSpan" /> are equal.
                </summary>
      <returns>true if the values of <paramref name="t1" /> and <paramref name="t2" /> are equal; otherwise, false.
                </returns>
      <param name="t1">
                    A <see cref="T:System.TimeSpan" />. 
                </param>
      <param name="t2">
                    A TimeSpan. 
                </param>
    </member>
    <member name="M:System.TimeSpan.FromDays(System.Double)">
      <summary>
                    Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of days, where the specification is accurate to the nearest millisecond.
                </summary>
      <returns>
                    A <see cref="T:System.TimeSpan" /> that represents <paramref name="value" />.
                </returns>
      <param name="value">
                    A number of days, accurate to the nearest millisecond. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />. 
                
                    -or-
                <paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.
                
                    -or-
                <paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />. 
                </exception>
    </member>
    <member name="M:System.TimeSpan.FromHours(System.Double)">
      <summary>
                    Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of hours, where the specification is accurate to the nearest millisecond.
                </summary>
      <returns>
                    A <see cref="T:System.TimeSpan" /> that represents <paramref name="value" />.
                </returns>
      <param name="value">
                    A number of hours accurate to the nearest millisecond. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />. 
                
                    -or-
                <paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.
                
                    -or-
                <paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />. 
                </exception>
    </member>
    <member name="M:System.TimeSpan.FromMilliseconds(System.Double)">
      <summary>
                    Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of milliseconds.
                </summary>
      <returns>
                    A <see cref="T:System.TimeSpan" /> that represents <paramref name="value" />.
                </returns>
      <param name="value">
                    A number of milliseconds. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.
                
                    -or-
                <paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.
                
                    -or-
                <paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />. 
                </exception>
    </member>
    <member name="M:System.TimeSpan.FromMinutes(System.Double)">
      <summary>
                    Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of minutes, where the specification is accurate to the nearest millisecond.
                </summary>
      <returns>
                    A <see cref="T:System.TimeSpan" /> that represents <paramref name="value" />.
                </returns>
      <param name="value">
                    A number of minutes, accurate to the nearest millisecond. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.
                
                    -or-
                <paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.
                
                    -or-
                <paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />. 
                </exception>
    </member>
    <member name="M:System.TimeSpan.FromSeconds(System.Double)">
      <summary>
                    Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of seconds, where the specification is accurate to the nearest millisecond.
                </summary>
      <returns>
                    A <see cref="T:System.TimeSpan" /> that represents <paramref name="value" />.
                </returns>
      <param name="value">
                    A number of seconds, accurate to the nearest millisecond. 
                </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.
                
                    -or-
                <paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.
                
                    -or-
                <paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />. 
                </exception>
    </member>
    <member name="M:System.TimeSpan.FromTicks(System.Int64)">
      <summary>
                    Returns a <see cref="T:System.TimeSpan" /> that represents a specified time, where the specification is in units of ticks.
                </summary>
      <returns>
                    A <see cref="T:System.TimeSpan" /> with a value of <paramref name="value" />.
                </returns>
      <param name="value">
                    A number of ticks that represent a time. 
                </param>
    </member>
    <member name="M:System.TimeSpan.GetHashCode">
      <summary>
                    Returns a hash code for this instance.
                </summary>
      <returns>
                    A 32-bit signed integer hash code.
                </returns>
    </member>
    <member name="P:System.TimeSpan.Hours">
      <summary>
                    Gets the hour component of the time interval represented by the current <see cref="T:System.TimeSpan" /> structure.
                </summary>
      <returns>
                    The hour component of the current <see cref="T:System.TimeSpan" /> structure. The return value ranges from -23 through 23.
                </returns>
    </member>
    <member name="F:System.TimeSpan.MaxValue">
      <summary>
                    Represents the maximum <see cref="T:System.TimeSpan" /> value. This field is read-only.
                </summary>
    </member>
    <member name="P:System.TimeSpan.Milliseconds">
      <summary>
                    Gets the millisecond component of the time interval represented by the current <see cref="T:System.TimeSpan" /> structure.
                </summary>
      <returns>
                    The millisecond component of the current <see cref="T:System.TimeSpan" /> structure. The return value ranges from -999 through 999.
                </returns>
    </member>
    <member name="P:System.TimeSpan.Minutes">
      <summary>
                    Gets the minute component of the time interval represented by the current <see cref="T:System.TimeSpan" /> structure.
                </summary>
      <returns>
                    The minute component of the current <see cref="T:System.TimeSpan" /> structure. The return value ranges from -59 through 59.
                </returns>
    </member>
    <member name="F:System.TimeSpan.MinValue">
      <summary>
                    Represents the minimum <see cref="T:System.TimeSpan" /> value. This field is read-only.
                </summary>
    </member>
    <member name="M:System.TimeSpan.Negate">
      <summary>
                    Returns a <see cref="T:System.TimeSpan" /> whose value is the negated value of this instance.
                </summary>
      <returns>
                    The same numeric value as this instance, but with the opposite sign.
                </returns>
      <exception cref="T:System.OverflowException">
                    The negated value of this instance cannot be represented by a <see cref="T:System.TimeSpan" />; that is, the value of this instance is <see cref="F:System.TimeSpan.MinValue" />. 
                </exception>
    </member>
    <member name="M:System.TimeSpan.op_Addition(System.TimeSpan,System.TimeSpan)">
      <summary>
                    Adds two specified <see cref="T:System.TimeSpan" /> instances.
                </summary>
      <returns>
                    A <see cref="T:System.TimeSpan" /> whose value is the sum of the values of <paramref name="t1" /> and <paramref name="t2" />.
                </returns>
      <param name="t1">
                    A <see cref="T:System.TimeSpan" />. 
                </param>
      <param name="t2">
                    A TimeSpan. 
                </param>
      <exception cref="T:System.OverflowException">
                    The resulting <see cref="T:System.TimeSpan" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.TimeSpan.op_Equality(System.TimeSpan,System.TimeSpan)">
      <summary>
                    Indicates whether two <see cref="T:System.TimeSpan" /> instances are equal.
                </summary>
      <returns>true if the values of <paramref name="t1" /> and <paramref name="t2" /> are equal; otherwise, false.
                </returns>
      <param name="t1">
                    A <see cref="T:System.TimeSpan" />. 
                </param>
      <param name="t2">
                    A TimeSpan. 
                </param>
    </member>
    <member name="M:System.TimeSpan.op_GreaterThan(System.TimeSpan,System.TimeSpan)">
      <summary>
                    Indicates whether a specified <see cref="T:System.TimeSpan" /> is greater than another specified <see cref="T:System.TimeSpan" />.
                </summary>
      <returns>true if the value of <paramref name="t1" /> is greater than the value of <paramref name="t2" />; otherwise, false.
                </returns>
      <param name="t1">
                    A <see cref="T:System.TimeSpan" />. 
                </param>
      <param name="t2">
                    A TimeSpan. 
                </param>
    </member>
    <member name="M:System.TimeSpan.op_GreaterThanOrEqual(System.TimeSpan,System.TimeSpan)">
      <summary>
                    Indicates whether a specified <see cref="T:System.TimeSpan" /> is greater than or equal to another specified <see cref="T:System.TimeSpan" />.
                </summary>
      <returns>true if the value of <paramref name="t1" /> is greater than or equal to the value of <paramref name="t2" />; otherwise, false.
                </returns>
      <param name="t1">
                    A <see cref="T:System.TimeSpan" />. 
                </param>
      <param name="t2">
                    A TimeSpan. 
                </param>
    </member>
    <member name="M:System.TimeSpan.op_Inequality(System.TimeSpan,System.TimeSpan)">
      <summary>
                    Indicates whether two <see cref="T:System.TimeSpan" /> instances are not equal.
                </summary>
      <returns>true if the values of <paramref name="t1" /> and <paramref name="t2" /> are not equal; otherwise, false.
                </returns>
      <param name="t1">
                    A <see cref="T:System.TimeSpan" />. 
                </param>
      <param name="t2">
                    A TimeSpan. 
                </param>
    </member>
    <member name="M:System.TimeSpan.op_LessThan(System.TimeSpan,System.TimeSpan)">
      <summary>
                    Indicates whether a specified <see cref="T:System.TimeSpan" /> is less than another specified <see cref="T:System.TimeSpan" />.
                </summary>
      <returns>true if the value of <paramref name="t1" /> is less than the value of <paramref name="t2" />; otherwise, false.
                </returns>
      <param name="t1">
                    A <see cref="T:System.TimeSpan" />. 
                </param>
      <param name="t2">
                    A TimeSpan. 
                </param>
    </member>
    <member name="M:System.TimeSpan.op_LessThanOrEqual(System.TimeSpan,System.TimeSpan)">
      <summary>
                    Indicates whether a specified <see cref="T:System.TimeSpan" /> is less than or equal to another specified <see cref="T:System.TimeSpan" />.
                </summary>
      <returns>true if the value of <paramref name="t1" /> is less than or equal to the value of <paramref name="t2" />; otherwise, false.
                </returns>
      <param name="t1">
                    A <see cref="T:System.TimeSpan" />. 
                </param>
      <param name="t2">
                    A TimeSpan. 
                </param>
    </member>
    <member name="M:System.TimeSpan.op_Subtraction(System.TimeSpan,System.TimeSpan)">
      <summary>
                    Subtracts a specified <see cref="T:System.TimeSpan" /> from another specified <see cref="T:System.TimeSpan" />.
                </summary>
      <returns>
                    A TimeSpan whose value is the result of the value of <paramref name="t1" /> minus the value of <paramref name="t2" />.
                </returns>
      <param name="t1">
                    A <see cref="T:System.TimeSpan" />. 
                </param>
      <param name="t2">
                    A TimeSpan. 
                </param>
      <exception cref="T:System.OverflowException">
                    The return value is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.TimeSpan.op_UnaryNegation(System.TimeSpan)">
      <summary>
                    Returns a <see cref="T:System.TimeSpan" /> whose value is the negated value of the specified instance.
                </summary>
      <returns>
                    A <see cref="T:System.TimeSpan" /> with the same numeric value as this instance, but the opposite sign.
                </returns>
      <param name="t">
                    A <see cref="T:System.TimeSpan" />. 
                </param>
      <exception cref="T:System.OverflowException">
                    The negated value of this instance cannot be represented by a <see cref="T:System.TimeSpan" />; that is, the value of this instance is <see cref="F:System.TimeSpan.MinValue" />. 
                </exception>
    </member>
    <member name="M:System.TimeSpan.op_UnaryPlus(System.TimeSpan)">
      <summary>
                    Returns the specified instance of <see cref="T:System.TimeSpan" />.
                </summary>
      <returns>
                    Returns <paramref name="t" /> unchanged.
                </returns>
      <param name="t">
                    A <see cref="T:System.TimeSpan" />. 
                </param>
    </member>
    <member name="M:System.TimeSpan.Parse(System.String)">
      <summary>
                    Constructs a new <see cref="T:System.TimeSpan" /> object from a time interval specified in a string.
                </summary>
      <returns>
                    A <see cref="T:System.TimeSpan" /> that corresponds to <paramref name="s" />.
                </returns>
      <param name="s">
                    A string that specifies a time interval. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> has an invalid format. 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.
                
                    -or- 
                
                    At least one of the days, hours, minutes, or seconds components is outside its valid range. 
                </exception>
    </member>
    <member name="P:System.TimeSpan.Seconds">
      <summary>
                    Gets the second component of the time interval represented by the current <see cref="T:System.TimeSpan" /> structure.
                </summary>
      <returns>
                    The second component of the current <see cref="T:System.TimeSpan" /> structure. The return value ranges from -59 through 59.
                </returns>
    </member>
    <member name="M:System.TimeSpan.Subtract(System.TimeSpan)">
      <summary>
                    Subtracts the specified <see cref="T:System.TimeSpan" /> from this instance.
                </summary>
      <returns>
                    A <see cref="T:System.TimeSpan" /> whose value is the result of the value of this instance minus the value of <paramref name="ts" />.
                </returns>
      <param name="ts">
                    A <see cref="T:System.TimeSpan" />. 
                </param>
      <exception cref="T:System.OverflowException">
                    The return value is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />. 
                </exception>
    </member>
    <member name="P:System.TimeSpan.Ticks">
      <summary>
                    Gets the number of ticks that represents the value of the current <see cref="T:System.TimeSpan" /> structure.
                </summary>
      <returns>
                    The number of ticks contained in this instance.
                </returns>
    </member>
    <member name="F:System.TimeSpan.TicksPerDay">
      <summary>
                    Represents the number of ticks in 1 day. This field is constant.
                </summary>
    </member>
    <member name="F:System.TimeSpan.TicksPerHour">
      <summary>
                    Represents the number of ticks in 1 hour. This field is constant.
                </summary>
    </member>
    <member name="F:System.TimeSpan.TicksPerMillisecond">
      <summary>
                    Represents the number of ticks in 1 millisecond. This field is constant.
                </summary>
    </member>
    <member name="F:System.TimeSpan.TicksPerMinute">
      <summary>
                    Represents the number of ticks in 1 minute. This field is constant.
                </summary>
    </member>
    <member name="F:System.TimeSpan.TicksPerSecond">
      <summary>
                    Represents the number of ticks in 1 second.
                </summary>
    </member>
    <member name="M:System.TimeSpan.ToString">
      <summary>
                    Returns the string representation of the value of this instance.
                </summary>
      <returns>
                    A string that represents the value of this instance. The return value is of the form: 
                
                    [-][d.]hh:mm:ss[.fffffff] 
                
                    Elements in square brackets ([ and ]) may not be included in the returned string. Colons and periods (: and.) are literal characters. The non-literal elements are listed in the following table.
                
                    Item 
                
                    Description 
                
                    "-" 
                
                    A minus sign, which indicates a negative time span. No sign is included for a positive time span.
                
                    "d" 
                
                    The number of days in the time span. This element is omitted if the time span is less than one day. 
                
                    "hh" 
                
                    The number of hours in the time span, ranging from 0 to 23. 
                
                    "mm" 
                
                    The number of minutes in the time span, ranging from 0 to 59. 
                
                    "ss" 
                
                    The number of seconds in the time span, ranging from 0 to 59. 
                
                    "ff" 
                
                    Fractional seconds in the time span. This element is omitted if the time span does not include fractional seconds. If present, fractional seconds are always expressed using 7 decimal digits. 
                Note:
					For more information about comparing the string representation of 
								
								<see cref="T:System.TimeSpan" /> and Oracle data types, see article Q324577, "System.TimeSpan Does Not Match Oracle 9i INTERVAL DAY TO SECOND Data Type," in the Microsoft Knowledge Base at http://support.microsoft.com.
							</returns>
    </member>
    <member name="P:System.TimeSpan.TotalDays">
      <summary>
                    Gets the value of the current <see cref="T:System.TimeSpan" /> structure expressed in whole and fractional days.
                </summary>
      <returns>
                    The total number of days represented by this instance.
                </returns>
    </member>
    <member name="P:System.TimeSpan.TotalHours">
      <summary>
                    Gets the value of the current <see cref="T:System.TimeSpan" /> structure expressed in whole and fractional hours.
                </summary>
      <returns>
                    The total number of hours represented by this instance.
                </returns>
    </member>
    <member name="P:System.TimeSpan.TotalMilliseconds">
      <summary>
                    Gets the value of the current <see cref="T:System.TimeSpan" /> structure expressed in whole and fractional milliseconds.
                </summary>
      <returns>
                    The total number of milliseconds represented by this instance.
                </returns>
    </member>
    <member name="P:System.TimeSpan.TotalMinutes">
      <summary>
                    Gets the value of the current <see cref="T:System.TimeSpan" /> structure expressed in whole and fractional minutes.
                </summary>
      <returns>
                    The total number of minutes represented by this instance.
                </returns>
    </member>
    <member name="P:System.TimeSpan.TotalSeconds">
      <summary>
                    Gets the value of the current <see cref="T:System.TimeSpan" /> structure expressed in whole and fractional seconds.
                </summary>
      <returns>
                    The total number of seconds represented by this instance.
                </returns>
    </member>
    <member name="M:System.TimeSpan.TryParse(System.String,System.TimeSpan@)">
      <summary>
                    Constructs a new <see cref="T:System.TimeSpan" /> object from a time interval specified in a string. Parameters specify the time interval and the variable where the new <see cref="T:System.TimeSpan" /> object is returned. 
                </summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false. This operation returns false if the <paramref name="s" /> parameter is null, has an invalid format, represents a time interval less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />, or has at least one days, hours, minutes, or seconds component outside its valid range.
                </returns>
      <param name="s">
                    A string that specifies a time interval.
                </param>
      <param name="result">
                    When this method returns, contains an object that represents the time interval specified by <paramref name="s" />, or <see cref="F:System.TimeSpan.Zero" /> if the conversion failed. This parameter is passed uninitialized.
                </param>
    </member>
    <member name="F:System.TimeSpan.Zero">
      <summary>
                    Represents the zero <see cref="T:System.TimeSpan" /> value. This field is read-only.
                </summary>
    </member>
    <member name="T:System.Type">
      <summary>
                    Represents type declarations: class types, interface types, array types, value types, enumeration types, type parameters, generic type definitions, and open or closed constructed generic types.
                </summary>
    </member>
    <member name="P:System.Type.Assembly">
      <summary>
                    Gets the <see cref="T:System.Reflection.Assembly" /> in which the type is declared. For generic types, gets the <see cref="T:System.Reflection.Assembly" /> in which the generic type is defined.
                </summary>
      <returns>
                    An <see cref="T:System.Reflection.Assembly" /> instance that describes the assembly containing the current type. For generic types, the instance describes the assembly that contains the generic type definition, not the assembly that creates and uses a particular constructed type.
                </returns>
    </member>
    <member name="P:System.Type.AssemblyQualifiedName">
      <summary>
                    Gets the assembly-qualified name of the <see cref="T:System.Type" />, which includes the name of the assembly from which the <see cref="T:System.Type" /> was loaded.
                </summary>
      <returns>
                    The assembly-qualified name of the <see cref="T:System.Type" />, which includes the name of the assembly from which the <see cref="T:System.Type" /> was loaded, or null if the current instance represents a generic type parameter.
                </returns>
    </member>
    <member name="P:System.Type.Attributes">
      <summary>
                    Gets the attributes associated with the <see cref="T:System.Type" />.
                </summary>
      <returns>
                    A <see cref="T:System.Reflection.TypeAttributes" /> object representing the attribute set of the <see cref="T:System.Type" />, unless the <see cref="T:System.Type" /> represents a generic type parameter, in which case the value is unspecified. 
                </returns>
    </member>
    <member name="P:System.Type.BaseType">
      <summary>
                    Gets the type from which the current <see cref="T:System.Type" /> directly inherits.
                </summary>
      <returns>
                    The <see cref="T:System.Type" /> from which the current <see cref="T:System.Type" /> directly inherits, or null if the current Type represents the <see cref="T:System.Object" /> class or an interface.
                </returns>
    </member>
    <member name="P:System.Type.ContainsGenericParameters">
      <summary>
                    Gets a value indicating whether the current <see cref="T:System.Type" /> object has type parameters that have not been replaced by specific types.
                </summary>
      <returns>true if the <see cref="T:System.Type" /> object is itself a generic type parameter or has type parameters for which specific types have not been supplied; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Type.DeclaringMethod">
      <summary>
                    Gets a <see cref="T:System.Reflection.MethodBase" /> that represents the declaring method, if the current <see cref="T:System.Type" /> represents a type parameter of a generic method.
                </summary>
      <returns>
                    If the current <see cref="T:System.Type" /> represents a type parameter of a generic method, a <see cref="T:System.Reflection.MethodBase" /> that represents declaring method; otherwise, null.
                </returns>
    </member>
    <member name="P:System.Type.DeclaringType">
      <summary>
                    Gets the type that declares the current nested type or generic type parameter.
                </summary>
      <returns>
                    A <see cref="T:System.Type" /> object representing the enclosing type, if the current type is a nested type; or the generic type definition, if the current type is a type parameter of a generic type; or the type that declares the generic method, if the current type is a type parameter of a generic method; otherwise, null.
                </returns>
    </member>
    <member name="P:System.Type.DefaultBinder">
      <summary>
                    Gets a reference to the default binder, which implements internal rules for selecting the appropriate members to be called by <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.
                </summary>
      <returns>
                    A reference to the default binder used by the system.
                </returns>
    </member>
    <member name="F:System.Type.Delimiter">
      <summary>
                    Separates names in the namespace of the <see cref="T:System.Type" />. This field is read-only.
                </summary>
    </member>
    <member name="F:System.Type.EmptyTypes">
      <summary>
                    Represents an empty array of type <see cref="T:System.Type" />. This field is read-only.
                </summary>
    </member>
    <member name="M:System.Type.Equals(System.Object)">
      <summary>
                    Determines if the underlying system type of the current <see cref="T:System.Type" /> is the same as the underlying system type of the specified <see cref="T:System.Object" />.
                </summary>
      <returns>true if the underlying system type of <paramref name="o" /> is the same as the underlying system type of the current <see cref="T:System.Type" />; otherwise, false. This method also returns false if the object specified by the <paramref name="o" /> parameter is not a Type.
                </returns>
      <param name="o">
                    The <see cref="T:System.Object" /> whose underlying system type is to be compared with the underlying system type of the current <see cref="T:System.Type" />. 
                </param>
    </member>
    <member name="M:System.Type.Equals(System.Type)">
      <summary>
                    Determines if the underlying system type of the current <see cref="T:System.Type" /> is the same as the underlying system type of the specified <see cref="T:System.Type" />.
                </summary>
      <returns>true if the underlying system type of <paramref name="o" /> is the same as the underlying system type of the current <see cref="T:System.Type" />; otherwise, false.
                </returns>
      <param name="o">
                    The <see cref="T:System.Type" /> whose underlying system type is to be compared with the underlying system type of the current <see cref="T:System.Type" />. 
                </param>
    </member>
    <member name="F:System.Type.FilterNameIgnoreCase">
      <summary>
                    Represents the case-insensitive member filter used on names. This field is read-only.
                </summary>
    </member>
    <member name="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)">
      <summary>
                    Returns a filtered array of <see cref="T:System.Reflection.MemberInfo" /> objects of the specified member type.
                </summary>
      <returns>
                    A filtered array of <see cref="T:System.Reflection.MemberInfo" /> objects of the specified member type.
                
                    -or- 
                
                    An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have members of type <paramref name="memberType" /> that match the filter criteria.
                </returns>
      <param name="memberType">
                    A MemberTypes object indicating the type of member to search for. 
                </param>
      <param name="bindingAttr">
                    A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.
                
                    -or- 
                
                    Zero, to return null. 
                </param>
      <param name="filter">
                    The delegate that does the comparisons, returning true if the member currently being inspected matches the <paramref name="filterCriteria" /> and false otherwise. You can use the FilterAttribute, FilterName, and FilterNameIgnoreCase delegates supplied by this class. The first uses the fields of FieldAttributes, MethodAttributes, and MethodImplAttributes as search criteria, and the other two delegates use String objects as the search criteria. 
                </param>
      <param name="filterCriteria">
                    The search criteria that determines whether a member is returned in the array of MemberInfo objects.
                
                    The fields of FieldAttributes, MethodAttributes, and MethodImplAttributes can be used in conjunction with the FilterAttribute delegate supplied by this class. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filter" /> is null. 
                </exception>
    </member>
    <member name="P:System.Type.FullName">
      <summary>
                    Gets the fully qualified name of the <see cref="T:System.Type" />, including the namespace of the <see cref="T:System.Type" /> but not the assembly.
                </summary>
      <returns>
                    The fully qualified name of the <see cref="T:System.Type" />, including the namespace of the <see cref="T:System.Type" /> but not the assembly; or null if the current instance represents a generic type parameter, an array type, pointer type, or byref type based on a type parameter, or a generic type that is not a generic type definition but contains unresolved type parameters.
                </returns>
    </member>
    <member name="P:System.Type.GenericParameterAttributes">
      <summary>
                    Gets a combination of <see cref="T:System.Reflection.GenericParameterAttributes" /> flags that describe the covariance and special constraints of the current generic type parameter. 
                </summary>
      <returns>
                    A bitwise combination of <see cref="T:System.Reflection.GenericParameterAttributes" /> values that describes the covariance and special constraints of the current generic type parameter.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The current <see cref="T:System.Type" /> object is not a generic type parameter. That is, the <see cref="P:System.Type.IsGenericParameter" /> property returns false.
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The invoked method is not supported in the base class.
                </exception>
    </member>
    <member name="P:System.Type.GenericParameterPosition">
      <summary>
                    Gets the position of the type parameter in the type parameter list of the generic type or method that declared the parameter, when the <see cref="T:System.Type" /> object represents a type parameter of a generic type or a generic method.
                </summary>
      <returns>
                    The position of a type parameter in the type parameter list of the generic type or method that defines the parameter. Position numbers begin at 0.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The current type does not represent a type parameter. That is, <see cref="P:System.Type.IsGenericParameter" /> returns false. 
                </exception>
    </member>
    <member name="M:System.Type.GetArrayRank">
      <summary>
                    Gets the number of dimensions in an <see cref="T:System.Array" />.
                </summary>
      <returns>
                    An <see cref="T:System.Int32" /> containing the number of dimensions in the current Type.
                </returns>
      <exception cref="T:System.NotSupportedException">
                    The functionality of this method is unsupported in the base class and must be implemented in a derived class instead. 
                </exception>
      <exception cref="T:System.ArgumentException">
                    The current Type is not an array. 
                </exception>
    </member>
    <member name="M:System.Type.GetAttributeFlagsImpl">
      <summary>
                    When overridden in a derived class, implements the <see cref="P:System.Type.Attributes" /> property and gets a bitmask indicating the attributes associated with the <see cref="T:System.Type" />.
                </summary>
      <returns>
                    A <see cref="T:System.Reflection.TypeAttributes" /> object representing the attribute set of the <see cref="T:System.Type" />.
                </returns>
    </member>
    <member name="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>
                    Searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints.
                </summary>
      <returns>
                    A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the constructor that matches the specified requirements, if found; otherwise, null.
                </returns>
      <param name="bindingAttr">
                    A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.
                
                    -or- 
                
                    Zero, to return null. 
                </param>
      <param name="binder">
                    A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.
                
                    -or- 
                null, to use the <see cref="P:System.Type.DefaultBinder" />. 
                </param>
      <param name="types">
                    An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.
                
                    -or- 
                
                    An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.
                
                    -or- 
                <see cref="F:System.Type.EmptyTypes" />. 
                </param>
      <param name="modifiers">
                    An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the parameter type array. The default binder does not process this parameter. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="types" /> is null.
                
                    -or- 
                
                    One of the elements in <paramref name="types" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional.
                
                    -or- 
                <paramref name="modifiers" /> is multidimensional.
                
                    -or- 
                <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length. 
                </exception>
    </member>
    <member name="M:System.Type.GetConstructor(System.Type[])">
      <summary>
                    Searches for a public instance constructor whose parameters match the types in the specified array.
                </summary>
      <returns>
                    A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the public instance constructor whose parameters match the types in the parameter type array, if found; otherwise, null.
                </returns>
      <param name="types">
                    An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the desired constructor.
                
                    -or- 
                
                    An empty array of <see cref="T:System.Type" /> objects, to get a constructor that takes no parameters. Such an empty array is provided by the static field <see cref="F:System.Type.EmptyTypes" />. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="types" /> is null.
                
                    -or- 
                
                    One of the elements in <paramref name="types" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional. 
                </exception>
    </member>
    <member name="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>
                    When overridden in a derived class, searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.
                </summary>
      <returns>
                    A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the constructor that matches the specified requirements, if found; otherwise, null.
                </returns>
      <param name="bindingAttr">
                    A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.
                
                    -or- 
                
                    Zero, to return null. 
                </param>
      <param name="binder">
                    A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.
                
                    -or- 
                null, to use the <see cref="P:System.Type.DefaultBinder" />. 
                </param>
      <param name="callConvention">
                    The <see cref="T:System.Reflection.CallingConventions" /> object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and the stack is cleaned up. 
                </param>
      <param name="types">
                    An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.
                
                    -or- 
                
                    An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters. 
                </param>
      <param name="modifiers">
                    An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. The default binder does not process this parameter. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="types" /> is null.
                
                    -or- 
                
                    One of the elements in <paramref name="types" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional.
                
                    -or- 
                <paramref name="modifiers" /> is multidimensional.
                
                    -or- 
                <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length. 
                </exception>
    </member>
    <member name="M:System.Type.GetConstructors">
      <summary>
                    Returns all the public constructors defined for the current <see cref="T:System.Type" />.
                </summary>
      <returns>
                    An array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing all the public instance constructors defined for the current <see cref="T:System.Type" />, but not including the type initializer (static constructor). If no public instance constructors are defined for the current <see cref="T:System.Type" />, or if the current <see cref="T:System.Type" /> represents a type parameter in the definition of a generic type or generic method, an empty array of type <see cref="T:System.Reflection.ConstructorInfo" /> is returned.
                </returns>
    </member>
    <member name="M:System.Type.GetConstructors(System.Reflection.BindingFlags)">
      <summary>
                    When overridden in a derived class, searches for the constructors defined for the current <see cref="T:System.Type" />, using the specified BindingFlags.
                </summary>
      <returns>
                    An array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing all constructors defined for the current <see cref="T:System.Type" /> that match the specified binding constraints, including the type initializer if it is defined. Returns an empty array of type <see cref="T:System.Reflection.ConstructorInfo" /> if no constructors are defined for the current <see cref="T:System.Type" />, if none of the defined constructors match the binding constraints, or if the current <see cref="T:System.Type" /> represents a type parameter in the definition of a generic type or generic method.
                </returns>
      <param name="bindingAttr">
                    A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.
                
                    -or- 
                
                    Zero, to return null. 
                </param>
    </member>
    <member name="M:System.Type.GetDefaultMembers">
      <summary>
                    Searches for the members defined for the current <see cref="T:System.Type" /> whose <see cref="T:System.Reflection.DefaultMemberAttribute" /> is set.
                </summary>
      <returns>
                    An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all default members of the current <see cref="T:System.Type" />.
                
                    -or- 
                
                    An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have default members.
                </returns>
    </member>
    <member name="M:System.Type.GetElementType">
      <summary>
                    When overridden in a derived class, returns the <see cref="T:System.Type" /> of the object encompassed or referred to by the current array, pointer or reference type.
                </summary>
      <returns>
                    The <see cref="T:System.Type" /> of the object encompassed or referred to by the current array, pointer, or reference type, or null if the current <see cref="T:System.Type" /> is not an array or a pointer, or is not passed by reference, or represents a generic type or a type parameter in the definition of a generic type or generic method.
                </returns>
    </member>
    <member name="M:System.Type.GetEvent(System.String)">
      <summary>
                    Returns the <see cref="T:System.Reflection.EventInfo" /> object representing the specified public event.
                </summary>
      <returns>
                    The <see cref="T:System.Reflection.EventInfo" /> object representing the specified public event which is declared or inherited by the current <see cref="T:System.Type" />, if found; otherwise, null.
                </returns>
      <param name="name">
                    The <see cref="T:System.String" /> containing the name of an event which is declared or inherited by the current <see cref="T:System.Type" />. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. 
                </exception>
    </member>
    <member name="M:System.Type.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary>
                    When overridden in a derived class, returns the <see cref="T:System.Reflection.EventInfo" /> object representing the specified event, using the specified binding constraints.
                </summary>
      <returns>
                    The <see cref="T:System.Reflection.EventInfo" /> object representing the specified event which is declared or inherited by the current <see cref="T:System.Type" />, if found; otherwise, null.
                </returns>
      <param name="name">
                    The <see cref="T:System.String" /> containing the name of an event which is declared or inherited by the current <see cref="T:System.Type" />. 
                </param>
      <param name="bindingAttr">
                    A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.
                
                    -or- 
                
                    Zero, to return null. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. 
                </exception>
    </member>
    <member name="M:System.Type.GetEvents">
      <summary>
                    Returns all the public events that are declared or inherited by the current <see cref="T:System.Type" />.
                </summary>
      <returns>
                    An array of <see cref="T:System.Reflection.EventInfo" /> objects representing all the public events which are declared or inherited by the current <see cref="T:System.Type" />.
                
                    -or- 
                
                    An empty array of type <see cref="T:System.Reflection.EventInfo" />, if the current <see cref="T:System.Type" /> does not have public events.
                </returns>
    </member>
    <member name="M:System.Type.GetEvents(System.Reflection.BindingFlags)">
      <summary>
                    When overridden in a derived class, searches for events that are declared or inherited by the current <see cref="T:System.Type" />, using the specified binding constraints.
                </summary>
      <returns>
                    An array of <see cref="T:System.Reflection.EventInfo" /> objects representing all events which are declared or inherited by the current <see cref="T:System.Type" /> that match the specified binding constraints.
                
                    -or- 
                
                    An empty array of type <see cref="T:System.Reflection.EventInfo" />, if the current <see cref="T:System.Type" /> does not have events, or if none of the events match the binding constraints.
                </returns>
      <param name="bindingAttr">
                    A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.
                
                    -or- 
                
                    Zero, to return null. 
                </param>
    </member>
    <member name="M:System.Type.GetField(System.String)">
      <summary>
                    Searches for the public field with the specified name.
                </summary>
      <returns>
                    A <see cref="T:System.Reflection.FieldInfo" /> object representing the public field with the specified name, if found; otherwise, null.
                </returns>
      <param name="name">
                    The <see cref="T:System.String" /> containing the name of the data field to get. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. 
                </exception>
      <exception cref="T:System.NotSupportedException">
                    This <see cref="T:System.Type" /> object is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> whose <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> method has not yet been called. 
                </exception>
    </member>
    <member name="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>
                    Searches for the specified field, using the specified binding constraints.
                </summary>
      <returns>
                    A <see cref="T:System.Reflection.FieldInfo" /> object representing the field that matches the specified requirements, if found; otherwise, null.
                </returns>
      <param name="name">
                    The <see cref="T:System.String" /> containing the name of the data field to get. 
                </param>
      <param name="bindingAttr">
                    A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.
                
                    -or- 
                
                    Zero, to return null. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. 
                </exception>
    </member>
    <member name="M:System.Type.GetFields">
      <summary>
                    Returns all the public fields of the current <see cref="T:System.Type" />.
                </summary>
      <returns>
                    An array of <see cref="T:System.Reflection.FieldInfo" /> objects representing all the public fields defined for the current <see cref="T:System.Type" />.
                
                    -or- 
                
                    An empty array of type <see cref="T:System.Reflection.FieldInfo" />, if no public fields are defined for the current <see cref="T:System.Type" />.
                </returns>
    </member>
    <member name="M:System.Type.GetFields(System.Reflection.BindingFlags)">
      <summary>
                    When overridden in a derived class, searches for the fields defined for the current <see cref="T:System.Type" />, using the specified binding constraints.
                </summary>
      <returns>
                    An array of <see cref="T:System.Reflection.FieldInfo" /> objects representing all fields defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.
                
                    -or- 
                
                    An empty array of type <see cref="T:System.Reflection.FieldInfo" />, if no fields are defined for the current <see cref="T:System.Type" />, or if none of the defined fields match the binding constraints.
                </returns>
      <param name="bindingAttr">
                    A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.
                
                    -or- 
                
                    Zero, to return null. 
                </param>
    </member>
    <member name="M:System.Type.GetGenericArguments">
      <summary>
                    Returns an array of <see cref="T:System.Type" /> objects that represent the type arguments of a generic type or the type parameters of a generic type definition.
                </summary>
      <returns>
                    An array of <see cref="T:System.Type" /> objects that represent the type arguments of a generic type. Returns an empty array if the current type is not a generic type.
                </returns>
    </member>
    <member name="M:System.Type.GetGenericParameterConstraints">
      <summary>
                    Returns an array of <see cref="T:System.Type" /> objects that represent the constraints on the current generic type parameter. 
                </summary>
      <returns>
                    An array of <see cref="T:System.Type" /> objects that represent the constraints on the current generic type parameter.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The current <see cref="T:System.Type" /> object is not a generic type parameter. That is, the <see cref="P:System.Type.IsGenericParameter" /> property returns false.
                </exception>
    </member>
    <member name="M:System.Type.GetGenericTypeDefinition">
      <summary>
                    Returns a <see cref="T:System.Type" /> object that represents a generic type definition from which the current generic type can be constructed.
                </summary>
      <returns>
                    A <see cref="T:System.Type" /> object representing a generic type from which the current type can be constructed.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The current type is not a generic type.  That is, <see cref="P:System.Type.IsGenericType" /> returns false. 
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The invoked method is not supported in the base class. Derived classes must provide an implementation.
                </exception>
    </member>
    <member name="M:System.Type.GetHashCode">
      <summary>
                    Returns the hash code for this instance.
                </summary>
      <returns>
                    An <see cref="T:System.Int32" /> containing the hash code for this instance.
                </returns>
    </member>
    <member name="M:System.Type.GetInterface(System.String,System.Boolean)">
      <summary>
                    When overridden in a derived class, searches for the specified interface, specifying whether to do a case-insensitive search for the interface name.
                </summary>
      <returns>
                    A <see cref="T:System.Type" /> object representing the interface with the specified name, implemented or inherited by the current <see cref="T:System.Type" />, if found; otherwise, null.
                </returns>
      <param name="name">
                    The <see cref="T:System.String" /> containing the name of the interface to get. For generic interfaces, this is the mangled name.
                </param>
      <param name="ignoreCase">true to ignore the case of that part of <paramref name="name" /> that specifies the simple interface name (the part that specifies the namespace must be correctly cased).
                
                    -or- 
                false to perform a case-sensitive search for all parts of <paramref name="name" />. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. 
                </exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">
                    The current <see cref="T:System.Type" /> represents a type that implements the same generic interface with different type arguments. 
                </exception>
    </member>
    <member name="M:System.Type.GetInterfaceMap(System.Type)">
      <summary>
                    Returns an interface mapping for the specified interface type.
                </summary>
      <returns>
                    An <see cref="T:System.Reflection.InterfaceMapping" /> object representing the interface mapping for <paramref name="interfaceType" />.
                </returns>
      <param name="interfaceType">
                    The <see cref="T:System.Type" /> of the interface of which to retrieve a mapping. 
                </param>
      <exception cref="T:System.ArgumentException">
                    The <paramref name="interfaceType" /> parameter does not refer to an interface. 
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="interfaceType" /> is null. 
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The current <see cref="T:System.Type" /> represents a generic type parameter; that is, <see cref="P:System.Type.IsGenericParameter" /> is true.
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The invoked method is not supported in the base class. Derived classes must provide an implementation.
                </exception>
    </member>
    <member name="M:System.Type.GetInterfaces">
      <summary>
                    When overridden in a derived class, gets all the interfaces implemented or inherited by the current <see cref="T:System.Type" />.
                </summary>
      <returns>
                    An array of <see cref="T:System.Type" /> objects representing all the interfaces implemented or inherited by the current <see cref="T:System.Type" />.
                
                    -or- 
                
                    An empty array of type <see cref="T:System.Type" />, if no interfaces are implemented or inherited by the current <see cref="T:System.Type" />.
                </returns>
      <exception cref="T:System.Reflection.TargetInvocationException">
                    A static initializer is invoked and throws an exception. 
                </exception>
    </member>
    <member name="M:System.Type.GetMember(System.String)">
      <summary>
                    Searches for the public members with the specified name.
                </summary>
      <returns>
                    An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.
                </returns>
      <param name="name">
                    The <see cref="T:System.String" /> containing the name of the public members to get. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. 
                </exception>
    </member>
    <member name="M:System.Type.GetMember(System.String,System.Reflection.BindingFlags)">
      <summary>
                    Searches for the specified members, using the specified binding constraints.
                </summary>
      <returns>
                    An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.
                </returns>
      <param name="name">
                    The <see cref="T:System.String" /> containing the name of the members to get. 
                </param>
      <param name="bindingAttr">
                    A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.
                
                    -or- 
                
                    Zero, to return an empty array. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. 
                </exception>
    </member>
    <member name="M:System.Type.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary>
                    Searches for the specified members of the specified member type, using the specified binding constraints.
                </summary>
      <returns>
                    An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.
                </returns>
      <param name="name">
                    The <see cref="T:System.String" /> containing the name of the members to get. 
                </param>
      <param name="type">
                    The <see cref="T:System.Reflection.MemberTypes" /> value to search for. 
                </param>
      <param name="bindingAttr">
                    A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.
                
                    -or- 
                
                    Zero, to return an empty array. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. 
                </exception>
      <exception cref="T:System.NotSupportedException">
                    A derived class must provide an implementation. 
                </exception>
    </member>
    <member name="M:System.Type.GetMembers">
      <summary>
                    Returns all the public members of the current <see cref="T:System.Type" />.
                </summary>
      <returns>
                    An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all the public members of the current <see cref="T:System.Type" />.
                
                    -or- 
                
                    An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have public members.
                </returns>
    </member>
    <member name="M:System.Type.GetMembers(System.Reflection.BindingFlags)">
      <summary>
                    When overridden in a derived class, searches for the members defined for the current <see cref="T:System.Type" />, using the specified binding constraints.
                </summary>
      <returns>
                    An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all members defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.
                
                    -or- 
                
                    An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if no members are defined for the current <see cref="T:System.Type" />, or if none of the defined members match the binding constraints.
                </returns>
      <param name="bindingAttr">
                    A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.
                
                    -or- 
                
                    Zero, to return null. 
                </param>
    </member>
    <member name="M:System.Type.GetMethod(System.String)">
      <summary>
                    Searches for the public method with the specified name.
                </summary>
      <returns>
                    A <see cref="T:System.Reflection.MethodInfo" /> object representing the public method with the specified name, if found; otherwise, null.
                </returns>
      <param name="name">
                    The <see cref="T:System.String" /> containing the name of the public method to get. 
                </param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">
                    More than one method is found with the specified name. 
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. 
                </exception>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags)">
      <summary>
                    Searches for the specified method, using the specified binding constraints.
                </summary>
      <returns>
                    A <see cref="T:System.Reflection.MethodInfo" /> object representing the method that matches the specified requirements, if found; otherwise, null.
                </returns>
      <param name="name">
                    The <see cref="T:System.String" /> containing the name of the method to get. 
                </param>
      <param name="bindingAttr">
                    A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.
                
                    -or- 
                
                    Zero, to return null. 
                </param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">
                    More than one method is found with the specified name and matching the specified binding constraints. 
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. 
                </exception>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>
                    Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.
                </summary>
      <returns>
                    A <see cref="T:System.Reflection.MethodInfo" /> object representing the method that matches the specified requirements, if found; otherwise, null.
                </returns>
      <param name="name">
                    The <see cref="T:System.String" /> containing the name of the method to get. 
                </param>
      <param name="bindingAttr">
                    A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.
                
                    -or- 
                
                    Zero, to return null. 
                </param>
      <param name="binder">
                    A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.
                
                    -or- 
                null, to use the <see cref="P:System.Type.DefaultBinder" />. 
                </param>
      <param name="callConvention">
                    The <see cref="T:System.Reflection.CallingConventions" /> object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and how the stack is cleaned up. 
                </param>
      <param name="types">
                    An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.
                
                    -or- 
                
                    An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters. 
                </param>
      <param name="modifiers">
                    An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. To be only used when calling through COM interop, and only parameters that are passed by reference are handled. The default binder does not process this parameter. 
                </param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">
                    More than one method is found with the specified name and matching the specified binding constraints. 
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.
                
                    -or- 
                <paramref name="types" /> is null.
                
                    -or- 
                
                    One of the elements in <paramref name="types" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional.
                
                    -or- 
                <paramref name="modifiers" /> is multidimensional. 
                </exception>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>
                    Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints.
                </summary>
      <returns>
                    A <see cref="T:System.Reflection.MethodInfo" /> object representing the method that matches the specified requirements, if found; otherwise, null.
                </returns>
      <param name="name">
                    The <see cref="T:System.String" /> containing the name of the method to get. 
                </param>
      <param name="bindingAttr">
                    A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.
                
                    -or- 
                
                    Zero, to return null. 
                </param>
      <param name="binder">
                    A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.
                
                    -or- 
                null, to use the <see cref="P:System.Type.DefaultBinder" />. 
                </param>
      <param name="types">
                    An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.
                
                    -or- 
                
                    An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters. 
                </param>
      <param name="modifiers">
                    An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. To be only used when calling through COM interop, and only parameters that are passed by reference are handled. The default binder does not process this parameter.
                </param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">
                    More than one method is found with the specified name and matching the specified binding constraints. 
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.
                
                    -or- 
                <paramref name="types" /> is null.
                
                    -or- 
                
                    One of the elements in <paramref name="types" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional.
                
                    -or- 
                <paramref name="modifiers" /> is multidimensional. 
                </exception>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Type[])">
      <summary>
                    Searches for the specified public method whose parameters match the specified argument types.
                </summary>
      <returns>
                    A <see cref="T:System.Reflection.MethodInfo" /> object representing the public method whose parameters match the specified argument types, if found; otherwise, null.
                </returns>
      <param name="name">
                    The <see cref="T:System.String" /> containing the name of the public method to get. 
                </param>
      <param name="types">
                    An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.
                
                    -or- 
                
                    An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters. 
                </param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">
                    More than one method is found with the specified name and specified parameters. 
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.
                
                    -or- 
                <paramref name="types" /> is null.
                
                    -or- 
                
                    One of the elements in <paramref name="types" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional. 
                </exception>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>
                    Searches for the specified public method whose parameters match the specified argument types and modifiers.
                </summary>
      <returns>
                    A <see cref="T:System.Reflection.MethodInfo" /> object representing the public method that matches the specified requirements, if found; otherwise, null.
                </returns>
      <param name="name">
                    The <see cref="T:System.String" /> containing the name of the public method to get. 
                </param>
      <param name="types">
                    An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.
                
                    -or- 
                
                    An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters. 
                </param>
      <param name="modifiers">
                    An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. To be only used when calling through COM interop, and only parameters that are passed by reference are handled. The default binder does not process this parameter.  
                </param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">
                    More than one method is found with the specified name and specified parameters. 
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.
                
                    -or- 
                <paramref name="types" /> is null.
                
                    -or- 
                
                    One of the elements in <paramref name="types" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional.
                
                    -or- 
                <paramref name="modifiers" /> is multidimensional. 
                </exception>
    </member>
    <member name="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>
                    When overridden in a derived class, searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.
                </summary>
      <returns>
                    A <see cref="T:System.Reflection.MethodInfo" /> object representing the method that matches the specified requirements, if found; otherwise, null.
                </returns>
      <param name="name">
                    The <see cref="T:System.String" /> containing the name of the method to get. 
                </param>
      <param name="bindingAttr">
                    A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.
                
                    -or- 
                
                    Zero, to return null. 
                </param>
      <param name="binder">
                    A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.
                
                    -or- 
                null, to use the <see cref="P:System.Type.DefaultBinder" />. 
                </param>
      <param name="callConvention">
                    The <see cref="T:System.Reflection.CallingConventions" /> object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and what process cleans up the stack. 
                </param>
      <param name="types">
                    An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.
                
                    -or- 
                
                    An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.
                
                    -or- 
                null. If <paramref name="types" /> is null, arguments are not matched. 
                </param>
      <param name="modifiers">
                    An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. The default binder does not process this parameter. 
                </param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">
                    More than one method is found with the specified name and matching the specified binding constraints. 
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional.
                
                    -or- 
                <paramref name="modifiers" /> is multidimensional.
                
                    -or- 
                <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length. 
                </exception>
    </member>
    <member name="M:System.Type.GetMethods">
      <summary>
                    Returns all the public methods of the current <see cref="T:System.Type" />.
                </summary>
      <returns>
                    An array of <see cref="T:System.Reflection.MethodInfo" /> objects representing all the public methods defined for the current <see cref="T:System.Type" />.
                
                    -or- 
                
                    An empty array of type <see cref="T:System.Reflection.MethodInfo" />, if no public methods are defined for the current <see cref="T:System.Type" />.
                </returns>
    </member>
    <member name="M:System.Type.GetMethods(System.Reflection.BindingFlags)">
      <summary>
                    When overridden in a derived class, searches for the methods defined for the current <see cref="T:System.Type" />, using the specified binding constraints.
                </summary>
      <returns>
                    An array of <see cref="T:System.Reflection.MethodInfo" /> objects representing all methods defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.
                
                    -or- 
                
                    An empty array of type <see cref="T:System.Reflection.MethodInfo" />, if no methods are defined for the current <see cref="T:System.Type" />, or if none of the defined methods match the binding constraints.
                </returns>
      <param name="bindingAttr">
                    A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.
                
                    -or- 
                
                    Zero, to return null. 
                </param>
    </member>
    <member name="M:System.Type.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary>
                    When overridden in a derived class, searches for the specified nested type, using the specified binding constraints.
                </summary>
      <returns>
                    A <see cref="T:System.Type" /> object representing the nested type that matches the specified requirements, if found; otherwise, null.
                </returns>
      <param name="name">
                    The string containing the name of the nested type to get. 
                </param>
      <param name="bindingAttr">
                    A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.
                
                    -or- 
                
                    Zero, to return null. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. 
                </exception>
    </member>
    <member name="M:System.Type.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary>
                    When overridden in a derived class, searches for the types nested in the current <see cref="T:System.Type" />, using the specified binding constraints.
                </summary>
      <returns>
                    An array of <see cref="T:System.Type" /> objects representing all the types nested in the current <see cref="T:System.Type" /> that match the specified binding constraints (the search is not recursive), or an empty array of type <see cref="T:System.Type" />, if no nested types are found that match the binding constraints.
                </returns>
      <param name="bindingAttr">
                    A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.
                
                    -or- 
                
                    Zero, to return null. 
                </param>
    </member>
    <member name="M:System.Type.GetProperties">
      <summary>
                    Returns all the public properties of the current <see cref="T:System.Type" />.
                </summary>
      <returns>
                    An array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing all public properties of the current <see cref="T:System.Type" />.
                
                    -or- 
                
                    An empty array of type <see cref="T:System.Reflection.PropertyInfo" />, if the current <see cref="T:System.Type" /> does not have public properties.
                </returns>
    </member>
    <member name="M:System.Type.GetProperties(System.Reflection.BindingFlags)">
      <summary>
                    When overridden in a derived class, searches for the properties of the current <see cref="T:System.Type" />, using the specified binding constraints.
                </summary>
      <returns>
                    An array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing all properties of the current <see cref="T:System.Type" /> that match the specified binding constraints.
                
                    -or- 
                
                    An empty array of type <see cref="T:System.Reflection.PropertyInfo" />, if the current <see cref="T:System.Type" /> does not have properties, or if none of the properties match the binding constraints.
                </returns>
      <param name="bindingAttr">
                    A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.
                
                    -or- 
                
                    Zero, to return null. 
                </param>
    </member>
    <member name="M:System.Type.GetProperty(System.String)">
      <summary>
                    Searches for the public property with the specified name.
                </summary>
      <returns>
                    A <see cref="T:System.Reflection.PropertyInfo" /> object representing the public property with the specified name, if found; otherwise, null.
                </returns>
      <param name="name">
                    The <see cref="T:System.String" /> containing the name of the public property to get. 
                </param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">
                    More than one property is found with the specified name. See Remarks.
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. 
                </exception>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags)">
      <summary>
                    Searches for the specified property, using the specified binding constraints.
                </summary>
      <returns>
                    A <see cref="T:System.Reflection.PropertyInfo" /> object representing the property that matches the specified requirements, if found; otherwise, null.
                </returns>
      <param name="name">
                    The <see cref="T:System.String" /> containing the name of the property to get. 
                </param>
      <param name="bindingAttr">
                    A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.
                
                    -or- 
                
                    Zero, to return null. 
                </param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">
                    More than one property is found with the specified name and matching the specified binding constraints. See Remarks.
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. 
                </exception>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>
                    Searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.
                </summary>
      <returns>
                    A <see cref="T:System.Reflection.PropertyInfo" /> object representing the property that matches the specified requirements, if found; otherwise, null.
                </returns>
      <param name="name">
                    The <see cref="T:System.String" /> containing the name of the property to get. 
                </param>
      <param name="bindingAttr">
                    A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.
                
                    -or- 
                
                    Zero, to return null. 
                </param>
      <param name="binder">
                    A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.
                
                    -or- 
                null, to use the <see cref="P:System.Type.DefaultBinder" />. 
                </param>
      <param name="returnType">
                    The return type of the property. 
                </param>
      <param name="types">
                    An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.
                
                    -or- 
                
                    An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed. 
                </param>
      <param name="modifiers">
                    An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. The default binder does not process this parameter. 
                </param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">
                    More than one property is found with the specified name and matching the specified binding constraints. 
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.
                
                    -or- 
                <paramref name="types" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional.
                
                    -or- 
                <paramref name="modifiers" /> is multidimensional.
                
                    -or- 
                <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length. 
                </exception>
      <exception cref="T:System.NullReferenceException">
                    An element of <paramref name="types" /> is null.
                </exception>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Type)">
      <summary>
                    Searches for the public property with the specified name and return type.
                </summary>
      <returns>
                    A <see cref="T:System.Reflection.PropertyInfo" /> object representing the public property with the specified name, if found; otherwise, null.
                </returns>
      <param name="name">
                    The <see cref="T:System.String" /> containing the name of the public property to get. 
                </param>
      <param name="returnType">
                    The return type of the property. 
                </param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">
                    More than one property is found with the specified name. 
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null, or <paramref name="returnType" /> is null. 
                </exception>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Type,System.Type[])">
      <summary>
                    Searches for the specified public property whose parameters match the specified argument types.
                </summary>
      <returns>
                    A <see cref="T:System.Reflection.PropertyInfo" /> object representing the public property whose parameters match the specified argument types, if found; otherwise, null.
                </returns>
      <param name="name">
                    The <see cref="T:System.String" /> containing the name of the public property to get. 
                </param>
      <param name="returnType">
                    The return type of the property. 
                </param>
      <param name="types">
                    An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.
                
                    -or- 
                
                    An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed. 
                </param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">
                    More than one property is found with the specified name and matching the specified argument types. 
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.
                
                    -or- 
                <paramref name="types" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional. 
                </exception>
      <exception cref="T:System.NullReferenceException">
                    An element of <paramref name="types" /> is null.
                </exception>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>
                    Searches for the specified public property whose parameters match the specified argument types and modifiers.
                </summary>
      <returns>
                    A <see cref="T:System.Reflection.PropertyInfo" /> object representing the public property that matches the specified requirements, if found; otherwise, null.
                </returns>
      <param name="name">
                    The <see cref="T:System.String" /> containing the name of the public property to get. 
                </param>
      <param name="returnType">
                    The return type of the property. 
                </param>
      <param name="types">
                    An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.
                
                    -or- 
                
                    An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed. 
                </param>
      <param name="modifiers">
                    An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. The default binder does not process this parameter. 
                </param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">
                    More than one property is found with the specified name and matching the specified argument types and modifiers. 
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.
                
                    -or- 
                <paramref name="types" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional.
                
                    -or- 
                <paramref name="modifiers" /> is multidimensional.
                
                    -or- 
                <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length. 
                </exception>
      <exception cref="T:System.NullReferenceException">
                    An element of <paramref name="types" /> is null.
                </exception>
    </member>
    <member name="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>
                    When overridden in a derived class, searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.
                </summary>
      <returns>
                    A <see cref="T:System.Reflection.PropertyInfo" /> object representing the property that matches the specified requirements, if found; otherwise, null.
                </returns>
      <param name="name">
                    The <see cref="T:System.String" /> containing the name of the property to get. 
                </param>
      <param name="bindingAttr">
                    A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.
                
                    -or- 
                
                    Zero, to return null. 
                </param>
      <param name="binder">
                    A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded member, coercion of argument types, and invocation of a member through reflection.
                
                    -or- 
                null, to use the <see cref="P:System.Type.DefaultBinder" />. 
                </param>
      <param name="returnType">
                    The return type of the property. 
                </param>
      <param name="types">
                    An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.
                
                    -or- 
                
                    An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed. 
                </param>
      <param name="modifiers">
                    An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. The default binder does not process this parameter. 
                </param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">
                    More than one property is found with the specified name and matching the specified binding constraints. 
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.
                
                    -or- 
                <paramref name="types" /> is null.
                
                    -or- 
                
                    One of the elements in <paramref name="types" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional.
                
                    -or- 
                <paramref name="modifiers" /> is multidimensional.
                
                    -or- 
                <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length. 
                </exception>
    </member>
    <member name="M:System.Type.GetType">
      <summary>
                    Gets the current <see cref="T:System.Type" />.
                </summary>
      <returns>
                    The current <see cref="T:System.Type" />.
                </returns>
      <exception cref="T:System.Reflection.TargetInvocationException">
                    A class initializer is invoked and throws an exception. 
                </exception>
    </member>
    <member name="M:System.Type.GetType(System.String)">
      <summary>
                    Gets the <see cref="T:System.Type" /> with the specified name, performing a case-sensitive search.
                </summary>
      <returns>
                    The <see cref="T:System.Type" /> with the specified name, if found; otherwise, null.
                </returns>
      <param name="typeName">
                    The assembly-qualified name of the type to get. See <see cref="P:System.Type.AssemblyQualifiedName" />. If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> is null. 
                </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">
                    A class initializer is invoked and throws an exception. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeName" /> is a pointer, passed by reference, or is a generic class with a <see cref="T:System.Void" /> as its type parameter.
                </exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="typeName" /> is invalid.
                
                    -or-
                <paramref name="typeName" /> is an empty string.
                
                    -or-
                <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />. This is a change from the behavior in the .NET Framework versions 1.0 and 1.1, which was to return a null reference.
                </exception>
      <exception cref="T:System.IO.FileNotFoundException">
                    The assembly or one of its dependencies was not found. 
                </exception>
      <exception cref="T:System.IO.FileLoadException">
                    The assembly or one of its dependencies was found, but could not be loaded. 
                </exception>
      <exception cref="T:System.BadImageFormatException">
                    The assembly or one of its dependencies is not valid. 
                
                    -or-
                
                    The assembly was compiled with a later version of the .NET Framework.
                </exception>
    </member>
    <member name="M:System.Type.GetType(System.String,System.Boolean)">
      <summary>
                    Gets the <see cref="T:System.Type" /> with the specified name, performing a case-sensitive search and specifying whether to throw an exception if the type is not found.
                </summary>
      <returns>
                    The <see cref="T:System.Type" /> with the specified name, if found; otherwise, null.
                </returns>
      <param name="typeName">
                    The assembly-qualified name of the type to get. See <see cref="P:System.Type.AssemblyQualifiedName" />. If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.
                </param>
      <param name="throwOnError">true to throw an exception if the type cannot be found; false to return null.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> is null. 
                </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">
                    A class initializer is invoked and throws an exception. 
                </exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwOnError" /> is true and the type is not found. 
                
                    -or-
                <paramref name="typeName" /> is invalid.
                
                    -or-
                <paramref name="typeName" /> is an empty string.
                
                    -or-
                <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />. This is a change from the behavior in the .NET Framework versions 1.0 and 1.1, which was to return a null reference.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeName" /> is a pointer, passed by reference, or is a generic class with a <see cref="T:System.Void" /> as its type parameter.
                </exception>
      <exception cref="T:System.IO.FileNotFoundException">
                    The assembly or one of its dependencies was not found. 
                </exception>
      <exception cref="T:System.IO.FileLoadException">
                    The assembly or one of its dependencies was found, but could not be loaded. 
                </exception>
      <exception cref="T:System.BadImageFormatException">
                    The assembly or one of its dependencies is not valid. 
                
                    -or-
                
                    The assembly was compiled with a later version of the .NET Framework.
                </exception>
    </member>
    <member name="M:System.Type.GetType(System.String,System.Boolean,System.Boolean)">
      <summary>
                    Gets the <see cref="T:System.Type" /> with the specified name, specifying whether to perform a case-sensitive search and whether to throw an exception if the type is not found.
                </summary>
      <returns>
                    The <see cref="T:System.Type" /> with the specified name, if found; otherwise, null.
                </returns>
      <param name="typeName">
                    The assembly-qualified name of the type to get. See <see cref="P:System.Type.AssemblyQualifiedName" />. If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.
                </param>
      <param name="throwOnError">true to throw an exception if the type cannot be found; false to return null.
                </param>
      <param name="ignoreCase">true to perform a case-insensitive search for <paramref name="typeName" />, false to perform a case-sensitive search for <paramref name="typeName" />. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> is null. 
                </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">
                    A class initializer is invoked and throws an exception. 
                </exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwOnError" /> is true and the type is not found. 
                
                    -or-
                <paramref name="typeName" /> is invalid.
                
                    -or-
                <paramref name="typeName" /> is an empty string.
                
                    -or-
                <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />. This is a change from the behavior in the .NET Framework versions 1.0 and 1.1, which was to return a null reference.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeName" /> is a pointer, passed by reference, or is a generic class with a <see cref="T:System.Void" /> as its type parameter.
                </exception>
      <exception cref="T:System.IO.FileNotFoundException">
                    The assembly or one of its dependencies was not found. 
                </exception>
      <exception cref="T:System.IO.FileLoadException">
                    The assembly or one of its dependencies was found, but could not be loaded. 
                </exception>
      <exception cref="T:System.BadImageFormatException">
                    The assembly or one of its dependencies is not valid. 
                
                    -or-
                
                    The assembly was compiled with a later version of the .NET Framework.
                </exception>
    </member>
    <member name="M:System.Type.GetTypeCode(System.Type)">
      <summary>
                    Gets the underlying type code of the specified <see cref="T:System.Type" />.
                </summary>
      <returns>
                    The <see cref="T:System.TypeCode" /> value of the underlying type.
                </returns>
      <param name="type">
                    The <see cref="T:System.Type" /> whose underlying type code to get. 
                </param>
    </member>
    <member name="M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)">
      <summary>
                    Gets the type referenced by the specified type handle.
                </summary>
      <returns>
                    The type referenced by the specified <see cref="T:System.RuntimeTypeHandle" />, or null if the value of the handle is null.
                </returns>
      <param name="handle">
                    The <see cref="T:System.RuntimeTypeHandle" /> object that refers to the type. 
                </param>
      <exception cref="T:System.Reflection.TargetInvocationException">
                    A class initializer is invoked and throws an exception. 
                </exception>
    </member>
    <member name="P:System.Type.GUID">
      <summary>
                    Gets the GUID associated with the <see cref="T:System.Type" />.
                </summary>
      <returns>
                    The GUID associated with the <see cref="T:System.Type" />.
                </returns>
    </member>
    <member name="P:System.Type.HasElementType">
      <summary>
                    Gets a value indicating whether the current <see cref="T:System.Type" /> encompasses or refers to another type; that is, whether the current <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference.
                </summary>
      <returns>true if the <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Type.HasElementTypeImpl">
      <summary>
                    When overridden in a derived class, implements the <see cref="P:System.Type.HasElementType" /> property and determines whether the current <see cref="T:System.Type" /> encompasses or refers to another type; that is, whether the current <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference.
                </summary>
      <returns>true if the <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])">
      <summary>
                    Invokes the specified member, using the specified binding constraints and matching the specified argument list.
                </summary>
      <returns>
                    An <see cref="T:System.Object" /> representing the return value of the invoked member.
                </returns>
      <param name="name">
                    The <see cref="T:System.String" /> containing the name of the constructor, method, property, or field member to invoke.
                
                    -or- 
                
                    An empty string ("") to invoke the default member. 
                </param>
      <param name="invokeAttr">
                    A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. The access can be one of the BindingFlags such as Public, NonPublic, Private, InvokeMethod, GetField, and so on. The type of lookup need not be specified. If the type of lookup is omitted, BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static are used. 
                </param>
      <param name="binder">
                    A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.
                
                    -or- 
                null, to use the <see cref="P:System.Type.DefaultBinder" />. Note that explicitly defining a <see cref="T:System.Reflection.Binder" /> object may be requird for successfully invoking method overloads with variable arguments.
                </param>
      <param name="target">
                    The <see cref="T:System.Object" /> on which to invoke the specified member. 
                </param>
      <param name="args">
                    An array containing the arguments to pass to the member to invoke. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="invokeAttr" /> contains CreateInstance and <paramref name="typeName" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="args" /> is multidimensional.
                
                    -or- 
                <paramref name="invokeAttr" /> is not a valid <see cref="T:System.Reflection.BindingFlags" /> attribute. 
                
                    -or- 
                <paramref name="invokeAttr" /> does not contain one of the following binding flags: InvokeMethod, CreateInstance, GetField, SetField, GetProperty, or SetProperty. 
                
                    -or- 
                <paramref name="invokeAttr" /> contains CreateInstance combined with InvokeMethod, GetField, SetField, GetProperty, or SetProperty.
                
                    -or- 
                <paramref name="invokeAttr" /> contains both GetField and SetField.
                
                    -or- 
                <paramref name="invokeAttr" /> contains both GetProperty and SetProperty.
                
                    -or- 
                <paramref name="invokeAttr" /> contains InvokeMethod combined with SetField or SetProperty.
                
                    -or- 
                <paramref name="invokeAttr" /> contains SetField and <paramref name="args" /> has more than one element.
                
                    -or- 
                
                    This method is called on a COM object and one of the following binding flags was not passed in: BindingFlags.InvokeMethod, BindingFlags.GetProperty, BindingFlags.SetProperty, BindingFlags.PutDispProperty, or BindingFlags.PutRefDispProperty.
                
                    -or- 
                
                    One of the named parameter arrays contains a string that is null. 
                </exception>
      <exception cref="T:System.MethodAccessException">
                    The specified member is a class initializer. 
                </exception>
      <exception cref="T:System.MissingFieldException">
                    The field or property cannot be found. 
                </exception>
      <exception cref="T:System.MissingMethodException">
                    The method cannot be found.
                
                    -or- 
                
                    The current <see cref="T:System.Type" /> object represents a type that contains open type parameters, that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns true. 
                </exception>
      <exception cref="T:System.Reflection.TargetException">
                    The specified member cannot be invoked on <paramref name="target" />. 
                </exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">
                    More than one method matches the binding criteria. 
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The .NET Compact Framework does not currently support this method.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The method represented by <paramref name="name" /> has one or more unspecified generic type parameters. That is, the method's <see cref="P:System.Reflection.MethodInfo.ContainsGenericParameters" /> property returns true.
                </exception>
    </member>
    <member name="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>
                    When overridden in a derived class, invokes the specified member, using the specified binding constraints and matching the specified argument list, modifiers and culture.
                </summary>
      <returns>
                    An <see cref="T:System.Object" /> representing the return value of the invoked member.
                </returns>
      <param name="name">
                    The <see cref="T:System.String" /> containing the name of the constructor, method, property, or field member to invoke.
                
                    -or- 
                
                    An empty string ("") to invoke the default member. 
                
                    -or-
                
                    For IDispatch members, a string representing the DispID, for example "[DispID=3]".
                </param>
      <param name="invokeAttr">
                    A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. The access can be one of the BindingFlags such as Public, NonPublic, Private, InvokeMethod, GetField, and so on. The type of lookup need not be specified. If the type of lookup is omitted, BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static are used. 
                </param>
      <param name="binder">
                    A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.
                
                    -or- 
                null, to use the <see cref="P:System.Type.DefaultBinder" />. Note that explicitly defining a <see cref="T:System.Reflection.Binder" /> object may be requird for successfully invoking method overloads with variable arguments.
                </param>
      <param name="target">
                    The <see cref="T:System.Object" /> on which to invoke the specified member. 
                </param>
      <param name="args">
                    An array containing the arguments to pass to the member to invoke. 
                </param>
      <param name="modifiers">
                    An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="args" /> array. A parameter's associated attributes are stored in the member's signature. 
                
                    The default binder processes this parameter only when calling a COM component. 
                </param>
      <param name="culture">
                    The <see cref="T:System.Globalization.CultureInfo" /> object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric String to a Double.
                
                    -or- 
                null to use the current thread's <see cref="T:System.Globalization.CultureInfo" />. 
                </param>
      <param name="namedParameters">
                    An array containing the names of the parameters to which the values in the <paramref name="args" /> array are passed. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="invokeAttr" /> contains CreateInstance and <paramref name="typeName" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="args" /> is multidimensional.
                
                    -or- 
                <paramref name="modifiers" /> is multidimensional.
                
                    -or- 
                <paramref name="args" /> and <paramref name="modifiers" /> do not have the same length.
                
                    -or- 
                <paramref name="invokeAttr" /> is not a valid <see cref="T:System.Reflection.BindingFlags" /> attribute. 
                
                    -or- 
                <paramref name="invokeAttr" /> does not contain one of the following binding flags: InvokeMethod, CreateInstance, GetField, SetField, GetProperty, or SetProperty. 
                
                    -or- 
                <paramref name="invokeAttr" /> contains CreateInstance combined with InvokeMethod, GetField, SetField, GetProperty, or SetProperty.
                
                    -or- 
                <paramref name="invokeAttr" /> contains both GetField and SetField.
                
                    -or- 
                <paramref name="invokeAttr" /> contains both GetProperty and SetProperty.
                
                    -or- 
                <paramref name="invokeAttr" /> contains InvokeMethod combined with SetField or SetProperty.
                
                    -or- 
                <paramref name="invokeAttr" /> contains SetField and <paramref name="args" /> has more than one element.
                
                    -or- 
                
                    The named parameter array is larger than the argument array.
                
                    -or- 
                
                    This method is called on a COM object and one of the following binding flags was not passed in: BindingFlags.InvokeMethod, BindingFlags.GetProperty, BindingFlags.SetProperty, BindingFlags.PutDispProperty, or BindingFlags.PutRefDispProperty.
                
                    -or- 
                
                    One of the named parameter arrays contains a string that is null. 
                </exception>
      <exception cref="T:System.MethodAccessException">
                    The specified member is a class initializer. 
                </exception>
      <exception cref="T:System.MissingFieldException">
                    The field or property cannot be found. 
                </exception>
      <exception cref="T:System.MissingMethodException">
                    The method cannot be found.
                
                    -or- 
                
                    The current <see cref="T:System.Type" /> object represents a type that contains open type parameters, that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns true. 
                </exception>
      <exception cref="T:System.Reflection.TargetException">
                    The specified member cannot be invoked on <paramref name="target" />. 
                </exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">
                    More than one method matches the binding criteria. 
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The method represented by <paramref name="name" /> has one or more unspecified generic type parameters. That is, the method's <see cref="P:System.Reflection.MethodInfo.ContainsGenericParameters" /> property returns true.
                </exception>
    </member>
    <member name="P:System.Type.IsAbstract">
      <summary>
                    Gets a value indicating whether the <see cref="T:System.Type" /> is abstract and must be overridden.
                </summary>
      <returns>true if the <see cref="T:System.Type" /> is abstract; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Type.IsAnsiClass">
      <summary>
                    Gets a value indicating whether the string format attribute AnsiClass is selected for the <see cref="T:System.Type" />.
                </summary>
      <returns>true if the string format attribute AnsiClass is selected for the <see cref="T:System.Type" />; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Type.IsArray">
      <summary>
                    Gets a value indicating whether the <see cref="T:System.Type" /> is an array.
                </summary>
      <returns>true if the <see cref="T:System.Type" /> is an array; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Type.IsArrayImpl">
      <summary>
                    When overridden in a derived class, implements the <see cref="P:System.Type.IsArray" /> property and determines whether the <see cref="T:System.Type" /> is an array.
                </summary>
      <returns>true if the <see cref="T:System.Type" /> is an array; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Type.IsAssignableFrom(System.Type)">
      <summary>
                    Determines whether an instance of the current <see cref="T:System.Type" /> can be assigned from an instance of the specified Type.
                </summary>
      <returns>true if <paramref name="c" /> and the current Type represent the same type, or if the current Type is in the inheritance hierarchy of <paramref name="c" />, or if the current Type is an interface that <paramref name="c" /> implements, or if <paramref name="c" /> is a generic type parameter and the current Type represents one of the constraints of <paramref name="c" />. false if none of these conditions are true, or if <paramref name="c" /> is null.
                </returns>
      <param name="c">
                    The Type to compare with the current Type. 
                </param>
    </member>
    <member name="P:System.Type.IsAutoClass">
      <summary>
                    Gets a value indicating whether the string format attribute AutoClass is selected for the <see cref="T:System.Type" />.
                </summary>
      <returns>true if the string format attribute AutoClass is selected for the <see cref="T:System.Type" />; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Type.IsAutoLayout">
      <summary>
                    Gets a value indicating whether the class layout attribute AutoLayout is selected for the <see cref="T:System.Type" />.
                </summary>
      <returns>true if the class layout attribute AutoLayout is selected for the <see cref="T:System.Type" />; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Type.IsByRef">
      <summary>
                    Gets a value indicating whether the <see cref="T:System.Type" /> is passed by reference.
                </summary>
      <returns>true if the <see cref="T:System.Type" /> is passed by reference; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Type.IsByRefImpl">
      <summary>
                    When overridden in a derived class, implements the <see cref="P:System.Type.IsByRef" /> property and determines whether the <see cref="T:System.Type" /> is passed by reference.
                </summary>
      <returns>true if the <see cref="T:System.Type" /> is passed by reference; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Type.IsClass">
      <summary>
                    Gets a value indicating whether the <see cref="T:System.Type" /> is a class; that is, not a value type or interface.
                </summary>
      <returns>true if the <see cref="T:System.Type" /> is a class; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Type.IsCOMObject">
      <summary>
                    Gets a value indicating whether the <see cref="T:System.Type" /> is a COM object.
                </summary>
      <returns>true if the <see cref="T:System.Type" /> is a COM object; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Type.IsCOMObjectImpl">
      <summary>
                    When overridden in a derived class, implements the <see cref="P:System.Type.IsCOMObject" /> property and determines whether the <see cref="T:System.Type" /> is a COM object.
                </summary>
      <returns>true if the <see cref="T:System.Type" /> is a COM object; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Type.IsEnum">
      <summary>
                    Gets a value indicating whether the current <see cref="T:System.Type" /> represents an enumeration.
                </summary>
      <returns>true if the current <see cref="T:System.Type" /> represents an enumeration; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Type.IsGenericParameter">
      <summary>
                    Gets a value indicating whether the current <see cref="T:System.Type" /> represents a type parameter in the definition of a generic type or method.
                </summary>
      <returns>true if the <see cref="T:System.Type" /> object represents a type parameter of a generic type definition or generic method definition; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Type.IsGenericType">
      <summary>
                    Gets a value indicating whether the current type is a generic type.
                </summary>
      <returns>true if the current type is a generic type; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Type.IsGenericTypeDefinition">
      <summary>
                    Gets a value indicating whether the current <see cref="T:System.Type" /> represents a generic type definition, from which other generic types can be constructed.
                </summary>
      <returns>true if the <see cref="T:System.Type" /> object represents a generic type definition; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Type.IsImport">
      <summary>
                    Gets a value indicating whether the <see cref="T:System.Type" /> has a <see cref="T:System.Runtime.InteropServices.ComImportAttribute" /> attribute applied, indicating that it was imported from a COM type library.
                </summary>
      <returns>true if the <see cref="T:System.Type" /> has a <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Type.IsInstanceOfType(System.Object)">
      <summary>
                    Determines whether the specified object is an instance of the current <see cref="T:System.Type" />.
                </summary>
      <returns>true if the current Type is in the inheritance hierarchy of the object represented by <paramref name="o" />, or if the current Type is an interface that <paramref name="o" /> supports. false if neither of these conditions is the case, or if <paramref name="o" /> is null, or if the current Type is an open generic type (that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns true).
                </returns>
      <param name="o">
                    The object to compare with the current Type. 
                </param>
    </member>
    <member name="P:System.Type.IsInterface">
      <summary>
                    Gets a value indicating whether the <see cref="T:System.Type" /> is an interface; that is, not a class or a value type.
                </summary>
      <returns>true if the <see cref="T:System.Type" /> is an interface; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Type.IsNestedAssembly">
      <summary>
                    Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only within its own assembly.
                </summary>
      <returns>true if the <see cref="T:System.Type" /> is nested and visible only within its own assembly; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Type.IsNestedFamANDAssem">
      <summary>
                    Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only to classes that belong to both its own family and its own assembly.
                </summary>
      <returns>true if the <see cref="T:System.Type" /> is nested and visible only to classes that belong to both its own family and its own assembly; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Type.IsNestedFamily">
      <summary>
                    Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only within its own family.
                </summary>
      <returns>true if the <see cref="T:System.Type" /> is nested and visible only within its own family; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Type.IsNestedFamORAssem">
      <summary>
                    Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only to classes that belong to either its own family or to its own assembly.
                </summary>
      <returns>true if the <see cref="T:System.Type" /> is nested and visible only to classes that belong to its own family or to its own assembly; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Type.IsNestedPrivate">
      <summary>
                    Gets a value indicating whether the <see cref="T:System.Type" /> is nested and declared private.
                </summary>
      <returns>true if the <see cref="T:System.Type" /> is nested and declared private; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Type.IsNestedPublic">
      <summary>
                    Gets a value indicating whether a class is nested and declared public.
                </summary>
      <returns>true if the class is nested and declared public; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Type.IsNotPublic">
      <summary>
                    Gets a value indicating whether the <see cref="T:System.Type" /> is not declared public.
                </summary>
      <returns>true if the <see cref="T:System.Type" /> is not declared public and is not a nested type; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Type.IsPointer">
      <summary>
                    Gets a value indicating whether the <see cref="T:System.Type" /> is a pointer.
                </summary>
      <returns>true if the <see cref="T:System.Type" /> is a pointer; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Type.IsPointerImpl">
      <summary>
                    When overridden in a derived class, implements the <see cref="P:System.Type.IsPointer" /> property and determines whether the <see cref="T:System.Type" /> is a pointer.
                </summary>
      <returns>true if the <see cref="T:System.Type" /> is a pointer; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Type.IsPrimitive">
      <summary>
                    Gets a value indicating whether the <see cref="T:System.Type" /> is one of the primitive types.
                </summary>
      <returns>true if the <see cref="T:System.Type" /> is one of the primitive types; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Type.IsPrimitiveImpl">
      <summary>
                    When overridden in a derived class, implements the <see cref="P:System.Type.IsPrimitive" /> property and determines whether the <see cref="T:System.Type" /> is one of the primitive types.
                </summary>
      <returns>true if the <see cref="T:System.Type" /> is one of the primitive types; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Type.IsPublic">
      <summary>
                    Gets a value indicating whether the <see cref="T:System.Type" /> is declared public.
                </summary>
      <returns>true if the <see cref="T:System.Type" /> is declared public and is not a nested type; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Type.IsSealed">
      <summary>
                    Gets a value indicating whether the <see cref="T:System.Type" /> is declared sealed.
                </summary>
      <returns>true if the <see cref="T:System.Type" /> is declared sealed; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Type.IsSpecialName">
      <summary>
                    Gets a value indicating whether the <see cref="T:System.Type" /> has a name that requires special handling.
                </summary>
      <returns>true if the <see cref="T:System.Type" /> has a name that requires special handling; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Type.IsSubclassOf(System.Type)">
      <summary>
                    Determines whether the class represented by the current <see cref="T:System.Type" /> derives from the class represented by the specified <see cref="T:System.Type" />.
                </summary>
      <returns>true if the Type represented by the <paramref name="c" /> parameter and the current Type represent classes, and the class represented by the current Type derives from the class represented by <paramref name="c" />; otherwise, false. This method also returns false if <paramref name="c" /> and the current Type represent the same class.
                </returns>
      <param name="c">
                    The Type to compare with the current Type. 
                </param>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="c" /> parameter is null. 
                </exception>
    </member>
    <member name="P:System.Type.IsUnicodeClass">
      <summary>
                    Gets a value indicating whether the string format attribute UnicodeClass is selected for the <see cref="T:System.Type" />.
                </summary>
      <returns>true if the string format attribute UnicodeClass is selected for the <see cref="T:System.Type" />; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Type.IsValueType">
      <summary>
                    Gets a value indicating whether the <see cref="T:System.Type" /> is a value type.
                </summary>
      <returns>true if the <see cref="T:System.Type" /> is a value type; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Type.IsValueTypeImpl">
      <summary>
                    Implements the <see cref="P:System.Type.IsValueType" /> property and determines whether the <see cref="T:System.Type" /> is a value type; that is, not a class or an interface.
                </summary>
      <returns>true if the <see cref="T:System.Type" /> is a value type; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Type.IsVisible">
      <summary>
                    Gets a value indicating whether the <see cref="T:System.Type" /> can be accessed by code outside the assembly.
                </summary>
      <returns>true if the current <see cref="T:System.Type" /> is a public type or a public nested type such that all the enclosing types are public; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Type.MakeArrayType">
      <summary>
                    Returns a <see cref="T:System.Type" /> object representing a one-dimensional array of the current type, with a lower bound of zero.
                </summary>
      <returns>
                    A <see cref="T:System.Type" /> object representing a one-dimensional array of the current type, with a lower bound of zero.
                </returns>
    </member>
    <member name="M:System.Type.MakeArrayType(System.Int32)">
      <summary>
                    Returns a <see cref="T:System.Type" /> object representing an array of the current type, with the specified number of dimensions.
                </summary>
      <returns>
                    A <see cref="T:System.Type" /> object representing an array of the current type, with the specified number of dimensions.
                </returns>
      <param name="rank">
                    The number of dimensions for the array. 
                </param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="rank" /> is invalid. For example, 0 or negative.
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The invoked method is not supported in the base class.
                </exception>
    </member>
    <member name="M:System.Type.MakeByRefType">
      <summary>
                    Returns a <see cref="T:System.Type" /> object that represents the current type when passed as a ref parameter (ByRef parameter in Visual Basic).
                </summary>
      <returns>
                    A <see cref="T:System.Type" /> object that represents the current type when passed as a ref parameter (ByRef parameter in Visual Basic).
                </returns>
      <exception cref="T:System.NotSupportedException">
                    The invoked method is not supported in the base class.
                </exception>
    </member>
    <member name="M:System.Type.MakeGenericType(System.Type[])">
      <summary>
                    Substitutes the elements of an array of types for the type parameters of the current generic type definition and returns a <see cref="T:System.Type" /> object representing the resulting constructed type.
                </summary>
      <returns>
                    A <see cref="T:System.Type" /> representing the constructed type formed by substituting the elements of <paramref name="typeArguments" /> for the type parameters of the current generic type.
                </returns>
      <param name="typeArguments">
                    An array of types to be substituted for the type parameters of the current generic type.
                </param>
      <exception cref="T:System.InvalidOperationException">
                    The current type does not represent a generic type definition. That is, <see cref="P:System.Type.IsGenericTypeDefinition" /> returns false. 
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArguments" /> is null.
                
                    -or- 
                
                    Any element of <paramref name="typeArguments" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
                    The number of elements in <paramref name="typeArguments" /> is not the same as the number of type parameters in the current generic type definition.
                
                    -or- 
                
                    Any element of <paramref name="typeArguments" /> does not satisfy the constraints specified for the corresponding type parameter of the current generic type. 
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The invoked method is not supported in the base class. Derived classes must provide an implementation.
                </exception>
    </member>
    <member name="M:System.Type.MakePointerType">
      <summary>
                    Returns a <see cref="T:System.Type" /> object that represents a pointer to the current type.
                </summary>
      <returns>
                    A <see cref="T:System.Type" /> object that represents a pointer to the current type.
                </returns>
      <exception cref="T:System.NotSupportedException">
                    The invoked method is not supported in the base class.
                </exception>
    </member>
    <member name="P:System.Type.MemberType">
      <summary>
                    Gets a <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a type or a nested type.
                </summary>
      <returns>
                    A <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a type or a nested type.
                </returns>
    </member>
    <member name="F:System.Type.Missing">
      <summary>
                    Represents a missing value in the <see cref="T:System.Type" /> information. This field is read-only.
                </summary>
    </member>
    <member name="P:System.Type.Module">
      <summary>
                    Gets the module (the DLL) in which the current <see cref="T:System.Type" /> is defined.
                </summary>
      <returns>
                    The module in which the current <see cref="T:System.Type" /> is defined.
                </returns>
    </member>
    <member name="P:System.Type.Namespace">
      <summary>
                    Gets the namespace of the <see cref="T:System.Type" />.
                </summary>
      <returns>
                    The namespace of the <see cref="T:System.Type" />, or null if the current instance represents a generic parameter.
                </returns>
    </member>
    <member name="P:System.Type.ReflectedType">
      <summary>
                    Gets the class object that was used to obtain this member. 
                </summary>
      <returns>
                    The Type object through which this MemberInfo object was obtained. 
                </returns>
    </member>
    <member name="M:System.Type.ToString">
      <summary>
                    Returns a String representing the name of the current Type.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> representing the name of the current <see cref="T:System.Type" />.
                </returns>
    </member>
    <member name="P:System.Type.TypeHandle">
      <summary>
                    Gets the handle for the current <see cref="T:System.Type" />.
                </summary>
      <returns>
                    The handle for the current <see cref="T:System.Type" />.
                </returns>
      <exception cref="T:System.NotSupportedException">
                    The .NET Compact Framework does not currently support this property.
                </exception>
    </member>
    <member name="P:System.Type.UnderlyingSystemType">
      <summary>
                    Indicates the type provided by the common language runtime that represents this type.
                </summary>
      <returns>
                    The underlying system type for the <see cref="T:System.Type" />.
                </returns>
    </member>
    <member name="T:System.TypeCode">
      <summary>
                    Specifies the type of an object.
                </summary>
    </member>
    <member name="F:System.TypeCode.Empty">
      <summary>
                    A null reference.
                </summary>
    </member>
    <member name="F:System.TypeCode.Object">
      <summary>
                    A general type representing any reference or value type not explicitly represented by another TypeCode.
                </summary>
    </member>
    <member name="F:System.TypeCode.DBNull">
      <summary>
                    A database null (column) value.
                </summary>
    </member>
    <member name="F:System.TypeCode.Boolean">
      <summary>
                    A simple type representing Boolean values of true or false.
                </summary>
    </member>
    <member name="F:System.TypeCode.Char">
      <summary>
                    An integral type representing unsigned 16-bit integers with values between 0 and 65535. The set of possible values for the <see cref="F:System.TypeCode.Char" /> type corresponds to the Unicode character set.
                </summary>
    </member>
    <member name="F:System.TypeCode.SByte">
      <summary>
                    An integral type representing signed 8-bit integers with values between -128 and 127.
                </summary>
    </member>
    <member name="F:System.TypeCode.Byte">
      <summary>
                    An integral type representing unsigned 8-bit integers with values between 0 and 255.
                </summary>
    </member>
    <member name="F:System.TypeCode.Int16">
      <summary>
                    An integral type representing signed 16-bit integers with values between -32768 and 32767.
                </summary>
    </member>
    <member name="F:System.TypeCode.UInt16">
      <summary>
                    An integral type representing unsigned 16-bit integers with values between 0 and 65535.
                </summary>
    </member>
    <member name="F:System.TypeCode.Int32">
      <summary>
                    An integral type representing signed 32-bit integers with values between -2147483648 and 2147483647.
                </summary>
    </member>
    <member name="F:System.TypeCode.UInt32">
      <summary>
                    An integral type representing unsigned 32-bit integers with values between 0 and 4294967295.
                </summary>
    </member>
    <member name="F:System.TypeCode.Int64">
      <summary>
                    An integral type representing signed 64-bit integers with values between -9223372036854775808 and 9223372036854775807.
                </summary>
    </member>
    <member name="F:System.TypeCode.UInt64">
      <summary>
                    An integral type representing unsigned 64-bit integers with values between 0 and 18446744073709551615.
                </summary>
    </member>
    <member name="F:System.TypeCode.Single">
      <summary>
                    A floating point type representing values ranging from approximately 1.5 x 10 -45 to 3.4 x 10 38 with a precision of 7 digits.
                </summary>
    </member>
    <member name="F:System.TypeCode.Double">
      <summary>
                    A floating point type representing values ranging from approximately 5.0 x 10 -324 to 1.7 x 10 308 with a precision of 15-16 digits.
                </summary>
    </member>
    <member name="F:System.TypeCode.Decimal">
      <summary>
                    A simple type representing values ranging from 1.0 x 10 -28 to approximately 7.9 x 10 28 with 28-29 significant digits.
                </summary>
    </member>
    <member name="F:System.TypeCode.DateTime">
      <summary>
                    A type representing a date and time value.
                </summary>
    </member>
    <member name="F:System.TypeCode.String">
      <summary>
                    A sealed class type representing Unicode character strings.
                </summary>
    </member>
    <member name="T:System.TypedReference">
      <summary>
                    Describes objects that contain both a managed pointer to a location and a runtime representation of the type that may be stored at that location.
                </summary>
    </member>
    <member name="M:System.TypedReference.Equals(System.Object)">
      <summary>
                    Checks if this object is equal to the specified object.
                </summary>
      <returns>true if this object is equal to the specified object; otherwise, false.
                </returns>
      <param name="o">
                    The object with which to compare the current object. 
                </param>
      <exception cref="T:System.NotSupportedException">
                    This method is not implemented. 
                </exception>
    </member>
    <member name="M:System.TypedReference.GetHashCode">
      <summary>
                    Returns the hash code of this object.
                </summary>
      <returns>
                    The hash code of this object.
                </returns>
    </member>
    <member name="T:System.TypeInitializationException">
      <summary>
                    The exception that is thrown as a wrapper around the exception thrown by the class initializer. This class cannot be inherited.
                </summary>
    </member>
    <member name="M:System.TypeInitializationException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.TypeInitializationException" /> class with the default error message, the specified type name, and a reference to the inner exception that is the root cause of this exception.
                </summary>
      <param name="fullTypeName">
                    The fully qualified name of the type that fails to initialize. 
                </param>
      <param name="innerException">
                    The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. 
                </param>
    </member>
    <member name="P:System.TypeInitializationException.TypeName">
      <summary>
                    Gets the fully qualified name of the type that fails to initialize.
                </summary>
      <returns>
                    The fully qualified name of the type that fails to initialize.
                </returns>
    </member>
    <member name="T:System.TypeLoadException">
      <summary>
                    The exception that is thrown when type-loading failures occur.
                </summary>
    </member>
    <member name="M:System.TypeLoadException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.TypeLoadException" /> class.
                </summary>
    </member>
    <member name="M:System.TypeLoadException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.TypeLoadException" /> class with a specified error message.
                </summary>
      <param name="message">
                    The message that describes the error. 
                </param>
    </member>
    <member name="M:System.TypeLoadException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.TypeLoadException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
                </summary>
      <param name="message">
                    The error message that explains the reason for the exception. 
                </param>
      <param name="inner">
                    The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. 
                </param>
    </member>
    <member name="P:System.TypeLoadException.Message">
      <summary>
                    Gets the error message for this exception.
                </summary>
      <returns>
                    The error message string.
                </returns>
    </member>
    <member name="T:System.UInt16">
      <summary>
                    Represents a 16-bit unsigned integer.
                </summary>
    </member>
    <member name="M:System.UInt16.CompareTo(System.Object)">
      <summary>
                    Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is greater than, equal to, or less than the value of the specified object.
                </summary>
      <returns>
                    A signed number indicating the relative values of this instance and <paramref name="value" />.
                
                    Return Value 
                
                    Description 
                
                    Less than zero 
                
                    This instance is less than <paramref name="value" />. 
                
                    Zero 
                
                    This instance is equal to <paramref name="value" />. 
                
                    Greater than zero 
                
                    This instance is greater than <paramref name="value" />.
                
                    -or- 
                <paramref name="value" /> is null. 
                </returns>
      <param name="value">
                    An object to compare, or null. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.UInt16" />. 
                </exception>
    </member>
    <member name="M:System.UInt16.CompareTo(System.UInt16)">
      <summary>
                    Compares this instance to a specified 16-bit unsigned integer and returns an integer that indicates whether the value of this instance is greater than, equal to, or less than the value of the specified 16-bit unsigned integer.
                </summary>
      <returns>
                    A signed number indicating the relative values of this instance and <paramref name="value" />.
                
                    Return Value 
                
                    Description 
                
                    Less than zero 
                
                    This instance is less than <paramref name="value" />. 
                
                    Zero 
                
                    This instance is equal to <paramref name="value" />. 
                
                    Greater than zero 
                
                    This instance is greater than <paramref name="value" />. 
                </returns>
      <param name="value">
                    An unsigned integer to compare. 
                </param>
    </member>
    <member name="M:System.UInt16.Equals(System.Object)">
      <summary>
                    Returns a value indicating whether this instance is equal to a specified object.
                </summary>
      <returns>true if <paramref name="obj" /> is an instance of <see cref="T:System.UInt16" /> and equals the value of this instance; otherwise, false.
                </returns>
      <param name="obj">
                    An object to compare to this instance. 
                </param>
    </member>
    <member name="M:System.UInt16.Equals(System.UInt16)">
      <summary>
                    Returns a value indicating whether this instance is equal to a specified <see cref="T:System.UInt16" /> value.
                </summary>
      <returns>true if <paramref name="obj" /> has the same value as this instance; otherwise, false.
                </returns>
      <param name="obj">
                    A <see cref="T:System.UInt16" /> value to compare to this instance.
                </param>
    </member>
    <member name="M:System.UInt16.GetHashCode">
      <summary>
                    Returns the hash code for this instance.
                </summary>
      <returns>
                    A 32-bit signed integer hash code.
                </returns>
    </member>
    <member name="M:System.UInt16.GetTypeCode">
      <summary>
                    Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.UInt16" />.
                </summary>
      <returns>
                    The enumerated constant, <see cref="F:System.TypeCode.UInt16" />.
                </returns>
    </member>
    <member name="F:System.UInt16.MaxValue">
      <summary>
                    Represents the largest possible value of <see cref="T:System.UInt16" />. This field is constant.
                </summary>
    </member>
    <member name="F:System.UInt16.MinValue">
      <summary>
                    Represents the smallest possible value of <see cref="T:System.UInt16" />. This field is constant.
                </summary>
    </member>
    <member name="M:System.UInt16.Parse(System.String)">
      <summary>
                    Converts the string representation of a number to its 16-bit unsigned integer equivalent.
                </summary>
      <returns>
                    A 16-bit unsigned integer equivalent to the number contained in <paramref name="s" />.
                </returns>
      <param name="s">
                    A string representing the number to convert. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.UInt16.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
                    Converts the string representation of a number in a specified style to its 16-bit unsigned integer equivalent.
                </summary>
      <returns>
                    A 16-bit unsigned integer equivalent to the number specified in <paramref name="s" />.
                </returns>
      <param name="s">
                    A string representing the number to convert. 
                </param>
      <param name="style">
                    A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. 
                
                    -or-
                <paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.UInt16.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
                    Converts the string representation of a number in a specified style and culture-specific format to its 16-bit unsigned integer equivalent.
                </summary>
      <returns>
                    A 16-bit unsigned integer equivalent to the number specified in <paramref name="s" />.
                </returns>
      <param name="s">
                    A string representing the number to convert. 
                </param>
      <param name="style">
                    A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. 
                
                    -or-
                <paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.UInt16.Parse(System.String,System.IFormatProvider)">
      <summary>
                    Converts the string representation of a number in a specified culture-specific format to its 16-bit unsigned integer equivalent.
                </summary>
      <returns>
                    A 16-bit unsigned integer equivalent to the number specified in <paramref name="s" />.
                </returns>
      <param name="s">
                    A string representing the number to convert.
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about <paramref name="s" />.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format.
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />. 
                </summary>
      <returns>true if the value of the current instance is not zero; otherwise, false.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.Byte" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.Char" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>
                    This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.
                </summary>
      <returns>
                    This conversion is not supported. No value is returned.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
      <exception cref="T:System.InvalidCastException">
                    In all cases.
                </exception>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The current value of this instance, converted to a <see cref="T:System.Decimal" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The current value of this instance, converted to a <see cref="T:System.Double" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The current value of this instance, converted to an <see cref="T:System.Int16" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of this instance, converted to an <see cref="T:System.Int32" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The current value of this instance, converted to an <see cref="T:System.Int64" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The current value of this instance, converted to an <see cref="T:System.SByte" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The current value pf this instance, converted to a <see cref="T:System.Single" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The current value of this instance, converted to <paramref name="type" />.
                </returns>
      <param name="type">
                    The type to which to convert this <see cref="T:System.UInt16" /> value.
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> implementation that supplies information about the format of the returned value.
                </param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The current value of this instance, unchanged.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The current value of this instance, converted to a <see cref="T:System.UInt32" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The current value of this instance, converted to a <see cref="T:System.UInt64" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.UInt16.ToString">
      <summary>
                    Converts the numeric value of this instance to its equivalent string representation.
                </summary>
      <returns>
                    The string representation of the value of this instance, consisting of a sequence of digits ranging from 0 to 9, without a sign or leading zeroes.
                </returns>
    </member>
    <member name="M:System.UInt16.ToString(System.IFormatProvider)">
      <summary>
                    Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.
                </summary>
      <returns>
                    The string representation of the value of this instance as specified by <paramref name="provider" />.
                </returns>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information. 
                </param>
    </member>
    <member name="M:System.UInt16.ToString(System.String)">
      <summary>
                    Converts the numeric value of this instance to its equivalent string representation using the specified format.
                </summary>
      <returns>
                    The string representation of the value of this instance as specified by <paramref name="format" />.
                </returns>
      <param name="format">
                    A standard numeric format string or a Custom Numeric Format Strings.
                </param>
      <exception cref="T:System.FormatException">
                    The <paramref name="format" /> parameter is invalid. 
                </exception>
    </member>
    <member name="M:System.UInt16.ToString(System.String,System.IFormatProvider)">
      <summary>
                    Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.
                </summary>
      <returns>
                    The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.
                </returns>
      <param name="format">
                    A standard numeric format string or a Custom Numeric Format Strings.
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about this instance. 
                </param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid. 
                </exception>
    </member>
    <member name="M:System.UInt16.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt16@)">
      <summary>
                    Converts the string representation of a number in a specified style and culture-specific format to its 16-bit unsigned integer equivalent. A return value indicates whether the conversion succeeded or failed.
                </summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.
                </returns>
      <param name="s">
                    A string representing the number to convert. 
                </param>
      <param name="style">
                    A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about <paramref name="s" />. 
                </param>
      <param name="result">
                    When this method returns, contains the 16-bit unsigned integer value equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not in a format compliant with <paramref name="style" />, or represents a number less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />. This parameter is passed uninitialized. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. 
                
                    -or-
                <paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.
                </exception>
    </member>
    <member name="M:System.UInt16.TryParse(System.String,System.UInt16@)">
      <summary>
                    Converts the string representation of a number to its 16-bit unsigned integer equivalent. A return value indicates whether the conversion succeeded or failed.
                </summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.
                </returns>
      <param name="s">
                    A string representing the number to convert. 
                </param>
      <param name="result">
                    When this method returns, contains the 16-bit unsigned integer value equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not in the correct format. , or represents a number less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />. This parameter is passed uninitialized. 
                </param>
    </member>
    <member name="T:System.UInt32">
      <summary>
                    Represents a 32-bit unsigned integer.
                </summary>
    </member>
    <member name="M:System.UInt32.CompareTo(System.Object)">
      <summary>
                    Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is greater than, equal to, or less than the value of the specified object.
                </summary>
      <returns>
                    A signed number indicating the relative values of this instance and <paramref name="value" />.
                
                    Return Value 
                
                    Description 
                
                    Less than zero 
                
                    This instance is less than <paramref name="value" />. 
                
                    Zero 
                
                    This instance is equal to <paramref name="value" />. 
                
                    Greater than zero 
                
                    This instance is greater than <paramref name="value" />.
                
                    -or- 
                <paramref name="value" /> is null. 
                </returns>
      <param name="value">
                    An object to compare, or null. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.UInt32" />. 
                </exception>
    </member>
    <member name="M:System.UInt32.CompareTo(System.UInt32)">
      <summary>
                    Compares this instance to a specified 32-bit unsigned integer and returns an integer that indicates whether the value of this instance is greater than, equal to, or less than the value of the specified 32-bit unsigned integer.
                </summary>
      <returns>
                    A signed number indicating the relative values of this instance and <paramref name="value" />.
                
                    Return Value 
                
                    Description 
                
                    Less than zero 
                
                    This instance is less than <paramref name="value" />. 
                
                    Zero 
                
                    This instance is equal to <paramref name="value" />. 
                
                    Greater than zero 
                
                    This instance is greater than <paramref name="value" />. 
                </returns>
      <param name="value">
                    An unsigned integer to compare. 
                </param>
    </member>
    <member name="M:System.UInt32.Equals(System.Object)">
      <summary>
                    Returns a value indicating whether this instance is equal to a specified object.
                </summary>
      <returns>true if <paramref name="obj" /> is an instance of <see cref="T:System.UInt32" /> and equals the value of this instance; otherwise, false.
                </returns>
      <param name="obj">
                    An object to compare with this instance. 
                </param>
    </member>
    <member name="M:System.UInt32.Equals(System.UInt32)">
      <summary>
                    Returns a value indicating whether this instance is equal to a specified <see cref="T:System.UInt32" />.
                </summary>
      <returns>true if <paramref name="obj" /> has the same value as this instance; otherwise, false.
                </returns>
      <param name="obj">
                    A <see cref="T:System.UInt32" /> value to compare to this instance.
                </param>
    </member>
    <member name="M:System.UInt32.GetHashCode">
      <summary>
                    Returns the hash code for this instance.
                </summary>
      <returns>
                    A 32-bit signed integer hash code.
                </returns>
    </member>
    <member name="M:System.UInt32.GetTypeCode">
      <summary>
                    Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.UInt32" />.
                </summary>
      <returns>
                    The enumerated constant, <see cref="F:System.TypeCode.UInt32" />.
                </returns>
    </member>
    <member name="F:System.UInt32.MaxValue">
      <summary>
                    Represents the largest possible value of <see cref="T:System.UInt32" />. This field is constant.
                </summary>
    </member>
    <member name="F:System.UInt32.MinValue">
      <summary>
                    Represents the smallest possible value of <see cref="T:System.UInt32" />. This field is constant.
                </summary>
    </member>
    <member name="M:System.UInt32.Parse(System.String)">
      <summary>
                    Converts the string representation of a number to its 32-bit unsigned integer equivalent.
                </summary>
      <returns>
                    A 32-bit unsigned integer equivalent to the number contained in <paramref name="s" />.
                </returns>
      <param name="s">
                    A string representing the number to convert. 
                </param>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="s" /> parameter is null. 
                </exception>
      <exception cref="T:System.FormatException">
                    The <paramref name="s" /> parameter is not of the correct format. 
                </exception>
      <exception cref="T:System.OverflowException">
                    The <paramref name="s" /> parameter represents a number less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.UInt32.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
                    Converts the string representation of a number in a specified style to its 32-bit unsigned integer equivalent.
                </summary>
      <returns>
                    A 32-bit unsigned integer equivalent to the number specified in <paramref name="s" />.
                </returns>
      <param name="s">
                    A string representing the number to convert. 
                </param>
      <param name="style">
                    A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. 
                
                    -or-
                <paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.UInt32.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
                    Converts the string representation of a number in a specified style and culture-specific format to its 32-bit unsigned integer equivalent.
                </summary>
      <returns>
                    A 32-bit unsigned integer equivalent to the number specified in <paramref name="s" />.
                </returns>
      <param name="s">
                    A string representing the number to convert. 
                </param>
      <param name="style">
                    A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. 
                
                    -or-
                <paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.UInt32.Parse(System.String,System.IFormatProvider)">
      <summary>
                    Converts the string representation of a number in a specified culture-specific format to its 32-bit unsigned integer equivalent.
                </summary>
      <returns>
                    A 32-bit unsigned integer equivalent to the number specified in <paramref name="s" />.
                </returns>
      <param name="s">
                    A string representing the number to convert. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about <paramref name="s" />.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null.
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct style.
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />. 
                </summary>
      <returns>true if the value of the current instance is not zero; otherwise, false.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.Byte" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.Char" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>
                    This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.
                </summary>
      <returns>
                    This conversion is not supported. No value is returned.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
      <exception cref="T:System.InvalidCastException">
                    In all cases.
                </exception>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.Decimal" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.Double" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to an <see cref="T:System.Int16" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to an <see cref="T:System.Int32" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to an <see cref="T:System.Int64" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to an <see cref="T:System.SByte" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.Single" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to <paramref name="type" />.
                </returns>
      <param name="type">
                    The type to which to convert this <see cref="T:System.UInt32" /> value.
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> implementation that supplies culture-specific information about the format of the returned value.
                </param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.UInt16" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, unchanged.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.UInt64" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.UInt32.ToString">
      <summary>
                    Converts the numeric value of this instance to its equivalent string representation.
                </summary>
      <returns>
                    The string representation of the value of this instance, consisting of a sequence of digits ranging from 0 to 9, without a sign or leading zeroes.
                </returns>
    </member>
    <member name="M:System.UInt32.ToString(System.IFormatProvider)">
      <summary>
                    Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.
                </summary>
      <returns>
                    The string representation of the value of this instance as specified by <paramref name="provider" />.
                </returns>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information. 
                </param>
    </member>
    <member name="M:System.UInt32.ToString(System.String)">
      <summary>
                    Converts the numeric value of this instance to its equivalent string representation using the specified format.
                </summary>
      <returns>
                    The string representation of the value of this instance as specified by <paramref name="format" />.
                </returns>
      <param name="format">
                    A standard numeric format string or a Custom Numeric Format Strings.
                </param>
      <exception cref="T:System.FormatException">
                    The <paramref name="format" /> parameter is invalid. 
                </exception>
    </member>
    <member name="M:System.UInt32.ToString(System.String,System.IFormatProvider)">
      <summary>
                    Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.
                </summary>
      <returns>
                    The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.
                </returns>
      <param name="format">
                    A standard numeric format string or a Custom Numeric Format Strings.
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about this instance. 
                </param>
      <exception cref="T:System.FormatException">
                    The <paramref name="format" /> parameter is invalid. 
                </exception>
    </member>
    <member name="M:System.UInt32.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt32@)">
      <summary>
                    Converts the string representation of a number in a specified style and culture-specific format to its 32-bit unsigned integer equivalent. A return value indicates whether the conversion succeeded or failed.
                </summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.
                </returns>
      <param name="s">
                    A string representing the number to convert. 
                </param>
      <param name="style">
                    A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about <paramref name="s" />. 
                </param>
      <param name="result">
                    When this method returns, contains the 32-bit unsigned integer value equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not in a format compliant with <paramref name="style" />, or represents a number less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />. This parameter is passed uninitialized. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. 
                
                    -or-
                <paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.
                </exception>
    </member>
    <member name="M:System.UInt32.TryParse(System.String,System.UInt32@)">
      <summary>
                    Converts the string representation of a number to its 32-bit unsigned integer equivalent. A return value indicates whether the conversion succeeded or failed.
                </summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.
                </returns>
      <param name="s">
                    A string representing the number to convert. 
                </param>
      <param name="result">
                    When this method returns, contains the 32-bit unsigned integer value equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not of the correct format, or represents a number less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />. This parameter is passed uninitialized. 
                </param>
    </member>
    <member name="T:System.UInt64">
      <summary>
                    Represents a 64-bit unsigned integer.
                </summary>
    </member>
    <member name="M:System.UInt64.CompareTo(System.Object)">
      <summary>
                    Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is greater than, equal to, or less than the value of the specified object.
                </summary>
      <returns>
                    A signed number indicating the relative values of this instance and <paramref name="value" />.
                
                    Return Value 
                
                    Description 
                
                    Less than zero 
                
                    This instance is less than <paramref name="value" />. 
                
                    Zero 
                
                    This instance is equal to <paramref name="value" />. 
                
                    Greater than zero 
                
                    This instance is greater than <paramref name="value" />.
                
                    -or- 
                <paramref name="value" /> is null. 
                </returns>
      <param name="value">
                    An object to compare, or null. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.UInt64" />. 
                </exception>
    </member>
    <member name="M:System.UInt64.CompareTo(System.UInt64)">
      <summary>
                    Compares this instance to a specified 64-bit unsigned integer and returns an integer that indicates whether the value of this instance is greater than, equal to, or less than the value of the specified 64-bit unsigned integer.
                </summary>
      <returns>
                    A signed number indicating the relative values of this instance and <paramref name="value" />.
                
                    Return Value 
                
                    Description 
                
                    Less than zero 
                
                    This instance is less than <paramref name="value" />. 
                
                    Zero 
                
                    This instance is equal to <paramref name="value" />. 
                
                    Greater than zero 
                
                    This instance is greater than <paramref name="value" />. 
                </returns>
      <param name="value">
                    An unsigned integer to compare. 
                </param>
    </member>
    <member name="M:System.UInt64.Equals(System.Object)">
      <summary>
                    Returns a value indicating whether this instance is equal to a specified object.
                </summary>
      <returns>true if <paramref name="obj" /> is an instance of <see cref="T:System.UInt64" /> and equals the value of this instance; otherwise, false.
                </returns>
      <param name="obj">
                    An object to compare to this instance. 
                </param>
    </member>
    <member name="M:System.UInt64.Equals(System.UInt64)">
      <summary>
                    Returns a value indicating whether this instance is equal to a specified <see cref="T:System.UInt64" /> value.
                </summary>
      <returns>true if <paramref name="obj" /> has the same value as this instance; otherwise, false.
                </returns>
      <param name="obj">
                    A <see cref="T:System.UInt64" /> value to compare to this instance.
                </param>
    </member>
    <member name="M:System.UInt64.GetHashCode">
      <summary>
                    Returns the hash code for this instance.
                </summary>
      <returns>
                    A 32-bit signed integer hash code.
                </returns>
    </member>
    <member name="M:System.UInt64.GetTypeCode">
      <summary>
                    Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.UInt64" />.
                </summary>
      <returns>
                    The enumerated constant, <see cref="F:System.TypeCode.UInt64" />.
                </returns>
    </member>
    <member name="F:System.UInt64.MaxValue">
      <summary>
                    Represents the largest possible value of <see cref="T:System.UInt64" />. This field is constant.
                </summary>
    </member>
    <member name="F:System.UInt64.MinValue">
      <summary>
                    Represents the smallest possible value of <see cref="T:System.UInt64" />. This field is constant.
                </summary>
    </member>
    <member name="M:System.UInt64.Parse(System.String)">
      <summary>
                    Converts the string representation of a number to its 64-bit unsigned integer equivalent.
                </summary>
      <returns>
                    A 64-bit unsigned integer equivalent to the number contained in <paramref name="s" />.
                </returns>
      <param name="s">
                    A string representing the number to convert. 
                </param>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="s" /> parameter is null. 
                </exception>
      <exception cref="T:System.FormatException">
                    The <paramref name="s" /> parameter is not in the correct format. 
                </exception>
      <exception cref="T:System.OverflowException">
                    The <paramref name="s" /> parameter represents a number less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.UInt64.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
                    Converts the string representation of a number in a specified style to its 64-bit unsigned integer equivalent.
                </summary>
      <returns>
                    A 64-bit unsigned integer equivalent to the number specified in <paramref name="s" />.
                </returns>
      <param name="s">
                    A string representing the number to convert. 
                </param>
      <param name="style">
                    A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.
                </param>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="s" /> parameter is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. 
                
                    -or-
                <paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.
                </exception>
      <exception cref="T:System.FormatException">
                    The <paramref name="s" /> parameter is not in a format compliant with <paramref name="style" />. 
                </exception>
      <exception cref="T:System.OverflowException">
                    The <paramref name="s" /> parameter represents a number less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.UInt64.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
                    Converts the string representation of a number in a specified style and culture-specific format to its 64-bit unsigned integer equivalent.
                </summary>
      <returns>
                    A 64-bit unsigned integer equivalent to the number specified in <paramref name="s" />.
                </returns>
      <param name="s">
                    A string representing the number to convert. 
                </param>
      <param name="style">
                    A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />. 
                </param>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="s" /> parameter is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. 
                
                    -or-
                <paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.
                </exception>
      <exception cref="T:System.FormatException">
                    The <paramref name="s" /> parameter is not in a format compliant with <paramref name="style" />. 
                </exception>
      <exception cref="T:System.OverflowException">
                    The <paramref name="s" /> parameter represents a number less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.UInt64.Parse(System.String,System.IFormatProvider)">
      <summary>
                    Converts the string representation of a number in a specified culture-specific format to its 64-bit unsigned integer equivalent.
                </summary>
      <returns>
                    A 64-bit unsigned integer equivalent to the number specified in <paramref name="s" />.
                </returns>
      <param name="s">
                    A string representing the number to convert. 
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />. 
                </param>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="s" /> parameter is null. 
                </exception>
      <exception cref="T:System.FormatException">
                    The <paramref name="s" /> parameter is not in the correct format.
                </exception>
      <exception cref="T:System.OverflowException">
                    The <paramref name="s" /> parameter represents a number less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />. 
                </summary>
      <returns>true if the value of the current instance is not zero; otherwise, false.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.Byte" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.Char" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>
                    This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.
                </summary>
      <returns>
                    This conversion is not supported. No value is returned.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
      <exception cref="T:System.InvalidCastException">
                    In all cases.
                </exception>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.Decimal" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.Double" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to an <see cref="T:System.Int16" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to an <see cref="T:System.Int32" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to an <see cref="T:System.Int64" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to an <see cref="T:System.SByte" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.Single" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to <paramref name="type" />.
                </returns>
      <param name="type">
                    The type to which to convert this <see cref="T:System.UInt64" /> value.
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> implementation that supplies information about the format of the returned value.
                </param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.UInt16" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, converted to a <see cref="T:System.UInt32" />.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>
                    For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />. 
                </summary>
      <returns>
                    The value of the current instance, unchanged.
                </returns>
      <param name="provider">
                    This parameter is ignored.
                </param>
    </member>
    <member name="M:System.UInt64.ToString">
      <summary>
                    Converts the numeric value of this instance to its equivalent string representation.
                </summary>
      <returns>
                    The string representation of the value of this instance, consisting of a sequence of digits ranging from 0 to 9, without a sign or leading zeroes.
                </returns>
    </member>
    <member name="M:System.UInt64.ToString(System.IFormatProvider)">
      <summary>
                    Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.
                </summary>
      <returns>
                    The string representation of the value of this instance as specified by <paramref name="provider" />.
                </returns>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information. 
                </param>
    </member>
    <member name="M:System.UInt64.ToString(System.String)">
      <summary>
                    Converts the numeric value of this instance to its equivalent string representation using the specified format.
                </summary>
      <returns>
                    The string representation of the value of this instance as specified by <paramref name="format" />.
                </returns>
      <param name="format">
                    A standard numeric format string or a Custom Numeric Format Strings.
                </param>
      <exception cref="T:System.FormatException">
                    The <paramref name="format" /> parameter is invalid. 
                </exception>
    </member>
    <member name="M:System.UInt64.ToString(System.String,System.IFormatProvider)">
      <summary>
                    Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.
                </summary>
      <returns>
                    The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.
                </returns>
      <param name="format">
                    A standard numeric format string or a Custom Numeric Format Strings.
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about this instance. 
                </param>
      <exception cref="T:System.FormatException">
                    The <paramref name="format" /> parameter is invalid. 
                </exception>
    </member>
    <member name="M:System.UInt64.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt64@)">
      <summary>
                    Converts the string representation of a number in a specified style and culture-specific format to its 64-bit unsigned integer equivalent. A return value indicates whether the conversion succeeded or failed.
                </summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.
                </returns>
      <param name="s">
                    A string representing the number to convert. 
                </param>
      <param name="style">
                    A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.
                </param>
      <param name="provider">
                    An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about <paramref name="s" />. 
                </param>
      <param name="result">
                    When this method returns, contains the 64-bit unsigned integer value equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not in a format compliant with <paramref name="style" />, or represents a number less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />. This parameter is passed uninitialized. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. 
                
                    -or-
                <paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.
                </exception>
    </member>
    <member name="M:System.UInt64.TryParse(System.String,System.UInt64@)">
      <summary>
                    Converts the string representation of a number to its 64-bit unsigned integer equivalent. A return value indicates whether the conversion succeeded or failed.
                </summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.
                </returns>
      <param name="s">
                    A string representing the number to convert. 
                </param>
      <param name="result">
                    When this method returns, contains the 64-bit unsigned integer value equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not of the correct format, or represents a number less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />. This parameter is passed uninitialized. 
                </param>
    </member>
    <member name="T:System.UIntPtr">
      <summary>
                    A platform-specific type that is used to represent a pointer or a handle.
                </summary>
    </member>
    <member name="M:System.UIntPtr.#ctor(System.UInt32)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.UIntPtr" /> structure using the specified 32-bit pointer or handle.
                </summary>
      <param name="value">
                    A pointer or handle contained in a 32-bit unsigned integer. 
                </param>
    </member>
    <member name="M:System.UIntPtr.#ctor(System.UInt64)">
      <summary>
                    Initializes a new instance of <see cref="T:System.UIntPtr" /> using the specified 64-bit pointer or handle.
                </summary>
      <param name="value">
                    A pointer or handle contained in a 64-bit unsigned integer. 
                </param>
      <exception cref="T:System.OverflowException">
                    On a 32-bit platform, <paramref name="value" /> is too large to represent as an <see cref="T:System.UIntPtr" />. 
                </exception>
    </member>
    <member name="M:System.UIntPtr.#ctor(System.Void*)">
      <summary>
                    Initializes a new instance of <see cref="T:System.UIntPtr" /> using the specified pointer to an unspecified type.
                </summary>
      <param name="value">
                    A pointer to an unspecified type. 
                </param>
    </member>
    <member name="M:System.UIntPtr.Equals(System.Object)">
      <summary>
                    Returns a value indicating whether this instance is equal to a specified object.
                </summary>
      <returns>true if <paramref name="obj" /> is an instance of <see cref="T:System.UIntPtr" /> and equals the value of this instance; otherwise, false.
                </returns>
      <param name="obj">
                    An object to compare with this instance or null. 
                </param>
    </member>
    <member name="M:System.UIntPtr.GetHashCode">
      <summary>
                    Returns the hash code for this instance.
                </summary>
      <returns>
                    A 32-bit signed integer hash code.
                </returns>
    </member>
    <member name="M:System.UIntPtr.op_Equality(System.UIntPtr,System.UIntPtr)">
      <summary>
                    Determines whether two specified instances of <see cref="T:System.UIntPtr" /> are equal.
                </summary>
      <returns>true if <paramref name="value1" /> equals <paramref name="value2" />; otherwise, false.
                </returns>
      <param name="value1">
                    A <see cref="T:System.UIntPtr" />. 
                </param>
      <param name="value2">
                    A <see cref="T:System.UIntPtr" />. 
                </param>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UInt32)~System.UIntPtr">
      <summary>
                    Converts the value of a 32-bit unsigned integer to an <see cref="T:System.UIntPtr" />.
                </summary>
      <returns>
                    A new instance of <see cref="T:System.UIntPtr" /> initialized to <paramref name="value" />.
                </returns>
      <param name="value">
                    A 32-bit unsigned integer. 
                </param>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UInt64)~System.UIntPtr">
      <summary>
                    Converts the value of a 64-bit unsigned integer to an <see cref="T:System.UIntPtr" />.
                </summary>
      <returns>
                    A new instance of <see cref="T:System.UIntPtr" /> initialized to <paramref name="value" />.
                </returns>
      <param name="value">
                    A 64-bit unsigned integer. 
                </param>
      <exception cref="T:System.OverflowException">
                    On a 32-bit platform, <paramref name="value" /> is too large to represent as an <see cref="T:System.UIntPtr" />. 
                </exception>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UIntPtr)~System.UInt32">
      <summary>
                    Converts the value of the specified <see cref="T:System.UIntPtr" /> to a 32-bit unsigned integer.
                </summary>
      <returns>
                    The contents of <paramref name="value" />.
                </returns>
      <param name="value">
                    A <see cref="T:System.UIntPtr" />. 
                </param>
      <exception cref="T:System.OverflowException">
                    On a 64-bit platform, the value of <paramref name="value" /> is too large to represent as a 32-bit unsigned integer. 
                </exception>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UIntPtr)~System.UInt64">
      <summary>
                    Converts the value of the specified <see cref="T:System.UIntPtr" /> to a 64-bit unsigned integer.
                </summary>
      <returns>
                    The contents of <paramref name="value" />.
                </returns>
      <param name="value">
                    A <see cref="T:System.UIntPtr" />. 
                </param>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UIntPtr)~System.Void*">
      <summary>
                    Converts the value of the specified <see cref="T:System.UIntPtr" /> to a pointer to an unspecified type.
                </summary>
      <returns>
                    The contents of <paramref name="value" />.
                </returns>
      <param name="value">
                    A <see cref="T:System.UIntPtr" />. 
                </param>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.Void*)~System.UIntPtr">
      <summary>
                    Converts the specified pointer to an unspecified type to a <see cref="T:System.UIntPtr" />.
                </summary>
      <returns>
                    A new instance of <see cref="T:System.UIntPtr" /> initialized to <paramref name="value" />.
                </returns>
      <param name="value">
                    A pointer to an unspecified type. 
                </param>
    </member>
    <member name="M:System.UIntPtr.op_Inequality(System.UIntPtr,System.UIntPtr)">
      <summary>
                    Determines whether two specified instances of <see cref="T:System.UIntPtr" /> are not equal.
                </summary>
      <returns>true if <paramref name="value1" /> does not equal <paramref name="value2" />; otherwise, false.
                </returns>
      <param name="value1">
                    A <see cref="T:System.UIntPtr" />. 
                </param>
      <param name="value2">
                    A <see cref="T:System.UIntPtr" />. 
                </param>
    </member>
    <member name="P:System.UIntPtr.Size">
      <summary>
                    Gets the size of this instance.
                </summary>
      <returns>
                    The size of a pointer or handle on this platform, measured in bytes. The value of this property is 4 on a 32-bit platform, and 8 on a 64-bit platform.
                </returns>
    </member>
    <member name="M:System.UIntPtr.ToPointer">
      <summary>
                    Converts the value of this instance to a pointer to an unspecified type.
                </summary>
      <returns>
                    A pointer to <see cref="T:System.Void" />; that is, a pointer to memory containing data of an unspecified type.
                </returns>
    </member>
    <member name="M:System.UIntPtr.ToString">
      <summary>
                    Converts the numeric value of this instance to its equivalent string representation.
                </summary>
      <returns>
                    The string representation of the value of this instance.
                </returns>
    </member>
    <member name="M:System.UIntPtr.ToUInt32">
      <summary>
                    Converts the value of this instance to a 32-bit unsigned integer.
                </summary>
      <returns>
                    A 32-bit unsigned integer equal to the value of this instance.
                </returns>
      <exception cref="T:System.OverflowException">
                    On a 64-bit platform, the value of this instance is too large to represent as a 32-bit unsigned integer. 
                </exception>
    </member>
    <member name="M:System.UIntPtr.ToUInt64">
      <summary>
                    Converts the value of this instance to a 64-bit unsigned integer.
                </summary>
      <returns>
                    A 64-bit unsigned integer equal to the value of this instance.
                </returns>
    </member>
    <member name="F:System.UIntPtr.Zero">
      <summary>
                    A read-only field that represents a pointer or handle that has been initialized to zero.
                </summary>
    </member>
    <member name="T:System.UnauthorizedAccessException">
      <summary>
                    The exception that is thrown when the operating system denies access because of an I/O error or a specific type of security error. 
                </summary>
    </member>
    <member name="M:System.UnauthorizedAccessException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.UnauthorizedAccessException" /> class.
                </summary>
    </member>
    <member name="M:System.UnauthorizedAccessException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.UnauthorizedAccessException" /> class with a specified error message.
                </summary>
      <param name="message">
                    The error message that explains the reason for the exception. 
                </param>
    </member>
    <member name="M:System.UnauthorizedAccessException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.UnauthorizedAccessException" /> class with a specified error message and a reference to the inner exception that caused this exception.
                </summary>
      <param name="message">
                    The error message that explains the reason for the exception. 
                </param>
      <param name="inner">
                    The exception that caused the current exception. If the <paramref name="inner" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. 
                </param>
    </member>
    <member name="T:System.UnhandledExceptionEventArgs">
      <summary>
                    Provides data for the event that is raised when there is an exception that is not handled in any application domain.
                </summary>
    </member>
    <member name="M:System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.UnhandledExceptionEventArgs" /> class with the exception object and a common language runtime termination flag.
                </summary>
      <param name="exception">
                    The exception that is not handled. 
                </param>
      <param name="isTerminating">true if the runtime is terminating; otherwise, false. 
                </param>
    </member>
    <member name="P:System.UnhandledExceptionEventArgs.ExceptionObject">
      <summary>
                    Gets the unhandled exception object.
                </summary>
      <returns>
                    The unhandled exception object.
                </returns>
    </member>
    <member name="P:System.UnhandledExceptionEventArgs.IsTerminating">
      <summary>
                    Indicates whether the common language runtime is terminating.
                </summary>
      <returns>true if the runtime is terminating; otherwise, false.
                </returns>
    </member>
    <member name="T:System.UnhandledExceptionEventHandler">
      <summary>[SECURITY CRITICAL] 
                    Represents the method that will handle the event raised by an exception that is not handled by the application domain.
                </summary>
      <param name="sender">
                    The source of the unhandled exception event. 
                </param>
      <param name="e">
                    The event data. 
                </param>
    </member>
    <member name="T:System.ValueType">
      <summary>
                    Provides the base class for value types.
                </summary>
    </member>
    <member name="M:System.ValueType.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ValueType" /> class. 
                </summary>
    </member>
    <member name="M:System.ValueType.Equals(System.Object)">
      <summary>
                    Indicates whether this instance and a specified object are equal.
                </summary>
      <returns>true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false.
                </returns>
      <param name="obj">
                    Another object to compare to. 
                </param>
    </member>
    <member name="M:System.ValueType.GetHashCode">
      <summary>
                    Returns the hash code for this instance.
                </summary>
      <returns>
                    A 32-bit signed integer that is the hash code for this instance.
                </returns>
    </member>
    <member name="M:System.ValueType.ToString">
      <summary>
                    Returns the fully qualified type name of this instance.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> containing a fully qualified type name.
                </returns>
    </member>
    <member name="T:System.Version">
      <summary>
                    Represents the version number for a common language runtime assembly. This class cannot be inherited.
                </summary>
    </member>
    <member name="M:System.Version.#ctor(System.Int32,System.Int32)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Version" /> class using the specified major and minor values.
                </summary>
      <param name="major">
                    The major version number. 
                </param>
      <param name="minor">
                    The minor version number. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="major" /> or <paramref name="minor" /> is less than zero. 
                </exception>
    </member>
    <member name="M:System.Version.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Version" /> class using the specified major, minor, and build values.
                </summary>
      <param name="major">
                    The major version number. 
                </param>
      <param name="minor">
                    The minor version number. 
                </param>
      <param name="build">
                    The build number. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="major" />, <paramref name="minor" />, or <paramref name="build" /> is less than zero. 
                </exception>
    </member>
    <member name="M:System.Version.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Version" /> class with the specified major, minor, build, and revision numbers.
                </summary>
      <param name="major">
                    The major version number. 
                </param>
      <param name="minor">
                    The minor version number. 
                </param>
      <param name="build">
                    The build number. 
                </param>
      <param name="revision">
                    The revision number. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="major" />, <paramref name="minor" />, <paramref name="build" />, or <paramref name="revision" /> is less than zero. 
                </exception>
    </member>
    <member name="M:System.Version.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Version" /> class using the specified string.
                </summary>
      <param name="version">
                    A string containing the major, minor, build, and revision numbers, where each number is delimited with a period character ('.'). 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="version" /> has fewer than two components or more than four components. 
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    A major, minor, build, or revision component is less than zero. 
                </exception>
      <exception cref="T:System.FormatException">
                    At least one component of <paramref name="version" /> does not parse to an integer. 
                </exception>
      <exception cref="T:System.OverflowException">
                    At least one component of <paramref name="version" /> represents a number greater than <see cref="F:System.Int32.MaxValue" />.
                </exception>
    </member>
    <member name="P:System.Version.Build">
      <summary>
                    Gets the value of the build component of the version number for the current <see cref="T:System.Version" /> object.
                </summary>
      <returns>
                    The build number, or -1 if the build number is undefined.
                </returns>
    </member>
    <member name="M:System.Version.Clone">
      <summary>
                    Returns a new <see cref="T:System.Version" /> object whose value is the same as the current <see cref="T:System.Version" /> object.
                </summary>
      <returns>
                    A new <see cref="T:System.Object" /> whose values are a copy of the current <see cref="T:System.Version" /> object.
                </returns>
    </member>
    <member name="M:System.Version.CompareTo(System.Object)">
      <summary>
                    Compares the current <see cref="T:System.Version" /> object to a specified object and returns an indication of their relative values.
                </summary>
      <returns>
                    Return Value 
                
                    Description 
                
                    Less than zero 
                
                    The current <see cref="T:System.Version" /> object is a version before <paramref name="version" />. 
                
                    Zero 
                
                    The current <see cref="T:System.Version" /> object is the same version as <paramref name="version" />. 
                
                    Greater than zero 
                
                    The current <see cref="T:System.Version" /> object is a version subsequent to <paramref name="version" />.
                
                    -or- 
                <paramref name="version" /> is null. 
                </returns>
      <param name="version">
                    An object to compare, or null. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="version" /> is not of type <see cref="T:System.Version" />. 
                </exception>
    </member>
    <member name="M:System.Version.CompareTo(System.Version)">
      <summary>
                    Compares the current <see cref="T:System.Version" /> object to a specified <see cref="T:System.Version" /> object and returns an indication of their relative values.
                </summary>
      <returns>
                    Return Value 
                
                    Description 
                
                    Less than zero 
                
                    The current <see cref="T:System.Version" /> object is a version before <paramref name="value" />. 
                
                    Zero 
                
                    The current <see cref="T:System.Version" /> object is the same version as <paramref name="value" />. 
                
                    Greater than zero 
                
                    The current <see cref="T:System.Version" /> object is a version subsequent to <paramref name="value" />. 
                
                    -or-
                <paramref name="value" /> is null.
                </returns>
      <param name="value">
                    A <see cref="T:System.Version" /> object to compare to the current <see cref="T:System.Version" /> object, or null.
                </param>
    </member>
    <member name="M:System.Version.Equals(System.Object)">
      <summary>
                    Returns a value indicating whether the current <see cref="T:System.Version" /> object is equal to a specified object.
                </summary>
      <returns>true if the current <see cref="T:System.Version" /> object and <paramref name="obj" /> are both <see cref="T:System.Version" /> objects, and every component of the current <see cref="T:System.Version" /> object matches the corresponding component of <paramref name="obj" />; otherwise, false.
                </returns>
      <param name="obj">
                    An object to compare with the current <see cref="T:System.Version" /> object, or null. 
                </param>
    </member>
    <member name="M:System.Version.Equals(System.Version)">
      <summary>
                    Returns a value indicating whether the current <see cref="T:System.Version" /> object and a specified <see cref="T:System.Version" /> object represent the same value.
                </summary>
      <returns>true if every component of the current <see cref="T:System.Version" /> object matches the corresponding component of the <paramref name="obj" /> parameter; otherwise, false.
                </returns>
      <param name="obj">
                    A <see cref="T:System.Version" /> object to compare to the current <see cref="T:System.Version" /> object, or null.
                </param>
    </member>
    <member name="M:System.Version.GetHashCode">
      <summary>
                    Returns a hash code for the current <see cref="T:System.Version" /> object.
                </summary>
      <returns>
                    A 32-bit signed integer hash code.
                </returns>
    </member>
    <member name="P:System.Version.Major">
      <summary>
                    Gets the value of the major component of the version number for the current <see cref="T:System.Version" /> object.
                </summary>
      <returns>
                    The major version number.
                </returns>
    </member>
    <member name="P:System.Version.Minor">
      <summary>
                    Gets the value of the minor component of the version number for the current <see cref="T:System.Version" /> object.
                </summary>
      <returns>
                    The minor version number.
                </returns>
    </member>
    <member name="M:System.Version.op_Equality(System.Version,System.Version)">
      <summary>
                    Determines whether two specified <see cref="T:System.Version" /> objects are equal.
                </summary>
      <returns>true if <paramref name="v1" /> equals <paramref name="v2" />; otherwise, false.
                </returns>
      <param name="v1">
                    The first <see cref="T:System.Version" /> object. 
                </param>
      <param name="v2">
                    The second <see cref="T:System.Version" /> object. 
                </param>
    </member>
    <member name="M:System.Version.op_GreaterThan(System.Version,System.Version)">
      <summary>
                    Determines whether the first specified <see cref="T:System.Version" /> object is greater than the second specified <see cref="T:System.Version" /> object.
                </summary>
      <returns>true if <paramref name="v1" /> is greater than <paramref name="v2" />; otherwise, false.
                </returns>
      <param name="v1">
                    The first <see cref="T:System.Version" /> object. 
                </param>
      <param name="v2">
                    The second <see cref="T:System.Version" /> object. 
                </param>
    </member>
    <member name="M:System.Version.op_GreaterThanOrEqual(System.Version,System.Version)">
      <summary>
                    Determines whether the first specified <see cref="T:System.Version" /> object is greater than or equal to the second specified <see cref="T:System.Version" /> object.
                </summary>
      <returns>true if <paramref name="v1" /> is greater than or equal to <paramref name="v2" />; otherwise, false.
                </returns>
      <param name="v1">
                    The first <see cref="T:System.Version" /> object. 
                </param>
      <param name="v2">
                    The second <see cref="T:System.Version" /> object. 
                </param>
    </member>
    <member name="M:System.Version.op_Inequality(System.Version,System.Version)">
      <summary>
                    Determines whether two specified <see cref="T:System.Version" /> objects are not equal.
                </summary>
      <returns>true if <paramref name="v1" /> does not equal <paramref name="v2" />; otherwise, false.
                </returns>
      <param name="v1">
                    The first <see cref="T:System.Version" /> object. 
                </param>
      <param name="v2">
                    The second <see cref="T:System.Version" /> object. 
                </param>
    </member>
    <member name="M:System.Version.op_LessThan(System.Version,System.Version)">
      <summary>
                    Determines whether the first specified <see cref="T:System.Version" /> object is less than the second specified <see cref="T:System.Version" /> object.
                </summary>
      <returns>true if <paramref name="v1" /> is less than <paramref name="v2" />; otherwise, false.
                </returns>
      <param name="v1">
                    The first <see cref="T:System.Version" /> object. 
                </param>
      <param name="v2">
                    The second <see cref="T:System.Version" /> object. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="v1" /> is null. 
                </exception>
    </member>
    <member name="M:System.Version.op_LessThanOrEqual(System.Version,System.Version)">
      <summary>
                    Determines whether the first specified <see cref="T:System.Version" /> object is less than or equal to the second <see cref="T:System.Version" /> object.
                </summary>
      <returns>true if <paramref name="v1" /> is less than or equal to <paramref name="v2" />; otherwise, false.
                </returns>
      <param name="v1">
                    The first <see cref="T:System.Version" /> object. 
                </param>
      <param name="v2">
                    The second <see cref="T:System.Version" /> object. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="v1" /> is null. 
                </exception>
    </member>
    <member name="P:System.Version.Revision">
      <summary>
                    Gets the value of the revision component of the version number for the current <see cref="T:System.Version" /> object.
                </summary>
      <returns>
                    The revision number, or -1 if the revision number is undefined.
                </returns>
    </member>
    <member name="M:System.Version.ToString">
      <summary>
                    Converts the value of the current <see cref="T:System.Version" /> object to its equivalent <see cref="T:System.String" /> representation.
                </summary>
      <returns>
                    The <see cref="T:System.String" /> representation of the values of the major, minor, build, and revision components of the current <see cref="T:System.Version" /> object, as depicted in the following format. Each component is separated by a period character ('.'). Square brackets ('[' and ']') indicate a component that will not appear in the return value if the component is not defined: 
                
                    major.minor[.build[.revision]] 
                
                    For example, if you create a <see cref="T:System.Version" /> object using the constructor Version(1,1), the returned string is "1.1". If you create a <see cref="T:System.Version" /> object using the constructor Version(1,3,4,2), the returned string is "1.3.4.2".
                </returns>
    </member>
    <member name="M:System.Version.ToString(System.Int32)">
      <summary>
                    Converts the value of the current <see cref="T:System.Version" /> object to its equivalent <see cref="T:System.String" /> representation. A specified count indicates the number of components to return.
                </summary>
      <returns>
                    The <see cref="T:System.String" /> representation of the values of the major, minor, build, and revision components of the current <see cref="T:System.Version" /> object, each separated by a period character ('.'). The <paramref name="fieldCount" /> parameter determines how many components are returned.
                
                    fieldCount 
                
                    Return Value 
                
                    0 
                
                    An empty string (""). 
                
                    1 
                
                    major 
                
                    2 
                
                    major.minor 
                
                    3 
                
                    major.minor.build 
                
                    4 
                
                    major.minor.build.revision 
                
                    For example, if you create <see cref="T:System.Version" /> object using the constructor Version(1,3,5), ToString(2) returns "1.3" and ToString(4) throws an exception.
                </returns>
      <param name="fieldCount">
                    The number of components to return. The <paramref name="fieldCount" /> ranges from 0 to 4. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fieldCount" /> is less than 0, or more than 4.
                
                    -or- 
                <paramref name="fieldCount" /> is more than the number of components defined in the current <see cref="T:System.Version" /> object. 
                </exception>
    </member>
    <member name="T:System.Void">
      <summary>
                    Specifies a return value type for a method that does not return a value.
                </summary>
    </member>
    <member name="T:System.WeakReference">
      <summary>
                    Represents a weak reference, which references an object while still allowing that object to be reclaimed by garbage collection.
                </summary>
    </member>
    <member name="M:System.WeakReference.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.WeakReference" /> class.
                </summary>
    </member>
    <member name="M:System.WeakReference.#ctor(System.Object)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.WeakReference" /> class, referencing the specified object.
                </summary>
      <param name="target">
                    The object to track or null. 
                </param>
    </member>
    <member name="M:System.WeakReference.#ctor(System.Object,System.Boolean)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.WeakReference" /> class, referencing the specified object and using the specified resurrection tracking.
                </summary>
      <param name="target">
                    An object to track. 
                </param>
      <param name="trackResurrection">
                    Indicates when to stop tracking the object. If true, the object is tracked after finalization; if false, the object is only tracked until finalization. 
                </param>
    </member>
    <member name="M:System.WeakReference.Finalize">
      <summary>
                    Discards the reference to the target represented by the current <see cref="T:System.WeakReference" /> object.
                </summary>
    </member>
    <member name="P:System.WeakReference.IsAlive">
      <summary>
                    Gets an indication whether the object referenced by the current <see cref="T:System.WeakReference" /> object has been garbage collected.
                </summary>
      <returns>true if the object referenced by the current <see cref="T:System.WeakReference" /> object has not been garbage collected and is still accessible; otherwise, false.
                </returns>
    </member>
    <member name="P:System.WeakReference.Target">
      <summary>
                    Gets or sets the object (the target) referenced by the current <see cref="T:System.WeakReference" /> object.
                </summary>
      <returns>null if the object referenced by the current <see cref="T:System.WeakReference" /> object has been garbage collected; otherwise, a reference to the object referenced by the current <see cref="T:System.WeakReference" /> object.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The reference to the target object is invalid. This exception can be thrown while setting this property if the value is a null reference or if the object has been finalized during the set operation.
                </exception>
    </member>
    <member name="P:System.WeakReference.TrackResurrection">
      <summary>
                    Gets an indication whether the object referenced by the current <see cref="T:System.WeakReference" /> object is tracked after it is finalized.
                </summary>
      <returns>true if the object the current <see cref="T:System.WeakReference" /> object refers to is tracked after finalization; or false if the object is only tracked until finalization.
                </returns>
    </member>
    <member name="T:System.Collections.BitArray">
      <summary>
                    Manages a compact array of bit values, which are represented as Booleans, where true indicates that the bit is on (1) and false indicates the bit is off (0).
                </summary>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Boolean[])">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Collections.BitArray" /> class that contains bit values copied from the specified array of Booleans.
                </summary>
      <param name="values">
                    An array of Booleans to copy. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is null. 
                </exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Byte[])">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Collections.BitArray" /> class that contains bit values copied from the specified array of bytes.
                </summary>
      <param name="bytes">
                    An array of bytes containing the values to copy, where each byte represents eight consecutive bits. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
                    The length of <paramref name="bytes" /> is greater than <see cref="F:System.Int32.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Collections.BitArray)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Collections.BitArray" /> class that contains bit values copied from the specified <see cref="T:System.Collections.BitArray" />.
                </summary>
      <param name="bits">
                    The <see cref="T:System.Collections.BitArray" /> to copy. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bits" /> is null. 
                </exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Int32)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Collections.BitArray" /> class that can hold the specified number of bit values, which are initially set to false.
                </summary>
      <param name="length">
                    The number of bit values in the new <see cref="T:System.Collections.BitArray" />. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> is less than zero. 
                </exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Int32,System.Boolean)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Collections.BitArray" /> class that can hold the specified number of bit values, which are initially set to the specified value.
                </summary>
      <param name="length">
                    The number of bit values in the new <see cref="T:System.Collections.BitArray" />. 
                </param>
      <param name="defaultValue">
                    The Boolean value to assign to each bit. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> is less than zero. 
                </exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Int32[])">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Collections.BitArray" /> class that contains bit values copied from the specified array of 32-bit integers.
                </summary>
      <param name="values">
                    An array of integers containing the values to copy, where each integer represents 32 consecutive bits. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
                    The length of <paramref name="values" /> is greater than <see cref="F:System.Int32.MaxValue" /></exception>
    </member>
    <member name="M:System.Collections.BitArray.And(System.Collections.BitArray)">
      <summary>
                    Performs the bitwise AND operation on the elements in the current <see cref="T:System.Collections.BitArray" /> against the corresponding elements in the specified <see cref="T:System.Collections.BitArray" />.
                </summary>
      <returns>
                    A <see cref="T:System.Collections.BitArray" /> containing the result of the bitwise AND operation on the elements in the current <see cref="T:System.Collections.BitArray" /> against the corresponding elements in the specified <see cref="T:System.Collections.BitArray" />.
                </returns>
      <param name="value">
                    The <see cref="T:System.Collections.BitArray" /> with which to perform the bitwise AND operation. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> and the current <see cref="T:System.Collections.BitArray" /> do not have the same number of elements. 
                </exception>
    </member>
    <member name="M:System.Collections.BitArray.Clone">
      <summary>
                    Creates a shallow copy of the <see cref="T:System.Collections.BitArray" />.
                </summary>
      <returns>
                    A shallow copy of the <see cref="T:System.Collections.BitArray" />.
                </returns>
    </member>
    <member name="M:System.Collections.BitArray.CopyTo(System.Array,System.Int32)">
      <summary>
                    Copies the entire <see cref="T:System.Collections.BitArray" /> to a compatible one-dimensional <see cref="T:System.Array" />, starting at the specified index of the target array.
                </summary>
      <param name="array">
                    The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.BitArray" />. The <see cref="T:System.Array" /> must have zero-based indexing. 
                </param>
      <param name="index">
                    The zero-based index in <paramref name="array" /> at which copying begins. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.
                
                    -or- 
                <paramref name="index" /> is equal to or greater than the length of <paramref name="array" />.
                
                    -or- 
                
                    The number of elements in the source <see cref="T:System.Collections.BitArray" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />. 
                </exception>
      <exception cref="T:System.InvalidCastException">
                    The type of the source <see cref="T:System.Collections.BitArray" /> cannot be cast automatically to the type of the destination <paramref name="array" />. 
                </exception>
    </member>
    <member name="P:System.Collections.BitArray.Count">
      <summary>
                    Gets the number of elements contained in the <see cref="T:System.Collections.BitArray" />.
                </summary>
      <returns>
                    The number of elements contained in the <see cref="T:System.Collections.BitArray" />.
                </returns>
    </member>
    <member name="M:System.Collections.BitArray.Get(System.Int32)">
      <summary>
                    Gets the value of the bit at a specific position in the <see cref="T:System.Collections.BitArray" />.
                </summary>
      <returns>
                    The value of the bit at position <paramref name="index" />.
                </returns>
      <param name="index">
                    The zero-based index of the value to get. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.
                
                    -or- 
                <paramref name="index" /> is greater than or equal to the number of elements in the <see cref="T:System.Collections.BitArray" />. 
                </exception>
    </member>
    <member name="M:System.Collections.BitArray.GetEnumerator">
      <summary>
                    Returns an enumerator that iterates through the <see cref="T:System.Collections.BitArray" />.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.IEnumerator" /> for the entire <see cref="T:System.Collections.BitArray" />.
                </returns>
    </member>
    <member name="P:System.Collections.BitArray.IsReadOnly">
      <summary>
                    Gets a value indicating whether the <see cref="T:System.Collections.BitArray" /> is read-only.
                </summary>
      <returns>
                    This property is always false.
                </returns>
    </member>
    <member name="P:System.Collections.BitArray.IsSynchronized">
      <summary>
                    Gets a value indicating whether access to the <see cref="T:System.Collections.BitArray" /> is synchronized (thread safe).
                </summary>
      <returns>
                    This property is always false.
                </returns>
    </member>
    <member name="P:System.Collections.BitArray.Item(System.Int32)">
      <summary>
                    Gets or sets the value of the bit at a specific position in the <see cref="T:System.Collections.BitArray" />.
                </summary>
      <returns>
                    The value of the bit at position <paramref name="index" />.
                </returns>
      <param name="index">
                    The zero-based index of the value to get or set. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.
                
                    -or- 
                <paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.BitArray.Count" />. 
                </exception>
    </member>
    <member name="P:System.Collections.BitArray.Length">
      <summary>
                    Gets or sets the number of elements in the <see cref="T:System.Collections.BitArray" />.
                </summary>
      <returns>
                    The number of elements in the <see cref="T:System.Collections.BitArray" />.
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The property is set to a value that is less than zero. 
                </exception>
    </member>
    <member name="M:System.Collections.BitArray.Not">
      <summary>
                    Inverts all the bit values in the current <see cref="T:System.Collections.BitArray" />, so that elements set to true are changed to false, and elements set to false are changed to true.
                </summary>
      <returns>
                    The current instance with inverted bit values.
                </returns>
    </member>
    <member name="M:System.Collections.BitArray.Or(System.Collections.BitArray)">
      <summary>
                    Performs the bitwise OR operation on the elements in the current <see cref="T:System.Collections.BitArray" /> against the corresponding elements in the specified <see cref="T:System.Collections.BitArray" />.
                </summary>
      <returns>
                    A <see cref="T:System.Collections.BitArray" /> containing the result of the bitwise OR operation on the elements in the current <see cref="T:System.Collections.BitArray" /> against the corresponding elements in the specified <see cref="T:System.Collections.BitArray" />.
                </returns>
      <param name="value">
                    The <see cref="T:System.Collections.BitArray" /> with which to perform the bitwise OR operation. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> and the current <see cref="T:System.Collections.BitArray" /> do not have the same number of elements. 
                </exception>
    </member>
    <member name="M:System.Collections.BitArray.Set(System.Int32,System.Boolean)">
      <summary>
                    Sets the bit at a specific position in the <see cref="T:System.Collections.BitArray" /> to the specified value.
                </summary>
      <param name="index">
                    The zero-based index of the bit to set. 
                </param>
      <param name="value">
                    The Boolean value to assign to the bit. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.
                
                    -or- 
                <paramref name="index" /> is greater than or equal to the number of elements in the <see cref="T:System.Collections.BitArray" />. 
                </exception>
    </member>
    <member name="M:System.Collections.BitArray.SetAll(System.Boolean)">
      <summary>
                    Sets all bits in the <see cref="T:System.Collections.BitArray" /> to the specified value.
                </summary>
      <param name="value">
                    The Boolean value to assign to all bits. 
                </param>
    </member>
    <member name="P:System.Collections.BitArray.SyncRoot">
      <summary>
                    Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.BitArray" />.
                </summary>
      <returns>
                    An object that can be used to synchronize access to the <see cref="T:System.Collections.BitArray" />.
                </returns>
    </member>
    <member name="M:System.Collections.BitArray.Xor(System.Collections.BitArray)">
      <summary>
                    Performs the bitwise exclusive OR operation on the elements in the current <see cref="T:System.Collections.BitArray" /> against the corresponding elements in the specified <see cref="T:System.Collections.BitArray" />.
                </summary>
      <returns>
                    A <see cref="T:System.Collections.BitArray" /> containing the result of the bitwise exclusive OR operation on the elements in the current <see cref="T:System.Collections.BitArray" /> against the corresponding elements in the specified <see cref="T:System.Collections.BitArray" />.
                </returns>
      <param name="value">
                    The <see cref="T:System.Collections.BitArray" /> with which to perform the bitwise exclusive OR operation. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> and the current <see cref="T:System.Collections.BitArray" /> do not have the same number of elements. 
                </exception>
    </member>
    <member name="T:System.Collections.DictionaryEntry">
      <summary>
                    Defines a dictionary key/value pair that can be set or retrieved.
                </summary>
    </member>
    <member name="M:System.Collections.DictionaryEntry.#ctor(System.Object,System.Object)">
      <summary>
                    Initializes an instance of the <see cref="T:System.Collections.DictionaryEntry" /> type with the specified key and value.
                </summary>
      <param name="key">
                    The object defined in each key/value pair. 
                </param>
      <param name="value">
                    The definition associated with <paramref name="key" />. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null and the .NET Framework version is 1.0 or 1.1. 
                </exception>
    </member>
    <member name="P:System.Collections.DictionaryEntry.Key">
      <summary>
                    Gets or sets the key in the key/value pair.
                </summary>
      <returns>
                    The key in the key/value pair.
                </returns>
    </member>
    <member name="P:System.Collections.DictionaryEntry.Value">
      <summary>
                    Gets or sets the value in the key/value pair.
                </summary>
      <returns>
                    The value in the key/value pair.
                </returns>
    </member>
    <member name="T:System.Collections.ICollection">
      <summary>
                    Defines size, enumerators, and synchronization methods for all nongeneric collections.
                </summary>
    </member>
    <member name="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)">
      <summary>
                    Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
                </summary>
      <param name="array">
                    The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing. 
                </param>
      <param name="index">
                    The zero-based index in <paramref name="array" /> at which copying begins. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.
                
                    -or- 
                <paramref name="index" /> is equal to or greater than the length of <paramref name="array" />.
                
                    -or- 
                
                    The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />. 
                </exception>
      <exception cref="T:System.ArgumentException">
                    The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />. 
                </exception>
    </member>
    <member name="P:System.Collections.ICollection.Count">
      <summary>
                    Gets the number of elements contained in the <see cref="T:System.Collections.ICollection" />.
                </summary>
      <returns>
                    The number of elements contained in the <see cref="T:System.Collections.ICollection" />.
                </returns>
    </member>
    <member name="P:System.Collections.ICollection.IsSynchronized">
      <summary>
                    Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).
                </summary>
      <returns>true if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, false.
                </returns>
    </member>
    <member name="P:System.Collections.ICollection.SyncRoot">
      <summary>
                    Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.
                </summary>
      <returns>
                    An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.
                </returns>
    </member>
    <member name="T:System.Collections.IComparer">
      <summary>
                    Exposes a method that compares two objects.
                </summary>
    </member>
    <member name="M:System.Collections.IComparer.Compare(System.Object,System.Object)">
      <summary>
                    Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
                </summary>
      <returns>
                    Value 
                
                    Condition 
                
                    Less than zero 
                <paramref name="x" /> is less than <paramref name="y" />. 
                
                    Zero 
                <paramref name="x" /> equals <paramref name="y" />. 
                
                    Greater than zero 
                <paramref name="x" /> is greater than <paramref name="y" />. 
                </returns>
      <param name="x">
                    The first object to compare. 
                </param>
      <param name="y">
                    The second object to compare. 
                </param>
      <exception cref="T:System.ArgumentException">
                    Neither <paramref name="x" /> nor <paramref name="y" /> implements the <see cref="T:System.IComparable" /> interface.
                
                    -or- 
                <paramref name="x" /> and <paramref name="y" /> are of different types and neither one can handle comparisons with the other. 
                </exception>
    </member>
    <member name="T:System.Collections.IDictionary">
      <summary>
                    Represents a nongeneric collection of key/value pairs.
                </summary>
    </member>
    <member name="M:System.Collections.IDictionary.Add(System.Object,System.Object)">
      <summary>
                    Adds an element with the provided key and value to the <see cref="T:System.Collections.IDictionary" /> object.
                </summary>
      <param name="key">
                    The <see cref="T:System.Object" /> to use as the key of the element to add. 
                </param>
      <param name="value">
                    The <see cref="T:System.Object" /> to use as the value of the element to add. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
                    An element with the same key already exists in the <see cref="T:System.Collections.IDictionary" /> object. 
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:System.Collections.IDictionary" /> is read-only.
                
                    -or- 
                
                    The <see cref="T:System.Collections.IDictionary" /> has a fixed size. 
                </exception>
    </member>
    <member name="M:System.Collections.IDictionary.Clear">
      <summary>
                    Removes all elements from the <see cref="T:System.Collections.IDictionary" /> object.
                </summary>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:System.Collections.IDictionary" /> object is read-only. 
                </exception>
    </member>
    <member name="M:System.Collections.IDictionary.Contains(System.Object)">
      <summary>
                    Determines whether the <see cref="T:System.Collections.IDictionary" /> object contains an element with the specified key.
                </summary>
      <returns>true if the <see cref="T:System.Collections.IDictionary" /> contains an element with the key; otherwise, false.
                </returns>
      <param name="key">
                    The key to locate in the <see cref="T:System.Collections.IDictionary" /> object.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null. 
                </exception>
    </member>
    <member name="M:System.Collections.IDictionary.GetEnumerator">
      <summary>
                    Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> object for the <see cref="T:System.Collections.IDictionary" /> object.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.IDictionaryEnumerator" /> object for the <see cref="T:System.Collections.IDictionary" /> object.
                </returns>
    </member>
    <member name="P:System.Collections.IDictionary.IsFixedSize">
      <summary>
                    Gets a value indicating whether the <see cref="T:System.Collections.IDictionary" /> object has a fixed size.
                </summary>
      <returns>true if the <see cref="T:System.Collections.IDictionary" /> object has a fixed size; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Collections.IDictionary.IsReadOnly">
      <summary>
                    Gets a value indicating whether the <see cref="T:System.Collections.IDictionary" /> object is read-only.
                </summary>
      <returns>true if the <see cref="T:System.Collections.IDictionary" /> object is read-only; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Collections.IDictionary.Item(System.Object)">
      <summary>
                    Gets or sets the element with the specified key.
                </summary>
      <returns>
                    The element with the specified key.
                </returns>
      <param name="key">
                    The key of the element to get or set. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null. 
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The property is set and the <see cref="T:System.Collections.IDictionary" /> object is read-only.
                
                    -or- 
                
                    The property is set, <paramref name="key" /> does not exist in the collection, and the <see cref="T:System.Collections.IDictionary" /> has a fixed size. 
                </exception>
    </member>
    <member name="P:System.Collections.IDictionary.Keys">
      <summary>
                    Gets an <see cref="T:System.Collections.ICollection" /> object containing the keys of the <see cref="T:System.Collections.IDictionary" /> object.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.ICollection" /> object containing the keys of the <see cref="T:System.Collections.IDictionary" /> object.
                </returns>
    </member>
    <member name="M:System.Collections.IDictionary.Remove(System.Object)">
      <summary>
                    Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary" /> object.
                </summary>
      <param name="key">
                    The key of the element to remove. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null. 
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:System.Collections.IDictionary" /> object is read-only.
                
                    -or- 
                
                    The <see cref="T:System.Collections.IDictionary" /> has a fixed size. 
                </exception>
    </member>
    <member name="P:System.Collections.IDictionary.Values">
      <summary>
                    Gets an <see cref="T:System.Collections.ICollection" /> object containing the values in the <see cref="T:System.Collections.IDictionary" /> object.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.ICollection" /> object containing the values in the <see cref="T:System.Collections.IDictionary" /> object.
                </returns>
    </member>
    <member name="T:System.Collections.IDictionaryEnumerator">
      <summary>
                    Enumerates the elements of a nongeneric dictionary.
                </summary>
    </member>
    <member name="P:System.Collections.IDictionaryEnumerator.Entry">
      <summary>
                    Gets both the key and the value of the current dictionary entry.
                </summary>
      <returns>
                    A <see cref="T:System.Collections.DictionaryEntry" /> containing both the key and the value of the current dictionary entry.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="T:System.Collections.IDictionaryEnumerator" /> is positioned before the first entry of the dictionary or after the last entry. 
                </exception>
    </member>
    <member name="P:System.Collections.IDictionaryEnumerator.Key">
      <summary>
                    Gets the key of the current dictionary entry.
                </summary>
      <returns>
                    The key of the current element of the enumeration.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="T:System.Collections.IDictionaryEnumerator" /> is positioned before the first entry of the dictionary or after the last entry. 
                </exception>
    </member>
    <member name="P:System.Collections.IDictionaryEnumerator.Value">
      <summary>
                    Gets the value of the current dictionary entry.
                </summary>
      <returns>
                    The value of the current element of the enumeration.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="T:System.Collections.IDictionaryEnumerator" /> is positioned before the first entry of the dictionary or after the last entry. 
                </exception>
    </member>
    <member name="T:System.Collections.IEnumerable">
      <summary>
                    Exposes the enumerator, which supports a simple iteration over a non-generic collection.
                </summary>
    </member>
    <member name="M:System.Collections.IEnumerable.GetEnumerator">
      <summary>
                    Returns an enumerator that iterates through a collection.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
                </returns>
    </member>
    <member name="T:System.Collections.IEnumerator">
      <summary>
                    Supports a simple iteration over a nongeneric collection.
                </summary>
    </member>
    <member name="P:System.Collections.IEnumerator.Current">
      <summary>
                    Gets the current element in the collection.
                </summary>
      <returns>
                    The current element in the collection.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The enumerator is positioned before the first element of the collection or after the last element.
                
                    -or- 
                
                    The collection was modified after the enumerator was created.
                </exception>
    </member>
    <member name="M:System.Collections.IEnumerator.MoveNext">
      <summary>
                    Advances the enumerator to the next element of the collection.
                </summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The collection was modified after the enumerator was created. 
                </exception>
    </member>
    <member name="M:System.Collections.IEnumerator.Reset">
      <summary>
                    Sets the enumerator to its initial position, which is before the first element in the collection.
                </summary>
      <exception cref="T:System.InvalidOperationException">
                    The collection was modified after the enumerator was created. 
                </exception>
    </member>
    <member name="T:System.Collections.IEqualityComparer">
      <summary>
                    Defines methods to support the comparison of objects for equality.
                </summary>
    </member>
    <member name="M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)">
      <summary>
                    Determines whether the specified objects are equal.
                </summary>
      <returns>true if the specified objects are equal; otherwise, false.
                </returns>
      <param name="x">
                    The first object to compare.
                </param>
      <param name="y">
                    The second object to compare.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="y" /> are of different types and neither one can handle comparisons with the other.
                </exception>
    </member>
    <member name="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)">
      <summary>
                    Returns a hash code for the specified object.
                </summary>
      <returns>
                    A hash code for the specified object.
                </returns>
      <param name="obj">
                    The <see cref="T:System.Object" /> for which a hash code is to be returned.
                </param>
      <exception cref="T:System.ArgumentNullException">
                    The type of <paramref name="obj" /> is a reference type and <paramref name="obj" /> is null.
                </exception>
    </member>
    <member name="T:System.Collections.IList">
      <summary>
                    Represents a non-generic collection of objects that can be individually accessed by index.
                </summary>
    </member>
    <member name="M:System.Collections.IList.Add(System.Object)">
      <summary>
                    Adds an item to the <see cref="T:System.Collections.IList" />.
                </summary>
      <returns>
                    The position into which the new element was inserted.
                </returns>
      <param name="value">
                    The <see cref="T:System.Object" /> to add to the <see cref="T:System.Collections.IList" />. 
                </param>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:System.Collections.IList" /> is read-only.
                
                    -or- 
                
                    The <see cref="T:System.Collections.IList" /> has a fixed size. 
                </exception>
    </member>
    <member name="M:System.Collections.IList.Clear">
      <summary>
                    Removes all items from the <see cref="T:System.Collections.IList" />.
                </summary>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:System.Collections.IList" /> is read-only. 
                </exception>
    </member>
    <member name="M:System.Collections.IList.Contains(System.Object)">
      <summary>
                    Determines whether the <see cref="T:System.Collections.IList" /> contains a specific value.
                </summary>
      <returns>true if the <see cref="T:System.Object" /> is found in the <see cref="T:System.Collections.IList" />; otherwise, false.
                </returns>
      <param name="value">
                    The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.IList" />. 
                </param>
    </member>
    <member name="M:System.Collections.IList.IndexOf(System.Object)">
      <summary>
                    Determines the index of a specific item in the <see cref="T:System.Collections.IList" />.
                </summary>
      <returns>
                    The index of <paramref name="value" /> if found in the list; otherwise, -1.
                </returns>
      <param name="value">
                    The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.IList" />. 
                </param>
    </member>
    <member name="M:System.Collections.IList.Insert(System.Int32,System.Object)">
      <summary>
                    Inserts an item to the <see cref="T:System.Collections.IList" /> at the specified index.
                </summary>
      <param name="index">
                    The zero-based index at which <paramref name="value" /> should be inserted. 
                </param>
      <param name="value">
                    The <see cref="T:System.Object" /> to insert into the <see cref="T:System.Collections.IList" />. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />. 
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:System.Collections.IList" /> is read-only.
                
                    -or- 
                
                    The <see cref="T:System.Collections.IList" /> has a fixed size. 
                </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="value" /> is null reference in the <see cref="T:System.Collections.IList" />.
                </exception>
    </member>
    <member name="P:System.Collections.IList.IsFixedSize">
      <summary>
                    Gets a value indicating whether the <see cref="T:System.Collections.IList" /> has a fixed size.
                </summary>
      <returns>true if the <see cref="T:System.Collections.IList" /> has a fixed size; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Collections.IList.IsReadOnly">
      <summary>
                    Gets a value indicating whether the <see cref="T:System.Collections.IList" /> is read-only.
                </summary>
      <returns>true if the <see cref="T:System.Collections.IList" /> is read-only; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Collections.IList.Item(System.Int32)">
      <summary>
                    Gets or sets the element at the specified index.
                </summary>
      <returns>
                    The element at the specified index.
                </returns>
      <param name="index">
                    The zero-based index of the element to get or set. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />. 
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The property is set and the <see cref="T:System.Collections.IList" /> is read-only. 
                </exception>
    </member>
    <member name="M:System.Collections.IList.Remove(System.Object)">
      <summary>
                    Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList" />.
                </summary>
      <param name="value">
                    The <see cref="T:System.Object" /> to remove from the <see cref="T:System.Collections.IList" />. 
                </param>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:System.Collections.IList" /> is read-only.
                
                    -or- 
                
                    The <see cref="T:System.Collections.IList" /> has a fixed size. 
                </exception>
    </member>
    <member name="M:System.Collections.IList.RemoveAt(System.Int32)">
      <summary>
                    Removes the <see cref="T:System.Collections.IList" /> item at the specified index.
                </summary>
      <param name="index">
                    The zero-based index of the item to remove. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />. 
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:System.Collections.IList" /> is read-only.
                
                    -or- 
                
                    The <see cref="T:System.Collections.IList" /> has a fixed size. 
                </exception>
    </member>
    <member name="T:System.Collections.Generic.Comparer`1">
      <summary>
                    Provides a base class for implementations of the <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.
                </summary>
      <typeparam name="T">
                    The type of objects to compare.
                </typeparam>
    </member>
    <member name="M:System.Collections.Generic.Comparer`1.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Collections.Generic.Comparer`1" /> class.
                </summary>
    </member>
    <member name="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)">
      <summary>
                    When overridden in a derived class, performs a comparison of two objects of the same type and returns a value indicating whether one object is less than, equal to, or greater than the other.
                </summary>
      <returns>
                    Value 
                
                    Condition 
                
                    Less than zero 
                <paramref name="x" /> is less than <paramref name="y" />.
                
                    Zero 
                <paramref name="x" /> equals <paramref name="y" />.
                
                    Greater than zero 
                <paramref name="x" /> is greater than <paramref name="y" />.
                </returns>
      <param name="x">
                    The first object to compare.
                </param>
      <param name="y">
                    The second object to compare.
                </param>
      <exception cref="T:System.ArgumentException">
                    Type <paramref name="T" /> does not implement either the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface.
                </exception>
    </member>
    <member name="P:System.Collections.Generic.Comparer`1.Default">
      <summary>
                    Returns a default sort order comparer for the type specified by the generic argument.
                </summary>
      <returns>
                    An object that inherits <see cref="T:System.Collections.Generic.Comparer`1" /> and serves as a sort order comparer for type <paramref name="T" />.
                </returns>
    </member>
    <member name="M:System.Collections.Generic.Comparer`1.System#Collections#IComparer#Compare(System.Object,System.Object)">
      <summary>
                    Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
                </summary>
      <returns>
                    Value 
                
                    Condition 
                
                    Less than zero
                <paramref name="x" /> is less than <paramref name="y" />.
                
                    Zero
                <paramref name="x" /> equals <paramref name="y" />.
                
                    Greater than zero
                <paramref name="x" /> is greater than <paramref name="y" />.
                </returns>
      <param name="x">
                    The first object to compare.
                </param>
      <param name="y">
                    The second object to compare.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> or <paramref name="y" /> is of a type that cannot be cast to type <paramref name="T" />.
                
                    -or-
                <paramref name="x" /> and <paramref name="y" /> do not implement either the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface.
                </exception>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2">
      <summary>
                    Represents a collection of keys and values.
                </summary>
      <typeparam name="TKey">
                    The type of the keys in the dictionary.
                </typeparam>
      <typeparam name="TValue">
                    The type of the values in the dictionary.
                </typeparam>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Collections.Generic.Dictionary`2" /> class that is empty, has the default initial capacity, and uses the default equality comparer for the key type.
                </summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Collections.Generic.Dictionary`2" /> class that contains elements copied from the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> and uses the default equality comparer for the key type.
                </summary>
      <param name="dictionary">
                    The <see cref="T:System.Collections.Generic.IDictionary`2" /> whose elements are copied to the new <see cref="T:System.Collections.Generic.Dictionary`2" />.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dictionary" /> contains one or more duplicate keys.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Collections.Generic.Dictionary`2" /> class that contains elements copied from the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> and uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.
                </summary>
      <param name="dictionary">
                    The <see cref="T:System.Collections.Generic.IDictionary`2" /> whose elements are copied to the new <see cref="T:System.Collections.Generic.Dictionary`2" />.
                </param>
      <param name="comparer">
                    The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys, or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1" /> for the type of the key.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dictionary" /> contains one or more duplicate keys.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Collections.Generic.Dictionary`2" /> class that is empty, has the default initial capacity, and uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.
                </summary>
      <param name="comparer">
                    The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys, or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1" /> for the type of the key.
                </param>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Collections.Generic.Dictionary`2" /> class that is empty, has the specified initial capacity, and uses the default equality comparer for the key type.
                </summary>
      <param name="capacity">
                    The initial number of elements that the <see cref="T:System.Collections.Generic.Dictionary`2" /> can contain.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is less than 0.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Collections.Generic.Dictionary`2" /> class that is empty, has the specified initial capacity, and uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.
                </summary>
      <param name="capacity">
                    The initial number of elements that the <see cref="T:System.Collections.Generic.Dictionary`2" /> can contain.
                </param>
      <param name="comparer">
                    The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys, or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1" /> for the type of the key.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is less than 0.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Add(`0,`1)">
      <summary>
                    Adds the specified key and value to the dictionary.
                </summary>
      <param name="key">
                    The key of the element to add.
                </param>
      <param name="value">
                    The value of the element to add. The value can be null for reference types.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
                    An element with the same key already exists in the <see cref="T:System.Collections.Generic.Dictionary`2" />.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Clear">
      <summary>
                    Removes all keys and values from the <see cref="T:System.Collections.Generic.Dictionary`2" />.
                </summary>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Comparer">
      <summary>
                    Gets the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> that is used to determine equality of keys for the dictionary. 
                </summary>
      <returns>
                    The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> generic interface implementation that is used to determine equality of keys for the current <see cref="T:System.Collections.Generic.Dictionary`2" /> and to provide hash values for the keys.
                </returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ContainsKey(`0)">
      <summary>
                    Determines whether the <see cref="T:System.Collections.Generic.Dictionary`2" /> contains the specified key.
                </summary>
      <returns>true if the <see cref="T:System.Collections.Generic.Dictionary`2" /> contains an element with the specified key; otherwise, false.
                </returns>
      <param name="key">
                    The key to locate in the <see cref="T:System.Collections.Generic.Dictionary`2" />.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ContainsValue(`1)">
      <summary>
                    Determines whether the <see cref="T:System.Collections.Generic.Dictionary`2" /> contains a specific value.
                </summary>
      <returns>true if the <see cref="T:System.Collections.Generic.Dictionary`2" /> contains an element with the specified value; otherwise, false.
                </returns>
      <param name="value">
                    The value to locate in the <see cref="T:System.Collections.Generic.Dictionary`2" />. The value can be null for reference types.
                </param>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Count">
      <summary>
                    Gets the number of key/value pairs contained in the <see cref="T:System.Collections.Generic.Dictionary`2" />.
                </summary>
      <returns>
                    The number of key/value pairs contained in the <see cref="T:System.Collections.Generic.Dictionary`2" />.
                </returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.GetEnumerator">
      <summary>
                    Returns an enumerator that iterates through the <see cref="T:System.Collections.Generic.Dictionary`2" />.
                </summary>
      <returns>
                    A <see cref="T:System.Collections.Generic.Dictionary`2.Enumerator" /> structure for the <see cref="T:System.Collections.Generic.Dictionary`2" />.
                </returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Item(`0)">
      <summary>
                    Gets or sets the value associated with the specified key.
                </summary>
      <returns>
                    The value associated with the specified key. If the specified key is not found, a get operation throws a <see cref="T:System.Collections.Generic.KeyNotFoundException" />, and a set operation creates a new element with the specified key.
                </returns>
      <param name="key">
                    The key of the value to get or set.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.
                </exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
                    The property is retrieved and <paramref name="key" /> does not exist in the collection.
                </exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Keys">
      <summary>
                    Gets a collection containing the keys in the <see cref="T:System.Collections.Generic.Dictionary`2" />.
                </summary>
      <returns>
                    A <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> containing the keys in the <see cref="T:System.Collections.Generic.Dictionary`2" />.
                </returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Remove(`0)">
      <summary>
                    Removes the value with the specified key from the <see cref="T:System.Collections.Generic.Dictionary`2" />.
                </summary>
      <returns>true if the element is successfully found and removed; otherwise, false.  This method returns false if <paramref name="key" /> is not found in the <see cref="T:System.Collections.Generic.Dictionary`2" />.
                </returns>
      <param name="key">
                    The key of the element to remove.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{T}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>
                    Adds the specified value to the <see cref="T:System.Collections.Generic.ICollection`1" /> with the specified key.
                </summary>
      <param name="keyValuePair">
                    The <see cref="T:System.Collections.Generic.KeyValuePair`2" /> structure representing the key and value to add to the <see cref="T:System.Collections.Generic.Dictionary`2" />.
                </param>
      <exception cref="T:System.ArgumentNullException">
                    The key of <paramref name="keyValuePair" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
                    An element with the same key already exists in the <see cref="T:System.Collections.Generic.Dictionary`2" />.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{T}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>
                    Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific key and value.
                </summary>
      <returns>true if <paramref name="keyValuePair" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
                </returns>
      <param name="keyValuePair">
                    The <see cref="T:System.Collections.Generic.KeyValuePair`2" /> structure to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </param>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{T}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>
                    Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an array of type <see cref="T:System.Collections.Generic.KeyValuePair`2" />, starting at the specified array index.
                </summary>
      <param name="array">
                    The one-dimensional array of type <see cref="T:System.Collections.Generic.KeyValuePair`2" /> that is the destination of the <see cref="T:System.Collections.Generic.KeyValuePair`2" /> elements copied from the <see cref="T:System.Collections.Generic.ICollection`1" />. The array must have zero-based indexing.
                </param>
      <param name="index">
                    The zero-based index in <paramref name="array" /> at which copying begins.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> is equal to or greater than the length of <paramref name="array" />.
                
                    -or-
                
                    The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.
                </exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
                    Gets a value indicating whether the dictionary is read-only.
                </summary>
      <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.  In the default implementation of <see cref="T:System.Collections.Generic.Dictionary`2" />, this property always returns false.
                </returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>
                    Removes a key and value from the dictionary.
                </summary>
      <returns>true if the key and value represented by <paramref name="keyValuePair" /> is successfully found and removed; otherwise, false. This method returns false if <paramref name="keyValuePair" /> is not found in the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </returns>
      <param name="keyValuePair">
                    The <see cref="T:System.Collections.Generic.KeyValuePair`2" /> structure representing the key and value to remove from the <see cref="T:System.Collections.Generic.Dictionary`2" />.
                </param>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>
                    Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2" />.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.ICollection`1" /> of type <paramref name="TKey" /> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2" />.
                </returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>
                    Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2" />.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.ICollection`1" /> of type <paramref name="TValue" /> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2" />.
                </returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>
                    Returns an enumerator that iterates through the collection.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.
                </returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
                    Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an array, starting at the specified array index.
                </summary>
      <param name="array">
                    The one-dimensional array that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The array must have zero-based indexing.
                </param>
      <param name="index">
                    The zero-based index in <paramref name="array" /> at which copying begins.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is equal to or greater than the length of <paramref name="array" />.
                
                    -or-
                <paramref name="index" /> is less than 0.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.
                
                    -or-
                <paramref name="array" /> does not have zero-based indexing.
                
                    -or-
                
                    The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.
                
                    -or-
                
                    The type of the source <see cref="T:System.Collections.Generic.ICollection`1" /> cannot be cast automatically to the type of the destination <paramref name="array" />.
                </exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary>
                    Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).
                </summary>
      <returns>true if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, false.  In the default implementation of <see cref="T:System.Collections.Generic.Dictionary`2" />, this property always returns false.
                </returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#SyncRoot">
      <summary>
                    Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.
                </summary>
      <returns>
                    An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />. 
                </returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>
                    Adds the specified key and value to the dictionary.
                </summary>
      <param name="key">
                    The object to use as the key.
                </param>
      <param name="value">
                    The object to use as the value.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> is of a type that is not assignable to the key type <paramref name="TKey" /> of the <see cref="T:System.Collections.Generic.Dictionary`2" />.
                
                    -or-
                <paramref name="value" /> is of a type that is not assignable to <paramref name="TValue" />, the type of values in the <see cref="T:System.Collections.Generic.Dictionary`2" />.
                
                    -or-
                
                    A value with the same key already exists in the <see cref="T:System.Collections.Generic.Dictionary`2" />.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>
                    Determines whether the <see cref="T:System.Collections.IDictionary" /> contains an element with the specified key.
                </summary>
      <returns>true if the <see cref="T:System.Collections.IDictionary" /> contains an element with the specified key; otherwise, false.
                </returns>
      <param name="key">
                    The key to locate in the <see cref="T:System.Collections.IDictionary" />.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary>
                    Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> for the <see cref="T:System.Collections.IDictionary" />.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.IDictionaryEnumerator" /> for the <see cref="T:System.Collections.IDictionary" />.
                </returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary>
                    Gets a value indicating whether the <see cref="T:System.Collections.IDictionary" /> has a fixed size.
                </summary>
      <returns>true if the <see cref="T:System.Collections.IDictionary" /> has a fixed size; otherwise, false.  In the default implementation of <see cref="T:System.Collections.Generic.Dictionary`2" />, this property always returns false.
                </returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary>
                    Gets a value indicating whether the <see cref="T:System.Collections.IDictionary" /> is read-only.
                </summary>
      <returns>true if the <see cref="T:System.Collections.IDictionary" /> is read-only; otherwise, false.  In the default implementation of <see cref="T:System.Collections.Generic.Dictionary`2" />, this property always returns false.
                </returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>
                    Gets or sets the value with the specified key.
                </summary>
      <returns>
                    The value associated with the specified key, or null if <paramref name="key" /> is not in the dictionary or <paramref name="key" /> is of a type that is not assignable to the key type <paramref name="TKey" /> of the <see cref="T:System.Collections.Generic.Dictionary`2" />.
                </returns>
      <param name="key">
                    The key of the value to get.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
                    A value is being assigned, and <paramref name="key" /> is of a type that is not assignable to the key type <paramref name="TKey" /> of the <see cref="T:System.Collections.Generic.Dictionary`2" />.
                
                    -or-
                
                    A value is being assigned, and <paramref name="value" /> is of a type that is not assignable to the value type <paramref name="TValue" /> of the <see cref="T:System.Collections.Generic.Dictionary`2" />.
                </exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Keys">
      <summary>
                    Gets an <see cref="T:System.Collections.ICollection" /> containing the keys of the <see cref="T:System.Collections.IDictionary" />.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.ICollection" /> containing the keys of the <see cref="T:System.Collections.IDictionary" />.
                </returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>
                    Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary" />.
                </summary>
      <param name="key">
                    The key of the element to remove.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.
                </exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Values">
      <summary>
                    Gets an <see cref="T:System.Collections.ICollection" /> containing the values in the <see cref="T:System.Collections.IDictionary" />.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.ICollection" /> containing the values in the <see cref="T:System.Collections.IDictionary" />.
                </returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>
                    Returns an enumerator that iterates through the collection.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.
                </returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)">
      <summary>
                    Gets the value associated with the specified key.
                </summary>
      <returns>true if the <see cref="T:System.Collections.Generic.Dictionary`2" /> contains an element with the specified key; otherwise, false.
                </returns>
      <param name="key">
                    The key of the value to get.
                </param>
      <param name="value">
                    When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.
                </exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Values">
      <summary>
                    Gets a collection containing the values in the <see cref="T:System.Collections.Generic.Dictionary`2" />.
                </summary>
      <returns>
                    A <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> containing the values in the <see cref="T:System.Collections.Generic.Dictionary`2" />.
                </returns>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.Enumerator">
      <summary>
                    Enumerates the elements of a <see cref="T:System.Collections.Generic.Dictionary`2" />.
                </summary>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.Current">
      <summary>
                    Gets the element at the current position of the enumerator.
                </summary>
      <returns>
                    The element in the <see cref="T:System.Collections.Generic.Dictionary`2" /> at the current position of the enumerator.
                </returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Enumerator.Dispose">
      <summary>
                    Releases all resources used by the <see cref="T:System.Collections.Generic.Dictionary`2.Enumerator" />.
                </summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Enumerator.MoveNext">
      <summary>
                    Advances the enumerator to the next element of the <see cref="T:System.Collections.Generic.Dictionary`2" />.
                </summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The collection was modified after the enumerator was created. 
                </exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Entry">
      <summary>
                    Gets the element at the current position of the enumerator.
                </summary>
      <returns>
                    The element in the dictionary at the current position of the enumerator, as a <see cref="T:System.Collections.DictionaryEntry" />.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The enumerator is positioned before the first element of the collection or after the last element. 
                </exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Key">
      <summary>
                    Gets the key of the element at the current position of the enumerator.
                </summary>
      <returns>
                    The key of the element in the dictionary at the current position of the enumerator.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The enumerator is positioned before the first element of the collection or after the last element. 
                </exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Value">
      <summary>
                    Gets the value of the element at the current position of the enumerator.
                </summary>
      <returns>
                    The value of the element in the dictionary at the current position of the enumerator.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The enumerator is positioned before the first element of the collection or after the last element. 
                </exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary>
                    Gets the element at the current position of the enumerator.
                </summary>
      <returns>
                    The element in the collection at the current position of the enumerator, as an <see cref="T:System.Object" />.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The enumerator is positioned before the first element of the collection or after the last element. 
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>
                    Sets the enumerator to its initial position, which is before the first element in the collection.
                </summary>
      <exception cref="T:System.InvalidOperationException">
                    The collection was modified after the enumerator was created. 
                </exception>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.KeyCollection">
      <summary>
                    Represents the collection of keys in a <see cref="T:System.Collections.Generic.Dictionary`2" />. This class cannot be inherited.
                </summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.#ctor(System.Collections.Generic.Dictionary{`0,`1})">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> class that reflects the keys in the specified <see cref="T:System.Collections.Generic.Dictionary`2" />.
                </summary>
      <param name="dictionary">
                    The <see cref="T:System.Collections.Generic.Dictionary`2" /> whose keys are reflected in the new <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> is null.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.CopyTo(`0[],System.Int32)">
      <summary>
                    Copies the <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> elements to an existing one-dimensional <see cref="T:System.Array" />, starting at the specified array index.
                </summary>
      <param name="array">
                    The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.
                </param>
      <param name="index">
                    The zero-based index in <paramref name="array" /> at which copying begins.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> is equal to or greater than the length of <paramref name="array" />.
                
                    -or-
                
                    The number of elements in the source <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.
                </exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.Count">
      <summary>
                    Gets the number of elements contained in the <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />.
                </summary>
      <returns>
                    The number of elements contained in the <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />.
                
                    Retrieving the value of this property is an O(1) operation.
                </returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.GetEnumerator">
      <summary>
                    Returns an enumerator that iterates through the <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />.
                </summary>
      <returns>
                    A <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator" /> for the <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />.
                </returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>
                    Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.  This implementation always throws <see cref="T:System.NotSupportedException" />.
                </summary>
      <param name="item">
                    The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </param>
      <exception cref="T:System.NotSupportedException">
                    Always thrown.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#Clear">
      <summary>
                    Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.  This implementation always throws <see cref="T:System.NotSupportedException" />.
                </summary>
      <exception cref="T:System.NotSupportedException">
                    Always thrown.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#Contains(`0)">
      <summary>
                    Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
                </summary>
      <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
                </returns>
      <param name="item">
                    The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </param>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
                    Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
                </summary>
      <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.  In the default implementation of <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />, this property always returns true.
                </returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>
                    Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.  This implementation always throws <see cref="T:System.NotSupportedException" />.
                </summary>
      <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> was not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
                </returns>
      <param name="item">
                    The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </param>
      <exception cref="T:System.NotSupportedException">
                    Always thrown.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>
                    Returns an enumerator that iterates through a collection.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
                </returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
                    Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
                </summary>
      <param name="array">
                    The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.
                </param>
      <param name="index">
                    The zero-based index in <paramref name="array" /> at which copying begins.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.
                
                    -or-
                <paramref name="array" /> does not have zero-based indexing.
                
                    -or-
                <paramref name="index" /> is equal to or greater than the length of <paramref name="array" />.
                
                    -or-
                
                    The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.
                
                    -or-
                
                    The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.
                </exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized">
      <summary>
                    Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).
                </summary>
      <returns>true if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, false.  In the default implementation of <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />, this property always returns false.
                </returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot">
      <summary>
                    Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.
                </summary>
      <returns>
                    An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.  In the default implementation of <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />, this property always returns the current instance.
                </returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
                    Returns an enumerator that iterates through a collection.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.
                </returns>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator">
      <summary>
                    Enumerates the elements of a <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />.
                </summary>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.Current">
      <summary>
                    Gets the element at the current position of the enumerator.
                </summary>
      <returns>
                    The element in the <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> at the current position of the enumerator.
                </returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.Dispose">
      <summary>
                    Releases all resources used by the <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator" />.
                </summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.MoveNext">
      <summary>
                    Advances the enumerator to the next element of the <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />.
                </summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The collection was modified after the enumerator was created. 
                </exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>
                    Gets the element at the current position of the enumerator.
                </summary>
      <returns>
                    The element in the collection at the current position of the enumerator.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The enumerator is positioned before the first element of the collection or after the last element. 
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>
                    Sets the enumerator to its initial position, which is before the first element in the collection.
                </summary>
      <exception cref="T:System.InvalidOperationException">
                    The collection was modified after the enumerator was created. 
                </exception>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.ValueCollection">
      <summary>
                    Represents the collection of values in a <see cref="T:System.Collections.Generic.Dictionary`2" />. This class cannot be inherited.
                </summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.#ctor(System.Collections.Generic.Dictionary{`0,`1})">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> class that reflects the values in the specified <see cref="T:System.Collections.Generic.Dictionary`2" />.
                </summary>
      <param name="dictionary">
                    The <see cref="T:System.Collections.Generic.Dictionary`2" /> whose values are reflected in the new <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> is null.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.CopyTo(`1[],System.Int32)">
      <summary>
                    Copies the <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> elements to an existing one-dimensional <see cref="T:System.Array" />, starting at the specified array index.
                </summary>
      <param name="array">
                    The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.
                </param>
      <param name="index">
                    The zero-based index in <paramref name="array" /> at which copying begins.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> is equal to or greater than the length of <paramref name="array" />.
                
                    -or-
                
                    The number of elements in the source <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.
                </exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.Count">
      <summary>
                    Gets the number of elements contained in the <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />.
                </summary>
      <returns>
                    The number of elements contained in the <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />.
                </returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.GetEnumerator">
      <summary>
                    Returns an enumerator that iterates through the <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />.
                </summary>
      <returns>
                    A <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator" /> for the <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />.
                </returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#Add(`1)">
      <summary>
                    Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.  This implementation always throws <see cref="T:System.NotSupportedException" />.
                </summary>
      <param name="item">
                    The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </param>
      <exception cref="T:System.NotSupportedException">
                    Always thrown.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#Clear">
      <summary>
                    Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.  This implementation always throws <see cref="T:System.NotSupportedException" />.
                </summary>
      <exception cref="T:System.NotSupportedException">
                    Always thrown.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#Contains(`1)">
      <summary>
                    Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
                </summary>
      <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
                </returns>
      <param name="item">
                    The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </param>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
                    Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
                </summary>
      <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.  In the default implementation of <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />, this property always returns true.
                </returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#Remove(`1)">
      <summary>
                    Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />. This implementation always throws <see cref="T:System.NotSupportedException" />.
                </summary>
      <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> was not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
                </returns>
      <param name="item">
                    The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </param>
      <exception cref="T:System.NotSupportedException">
                    Always thrown.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>
                    Returns an enumerator that iterates through a collection.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
                </returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
                    Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
                </summary>
      <param name="array">
                    The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.
                </param>
      <param name="index">
                    The zero-based index in <paramref name="array" /> at which copying begins.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.
                
                    -or-
                <paramref name="array" /> does not have zero-based indexing.
                
                    -or-
                <paramref name="index" /> is equal to or greater than the length of <paramref name="array" />.
                
                    -or-
                
                    The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.
                
                    -or-
                
                    The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.
                </exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#ICollection#IsSynchronized">
      <summary>
                    Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).
                </summary>
      <returns>true if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, false.  In the default implementation of <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />, this property always returns false.
                </returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#ICollection#SyncRoot">
      <summary>
                    Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.
                </summary>
      <returns>
                    An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.  In the default implementation of <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />, this property always returns the current instance.
                </returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
                    Returns an enumerator that iterates through a collection.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.
                </returns>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator">
      <summary>
                    Enumerates the elements of a <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />.
                </summary>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.Current">
      <summary>
                    Gets the element at the current position of the enumerator.
                </summary>
      <returns>
                    The element in the <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> at the current position of the enumerator.
                </returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.Dispose">
      <summary>
                    Releases all resources used by the <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator" />.
                </summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.MoveNext">
      <summary>
                    Advances the enumerator to the next element of the <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />.
                </summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The collection was modified after the enumerator was created. 
                </exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>
                    Gets the element at the current position of the enumerator.
                </summary>
      <returns>
                    The element in the collection at the current position of the enumerator.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The enumerator is positioned before the first element of the collection or after the last element. 
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>
                    Sets the enumerator to its initial position, which is before the first element in the collection.
                </summary>
      <exception cref="T:System.InvalidOperationException">
                    The collection was modified after the enumerator was created. 
                </exception>
    </member>
    <member name="T:System.Collections.Generic.EqualityComparer`1">
      <summary>
                    Provides a base class for implementations of the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> generic interface.
                </summary>
      <typeparam name="T">
                    The type of objects to compare.
                </typeparam>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Collections.Generic.EqualityComparer`1" /> class.
                </summary>
    </member>
    <member name="P:System.Collections.Generic.EqualityComparer`1.Default">
      <summary>
                    Returns a default equality comparer for the type specified by the generic argument.
                </summary>
      <returns>
                    The default instance of the <see cref="T:System.Collections.Generic.EqualityComparer`1" /> class for type <paramref name="T" />.
                </returns>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.Equals(`0,`0)">
      <summary>
                    When overridden in a derived class, determines whether two objects of type <paramref name="T" /> are equal.
                </summary>
      <returns>true if the specified objects are equal; otherwise, false.
                </returns>
      <param name="x">
                    The first object to compare.
                </param>
      <param name="y">
                    The second object to compare.
                </param>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.GetHashCode(`0)">
      <summary>
                    When overridden in a derived class, serves as a hash function for the specified object for hashing algorithms and data structures, such as a hash table.
                </summary>
      <returns>
                    A hash code for the specified object.
                </returns>
      <param name="obj">
                    The object for which to get a hash code.
                </param>
      <exception cref="T:System.ArgumentNullException">
                    The type of <paramref name="obj" /> is a reference type and <paramref name="obj" /> is null.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)">
      <summary>
                    Determines whether the specified objects are equal.
                </summary>
      <returns>true if the specified objects are equal; otherwise, false.
                </returns>
      <param name="x">
                    The first object to compare.
                </param>
      <param name="y">
                    The second object to compare.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> or <paramref name="y" /> is of a type that cannot be cast to type <paramref name="T" />.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.System#Collections#IEqualityComparer#GetHashCode(System.Object)">
      <summary>
                    Returns a hash code for the specified object.
                </summary>
      <returns>
                    A hash code for the specified object.
                </returns>
      <param name="obj">
                    The <see cref="T:System.Object" /> for which a hash code is to be returned.
                </param>
      <exception cref="T:System.ArgumentNullException">
                    The type of <paramref name="obj" /> is a reference type and <paramref name="obj" /> is null.
                
                    -or-
                <paramref name="obj" /> is of a type that cannot be cast to type <paramref name="T" />.
                </exception>
    </member>
    <member name="T:System.Collections.Generic.ICollection`1">
      <summary>
                    Defines methods to manipulate generic collections.
                </summary>
      <typeparam name="T">
                    The type of the elements in the collection.
                </typeparam>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.Add(`0)">
      <summary>
                    Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </summary>
      <param name="item">
                    The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </param>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.Clear">
      <summary>
                    Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </summary>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only. 
                </exception>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.Contains(`0)">
      <summary>
                    Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
                </summary>
      <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
                </returns>
      <param name="item">
                    The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </param>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)">
      <summary>
                    Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
                </summary>
      <param name="array">
                    The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.
                </param>
      <param name="arrayIndex">
                    The zero-based index in <paramref name="array" /> at which copying begins.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.
                
                    -or-
                <paramref name="arrayIndex" /> is equal to or greater than the length of <paramref name="array" />.
                
                    -or-
                
                    The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.
                
                    -or-
                
                    Type <paramref name="T" /> cannot be cast automatically to the type of the destination <paramref name="array" />.
                </exception>
    </member>
    <member name="P:System.Collections.Generic.ICollection`1.Count">
      <summary>
                    Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </summary>
      <returns>
                    The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </returns>
    </member>
    <member name="P:System.Collections.Generic.ICollection`1.IsReadOnly">
      <summary>
                    Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
                </summary>
      <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.Remove(`0)">
      <summary>
                    Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </summary>
      <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
                </returns>
      <param name="item">
                    The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </param>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
                </exception>
    </member>
    <member name="T:System.Collections.Generic.IComparer`1">
      <summary>
                    Defines a method that a type implements to compare two objects.
                </summary>
      <typeparam name="T">
                    The type of objects to compare.
                </typeparam>
    </member>
    <member name="M:System.Collections.Generic.IComparer`1.Compare(`0,`0)">
      <summary>
                    Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
                </summary>
      <returns>
                    Value 
                
                    Condition 
                
                    Less than zero
                <paramref name="x" /> is less than <paramref name="y" />.
                
                    Zero
                <paramref name="x" /> equals <paramref name="y" />.
                
                    Greater than zero
                <paramref name="x" /> is greater than <paramref name="y" />.
                </returns>
      <param name="x">
                    The first object to compare.
                </param>
      <param name="y">
                    The second object to compare.
                </param>
    </member>
    <member name="T:System.Collections.Generic.IDictionary`2">
      <summary>
                    Represents a generic collection of key/value pairs.
                </summary>
      <typeparam name="TKey">
                    The type of keys in the dictionary.
                </typeparam>
      <typeparam name="TValue">
                    The type of values in the dictionary.
                </typeparam>
    </member>
    <member name="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
      <summary>
                    Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2" />.
                </summary>
      <param name="key">
                    The object to use as the key of the element to add.
                </param>
      <param name="value">
                    The object to use as the value of the element to add.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
                    An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2" />.
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)">
      <summary>
                    Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key.
                </summary>
      <returns>true if the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the key; otherwise, false.
                </returns>
      <param name="key">
                    The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2" />.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.
                </exception>
    </member>
    <member name="P:System.Collections.Generic.IDictionary`2.Item(`0)">
      <summary>
                    Gets or sets the element with the specified key.
                </summary>
      <returns>
                    The element with the specified key.
                </returns>
      <param name="key">
                    The key of the element to get or set.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.
                </exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
                    The property is retrieved and <paramref name="key" /> is not found.
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The property is set and the <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.
                </exception>
    </member>
    <member name="P:System.Collections.Generic.IDictionary`2.Keys">
      <summary>
                    Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2" />.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.
                </returns>
    </member>
    <member name="M:System.Collections.Generic.IDictionary`2.Remove(`0)">
      <summary>
                    Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2" />.
                </summary>
      <returns>true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key" /> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2" />.
                </returns>
      <param name="key">
                    The key of the element to remove.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)">
      <summary>
                    Gets the value associated with the specified key.
                </summary>
      <returns>true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key; otherwise, false.
                </returns>
      <param name="key">
                    The key whose value to get.
                </param>
      <param name="value">
                    When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.
                </exception>
    </member>
    <member name="P:System.Collections.Generic.IDictionary`2.Values">
      <summary>
                    Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2" />.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.
                </returns>
    </member>
    <member name="T:System.Collections.Generic.IEnumerable`1">
      <summary>
                    Exposes the enumerator, which supports a simple iteration over a collection of a specified type.
                </summary>
      <typeparam name="T">
                    The type of objects to enumerate.
                </typeparam>
    </member>
    <member name="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
      <summary>
                    Returns an enumerator that iterates through the collection.
                </summary>
      <returns>
                    A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
                </returns>
    </member>
    <member name="T:System.Collections.Generic.IEnumerator`1">
      <summary>
                    Supports a simple iteration over a generic collection.
                </summary>
      <typeparam name="T">
                    The type of objects to enumerate.
                </typeparam>
    </member>
    <member name="P:System.Collections.Generic.IEnumerator`1.Current">
      <summary>
                    Gets the element in the collection at the current position of the enumerator.
                </summary>
      <returns>
                    The element in the collection at the current position of the enumerator.
                </returns>
    </member>
    <member name="T:System.Collections.Generic.IEqualityComparer`1">
      <summary>
                    Defines methods to support the comparison of objects for equality.
                </summary>
      <typeparam name="T">
                    The type of objects to compare.
                </typeparam>
    </member>
    <member name="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)">
      <summary>
                    Determines whether the specified objects are equal.
                </summary>
      <returns>true if the specified objects are equal; otherwise, false.
                </returns>
      <param name="x">
                    The first object of type <paramref name="T" /> to compare.
                </param>
      <param name="y">
                    The second object of type <paramref name="T" /> to compare.
                </param>
    </member>
    <member name="M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)">
      <summary>
                    Returns a hash code for the specified object.
                </summary>
      <returns>
                    A hash code for the specified object.
                </returns>
      <param name="obj">
                    The <see cref="T:System.Object" /> for which a hash code is to be returned.
                </param>
      <exception cref="T:System.ArgumentNullException">
                    The type of <paramref name="obj" /> is a reference type and <paramref name="obj" /> is null.
                </exception>
    </member>
    <member name="T:System.Collections.Generic.IList`1">
      <summary>
                    Represents a collection of objects that can be individually accessed by index.
                </summary>
      <typeparam name="T">
                    The type of elements in the list.
                </typeparam>
    </member>
    <member name="M:System.Collections.Generic.IList`1.IndexOf(`0)">
      <summary>
                    Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
                </summary>
      <returns>
                    The index of <paramref name="item" /> if found in the list; otherwise, -1.
                </returns>
      <param name="item">
                    The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.
                </param>
    </member>
    <member name="M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)">
      <summary>
                    Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.
                </summary>
      <param name="index">
                    The zero-based index at which <paramref name="item" /> should be inserted.
                </param>
      <param name="item">
                    The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.
                </exception>
    </member>
    <member name="P:System.Collections.Generic.IList`1.Item(System.Int32)">
      <summary>
                    Gets or sets the element at the specified index.
                </summary>
      <returns>
                    The element at the specified index.
                </returns>
      <param name="index">
                    The zero-based index of the element to get or set.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The property is set and the <see cref="T:System.Collections.Generic.IList`1" /> is read-only.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)">
      <summary>
                    Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.
                </summary>
      <param name="index">
                    The zero-based index of the item to remove.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.
                </exception>
    </member>
    <member name="T:System.Collections.Generic.KeyNotFoundException">
      <summary>
                    The exception that is thrown when the key specified for accessing an element in a collection does not match any key in the collection.
                </summary>
    </member>
    <member name="M:System.Collections.Generic.KeyNotFoundException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Collections.Generic.KeyNotFoundException" /> class using default property values.
                </summary>
    </member>
    <member name="M:System.Collections.Generic.KeyNotFoundException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Collections.Generic.KeyNotFoundException" /> class with the specified error message.
                </summary>
      <param name="message">
                    The message that describes the error.
                </param>
    </member>
    <member name="M:System.Collections.Generic.KeyNotFoundException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Collections.Generic.KeyNotFoundException" /> class with the specified error message and a reference to the inner exception that is the cause of this exception.
                </summary>
      <param name="message">
                    The error message that explains the reason for the exception.
                </param>
      <param name="innerException">
                    The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception.
                </param>
    </member>
    <member name="T:System.Collections.Generic.KeyValuePair`2">
      <summary>
                    Defines a key/value pair that can be set or retrieved.
                </summary>
      <typeparam name="TKey">
                    The type of the key.
                </typeparam>
      <typeparam name="TValue">
                    The type of the value.
                </typeparam>
    </member>
    <member name="M:System.Collections.Generic.KeyValuePair`2.#ctor(`0,`1)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Collections.Generic.KeyValuePair`2" /> structure with the specified key and value.
                </summary>
      <param name="key">
                    The object defined in each key/value pair.
                </param>
      <param name="value">
                    The definition associated with <paramref name="key" />.
                </param>
    </member>
    <member name="P:System.Collections.Generic.KeyValuePair`2.Key">
      <summary>
                    Gets the key in the key/value pair.
                </summary>
      <returns>
                    A <paramref name="TKey" /> that is the key of the <see cref="T:System.Collections.Generic.KeyValuePair`2" />. 
                </returns>
    </member>
    <member name="M:System.Collections.Generic.KeyValuePair`2.ToString">
      <summary>
                    Returns a string representation of the <see cref="T:System.Collections.Generic.KeyValuePair`2" />, using the string representations of the key and value.
                </summary>
      <returns>
                    A string representation of the <see cref="T:System.Collections.Generic.KeyValuePair`2" />, which includes the string representations of the key and value.
                </returns>
    </member>
    <member name="P:System.Collections.Generic.KeyValuePair`2.Value">
      <summary>
                    Gets the value in the key/value pair.
                </summary>
      <returns>
                    A <paramref name="TValue" /> that is the value of the <see cref="T:System.Collections.Generic.KeyValuePair`2" />. 
                </returns>
    </member>
    <member name="T:System.Collections.Generic.List`1">
      <summary>
                    Represents a strongly typed list of objects that can be accessed by index. Provides methods to search, sort, and manipulate lists.
                </summary>
      <typeparam name="T">
                    The type of elements in the list.
                </typeparam>
    </member>
    <member name="M:System.Collections.Generic.List`1.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Collections.Generic.List`1" /> class that is empty and has the default initial capacity.
                </summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Collections.Generic.List`1" /> class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.
                </summary>
      <param name="collection">
                    The collection whose elements are copied to the new list.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> is null.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.#ctor(System.Int32)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Collections.Generic.List`1" /> class that is empty and has the specified initial capacity.
                </summary>
      <param name="capacity">
                    The number of elements that the new list can initially store.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is less than 0. 
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Add(`0)">
      <summary>
                    Adds an object to the end of the <see cref="T:System.Collections.Generic.List`1" />.
                </summary>
      <param name="item">
                    The object to be added to the end of the <see cref="T:System.Collections.Generic.List`1" />. The value can be null for reference types.
                </param>
    </member>
    <member name="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>
                    Adds the elements of the specified collection to the end of the <see cref="T:System.Collections.Generic.List`1" />.
                </summary>
      <param name="collection">
                    The collection whose elements should be added to the end of the <see cref="T:System.Collections.Generic.List`1" />. The collection itself cannot be null, but it can contain elements that are null, if type <paramref name="T" /> is a reference type.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> is null.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.AsReadOnly">
      <summary>
                    Returns a read-only <see cref="T:System.Collections.Generic.IList`1" /> wrapper for the current collection.
                </summary>
      <returns>
                    A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> that acts as a read-only wrapper around the current <see cref="T:System.Collections.Generic.List`1" />.
                </returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
      <summary>
                    Searches a range of elements in the sorted <see cref="T:System.Collections.Generic.List`1" /> for an element using the specified comparer and returns the zero-based index of the element.
                </summary>
      <returns>
                    The zero-based index of <paramref name="item" /> in the sorted <see cref="T:System.Collections.Generic.List`1" />, if <paramref name="item" /> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <paramref name="item" /> or, if there is no larger element, the bitwise complement of <see cref="P:System.Collections.Generic.List`1.Count" />.
                </returns>
      <param name="index">
                    The zero-based starting index of the range to search.
                </param>
      <param name="count">
                    The length of the range to search.
                </param>
      <param name="item">
                    The object to locate. The value can be null for reference types.
                </param>
      <param name="comparer">
                    The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing elements, or null to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" />.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.
                
                    -or-
                <paramref name="count" /> is less than 0. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in the <see cref="T:System.Collections.Generic.List`1" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is null, and the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" /> cannot find an implementation of the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface for type <paramref name="T" />.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.BinarySearch(`0)">
      <summary>
                    Searches the entire sorted <see cref="T:System.Collections.Generic.List`1" /> for an element using the default comparer and returns the zero-based index of the element.
                </summary>
      <returns>
                    The zero-based index of <paramref name="item" /> in the sorted <see cref="T:System.Collections.Generic.List`1" />, if <paramref name="item" /> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <paramref name="item" /> or, if there is no larger element, the bitwise complement of <see cref="P:System.Collections.Generic.List`1.Count" />.
                </returns>
      <param name="item">
                    The object to locate. The value can be null for reference types.
                </param>
      <exception cref="T:System.InvalidOperationException">
                    The default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" /> cannot find an implementation of the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface for type <paramref name="T" />.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
      <summary>
                    Searches the entire sorted <see cref="T:System.Collections.Generic.List`1" /> for an element using the specified comparer and returns the zero-based index of the element.
                </summary>
      <returns>
                    The zero-based index of <paramref name="item" /> in the sorted <see cref="T:System.Collections.Generic.List`1" />, if <paramref name="item" /> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <paramref name="item" /> or, if there is no larger element, the bitwise complement of <see cref="P:System.Collections.Generic.List`1.Count" />.
                </returns>
      <param name="item">
                    The object to locate. The value can be null for reference types.
                </param>
      <param name="comparer">
                    The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing elements.
                
                    -or-
                null to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" />.
                </param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is null, and the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" /> cannot find an implementation of the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface for type <paramref name="T" />.
                </exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.Capacity">
      <summary>
                    Gets or sets the total number of elements the internal data structure can hold without resizing.
                </summary>
      <returns>
                    The number of elements that the <see cref="T:System.Collections.Generic.List`1" /> can contain before resizing is required.
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.Collections.Generic.List`1.Capacity" /> is set to a value that is less than <see cref="P:System.Collections.Generic.List`1.Count" />. 
                </exception>
      <exception cref="T:System.OutOfMemoryException">
                    There is not enough memory available on the system.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Clear">
      <summary>
                    Removes all elements from the <see cref="T:System.Collections.Generic.List`1" />.
                </summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.Contains(`0)">
      <summary>
                    Determines whether an element is in the <see cref="T:System.Collections.Generic.List`1" />.
                </summary>
      <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.List`1" />; otherwise, false.
                </returns>
      <param name="item">
                    The object to locate in the <see cref="T:System.Collections.Generic.List`1" />. The value can be null for reference types.
                </param>
    </member>
    <member name="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary>
                    Copies a range of elements from the <see cref="T:System.Collections.Generic.List`1" /> to a compatible one-dimensional array, starting at the specified index of the target array.
                </summary>
      <param name="index">
                    The zero-based index in the source <see cref="T:System.Collections.Generic.List`1" /> at which copying begins.
                </param>
      <param name="array">
                    The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.List`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.
                </param>
      <param name="arrayIndex">
                    The zero-based index in <paramref name="array" /> at which copying begins.
                </param>
      <param name="count">
                    The number of elements to copy.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.
                
                    -or-
                <paramref name="arrayIndex" /> is less than 0.
                
                    -or-
                <paramref name="count" /> is less than 0. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> is equal to or greater than the <see cref="P:System.Collections.Generic.List`1.Count" /> of the source <see cref="T:System.Collections.Generic.List`1" />.
                
                    -or-
                <paramref name="arrayIndex" /> is equal to or greater than the length of <paramref name="array" />.
                
                    -or-
                
                    The number of elements from <paramref name="index" /> to the end of the source <see cref="T:System.Collections.Generic.List`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />. 
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.CopyTo(`0[])">
      <summary>
                    Copies the entire <see cref="T:System.Collections.Generic.List`1" /> to a compatible one-dimensional array, starting at the beginning of the target array.
                </summary>
      <param name="array">
                    The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.List`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
                    The number of elements in the source <see cref="T:System.Collections.Generic.List`1" /> is greater than the number of elements that the destination <paramref name="array" /> can contain.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
      <summary>
                    Copies the entire <see cref="T:System.Collections.Generic.List`1" /> to a compatible one-dimensional array, starting at the specified index of the target array.
                </summary>
      <param name="array">
                    The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.List`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.
                </param>
      <param name="arrayIndex">
                    The zero-based index in <paramref name="array" /> at which copying begins.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arrayIndex" /> is equal to or greater than the length of <paramref name="array" />.
                
                    -or-
                
                    The number of elements in the source <see cref="T:System.Collections.Generic.List`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.
                </exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.Count">
      <summary>
                    Gets the number of elements actually contained in the <see cref="T:System.Collections.Generic.List`1" />.
                </summary>
      <returns>
                    The number of elements actually contained in the <see cref="T:System.Collections.Generic.List`1" />.
                </returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})">
      <summary>
                    Performs the specified action on each element of the <see cref="T:System.Collections.Generic.List`1" />.
                </summary>
      <param name="action">
                    The <see cref="T:System.Action`1" /> delegate to perform on each element of the <see cref="T:System.Collections.Generic.List`1" />.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.GetEnumerator">
      <summary>
                    Returns an enumerator that iterates through the <see cref="T:System.Collections.Generic.List`1" />.
                </summary>
      <returns>
                    A <see cref="T:System.Collections.Generic.List`1.Enumerator" /> for the <see cref="T:System.Collections.Generic.List`1" />.
                </returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
      <summary>
                    Creates a shallow copy of a range of elements in the source <see cref="T:System.Collections.Generic.List`1" />.
                </summary>
      <returns>
                    A shallow copy of a range of elements in the source <see cref="T:System.Collections.Generic.List`1" />.
                </returns>
      <param name="index">
                    The zero-based <see cref="T:System.Collections.Generic.List`1" /> index at which the range starts.
                </param>
      <param name="count">
                    The number of elements in the range.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.
                
                    -or-
                <paramref name="count" /> is less than 0.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="count" /> do not denote a valid range of elements in the <see cref="T:System.Collections.Generic.List`1" />.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.IndexOf(`0)">
      <summary>
                    Searches for the specified object and returns the zero-based index of the first occurrence within the entire <see cref="T:System.Collections.Generic.List`1" />.
                </summary>
      <returns>
                    The zero-based index of the first occurrence of <paramref name="item" /> within the entire <see cref="T:System.Collections.Generic.List`1" />, if found; otherwise, –1.
                </returns>
      <param name="item">
                    The object to locate in the <see cref="T:System.Collections.Generic.List`1" />. The value can be null for reference types.
                </param>
    </member>
    <member name="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
      <summary>
                    Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that extends from the specified index to the last element.
                </summary>
      <returns>
                    The zero-based index of the first occurrence of <paramref name="item" /> within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that extends from <paramref name="index" /> to the last element, if found; otherwise, –1.
                </returns>
      <param name="item">
                    The object to locate in the <see cref="T:System.Collections.Generic.List`1" />. The value can be null for reference types.
                </param>
      <param name="index">
                    The zero-based starting index of the search.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1" />.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
      <summary>
                    Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that starts at the specified index and contains the specified number of elements.
                </summary>
      <returns>
                    The zero-based index of the first occurrence of <paramref name="item" /> within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that starts at <paramref name="index" /> and contains <paramref name="count" /> number of elements, if found; otherwise, –1.
                </returns>
      <param name="item">
                    The object to locate in the <see cref="T:System.Collections.Generic.List`1" />. The value can be null for reference types.
                </param>
      <param name="index">
                    The zero-based starting index of the search.
                </param>
      <param name="count">
                    The number of elements in the section to search.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1" />.
                
                    -or-
                <paramref name="count" /> is less than 0.
                
                    -or-
                <paramref name="index" /> and <paramref name="count" /> do not specify a valid section in the <see cref="T:System.Collections.Generic.List`1" />.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
      <summary>
                    Inserts an element into the <see cref="T:System.Collections.Generic.List`1" /> at the specified index.
                </summary>
      <param name="index">
                    The zero-based index at which <paramref name="item" /> should be inserted.
                </param>
      <param name="item">
                    The object to insert. The value can be null for reference types.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.
                
                    -or-
                <paramref name="index" /> is greater than <see cref="P:System.Collections.Generic.List`1.Count" />.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>
                    Inserts the elements of a collection into the <see cref="T:System.Collections.Generic.List`1" /> at the specified index.
                </summary>
      <param name="index">
                    The zero-based index at which the new elements should be inserted.
                </param>
      <param name="collection">
                    The collection whose elements should be inserted into the <see cref="T:System.Collections.Generic.List`1" />. The collection itself cannot be null, but it can contain elements that are null, if type <paramref name="T" /> is a reference type.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.
                
                    -or-
                <paramref name="index" /> is greater than <see cref="P:System.Collections.Generic.List`1.Count" />.
                </exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.Item(System.Int32)">
      <summary>
                    Gets or sets the element at the specified index.
                </summary>
      <returns>
                    The element at the specified index.
                </returns>
      <param name="index">
                    The zero-based index of the element to get or set.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.
                
                    -or-
                <paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.Generic.List`1.Count" />. 
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.LastIndexOf(`0)">
      <summary>
                    Searches for the specified object and returns the zero-based index of the last occurrence within the entire <see cref="T:System.Collections.Generic.List`1" />.
                </summary>
      <returns>
                    The zero-based index of the last occurrence of <paramref name="item" /> within the entire the <see cref="T:System.Collections.Generic.List`1" />, if found; otherwise, –1.
                </returns>
      <param name="item">
                    The object to locate in the <see cref="T:System.Collections.Generic.List`1" />. The value can be null for reference types.
                </param>
    </member>
    <member name="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
      <summary>
                    Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that extends from the first element to the specified index.
                </summary>
      <returns>
                    The zero-based index of the last occurrence of <paramref name="item" /> within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that extends from the first element to <paramref name="index" />, if found; otherwise, –1.
                </returns>
      <param name="item">
                    The object to locate in the <see cref="T:System.Collections.Generic.List`1" />. The value can be null for reference types.
                </param>
      <param name="index">
                    The zero-based starting index of the backward search.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1" />. 
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary>
                    Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that contains the specified number of elements and ends at the specified index.
                </summary>
      <returns>
                    The zero-based index of the last occurrence of <paramref name="item" /> within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that contains <paramref name="count" /> number of elements and ends at <paramref name="index" />, if found; otherwise, –1.
                </returns>
      <param name="item">
                    The object to locate in the <see cref="T:System.Collections.Generic.List`1" />. The value can be null for reference types.
                </param>
      <param name="index">
                    The zero-based starting index of the backward search.
                </param>
      <param name="count">
                    The number of elements in the section to search.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1" />.
                
                    -or-
                <paramref name="count" /> is less than 0.
                
                    -or-
                <paramref name="index" /> and <paramref name="count" /> do not specify a valid section in the <see cref="T:System.Collections.Generic.List`1" />. 
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Remove(`0)">
      <summary>
                    Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.List`1" />.
                </summary>
      <returns>true if <paramref name="item" /> is successfully removed; otherwise, false.  This method also returns false if <paramref name="item" /> was not found in the <see cref="T:System.Collections.Generic.List`1" />.
                </returns>
      <param name="item">
                    The object to remove from the <see cref="T:System.Collections.Generic.List`1" />. The value can be null for reference types.
                </param>
    </member>
    <member name="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)">
      <summary>
                    Removes the element at the specified index of the <see cref="T:System.Collections.Generic.List`1" />.
                </summary>
      <param name="index">
                    The zero-based index of the element to remove.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.
                
                    -or-
                <paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.Generic.List`1.Count" />.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)">
      <summary>
                    Removes a range of elements from the <see cref="T:System.Collections.Generic.List`1" />.
                </summary>
      <param name="index">
                    The zero-based starting index of the range of elements to remove.
                </param>
      <param name="count">
                    The number of elements to remove.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.
                
                    -or-
                <paramref name="count" /> is less than 0.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="count" /> do not denote a valid range of elements in the <see cref="T:System.Collections.Generic.List`1" />.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Reverse">
      <summary>
                    Reverses the order of the elements in the entire <see cref="T:System.Collections.Generic.List`1" />.
                </summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)">
      <summary>
                    Reverses the order of the elements in the specified range.
                </summary>
      <param name="index">
                    The zero-based starting index of the range to reverse.
                </param>
      <param name="count">
                    The number of elements in the range to reverse.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.
                
                    -or-
                <paramref name="count" /> is less than 0. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="count" /> do not denote a valid range of elements in the <see cref="T:System.Collections.Generic.List`1" />. 
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Sort">
      <summary>
                    Sorts the elements in the entire <see cref="T:System.Collections.Generic.List`1" /> using the default comparer.
                </summary>
      <exception cref="T:System.InvalidOperationException">
                    The default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" /> cannot find an implementation of the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface for type <paramref name="T" />.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary>
                    Sorts the elements in the entire <see cref="T:System.Collections.Generic.List`1" /> using the specified comparer.
                </summary>
      <param name="comparer">
                    The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing elements, or null to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" />.
                </param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is null, and the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" /> cannot find implementation of the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface for type <paramref name="T" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                    The implementation of <paramref name="comparer" /> caused an error during the sort. For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
      <summary>
                    Sorts the elements in the entire <see cref="T:System.Collections.Generic.List`1" /> using the specified <see cref="T:System.Comparison`1" />.
                </summary>
      <param name="comparison">
                    The <see cref="T:System.Comparison`1" /> to use when comparing elements.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparison" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
                    The implementation of <paramref name="comparison" /> caused an error during the sort. For example, <paramref name="comparison" /> might not return 0 when comparing an item with itself.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>
                    Sorts the elements in a range of elements in <see cref="T:System.Collections.Generic.List`1" /> using the specified comparer.
                </summary>
      <param name="index">
                    The zero-based starting index of the range to sort.
                </param>
      <param name="count">
                    The length of the range to sort.
                </param>
      <param name="comparer">
                    The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing elements, or null to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" />.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.
                
                    -or-
                <paramref name="count" /> is less than 0.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="count" /> do not specify a valid range in the <see cref="T:System.Collections.Generic.List`1" />.
                
                    -or-
                
                    The implementation of <paramref name="comparer" /> caused an error during the sort. For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is null, and the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" /> cannot find implementation of the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface for type <paramref name="T" />.
                </exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
                    Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
                </summary>
      <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.  In the default implementation of <see cref="T:System.Collections.Generic.List`1" />, this property always returns false.
                </returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>
                    Returns an enumerator that iterates through a collection.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
                </returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
                    Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
                </summary>
      <param name="array">
                    The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.
                </param>
      <param name="arrayIndex">
                    The zero-based index in <paramref name="array" /> at which copying begins.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.
                
                    -or-
                <paramref name="array" /> does not have zero-based indexing.
                
                    -or-
                <paramref name="arrayIndex" /> is equal to or greater than the length of <paramref name="array" />.
                
                    -or-
                
                    The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.
                
                    -or-
                
                    The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.
                </exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized">
      <summary>
                    Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).
                </summary>
      <returns>true if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, false.  In the default implementation of <see cref="T:System.Collections.Generic.List`1" />, this property always returns false.
                </returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot">
      <summary>
                    Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.
                </summary>
      <returns>
                    An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.  In the default implementation of <see cref="T:System.Collections.Generic.List`1" />, this property always returns the current instance.
                </returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>
                    Returns an enumerator that iterates through a collection.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.
                </returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)">
      <summary>
                    Adds an item to the <see cref="T:System.Collections.IList" />.
                </summary>
      <returns>
                    The position into which the new element was inserted.
                </returns>
      <param name="item">
                    The <see cref="T:System.Object" /> to add to the <see cref="T:System.Collections.IList" />.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)">
      <summary>
                    Determines whether the <see cref="T:System.Collections.IList" /> contains a specific value.
                </summary>
      <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.IList" />; otherwise, false.
                </returns>
      <param name="item">
                    The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.IList" />.
                </param>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>
                    Determines the index of a specific item in the <see cref="T:System.Collections.IList" />.
                </summary>
      <returns>
                    The index of <paramref name="item" /> if found in the list; otherwise, –1.
                </returns>
      <param name="item">
                    The object to locate in the <see cref="T:System.Collections.IList" />.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>
                    Inserts an item to the <see cref="T:System.Collections.IList" /> at the specified index.
                </summary>
      <param name="index">
                    The zero-based index at which <paramref name="item" /> should be inserted.
                </param>
      <param name="item">
                    The object to insert into the <see cref="T:System.Collections.IList" />.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.
                </exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize">
      <summary>
                    Gets a value indicating whether the <see cref="T:System.Collections.IList" /> has a fixed size.
                </summary>
      <returns>true if the <see cref="T:System.Collections.IList" /> has a fixed size; otherwise, false.  In the default implementation of <see cref="T:System.Collections.Generic.List`1" />, this property always returns false.
                </returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly">
      <summary>
                    Gets a value indicating whether the <see cref="T:System.Collections.IList" /> is read-only.
                </summary>
      <returns>true if the <see cref="T:System.Collections.IList" /> is read-only; otherwise, false.  In the default implementation of <see cref="T:System.Collections.Generic.List`1" />, this property always returns false.
                </returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)">
      <summary>
                    Gets or sets the element at the specified index.
                </summary>
      <returns>
                    The element at the specified index.
                </returns>
      <param name="index">
                    The zero-based index of the element to get or set.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                    The property is set and <paramref name="value" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)">
      <summary>
                    Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList" />.
                </summary>
      <param name="item">
                    The object to remove from the <see cref="T:System.Collections.IList" />.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.ToArray">
      <summary>
                    Copies the elements of the <see cref="T:System.Collections.Generic.List`1" /> to a new array.
                </summary>
      <returns>
                    An array containing copies of the elements of the <see cref="T:System.Collections.Generic.List`1" />.
                </returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.TrimExcess">
      <summary>
                    Sets the capacity to the actual number of elements in the <see cref="T:System.Collections.Generic.List`1" />, if that number is less than a threshold value.
                </summary>
    </member>
    <member name="T:System.Collections.Generic.List`1.Enumerator">
      <summary>
                    Enumerates the elements of a <see cref="T:System.Collections.Generic.List`1" />.
                </summary>
    </member>
    <member name="P:System.Collections.Generic.List`1.Enumerator.Current">
      <summary>
                    Gets the element at the current position of the enumerator.
                </summary>
      <returns>
                    The element in the <see cref="T:System.Collections.Generic.List`1" /> at the current position of the enumerator.
                </returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.Enumerator.Dispose">
      <summary>
                    Releases all resources used by the <see cref="T:System.Collections.Generic.List`1.Enumerator" />.
                </summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.Enumerator.MoveNext">
      <summary>
                    Advances the enumerator to the next element of the <see cref="T:System.Collections.Generic.List`1" />.
                </summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The collection was modified after the enumerator was created. 
                </exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>
                    Gets the element at the current position of the enumerator.
                </summary>
      <returns>
                    The element in the <see cref="T:System.Collections.Generic.List`1" /> at the current position of the enumerator.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The enumerator is positioned before the first element of the collection or after the last element. 
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>
                    Sets the enumerator to its initial position, which is before the first element in the collection.
                </summary>
      <exception cref="T:System.InvalidOperationException">
                    The collection was modified after the enumerator was created. 
                </exception>
    </member>
    <member name="T:System.Collections.ObjectModel.Collection`1">
      <summary>
                    Provides the base class for a generic collection.
                </summary>
      <typeparam name="T">
                    The type of elements in the collection.
                </typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.Collection`1" /> class that is empty.
                </summary>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.Collection`1" /> class as a wrapper for the specified list.
                </summary>
      <param name="list">
                    The list that is wrapped by the new collection.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> is null.
                </exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Add(`0)">
      <summary>
                    Adds an object to the end of the <see cref="T:System.Collections.ObjectModel.Collection`1" />. 
                </summary>
      <param name="item">
                    The object to be added to the end of the <see cref="T:System.Collections.ObjectModel.Collection`1" />. The value can be null for reference types.
                </param>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Clear">
      <summary>
                    Removes all elements from the <see cref="T:System.Collections.ObjectModel.Collection`1" />.
                </summary>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.ClearItems">
      <summary>
                    Removes all elements from the <see cref="T:System.Collections.ObjectModel.Collection`1" />.
                </summary>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Contains(`0)">
      <summary>
                    Determines whether an element is in the <see cref="T:System.Collections.ObjectModel.Collection`1" />.
                </summary>
      <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.ObjectModel.Collection`1" />; otherwise, false.
                </returns>
      <param name="item">
                    The object to locate in the <see cref="T:System.Collections.ObjectModel.Collection`1" />. The value can be null for reference types.
                </param>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.CopyTo(`0[],System.Int32)">
      <summary>
                    Copies the entire <see cref="T:System.Collections.ObjectModel.Collection`1" /> to a compatible one-dimensional <see cref="T:System.Array" />, starting at the specified index of the target array.
                </summary>
      <param name="array">
                    The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ObjectModel.Collection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.
                </param>
      <param name="index">
                    The zero-based index in <paramref name="array" /> at which copying begins.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is equal to or greater than the length of <paramref name="array" />.
                
                    -or-
                <paramref name="index" /> is less than zero.
                </exception>
      <exception cref="T:System.ArgumentException">
                    The number of elements in the source <see cref="T:System.Collections.ObjectModel.Collection`1" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.
                </exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.Count">
      <summary>
                    Gets the number of elements actually contained in the <see cref="T:System.Collections.ObjectModel.Collection`1" />.
                </summary>
      <returns>
                    The number of elements actually contained in the <see cref="T:System.Collections.ObjectModel.Collection`1" />.
                </returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.GetEnumerator">
      <summary>
                    Returns an enumerator that iterates through the <see cref="T:System.Collections.ObjectModel.Collection`1" />.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerator`1" /> for the <see cref="T:System.Collections.ObjectModel.Collection`1" />.
                </returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.IndexOf(`0)">
      <summary>
                    Searches for the specified object and returns the zero-based index of the first occurrence within the entire <see cref="T:System.Collections.ObjectModel.Collection`1" />.
                </summary>
      <returns>
                    The zero-based index of the first occurrence of <paramref name="item" /> within the entire <see cref="T:System.Collections.ObjectModel.Collection`1" />, if found; otherwise, -1.
                </returns>
      <param name="item">
                    The object to locate in the <see cref="T:System.Collections.Generic.List`1" />. The value can be null for reference types.
                </param>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)">
      <summary>
                    Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1" /> at the specified index.
                </summary>
      <param name="index">
                    The zero-based index at which <paramref name="item" /> should be inserted.
                </param>
      <param name="item">
                    The object to insert. The value can be null for reference types.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.
                
                    -or-
                <paramref name="index" /> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.
                </exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.InsertItem(System.Int32,`0)">
      <summary>
                    Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1" /> at the specified index.
                </summary>
      <param name="index">
                    The zero-based index at which <paramref name="item" /> should be inserted.
                </param>
      <param name="item">
                    The object to insert. The value can be null for reference types.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.
                
                    -or-
                <paramref name="index" /> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.
                </exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.Item(System.Int32)">
      <summary>
                    Gets or sets the element at the specified index.
                </summary>
      <returns>
                    The element at the specified index.
                </returns>
      <param name="index">
                    The zero-based index of the element to get or set.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.
                
                    -or-
                <paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />. 
                </exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.Items">
      <summary>
                    Gets a <see cref="T:System.Collections.Generic.IList`1" /> wrapper around the <see cref="T:System.Collections.ObjectModel.Collection`1" />.
                </summary>
      <returns>
                    A <see cref="T:System.Collections.Generic.IList`1" /> wrapper around the <see cref="T:System.Collections.ObjectModel.Collection`1" />.
                </returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Remove(`0)">
      <summary>
                    Removes the first occurrence of a specific object from the <see cref="T:System.Collections.ObjectModel.Collection`1" />.
                </summary>
      <returns>true if <paramref name="item" /> is successfully removed; otherwise, false.  This method also returns false if <paramref name="item" /> was not found in the original <see cref="T:System.Collections.ObjectModel.Collection`1" />.
                </returns>
      <param name="item">
                    The object to remove from the <see cref="T:System.Collections.ObjectModel.Collection`1" />. The value can be null for reference types.
                </param>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)">
      <summary>
                    Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.Collection`1" />.
                </summary>
      <param name="index">
                    The zero-based index of the element to remove.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.
                
                    -or-
                <paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.
                </exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.RemoveItem(System.Int32)">
      <summary>
                    Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.Collection`1" />.
                </summary>
      <param name="index">
                    The zero-based index of the element to remove.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.
                
                    -or-
                <paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.
                </exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.SetItem(System.Int32,`0)">
      <summary>
                    Replaces the element at the specified index.
                </summary>
      <param name="index">
                    The zero-based index of the element to replace.
                </param>
      <param name="item">
                    The new value for the element at the specified index. The value can be null for reference types.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.
                
                    -or-
                <paramref name="index" /> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.
                </exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
                    Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
                </summary>
      <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.  In the default implementation of <see cref="T:System.Collections.ObjectModel.Collection`1" />, this property always returns false.
                </returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
                    Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
                </summary>
      <param name="array">
                    The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.
                </param>
      <param name="index">
                    The zero-based index in <paramref name="array" /> at which copying begins.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.
                
                    -or-
                <paramref name="array" /> does not have zero-based indexing.
                
                    -or-
                <paramref name="index" /> is equal to or greater than the length of <paramref name="array" />.
                
                    -or-
                
                    The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.
                
                    -or-
                
                    The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.
                </exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#IsSynchronized">
      <summary>
                    Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).
                </summary>
      <returns>true if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, false.  In the default implementation of <see cref="T:System.Collections.ObjectModel.Collection`1" />, this property always returns false.
                </returns>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#SyncRoot">
      <summary>
                    Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.
                </summary>
      <returns>
                    An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.  In the default implementation of <see cref="T:System.Collections.ObjectModel.Collection`1" />, this property always returns the current instance.
                </returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>
                    Returns an enumerator that iterates through a collection.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.
                </returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Add(System.Object)">
      <summary>
                    Adds an item to the <see cref="T:System.Collections.IList" />.
                </summary>
      <returns>
                    The position into which the new element was inserted.
                </returns>
      <param name="value">
                    The <see cref="T:System.Object" /> to add to the <see cref="T:System.Collections.IList" />.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.
                </exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Contains(System.Object)">
      <summary>
                    Determines whether the <see cref="T:System.Collections.IList" /> contains a specific value.
                </summary>
      <returns>true if the <see cref="T:System.Object" /> is found in the <see cref="T:System.Collections.IList" />; otherwise, false.
                </returns>
      <param name="value">
                    The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.IList" />.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.
                </exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>
                    Determines the index of a specific item in the <see cref="T:System.Collections.IList" />.
                </summary>
      <returns>
                    The index of <paramref name="value" /> if found in the list; otherwise, -1. 
                </returns>
      <param name="value">
                    The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.IList" />.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.
                </exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>
                    Inserts an item into the <see cref="T:System.Collections.IList" /> at the specified index.
                </summary>
      <param name="index">
                    The zero-based index at which <paramref name="value" /> should be inserted.
                </param>
      <param name="value">
                    The <see cref="T:System.Object" /> to insert into the <see cref="T:System.Collections.IList" />.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.
                </exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsFixedSize">
      <summary>
                    Gets a value indicating whether the <see cref="T:System.Collections.IList" /> has a fixed size.
                </summary>
      <returns>true if the <see cref="T:System.Collections.IList" /> has a fixed size; otherwise, false.  In the default implementation of <see cref="T:System.Collections.ObjectModel.Collection`1" />, this property always returns false.
                </returns>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsReadOnly">
      <summary>
                    Gets a value indicating whether the <see cref="T:System.Collections.IList" /> is read-only.
                </summary>
      <returns>true if the <see cref="T:System.Collections.IList" /> is read-only; otherwise, false.  In the default implementation of <see cref="T:System.Collections.ObjectModel.Collection`1" />, this property always returns false.
                </returns>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Item(System.Int32)">
      <summary>
                    Gets or sets the element at the specified index.
                </summary>
      <returns>
                    The element at the specified index.
                </returns>
      <param name="index">
                    The zero-based index of the element to get or set.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                    The property is set and <paramref name="value" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.
                </exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Remove(System.Object)">
      <summary>
                    Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList" />.
                </summary>
      <param name="value">
                    The <see cref="T:System.Object" /> to remove from the <see cref="T:System.Collections.IList" />.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.
                </exception>
    </member>
    <member name="T:System.Collections.ObjectModel.KeyedCollection`2">
      <summary>
                    Provides the abstract base class for a collection whose keys are embedded in the values.
                </summary>
      <typeparam name="TKey">
                    The type of keys in the collection.
                </typeparam>
      <typeparam name="TItem">
                    The type of items in the collection.
                </typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> class that uses the default equality comparer.
                </summary>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> class that uses the specified equality comparer.
                </summary>
      <param name="comparer">
                    The implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> generic interface to use when comparing keys, or null to use the default equality comparer for the type of the key, obtained from <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />.
                </param>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> class that uses the specified equality comparer and creates a lookup dictionary when the specified threshold is exceeded.
                </summary>
      <param name="comparer">
                    The implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> generic interface to use when comparing keys, or null to use the default equality comparer for the type of the key, obtained from <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />.
                </param>
      <param name="dictionaryCreationThreshold">
                    The number of elements the collection can hold without creating a lookup dictionary (0 creates the lookup dictionary when the first item is added), or –1 to specify that a lookup dictionary is never created.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dictionaryCreationThreshold" /> is less than –1.
                </exception>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
      <summary>
                    Changes the key associated with the specified element in the lookup dictionary.
                </summary>
      <param name="item">
                    The element to change the key of.
                </param>
      <param name="newKey">
                    The new key for <paramref name="item" />.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is null.
                
                    -or-
                <paramref name="key" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> is not found.
                
                    -or-
                <paramref name="key" /> already exists in the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.
                </exception>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
      <summary>
                    Removes all elements from the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.
                </summary>
    </member>
    <member name="P:System.Collections.ObjectModel.KeyedCollection`2.Comparer">
      <summary>
                    Gets the generic equality comparer that is used to determine equality of keys in the collection.
                </summary>
      <returns>
                    The implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> generic interface that is used to determine equality of keys in the collection.
                </returns>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)">
      <summary>
                    Determines whether the collection contains an element with the specified key.
                </summary>
      <returns>true if the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> contains an element with the specified key; otherwise, false.
                </returns>
      <param name="key">
                    The key to locate in the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.
                </exception>
    </member>
    <member name="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary">
      <summary>
                    Gets the lookup dictionary of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.
                </summary>
      <returns>
                    The lookup dictionary of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />, if it exists; otherwise, null.
                </returns>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)">
      <summary>
                    When implemented in a derived class, extracts the key from the specified element.
                </summary>
      <returns>
                    The key for the specified element.
                </returns>
      <param name="item">
                    The element from which to extract the key.
                </param>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
      <summary>
                    Inserts an element into the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> at the specified index.
                </summary>
      <param name="index">
                    The zero-based index at which <paramref name="item" /> should be inserted.
                </param>
      <param name="item">
                    The object to insert.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.
                
                    -or-
                <paramref name="index" /> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.
                </exception>
    </member>
    <member name="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
      <summary>
                    Gets the element with the specified key. 
                </summary>
      <returns>
                    The element with the specified key. If an element with the specified key is not found, an exception is thrown.
                </returns>
      <param name="key">
                    The key of the element to get.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.
                </exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
                    An element with the specified key does not exist in the collection.
                </exception>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)">
      <summary>
                    Removes the element with the specified key from the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.
                </summary>
      <returns>true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key" /> is not found in the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.
                </returns>
      <param name="key">
                    The key of the element to remove.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.
                </exception>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
      <summary>
                    Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.
                </summary>
      <param name="index">
                    The index of the element to remove.
                </param>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
      <summary>
                    Replaces the item at the specified index with the specified item.
                </summary>
      <param name="index">
                    The zero-based index of the item to be replaced.
                </param>
      <param name="item">
                    The new item.
                </param>
    </member>
    <member name="T:System.Collections.ObjectModel.ReadOnlyCollection`1">
      <summary>
                    Provides the base class for a generic read-only collection.
                </summary>
      <typeparam name="T">
                    The type of elements in the collection.
                </typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> class that is a read-only wrapper around the specified list.
                </summary>
      <param name="list">
                    The list to wrap.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> is null.
                </exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.Contains(`0)">
      <summary>
                    Determines whether an element is in the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.
                </summary>
      <returns>true if <paramref name="value" /> is found in the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />; otherwise, false.
                </returns>
      <param name="value">
                    The object to locate in the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />. The value can be null for reference types.
                </param>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.CopyTo(`0[],System.Int32)">
      <summary>
                    Copies the entire <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> to a compatible one-dimensional <see cref="T:System.Array" />, starting at the specified index of the target array.
                </summary>
      <param name="array">
                    The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.
                </param>
      <param name="index">
                    The zero-based index in <paramref name="array" /> at which copying begins.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> is equal to or greater than the length of <paramref name="array" />.
                
                    -or-
                
                    The number of elements in the source <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.
                </exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.Count">
      <summary>
                    Gets the number of elements contained in the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> instance.
                </summary>
      <returns>
                    The number of elements contained in the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> instance.
                </returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.GetEnumerator">
      <summary>
                    Returns an enumerator that iterates through the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerator`1" /> for the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.
                </returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.IndexOf(`0)">
      <summary>
                    Searches for the specified object and returns the zero-based index of the first occurrence within the entire <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.
                </summary>
      <returns>
                    The zero-based index of the first occurrence of <paramref name="item" /> within the entire <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, if found; otherwise, -1.
                </returns>
      <param name="value">
                    The object to locate in the <see cref="T:System.Collections.Generic.List`1" />. The value can be null for reference types.
                </param>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.Item(System.Int32)">
      <summary>
                    Gets the element at the specified index.
                </summary>
      <returns>
                    The element at the specified index.
                </returns>
      <param name="index">
                    The zero-based index of the element to get.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.
                
                    -or-
                <paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.ObjectModel.ReadOnlyCollection`1.Count" />. 
                </exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.Items">
      <summary>
                    Returns the <see cref="T:System.Collections.Generic.IList`1" /> that the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> wraps.
                </summary>
      <returns>
                    The <see cref="T:System.Collections.Generic.IList`1" /> that the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> wraps.
                </returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>
                    Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.  This implementation always throws <see cref="T:System.NotSupportedException" />.
                </summary>
      <param name="value">
                    The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </param>
      <exception cref="T:System.NotSupportedException">
                    Always thrown.
                </exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>
                    Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.  This implementation always throws <see cref="T:System.NotSupportedException" />.
                </summary>
      <exception cref="T:System.NotSupportedException">
                    Always thrown.
                </exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
                    Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
                </summary>
      <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.  In the default implementation of <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, this property always returns true.
                </returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>
                    Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.  This implementation always throws <see cref="T:System.NotSupportedException" />.
                </summary>
      <returns>true if <paramref name="value" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
                </returns>
      <param name="value">
                    The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </param>
      <exception cref="T:System.NotSupportedException">
                    Always thrown.
                </exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>
                    Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.  This implementation always throws <see cref="T:System.NotSupportedException" />.
                </summary>
      <param name="index">
                    The zero-based index at which <paramref name="value" /> should be inserted.
                </param>
      <param name="value">
                    The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.
                </param>
      <exception cref="T:System.NotSupportedException">
                    Always thrown.
                </exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>
                    Gets or sets the element at the specified index.
                </summary>
      <returns>
                    The element at the specified index.
                </returns>
      <param name="index">
                    The zero-based index of the element to get or set.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.
                </exception>
      <exception cref="T:System.NotSupportedException">
                    Always thrown, if the property is set.
                </exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>
                    Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.  This implementation always throws <see cref="T:System.NotSupportedException" />.
                </summary>
      <param name="index">
                    The zero-based index of the item to remove.
                </param>
      <exception cref="T:System.NotSupportedException">
                    Always thrown.
                </exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
                    Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
                </summary>
      <param name="array">
                    The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.
                </param>
      <param name="index">
                    The zero-based index in <paramref name="array" /> at which copying begins.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.
                
                    -or-
                <paramref name="array" /> does not have zero-based indexing.
                
                    -or-
                <paramref name="index" /> is equal to or greater than the length of <paramref name="array" />.
                
                    -or-
                
                    The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.
                
                    -or-
                
                    The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.
                </exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized">
      <summary>
                    Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).
                </summary>
      <returns>true if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, false.  In the default implementation of <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, this property always returns false.
                </returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#SyncRoot">
      <summary>
                    Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.
                </summary>
      <returns>
                    An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.  In the default implementation of <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, this property always returns the current instance.
                </returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>
                    Returns an enumerator that iterates through a collection.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.
                </returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Add(System.Object)">
      <summary>
                    Adds an item to the <see cref="T:System.Collections.IList" />.  This implementation always throws <see cref="T:System.NotSupportedException" />.
                </summary>
      <returns>
                    The position into which the new element was inserted.
                </returns>
      <param name="value">
                    The <see cref="T:System.Object" /> to add to the <see cref="T:System.Collections.IList" />.
                </param>
      <exception cref="T:System.NotSupportedException">
                    Always thrown.
                </exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Clear">
      <summary>
                    Removes all items from the <see cref="T:System.Collections.IList" />.  This implementation always throws <see cref="T:System.NotSupportedException" />.
                </summary>
      <exception cref="T:System.NotSupportedException">
                    Always thrown.
                </exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Contains(System.Object)">
      <summary>
                    Determines whether the <see cref="T:System.Collections.IList" /> contains a specific value.
                </summary>
      <returns>true if the <see cref="T:System.Object" /> is found in the <see cref="T:System.Collections.IList" />; otherwise, false.
                </returns>
      <param name="value">
                    The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.IList" />.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not of the type specified for the generic type parameter <paramref name="T" />.
                </exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>
                    Determines the index of a specific item in the <see cref="T:System.Collections.IList" />.
                </summary>
      <returns>
                    The index of <paramref name="value" /> if found in the list; otherwise, -1.
                </returns>
      <param name="value">
                    The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.IList" />.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not of the type specified for the generic type parameter <paramref name="T" />.
                </exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>
                    Inserts an item to the <see cref="T:System.Collections.IList" /> at the specified index.  This implementation always throws <see cref="T:System.NotSupportedException" />.
                </summary>
      <param name="index">
                    The zero-based index at which <paramref name="value" /> should be inserted.
                </param>
      <param name="value">
                    The <see cref="T:System.Object" /> to insert into the <see cref="T:System.Collections.IList" />.
                </param>
      <exception cref="T:System.NotSupportedException">
                    Always thrown.
                </exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IsFixedSize">
      <summary>
                    Gets a value indicating whether the <see cref="T:System.Collections.IList" /> has a fixed size.
                </summary>
      <returns>true if the <see cref="T:System.Collections.IList" /> has a fixed size; otherwise, false.  In the default implementation of <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, this property always returns true.
                </returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IsReadOnly">
      <summary>
                    Gets a value indicating whether the <see cref="T:System.Collections.IList" /> is read-only.
                </summary>
      <returns>true if the <see cref="T:System.Collections.IList" /> is read-only; otherwise, false.  In the default implementation of <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, this property always returns true.
                </returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Item(System.Int32)">
      <summary>
                    Gets or sets the element at the specified index.
                </summary>
      <returns>
                    The element at the specified index.
                </returns>
      <param name="index">
                    The zero-based index of the element to get.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />. 
                </exception>
      <exception cref="T:System.NotSupportedException">
                    Always thrown, if the property is set.
                </exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Remove(System.Object)">
      <summary>
                    Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList" />.  This implementation always throws <see cref="T:System.NotSupportedException" />.
                </summary>
      <param name="value">
                    The <see cref="T:System.Object" /> to remove from the <see cref="T:System.Collections.IList" />.
                </param>
      <exception cref="T:System.NotSupportedException">
                    Always thrown.
                </exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>
                    Removes the <see cref="T:System.Collections.IList" /> item at the specified index.  This implementation always throws <see cref="T:System.NotSupportedException" />.
                </summary>
      <param name="index">
                    The zero-based index of the item to remove.
                </param>
      <exception cref="T:System.NotSupportedException">
                    Always thrown.
                </exception>
    </member>
    <member name="T:System.Configuration.Assemblies.AssemblyHashAlgorithm">
      <summary>
                    Specifies all the hash algorithms used for hashing files and for generating the strong name.
                </summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyHashAlgorithm.None">
      <summary>
                    A mask indicating that there is no hash algorithm. If you specify None for a multi-module assembly, the common language runtime defaults to the SHA1 algorithm, since multi-module assemblies need to generate a hash.
                </summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyHashAlgorithm.MD5">
      <summary>
                    Retrieves the MD5 message-digest algorithm. MD5 was developed by Rivest in 1991. It is basically MD4 with safety-belts and while it is slightly slower than MD4, it helps provide more security. The algorithm consists of four distinct rounds, which has a slightly different design from that of MD4. Message-digest size, as well as padding requirements, remain the same.
                </summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyHashAlgorithm.SHA1">
      <summary>
                    A mask used to retrieve a revision of the Secure Hash Algorithm that corrects an unpublished flaw in SHA.
                </summary>
    </member>
    <member name="T:System.Configuration.Assemblies.AssemblyVersionCompatibility">
      <summary>
                    Defines the different types of assembly version compatibility. 
                </summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyVersionCompatibility.SameMachine">
      <summary>
                    The assembly cannot execute with other versions if they are executing on the same machine.
                </summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyVersionCompatibility.SameProcess">
      <summary>
                    The assembly cannot execute with other versions if they are executing in the same process.
                </summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyVersionCompatibility.SameDomain">
      <summary>
                    The assembly cannot execute with other versions if they are executing in the same application domain.
                </summary>
    </member>
    <member name="T:System.Diagnostics.ConditionalAttribute">
      <summary>
                    Indicates to compilers that a method call or attribute should be ignored unless a specified conditional compilation symbol is defined. 
                </summary>
    </member>
    <member name="M:System.Diagnostics.ConditionalAttribute.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Diagnostics.ConditionalAttribute" /> class.
                </summary>
      <param name="conditionString">
                    A string that specifies the case-sensitive conditional compilation symbol that is associated with the attribute. 
                </param>
    </member>
    <member name="P:System.Diagnostics.ConditionalAttribute.ConditionString">
      <summary>
                    Gets the conditional compilation symbol that is associated with the <see cref="T:System.Diagnostics.ConditionalAttribute" /> attribute.
                </summary>
      <returns>
                    A string that specifies the case-sensitive conditional compilation symbol that is associated with the <see cref="T:System.Diagnostics.ConditionalAttribute" /> attribute.
                </returns>
    </member>
    <member name="T:System.Diagnostics.DebuggableAttribute">
      <summary>
                    Modifies code generation for runtime just-in-time (JIT) debugging. This class cannot be inherited.
                </summary>
    </member>
    <member name="M:System.Diagnostics.DebuggableAttribute.#ctor(System.Boolean,System.Boolean)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Diagnostics.DebuggableAttribute" /> class, using the specified tracking and optimization options for the just-in-time (JIT) compiler.
                </summary>
      <param name="isJITTrackingEnabled">true to enable debugging; otherwise, false. 
                </param>
      <param name="isJITOptimizerDisabled">true to disable the optimizer for execution; otherwise, false. 
                </param>
    </member>
    <member name="M:System.Diagnostics.DebuggableAttribute.#ctor(System.Diagnostics.DebuggableAttribute.DebuggingModes)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Diagnostics.DebuggableAttribute" /> class, using the specified debugging modes for the just-in-time (JIT) compiler. 
                </summary>
      <param name="modes">
                    A bitwise combination of the enumeration  values that specify the debugging mode for the JIT compiler.
                </param>
    </member>
    <member name="T:System.Diagnostics.DebuggableAttribute.DebuggingModes">
      <summary>
                    Specifies the debugging mode for the just-in-time (JIT) compiler.
                </summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.None">
      <summary>
                    In the .NET Framework for Silverlight, just-in-time (JIT) tracking information is always generated. This flag has the same effect as <see cref="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.Default" />. 
                </summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.Default">
      <summary>
                    Use the default behavior for the just-in-time (JIT) compiler, which includes enabling optimizations, disabling Edit and Continue support, and using symbol store sequence points if they are present. In the .NET Framework for Silverlight, JIT tracking information is always generated. This makes it possible for the debugger to match up a chain of MSIL with its machine code counterpart, and to track where local variables and function arguments are stored.
                </summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.DisableOptimizations">
      <summary>
                    Disable optimizations performed by the compiler to make your output file smaller, faster, and more efficient. Optimizations result in code rearrangement in the output file, which can make debugging difficult. Typically, optimization should be disabled while debugging. 
                </summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints">
      <summary>
                    Use the implicit MSIL sequence points, not the program database (PDB) sequence points. The symbolic information typically includes at least one MSIL offset for each source line. When the just-in-time (JIT) compiler is about to compile a method, it asks the profiling services for a list of MSIL offsets that should be preserved. 
                </summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.EnableEditAndContinue">
      <summary>
                    Enable Edit and Continue. This feature enables you to change your source code while your program is in break mode. The ability to Edit and Continue is compiler-dependent. 
                </summary>
    </member>
    <member name="T:System.Diagnostics.Debugger">
      <summary>
                    Enables communication with a debugger. This class cannot be inherited.
                </summary>
    </member>
    <member name="M:System.Diagnostics.Debugger.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Diagnostics.Debugger" /> class. 
                </summary>
    </member>
    <member name="M:System.Diagnostics.Debugger.Break">
      <summary>
                    Signals a breakpoint to an attached debugger.
                </summary>
    </member>
    <member name="P:System.Diagnostics.Debugger.IsAttached">
      <summary>
                    Gets a value that indicates whether a debugger is attached to the process.
                </summary>
      <returns>true if a debugger is attached; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Diagnostics.Debugger.IsLogging">
      <summary>
                    Checks to see whether logging is enabled by an attached debugger.
                </summary>
      <returns>true if a debugger is attached and logging is enabled; otherwise, false. The attached debugger is the registered managed debugger in the DbgManagedDebugger registry key. 
                </returns>
    </member>
    <member name="M:System.Diagnostics.Debugger.Launch">
      <summary>
                    Launches and attaches a debugger to the process.
                </summary>
      <returns>true if the startup is successful or if the debugger is already attached; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Diagnostics.Debugger.Log(System.Int32,System.String,System.String)">
      <summary>
                    Posts a message for the attached debugger.
                </summary>
      <param name="level">
                    A description of the importance of the message. 
                </param>
      <param name="category">
                    The category of the message. This parameter is limited to 256 characters. Longer strings are truncated.
                </param>
      <param name="message">
                    The message to show. 
                </param>
    </member>
    <member name="T:System.Diagnostics.DebuggerBrowsableAttribute">
      <summary>
                    Determines if and how a member is displayed in the debugger variable windows. This class cannot be inherited.
                </summary>
    </member>
    <member name="M:System.Diagnostics.DebuggerBrowsableAttribute.#ctor(System.Diagnostics.DebuggerBrowsableState)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Diagnostics.DebuggerBrowsableAttribute" /> class. 
                </summary>
      <param name="state">
                    One of the enumeration values that specify how to display the member.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="state" /> is not one of the <see cref="T:System.Diagnostics.DebuggerBrowsableState" /> values.
                </exception>
    </member>
    <member name="P:System.Diagnostics.DebuggerBrowsableAttribute.State">
      <summary>
                    Gets the display state for the attribute.
                </summary>
      <returns>
                    One of the enumeration values.
                </returns>
    </member>
    <member name="T:System.Diagnostics.DebuggerBrowsableState">
      <summary>
                    Provides display instructions for the debugger.
                </summary>
    </member>
    <member name="F:System.Diagnostics.DebuggerBrowsableState.Never">
      <summary>
                    The element is never shown.
                </summary>
    </member>
    <member name="F:System.Diagnostics.DebuggerBrowsableState.Collapsed">
      <summary>
                    The element is shown as collapsed.
                </summary>
    </member>
    <member name="F:System.Diagnostics.DebuggerBrowsableState.RootHidden">
      <summary>
                    The root element is not displayed, but the child elements are displayed if the element is a collection or array of items.
                </summary>
    </member>
    <member name="T:System.Diagnostics.DebuggerDisplayAttribute">
      <summary>
                    Determines how a class or field is displayed in the debugger variable windows.
                </summary>
    </member>
    <member name="M:System.Diagnostics.DebuggerDisplayAttribute.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Diagnostics.DebuggerDisplayAttribute" /> class. 
                </summary>
      <param name="value">
                    The string to be displayed in the value column for instances of the type. An empty string ("") causes the value column to be hidden.
                </param>
    </member>
    <member name="P:System.Diagnostics.DebuggerDisplayAttribute.Name">
      <summary>
                    Gets or sets the name to display in the debugger variable windows.
                </summary>
      <returns>
                    The name to display in the debugger variable windows.
                </returns>
    </member>
    <member name="P:System.Diagnostics.DebuggerDisplayAttribute.Target">
      <summary>
                    Gets or sets the type of the attribute's target.
                </summary>
      <returns>
                    An object that identifies the attribute's target type.
                </returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Diagnostics.DebuggerDisplayAttribute.Target" /> is set to null.
                </exception>
    </member>
    <member name="P:System.Diagnostics.DebuggerDisplayAttribute.TargetTypeName">
      <summary>
                    Gets or sets the type name of the attribute's target.
                </summary>
      <returns>
                    The name of the attribute's target type.
                </returns>
    </member>
    <member name="P:System.Diagnostics.DebuggerDisplayAttribute.Type">
      <summary>
                    Gets or sets the string to display in the type column of the debugger variable windows.
                </summary>
      <returns>
                    The string to display in the type column of the debugger variable windows.
                </returns>
    </member>
    <member name="P:System.Diagnostics.DebuggerDisplayAttribute.Value">
      <summary>
                    Gets the string to display in the value column of the debugger variable windows.
                </summary>
      <returns>
                    The string to display in the value column of the debugger variable.
                </returns>
    </member>
    <member name="T:System.Diagnostics.DebuggerHiddenAttribute">
      <summary>
                    Hides the code from the debugger. This class cannot be inherited.
                </summary>
    </member>
    <member name="M:System.Diagnostics.DebuggerHiddenAttribute.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Diagnostics.DebuggerHiddenAttribute" /> class. 
                </summary>
    </member>
    <member name="T:System.Diagnostics.DebuggerNonUserCodeAttribute">
      <summary>
                    Identifies a type or member that is not part of the user code for an application.
                </summary>
    </member>
    <member name="M:System.Diagnostics.DebuggerNonUserCodeAttribute.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Diagnostics.DebuggerNonUserCodeAttribute" /> class. 
                </summary>
    </member>
    <member name="T:System.Diagnostics.DebuggerStepThroughAttribute">
      <summary>
                    Instructs the debugger to step through the code instead of into the code. This class cannot be inherited.
                </summary>
    </member>
    <member name="M:System.Diagnostics.DebuggerStepThroughAttribute.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Diagnostics.DebuggerStepThroughAttribute" /> class. 
                </summary>
    </member>
    <member name="T:System.Diagnostics.DebuggerTypeProxyAttribute">
      <summary>
                    Specifies the display proxy for a type.
                </summary>
    </member>
    <member name="M:System.Diagnostics.DebuggerTypeProxyAttribute.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Diagnostics.DebuggerTypeProxyAttribute" /> class using the type name of the proxy. 
                </summary>
      <param name="typeName">
                    The name of the proxy type.
                </param>
    </member>
    <member name="M:System.Diagnostics.DebuggerTypeProxyAttribute.#ctor(System.Type)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Diagnostics.DebuggerTypeProxyAttribute" /> class using the type of the proxy. 
                </summary>
      <param name="type">
                    The proxy type.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.
                </exception>
    </member>
    <member name="P:System.Diagnostics.DebuggerTypeProxyAttribute.ProxyTypeName">
      <summary>
                    Gets the name of the proxy type. 
                </summary>
      <returns>
                    The name of the proxy type.
                </returns>
    </member>
    <member name="P:System.Diagnostics.DebuggerTypeProxyAttribute.Target">
      <summary>
                    Gets or sets the target type for the attribute.
                </summary>
      <returns>
                    The target type.
                </returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Diagnostics.DebuggerTypeProxyAttribute.Target" /> is set to null.
                </exception>
    </member>
    <member name="P:System.Diagnostics.DebuggerTypeProxyAttribute.TargetTypeName">
      <summary>
                    Gets or sets the name of the target type for the attribute.
                </summary>
      <returns>
                    The name of the target type.
                </returns>
    </member>
    <member name="T:System.Diagnostics.StackFrame">
      <summary>
                    Provides information about a stack frame, which represents a function call on the call stack for the current thread.
                </summary>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Diagnostics.StackFrame" /> class.
                </summary>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.Boolean)">
      <summary>[SECURITY CRITICAL] 
                    Initializes a new instance of the <see cref="T:System.Diagnostics.StackFrame" /> class, and optionally captures source information.
                </summary>
      <param name="fNeedFileInfo">true to capture the file name, line number, and column number of the stack frame; otherwise, false. 
                </param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.Int32)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Diagnostics.StackFrame" /> class that corresponds to a frame above the current stack frame.
                </summary>
      <param name="skipFrames">
                    The number of frames up the stack to skip. 
                </param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.Int32,System.Boolean)">
      <summary>[SECURITY CRITICAL] 
                    Initializes a new instance of the <see cref="T:System.Diagnostics.StackFrame" /> class that corresponds to a frame above the current stack frame, and optionally captures source information.
                </summary>
      <param name="skipFrames">
                    The number of frames up the stack to skip. 
                </param>
      <param name="fNeedFileInfo">true to capture the file name, line number, and column number of the stack frame; otherwise, false. 
                </param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.String,System.Int32)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Diagnostics.StackFrame" /> class that contains only the specified file name and line number.
                </summary>
      <param name="fileName">
                    The file name. 
                </param>
      <param name="lineNumber">
                    The line number in the specified file. 
                </param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.String,System.Int32,System.Int32)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Diagnostics.StackFrame" /> class that contains only the specified file name, line number, and column number.
                </summary>
      <param name="fileName">
                    The file name. 
                </param>
      <param name="lineNumber">
                    The line number in the specified file. 
                </param>
      <param name="colNumber">
                    The column number in the specified file. 
                </param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileColumnNumber">
      <summary>
                    Gets the column number in the file that contains the code that is executing. This information is typically extracted from the debugging symbols for the executable.
                </summary>
      <returns>
                    The file column number.-or- 0 (zero) if the file column number cannot be determined.
                </returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileLineNumber">
      <summary>
                    Gets the line number in the file that contains the code that is executing. This information is typically extracted from the debugging symbols for the executable.
                </summary>
      <returns>
                    The file line number.-or- 0 (zero) if the file line number cannot be determined.
                </returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileName">
      <summary>[SECURITY CRITICAL] 
                    Gets the file name that contains the code that is executing. This information is typically extracted from the debugging symbols for the executable.
                </summary>
      <returns>
                    The file name.-or- A null reference (Nothing in Visual Basic) if the file name cannot be determined. 
                </returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetILOffset">
      <summary>
                    Gets the offset from the start of the Microsoft intermediate language (MSIL) code for the method that is executing. This offset might be an approximation depending on whether the just-in-time (JIT) compiler is generating debugging code. The generation of this debugging information is controlled by the <see cref="T:System.Diagnostics.DebuggableAttribute" /> attribute.
                </summary>
      <returns>
                    The offset from the start of the MSIL code for the method that is executing.
                </returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetMethod">
      <summary>
                    Gets the method in which the frame is executing.
                </summary>
      <returns>
                    The method in which the frame is executing.
                </returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetNativeOffset">
      <summary>
                    Gets the offset from the start of the native just-in-time (JIT) compiled code for the method that is being executed. The generation of this debugging information is controlled by the <see cref="T:System.Diagnostics.DebuggableAttribute" /> class.
                </summary>
      <returns>
                    The offset from the start of the JIT-compiled code for the method that is being executed.
                </returns>
    </member>
    <member name="F:System.Diagnostics.StackFrame.OFFSET_UNKNOWN">
      <summary>
                    Defines the value that is returned from the <see cref="M:System.Diagnostics.StackFrame.GetNativeOffset" /> or <see cref="M:System.Diagnostics.StackFrame.GetILOffset" /> method when the native or Microsoft intermediate language (MSIL) offset is unknown. This field is constant.
                </summary>
    </member>
    <member name="M:System.Diagnostics.StackFrame.ToString">
      <summary>
                    Builds a readable representation of the stack frame.
                </summary>
      <returns>
                    A readable representation of the stack frame.
                </returns>
    </member>
    <member name="T:System.Diagnostics.StackTrace">
      <summary>
                    Represents a stack trace, which is an ordered collection of one or more stack frames.
                </summary>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Diagnostics.StackTrace" /> class from the caller's frame.
                </summary>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Boolean)">
      <summary>[SECURITY CRITICAL] 
                    Initializes a new instance of the <see cref="T:System.Diagnostics.StackTrace" /> class from the caller's frame, and optionally captures source information.
                </summary>
      <param name="fNeedFileInfo">true to capture the file name, line number, and column number; otherwise, false. 
                </param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Diagnostics.StackFrame)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Diagnostics.StackTrace" /> class that contains a single frame.
                </summary>
      <param name="frame">
                    The frame that the <see cref="T:System.Diagnostics.StackTrace" /> object should contain. 
                </param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Diagnostics.StackTrace" /> class by using the specified exception object.
                </summary>
      <param name="e">
                    The exception object from which to construct the stack trace. 
                </param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Boolean)">
      <summary>[SECURITY CRITICAL] 
                    Initializes a new instance of the <see cref="T:System.Diagnostics.StackTrace" /> class by using the specified exception object, and optionally captures source information.
                </summary>
      <param name="e">
                    The exception object from which to construct the stack trace. 
                </param>
      <param name="fNeedFileInfo">true to capture the file name, line number, and column number; otherwise, false. 
                </param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32)">
      <summary>[SECURITY CRITICAL] 
                    Initializes a new instance of the <see cref="T:System.Diagnostics.StackTrace" /> class by using the specified exception object and skipping the specified number of frames.
                </summary>
      <param name="e">
                    The exception object from which to construct the stack trace. 
                </param>
      <param name="skipFrames">
                    The number of frames up the stack from which to start the trace. 
                </param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32,System.Boolean)">
      <summary>[SECURITY CRITICAL] 
                    Initializes a new instance of the <see cref="T:System.Diagnostics.StackTrace" /> class by using the specified exception object and skipping the specified number of frames, and optionally captures source information.
                </summary>
      <param name="e">
                    The exception object from which to construct the stack trace. 
                </param>
      <param name="skipFrames">
                    The number of frames up the stack from which to start the trace. 
                </param>
      <param name="fNeedFileInfo">true to capture the file name, line number, and column number; otherwise, false. 
                </param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Int32)">
      <summary>[SECURITY CRITICAL] 
                    Initializes a new instance of the <see cref="T:System.Diagnostics.StackTrace" /> class from the caller's frame, skipping the specified number of frames.
                </summary>
      <param name="skipFrames">
                    The number of frames up the stack from which to start the trace. 
                </param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Int32,System.Boolean)">
      <summary>[SECURITY CRITICAL] 
                    Initializes a new instance of the <see cref="T:System.Diagnostics.StackTrace" /> class from the caller's frame, skipping the specified number of frames and optionally capturing source information.
                </summary>
      <param name="skipFrames">
                    The number of frames up the stack from which to start the trace. 
                </param>
      <param name="fNeedFileInfo">true to capture the file name, line number, and column number; otherwise, false. 
                </param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Threading.Thread,System.Boolean)">
      <summary>[SECURITY CRITICAL] 
                    Initializes a new instance of the <see cref="T:System.Diagnostics.StackTrace" /> class for a specific thread, and optionally captures source information.
                </summary>
      <param name="targetThread">
                    The thread whose stack trace is requested. 
                </param>
      <param name="needFileInfo">true to capture the file name, line number, and column number; otherwise, false. 
                </param>
    </member>
    <member name="P:System.Diagnostics.StackTrace.FrameCount">
      <summary>
                    Gets the number of frames in the stack trace.
                </summary>
      <returns>
                    The number of frames in the stack trace. 
                </returns>
    </member>
    <member name="M:System.Diagnostics.StackTrace.GetFrame(System.Int32)">
      <summary>
                    Gets the specified stack frame.
                </summary>
      <returns>
                    The specified stack frame.
                </returns>
      <param name="index">
                    The index of the stack frame requested. 
                </param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.GetFrames">
      <summary>
                    Returns a copy of all stack frames in the current stack trace.
                </summary>
      <returns>
                    An array that represents the function calls in the stack trace.
                </returns>
    </member>
    <member name="F:System.Diagnostics.StackTrace.METHODS_TO_SKIP">
      <summary>
                    Defines the default for the number of methods to omit from the stack trace. This field is constant.
                </summary>
    </member>
    <member name="M:System.Diagnostics.StackTrace.ToString">
      <summary>
                    Builds a readable representation of the stack trace.
                </summary>
      <returns>
                    A readable representation of the stack trace.
                </returns>
    </member>
    <member name="T:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute">
      <summary>
                    Suppresses reporting of a specific static analysis tool rule violation, allowing multiple suppressions on a single code artifact.
                </summary>
    </member>
    <member name="M:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute.#ctor(System.String,System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute" /> class, specifying the category of the static analysis tool and the identifier for an analysis rule. 
                </summary>
      <param name="category">
                    The category for the attribute.
                </param>
      <param name="checkId">
                    The identifier of the analysis tool rule the attribute applies to.
                </param>
    </member>
    <member name="P:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute.Category">
      <summary>
                    Gets the category that identifies the classification of the attribute.
                </summary>
      <returns>
                    The category that identifies the attribute.
                </returns>
    </member>
    <member name="P:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute.CheckId">
      <summary>
                    Gets the identifier of the static analysis tool rule to be suppressed.
                </summary>
      <returns>
                    The identifier of the static analysis tool rule to be suppressed.
                </returns>
    </member>
    <member name="P:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute.Justification">
      <summary>
                    Gets or sets the justification for suppressing the code analysis message.
                </summary>
      <returns>
                    The justification for suppressing the message.
                </returns>
    </member>
    <member name="P:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute.MessageId">
      <summary>
                    Gets or sets an optional argument that expands on exclusion criteria.
                </summary>
      <returns>
                    A string containing the expanded exclusion criteria.
                </returns>
    </member>
    <member name="P:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute.Scope">
      <summary>
                    Gets or sets the scope of the code that is relevant for the attribute.
                </summary>
      <returns>
                    The scope of the code that is relevant for the attribute.
                </returns>
    </member>
    <member name="P:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute.Target">
      <summary>
                    Gets or sets a fully qualified path that represents the target of the attribute.
                </summary>
      <returns>
                    A fully qualified path that represents the target of the attribute.
                </returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolDocumentWriter">
      <summary>
                    Represents a document that is referenced by a symbol store.
                </summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocumentWriter.SetCheckSum(System.Guid,System.Byte[])">
      <summary>
                    Sets checksum information.
                </summary>
      <param name="algorithmId">
                    The GUID that represents the algorithm ID. 
                </param>
      <param name="checkSum">
                    The checksum. 
                </param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocumentWriter.SetSource(System.Byte[])">
      <summary>
                    Stores the raw source for a document in the symbol store.
                </summary>
      <param name="source">
                    The document source represented as unsigned bytes. 
                </param>
    </member>
    <member name="T:System.Globalization.Calendar">
      <summary>
                    Represents time in divisions, such as weeks, months, and years.
                </summary>
    </member>
    <member name="M:System.Globalization.Calendar.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Globalization.Calendar" /> class.
                </summary>
    </member>
    <member name="M:System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)">
      <summary>
                    Returns a <see cref="T:System.DateTime" /> that is the specified number of days away from the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    The <see cref="T:System.DateTime" /> that results from adding the specified number of days to the specified <see cref="T:System.DateTime" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to which to add days. 
                </param>
      <param name="days">
                    The number of days to add. 
                </param>
      <exception cref="T:System.ArgumentException">
                    The resulting <see cref="T:System.DateTime" /> is outside the supported range of this calendar. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="days" /> is outside the supported range of the <see cref="T:System.DateTime" /> return value. 
                </exception>
    </member>
    <member name="M:System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)">
      <summary>
                    Returns a <see cref="T:System.DateTime" /> that is the specified number of hours away from the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    The <see cref="T:System.DateTime" /> that results from adding the specified number of hours to the specified <see cref="T:System.DateTime" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to which to add hours. 
                </param>
      <param name="hours">
                    The number of hours to add. 
                </param>
      <exception cref="T:System.ArgumentException">
                    The resulting <see cref="T:System.DateTime" /> is outside the supported range of this calendar. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="hours" /> is outside the supported range of the <see cref="T:System.DateTime" /> return value. 
                </exception>
    </member>
    <member name="M:System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)">
      <summary>
                    Returns a <see cref="T:System.DateTime" /> that is the specified number of milliseconds away from the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    The <see cref="T:System.DateTime" /> that results from adding the specified number of milliseconds to the specified <see cref="T:System.DateTime" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to add milliseconds to. 
                </param>
      <param name="milliseconds">
                    The number of milliseconds to add.
                </param>
      <exception cref="T:System.ArgumentException">
                    The resulting <see cref="T:System.DateTime" /> is outside the supported range of this calendar. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="milliseconds" /> is outside the supported range of the <see cref="T:System.DateTime" /> return value. 
                </exception>
    </member>
    <member name="M:System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)">
      <summary>
                    Returns a <see cref="T:System.DateTime" /> that is the specified number of minutes away from the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    The <see cref="T:System.DateTime" /> that results from adding the specified number of minutes to the specified <see cref="T:System.DateTime" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to which to add minutes. 
                </param>
      <param name="minutes">
                    The number of minutes to add. 
                </param>
      <exception cref="T:System.ArgumentException">
                    The resulting <see cref="T:System.DateTime" /> is outside the supported range of this calendar. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="minutes" /> is outside the supported range of the <see cref="T:System.DateTime" /> return value. 
                </exception>
    </member>
    <member name="M:System.Globalization.Calendar.AddMonths(System.DateTime,System.Int32)">
      <summary>
                    When overridden in a derived class, returns a <see cref="T:System.DateTime" /> that is the specified number of months away from the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    The <see cref="T:System.DateTime" /> that results from adding the specified number of months to the specified <see cref="T:System.DateTime" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to which to add months. 
                </param>
      <param name="months">
                    The number of months to add. 
                </param>
      <exception cref="T:System.ArgumentException">
                    The resulting <see cref="T:System.DateTime" /> is outside the supported range of this calendar. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> is outside the supported range of the <see cref="T:System.DateTime" /> return value. 
                </exception>
    </member>
    <member name="M:System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)">
      <summary>
                    Returns a <see cref="T:System.DateTime" /> that is the specified number of seconds away from the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    The <see cref="T:System.DateTime" /> that results from adding the specified number of seconds to the specified <see cref="T:System.DateTime" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to which to add seconds. 
                </param>
      <param name="seconds">
                    The number of seconds to add. 
                </param>
      <exception cref="T:System.ArgumentException">
                    The resulting <see cref="T:System.DateTime" /> is outside the supported range of this calendar. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="seconds" /> is outside the supported range of the <see cref="T:System.DateTime" /> return value. 
                </exception>
    </member>
    <member name="M:System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)">
      <summary>
                    Returns a <see cref="T:System.DateTime" /> that is the specified number of weeks away from the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    The <see cref="T:System.DateTime" /> that results from adding the specified number of weeks to the specified <see cref="T:System.DateTime" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to which to add weeks. 
                </param>
      <param name="weeks">
                    The number of weeks to add. 
                </param>
      <exception cref="T:System.ArgumentException">
                    The resulting <see cref="T:System.DateTime" /> is outside the supported range of this calendar. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="weeks" /> is outside the supported range of the <see cref="T:System.DateTime" /> return value. 
                </exception>
    </member>
    <member name="M:System.Globalization.Calendar.AddYears(System.DateTime,System.Int32)">
      <summary>
                    When overridden in a derived class, returns a <see cref="T:System.DateTime" /> that is the specified number of years away from the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    The <see cref="T:System.DateTime" /> that results from adding the specified number of years to the specified <see cref="T:System.DateTime" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to which to add years. 
                </param>
      <param name="years">
                    The number of years to add. 
                </param>
      <exception cref="T:System.ArgumentException">
                    The resulting <see cref="T:System.DateTime" /> is outside the supported range of this calendar. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="years" /> is outside the supported range of the <see cref="T:System.DateTime" /> return value. 
                </exception>
    </member>
    <member name="F:System.Globalization.Calendar.CurrentEra">
      <summary>
                    Represents the current era of the current calendar. 
                </summary>
    </member>
    <member name="P:System.Globalization.Calendar.Eras">
      <summary>
                    When overridden in a derived class, gets the list of eras in the current calendar.
                </summary>
      <returns>
                    An array of integers that represents the eras in the current calendar.
                </returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetDayOfMonth(System.DateTime)">
      <summary>
                    When overridden in a derived class, returns the day of the month in the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    A positive integer that represents the day of the month in the <paramref name="time" /> parameter.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. 
                </param>
    </member>
    <member name="M:System.Globalization.Calendar.GetDayOfWeek(System.DateTime)">
      <summary>
                    When overridden in a derived class, returns the day of the week in the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    A <see cref="T:System.DayOfWeek" /> value that represents the day of the week in the <paramref name="time" /> parameter.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. 
                </param>
    </member>
    <member name="M:System.Globalization.Calendar.GetDayOfYear(System.DateTime)">
      <summary>
                    When overridden in a derived class, returns the day of the year in the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    A positive integer that represents the day of the year in the <paramref name="time" /> parameter.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. 
                </param>
    </member>
    <member name="M:System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32)">
      <summary>
                    Returns the number of days in the specified month and year of the current era.
                </summary>
      <returns>
                    The number of days in the specified month in the specified year in the current era.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="month">
                    A positive integer that represents the month. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="month" /> is outside the range supported by the calendar. 
                </exception>
    </member>
    <member name="M:System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>
                    When overridden in a derived class, returns the number of days in the specified month, year, and era.
                </summary>
      <returns>
                    The number of days in the specified month in the specified year in the specified era.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="month">
                    A positive integer that represents the month. 
                </param>
      <param name="era">
                    An integer that represents the era. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="month" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="era" /> is outside the range supported by the calendar. 
                </exception>
    </member>
    <member name="M:System.Globalization.Calendar.GetDaysInYear(System.Int32)">
      <summary>
                    Returns the number of days in the specified year of the current era.
                </summary>
      <returns>
                    The number of days in the specified year in the current era.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar. 
                </exception>
    </member>
    <member name="M:System.Globalization.Calendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>
                    When overridden in a derived class, returns the number of days in the specified year and era.
                </summary>
      <returns>
                    The number of days in the specified year in the specified era.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="era">
                    An integer that represents the era. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="era" /> is outside the range supported by the calendar. 
                </exception>
    </member>
    <member name="M:System.Globalization.Calendar.GetEra(System.DateTime)">
      <summary>
                    When overridden in a derived class, returns the era in the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    An integer that represents the era in <paramref name="time" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. 
                </param>
    </member>
    <member name="M:System.Globalization.Calendar.GetHour(System.DateTime)">
      <summary>
                    Returns the hours value in the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    An integer from 0 to 23 that represents the hour in <paramref name="time" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. 
                </param>
    </member>
    <member name="M:System.Globalization.Calendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>
                    Calculates the leap month for a specified year and era.
                </summary>
      <returns>
                    A positive integer that indicates the leap month in the specified year and era.
                
                    -or-
                
                    Zero if this calendar does not support a leap month or if the <paramref name="year" /> and <paramref name="era" /> parameters do not specify a leap year.
                </returns>
      <param name="year">
                    A year.
                </param>
      <param name="era">
                    An era.
                </param>
    </member>
    <member name="M:System.Globalization.Calendar.GetMilliseconds(System.DateTime)">
      <summary>
                    Returns the milliseconds value in the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    A double-precision floating-point number from 0 to 999 that represents the milliseconds in the <paramref name="time" /> parameter.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. 
                </param>
    </member>
    <member name="M:System.Globalization.Calendar.GetMinute(System.DateTime)">
      <summary>
                    Returns the minutes value in the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    An integer from 0 to 59 that represents the minutes in <paramref name="time" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. 
                </param>
    </member>
    <member name="M:System.Globalization.Calendar.GetMonth(System.DateTime)">
      <summary>
                    When overridden in a derived class, returns the month in the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    A positive integer that represents the month in <paramref name="time" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. 
                </param>
    </member>
    <member name="M:System.Globalization.Calendar.GetMonthsInYear(System.Int32)">
      <summary>
                    Returns the number of months in the specified year in the current era.
                </summary>
      <returns>
                    The number of months in the specified year in the current era.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar. 
                </exception>
    </member>
    <member name="M:System.Globalization.Calendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>
                    When overridden in a derived class, returns the number of months in the specified year in the specified era.
                </summary>
      <returns>
                    The number of months in the specified year in the specified era.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="era">
                    An integer that represents the era. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="era" /> is outside the range supported by the calendar. 
                </exception>
    </member>
    <member name="M:System.Globalization.Calendar.GetSecond(System.DateTime)">
      <summary>
                    Returns the seconds value in the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    An integer from 0 to 59 that represents the seconds in <paramref name="time" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. 
                </param>
    </member>
    <member name="M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)">
      <summary>
                    Returns the week of the year that includes the date in the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    A positive integer that represents the week of the year that includes the date in the <paramref name="time" /> parameter.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. 
                </param>
      <param name="rule">
                    A <see cref="T:System.Globalization.CalendarWeekRule" /> value that defines a calendar week. 
                </param>
      <param name="firstDayOfWeek">
                    A <see cref="T:System.DayOfWeek" /> value that represents the first day of the week. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="firstDayOfWeek" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="rule" /> is not a valid <see cref="T:System.Globalization.CalendarWeekRule" /> value. 
                </exception>
    </member>
    <member name="M:System.Globalization.Calendar.GetYear(System.DateTime)">
      <summary>
                    When overridden in a derived class, returns the year in the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    An integer that represents the year in <paramref name="time" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. 
                </param>
    </member>
    <member name="M:System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32)">
      <summary>
                    Determines whether the specified date in the current era is a leap day.
                </summary>
      <returns>true if the specified day is a leap day; otherwise, false.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="month">
                    A positive integer that represents the month. 
                </param>
      <param name="day">
                    A positive integer that represents the day. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="month" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="day" /> is outside the range supported by the calendar. 
                </exception>
    </member>
    <member name="M:System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
                    When overridden in a derived class, determines whether the specified date in the specified era is a leap day.
                </summary>
      <returns>true if the specified day is a leap day; otherwise, false.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="month">
                    A positive integer that represents the month. 
                </param>
      <param name="day">
                    A positive integer that represents the day. 
                </param>
      <param name="era">
                    An integer that represents the era. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="month" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="day" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="era" /> is outside the range supported by the calendar. 
                </exception>
    </member>
    <member name="M:System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32)">
      <summary>
                    Determines whether the specified month in the specified year in the current era is a leap month.
                </summary>
      <returns>true if the specified month is a leap month; otherwise, false.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="month">
                    A positive integer that represents the month. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="month" /> is outside the range supported by the calendar. 
                </exception>
    </member>
    <member name="M:System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>
                    When overridden in a derived class, determines whether the specified month in the specified year in the specified era is a leap month.
                </summary>
      <returns>true if the specified month is a leap month; otherwise, false.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="month">
                    A positive integer that represents the month. 
                </param>
      <param name="era">
                    An integer that represents the era. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="month" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="era" /> is outside the range supported by the calendar. 
                </exception>
    </member>
    <member name="M:System.Globalization.Calendar.IsLeapYear(System.Int32)">
      <summary>
                    Determines whether the specified year in the current era is a leap year.
                </summary>
      <returns>true if the specified year is a leap year; otherwise, false.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar. 
                </exception>
    </member>
    <member name="M:System.Globalization.Calendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>
                    When overridden in a derived class, determines whether the specified year in the specified era is a leap year.
                </summary>
      <returns>true if the specified year is a leap year; otherwise, false.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="era">
                    An integer that represents the era. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="era" /> is outside the range supported by the calendar. 
                </exception>
    </member>
    <member name="P:System.Globalization.Calendar.IsReadOnly">
      <summary>
                    Gets a value indicating whether this <see cref="T:System.Globalization.Calendar" /> object is read-only.
                </summary>
      <returns>true if this <see cref="T:System.Globalization.Calendar" /> object is read-only; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Globalization.Calendar.MaxSupportedDateTime">
      <summary>
                    Gets the latest date and time supported by this <see cref="T:System.Globalization.Calendar" /> object.
                </summary>
      <returns>
                    The latest date and time supported by this calendar. The default is <see cref="F:System.DateTime.MaxValue" />.
                </returns>
    </member>
    <member name="P:System.Globalization.Calendar.MinSupportedDateTime">
      <summary>
                    Gets the earliest date and time supported by this <see cref="T:System.Globalization.Calendar" /> object.
                </summary>
      <returns>
                    The earliest date and time supported by this calendar. The default is <see cref="F:System.DateTime.MinValue" />.
                </returns>
    </member>
    <member name="M:System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
                    Returns a <see cref="T:System.DateTime" /> that is set to the specified date and time in the current era.
                </summary>
      <returns>
                    The <see cref="T:System.DateTime" /> that is set to the specified date and time in the current era.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="month">
                    A positive integer that represents the month. 
                </param>
      <param name="day">
                    A positive integer that represents the day. 
                </param>
      <param name="hour">
                    An integer from 0 to 23 that represents the hour. 
                </param>
      <param name="minute">
                    An integer from 0 to 59 that represents the minute. 
                </param>
      <param name="second">
                    An integer from 0 to 59 that represents the second. 
                </param>
      <param name="millisecond">
                    An integer from 0 to 999 that represents the millisecond. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="month" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="day" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="hour" /> is less than zero or greater than 23.
                
                    -or- 
                <paramref name="minute" /> is less than zero or greater than 59.
                
                    -or- 
                <paramref name="second" /> is less than zero or greater than 59.
                
                    -or- 
                <paramref name="millisecond" /> is less than zero or greater than 999. 
                </exception>
    </member>
    <member name="M:System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
                    When overridden in a derived class, returns a <see cref="T:System.DateTime" /> that is set to the specified date and time in the specified era.
                </summary>
      <returns>
                    The <see cref="T:System.DateTime" /> that is set to the specified date and time in the current era.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="month">
                    A positive integer that represents the month. 
                </param>
      <param name="day">
                    A positive integer that represents the day. 
                </param>
      <param name="hour">
                    An integer from 0 to 23 that represents the hour. 
                </param>
      <param name="minute">
                    An integer from 0 to 59 that represents the minute. 
                </param>
      <param name="second">
                    An integer from 0 to 59 that represents the second. 
                </param>
      <param name="millisecond">
                    An integer from 0 to 999 that represents the millisecond. 
                </param>
      <param name="era">
                    An integer that represents the era. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="month" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="day" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="hour" /> is less than zero or greater than 23.
                
                    -or- 
                <paramref name="minute" /> is less than zero or greater than 59.
                
                    -or- 
                <paramref name="second" /> is less than zero or greater than 59.
                
                    -or- 
                <paramref name="millisecond" /> is less than zero or greater than 999.
                
                    -or- 
                <paramref name="era" /> is outside the range supported by the calendar. 
                </exception>
    </member>
    <member name="M:System.Globalization.Calendar.ToFourDigitYear(System.Int32)">
      <summary>
                    Converts the specified year to a four-digit year by using the <see cref="P:System.Globalization.Calendar.TwoDigitYearMax" /> property to determine the appropriate century.
                </summary>
      <returns>
                    An integer that contains the four-digit representation of <paramref name="year" />.
                </returns>
      <param name="year">
                    A two-digit or four-digit integer that represents the year to convert. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar. 
                </exception>
    </member>
    <member name="P:System.Globalization.Calendar.TwoDigitYearMax">
      <summary>
                    Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.
                </summary>
      <returns>
                    The last year of a 100-year range that can be represented by a 2-digit year.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The current <see cref="T:System.Globalization.Calendar" /> object is read-only.
                </exception>
    </member>
    <member name="T:System.Globalization.CalendarWeekRule">
      <summary>
                    Defines different rules for determining the first week of the year.
                </summary>
    </member>
    <member name="F:System.Globalization.CalendarWeekRule.FirstDay">
      <summary>
                    Indicates that the first week of the year starts on the first day of the year and ends before the following designated first day of the week. The value is 0.
                </summary>
    </member>
    <member name="F:System.Globalization.CalendarWeekRule.FirstFullWeek">
      <summary>
                    Indicates that the first week of the year begins on the first occurrence of the designated first day of the week on or after the first day of the year. The value is 1.
                </summary>
    </member>
    <member name="F:System.Globalization.CalendarWeekRule.FirstFourDayWeek">
      <summary>
                    Indicates that the first week of the year is the first week with four or more days before the designated first day of the week. The value is 2.
                </summary>
    </member>
    <member name="T:System.Globalization.CharUnicodeInfo">
      <summary>
                    Retrieves information about a Unicode character. This class cannot be inherited.
                </summary>
    </member>
    <member name="M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.Char)">
      <summary>
                    Gets the numeric value associated with the specified character.
                </summary>
      <returns>
                    The numeric value associated with the specified character.
                
                    -or- 
                
                    -1, if the specified character is not a numeric character.
                </returns>
      <param name="ch">
                    The Unicode character for which to get the numeric value. 
                </param>
    </member>
    <member name="M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.String,System.Int32)">
      <summary>
                    Gets the numeric value associated with the character at the specified index of the specified string.
                </summary>
      <returns>
                    The numeric value associated with the character at the specified index of the specified string.
                
                    -or- 
                
                    -1, if the character at the specified index of the specified string is not a numeric character.
                </returns>
      <param name="s">
                    The <see cref="T:System.String" /> containing the Unicode character for which to get the numeric value. 
                </param>
      <param name="index">
                    The index of the Unicode character for which to get the numeric value. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the range of valid indexes in <paramref name="s" />. 
                </exception>
    </member>
    <member name="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)">
      <summary>
                    Gets the Unicode category of the specified character.
                </summary>
      <returns>
                    A <see cref="T:System.Globalization.UnicodeCategory" /> value indicating the category of the specified character.
                </returns>
      <param name="ch">
                    The Unicode character for which to get the Unicode category. 
                </param>
    </member>
    <member name="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.String,System.Int32)">
      <summary>
                    Gets the Unicode category of the character at the specified index of the specified string.
                </summary>
      <returns>
                    A <see cref="T:System.Globalization.UnicodeCategory" /> value indicating the category of the character at the specified index of the specified string.
                </returns>
      <param name="s">
                    The <see cref="T:System.String" /> containing the Unicode character for which to get the Unicode category. 
                </param>
      <param name="index">
                    The index of the Unicode character for which to get the Unicode category. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the range of valid indexes in <paramref name="s" />. 
                </exception>
    </member>
    <member name="T:System.Globalization.CompareInfo">
      <summary>
                    Implements a set of methods for culture-sensitive string comparisons.
                </summary>
    </member>
    <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
      <summary>
                    Compares a section of one string with a section of another string and returns an integer that indicates their relationship to one another in the sort order.
                </summary>
      <returns>
                    An integer that indicates the relationship between the two strings in the sort order, as follows: 
                
                    Value 
                
                    Condition 
                
                    zero 
                
                    The two strings are equal. 
                
                    less than zero 
                
                    The specified section of <paramref name="string1" /> precedes the specified section of <paramref name="string2" />. 
                
                    greater than zero 
                
                    The specified section of <paramref name="string1" /> follows the specified section of <paramref name="string2" />. 
                </returns>
      <param name="string1">
                    The first string to compare. 
                </param>
      <param name="offset1">
                    The zero-based index of the character in <paramref name="string1" /> at which to start the comparison. 
                </param>
      <param name="length1">
                    The number of consecutive characters in <paramref name="string1" /> to compare. 
                </param>
      <param name="string2">
                    The second string to compare. 
                </param>
      <param name="offset2">
                    The zero-based index of the character in <paramref name="string2" /> at which to start the comparison. 
                </param>
      <param name="length2">
                    The number of consecutive characters in <paramref name="string2" /> to compare. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset1" /> or <paramref name="length1" /> or <paramref name="offset2" /> or <paramref name="length2" /> is less than zero.
                
                    -or- 
                <paramref name="offset1" /> is greater than or equal to the number of characters in <paramref name="string1" />.
                
                    -or- 
                <paramref name="offset2" /> is greater than or equal to the number of characters in <paramref name="string2" />.
                
                    -or- 
                <paramref name="length1" /> is greater than the number of characters from <paramref name="offset1" /> to the end of <paramref name="string1" />.
                
                    -or- 
                <paramref name="length2" /> is greater than the number of characters from <paramref name="offset2" /> to the end of <paramref name="string2" />. 
                </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)">
      <summary>
                    Compares a section of one string with a section of another string using the specified <see cref="T:System.Globalization.CompareOptions" /> value and returns an integer that indicates their relationship to one another in the sort order.
                </summary>
      <returns>
                    An integer that indicates the relationship between the two strings in the sort order, as follows: 
                
                    Value 
                
                    Condition 
                
                    zero 
                
                    The two strings are equal. 
                
                    less than zero 
                
                    The specified section of <paramref name="string1" /> is less than the specified section of <paramref name="string2" />. 
                
                    greater than zero 
                
                    The specified section of <paramref name="string1" /> is greater than the specified section of <paramref name="string2" />. 
                </returns>
      <param name="string1">
                    The first string to compare. 
                </param>
      <param name="offset1">
                    The zero-based index of the character in <paramref name="string1" /> at which to start comparing. 
                </param>
      <param name="length1">
                    The number of consecutive characters in <paramref name="string1" /> to compare. 
                </param>
      <param name="string2">
                    The second string to compare. 
                </param>
      <param name="offset2">
                    The zero-based index of the character in <paramref name="string2" /> at which to start comparing. 
                </param>
      <param name="length2">
                    The number of consecutive characters in <paramref name="string2" /> to compare. 
                </param>
      <param name="options">
                    The <see cref="T:System.Globalization.CompareOptions" /> value that defines how <paramref name="string1" /> and <paramref name="string2" /> should be compared. <paramref name="options" /> is either the value <see cref="F:System.Globalization.CompareOptions.Ordinal" /> used by itself, or the bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />, and <see cref="F:System.Globalization.CompareOptions.StringSort" />.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset1" /> or <paramref name="length1" /> or <paramref name="offset2" /> or <paramref name="length2" /> is less than zero.
                
                    -or- 
                <paramref name="offset1" /> is greater than or equal to the number of characters in <paramref name="string1" />.
                
                    -or- 
                <paramref name="offset2" /> is greater than or equal to the number of characters in <paramref name="string2" />.
                
                    -or- 
                <paramref name="length1" /> is greater than the number of characters from <paramref name="offset1" /> to the end of <paramref name="string1" />.
                
                    -or- 
                <paramref name="length2" /> is greater than the number of characters from <paramref name="offset2" /> to the end of <paramref name="string2" />. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value. 
                </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32)">
      <summary>
                    Compares the end section of a string with the end section of another string and returns an integer that indicates their relationship to one another in the sort order.
                </summary>
      <returns>
                    An integer that indicates the relationship between the two strings in the sort order, as follows: 
                
                    Value 
                
                    Condition 
                
                    zero 
                
                    The two strings are equal. 
                
                    less than zero 
                
                    The specified section of <paramref name="string1" /> is less than the specified section of <paramref name="string2" />. 
                
                    greater than zero 
                
                    The specified section of <paramref name="string1" /> is greater than the specified section of <paramref name="string2" />. 
                </returns>
      <param name="string1">
                    The first string to compare. 
                </param>
      <param name="offset1">
                    The zero-based index of the character in <paramref name="string1" /> at which to start comparing. 
                </param>
      <param name="string2">
                    The second string to compare. 
                </param>
      <param name="offset2">
                    The zero-based index of the character in <paramref name="string2" /> at which to start comparing. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset1" /> or <paramref name="offset2" /> is less than zero.
                
                    -or- 
                <paramref name="offset1" /> is greater than or equal to the number of characters in <paramref name="string1" />.
                
                    -or- 
                <paramref name="offset2" /> is greater than or equal to the number of characters in <paramref name="string2" />. 
                </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)">
      <summary>
                    Compares the end section of a string with the end section of another string using the specified <see cref="T:System.Globalization.CompareOptions" /> value and returns an integer that indicates their relationship to one another in the sort order.
                </summary>
      <returns>
                    An integer that indicates the relationship between the two strings in the sort order, as follows: 
                
                    Value 
                
                    Condition 
                
                    zero 
                
                    The two strings are equal. 
                
                    less than zero 
                
                    The specified section of <paramref name="string1" /> is less than the specified section of <paramref name="string2" />. 
                
                    greater than zero 
                
                    The specified section of <paramref name="string1" /> is greater than the specified section of <paramref name="string2" />. 
                </returns>
      <param name="string1">
                    The first string to compare. 
                </param>
      <param name="offset1">
                    The zero-based index of the character in <paramref name="string1" /> at which to start comparing. 
                </param>
      <param name="string2">
                    The second string to compare. 
                </param>
      <param name="offset2">
                    The zero-based index of the character in <paramref name="string2" /> at which to start comparing. 
                </param>
      <param name="options">
                    The <see cref="T:System.Globalization.CompareOptions" /> value that defines how <paramref name="string1" /> and <paramref name="string2" /> should be compared. <paramref name="options" /> is either the value <see cref="F:System.Globalization.CompareOptions.Ordinal" /> used by itself, or the bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />, and <see cref="F:System.Globalization.CompareOptions.StringSort" />.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset1" /> or <paramref name="offset2" /> is less than zero.
                
                    -or- 
                <paramref name="offset1" /> is greater than or equal to the number of characters in <paramref name="string1" />.
                
                    -or- 
                <paramref name="offset2" /> is greater than or equal to the number of characters in <paramref name="string2" />. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value. 
                </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.String)">
      <summary>
                    Compares two strings and returns an integer that indicates their relationship to one another in the sort order. 
                </summary>
      <returns>
                    An integer that indicates the relationship between the two strings in the sort order, as follows: 
                
                    Value 
                
                    Condition 
                
                    zero 
                
                    The two strings are equal. 
                
                    less than zero 
                <paramref name="string1" /> precedes <paramref name="string2" />. 
                
                    greater than zero 
                <paramref name="string1" /> follows <paramref name="string2" />. 
                </returns>
      <param name="string1">
                    The first string to compare. 
                </param>
      <param name="string2">
                    The second string to compare. 
                </param>
    </member>
    <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)">
      <summary>
                    Compares two strings using the specified <see cref="T:System.Globalization.CompareOptions" /> value and returns an integer that indicates their relationship to one another in the sort order.
                </summary>
      <returns>
                    An integer that indicates the relationship between the two strings in the sort order, as follows: 
                
                    Value 
                
                    Condition 
                
                    zero 
                
                    The two strings are equal. 
                
                    less than zero 
                <paramref name="string1" /> is less than <paramref name="string2" />. 
                
                    greater than zero 
                <paramref name="string1" /> is greater than <paramref name="string2" />. 
                </returns>
      <param name="string1">
                    The first string to compare. 
                </param>
      <param name="string2">
                    The second string to compare. 
                </param>
      <param name="options">
                    The <see cref="T:System.Globalization.CompareOptions" /> value that defines how <paramref name="string1" /> and <paramref name="string2" /> should be compared. <paramref name="options" /> is either the value <see cref="F:System.Globalization.CompareOptions.Ordinal" /> used by itself, or the bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />, and <see cref="F:System.Globalization.CompareOptions.StringSort" />.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value. 
                </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.Equals(System.Object)">
      <summary>
                    Determines whether the specified object is equal to the current <see cref="T:System.Globalization.CompareInfo" /> object.
                </summary>
      <returns>true if the specified object is equal to the current <see cref="T:System.Globalization.CompareInfo" />; otherwise, false.
                </returns>
      <param name="value">
                    The object to compare with the current <see cref="T:System.Globalization.CompareInfo" />. 
                </param>
    </member>
    <member name="M:System.Globalization.CompareInfo.GetCompareInfo(System.String)">
      <summary>
                    Initializes a new <see cref="T:System.Globalization.CompareInfo" /> object that is associated with the culture with the specified name.
                </summary>
      <returns>
                    A new <see cref="T:System.Globalization.CompareInfo" /> object associated with the culture with the specified identifier and using string comparison methods in the current <see cref="T:System.Reflection.Assembly" />.
                </returns>
      <param name="name">
                    A string representing the culture name. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is an invalid culture name. 
                </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.GetHashCode">
      <summary>
                    Serves as a hash function for the current <see cref="T:System.Globalization.CompareInfo" /> for hashing algorithms and data structures, such as a hash table.
                </summary>
      <returns>
                    A hash code for the current <see cref="T:System.Globalization.CompareInfo" />.
                </returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)">
      <summary>
                    Searches for the specified character and returns the zero-based index of the first occurrence within the entire source string.
                </summary>
      <returns>
                    The zero-based index of the first occurrence of <paramref name="value" /> within the entire <paramref name="source" />, if found; otherwise, -1.
                </returns>
      <param name="source">
                    The string to search. 
                </param>
      <param name="value">
                    The character to locate within <paramref name="source" />. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null. 
                </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)">
      <summary>
                    Searches for the specified character and returns the zero-based index of the first occurrence within the entire source string using the specified <see cref="T:System.Globalization.CompareOptions" /> value.
                </summary>
      <returns>
                    The zero-based index of the first occurrence of <paramref name="value" /> within the entire <paramref name="source" /> using the specified <see cref="T:System.Globalization.CompareOptions" /> value, if found; otherwise, -1.
                </returns>
      <param name="source">
                    The string to search. 
                </param>
      <param name="value">
                    The character to locate within <paramref name="source" />. 
                </param>
      <param name="options">
                    The <see cref="T:System.Globalization.CompareOptions" /> value that defines how the strings should be compared. <paramref name="options" /> is either the value <see cref="F:System.Globalization.CompareOptions.Ordinal" /> used by itself, or the bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value. 
                </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)">
      <summary>
                    Searches for the specified character and returns the zero-based index of the first occurrence within the section of the source string that extends from the specified index to the end of the string using the specified <see cref="T:System.Globalization.CompareOptions" /> value.
                </summary>
      <returns>
                    The zero-based index of the first occurrence of <paramref name="value" /> within the section of <paramref name="source" /> that extends from <paramref name="startIndex" /> to the end of <paramref name="source" /> using the specified <see cref="T:System.Globalization.CompareOptions" /> value, if found; otherwise, -1.
                </returns>
      <param name="source">
                    The string to search. 
                </param>
      <param name="value">
                    The character to locate within <paramref name="source" />. 
                </param>
      <param name="startIndex">
                    The zero-based starting index of the search. 
                </param>
      <param name="options">
                    The <see cref="T:System.Globalization.CompareOptions" /> value that defines how <paramref name="source" /> and <paramref name="value" /> should be compared. <paramref name="options" /> is either the value <see cref="F:System.Globalization.CompareOptions.Ordinal" /> used by itself, or the bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value. 
                </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)">
      <summary>
                    Searches for the specified character and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements.
                </summary>
      <returns>
                    The zero-based index of the first occurrence of <paramref name="value" /> within the section of <paramref name="source" /> that starts at <paramref name="startIndex" /> and contains the number of elements specified by <paramref name="count" />, if found; otherwise, -1.
                </returns>
      <param name="source">
                    The string to search. 
                </param>
      <param name="value">
                    The character to locate within <paramref name="source" />. 
                </param>
      <param name="startIndex">
                    The zero-based starting index of the search. 
                </param>
      <param name="count">
                    The number of elements in the section to search. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.
                
                    -or- 
                <paramref name="count" /> is less than zero.
                
                    -or- 
                <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="source" />. 
                </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)">
      <summary>
                    Searches for the specified character and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements using the specified <see cref="T:System.Globalization.CompareOptions" /> value.
                </summary>
      <returns>
                    The zero-based index of the first occurrence of <paramref name="value" /> within the section of <paramref name="source" /> that starts at <paramref name="startIndex" /> and contains the number of elements specified by <paramref name="count" />, using the specified <see cref="T:System.Globalization.CompareOptions" /> value, if found; otherwise, -1.
                </returns>
      <param name="source">
                    The string to search. 
                </param>
      <param name="value">
                    The character to locate within <paramref name="source" />. 
                </param>
      <param name="startIndex">
                    The zero-based starting index of the search. 
                </param>
      <param name="count">
                    The number of elements in the section to search. 
                </param>
      <param name="options">
                    The <see cref="T:System.Globalization.CompareOptions" /> value that defines how <paramref name="source" /> and <paramref name="value" /> should be compared. <paramref name="options" /> is either the value <see cref="F:System.Globalization.CompareOptions.Ordinal" /> used by itself, or the bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.
                
                    -or- 
                <paramref name="count" /> is less than zero.
                
                    -or- 
                <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="source" />. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value. 
                </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String)">
      <summary>
                    Searches for the specified substring and returns the zero-based index of the first occurrence within the entire source string.
                </summary>
      <returns>
                    The zero-based index of the first occurrence of <paramref name="value" /> within the entire <paramref name="source" />, if found; otherwise, -1.
                </returns>
      <param name="source">
                    The string to search. 
                </param>
      <param name="value">
                    The string to locate within <paramref name="source" />. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                
                    -or- 
                <paramref name="value" /> is null. 
                </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)">
      <summary>
                    Searches for the specified substring and returns the zero-based index of the first occurrence within the entire source string using the specified <see cref="T:System.Globalization.CompareOptions" /> value.
                </summary>
      <returns>
                    The zero-based index of the first occurrence of <paramref name="value" /> within the entire <paramref name="source" /> using the specified <see cref="T:System.Globalization.CompareOptions" /> value, if found; otherwise, -1.
                </returns>
      <param name="source">
                    The string to search. 
                </param>
      <param name="value">
                    The string to locate within <paramref name="source" />. 
                </param>
      <param name="options">
                    The <see cref="T:System.Globalization.CompareOptions" /> value that defines how <paramref name="source" /> and <paramref name="value" /> should be compared. <paramref name="options" /> is either the value <see cref="F:System.Globalization.CompareOptions.Ordinal" /> used by itself, or the bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                
                    -or- 
                <paramref name="value" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value. 
                </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)">
      <summary>
                    Searches for the specified substring and returns the zero-based index of the first occurrence within the section of the source string that extends from the specified index to the end of the string using the specified <see cref="T:System.Globalization.CompareOptions" /> value.
                </summary>
      <returns>
                    The zero-based index of the first occurrence of <paramref name="value" /> within the section of <paramref name="source" /> that extends from <paramref name="startIndex" /> to the end of <paramref name="source" /> using the specified <see cref="T:System.Globalization.CompareOptions" /> value, if found; otherwise, -1.
                </returns>
      <param name="source">
                    The string to search. 
                </param>
      <param name="value">
                    The string to locate within <paramref name="source" />. 
                </param>
      <param name="startIndex">
                    The zero-based starting index of the search. 
                </param>
      <param name="options">
                    The <see cref="T:System.Globalization.CompareOptions" /> value that defines how <paramref name="source" /> and <paramref name="value" /> should be compared. <paramref name="options" /> is either the value <see cref="F:System.Globalization.CompareOptions.Ordinal" /> used by itself, or the bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                
                    -or- 
                <paramref name="value" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value. 
                </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)">
      <summary>
                    Searches for the specified substring and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements.
                </summary>
      <returns>
                    The zero-based index of the first occurrence of <paramref name="value" /> within the section of <paramref name="source" /> that starts at <paramref name="startIndex" /> and contains the number of elements specified by <paramref name="count" />, if found; otherwise, -1.
                </returns>
      <param name="source">
                    The string to search. 
                </param>
      <param name="value">
                    The string to locate within <paramref name="source" />. 
                </param>
      <param name="startIndex">
                    The zero-based starting index of the search. 
                </param>
      <param name="count">
                    The number of elements in the section to search. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                
                    -or- 
                <paramref name="value" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.
                
                    -or- 
                <paramref name="count" /> is less than zero.
                
                    -or- 
                <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="source" />. 
                </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)">
      <summary>
                    Searches for the specified substring and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements using the specified <see cref="T:System.Globalization.CompareOptions" /> value.
                </summary>
      <returns>
                    The zero-based index of the first occurrence of <paramref name="value" /> within the section of <paramref name="source" /> that starts at <paramref name="startIndex" /> and contains the number of elements specified by <paramref name="count" />, using the specified <see cref="T:System.Globalization.CompareOptions" /> value, if found; otherwise, -1.
                </returns>
      <param name="source">
                    The string to search. 
                </param>
      <param name="value">
                    The string to locate within <paramref name="source" />. 
                </param>
      <param name="startIndex">
                    The zero-based starting index of the search. 
                </param>
      <param name="count">
                    The number of elements in the section to search. 
                </param>
      <param name="options">
                    The <see cref="T:System.Globalization.CompareOptions" /> value that defines how <paramref name="source" /> and <paramref name="value" /> should be compared. <paramref name="options" /> is either the value <see cref="F:System.Globalization.CompareOptions.Ordinal" /> used by itself, or the bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                
                    -or- 
                <paramref name="value" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.
                
                    -or- 
                <paramref name="count" /> is less than zero.
                
                    -or- 
                <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="source" />. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value. 
                </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String)">
      <summary>
                    Determines whether the specified source string starts with the specified prefix.
                </summary>
      <returns>true if the length of <paramref name="prefix" /> is less than or equal to the length of <paramref name="source" /> and <paramref name="source" /> starts with <paramref name="prefix" />; otherwise, false.
                </returns>
      <param name="source">
                    The string to search in. 
                </param>
      <param name="prefix">
                    The string to compare with the beginning of <paramref name="source" />. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                
                    -or- 
                <paramref name="prefix" /> is null. 
                </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)">
      <summary>
                    Determines whether the specified source string starts with the specified prefix using the specified <see cref="T:System.Globalization.CompareOptions" /> value.
                </summary>
      <returns>true if the length of <paramref name="prefix" /> is less than or equal to the length of <paramref name="source" /> and <paramref name="source" /> starts with <paramref name="prefix" />; otherwise, false.
                </returns>
      <param name="source">
                    The string to search in. 
                </param>
      <param name="prefix">
                    The string to compare with the beginning of <paramref name="source" />. 
                </param>
      <param name="options">
                    The <see cref="T:System.Globalization.CompareOptions" /> value that defines how <paramref name="source" /> and <paramref name="prefix" /> should be compared. <paramref name="options" /> is either the value <see cref="F:System.Globalization.CompareOptions.Ordinal" /> used by itself, or the bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                
                    -or- 
                <paramref name="prefix" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value. 
                </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String)">
      <summary>
                    Determines whether the specified source string ends with the specified suffix.
                </summary>
      <returns>true if the length of <paramref name="suffix" /> is less than or equal to the length of <paramref name="source" /> and <paramref name="source" /> ends with <paramref name="suffix" />; otherwise, false.
                </returns>
      <param name="source">
                    The string to search in. 
                </param>
      <param name="suffix">
                    The string to compare with the end of <paramref name="source" />. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                
                    -or- 
                <paramref name="suffix" /> is null. 
                </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)">
      <summary>
                    Determines whether the specified source string ends with the specified suffix using the specified <see cref="T:System.Globalization.CompareOptions" /> value.
                </summary>
      <returns>true if the length of <paramref name="suffix" /> is less than or equal to the length of <paramref name="source" /> and <paramref name="source" /> ends with <paramref name="suffix" />; otherwise, false.
                </returns>
      <param name="source">
                    The string to search in. 
                </param>
      <param name="suffix">
                    The string to compare with the end of <paramref name="source" />. 
                </param>
      <param name="options">
                    The <see cref="T:System.Globalization.CompareOptions" /> value that defines how <paramref name="source" /> and <paramref name="suffix" /> should be compared. <paramref name="options" /> is either the value <see cref="F:System.Globalization.CompareOptions.Ordinal" /> used by itself, or the bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                
                    -or- 
                <paramref name="suffix" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value. 
                </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)">
      <summary>
                    Searches for the specified character and returns the zero-based index of the last occurrence within the entire source string.
                </summary>
      <returns>
                    The zero-based index of the last occurrence of <paramref name="value" /> within the entire <paramref name="source" />, if found; otherwise, -1.
                </returns>
      <param name="source">
                    The string to search. 
                </param>
      <param name="value">
                    The character to locate within <paramref name="source" />. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null. 
                </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)">
      <summary>
                    Searches for the specified character and returns the zero-based index of the last occurrence within the entire source string using the specified <see cref="T:System.Globalization.CompareOptions" /> value.
                </summary>
      <returns>
                    The zero-based index of the last occurrence of <paramref name="value" /> within the entire <paramref name="source" /> using the specified <see cref="T:System.Globalization.CompareOptions" /> value, if found; otherwise, -1.
                </returns>
      <param name="source">
                    The string to search. 
                </param>
      <param name="value">
                    The character to locate within <paramref name="source" />. 
                </param>
      <param name="options">
                    The <see cref="T:System.Globalization.CompareOptions" /> value that defines how <paramref name="source" /> and <paramref name="value" /> should be compared. <paramref name="options" /> is either the value <see cref="F:System.Globalization.CompareOptions.Ordinal" /> used by itself, or the bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value. 
                </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)">
      <summary>
                    Searches for the specified character and returns the zero-based index of the last occurrence within the section of the source string that extends from the beginning of the string to the specified index using the specified <see cref="T:System.Globalization.CompareOptions" /> value.
                </summary>
      <returns>
                    The zero-based index of the last occurrence of <paramref name="value" /> within the section of <paramref name="source" /> that extends from the beginning of <paramref name="source" /> to <paramref name="startIndex" /> using the specified <see cref="T:System.Globalization.CompareOptions" /> value, if found; otherwise, -1.
                </returns>
      <param name="source">
                    The string to search. 
                </param>
      <param name="value">
                    The character to locate within <paramref name="source" />. 
                </param>
      <param name="startIndex">
                    The zero-based starting index of the backward search. 
                </param>
      <param name="options">
                    The <see cref="T:System.Globalization.CompareOptions" /> value that defines how <paramref name="source" /> and <paramref name="value" /> should be compared. <paramref name="options" /> is either the value <see cref="F:System.Globalization.CompareOptions.Ordinal" /> used by itself, or the bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value. 
                </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)">
      <summary>
                    Searches for the specified character and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index.
                </summary>
      <returns>
                    The zero-based index of the last occurrence of <paramref name="value" /> within the section of <paramref name="source" /> that contains the number of elements specified by <paramref name="count" /> and ends at <paramref name="startIndex" />, if found; otherwise, -1.
                </returns>
      <param name="source">
                    The string to search. 
                </param>
      <param name="value">
                    The character to locate within <paramref name="source" />. 
                </param>
      <param name="startIndex">
                    The zero-based starting index of the backward search. 
                </param>
      <param name="count">
                    The number of elements in the section to search. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.
                
                    -or- 
                <paramref name="count" /> is less than zero.
                
                    -or- 
                <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="source" />. 
                </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)">
      <summary>
                    Searches for the specified character and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index using the specified <see cref="T:System.Globalization.CompareOptions" /> value.
                </summary>
      <returns>
                    The zero-based index of the last occurrence of <paramref name="value" /> within the section of <paramref name="source" /> that contains the number of elements specified by <paramref name="count" /> and ends at <paramref name="startIndex" /> using the specified <see cref="T:System.Globalization.CompareOptions" /> value, if found; otherwise, -1.
                </returns>
      <param name="source">
                    The string to search. 
                </param>
      <param name="value">
                    The character to locate within <paramref name="source" />. 
                </param>
      <param name="startIndex">
                    The zero-based starting index of the backward search. 
                </param>
      <param name="count">
                    The number of elements in the section to search. 
                </param>
      <param name="options">
                    The <see cref="T:System.Globalization.CompareOptions" /> value that defines how <paramref name="source" /> and <paramref name="value" /> should be compared. <paramref name="options" /> is either the value <see cref="F:System.Globalization.CompareOptions.Ordinal" /> used by itself, or the bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.
                
                    -or- 
                <paramref name="count" /> is less than zero.
                
                    -or- 
                <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="source" />. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value. 
                </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)">
      <summary>
                    Searches for the specified substring and returns the zero-based index of the last occurrence within the entire source string.
                </summary>
      <returns>
                    The zero-based index of the last occurrence of <paramref name="value" /> within the entire <paramref name="source" />, if found; otherwise, -1.
                </returns>
      <param name="source">
                    The string to search. 
                </param>
      <param name="value">
                    The string to locate within <paramref name="source" />. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                
                    -or- 
                <paramref name="value" /> is null. 
                </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)">
      <summary>
                    Searches for the specified substring and returns the zero-based index of the last occurrence within the entire source string using the specified <see cref="T:System.Globalization.CompareOptions" /> value.
                </summary>
      <returns>
                    The zero-based index of the last occurrence of <paramref name="value" /> within the entire <paramref name="source" /> using the specified <see cref="T:System.Globalization.CompareOptions" /> value, if found; otherwise, -1.
                </returns>
      <param name="source">
                    The string to search. 
                </param>
      <param name="value">
                    The string to locate within <paramref name="source" />. 
                </param>
      <param name="options">
                    The <see cref="T:System.Globalization.CompareOptions" /> value that defines how <paramref name="source" /> and <paramref name="value" /> should be compared. <paramref name="options" /> is either the value <see cref="F:System.Globalization.CompareOptions.Ordinal" /> used by itself, or the bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                
                    -or- 
                <paramref name="value" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value. 
                </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)">
      <summary>
                    Searches for the specified substring and returns the zero-based index of the last occurrence within the section of the source string that extends from the beginning of the string to the specified index using the specified <see cref="T:System.Globalization.CompareOptions" /> value.
                </summary>
      <returns>
                    The zero-based index of the last occurrence of <paramref name="value" /> within the section of <paramref name="source" /> that extends from the beginning of <paramref name="source" /> to <paramref name="startIndex" /> using the specified <see cref="T:System.Globalization.CompareOptions" /> value, if found; otherwise, -1.
                </returns>
      <param name="source">
                    The string to search. 
                </param>
      <param name="value">
                    The string to locate within <paramref name="source" />. 
                </param>
      <param name="startIndex">
                    The zero-based starting index of the backward search. 
                </param>
      <param name="options">
                    The <see cref="T:System.Globalization.CompareOptions" /> value that defines how <paramref name="source" /> and <paramref name="value" /> should be compared. <paramref name="options" /> is either the value <see cref="F:System.Globalization.CompareOptions.Ordinal" /> used by itself, or the bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                
                    -or- 
                <paramref name="value" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value. 
                </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)">
      <summary>
                    Searches for the specified substring and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index.
                </summary>
      <returns>
                    The zero-based index of the last occurrence of <paramref name="value" /> within the section of <paramref name="source" /> that contains the number of elements specified by <paramref name="count" /> and ends at <paramref name="startIndex" />, if found; otherwise, -1.
                </returns>
      <param name="source">
                    The string to search. 
                </param>
      <param name="value">
                    The string to locate within <paramref name="source" />. 
                </param>
      <param name="startIndex">
                    The zero-based starting index of the backward search. 
                </param>
      <param name="count">
                    The number of elements in the section to search. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                
                    -or- 
                <paramref name="value" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.
                
                    -or- 
                <paramref name="count" /> is less than zero.
                
                    -or- 
                <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="source" />. 
                </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)">
      <summary>
                    Searches for the specified substring and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index using the specified <see cref="T:System.Globalization.CompareOptions" /> value.
                </summary>
      <returns>
                    The zero-based index of the last occurrence of <paramref name="value" /> within the section of <paramref name="source" /> that contains the number of elements specified by <paramref name="count" /> and ends at <paramref name="startIndex" /> using the specified <see cref="T:System.Globalization.CompareOptions" /> value, if found; otherwise, -1.
                </returns>
      <param name="source">
                    The string to search. 
                </param>
      <param name="value">
                    The string to locate within <paramref name="source" />. 
                </param>
      <param name="startIndex">
                    The zero-based starting index of the backward search. 
                </param>
      <param name="count">
                    The number of elements in the section to search. 
                </param>
      <param name="options">
                    The <see cref="T:System.Globalization.CompareOptions" /> value that defines how <paramref name="source" /> and <paramref name="value" /> should be compared. <paramref name="options" /> is either the value <see cref="F:System.Globalization.CompareOptions.Ordinal" /> used by itself, or the bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                
                    -or- 
                <paramref name="value" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.
                
                    -or- 
                <paramref name="count" /> is less than zero.
                
                    -or- 
                <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="source" />. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value. 
                </exception>
    </member>
    <member name="P:System.Globalization.CompareInfo.Name">
      <summary>
                    Gets the name of the culture used for sorting operations by this <see cref="T:System.Globalization.CompareInfo" /> object.
                </summary>
      <returns>
                    The name of a culture.
                </returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.ToString">
      <summary>
                    Returns a string that represents the current <see cref="T:System.Globalization.CompareInfo" />.
                </summary>
      <returns>
                    A string that represents the current <see cref="T:System.Globalization.CompareInfo" />.
                </returns>
    </member>
    <member name="T:System.Globalization.CompareOptions">
      <summary>
                    Defines the options to use with a number of string comparison methods.
                </summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.None">
      <summary>
                    Indicates the default option settings for string comparisons.
                </summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.IgnoreCase">
      <summary>
                    Indicates that the string comparison must ignore case.
                </summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.IgnoreNonSpace">
      <summary>
                    Indicates that the string comparison must ignore nonspacing combining characters, such as diacritics. The Unicode Standard defines combining characters as characters that are combined with base characters to produce a new character. Nonspacing combining characters do not occupy a spacing position by themselves when rendered. For more information on nonspacing combining characters, see The Unicode Standard at the Unicode home page.
                </summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.IgnoreSymbols">
      <summary>
                    Indicates that the string comparison must ignore symbols, such as white-space characters, punctuation, currency symbols, the percent sign, mathematical symbols, the ampersand, and so on.
                </summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.IgnoreKanaType">
      <summary>
                    Indicates that the string comparison must ignore the Kana type. Kana type refers to Japanese hiragana and katakana characters, which represent phonetic sounds in the Japanese language. Hiragana is used for native Japanese expressions and words, while katakana is used for words borrowed from other languages, such as "computer" or "Internet". A phonetic sound can be expressed in both hiragana and katakana. If this value is selected, the hiragana character for one sound is considered equal to the katakana character for the same sound.
                </summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.IgnoreWidth">
      <summary>
                    Indicates that the string comparison must ignore the character width. For example, Japanese katakana characters can be written as full-width or half-width. If this value is selected, the katakana characters written as full-width are considered equal to the same characters written as half-width.
                </summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.OrdinalIgnoreCase">
      <summary>
                    String comparison must ignore case, then perform an ordinal comparison. This technique is equivalent to converting the string to uppercase using the invariant culture and then performing an ordinal comparison on the result.
                </summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.StringSort">
      <summary>
                    Indicates that the string comparison must use the string sort algorithm. In a string sort, the hyphen and the apostrophe, as well as other nonalphanumeric symbols, come before alphanumeric characters.
                </summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.Ordinal">
      <summary>
                    Indicates that the string comparison must use the Unicode values of each character, leading to a fast comparison but one that is culture-insensitive. A string starting with "U+xxxx" comes before a string starting with "U+yyyy", if xxxx is less than yyyy. This value cannot be combined with other <see cref="T:System.Globalization.CompareOptions" /> values and must be used alone.
                </summary>
    </member>
    <member name="T:System.Globalization.CultureInfo">
      <summary>
                    Provides information about a specific culture. The information includes the names for the culture, the writing system, the calendar used, the formatting used for numbers and dates, and the order of sorted strings.
                </summary>
    </member>
    <member name="M:System.Globalization.CultureInfo.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Globalization.CultureInfo" /> class based on the culture specified by name.
                </summary>
      <param name="name">
                    A predefined culture name, or the <see cref="P:System.Globalization.CultureInfo.Name" /> property of an existing <see cref="T:System.Globalization.CultureInfo" /> object. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
                    On Windows systems, <paramref name="name" /> is not a valid culture name.
                </exception>
    </member>
    <member name="P:System.Globalization.CultureInfo.Calendar">
      <summary>
                    Gets the default calendar used by the culture.
                </summary>
      <returns>
                    A <see cref="T:System.Globalization.Calendar" /> that represents the default calendar used by the culture.
                </returns>
    </member>
    <member name="M:System.Globalization.CultureInfo.Clone">
      <summary>
                    Creates a copy of the current <see cref="T:System.Globalization.CultureInfo" /> object.
                </summary>
      <returns>
                    A copy of the current <see cref="T:System.Globalization.CultureInfo" /> object.
                </returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.CompareInfo">
      <summary>
                    Gets the <see cref="T:System.Globalization.CompareInfo" /> object that defines how to compare strings for the culture.
                </summary>
      <returns>
                    The <see cref="T:System.Globalization.CompareInfo" /> that defines how to compare strings for the culture.
                </returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.CurrentCulture">
      <summary>
                    Gets the <see cref="T:System.Globalization.CultureInfo" /> object that represents the culture used by the current thread.
                </summary>
      <returns>
                    The object that represents the culture used by the current thread.
                </returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.CurrentUICulture">
      <summary>
                    Gets the <see cref="T:System.Globalization.CultureInfo" /> object that represents the current culture used by the Resource Manager to look up culture-specific resources at run time.
                </summary>
      <returns>
                    The object that represents the current culture used by the Resource Manager to look up culture-specific resources at run time.
                </returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.DateTimeFormat">
      <summary>
                    Gets or sets a <see cref="T:System.Globalization.DateTimeFormatInfo" /> object that defines the culturally appropriate format for converting dates and times to strings.
                </summary>
      <returns>
                    An object that defines the culturally appropriate format for converting dates and times to strings.
                </returns>
      <exception cref="T:System.ArgumentNullException">
                    The property is set to null. 
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> property or any of the <see cref="T:System.Globalization.DateTimeFormatInfo" /> properties is set, and the <see cref="T:System.Globalization.CultureInfo" /> is read-only. 
                </exception>
    </member>
    <member name="P:System.Globalization.CultureInfo.DisplayName">
      <summary>
                    Gets the culture name in the format "&lt;languagefull&gt; (&lt;country/regionfull&gt;)" in the language of the localized version of .NET Framework.
                </summary>
      <returns>
                    The culture name in the format "&lt;languagefull&gt; (&lt;country/regionfull&gt;)" in the language of the localized version of .NET Framework, where &lt;languagefull&gt; is the full name of the language and &lt;country/regionfull&gt; is the full name of the country/region.
                </returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.EnglishName">
      <summary>
                    Gets the culture name in the format "&lt;languagefull&gt; (&lt;country/regionfull&gt;)" in English.
                </summary>
      <returns>
                    The culture name in the format "&lt;languagefull&gt; (&lt;country/regionfull&gt;)" in English, where &lt;languagefull&gt; is the full name of the language and &lt;country/regionfull&gt; is the full name of the country/region.
                </returns>
    </member>
    <member name="M:System.Globalization.CultureInfo.Equals(System.Object)">
      <summary>
                    Determines whether the specified object is the same culture as this <see cref="T:System.Globalization.CultureInfo" /> object.
                </summary>
      <returns>true if <paramref name="value" /> is the same culture as the current <see cref="T:System.Globalization.CultureInfo" />; otherwise, false.
                </returns>
      <param name="value">
                    The object to compare with this <see cref="T:System.Globalization.CultureInfo" /> object. 
                </param>
    </member>
    <member name="M:System.Globalization.CultureInfo.GetFormat(System.Type)">
      <summary>
                    Gets an object that defines how to format the specified type.
                </summary>
      <returns>
                    The value of the <see cref="P:System.Globalization.CultureInfo.NumberFormat" /> property, if <paramref name="formatType" /> is a <see cref="T:System.Type" /> object that represents the <see cref="T:System.Globalization.NumberFormatInfo" /> class. This value is a <see cref="T:System.Globalization.NumberFormatInfo" /> object that contains numeric formatting information for this <see cref="T:System.Globalization.CultureInfo" /> object, 
                
                    -or- 
                
                    The value of the <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> property, if <paramref name="formatType" /> is a <see cref="T:System.Type" /> object that represents the <see cref="T:System.Globalization.DateTimeFormatInfo" /> class. This value is a <see cref="T:System.Globalization.DateTimeFormatInfo" /> object that contains date and time formatting information for this <see cref="T:System.Globalization.CultureInfo" /> object, 
                
                    -or- 
                null, if <paramref name="formatType" /> is any other object.
                </returns>
      <param name="formatType">
                    The type to get a formatting object for. This method supports only the <see cref="T:System.Globalization.NumberFormatInfo" /> and <see cref="T:System.Globalization.DateTimeFormatInfo" /> types. 
                </param>
    </member>
    <member name="M:System.Globalization.CultureInfo.GetHashCode">
      <summary>
                    Serves as a hash function for the current <see cref="T:System.Globalization.CultureInfo" />, suitable for hashing algorithms and data structures, such as a hash table.
                </summary>
      <returns>
                    A hash code for the current <see cref="T:System.Globalization.CultureInfo" />.
                </returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.InvariantCulture">
      <summary>
                    Gets the <see cref="T:System.Globalization.CultureInfo" /> that is culture-independent (invariant).
                </summary>
      <returns>
                    The <see cref="T:System.Globalization.CultureInfo" /> that is culture-independent (invariant).
                </returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.IsNeutralCulture">
      <summary>
                    Gets a value indicating whether the current <see cref="T:System.Globalization.CultureInfo" /> object represents a neutral culture.
                </summary>
      <returns>true if the current <see cref="T:System.Globalization.CultureInfo" /> object represents a neutral culture; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.IsReadOnly">
      <summary>
                    Gets a value indicating whether the current <see cref="T:System.Globalization.CultureInfo" /> object is read-only.
                </summary>
      <returns>true if the current <see cref="T:System.Globalization.CultureInfo" /> object is read-only; otherwise, false. The default is false.
                </returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.Name">
      <summary>
                    Gets the culture name in the format "&lt;languagecode2&gt;-&lt;country/regioncode2&gt;".
                </summary>
      <returns>
                    The culture name in the format "&lt;languagecode2&gt;-&lt;country/regioncode2&gt;", where &lt;languagecode2&gt; is a lowercase two-letter code derived from ISO 639-1 and &lt;country/regioncode2&gt; is an uppercase two-letter code derived from ISO 3166.
                </returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.NativeName">
      <summary>
                    Gets the culture's native name, which consists of the language, the country/region, and the optional script, that the culture is set to display.
                </summary>
      <returns>
                    The culture's native name. which consists of the full name of the language, the full name of the country/region, and the optional script. The format is discussed in the description of the <see cref="T:System.Globalization.CultureInfo" /> class.
                </returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.NumberFormat">
      <summary>
                    Gets or sets a <see cref="T:System.Globalization.NumberFormatInfo" /> object that defines the culturally appropriate format for converting numbers, currency values, and percentages to strings.
                </summary>
      <returns>
                    An object that defines the culturally appropriate format for outputting numbers, currency values, and percentages.
                </returns>
      <exception cref="T:System.ArgumentNullException">
                    The property is being set to null. 
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="P:System.Globalization.CultureInfo.NumberFormat" /> property or any of the <see cref="T:System.Globalization.NumberFormatInfo" /> properties is being set, and the <see cref="T:System.Globalization.CultureInfo" /> is read-only. 
                </exception>
    </member>
    <member name="P:System.Globalization.CultureInfo.OptionalCalendars">
      <summary>
                    Gets the list of calendars that can be used by this culture.
                </summary>
      <returns>
                    An array that represents the calendars that can be used by the culture represented by this <see cref="T:System.Globalization.CultureInfo" /> object.
                </returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.Parent">
      <summary>
                    Gets the <see cref="T:System.Globalization.CultureInfo" /> that represents the parent culture of the current <see cref="T:System.Globalization.CultureInfo" />.
                </summary>
      <returns>
                    The <see cref="T:System.Globalization.CultureInfo" /> that represents the parent culture of the current <see cref="T:System.Globalization.CultureInfo" />.
                </returns>
    </member>
    <member name="M:System.Globalization.CultureInfo.ReadOnly(System.Globalization.CultureInfo)">
      <summary>
                    Returns a read-only wrapper around the specified <see cref="T:System.Globalization.CultureInfo" /> object.
                </summary>
      <returns>
                    A read-only <see cref="T:System.Globalization.CultureInfo" /> wrapper around <paramref name="ci" />.
                </returns>
      <param name="ci">
                    The <see cref="T:System.Globalization.CultureInfo" /> object to wrap. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ci" /> is null. 
                </exception>
    </member>
    <member name="P:System.Globalization.CultureInfo.TextInfo">
      <summary>
                    Gets the <see cref="T:System.Globalization.TextInfo" /> object that defines the writing system associated with the culture.
                </summary>
      <returns>
                    The <see cref="T:System.Globalization.TextInfo" /> object that defines the writing system associated with the culture.
                </returns>
    </member>
    <member name="M:System.Globalization.CultureInfo.ToString">
      <summary>
                    Returns a string containing the name of the current <see cref="T:System.Globalization.CultureInfo" /> object in the format "&lt;languagecode2&gt;-&lt;country/regioncode2&gt;".
                </summary>
      <returns>
                    A string containing the name of the current <see cref="T:System.Globalization.CultureInfo" />.
                </returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName">
      <summary>
                    Gets the ISO 639-1 two-letter code for the language of the current <see cref="T:System.Globalization.CultureInfo" />.
                </summary>
      <returns>
                    The ISO 639-1 two-letter code for the language of the current <see cref="T:System.Globalization.CultureInfo" /> object.
                </returns>
    </member>
    <member name="T:System.Globalization.DateTimeFormatInfo">
      <summary>
                    Defines how <see cref="T:System.DateTime" /> values are formatted and displayed, depending on the culture.
                </summary>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.#ctor">
      <summary>
                    Initializes a new writable instance of the <see cref="T:System.Globalization.DateTimeFormatInfo" /> class that is culture-independent (invariant).
                </summary>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames">
      <summary>
                    Gets or sets a one-dimensional array of type <see cref="T:System.String" /> containing the culture-specific abbreviated names of the days of the week.
                </summary>
      <returns>
                    A one-dimensional array of type <see cref="T:System.String" /> containing the culture-specific abbreviated names of the days of the week. The array for <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> contains "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", and "Sat".
                </returns>
      <exception cref="T:System.ArgumentNullException">
                    An attempt was made to set the property to null. 
                </exception>
      <exception cref="T:System.ArgumentException">
                    An attempt was made to set the property to a multidimensional array or to a single-dimensional array with a length that is not exactly 7. 
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only. 
                </exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames">
      <summary>
                    Gets or sets a string array of abbreviated month names associated with the current <see cref="T:System.Globalization.DateTimeFormatInfo" /> object.
                </summary>
      <returns>
                    A string array of abbreviated month names.
                </returns>
      <exception cref="T:System.ArgumentNullException">
                    In a set operation, the value array or one of the elements of the value array is null.
                </exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames">
      <summary>
                    Gets or sets a one-dimensional array of type <see cref="T:System.String" /> containing the culture-specific abbreviated names of the months.
                </summary>
      <returns>
                    A one-dimensional array of type <see cref="T:System.String" /> containing the culture-specific abbreviated names of the months. In a 12-month calendar, the 13th element of the array is an empty string. The array for <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> contains "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", and "".
                </returns>
      <exception cref="T:System.ArgumentNullException">
                    An attempt was made to set the property to null. 
                </exception>
      <exception cref="T:System.ArgumentException">
                    An attempt was made to set the property to a multidimensional array or to a single-dimensional array with a length that is not exactly 13. 
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only. 
                </exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.AMDesignator">
      <summary>
                    Gets or sets the string designator for hours that are "ante meridiem" (before noon).
                </summary>
      <returns>
                    The string designator for hours that are "ante meridiem" (before noon). The default for <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> is "AM".
                </returns>
      <exception cref="T:System.ArgumentNullException">
                    An attempt was made to set the property to null. 
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only. 
                </exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.Calendar">
      <summary>
                    Gets or sets the calendar to use for the current culture.
                </summary>
      <returns>
                    The <see cref="T:System.Globalization.Calendar" /> indicating the calendar to use for the current culture. The default for <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> is the <see cref="T:System.Globalization.GregorianCalendar" />.
                </returns>
      <exception cref="T:System.ArgumentNullException">
                    An attempt was made to set the property to null. 
                </exception>
      <exception cref="T:System.ArgumentException">
                    An attempt was made to set the property to a <see cref="T:System.Globalization.Calendar" /> that is not valid for the current culture. 
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only. 
                </exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.CalendarWeekRule">
      <summary>
                    Gets or sets a value that specifies which rule is used to determine the first calendar week of the year.
                </summary>
      <returns>
                    A <see cref="T:System.Globalization.CalendarWeekRule" /> value that determines the first calendar week of the year. The default for <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> is <see cref="F:System.Globalization.CalendarWeekRule.FirstDay" />.
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    An attempt was made to set the property to a value that is not a valid <see cref="T:System.Globalization.CalendarWeekRule" /> value. 
                </exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.Clone">
      <summary>
                    Creates a shallow copy of the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object.
                </summary>
      <returns>
                    A new <see cref="T:System.Globalization.DateTimeFormatInfo" /> object copied from the original <see cref="T:System.Globalization.DateTimeFormatInfo" /> object.
                </returns>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.CurrentInfo">
      <summary>
                    Gets a read-only <see cref="T:System.Globalization.DateTimeFormatInfo" /> object that represents the date and time formatting information for the current culture.
                </summary>
      <returns>
                    A read-only <see cref="T:System.Globalization.DateTimeFormatInfo" /> object based on the <see cref="T:System.Globalization.CultureInfo" /> object for the current thread. It is identical to retrieving the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object returned by the CultureInfo.CurrentCulture.DateTimeFormat property.
                </returns>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.DayNames">
      <summary>
                    Gets or sets a one-dimensional array of type <see cref="T:System.String" /> containing the culture-specific full names of the days of the week.
                </summary>
      <returns>
                    A one-dimensional array of type <see cref="T:System.String" /> containing the culture-specific full names of the days of the week. The array for <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> contains "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", and "Saturday".
                </returns>
      <exception cref="T:System.ArgumentNullException">
                    An attempt was made to set the property to null. 
                </exception>
      <exception cref="T:System.ArgumentException">
                    An attempt was made to set the property to a multidimensional array or to a single-dimensional array with a length that is not exactly 7. 
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only. 
                </exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.FirstDayOfWeek">
      <summary>
                    Gets or sets the first day of the week.
                </summary>
      <returns>
                    A <see cref="T:System.DayOfWeek" /> value representing the first day of the week. The default for <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> is <see cref="F:System.DayOfWeek.Sunday" />.
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    An attempt was made to set the property to a value that is not a valid <see cref="T:System.DayOfWeek" /> value. 
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only. 
                </exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.FullDateTimePattern">
      <summary>
                    Gets or sets the custom format string for a long date and long time value, which is associated with the "F" standard date and time format string.
                </summary>
      <returns>
                    The custom format string for a long date and long time value, which is associated with the "F" standard date and time format string.
                </returns>
      <exception cref="T:System.ArgumentNullException">
                    An attempt was made to set the property to null. 
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only. 
                </exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedDayName(System.DayOfWeek)">
      <summary>
                    Returns the culture-specific abbreviated name of the specified day of the week based on the culture associated with the current <see cref="T:System.Globalization.DateTimeFormatInfo" /> object.
                </summary>
      <returns>
                    The culture-specific abbreviated name of the day of the week represented by <paramref name="dayofweek" />.
                </returns>
      <param name="dayofweek">
                    A <see cref="T:System.DayOfWeek" /> value. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dayofweek" /> is not a valid <see cref="T:System.DayOfWeek" /> value. 
                </exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName(System.Int32)">
      <summary>
                    Returns the string containing the abbreviated name of the specified era, if an abbreviation exists.
                </summary>
      <returns>
                    A string containing the abbreviated name of the specified era, if an abbreviation exists.
                
                    -or- 
                
                    A string containing the full name of the era, if an abbreviation does not exist.
                </returns>
      <param name="era">
                    The integer representing the era. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> does not represent a valid era in the calendar specified in the <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> property. 
                </exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedMonthName(System.Int32)">
      <summary>
                    Returns the culture-specific abbreviated name of the specified month based on the culture associated with the current <see cref="T:System.Globalization.DateTimeFormatInfo" /> object.
                </summary>
      <returns>
                    The culture-specific abbreviated name of the month represented by <paramref name="month" />.
                </returns>
      <param name="month">
                    An integer from 1 through 13 representing the name of the month to retrieve. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="month" /> is less than 1 or greater than 13. 
                </exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetDayName(System.DayOfWeek)">
      <summary>
                    Returns the culture-specific full name of the specified day of the week based on the culture associated with the current <see cref="T:System.Globalization.DateTimeFormatInfo" /> object.
                </summary>
      <returns>
                    The culture-specific full name of the day of the week represented by <paramref name="dayofweek" />.
                </returns>
      <param name="dayofweek">
                    A <see cref="T:System.DayOfWeek" /> value. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dayofweek" /> is not a valid <see cref="T:System.DayOfWeek" /> value. 
                </exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetEra(System.String)">
      <summary>
                    Returns the integer representing the specified era name.
                </summary>
      <returns>
                    The integer representing the era, if <paramref name="eraName" /> is valid; otherwise, -1.
                </returns>
      <param name="eraName">
                    The string containing the name of the era. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="eraName" /> is null. 
                </exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)">
      <summary>
                    Returns the string containing the name of the specified era.
                </summary>
      <returns>
                    A string containing the name of the era.
                </returns>
      <param name="era">
                    The integer representing the era. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> does not represent a valid era in the calendar specified in the <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> property. 
                </exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetFormat(System.Type)">
      <summary>
                    Returns an object of the specified type that provides a <see cref="T:System.DateTime" /> formatting service.
                </summary>
      <returns>
                    The current <see cref="T:System.Globalization.DateTimeFormatInfo" /> object, if the type of <paramref name="formatType" /> is <see cref="T:System.Globalization.DateTimeFormatInfo" />; otherwise, null.
                </returns>
      <param name="formatType">
                    The <see cref="T:System.Type" /> of the required formatting service. 
                </param>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetInstance(System.IFormatProvider)">
      <summary>
                    Returns the <see cref="T:System.Globalization.DateTimeFormatInfo" /> associated with the specified <see cref="T:System.IFormatProvider" />.
                </summary>
      <returns>
                    A <see cref="T:System.Globalization.DateTimeFormatInfo" /> associated with the specified <see cref="T:System.IFormatProvider" />.
                </returns>
      <param name="provider">
                    The <see cref="T:System.IFormatProvider" /> that gets the <see cref="T:System.Globalization.DateTimeFormatInfo" />.
                
                    -or- 
                null to get <see cref="P:System.Globalization.DateTimeFormatInfo.CurrentInfo" />. 
                </param>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetMonthName(System.Int32)">
      <summary>
                    Returns the culture-specific full name of the specified month based on the culture associated with the current <see cref="T:System.Globalization.DateTimeFormatInfo" /> object.
                </summary>
      <returns>
                    The culture-specific full name of the month represented by <paramref name="month" />.
                </returns>
      <param name="month">
                    An integer from 1 through 13 representing the name of the month to retrieve. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="month" /> is less than 1 or greater than 13. 
                </exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.InvariantInfo">
      <summary>
                    Gets the default read-only <see cref="T:System.Globalization.DateTimeFormatInfo" /> that is culture-independent (invariant).
                </summary>
      <returns>
                    The default read-only <see cref="T:System.Globalization.DateTimeFormatInfo" /> object that is culture-independent (invariant). It is identical to the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object returned by the CultureInfo.InvariantCulture.DateTimeFormat property.
                </returns>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.IsReadOnly">
      <summary>
                    Gets a value indicating whether the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only.
                </summary>
      <returns>true if the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.LongDatePattern">
      <summary>
                    Gets or sets the custom format string for a long date value, which is associated with the "D" standard date and time format string.
                </summary>
      <returns>
                    The custom format string for a long date value, which is associated with the "D" standard format string.
                </returns>
      <exception cref="T:System.ArgumentNullException">
                    An attempt was made to set the property to null. 
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only. 
                </exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.LongTimePattern">
      <summary>
                    Gets or sets the custom format string for a long time value, which is associated with the "T" standard format string.
                </summary>
      <returns>
                    The custom format string for a long time value, which is associated with the "T" standard format string.
                </returns>
      <exception cref="T:System.ArgumentNullException">
                    An attempt was made to set the property to null. 
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only. 
                </exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.MonthDayPattern">
      <summary>
                    Gets or sets the custom format string for a month and day value, which is associated with the "m" and "M" standard date and time format strings.
                </summary>
      <returns>
                    The custom format string for a month and day value, which is associated with the "m" and "M" standard format strings.
                </returns>
      <exception cref="T:System.ArgumentNullException">
                    An attempt was made to set the property to null. 
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only. 
                </exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.MonthGenitiveNames">
      <summary>
                    Gets or sets a string array of month names associated with the current <see cref="T:System.Globalization.DateTimeFormatInfo" /> object.
                </summary>
      <returns>
                    A string array of month names.
                </returns>
      <exception cref="T:System.ArgumentNullException">
                    In a set operation, the value array or one of the elements of the value array is null.
                </exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.MonthNames">
      <summary>
                    Gets or sets a one-dimensional array of type <see cref="T:System.String" /> containing the culture-specific full names of the months.
                </summary>
      <returns>
                    A one-dimensional array of type <see cref="T:System.String" /> containing the culture-specific full names of the months. In a 12-month calendar, the 13th element of the array is an empty string. The array for <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> contains "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", and "".
                </returns>
      <exception cref="T:System.ArgumentNullException">
                    An attempt was made to set the property to null. 
                </exception>
      <exception cref="T:System.ArgumentException">
                    An attempt was made to set the property to a multidimensional array or to a single-dimensional array with a length that is not exactly 13. 
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only. 
                </exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.PMDesignator">
      <summary>
                    Gets or sets the string designator for hours that are "post meridiem" (after noon).
                </summary>
      <returns>
                    The string designator for hours that are "post meridiem" (after noon). The default for <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> is "PM".
                </returns>
      <exception cref="T:System.ArgumentNullException">
                    An attempt was made to set the property to null. 
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only. 
                </exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.ReadOnly(System.Globalization.DateTimeFormatInfo)">
      <summary>
                    Returns a read-only <see cref="T:System.Globalization.DateTimeFormatInfo" /> wrapper.
                </summary>
      <returns>
                    A read-only <see cref="T:System.Globalization.DateTimeFormatInfo" /> wrapper around <paramref name="dtfi" />.
                </returns>
      <param name="dtfi">
                    The <see cref="T:System.Globalization.DateTimeFormatInfo" /> to wrap. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dtfi" /> is null. 
                </exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.RFC1123Pattern">
      <summary>
                    Gets the custom date and time format string that is based on the Internet Engineering Task Force (IETF) Request for Comments (RFC) 1123 specification and is associated with the "r" and "R" standard format strings.
                </summary>
      <returns>
                    The custom date and time format string that is based on the IETF RFC 1123 specification. The string is invariant; it does not vary by cultures.
                </returns>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.ShortDatePattern">
      <summary>
                    Gets or sets the custom date and time format string for a short date value, which is associated with the "d" standard format string.
                </summary>
      <returns>
                    The custom format string for a short date value, which is associated with the "d" standard format string.
                </returns>
      <exception cref="T:System.ArgumentNullException">
                    An attempt was made to set the property to null. 
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only. 
                </exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.ShortestDayNames">
      <summary>
                    Gets or sets a string array of the shortest unique abbreviated day names associated with the current <see cref="T:System.Globalization.DateTimeFormatInfo" /> object.
                </summary>
      <returns>
                    A string array of day names.
                </returns>
      <exception cref="T:System.ArgumentNullException">
                    In a set operation, the value array or one of the elements of the value array is null.
                </exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.ShortTimePattern">
      <summary>
                    Gets or sets the custom date and time format string for a short time value, which is associated with the "t" standard format string.
                </summary>
      <returns>
                    The custom format string for a short time value, which is associated with the "t" standard format string.
                </returns>
      <exception cref="T:System.ArgumentNullException">
                    An attempt was made to set the property to null. 
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only. 
                </exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern">
      <summary>
                    Gets the custom date and time format string for a sortable date and time value, which is associated with the "s" standard format string.
                </summary>
      <returns>
                    The custom format string for a sortable date and time value, which is associated with the "s" standard format string.
                </returns>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern">
      <summary>
                    Gets the custom date and time format string for a universal sortable date and time value, which is associated with the "u" standard format string.
                </summary>
      <returns>
                    The custom format string for a universal sortable date and time value, which is associated with the "u" standard format string.
                </returns>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.YearMonthPattern">
      <summary>
                    Gets or sets the custom date and time format string for a year and month value, which is associated with the "y" and "Y" standard format strings.
                </summary>
      <returns>
                    The custom format string for a year and month value, which is associated with the "y" and "Y" format strings.
                </returns>
      <exception cref="T:System.ArgumentNullException">
                    An attempt was made to set the property to null. 
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only. 
                </exception>
    </member>
    <member name="T:System.Globalization.DateTimeStyles">
      <summary>
                    Defines the formatting options that customize string parsing for a number of <see cref="T:System.DateTime" /> and <see cref="T:System.DateTimeOffset" /> parsing methods.
                </summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.None">
      <summary>
                    Default formatting options must be used. This value represents the default style for <see cref="M:System.DateTime.Parse(System.String)" />, <see cref="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" />, and <see cref="M:System.DateTime.TryParse(System.String,System.DateTime@)" />.
                </summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AllowLeadingWhite">
      <summary>
                    Leading white-space characters must be ignored during parsing, except if they occur in the <see cref="T:System.Globalization.DateTimeFormatInfo" /> format patterns.
                </summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AllowTrailingWhite">
      <summary>
                    Trailing white-space characters must be ignored during parsing, except if they occur in the <see cref="T:System.Globalization.DateTimeFormatInfo" /> format patterns.
                </summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AllowInnerWhite">
      <summary>
                    Extra white-space characters in the middle of the string must be ignored during parsing, except if they occur in the <see cref="T:System.Globalization.DateTimeFormatInfo" /> format patterns.
                </summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AllowWhiteSpaces">
      <summary>
                    Extra white-space characters anywhere in the string must be ignored during parsing, except if they occur in the <see cref="T:System.Globalization.DateTimeFormatInfo" /> format patterns. This value is a combination of the <see cref="F:System.Globalization.DateTimeStyles.AllowLeadingWhite" />, <see cref="F:System.Globalization.DateTimeStyles.AllowTrailingWhite" />, and <see cref="F:System.Globalization.DateTimeStyles.AllowInnerWhite" /> values.
                </summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault">
      <summary>
                    If the parsed string contains only the time and not the date, the parsing methods assume the Gregorian date with year = 1, month = 1, and day = 1. If this value is not used, the current date is assumed.
                </summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AdjustToUniversal">
      <summary>
                    Date and time are returned as a Coordinated Universal Time (UTC). If the input string denotes a local time, through a time zone specifier or <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" />, the date and time are converted from the local time to UTC. If the input string denotes a UTC time, through a time zone specifier or <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />, no conversion occurs. If the input string does not denote a local or UTC time, no conversion occurs and the resulting <see cref="P:System.DateTime.Kind" /> property is <see cref="F:System.DateTimeKind.Unspecified" />. 
                </summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AssumeLocal">
      <summary>
                    If no time zone is specified in the parsed string, the string is assumed to denote a local time. 
                </summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AssumeUniversal">
      <summary>
                    If no time zone is specified in the parsed string, the string is assumed to denote a UTC. 
                </summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.RoundtripKind">
      <summary>
                    For parsing operations using <see cref="T:System.DateTime" /> methods on strings that contain time zone information, tries to prevent the conversion to a local <see cref="T:System.DateTime" /> value with its <see cref="P:System.DateTime.Kind" /> property set to <see cref="F:System.DateTimeKind.Local" />. For <see cref="T:System.DateTimeOffset" /> values, this flag has no effect.
                </summary>
    </member>
    <member name="T:System.Globalization.GregorianCalendar">
      <summary>
                    Represents the Gregorian calendar.
                </summary>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Globalization.GregorianCalendar" /> class using the default <see cref="T:System.Globalization.GregorianCalendarTypes" /> value.
                </summary>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.#ctor(System.Globalization.GregorianCalendarTypes)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Globalization.GregorianCalendar" /> class using the specified <see cref="T:System.Globalization.GregorianCalendarTypes" /> value.
                </summary>
      <param name="type">
                    The <see cref="T:System.Globalization.GregorianCalendarTypes" /> value that denotes which language version of the calendar to create. 
                </param>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>
                    Returns a <see cref="T:System.DateTime" /> that is the specified number of months away from the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    The <see cref="T:System.DateTime" /> that results from adding the specified number of months to the specified <see cref="T:System.DateTime" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to which to add months. 
                </param>
      <param name="months">
                    The number of months to add. 
                </param>
      <exception cref="T:System.ArgumentException">
                    The resulting <see cref="T:System.DateTime" /> is outside the supported range. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> is less than -120000.
                
                    -or- 
                <paramref name="months" /> is greater than 120000. 
                </exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>
                    Returns a <see cref="T:System.DateTime" /> that is the specified number of years away from the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    The <see cref="T:System.DateTime" /> that results from adding the specified number of years to the specified <see cref="T:System.DateTime" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to which to add years. 
                </param>
      <param name="years">
                    The number of years to add. 
                </param>
      <exception cref="T:System.ArgumentException">
                    The resulting <see cref="T:System.DateTime" /> is outside the supported range. 
                </exception>
    </member>
    <member name="F:System.Globalization.GregorianCalendar.ADEra">
      <summary>
                    Represents the current era. This field is constant.
                </summary>
    </member>
    <member name="P:System.Globalization.GregorianCalendar.CalendarType">
      <summary>
                    Gets or sets the <see cref="T:System.Globalization.GregorianCalendarTypes" /> value that denotes the language version of the current <see cref="T:System.Globalization.GregorianCalendar" />.
                </summary>
      <returns>
                    A <see cref="T:System.Globalization.GregorianCalendarTypes" /> value that denotes the language version of the current <see cref="T:System.Globalization.GregorianCalendar" />.
                </returns>
    </member>
    <member name="P:System.Globalization.GregorianCalendar.Eras">
      <summary>
                    Gets the list of eras in the <see cref="T:System.Globalization.GregorianCalendar" />.
                </summary>
      <returns>
                    An array of integers that represents the eras in the <see cref="T:System.Globalization.GregorianCalendar" />.
                </returns>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetDayOfMonth(System.DateTime)">
      <summary>
                    Returns the day of the month in the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    An integer from 1 to 31 that represents the day of the month in <paramref name="time" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. 
                </param>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetDayOfWeek(System.DateTime)">
      <summary>
                    Returns the day of the week in the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    A <see cref="T:System.DayOfWeek" /> value that represents the day of the week in <paramref name="time" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. 
                </param>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetDayOfYear(System.DateTime)">
      <summary>
                    Returns the day of the year in the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    An integer from 1 to 366 that represents the day of the year in <paramref name="time" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. 
                </param>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>
                    Returns the number of days in the specified month in the specified year in the specified era.
                </summary>
      <returns>
                    The number of days in the specified month in the specified year in the specified era.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="month">
                    An integer from 1 to 12 that represents the month. 
                </param>
      <param name="era">
                    An integer that represents the era. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="year" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="month" /> is outside the range supported by the calendar. 
                </exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>
                    Returns the number of days in the specified year in the specified era.
                </summary>
      <returns>
                    The number of days in the specified year in the specified era.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="era">
                    An integer that represents the era. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="year" /> is outside the range supported by the calendar.
                </exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetEra(System.DateTime)">
      <summary>
                    Returns the era of a specified <see cref="T:System.DateTime" /> value.
                </summary>
      <returns>
                    An integer that represents the era of <paramref name="time" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. 
                </param>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>
                    Calculates the leap month for a specified year and era.
                </summary>
      <returns>
                    The return value is always 0 because the <see cref="T:System.Globalization.GregorianCalendar" /> type does not support the notion of a leap month.
                </returns>
      <param name="year">
                    A year.
                </param>
      <param name="era">
                    An era. Specify either <see cref="F:System.Globalization.GregorianCalendar.ADEra" /> or <see cref="F:System.Globalization.Calendar.CurrentEra" />.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than the Gregorian calendar year 1 or greater than the Gregorian calendar year 9999.
                
                    -or-
                <paramref name="era" /> is not <see cref="F:System.Globalization.GregorianCalendar.ADEra" /> or <see cref="F:System.Globalization.Calendar.CurrentEra" />.
                </exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetMonth(System.DateTime)">
      <summary>
                    Returns the month in the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    An integer from 1 to 12 that represents the month in <paramref name="time" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. 
                </param>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>
                    Returns the number of months in the specified year in the specified era.
                </summary>
      <returns>
                    The number of months in the specified year in the specified era.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="era">
                    An integer that represents the era. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="year" /> is outside the range supported by the calendar. 
                </exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)">
      <summary>
                    Returns the week of the year that includes the date in the specified <see cref="T:System.DateTime" /> object.
                </summary>
      <returns>
                    A 1-based integer that represents the week of the year that includes the date in the <paramref name="time" /> parameter.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> object to read. 
                </param>
      <param name="rule">
                    One of the <see cref="T:System.Globalization.CalendarWeekRule" /> values that defines a calendar week. 
                </param>
      <param name="firstDayOfWeek">
                    One of the <see cref="T:System.DayOfWeek" /> values that represents the first day of the week. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="firstDayOfWeek" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="rule" /> is not a valid <see cref="T:System.Globalization.CalendarWeekRule" /> value. 
                </exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetYear(System.DateTime)">
      <summary>
                    Returns the year in the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    An integer that represents the year in <paramref name="time" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. 
                </param>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
                    Determines whether the specified date in the specified era is a leap day.
                </summary>
      <returns>true if the specified day is a leap day; otherwise, false.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="month">
                    An integer from 1 to 12 that represents the month. 
                </param>
      <param name="day">
                    An integer from 1 to 31 that represents the day. 
                </param>
      <param name="era">
                    An integer that represents the era. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> is outside the range supported by the calendar. 
                
                    -or- 
                <paramref name="year" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="month" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="day" /> is outside the range supported by the calendar. 
                </exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>
                    Determines whether the specified month in the specified year in the specified era is a leap month.
                </summary>
      <returns>
                    This method always returns false, unless overridden by a derived class.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="month">
                    An integer from 1 to 12 that represents the month. 
                </param>
      <param name="era">
                    An integer that represents the era. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="year" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="month" /> is outside the range supported by the calendar. 
                </exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>
                    Determines whether the specified year in the specified era is a leap year.
                </summary>
      <returns>true if the specified year is a leap year; otherwise, false.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="era">
                    An integer that represents the era. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="year" /> is outside the range supported by the calendar. 
                </exception>
    </member>
    <member name="P:System.Globalization.GregorianCalendar.MaxSupportedDateTime">
      <summary>
                    Gets the latest date and time supported by the <see cref="T:System.Globalization.GregorianCalendar" /> type.
                </summary>
      <returns>
                    The latest date and time supported by the <see cref="T:System.Globalization.GregorianCalendar" /> type, which is the last moment of December 31, 9999 C.E. and is equivalent to <see cref="F:System.DateTime.MaxValue" />.
                </returns>
    </member>
    <member name="P:System.Globalization.GregorianCalendar.MinSupportedDateTime">
      <summary>
                    Gets the earliest date and time supported by the <see cref="T:System.Globalization.GregorianCalendar" /> type.
                </summary>
      <returns>
                    The earliest date and time supported by the <see cref="T:System.Globalization.GregorianCalendar" /> type, which is the first moment of January 1, 0001 C.E. and is equivalent to <see cref="F:System.DateTime.MinValue" />.
                </returns>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
                    Returns a <see cref="T:System.DateTime" /> that is set to the specified date and time in the specified era.
                </summary>
      <returns>
                    The <see cref="T:System.DateTime" /> that is set to the specified date and time in the current era.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="month">
                    An integer from 1 to 12 that represents the month. 
                </param>
      <param name="day">
                    An integer from 1 to 31 that represents the day. 
                </param>
      <param name="hour">
                    An integer from 0 to 23 that represents the hour. 
                </param>
      <param name="minute">
                    An integer from 0 to 59 that represents the minute. 
                </param>
      <param name="second">
                    An integer from 0 to 59 that represents the second. 
                </param>
      <param name="millisecond">
                    An integer from 0 to 999 that represents the millisecond. 
                </param>
      <param name="era">
                    An integer that represents the era. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="year" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="month" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="day" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="hour" /> is less than zero or greater than 23.
                
                    -or- 
                <paramref name="minute" /> is less than zero or greater than 59.
                
                    -or- 
                <paramref name="second" /> is less than zero or greater than 59.
                
                    -or- 
                <paramref name="millisecond" /> is less than zero or greater than 999. 
                </exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.ToFourDigitYear(System.Int32)">
      <summary>
                    Converts the specified year to a four-digit year by using the <see cref="P:System.Globalization.GregorianCalendar.TwoDigitYearMax" /> property to determine the appropriate century.
                </summary>
      <returns>
                    An integer that contains the four-digit representation of <paramref name="year" />.
                </returns>
      <param name="year">
                    A two-digit or four-digit integer that represents the year to convert. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar. 
                </exception>
    </member>
    <member name="P:System.Globalization.GregorianCalendar.TwoDigitYearMax">
      <summary>
                    Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.
                </summary>
      <returns>
                    The last year of a 100-year range that can be represented by a 2-digit year.
                </returns>
    </member>
    <member name="T:System.Globalization.GregorianCalendarTypes">
      <summary>
                    Defines the different language versions of the Gregorian calendar.
                </summary>
    </member>
    <member name="F:System.Globalization.GregorianCalendarTypes.Localized">
      <summary>
                    Refers to the localized version of the Gregorian calendar, based on the language of the <see cref="T:System.Globalization.CultureInfo" /> object that uses the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object.
                </summary>
    </member>
    <member name="F:System.Globalization.GregorianCalendarTypes.USEnglish">
      <summary>
                    Refers to the U.S. English version of the Gregorian calendar.
                </summary>
    </member>
    <member name="F:System.Globalization.GregorianCalendarTypes.MiddleEastFrench">
      <summary>
                    Refers to the Middle East French version of the Gregorian calendar.
                </summary>
    </member>
    <member name="F:System.Globalization.GregorianCalendarTypes.Arabic">
      <summary>
                    Refers to the Arabic version of the Gregorian calendar.
                </summary>
    </member>
    <member name="F:System.Globalization.GregorianCalendarTypes.TransliteratedEnglish">
      <summary>
                    Refers to the transliterated English version of the Gregorian calendar.
                </summary>
    </member>
    <member name="F:System.Globalization.GregorianCalendarTypes.TransliteratedFrench">
      <summary>
                    Refers to the transliterated French version of the Gregorian calendar.
                </summary>
    </member>
    <member name="T:System.Globalization.HebrewCalendar">
      <summary>
                    Represents the Hebrew calendar.
                </summary>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Globalization.HebrewCalendar" /> class.
                </summary>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>
                    Returns a <see cref="T:System.DateTime" /> that is the specified number of months away from the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    The <see cref="T:System.DateTime" /> that results from adding the specified number of months to the specified <see cref="T:System.DateTime" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to which to add <paramref name="months" />. 
                </param>
      <param name="months">
                    The number of months to add. 
                </param>
      <exception cref="T:System.ArgumentException">
                    The resulting <see cref="T:System.DateTime" /> is outside the supported range. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> is less than -120,000 or greater than 120,000. 
                </exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>
                    Returns a <see cref="T:System.DateTime" /> that is the specified number of years away from the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    The <see cref="T:System.DateTime" /> that results from adding the specified number of years to the specified <see cref="T:System.DateTime" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to which to add <paramref name="years" />. 
                </param>
      <param name="years">
                    The number of years to add. 
                </param>
      <exception cref="T:System.ArgumentException">
                    The resulting <see cref="T:System.DateTime" /> is outside the supported range. 
                </exception>
    </member>
    <member name="P:System.Globalization.HebrewCalendar.Eras">
      <summary>
                    Gets the list of eras in the <see cref="T:System.Globalization.HebrewCalendar" />.
                </summary>
      <returns>
                    An array of integers that represents the eras in the <see cref="T:System.Globalization.HebrewCalendar" /> type. The return value is always an array containing one element equal to <see cref="F:System.Globalization.Calendar.CurrentEra" />. 
                </returns>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetDayOfMonth(System.DateTime)">
      <summary>
                    Returns the day of the month in the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    An integer from 1 to 30 that represents the day of the month in the specified <see cref="T:System.DateTime" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. 
                </param>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetDayOfWeek(System.DateTime)">
      <summary>
                    Returns the day of the week in the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    A <see cref="T:System.DayOfWeek" /> value that represents the day of the week in the specified <see cref="T:System.DateTime" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. 
                </param>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetDayOfYear(System.DateTime)">
      <summary>
                    Returns the day of the year in the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    An integer from 1 to 385 that represents the day of the year in the specified <see cref="T:System.DateTime" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> is less than <see cref="P:System.Globalization.HebrewCalendar.MinSupportedDateTime" /> or greater than <see cref="P:System.Globalization.HebrewCalendar.MaxSupportedDateTime" />.
                </exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>
                    Returns the number of days in the specified month in the specified year in the specified era.
                </summary>
      <returns>
                    The number of days in the specified month in the specified year in the specified era.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="month">
                    An integer from 1 to 13 that represents the month. 
                </param>
      <param name="era">
                    An integer that represents the era. Specify <see cref="F:System.Globalization.Calendar.CurrentEra" />.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />, <paramref name="month" />, or <paramref name="era" /> is outside the range supported by the current <see cref="T:System.Globalization.HebrewCalendar" /> object. 
                </exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>
                    Returns the number of days in the specified year in the specified era.
                </summary>
      <returns>
                    The number of days in the specified year in the specified era.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="era">
                    An integer that represents the era. Specify <see cref="F:System.Globalization.Calendar.CurrentEra" />.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> or <paramref name="era" /> is outside the range supported by the current <see cref="T:System.Globalization.HebrewCalendar" /> object. 
                </exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetEra(System.DateTime)">
      <summary>
                    Returns the era of a specified <see cref="T:System.DateTime" /> value.
                </summary>
      <returns>
                    An integer that represents the era of the specified <see cref="T:System.DateTime" /> value. The return value is always <see cref="F:System.Globalization.Calendar.CurrentEra" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. 
                </param>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>
                    Calculates the leap month for a specified year and era.
                </summary>
      <returns>
                    A positive integer that indicates the leap month in the specified year and era. The return value is 7 if the <paramref name="year" /> and <paramref name="era" /> parameters specify a leap year, or 0 if the year is not a leap year.
                </returns>
      <param name="year">
                    A year.
                </param>
      <param name="era">
                    An era. Specify <see cref="F:System.Globalization.Calendar.CurrentEra" />.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> is not <see cref="F:System.Globalization.Calendar.CurrentEra" />.
                
                    -or-
                <paramref name="year" /> is less than the Hebrew calendar year 5343 or greater than the Hebrew calendar year 5999.
                </exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetMonth(System.DateTime)">
      <summary>
                    Returns the month in the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    An integer from 1 to 13 that represents the month in the specified <see cref="T:System.DateTime" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> is less than <see cref="P:System.Globalization.HebrewCalendar.MinSupportedDateTime" /> or greater than <see cref="P:System.Globalization.HebrewCalendar.MaxSupportedDateTime" />.
                </exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>
                    Returns the number of months in the specified year in the specified era.
                </summary>
      <returns>
                    The number of months in the specified year in the specified era. The return value is either 12 in a common year, or 13 in a leap year.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="era">
                    An integer that represents the era. Specify <see cref="F:System.Globalization.Calendar.CurrentEra" />.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> or <paramref name="era" /> is outside the range supported by the current <see cref="T:System.Globalization.HebrewCalendar" /> object. 
                </exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetYear(System.DateTime)">
      <summary>
                    Returns the year in the specified <see cref="T:System.DateTime" /> value.
                </summary>
      <returns>
                    An integer that represents the year in the specified <see cref="T:System.DateTime" /> value.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> is outside the range supported by the current <see cref="T:System.Globalization.HebrewCalendar" /> object. 
                </exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
                    Determines whether the specified date in the specified era is a leap day.
                </summary>
      <returns>true if the specified day is a leap day; otherwise, false.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="month">
                    An integer from 1 to 13 that represents the month. 
                </param>
      <param name="day">
                    An integer from 1 to 30 that represents the day. 
                </param>
      <param name="era">
                    An integer that represents the era. Specify <see cref="F:System.Globalization.Calendar.CurrentEra" />.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, or <paramref name="era" /> is outside the range supported by this calendar. 
                </exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>
                    Determines whether the specified month in the specified year in the specified era is a leap month.
                </summary>
      <returns>true if the specified month is a leap month; otherwise, false.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="month">
                    An integer from 1 to 13 that represents the month. 
                </param>
      <param name="era">
                    An integer that represents the era. Specify <see cref="F:System.Globalization.Calendar.CurrentEra" />.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />, <paramref name="month" />, or <paramref name="era" /> is outside the range supported by this calendar. 
                </exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>
                    Determines whether the specified year in the specified era is a leap year.
                </summary>
      <returns>true if the specified year is a leap year; otherwise, false.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="era">
                    An integer that represents the era. Specify <see cref="F:System.Globalization.Calendar.CurrentEra" />.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> or <paramref name="era" /> is outside the range supported by this calendar. 
                </exception>
    </member>
    <member name="P:System.Globalization.HebrewCalendar.MaxSupportedDateTime">
      <summary>
                    Gets the latest date and time supported by the <see cref="T:System.Globalization.HebrewCalendar" /> type.
                </summary>
      <returns>
                    The latest date and time supported by the <see cref="T:System.Globalization.HebrewCalendar" /> type, which is equivalent to the last moment of September, 29, 2239 C.E. in the Gregorian calendar.
                </returns>
    </member>
    <member name="P:System.Globalization.HebrewCalendar.MinSupportedDateTime">
      <summary>
                    Gets the earliest date and time supported by the <see cref="T:System.Globalization.HebrewCalendar" /> type.
                </summary>
      <returns>
                    The earliest date and time supported by the <see cref="T:System.Globalization.HebrewCalendar" /> type, which is equivalent to the first moment of January, 1, 1583 C.E. in the Gregorian calendar.
                </returns>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
                    Returns a <see cref="T:System.DateTime" /> that is set to the specified date and time in the specified era.
                </summary>
      <returns>
                    The <see cref="T:System.DateTime" /> that is set to the specified date and time in the current era.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="month">
                    An integer from 1 to 13 that represents the month. 
                </param>
      <param name="day">
                    An integer from 1 to 30 that represents the day. 
                </param>
      <param name="hour">
                    An integer from 0 to 23 that represents the hour. 
                </param>
      <param name="minute">
                    An integer from 0 to 59 that represents the minute. 
                </param>
      <param name="second">
                    An integer from 0 to 59 that represents the second. 
                </param>
      <param name="millisecond">
                    An integer from 0 to 999 that represents the millisecond. 
                </param>
      <param name="era">
                    An integer that represents the era. Specify <see cref="F:System.Globalization.Calendar.CurrentEra" />.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />, <paramref name="month" />, <paramref name="day" /> or <paramref name="era" /> is outside the range supported by the current <see cref="T:System.Globalization.HebrewCalendar" /> object.
                
                    -or- 
                <paramref name="hour" /> is less than 0 or greater than 23.
                
                    -or- 
                <paramref name="minute" /> is less than 0 or greater than 59.
                
                    -or- 
                <paramref name="second" /> is less than 0 or greater than 59.
                
                    -or- 
                <paramref name="millisecond" /> is less than 0 or greater than 999. 
                </exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.ToFourDigitYear(System.Int32)">
      <summary>
                    Converts the specified year to a 4-digit year by using the <see cref="P:System.Globalization.HebrewCalendar.TwoDigitYearMax" /> property to determine the appropriate century.
                </summary>
      <returns>
                    If the <paramref name="year" /> parameter is a 2-digit year, the return value is the corresponding 4-digit year. If the <paramref name="year" /> parameter is a 4-digit year, the return value is the unchanged <paramref name="year" /> parameter.
                </returns>
      <param name="year">
                    A 2-digit year from 0 through 99, or a 4-digit Hebrew calendar year from 5343 through 5999.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than 0.
                
                    -or-
                <paramref name="year" /> is less than <see cref="P:System.Globalization.HebrewCalendar.MinSupportedDateTime" /> or greater than <see cref="P:System.Globalization.HebrewCalendar.MaxSupportedDateTime" />. 
                </exception>
    </member>
    <member name="P:System.Globalization.HebrewCalendar.TwoDigitYearMax">
      <summary>
                    Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.
                </summary>
      <returns>
                    The last year of a 100-year range that can be represented by a 2-digit year.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The current <see cref="T:System.Globalization.HebrewCalendar" /> object is read-only.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    In a set operation, the Hebrew calendar year value is less than 5343 but is not 99, or the year value is greater than 5999. 
                </exception>
    </member>
    <member name="T:System.Globalization.HijriCalendar">
      <summary>
                    Represents the Hijri calendar.
                </summary>
    </member>
    <member name="M:System.Globalization.HijriCalendar.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Globalization.HijriCalendar" /> class.
                </summary>
    </member>
    <member name="M:System.Globalization.HijriCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>
                    Returns a <see cref="T:System.DateTime" /> that is the specified number of months away from the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    The <see cref="T:System.DateTime" /> that results from adding the specified number of months to the specified <see cref="T:System.DateTime" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to add months to. 
                </param>
      <param name="months">
                    The number of months to add. 
                </param>
      <exception cref="T:System.ArgumentException">
                    The resulting <see cref="T:System.DateTime" />.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> is less than -120000.
                
                    -or- 
                <paramref name="months" /> is greater than 120000. 
                </exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>
                    Returns a <see cref="T:System.DateTime" /> that is the specified number of years away from the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    The <see cref="T:System.DateTime" /> that results from adding the specified number of years to the specified <see cref="T:System.DateTime" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to add years to. 
                </param>
      <param name="years">
                    The number of years to add. 
                </param>
      <exception cref="T:System.ArgumentException">
                    The resulting <see cref="T:System.DateTime" /> is outside the supported range. 
                </exception>
    </member>
    <member name="P:System.Globalization.HijriCalendar.Eras">
      <summary>
                    Gets the list of eras in the <see cref="T:System.Globalization.HijriCalendar" />.
                </summary>
      <returns>
                    An array of integers that represents the eras in the <see cref="T:System.Globalization.HijriCalendar" />.
                </returns>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetDayOfMonth(System.DateTime)">
      <summary>
                    Returns the day of the month in the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    An integer from 1 to 30 that represents the day of the month in the specified <see cref="T:System.DateTime" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. 
                </param>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetDayOfWeek(System.DateTime)">
      <summary>
                    Returns the day of the week in the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    A <see cref="T:System.DayOfWeek" /> value that represents the day of the week in the specified <see cref="T:System.DateTime" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. 
                </param>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetDayOfYear(System.DateTime)">
      <summary>
                    Returns the day of the year in the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    An integer from 1 to 355 that represents the day of the year in the specified <see cref="T:System.DateTime" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. 
                </param>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>
                    Returns the number of days in the specified month of the specified year and era.
                </summary>
      <returns>
                    The number of days in the specified month in the specified year in the specified era.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="month">
                    An integer from 1 to 12 that represents the month. 
                </param>
      <param name="era">
                    An integer that represents the era. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> is outside the range supported by this calendar. 
                
                    -or- 
                <paramref name="year" /> is outside the range supported by this calendar.
                
                    -or- 
                <paramref name="month" /> is outside the range supported by this calendar. 
                </exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>
                    Returns the number of days in the specified year and era.
                </summary>
      <returns>
                    The number of days in the specified year and era. The number of days is 354 in a common year or 355 in a leap year.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="era">
                    An integer that represents the era. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> or <paramref name="era" /> is outside the range supported by this calendar. 
                </exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetEra(System.DateTime)">
      <summary>
                    Returns the era of a specified <see cref="T:System.DateTime" /> value.
                </summary>
      <returns>
                    An integer that represents the era of the specified <see cref="T:System.DateTime" /> value.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. 
                </param>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>
                    Calculates the leap month for a specified year and era.
                </summary>
      <returns>
                    Always 0 because the <see cref="T:System.Globalization.HijriCalendar" /> type does not support leap months.
                </returns>
      <param name="year">
                    A year.
                </param>
      <param name="era">
                    An era. Specify <see cref="F:System.Globalization.Calendar.CurrentEra" />.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than the Hijri calendar year 1 or greater than the year 9666.
                
                    -or-
                <paramref name="era" /> is not <see cref="F:System.Globalization.Calendar.CurrentEra" />.
                </exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetMonth(System.DateTime)">
      <summary>
                    Returns the month in the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    An integer from 1 to 12 that represents the month in the specified <see cref="T:System.DateTime" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. 
                </param>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>
                    Returns the number of months in the specified year and era.
                </summary>
      <returns>
                    The number of months in the specified year and era.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="era">
                    An integer that represents the era. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> is outside the range supported by this calendar. 
                
                    -or- 
                <paramref name="year" /> is outside the range supported by this calendar. 
                </exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetYear(System.DateTime)">
      <summary>
                    Returns the year in the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    An integer that represents the year in the specified <see cref="T:System.DateTime" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. 
                </param>
    </member>
    <member name="P:System.Globalization.HijriCalendar.HijriAdjustment">
      <summary>
                    Gets or sets the number of days to add or subtract from the calendar to accommodate the variances in the start and the end of Ramadan and to accommodate the date difference between countries/regions.
                </summary>
      <returns>
                    An integer from -2 to 2 that represents the number of days to add or subtract from the calendar.
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The property is being set to an invalid value. 
                </exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
                    Determines whether the specified date is a leap day.
                </summary>
      <returns>true if the specified day is a leap day; otherwise, false.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="month">
                    An integer from 1 to 12 that represents the month. 
                </param>
      <param name="day">
                    An integer from 1 to 30 that represents the day. 
                </param>
      <param name="era">
                    An integer that represents the era. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> is outside the range supported by this calendar. 
                
                    -or- 
                <paramref name="year" /> is outside the range supported by this calendar.
                
                    -or- 
                <paramref name="month" /> is outside the range supported by this calendar.
                
                    -or- 
                <paramref name="day" /> is outside the range supported by this calendar. 
                </exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>
                    Determines whether the specified month in the specified year and era is a leap month.
                </summary>
      <returns>
                    This method always returns false.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="month">
                    An integer from 1 to 12 that represents the month. 
                </param>
      <param name="era">
                    An integer that represents the era. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> is outside the range supported by this calendar. 
                
                    -or- 
                <paramref name="year" /> is outside the range supported by this calendar.
                
                    -or- 
                <paramref name="month" /> is outside the range supported by this calendar. 
                </exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>
                    Determines whether the specified year in the specified era is a leap year.
                </summary>
      <returns>true if the specified year is a leap year; otherwise, false.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="era">
                    An integer that represents the era. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> is outside the range supported by this calendar. 
                
                    -or- 
                <paramref name="year" /> is outside the range supported by this calendar. 
                </exception>
    </member>
    <member name="P:System.Globalization.HijriCalendar.MaxSupportedDateTime">
      <summary>
                    Gets the latest date and time supported by this calendar.
                </summary>
      <returns>
                    The latest date and time supported by the <see cref="T:System.Globalization.HijriCalendar" /> type, which is equivalent to the last moment of December 31, 9999 C.E. in the Gregorian calendar.
                </returns>
    </member>
    <member name="P:System.Globalization.HijriCalendar.MinSupportedDateTime">
      <summary>
                    Gets the earliest date and time supported by this calendar.
                </summary>
      <returns>
                    The earliest date and time supported by the <see cref="T:System.Globalization.HijriCalendar" /> type, which is equivalent to the first moment of July 18, 622 C.E. in the Gregorian calendar.
                </returns>
    </member>
    <member name="M:System.Globalization.HijriCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
                    Returns a <see cref="T:System.DateTime" /> that is set to the specified date, time, and era.
                </summary>
      <returns>
                    The <see cref="T:System.DateTime" /> that is set to the specified date and time in the current era.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="month">
                    An integer from 1 to 12 that represents the month. 
                </param>
      <param name="day">
                    An integer from 1 to 30 that represents the day. 
                </param>
      <param name="hour">
                    An integer from 0 to 23 that represents the hour. 
                </param>
      <param name="minute">
                    An integer from 0 to 59 that represents the minute. 
                </param>
      <param name="second">
                    An integer from 0 to 59 that represents the second. 
                </param>
      <param name="millisecond">
                    An integer from 0 to 999 that represents the millisecond. 
                </param>
      <param name="era">
                    An integer that represents the era. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> is outside the range supported by this calendar. 
                
                    -or- 
                <paramref name="year" /> is outside the range supported by this calendar.
                
                    -or- 
                <paramref name="month" /> is outside the range supported by this calendar.
                
                    -or- 
                <paramref name="day" /> is outside the range supported by this calendar.
                
                    -or- 
                <paramref name="hour" /> is less than zero or greater than 23.
                
                    -or- 
                <paramref name="minute" /> is less than zero or greater than 59.
                
                    -or- 
                <paramref name="second" /> is less than zero or greater than 59.
                
                    -or- 
                <paramref name="millisecond" /> is less than zero or greater than 999. 
                </exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.ToFourDigitYear(System.Int32)">
      <summary>
                    Converts the specified year to a four-digit year by using the <see cref="P:System.Globalization.HijriCalendar.TwoDigitYearMax" /> property to determine the appropriate century.
                </summary>
      <returns>
                    An integer that contains the four-digit representation of <paramref name="year" />.
                </returns>
      <param name="year">
                    A two-digit or four-digit integer that represents the year to convert. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by this calendar. 
                </exception>
    </member>
    <member name="P:System.Globalization.HijriCalendar.TwoDigitYearMax">
      <summary>
                    Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.
                </summary>
      <returns>
                    The last year of a 100-year range that can be represented by a 2-digit year.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    This calendar is read-only.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The value in a set operation is less than 100 or greater than 9666.
                </exception>
    </member>
    <member name="T:System.Globalization.JapaneseCalendar">
      <summary>
                    Represents the Japanese calendar.
                </summary>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Globalization.JapaneseCalendar" /> class.
                </summary>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>
                    Returns a <see cref="T:System.DateTime" /> that is the specified number of months away from the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    The <see cref="T:System.DateTime" /> that results from adding the specified number of months to the specified <see cref="T:System.DateTime" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to which to add months. 
                </param>
      <param name="months">
                    The number of months to add. 
                </param>
      <exception cref="T:System.ArgumentException">
                    The resulting <see cref="T:System.DateTime" /> is outside the supported range. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> is less than -120000.
                
                    -or- 
                <paramref name="months" /> is greater than 120000. 
                </exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>
                    Returns a <see cref="T:System.DateTime" /> that is the specified number of years away from the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    The <see cref="T:System.DateTime" /> that results from adding the specified number of years to the specified <see cref="T:System.DateTime" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to which to add years. 
                </param>
      <param name="years">
                    The number of years to add. 
                </param>
      <exception cref="T:System.ArgumentException">
                    The resulting <see cref="T:System.DateTime" /> is outside the supported range. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> is outside the supported range of the <see cref="T:System.Globalization.JapaneseCalendar" /> type.
                
                    -or-
                <paramref name="years" /> is less than -10,000 or greater than 10,000. 
                </exception>
    </member>
    <member name="P:System.Globalization.JapaneseCalendar.Eras">
      <summary>
                    Gets the list of eras in the <see cref="T:System.Globalization.JapaneseCalendar" />.
                </summary>
      <returns>
                    An array of integers that represents the eras in the <see cref="T:System.Globalization.JapaneseCalendar" />.
                </returns>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetDayOfMonth(System.DateTime)">
      <summary>
                    Returns the day of the month in the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    An integer from 1 to 31 that represents the day of the month in the specified <see cref="T:System.DateTime" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. 
                </param>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetDayOfWeek(System.DateTime)">
      <summary>
                    Returns the day of the week in the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    A <see cref="T:System.DayOfWeek" /> value that represents the day of the week in the specified <see cref="T:System.DateTime" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. 
                </param>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetDayOfYear(System.DateTime)">
      <summary>
                    Returns the day of the year in the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    An integer from 1 to 366 that represents the day of the year in the specified <see cref="T:System.DateTime" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. 
                </param>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>
                    Returns the number of days in the specified month in the specified year in the specified era.
                </summary>
      <returns>
                    The number of days in the specified month in the specified year in the specified era.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="month">
                    An integer from 1 to 12 that represents the month. 
                </param>
      <param name="era">
                    An integer that represents the era. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="month" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="era" /> is outside the range supported by the calendar. 
                </exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>
                    Returns the number of days in the specified year in the specified era.
                </summary>
      <returns>
                    The number of days in the specified year in the specified era.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="era">
                    An integer that represents the era. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="era" /> is outside the range supported by the calendar. 
                </exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetEra(System.DateTime)">
      <summary>
                    Returns the era of a specified <see cref="T:System.DateTime" /> value.
                </summary>
      <returns>
                    An integer that represents the era of the specified <see cref="T:System.DateTime" /> value.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. 
                </param>
      <exception cref="T:System.ArgumentException">
                    The resulting <see cref="T:System.DateTime" /> is outside the supported range. 
                </exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>
                    Calculates the leap month for a specified year and era.
                </summary>
      <returns>
                    The return value is always 0 because the <see cref="T:System.Globalization.JapaneseCalendar" /> type does not support the notion of a leap month.
                </returns>
      <param name="year">
                    A year.
                </param>
      <param name="era">
                    An era.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> or <paramref name="era" /> is outside the range supported by the <see cref="T:System.Globalization.JapaneseCalendar" /> type.
                </exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetMonth(System.DateTime)">
      <summary>
                    Returns the month in the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    An integer from 1 to 12 that represents the month in the specified <see cref="T:System.DateTime" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. 
                </param>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>
                    Returns the number of months in the specified year in the specified era.
                </summary>
      <returns>
                    The return value is always 12.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="era">
                    An integer that represents the era. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="era" /> is outside the range supported by the calendar. 
                </exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)">
      <summary>
                    Returns the week of the year that includes the date in the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    A 1-based integer that represents the week of the year that includes the date in the <paramref name="time" /> parameter.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. 
                </param>
      <param name="rule">
                    One of the <see cref="T:System.Globalization.CalendarWeekRule" /> values that defines a calendar week. 
                </param>
      <param name="firstDayOfWeek">
                    One of the <see cref="T:System.DayOfWeek" /> values that represents the first day of the week. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> or <paramref name="firstDayOfWeek" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="rule" /> is not a valid <see cref="T:System.Globalization.CalendarWeekRule" /> value. 
                </exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetYear(System.DateTime)">
      <summary>
                    Returns the year in the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    An integer that represents the year in the specified <see cref="T:System.DateTime" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. 
                </param>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
                    Determines whether the specified date in the specified era is a leap day.
                </summary>
      <returns>true, if the specified day is a leap day; otherwise, false.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="month">
                    An integer from 1 to 12 that represents the month. 
                </param>
      <param name="day">
                    An integer from 1 to 31 that represents the day. 
                </param>
      <param name="era">
                    An integer that represents the era. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="month" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="day" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="era" /> is outside the range supported by the calendar. 
                </exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>
                    Determines whether the specified month in the specified year in the specified era is a leap month.
                </summary>
      <returns>
                    This method always returns false, unless overridden by a derived class.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="month">
                    An integer from 1 to 12 that represents the month. 
                </param>
      <param name="era">
                    An integer that represents the era. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="month" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="era" /> is outside the range supported by the calendar. 
                </exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>
                    Determines whether the specified year in the specified era is a leap year.
                </summary>
      <returns>true, if the specified year is a leap year; otherwise, false.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="era">
                    An integer that represents the era. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="era" /> is outside the range supported by the calendar. 
                </exception>
    </member>
    <member name="P:System.Globalization.JapaneseCalendar.MaxSupportedDateTime">
      <summary>
                    Gets the latest date and time supported by the <see cref="T:System.Globalization.JapaneseCalendar" /> class.
                </summary>
      <returns>
                    The latest date and time supported by the <see cref="T:System.Globalization.JapaneseCalendar" /> type, which is equivalent to the last moment of December 31, 9999 C.E. in the Gregorian calendar.
                </returns>
    </member>
    <member name="P:System.Globalization.JapaneseCalendar.MinSupportedDateTime">
      <summary>
                    Gets the earliest date and time supported by the <see cref="T:System.Globalization.JapaneseCalendar" /> class.
                </summary>
      <returns>
                    The earliest date and time supported by the <see cref="T:System.Globalization.JapaneseCalendar" /> type, which is equivalent to the first moment of January 1, 1868 C.E. in the Gregorian calendar. 
                </returns>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
                    Returns a <see cref="T:System.DateTime" /> that is set to the specified date and time in the specified era.
                </summary>
      <returns>
                    The <see cref="T:System.DateTime" /> that is set to the specified date and time in the current era.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="month">
                    An integer from 1 to 12 that represents the month. 
                </param>
      <param name="day">
                    An integer from 1 to 31 that represents the day. 
                </param>
      <param name="hour">
                    An integer from 0 to 23 that represents the hour. 
                </param>
      <param name="minute">
                    An integer from 0 to 59 that represents the minute. 
                </param>
      <param name="second">
                    An integer from 0 to 59 that represents the second. 
                </param>
      <param name="millisecond">
                    An integer from 0 to 999 that represents the millisecond. 
                </param>
      <param name="era">
                    An integer that represents the era. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="month" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="day" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="hour" /> is less than zero or greater than 23.
                
                    -or- 
                <paramref name="minute" /> is less than zero or greater than 59.
                
                    -or- 
                <paramref name="second" /> is less than zero or greater than 59.
                
                    -or- 
                <paramref name="millisecond" /> is less than zero or greater than 999.
                
                    -or- 
                <paramref name="era" /> is outside the range supported by the calendar. 
                </exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.ToFourDigitYear(System.Int32)">
      <summary>
                    Converts the specified year to a four-digit year by using the <see cref="P:System.Globalization.JapaneseCalendar.TwoDigitYearMax" /> property to determine the appropriate century.
                </summary>
      <returns>
                    An integer that contains the four-digit representation of <paramref name="year" />.
                </returns>
      <param name="year">
                    An integer (usually two digits) that represents the year to convert. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar. 
                </exception>
    </member>
    <member name="P:System.Globalization.JapaneseCalendar.TwoDigitYearMax">
      <summary>
                    Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.
                </summary>
      <returns>
                    The last year of a 100-year range that can be represented by a 2-digit year.
                </returns>
    </member>
    <member name="T:System.Globalization.KoreanCalendar">
      <summary>
                    Represents the Korean calendar.
                </summary>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Globalization.KoreanCalendar" /> class.
                </summary>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>
                    Returns a <see cref="T:System.DateTime" /> that is the specified number of months away from the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    The <see cref="T:System.DateTime" /> that results from adding the specified number of months to the specified <see cref="T:System.DateTime" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to which to add months. 
                </param>
      <param name="months">
                    The number of months to add. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> is less than -120000.
                
                    -or- 
                <paramref name="months" /> is greater than 120000. 
                </exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>
                    Returns a <see cref="T:System.DateTime" /> that is the specified number of years away from the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    The <see cref="T:System.DateTime" /> that results from adding the specified number of years to the specified <see cref="T:System.DateTime" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to which to add years. 
                </param>
      <param name="years">
                    The number of years to add. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="years" /> or <paramref name="time" /> is out of range.
                </exception>
    </member>
    <member name="P:System.Globalization.KoreanCalendar.Eras">
      <summary>
                    Gets the list of eras in the <see cref="T:System.Globalization.KoreanCalendar" />.
                </summary>
      <returns>
                    An array of integers that represents the eras in the <see cref="T:System.Globalization.KoreanCalendar" />.
                </returns>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetDayOfMonth(System.DateTime)">
      <summary>
                    Returns the day of the month in the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    An integer from 1 to 31 that represents the day of the month in the specified <see cref="T:System.DateTime" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. 
                </param>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetDayOfWeek(System.DateTime)">
      <summary>
                    Returns the day of the week in the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    A <see cref="T:System.DayOfWeek" /> value that represents the day of the week in the specified <see cref="T:System.DateTime" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. 
                </param>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetDayOfYear(System.DateTime)">
      <summary>
                    Returns the day of the year in the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    An integer from 1 to 366 that represents the day of the year in the specified <see cref="T:System.DateTime" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. 
                </param>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>
                    Returns the number of days in the specified month in the specified year in the specified era.
                </summary>
      <returns>
                    The number of days in the specified month in the specified year in the specified era.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="month">
                    An integer from 1 to 12 that represents the month. 
                </param>
      <param name="era">
                    An integer that represents the era. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="month" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="era" /> is outside the range supported by the calendar. 
                </exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>
                    Returns the number of days in the specified year in the specified era.
                </summary>
      <returns>
                    The number of days in the specified year in the specified era.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="era">
                    An integer that represents the era. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="era" /> is outside the range supported by the calendar. 
                </exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetEra(System.DateTime)">
      <summary>
                    Returns the era of a specified <see cref="T:System.DateTime" /> value.
                </summary>
      <returns>
                    An integer that represents the era of <paramref name="time" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. 
                </param>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>
                    Calculates the leap month for a specified year and era.
                </summary>
      <returns>
                    The return value is always 0 because the <see cref="T:System.Globalization.KoreanCalendar" /> class does not support leap months.
                </returns>
      <param name="year">
                    A year.
                </param>
      <param name="era">
                    An era.
                </param>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetMonth(System.DateTime)">
      <summary>
                    Returns the month in the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    An integer from 1 to 12 that represents the month in the specified <see cref="T:System.DateTime" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. 
                </param>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>
                    Returns the number of months in the specified year in the specified era.
                </summary>
      <returns>
                    The number of months in the specified year in the specified era.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="era">
                    An integer that represents the era. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="era" /> is outside the range supported by the calendar. 
                </exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)">
      <summary>
                    Returns the week of the year that includes the date in the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    A 1-based integer that represents the week of the year that includes the date in the <paramref name="time" /> parameter.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. 
                </param>
      <param name="rule">
                    One of the <see cref="T:System.Globalization.CalendarWeekRule" /> values that defines a calendar week. 
                </param>
      <param name="firstDayOfWeek">
                    One of the <see cref="T:System.DayOfWeek" /> values that represents the first day of the week. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> or <paramref name="firstDayOfWeek" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="rule" /> is not a valid <see cref="T:System.Globalization.CalendarWeekRule" /> value. 
                </exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetYear(System.DateTime)">
      <summary>
                    Returns the year in the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    An integer that represents the year in the specified <see cref="T:System.DateTime" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. 
                </param>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
                    Determines whether the specified date in the specified era is a leap day.
                </summary>
      <returns>true if the specified day is a leap day; otherwise, false.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="month">
                    An integer from 1 to 12 that represents the month. 
                </param>
      <param name="day">
                    An integer from 1 to 31 that represents the day. 
                </param>
      <param name="era">
                    An integer that represents the era. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="month" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="day" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="era" /> is outside the range supported by the calendar. 
                </exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>
                    Determines whether the specified month in the specified year in the specified era is a leap month.
                </summary>
      <returns>
                    This method always returns false, unless overridden by a derived class.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="month">
                    An integer from 1 to 12 that represents the month. 
                </param>
      <param name="era">
                    An integer that represents the era. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="month" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="era" /> is outside the range supported by the calendar. 
                </exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>
                    Determines whether the specified year in the specified era is a leap year.
                </summary>
      <returns>true if the specified year is a leap year; otherwise, false.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="era">
                    An integer that represents the era. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="era" /> is outside the range supported by the calendar. 
                </exception>
    </member>
    <member name="F:System.Globalization.KoreanCalendar.KoreanEra">
      <summary>
                    Represents the current era. This field is constant.
                </summary>
    </member>
    <member name="P:System.Globalization.KoreanCalendar.MaxSupportedDateTime">
      <summary>
                    Gets the latest date and time supported by the <see cref="T:System.Globalization.KoreanCalendar" /> class.
                </summary>
      <returns>
                    The latest date and time supported by the <see cref="T:System.Globalization.KoreanCalendar" /> class, which is equivalent to the last moment of December 31, 9999 C.E. in the Gregorian calendar.
                </returns>
    </member>
    <member name="P:System.Globalization.KoreanCalendar.MinSupportedDateTime">
      <summary>
                    Gets the earliest date and time supported by the <see cref="T:System.Globalization.KoreanCalendar" /> class.
                </summary>
      <returns>
                    The earliest date and time supported by the <see cref="T:System.Globalization.KoreanCalendar" /> class, which is equivalent to the first moment of January 1, 0001 C.E. in the Gregorian calendar.
                </returns>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
                    Returns a <see cref="T:System.DateTime" /> that is set to the specified date and time in the specified era.
                </summary>
      <returns>
                    The <see cref="T:System.DateTime" /> that is set to the specified date and time in the current era.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="month">
                    An integer from 1 to 12 that represents the month. 
                </param>
      <param name="day">
                    An integer from 1 to 31 that represents the day. 
                </param>
      <param name="hour">
                    An integer from 0 to 23 that represents the hour. 
                </param>
      <param name="minute">
                    An integer from 0 to 59 that represents the minute. 
                </param>
      <param name="second">
                    An integer from 0 to 59 that represents the second. 
                </param>
      <param name="millisecond">
                    An integer from 0 to 999 that represents the millisecond. 
                </param>
      <param name="era">
                    An integer that represents the era. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="month" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="day" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="hour" /> is less than zero or greater than 23.
                
                    -or- 
                <paramref name="minute" /> is less than zero or greater than 59.
                
                    -or- 
                <paramref name="second" /> is less than zero or greater than 59.
                
                    -or- 
                <paramref name="millisecond" /> is less than zero or greater than 999.
                
                    -or- 
                <paramref name="era" /> is outside the range supported by the calendar. 
                </exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.ToFourDigitYear(System.Int32)">
      <summary>
                    Converts the specified year to a four-digit year by using the <see cref="P:System.Globalization.KoreanCalendar.TwoDigitYearMax" /> property to determine the appropriate century.
                </summary>
      <returns>
                    An integer that contains the four-digit representation of <paramref name="year" />.
                </returns>
      <param name="year">
                    A two-digit or four-digit integer that represents the year to convert. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar. 
                </exception>
    </member>
    <member name="P:System.Globalization.KoreanCalendar.TwoDigitYearMax">
      <summary>
                    Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.
                </summary>
      <returns>
                    The last year of a 100-year range that can be represented by a 2-digit year.
                </returns>
    </member>
    <member name="T:System.Globalization.NumberFormatInfo">
      <summary>
                    Defines how numeric values are formatted and displayed, depending on the culture.
                </summary>
    </member>
    <member name="M:System.Globalization.NumberFormatInfo.#ctor">
      <summary>
                    Initializes a new writable instance of the <see cref="T:System.Globalization.NumberFormatInfo" /> class that is culture-independent (invariant).
                </summary>
    </member>
    <member name="M:System.Globalization.NumberFormatInfo.Clone">
      <summary>
                    Creates a shallow copy of the <see cref="T:System.Globalization.NumberFormatInfo" /> object.
                </summary>
      <returns>
                    A new <see cref="T:System.Globalization.NumberFormatInfo" /> object copied from the original <see cref="T:System.Globalization.NumberFormatInfo" /> object.
                </returns>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits">
      <summary>
                    Indicates the number of decimal places to use in currency values.
                </summary>
      <returns>
                    The number of decimal places to use in currency values. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is 2.
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The property is being set to a value that is less than 0 or greater than 99. 
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only. 
                </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator">
      <summary>
                    Gets or sets the string to use as the decimal separator in currency values.
                </summary>
      <returns>
                    The string to use as the decimal separator in currency values. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is ".".
                </returns>
      <exception cref="T:System.ArgumentNullException">
                    The property is being set to null. 
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only. 
                </exception>
      <exception cref="T:System.ArgumentException">
                    The property is being set to an empty string.
                </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator">
      <summary>
                    Gets or sets the string that separates groups of digits to the left of the decimal in currency values.
                </summary>
      <returns>
                    The string that separates groups of digits to the left of the decimal in currency values. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is ",".
                </returns>
      <exception cref="T:System.ArgumentNullException">
                    The property is being set to null. 
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only. 
                </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes">
      <summary>
                    Gets or sets the number of digits in each group to the left of the decimal in currency values.
                </summary>
      <returns>
                    The number of digits in each group to the left of the decimal in currency values. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is a one-dimensional array with only one element, which is set to 3.
                </returns>
      <exception cref="T:System.ArgumentNullException">
                    The property is being set to null. 
                </exception>
      <exception cref="T:System.ArgumentException">
                    The property is being set and the array contains an entry that is less than 0 or greater than 9.
                
                    -or- 
                
                    The property is being set and the array contains an entry, other than the last entry, that is set to 0. 
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only. 
                </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern">
      <summary>
                    Gets or sets the format pattern for negative currency values.
                </summary>
      <returns>
                    The format pattern for negative currency values. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is 0, which represents "($n)", where "$" is the <see cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" /> and <paramref name="n" /> is a number.
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The property is being set to a value that is less than 0 or greater than 15. 
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only. 
                </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern">
      <summary>
                    Gets or sets the format pattern for positive currency values.
                </summary>
      <returns>
                    The format pattern for positive currency values. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is 0, which represents "$n", where "$" is the <see cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" /> and <paramref name="n" /> is a number.
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The property is being set to a value that is less than 0 or greater than 3. 
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only. 
                </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencySymbol">
      <summary>
                    Gets or sets the string to use as the currency symbol.
                </summary>
      <returns>
                    The string to use as the currency symbol. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is "$".
                </returns>
      <exception cref="T:System.ArgumentNullException">
                    The property is being set to null. 
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only. 
                </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrentInfo">
      <summary>
                    Gets a read-only <see cref="T:System.Globalization.NumberFormatInfo" /> object that contains numeric formatting information for the current culture.
                </summary>
      <returns>
                    A read-only <see cref="T:System.Globalization.NumberFormatInfo" /> object based on the <see cref="T:System.Globalization.CultureInfo" /> object for the current thread.
                </returns>
    </member>
    <member name="M:System.Globalization.NumberFormatInfo.GetFormat(System.Type)">
      <summary>
                    Gets an object of the specified type that provides a numeric formatting service.
                </summary>
      <returns>
                    The current <see cref="T:System.Globalization.NumberFormatInfo" /> object, if <paramref name="formatType" /> is an object of type <see cref="T:System.Globalization.NumberFormatInfo" />; otherwise, null.
                </returns>
      <param name="formatType">
                    The <see cref="T:System.Type" /> of the required formatting service. 
                </param>
    </member>
    <member name="M:System.Globalization.NumberFormatInfo.GetInstance(System.IFormatProvider)">
      <summary>
                    Gets the <see cref="T:System.Globalization.NumberFormatInfo" /> object associated with the specified <see cref="T:System.IFormatProvider" /> object.
                </summary>
      <returns>
                    The <see cref="T:System.Globalization.NumberFormatInfo" /> object associated with the specified <see cref="T:System.IFormatProvider" /> object.
                </returns>
      <param name="formatProvider">
                    The <see cref="T:System.IFormatProvider" /> object used to get the <see cref="T:System.Globalization.NumberFormatInfo" />.
                
                    -or- 
                null to get the <see cref="P:System.Globalization.NumberFormatInfo.CurrentInfo" /> object. 
                </param>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.InvariantInfo">
      <summary>
                    Gets the default read-only <see cref="T:System.Globalization.NumberFormatInfo" /> object that is culture-independent (invariant).
                </summary>
      <returns>
                    The default read-only <see cref="T:System.Globalization.NumberFormatInfo" /> object that is culture-independent (invariant).
                </returns>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.IsReadOnly">
      <summary>
                    Gets a value indicating whether the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only.
                </summary>
      <returns>true if the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NaNSymbol">
      <summary>
                    Gets or sets the string that represents the IEEE NaN (not a number) value.
                </summary>
      <returns>
                    The string that represents the IEEE NaN (not a number) value. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is "NaN".
                </returns>
      <exception cref="T:System.ArgumentNullException">
                    The property is being set to null. 
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only. 
                </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol">
      <summary>
                    Gets or sets the string that represents negative infinity.
                </summary>
      <returns>
                    The string that represents negative infinity. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is "-Infinity".
                </returns>
      <exception cref="T:System.ArgumentNullException">
                    The property is being set to null. 
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only. 
                </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NegativeSign">
      <summary>
                    Gets or sets the string that indicates that a number is negative.
                </summary>
      <returns>
                    The string that indicates that a number is negative. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is "-".
                </returns>
      <exception cref="T:System.ArgumentNullException">
                    The property is being set to null. 
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only. 
                </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits">
      <summary>
                    Gets or sets the number of decimal places to use in numeric values.
                </summary>
      <returns>
                    The number of decimal places to use in numeric values. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is 2.
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The property is being set to a value that is less than 0 or greater than 99. 
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> is read-only. 
                </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator">
      <summary>
                    Gets or sets the string to use as the decimal separator in numeric values.
                </summary>
      <returns>
                    The string to use as the decimal separator in numeric values. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is ".".
                </returns>
      <exception cref="T:System.ArgumentNullException">
                    The property is being set to null. 
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only. 
                </exception>
      <exception cref="T:System.ArgumentException">
                    The property is being set to an empty string.
                </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator">
      <summary>
                    Gets or sets the string that separates groups of digits to the left of the decimal in numeric values.
                </summary>
      <returns>
                    The string that separates groups of digits to the left of the decimal in numeric values. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is ",".
                </returns>
      <exception cref="T:System.ArgumentNullException">
                    The property is being set to null. 
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only. 
                </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NumberGroupSizes">
      <summary>
                    Gets or sets the number of digits in each group to the left of the decimal in numeric values.
                </summary>
      <returns>
                    The number of digits in each group to the left of the decimal in numeric values. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is a one-dimensional array with only one element, which is set to 3.
                </returns>
      <exception cref="T:System.ArgumentNullException">
                    The property is being set to null. 
                </exception>
      <exception cref="T:System.ArgumentException">
                    The property is being set and the array contains an entry that is less than 0 or greater than 9.
                
                    -or- 
                
                    The property is being set and the array contains an entry, other than the last entry, that is set to 0. 
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only. 
                </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NumberNegativePattern">
      <summary>
                    Gets or sets the format pattern for negative numeric values.
                </summary>
      <returns>
                    The format pattern for negative numeric values. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is 1, which represents "-n", where <paramref name="n" /> is a number.
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The property is being set to a value that is less than 0 or greater than 4. 
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only. 
                </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits">
      <summary>
                    Gets the number of decimal places to use in percent values. 
                </summary>
      <returns>
                    The number of decimal places to use in percent values. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is 2.
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The property is being set to a value that is less than 0 or greater than 99. 
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only. 
                </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator">
      <summary>
                    Gets the string to use as the decimal separator in percent values. 
                </summary>
      <returns>
                    The string to use as the decimal separator in percent values. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is ".".
                </returns>
      <exception cref="T:System.ArgumentNullException">
                    The property is being set to null. 
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only. 
                </exception>
      <exception cref="T:System.ArgumentException">
                    The property is being set to an empty string.
                </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator">
      <summary>
                    Gets the string that separates groups of digits to the left of the decimal in percent values. 
                </summary>
      <returns>
                    The string that separates groups of digits to the left of the decimal in percent values. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is ",".
                </returns>
      <exception cref="T:System.ArgumentNullException">
                    The property is being set to null. 
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only. 
                </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentGroupSizes">
      <summary>
                    Gets the number of digits in each group to the left of the decimal in percent values. 
                </summary>
      <returns>
                    The number of digits in each group to the left of the decimal in percent values. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is a one-dimensional array with only one element, which is set to 3.
                </returns>
      <exception cref="T:System.ArgumentNullException">
                    The property is being set to null. 
                </exception>
      <exception cref="T:System.ArgumentException">
                    The property is being set and the array contains an entry that is less than 0 or greater than 9.
                
                    -or- 
                
                    The property is being set and the array contains an entry, other than the last entry, that is set to 0. 
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only. 
                </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentNegativePattern">
      <summary>
                    Gets or sets the format pattern for negative percent values.
                </summary>
      <returns>
                    The format pattern for negative percent values. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is 0, which represents "-n %", where "%" is the <see cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" /> and <paramref name="n" /> is a number.
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The property is being set to a value that is less than 0 or greater than 11. 
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only. 
                </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentPositivePattern">
      <summary>
                    Gets or sets the format pattern for positive percent values.
                </summary>
      <returns>
                    The format pattern for positive percent values. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is 0, which represents "n %", where "%" is the <see cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" /> and <paramref name="n" /> is a number.
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The property is being set to a value that is less than 0 or greater than 3. 
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only. 
                </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentSymbol">
      <summary>
                    Gets or sets the string to use as the percent symbol.
                </summary>
      <returns>
                    The string to use as the percent symbol. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is "%".
                </returns>
      <exception cref="T:System.ArgumentNullException">
                    The property is being set to null. 
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only. 
                </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PerMilleSymbol">
      <summary>
                    Gets or sets the string to use as the per mille symbol.
                </summary>
      <returns>
                    The string to use as the per mille symbol. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is "‰", which is the Unicode character U+2030.
                </returns>
      <exception cref="T:System.ArgumentNullException">
                    The property is being set to null. 
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only. 
                </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol">
      <summary>
                    Gets or sets the string that represents positive infinity.
                </summary>
      <returns>
                    The string that represents positive infinity. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is "Infinity".
                </returns>
      <exception cref="T:System.ArgumentNullException">
                    The property is being set to null. 
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only. 
                </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PositiveSign">
      <summary>
                    Gets or sets the string that denotes that the associated number is positive.
                </summary>
      <returns>
                    The string that denotes that the associated number is positive. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is "+".
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only. 
                </exception>
    </member>
    <member name="M:System.Globalization.NumberFormatInfo.ReadOnly(System.Globalization.NumberFormatInfo)">
      <summary>
                    Returns a read-only <see cref="T:System.Globalization.NumberFormatInfo" /> wrapper.
                </summary>
      <returns>
                    A read-only <see cref="T:System.Globalization.NumberFormatInfo" /> wrapper around <paramref name="nfi" />.
                </returns>
      <param name="nfi">
                    The <see cref="T:System.Globalization.NumberFormatInfo" /> to wrap. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nfi" /> is null. 
                </exception>
    </member>
    <member name="T:System.Globalization.NumberStyles">
      <summary>
                    Determines the styles permitted in numeric string arguments that are passed to the Parse methods of the base numeric types.
                </summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.None">
      <summary>
                    Indicates that none of the bit styles are allowed.
                </summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowLeadingWhite">
      <summary>
                    Indicates that leading white-space characters can be present in the numeric string and will be ignored during parsing. Valid white-space characters have the Unicode values U+0009, U+000A, U+000B, U+000C, U+000D, and U+0020.
                </summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowTrailingWhite">
      <summary>
                    Indicates that trailing white-space characters can be present in the numeric string and will be ignored during parsing. Valid white-space characters have the Unicode values U+0009, U+000A, U+000B, U+000C, U+000D, and U+0020.
                </summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowLeadingSign">
      <summary>
                    Indicates that the numeric string can have a leading sign. Valid leading sign characters are determined by the <see cref="P:System.Globalization.NumberFormatInfo.PositiveSign" /> and <see cref="P:System.Globalization.NumberFormatInfo.NegativeSign" /> properties of a <see cref="T:System.Globalization.NumberFormatInfo" /> object.
                </summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowTrailingSign">
      <summary>
                    Indicates that the numeric string can have a trailing sign. Valid trailing sign characters are determined by the <see cref="P:System.Globalization.NumberFormatInfo.PositiveSign" /> and <see cref="P:System.Globalization.NumberFormatInfo.NegativeSign" /> properties of a <see cref="T:System.Globalization.NumberFormatInfo" /> object.
                </summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowParentheses">
      <summary>
                    Indicates that the numeric string can have one pair of parentheses enclosing the number.
                </summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowDecimalPoint">
      <summary>
                    Indicates that the numeric string can have a decimal point. Valid decimal point characters are determined by the <see cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" /> and <see cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" /> properties of a <see cref="T:System.Globalization.NumberFormatInfo" /> object.
                </summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowThousands">
      <summary>
                    Indicates that the numeric string can have group separators, for example, separating the hundreds from the thousands. Valid group separator characters are determined by the <see cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" /> and <see cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" /> properties of a <see cref="T:System.Globalization.NumberFormatInfo" /> object, and the number of digits in each group is determined by the <see cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" /> and <see cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" /> properties of a <see cref="T:System.Globalization.NumberFormatInfo" /> object.
                </summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowExponent">
      <summary>
                    Indicates that the numeric string can be in exponential notation.
                </summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowCurrencySymbol">
      <summary>
                    Indicates that the numeric string is parsed as currency if it contains a currency symbol. Otherwise, it is parsed as a number. Valid currency symbols are determined by the <see cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" /> property of a <see cref="T:System.Globalization.NumberFormatInfo" /> object.
                </summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowHexSpecifier">
      <summary>
                    Indicates that the numeric string represents a hexadecimal value. Valid hexadecimal values include the numeric digits 0-9 and the hexadecimal digits A-F and a-f. Hexadecimal values can be left-padded with zeros. Strings parsed using this style cannot be prefixed with "0x".
                </summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Integer">
      <summary>
                    Indicates that the <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />, <see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />, and <see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" /> styles are used. This is a composite number style.
                </summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.HexNumber">
      <summary>
                    Indicates that the <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />, <see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />, and <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> styles are used. This is a composite number style.
                </summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Number">
      <summary>
                    Indicates that the <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />, <see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />, <see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" />, <see cref="F:System.Globalization.NumberStyles.AllowTrailingSign" />, <see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint" />, and <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> styles are used. This is a composite number style.
                </summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Float">
      <summary>
                    Indicates that the <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />, <see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />, <see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" />, <see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint" />, and <see cref="F:System.Globalization.NumberStyles.AllowExponent" /> styles are used. This is a composite number style.
                </summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Currency">
      <summary>
                    Indicates that all styles, except <see cref="F:System.Globalization.NumberStyles.AllowExponent" /> and <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" />, are used. This is a composite number style.
                </summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Any">
      <summary>
                    Indicates that all styles, except <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" />, are used. This is a composite number style.
                </summary>
    </member>
    <member name="T:System.Globalization.RegionInfo">
      <summary>
                    Contains information about a country/region.
                </summary>
    </member>
    <member name="M:System.Globalization.RegionInfo.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Globalization.RegionInfo" /> class for a particular country/region based on its full culture name.
                </summary>
      <param name="name">
                    A string containing the full culture name for a specific culture. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is a country/region name.
                
                    -or-
                <paramref name="name" /> is the name of a neutral culture.
                
                    -or-
                <paramref name="name" /> is not a valid culture name.
                </exception>
    </member>
    <member name="P:System.Globalization.RegionInfo.CurrencySymbol">
      <summary>
                    Gets the currency symbol associated with the country/region.
                </summary>
      <returns>
                    The currency symbol associated with the country/region.
                </returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.CurrentRegion">
      <summary>
                    Gets the <see cref="T:System.Globalization.RegionInfo" /> that represents the country/region used by the current thread.
                </summary>
      <returns>
                    The <see cref="T:System.Globalization.RegionInfo" /> that represents the country/region used by the current thread.
                </returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.DisplayName">
      <summary>
                    Gets the full name of the country/region in the language of the localized version of the .NET Framework for Silverlight.
                </summary>
      <returns>
                    The full name of the country/region in the language of the localized version of the .NET Framework for Silverlight.
                </returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.EnglishName">
      <summary>
                    Gets the full name of the country/region in English.
                </summary>
      <returns>
                    The full name of the country/region in English.
                </returns>
    </member>
    <member name="M:System.Globalization.RegionInfo.Equals(System.Object)">
      <summary>
                    Determines whether the specified object is the same as the current <see cref="T:System.Globalization.RegionInfo" /> object.
                </summary>
      <returns>true if the <paramref name="value" /> parameter is a <see cref="T:System.Globalization.RegionInfo" /> object and its <see cref="P:System.Globalization.RegionInfo.Name" /> property is the same as the <see cref="P:System.Globalization.RegionInfo.Name" /> property of the current <see cref="T:System.Globalization.RegionInfo" /> object; otherwise, false.
                </returns>
      <param name="value">
                    The object to compare with the current <see cref="T:System.Globalization.RegionInfo" />. 
                </param>
    </member>
    <member name="M:System.Globalization.RegionInfo.GetHashCode">
      <summary>
                    Serves as a hash function for the current <see cref="T:System.Globalization.RegionInfo" />, suitable for hashing algorithms and data structures, such as a hash table.
                </summary>
      <returns>
                    A hash code for the current <see cref="T:System.Globalization.RegionInfo" />.
                </returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.IsMetric">
      <summary>
                    Gets a value indicating whether the country/region uses the metric system for measurements.
                </summary>
      <returns>true if the country/region uses the metric system for measurements; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.ISOCurrencySymbol">
      <summary>
                    Gets the three-character ISO 4217 currency symbol associated with the country/region.
                </summary>
      <returns>
                    The three-character ISO 4217 currency symbol associated with the country/region.
                </returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.Name">
      <summary>
                    Gets the name or ISO 3166 two-letter country/region code for the current <see cref="T:System.Globalization.RegionInfo" /> object.
                </summary>
      <returns>
                    The value specified by the <paramref name="name" /> parameter of the <see cref="M:System.Globalization.RegionInfo.#ctor(System.String)" /> constructor. The return value is in uppercase.
                </returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.NativeName">
      <summary>
                    Gets the name of a country/region formatted in the native language of the country/region.
                </summary>
      <returns>
                    The native name of the country/region formatted in the language associated with the ISO 3166 country/region code. 
                </returns>
    </member>
    <member name="M:System.Globalization.RegionInfo.ToString">
      <summary>
                    Returns a string containing the culture name or ISO 3166 two-letter country/region code specified for the current <see cref="T:System.Globalization.RegionInfo" />.
                </summary>
      <returns>
                    A string containing the culture name or ISO 3166 two-letter country/region codes defined for the current <see cref="T:System.Globalization.RegionInfo" />.
                </returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.TwoLetterISORegionName">
      <summary>
                    Gets the two-letter code defined in ISO 3166 for the country/region.
                </summary>
      <returns>
                    The two-letter code defined in ISO 3166 for the country/region.
                </returns>
    </member>
    <member name="T:System.Globalization.StringInfo">
      <summary>
                    Provides functionality to split a string into text elements and to iterate through those text elements.
                </summary>
    </member>
    <member name="M:System.Globalization.StringInfo.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Globalization.StringInfo" /> class. 
                </summary>
    </member>
    <member name="M:System.Globalization.StringInfo.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Globalization.StringInfo" /> class to a specified string.
                </summary>
      <param name="value">
                    A string to initialize this <see cref="T:System.Globalization.StringInfo" /> object.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.
                </exception>
    </member>
    <member name="M:System.Globalization.StringInfo.Equals(System.Object)">
      <summary>
                    Indicates whether the current <see cref="T:System.Globalization.StringInfo" /> object is equal to a specified object.
                </summary>
      <returns>true if the <paramref name="value" /> parameter is a <see cref="T:System.Globalization.StringInfo" /> object and its <see cref="P:System.Globalization.StringInfo.String" /> property equals the <see cref="P:System.Globalization.StringInfo.String" /> property of this <see cref="T:System.Globalization.StringInfo" /> object; otherwise, false.
                </returns>
      <param name="value">
                    An object.
                </param>
    </member>
    <member name="M:System.Globalization.StringInfo.GetHashCode">
      <summary>
                    Calculates a hash code for the value of the current <see cref="T:System.Globalization.StringInfo" /> object.
                </summary>
      <returns>
                    A 32-bit signed integer hash code based on the string value of this <see cref="T:System.Globalization.StringInfo" /> object.
                </returns>
    </member>
    <member name="M:System.Globalization.StringInfo.GetNextTextElement(System.String)">
      <summary>
                    Gets the first text element in a specified string.
                </summary>
      <returns>
                    A string containing the first text element in the specified string.
                </returns>
      <param name="str">
                    The string from which to get the text element. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> is null. 
                </exception>
    </member>
    <member name="M:System.Globalization.StringInfo.GetNextTextElement(System.String,System.Int32)">
      <summary>
                    Gets the text element at the specified index of the specified string.
                </summary>
      <returns>
                    A string containing the text element at the specified index of the specified string.
                </returns>
      <param name="str">
                    The string from which to get the text element. 
                </param>
      <param name="index">
                    The zero-based index at which the text element starts. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the range of valid indexes for <paramref name="str" />. 
                </exception>
    </member>
    <member name="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String)">
      <summary>
                    Returns an enumerator that iterates through the text elements of the entire string.
                </summary>
      <returns>
                    A <see cref="T:System.Globalization.TextElementEnumerator" /> for the entire string.
                </returns>
      <param name="str">
                    The string to iterate through. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> is null. 
                </exception>
    </member>
    <member name="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String,System.Int32)">
      <summary>
                    Returns an enumerator that iterates through the text elements of the string, starting at the specified index.
                </summary>
      <returns>
                    A <see cref="T:System.Globalization.TextElementEnumerator" /> for the string starting at <paramref name="index" />.
                </returns>
      <param name="str">
                    The string to iterate through. 
                </param>
      <param name="index">
                    The zero-based index at which to start iterating. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the range of valid indexes for <paramref name="str" />. 
                </exception>
    </member>
    <member name="P:System.Globalization.StringInfo.LengthInTextElements">
      <summary>
                    Gets the number of text elements in the current <see cref="T:System.Globalization.StringInfo" /> object.
                </summary>
      <returns>
                    The number of base characters, surrogate pairs, and combining character sequences in this <see cref="T:System.Globalization.StringInfo" /> object.
                </returns>
    </member>
    <member name="M:System.Globalization.StringInfo.ParseCombiningCharacters(System.String)">
      <summary>
                    Returns the index of each base character, high surrogate, or control character within the specified string.
                </summary>
      <returns>
                    An array of integers that contains the zero-based index of each base character, high surrogate, or control character within the specified string.
                </returns>
      <param name="str">
                    The string to search. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> is null. 
                </exception>
    </member>
    <member name="P:System.Globalization.StringInfo.String">
      <summary>
                    Gets or sets the value of the current <see cref="T:System.Globalization.StringInfo" /> object.
                </summary>
      <returns>
                    The string that is the value of the current <see cref="T:System.Globalization.StringInfo" /> object.
                </returns>
      <exception cref="T:System.ArgumentNullException">
                    The value in a set operation is null.
                </exception>
    </member>
    <member name="T:System.Globalization.TaiwanCalendar">
      <summary>
                    Represents the Taiwan calendar.
                </summary>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Globalization.TaiwanCalendar" /> class.
                </summary>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>
                    Returns a <see cref="T:System.DateTime" /> that is the specified number of months away from the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    The <see cref="T:System.DateTime" /> that results from adding the specified number of months to the specified <see cref="T:System.DateTime" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to which to add months. 
                </param>
      <param name="months">
                    The number of months to add. 
                </param>
      <exception cref="T:System.ArgumentException">
                    The resulting <see cref="T:System.DateTime" /> is outside the supported range. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> is less than -120000.
                
                    -or- 
                <paramref name="months" /> is greater than 120000. 
                </exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>
                    Returns a <see cref="T:System.DateTime" /> that is the specified number of years away from the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    The <see cref="T:System.DateTime" /> that results from adding the specified number of years to the specified <see cref="T:System.DateTime" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to which to add years. 
                </param>
      <param name="years">
                    The number of years to add. 
                </param>
      <exception cref="T:System.ArgumentException">
                    The resulting <see cref="T:System.DateTime" /> is outside the supported range. 
                </exception>
    </member>
    <member name="P:System.Globalization.TaiwanCalendar.Eras">
      <summary>
                    Gets the list of eras in the <see cref="T:System.Globalization.TaiwanCalendar" />.
                </summary>
      <returns>
                    An array that consists of a single element for which the value is always the current era.
                </returns>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetDayOfMonth(System.DateTime)">
      <summary>
                    Returns the day of the month in the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    An integer from 1 to 31 that represents the day of the month in the specified <see cref="T:System.DateTime" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. 
                </param>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetDayOfWeek(System.DateTime)">
      <summary>
                    Returns the day of the week in the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    A <see cref="T:System.DayOfWeek" /> value that represents the day of the week in the specified <see cref="T:System.DateTime" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. 
                </param>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetDayOfYear(System.DateTime)">
      <summary>
                    Returns the day of the year in the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    An integer from 1 to 366 that represents the day of the year in the specified <see cref="T:System.DateTime" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. 
                </param>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>
                    Returns the number of days in the specified month in the specified year in the specified era.
                </summary>
      <returns>
                    The number of days in the specified month in the specified year in the specified era.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="month">
                    An integer from 1 to 12 that represents the month. 
                </param>
      <param name="era">
                    An integer that represents the era. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="month" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="era" /> is outside the range supported by the calendar. 
                </exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>
                    Returns the number of days in the specified year in the specified era.
                </summary>
      <returns>
                    The number of days in the specified year in the specified era.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="era">
                    An integer that represents the era. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="era" /> is outside the range supported by the calendar. 
                </exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetEra(System.DateTime)">
      <summary>
                    Returns the era of a specified <see cref="T:System.DateTime" /> value.
                </summary>
      <returns>
                    An integer that represents the era of <paramref name="time" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. 
                </param>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>
                    Calculates the leap month for a specified year and era.
                </summary>
      <returns>
                    The return value is always 0 because the <see cref="T:System.Globalization.TaiwanCalendar" /> class does not support the notion of a leap month.
                </returns>
      <param name="year">
                    A year.
                </param>
      <param name="era">
                    An era.
                </param>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetMonth(System.DateTime)">
      <summary>
                    Returns the month in the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    An integer from 1 to 12 that represents the month in the specified <see cref="T:System.DateTime" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. 
                </param>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>
                    Returns the number of months in the specified year in the specified era.
                </summary>
      <returns>
                    The number of months in the specified year in the specified era.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="era">
                    An integer that represents the era. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="era" /> is outside the range supported by the calendar. 
                </exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)">
      <summary>
                    Returns the week of the year that includes the date in the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    A positive integer that represents the week of the year that includes the date in the <paramref name="time" /> parameter.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. 
                </param>
      <param name="rule">
                    One of the <see cref="T:System.Globalization.CalendarWeekRule" /> values that defines a calendar week. 
                </param>
      <param name="firstDayOfWeek">
                    One of the <see cref="T:System.DayOfWeek" /> values that represents the first day of the week. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> or <paramref name="firstDayOfWeek" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="rule" /> is not a valid <see cref="T:System.Globalization.CalendarWeekRule" /> value. 
                </exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetYear(System.DateTime)">
      <summary>
                    Returns the year in the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    An integer that represents the year in the specified <see cref="T:System.DateTime" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. 
                </param>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
                    Determines whether the specified date in the specified era is a leap day.
                </summary>
      <returns>true if the specified day is a leap day; otherwise, false.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="month">
                    An integer from 1 to 12 that represents the month. 
                </param>
      <param name="day">
                    An integer from 1 to 31 that represents the day. 
                </param>
      <param name="era">
                    An integer that represents the era. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="month" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="day" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="era" /> is outside the range supported by the calendar. 
                </exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>
                    Determines whether the specified month in the specified year in the specified era is a leap month.
                </summary>
      <returns>
                    This method always returns false, unless overridden by a derived class.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="month">
                    An integer from 1 to 12 that represents the month. 
                </param>
      <param name="era">
                    An integer that represents the era. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="month" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="era" /> is outside the range supported by the calendar. 
                </exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>
                    Determines whether the specified year in the specified era is a leap year.
                </summary>
      <returns>true if the specified year is a leap year; otherwise, false.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="era">
                    An integer that represents the era. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="era" /> is outside the range supported by the calendar. 
                </exception>
    </member>
    <member name="P:System.Globalization.TaiwanCalendar.MaxSupportedDateTime">
      <summary>
                    Gets the latest date and time supported by the <see cref="T:System.Globalization.TaiwanCalendar" /> class.
                </summary>
      <returns>
                    The latest date and time supported by the <see cref="T:System.Globalization.TaiwanCalendar" /> class, which is equivalent to the last moment of December 31, 9999 C.E. in the Gregorian calendar.
                </returns>
    </member>
    <member name="P:System.Globalization.TaiwanCalendar.MinSupportedDateTime">
      <summary>
                    Gets the earliest date and time supported by the <see cref="T:System.Globalization.TaiwanCalendar" /> class.
                </summary>
      <returns>
                    The earliest date and time supported by the <see cref="T:System.Globalization.TaiwanCalendar" /> class, which is equivalent to the first moment of January 1, 1912 C.E. in the Gregorian calendar.
                </returns>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
                    Returns a <see cref="T:System.DateTime" /> that is set to the specified date and time in the specified era.
                </summary>
      <returns>
                    The <see cref="T:System.DateTime" /> that is set to the specified date and time in the current era.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="month">
                    An integer from 1 to 12 that represents the month. 
                </param>
      <param name="day">
                    An integer from 1 to 31 that represents the day. 
                </param>
      <param name="hour">
                    An integer from 0 to 23 that represents the hour. 
                </param>
      <param name="minute">
                    An integer from 0 to 59 that represents the minute. 
                </param>
      <param name="second">
                    An integer from 0 to 59 that represents the second. 
                </param>
      <param name="millisecond">
                    An integer from 0 to 999 that represents the millisecond. 
                </param>
      <param name="era">
                    An integer that represents the era. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="month" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="day" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="hour" /> is less than zero or greater than 23.
                
                    -or- 
                <paramref name="minute" /> is less than zero or greater than 59.
                
                    -or- 
                <paramref name="second" /> is less than zero or greater than 59.
                
                    -or- 
                <paramref name="millisecond" /> is less than zero or greater than 999.
                
                    -or- 
                <paramref name="era" /> is outside the range supported by the calendar. 
                </exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.ToFourDigitYear(System.Int32)">
      <summary>
                    Converts the specified year to a four-digit year by using the <see cref="P:System.Globalization.TaiwanCalendar.TwoDigitYearMax" /> property to determine the appropriate century.
                </summary>
      <returns>
                    An integer that contains the four-digit representation of <paramref name="year" />.
                </returns>
      <param name="year">
                    A two-digit or four-digit integer that represents the year to convert. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar. 
                </exception>
    </member>
    <member name="P:System.Globalization.TaiwanCalendar.TwoDigitYearMax">
      <summary>
                    Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.
                </summary>
      <returns>
                    The last year of a 100-year range that can be represented by a 2-digit year.
                </returns>
    </member>
    <member name="T:System.Globalization.TextElementEnumerator">
      <summary>
                    Enumerates the text elements of a string. 
                </summary>
    </member>
    <member name="P:System.Globalization.TextElementEnumerator.Current">
      <summary>
                    Gets the current text element in the string.
                </summary>
      <returns>
                    An object containing the current text element in the string.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The enumerator is positioned before the first text element of the string or after the last text element. 
                </exception>
    </member>
    <member name="P:System.Globalization.TextElementEnumerator.ElementIndex">
      <summary>
                    Gets the index of the text element that the enumerator is currently positioned over.
                </summary>
      <returns>
                    The index of the text element that the enumerator is currently positioned over.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The enumerator is positioned before the first text element of the string or after the last text element. 
                </exception>
    </member>
    <member name="M:System.Globalization.TextElementEnumerator.GetTextElement">
      <summary>
                    Gets the current text element in the string.
                </summary>
      <returns>
                    A new string containing the current text element in the string being read.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The enumerator is positioned before the first text element of the string or after the last text element. 
                </exception>
    </member>
    <member name="M:System.Globalization.TextElementEnumerator.MoveNext">
      <summary>
                    Advances the enumerator to the next text element of the string.
                </summary>
      <returns>true if the enumerator was successfully advanced to the next text element; false if the enumerator has passed the end of the string.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The string was modified after the enumerator was created. 
                </exception>
    </member>
    <member name="M:System.Globalization.TextElementEnumerator.Reset">
      <summary>
                    Sets the enumerator to its initial position, which is before the first text element in the string.
                </summary>
    </member>
    <member name="T:System.Globalization.TextInfo">
      <summary>
                    Defines properties and behaviors, such as casing, that are specific to a writing system. 
                </summary>
    </member>
    <member name="P:System.Globalization.TextInfo.CultureName">
      <summary>
                    Gets the name of the culture associated with the current <see cref="T:System.Globalization.TextInfo" /> object.
                </summary>
      <returns>
                    The name of a culture. 
                </returns>
    </member>
    <member name="M:System.Globalization.TextInfo.Equals(System.Object)">
      <summary>
                    Determines whether the specified object represents the same writing system as the current <see cref="T:System.Globalization.TextInfo" /> object.
                </summary>
      <returns>true if <paramref name="obj" /> represents the same writing system as the current <see cref="T:System.Globalization.TextInfo" />; otherwise, false.
                </returns>
      <param name="obj">
                    The object to compare with the current <see cref="T:System.Globalization.TextInfo" />. 
                </param>
    </member>
    <member name="M:System.Globalization.TextInfo.GetHashCode">
      <summary>
                    Serves as a hash function for the current <see cref="T:System.Globalization.TextInfo" /> object, suitable for hashing algorithms and data structures, such as a hash table.
                </summary>
      <returns>
                    A hash code for the current <see cref="T:System.Globalization.TextInfo" />.
                </returns>
    </member>
    <member name="P:System.Globalization.TextInfo.IsReadOnly">
      <summary>
                    Gets a value indicating whether the current <see cref="T:System.Globalization.TextInfo" /> object is read-only.
                </summary>
      <returns>true if the current <see cref="T:System.Globalization.TextInfo" /> object is read-only; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Globalization.TextInfo.ListSeparator">
      <summary>
                    Gets or sets the string that separates items in a list.
                </summary>
      <returns>
                    The string that separates items in a list.
                </returns>
      <exception cref="T:System.ArgumentNullException">
                    The value in a set operation is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    In a set operation, the current <see cref="T:System.Globalization.TextInfo" /> object is read-only.
                </exception>
    </member>
    <member name="M:System.Globalization.TextInfo.ToLower(System.Char)">
      <summary>
                    Converts the specified character to lowercase.
                </summary>
      <returns>
                    The specified character converted to lowercase.
                </returns>
      <param name="c">
                    The character to convert to lowercase. 
                </param>
    </member>
    <member name="M:System.Globalization.TextInfo.ToLower(System.String)">
      <summary>
                    Converts the specified string to lowercase.
                </summary>
      <returns>
                    The specified string converted to lowercase.
                </returns>
      <param name="str">
                    The string to convert to lowercase. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> is null. 
                </exception>
    </member>
    <member name="M:System.Globalization.TextInfo.ToString">
      <summary>
                    Returns a string that represents the current <see cref="T:System.Globalization.TextInfo" />.
                </summary>
      <returns>
                    A string that represents the current <see cref="T:System.Globalization.TextInfo" />.
                </returns>
    </member>
    <member name="M:System.Globalization.TextInfo.ToUpper(System.Char)">
      <summary>
                    Converts the specified character to uppercase.
                </summary>
      <returns>
                    The specified character converted to uppercase.
                </returns>
      <param name="c">
                    The character to convert to uppercase. 
                </param>
    </member>
    <member name="M:System.Globalization.TextInfo.ToUpper(System.String)">
      <summary>
                    Converts the specified string to uppercase.
                </summary>
      <returns>
                    The specified string converted to uppercase.
                </returns>
      <param name="str">
                    The string to convert to uppercase. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> is null. 
                </exception>
    </member>
    <member name="T:System.Globalization.ThaiBuddhistCalendar">
      <summary>
                    Represents the Thai Buddhist calendar.
                </summary>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Globalization.ThaiBuddhistCalendar" /> class.
                </summary>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>
                    Returns a <see cref="T:System.DateTime" /> that is the specified number of months away from the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    The <see cref="T:System.DateTime" /> that results from adding the specified number of months to the specified <see cref="T:System.DateTime" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to which to add months. 
                </param>
      <param name="months">
                    The number of months to add. 
                </param>
      <exception cref="T:System.ArgumentException">
                    The resulting <see cref="T:System.DateTime" /> is outside the supported range. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> is less than -120000.
                
                    -or- 
                <paramref name="months" /> is greater than 120000. 
                </exception>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>
                    Returns a <see cref="T:System.DateTime" /> that is the specified number of years away from the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    The <see cref="T:System.DateTime" /> that results from adding the specified number of years to the specified <see cref="T:System.DateTime" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to which to add years. 
                </param>
      <param name="years">
                    The number of years to add. 
                </param>
      <exception cref="T:System.ArgumentException">
                    The resulting <see cref="T:System.DateTime" /> is outside the supported range. 
                </exception>
    </member>
    <member name="P:System.Globalization.ThaiBuddhistCalendar.Eras">
      <summary>
                    Gets the list of eras in the <see cref="T:System.Globalization.ThaiBuddhistCalendar" /> class.
                </summary>
      <returns>
                    An array that consists of a single element having a value that is always the current era.
                </returns>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetDayOfMonth(System.DateTime)">
      <summary>
                    Returns the day of the month in the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    An integer from 1 to 31 that represents the day of the month in the specified <see cref="T:System.DateTime" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. 
                </param>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetDayOfWeek(System.DateTime)">
      <summary>
                    Returns the day of the week in the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    A <see cref="T:System.DayOfWeek" /> value that represents the day of the week in the specified <see cref="T:System.DateTime" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. 
                </param>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetDayOfYear(System.DateTime)">
      <summary>
                    Returns the day of the year in the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    An integer from 1 to 366 that represents the day of the year in the specified <see cref="T:System.DateTime" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. 
                </param>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>
                    Returns the number of days in the specified month in the specified year in the specified era.
                </summary>
      <returns>
                    The number of days in the specified month in the specified year in the specified era.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="month">
                    An integer from 1 to 12 that represents the month. 
                </param>
      <param name="era">
                    An integer that represents the era. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="month" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="era" /> is outside the range supported by the calendar. 
                </exception>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>
                    Returns the number of days in the specified year in the specified era.
                </summary>
      <returns>
                    The number of days in the specified year in the specified era.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="era">
                    An integer that represents the era. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="era" /> is outside the range supported by the calendar. 
                </exception>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetEra(System.DateTime)">
      <summary>
                    Returns the era of a specified <see cref="T:System.DateTime" /> value.
                </summary>
      <returns>
                    An integer that represents the era of <paramref name="time" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. 
                </param>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>
                    Calculates the leap month for a specified year and era.
                </summary>
      <returns>
                    The return value is always 0 because the <see cref="T:System.Globalization.ThaiBuddhistCalendar" /> class does not support the notion of a leap month.
                </returns>
      <param name="year">
                    A year.
                </param>
      <param name="era">
                    An era.
                </param>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetMonth(System.DateTime)">
      <summary>
                    Returns the month in the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    An integer from 1 to 12 that represents the month in the specified <see cref="T:System.DateTime" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. 
                </param>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>
                    Returns the number of months in the specified year in the specified era.
                </summary>
      <returns>
                    The number of months in the specified year in the specified era.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="era">
                    An integer that represents the era. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="era" /> is outside the range supported by the calendar. 
                </exception>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)">
      <summary>
                    Returns the week of the year that includes the date in the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    A 1-based positive integer that represents the week of the year that includes the date in the <paramref name="time" /> parameter.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. 
                </param>
      <param name="rule">
                    One of the <see cref="T:System.Globalization.CalendarWeekRule" /> values that defines a calendar week. 
                </param>
      <param name="firstDayOfWeek">
                    One of the <see cref="T:System.DayOfWeek" /> values that represents the first day of the week. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> or <paramref name="firstDayOfWeek" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="rule" /> is not a valid <see cref="T:System.Globalization.CalendarWeekRule" /> value. 
                </exception>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetYear(System.DateTime)">
      <summary>
                    Returns the year in the specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    An integer that represents the year in the specified <see cref="T:System.DateTime" />.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. 
                </param>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
                    Determines whether the specified date in the specified era is a leap day.
                </summary>
      <returns>true if the specified day is a leap day; otherwise, false.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="month">
                    An integer from 1 to 12 that represents the month. 
                </param>
      <param name="day">
                    An integer from 1 to 31 that represents the day. 
                </param>
      <param name="era">
                    An integer that represents the era. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="month" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="day" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="era" /> is outside the range supported by the calendar. 
                </exception>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>
                    Determines whether the specified month in the specified year in the specified era is a leap month.
                </summary>
      <returns>
                    This method always returns false, unless overridden by a derived class.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="month">
                    An integer from 1 to 12 that represents the month. 
                </param>
      <param name="era">
                    An integer that represents the era. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="month" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="era" /> is outside the range supported by the calendar. 
                </exception>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>
                    Determines whether the specified year in the specified era is a leap year.
                </summary>
      <returns>true if the specified year is a leap year; otherwise, false.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="era">
                    An integer that represents the era. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="era" /> is outside the range supported by the calendar. 
                </exception>
    </member>
    <member name="P:System.Globalization.ThaiBuddhistCalendar.MaxSupportedDateTime">
      <summary>
                    Gets the latest date and time supported by the <see cref="T:System.Globalization.ThaiBuddhistCalendar" /> class.
                </summary>
      <returns>
                    The latest date and time supported by the <see cref="T:System.Globalization.ThaiBuddhistCalendar" /> class, which is equivalent to the last moment of December 31, 9999 C.E. in the Gregorian calendar.
                </returns>
    </member>
    <member name="P:System.Globalization.ThaiBuddhistCalendar.MinSupportedDateTime">
      <summary>
                    Gets the earliest date and time supported by the <see cref="T:System.Globalization.ThaiBuddhistCalendar" /> class.
                </summary>
      <returns>
                    The earliest date and time supported by the <see cref="T:System.Globalization.ThaiBuddhistCalendar" /> class, which is equivalent to the first moment of January 1, 0001 C.E. in the Gregorian calendar.
                </returns>
    </member>
    <member name="F:System.Globalization.ThaiBuddhistCalendar.ThaiBuddhistEra">
      <summary>
                    Represents the current era. This field is constant.
                </summary>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
                    Returns a <see cref="T:System.DateTime" /> that is set to the specified date and time in the specified era.
                </summary>
      <returns>
                    The <see cref="T:System.DateTime" /> that is set to the specified date and time in the current era.
                </returns>
      <param name="year">
                    An integer that represents the year. 
                </param>
      <param name="month">
                    An integer from 1 to 12 that represents the month. 
                </param>
      <param name="day">
                    An integer from 1 to 31 that represents the day. 
                </param>
      <param name="hour">
                    An integer from 0 to 23 that represents the hour. 
                </param>
      <param name="minute">
                    An integer from 0 to 59 that represents the minute. 
                </param>
      <param name="second">
                    An integer from 0 to 59 that represents the second. 
                </param>
      <param name="millisecond">
                    An integer from 0 to 999 that represents the millisecond. 
                </param>
      <param name="era">
                    An integer that represents the era. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="month" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="day" /> is outside the range supported by the calendar.
                
                    -or- 
                <paramref name="hour" /> is less than zero or greater than 23.
                
                    -or- 
                <paramref name="minute" /> is less than zero or greater than 59.
                
                    -or- 
                <paramref name="second" /> is less than zero or greater than 59.
                
                    -or- 
                <paramref name="millisecond" /> is less than zero or greater than 999.
                
                    -or- 
                <paramref name="era" /> is outside the range supported by the calendar. 
                </exception>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.ToFourDigitYear(System.Int32)">
      <summary>
                    Converts the specified year to a four-digit year by using the <see cref="P:System.Globalization.ThaiBuddhistCalendar.TwoDigitYearMax" /> property to determine the appropriate century.
                </summary>
      <returns>
                    An integer that contains the four-digit representation of <paramref name="year" />.
                </returns>
      <param name="year">
                    A two-digit or four-digit integer that represents the year to convert. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar. 
                </exception>
    </member>
    <member name="P:System.Globalization.ThaiBuddhistCalendar.TwoDigitYearMax">
      <summary>
                    Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.
                </summary>
      <returns>
                    The last year of a 100-year range that can be represented by a 2-digit year.
                </returns>
    </member>
    <member name="T:System.Globalization.UmAlQuraCalendar">
      <summary>
                    Represents the Saudi Hijri (Um Al Qura) calendar.
                </summary>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Globalization.UmAlQuraCalendar" /> class. 
                </summary>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>
                    Calculates a date that is a specified number of months away from a specified initial date.
                </summary>
      <returns>
                    A <see cref="T:System.DateTime" /> that represents the date yielded by adding the number of months specified by the <paramref name="months" /> parameter to the date specified by the <paramref name="time" /> parameter.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to which to add months. On Windows Vista for .NET Framework and later, the <see cref="T:System.Globalization.UmAlQuraCalendar" /> class supports only dates from 04/30/1900 00.00.00 (Gregorian date) through 05/13/2029 23:59:59 (Gregorian date).
                </param>
      <param name="months">
                    The positive or negative number of months to add. 
                </param>
      <exception cref="T:System.ArgumentException">
                    The resulting date is outside the range supported by the <see cref="T:System.Globalization.UmAlQuraCalendar" /> class. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> is less than -120,000 or greater than 120,000. 
                
                    -or-
                <paramref name="time" /> is outside the range supported by this calendar.
                </exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>
                    Calculates a date that is a specified number of years away from a specified initial date.
                </summary>
      <returns>
                    A <see cref="T:System.DateTime" /> that represents the date yielded by adding the number of years specified by the <paramref name="years" /> parameter to the date specified by the <paramref name="time" /> parameter.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to which to add years. On Windows Vista for .NET Framework and later, the <see cref="T:System.Globalization.UmAlQuraCalendar" /> class supports only dates from 04/30/1900 00.00.00 (Gregorian date) through 05/13/2029 23:59:59 (Gregorian date).
                </param>
      <param name="years">
                    The positive or negative number of years to add. 
                </param>
      <exception cref="T:System.ArgumentException">
                    The resulting date is outside the range supported by the <see cref="T:System.Globalization.UmAlQuraCalendar" /> class. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="years" /> is less than -10,000 or greater than 10,000. 
                
                    -or-
                <paramref name="time" /> is outside the range supported by this calendar.
                </exception>
    </member>
    <member name="P:System.Globalization.UmAlQuraCalendar.Eras">
      <summary>
                    Gets a list of the eras that are supported by the current <see cref="T:System.Globalization.UmAlQuraCalendar" />.
                </summary>
      <returns>
                    An array that consists of a single element having a value that is <see cref="F:System.Globalization.Calendar.CurrentEra" />.
                </returns>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetDayOfMonth(System.DateTime)">
      <summary>
                    Calculates on which day of the month a specified date occurs.
                </summary>
      <returns>
                    An integer from 1 through 30 that represents the day of the month specified by the <paramref name="time" /> parameter. 
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. On Windows Vista for .NET Framework and later, the <see cref="T:System.Globalization.UmAlQuraCalendar" /> class supports only dates from 04/30/1900 00.00.00 (Gregorian date) through 05/13/2029 23:59:59 (Gregorian date).
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> is outside the range supported by this calendar. 
                </exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetDayOfWeek(System.DateTime)">
      <summary>
                    Calculates on which day of the week a specified date occurs.
                </summary>
      <returns>
                    A <see cref="T:System.DayOfWeek" /> value that represents the day of the week specified by the <paramref name="time" /> parameter.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. On Windows Vista for .NET Framework and later, the <see cref="T:System.Globalization.UmAlQuraCalendar" /> class supports only dates from 04/30/1900 00.00.00 (Gregorian date) through 05/13/2029 23:59:59 (Gregorian date).
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> is outside the range supported by this calendar. 
                </exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetDayOfYear(System.DateTime)">
      <summary>
                    Calculates on which day of the year a specified date occurs.
                </summary>
      <returns>
                    An integer from 1 through 355 that represents the day of the year specified by the <paramref name="time" /> parameter.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. On Windows Vista for .NET Framework and later, the <see cref="T:System.Globalization.UmAlQuraCalendar" /> class supports only dates from 04/30/1900 00.00.00 (Gregorian date) through 05/13/2029 23:59:59 (Gregorian date).
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> is outside the range supported by this calendar. 
                </exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>
                    Calculates the number of days in the specified month of the specified year and era.
                </summary>
      <returns>
                    The number of days in the specified month in the specified year and era. The return value is 29 in a common year and 30 in a leap year.
                </returns>
      <param name="year">
                    A year. 
                </param>
      <param name="month">
                    An integer from 1 through 12 that represents a month. 
                </param>
      <param name="era">
                    An era. Specify <see cref="F:System.Globalization.Calendar.CurrentEra" />.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />, <paramref name="month" />, or <paramref name="era" /> is outside the range supported by the <see cref="T:System.Globalization.UmAlQuraCalendar" /> class. 
                </exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>
                    Calculates the number of days in the specified year of the specified era.
                </summary>
      <returns>
                    The number of days in the specified year and era. The number of days is 354 in a common year or 355 in a leap year.
                </returns>
      <param name="year">
                    A year. 
                </param>
      <param name="era">
                    An era. Specify <see cref="F:System.Globalization.Calendar.CurrentEra" />.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> or <paramref name="era" /> is outside the range supported by the <see cref="T:System.Globalization.UmAlQuraCalendar" /> class. 
                </exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetEra(System.DateTime)">
      <summary>
                    Returns the era of a specified <see cref="T:System.DateTime" /> value.
                </summary>
      <returns>
                    Always returns the <see cref="F:System.Globalization.Calendar.CurrentEra" /> value.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. On Windows Vista for .NET Framework and later, <see cref="T:System.Globalization.UmAlQuraCalendar" /> supports only dates from 04/30/1900 00.00.00 (Gregorian date) through 05/13/2029 23:59:59 (Gregorian date).
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> is outside the range supported by this calendar. 
                </exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>
                    Calculates the leap month for a specified year and era.
                </summary>
      <returns>
                    The return value is always 0 because the <see cref="T:System.Globalization.UmAlQuraCalendar" /> class does not support the notion of a leap month.
                </returns>
      <param name="year">
                    A year.
                </param>
      <param name="era">
                    An era. Specify <see cref="F:System.Globalization.Calendar.CurrentEra" />.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than 1318 or greater than 1450.
                
                    -or-
                <paramref name="era" /> is not <see cref="F:System.Globalization.Calendar.CurrentEra" />.
                </exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetMonth(System.DateTime)">
      <summary>
                    Calculates the month in which a specified date occurs.
                </summary>
      <returns>
                    An integer from 1 through 12 that represents the month in the date specified by the <paramref name="time" /> parameter.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. On Windows Vista for .NET Framework and later, the <see cref="T:System.Globalization.UmAlQuraCalendar" /> class supports only dates from 04/30/1900 00.00.00 (Gregorian date) through 05/13/2029 23:59:59 (Gregorian date).
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> is outside the range supported by this calendar. 
                </exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>
                    Calculates the number of months in the specified year of the specified era.
                </summary>
      <returns>
                    The return value is always 12.
                </returns>
      <param name="year">
                    A year. 
                </param>
      <param name="era">
                    An era. Specify <see cref="F:System.Globalization.Calendar.CurrentEra" />.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by this calendar. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="era" /> is outside the range supported by this calendar. 
                </exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetYear(System.DateTime)">
      <summary>
                    Calculates the year of a date represented by a specified <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    An integer that represents the year specified by the <paramref name="time" /> parameter.
                </returns>
      <param name="time">
                    The <see cref="T:System.DateTime" /> to read. On Windows Vista for .NET Framework and later, the <see cref="T:System.Globalization.UmAlQuraCalendar" /> class supports only dates from 04/30/1900 00.00.00 (Gregorian date) through 05/13/2029 23:59:59 (Gregorian date).
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> is outside the range supported by this calendar. 
                </exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
                    Determines whether the specified date is a leap day.
                </summary>
      <returns>true if the specified day is a leap day; otherwise, false. The return value is always false because the <see cref="T:System.Globalization.UmAlQuraCalendar" /> class does not support the notion of a leap day.
                </returns>
      <param name="year">
                    A year. 
                </param>
      <param name="month">
                    An integer from 1 through 12 that represents a month. 
                </param>
      <param name="day">
                    An integer from 1 through 30 that represents a day. 
                </param>
      <param name="era">
                    An era. Specify <see cref="F:System.Globalization.Calendar.CurrentEra" />.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, or <paramref name="era" /> is outside the range supported by the <see cref="T:System.Globalization.UmAlQuraCalendar" /> class. 
                </exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>
                    Determines whether the specified month in the specified year and era is a leap month.
                </summary>
      <returns>
                    The return value is always false because the <see cref="T:System.Globalization.UmAlQuraCalendar" /> class does not support the notion of a leap month.
                </returns>
      <param name="year">
                    A year. 
                </param>
      <param name="month">
                    An integer from 1 through 12 that represents a month. 
                </param>
      <param name="era">
                    An era. Specify <see cref="F:System.Globalization.Calendar.CurrentEra" />.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />, <paramref name="month" />, or <paramref name="era" /> is outside the range supported by the <see cref="T:System.Globalization.UmAlQuraCalendar" /> class. 
                </exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>
                    Determines whether the specified year in the specified era is a leap year.
                </summary>
      <returns>true if the specified year is a leap year; otherwise, false.
                </returns>
      <param name="year">
                    A year. 
                </param>
      <param name="era">
                    An era. Specify <see cref="F:System.Globalization.Calendar.CurrentEra" />.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> or <paramref name="era" /> is outside the range supported by the <see cref="T:System.Globalization.UmAlQuraCalendar" /> class. 
                </exception>
    </member>
    <member name="P:System.Globalization.UmAlQuraCalendar.MaxSupportedDateTime">
      <summary>
                    Gets the latest date and time supported by this calendar.
                </summary>
      <returns>
                    The latest date and time supported by the <see cref="T:System.Globalization.UmAlQuraCalendar" /> class, which is equivalent to the last moment of May 13, 2029 C.E. in the Gregorian calendar.
                </returns>
    </member>
    <member name="P:System.Globalization.UmAlQuraCalendar.MinSupportedDateTime">
      <summary>
                    Gets the earliest date and time supported by this calendar.
                </summary>
      <returns>
                    The earliest date and time supported by the <see cref="T:System.Globalization.UmAlQuraCalendar" /> class, which is equivalent to the first moment of April 30, 1900 C.E. in the Gregorian calendar.
                </returns>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
                    Returns a <see cref="T:System.DateTime" /> that is set to the specified date, time, and era.
                </summary>
      <returns>
                    The <see cref="T:System.DateTime" /> that is set to the specified date and time in the current era.
                </returns>
      <param name="year">
                    A year. 
                </param>
      <param name="month">
                    An integer from 1 through 12 that represents a month. 
                </param>
      <param name="day">
                    An integer from 1 through 29 that represents a day. 
                </param>
      <param name="hour">
                    An integer from 0 through 23 that represents an hour. 
                </param>
      <param name="minute">
                    An integer from 0 through 59 that represents a minute. 
                </param>
      <param name="second">
                    An integer from 0 through 59 that represents a second. 
                </param>
      <param name="millisecond">
                    An integer from 0 through 999 that represents a millisecond. 
                </param>
      <param name="era">
                    An era. Specify <see cref="F:System.Globalization.Calendar.CurrentEra" />.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, or <paramref name="era" /> is outside the range supported by the <see cref="T:System.Globalization.UmAlQuraCalendar" /> class.
                
                    -or- 
                <paramref name="hour" /> is less than zero or greater than 23.
                
                    -or- 
                <paramref name="minute" /> is less than zero or greater than 59.
                
                    -or- 
                <paramref name="second" /> is less than zero or greater than 59.
                
                    -or- 
                <paramref name="millisecond" /> is less than zero or greater than 999. 
                </exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.ToFourDigitYear(System.Int32)">
      <summary>
                    Converts the specified year to a four-digit year by using the <see cref="P:System.Globalization.UmAlQuraCalendar.TwoDigitYearMax" /> property to determine the appropriate century.
                </summary>
      <returns>
                    If the <paramref name="year" /> parameter is a 2-digit year, the return value is the corresponding 4-digit year. If the <paramref name="year" /> parameter is a 4-digit year, the return value is the unchanged <paramref name="year" /> parameter.
                </returns>
      <param name="year">
                    A 2-digit year from 0 through 99, or a 4-digit Um Al Qura calendar year from 1318 through 1450.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by this calendar. 
                </exception>
    </member>
    <member name="P:System.Globalization.UmAlQuraCalendar.TwoDigitYearMax">
      <summary>
                    Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.
                </summary>
      <returns>
                    The last year of a 100-year range that can be represented by a 2-digit year.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    This calendar is read-only.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    In a set operation, the Um Al Qura calendar year value is less than 1318 but not 99, or is greater than 1450.
                </exception>
    </member>
    <member name="T:System.Globalization.UnicodeCategory">
      <summary>
                    Defines the Unicode category of a character.
                </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.UppercaseLetter">
      <summary>
                    Indicates that the character is an uppercase letter. Signified by the Unicode designation "Lu" (letter, uppercase).
                </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.LowercaseLetter">
      <summary>
                    Indicates that the character is a lowercase letter. Signified by the Unicode designation "Ll" (letter, lowercase). 
                </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.TitlecaseLetter">
      <summary>
                    Indicates that the character is a titlecase letter. Signified by the Unicode designation "Lt" (letter, titlecase). 
                </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.ModifierLetter">
      <summary>
                    Indicates that the character is a modifier letter, which is free-standing spacing character that indicates modifications of a preceding letter. Signified by the Unicode designation "Lm" (letter, modifier). 
                </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.OtherLetter">
      <summary>
                    Indicates that the character is a letter that is not an uppercase letter, a lowercase letter, a titlecase letter, or a modifier letter. Signified by the Unicode designation "Lo" (letter, other).
                </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.NonSpacingMark">
      <summary>
                    Indicates that the character is a nonspacing character, which indicates modifications of a base character. Signified by the Unicode designation "Mn" (mark, nonspacing). 
                </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.SpacingCombiningMark">
      <summary>
                    Indicates that the character is a spacing character, which indicates modifications of a base character and affects the width of the glyph for that base character. Signified by the Unicode designation "Mc" (mark, spacing combining). 
                </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.EnclosingMark">
      <summary>
                    Indicates that the character is an enclosing mark, which is a nonspacing combining character that surrounds all previous characters up to and including a base character. Signified by the Unicode designation "Me" (mark, enclosing). 
                </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.DecimalDigitNumber">
      <summary>
                    Indicates that the character is a decimal digit, that is, in the range 0 through 9. Signified by the Unicode designation "Nd" (number, decimal digit). 
                </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.LetterNumber">
      <summary>
                    Indicates that the character is a number represented by a letter, instead of a decimal digit, for example, the Roman numeral for five, which is "V". The indicator is signified by the Unicode designation "Nl" (number, letter). 
                </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.OtherNumber">
      <summary>
                    Indicates that the character is a number that is neither a decimal digit nor a letter number, for example, the fraction 1/2. The indicator is signified by the Unicode designation "No" (number, other). 
                </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.SpaceSeparator">
      <summary>
                    Indicates that the character is a space character, which has no glyph but is not a control or format character. Signified by the Unicode designation "Zs" (separator, space). 
                </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.LineSeparator">
      <summary>
                    Indicates that the character is used to separate lines of text. Signified by the Unicode designation "Zl" (separator, line). 
                </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.ParagraphSeparator">
      <summary>
                    Indicates that the character is used to separate paragraphs. Signified by the Unicode designation "Zp" (separator, paragraph).
                </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.Control">
      <summary>
                    Indicates that the character is a control code, with a Unicode value of U+007F or in the range U+0000 through U+001F or U+0080 through U+009F. Signified by the Unicode designation "Cc" (other, control). 
                </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.Format">
      <summary>
                    Indicates that the character is a format character, which is not normally rendered but affects the layout of text or the operation of text processes. Signified by the Unicode designation "Cf" (other, format). 
                </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.Surrogate">
      <summary>
                    Indicates that the character is a high surrogate or a low surrogate. Surrogate code values are in the range U+D800 through U+DFFF. Signified by the Unicode designation "Cs" (other, surrogate). 
                </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.PrivateUse">
      <summary>
                    Indicates that the character is a private-use character, with a Unicode value in the range U+E000 through U+F8FF. Signified by the Unicode designation "Co" (other, private use). 
                </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.ConnectorPunctuation">
      <summary>
                    Indicates that the character is a connector punctuation, which connects two characters. Signified by the Unicode designation "Pc" (punctuation, connector). 
                </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.DashPunctuation">
      <summary>
                    Indicates that the character is a dash or a hyphen. Signified by the Unicode designation "Pd" (punctuation, dash). 
                </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.OpenPunctuation">
      <summary>
                    Indicates that the character is the opening character of one of the paired punctuation marks, such as parentheses, square brackets, and braces. Signified by the Unicode designation "Ps" (punctuation, open). 
                </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.ClosePunctuation">
      <summary>
                    Indicates that the character is the closing character of one of the paired punctuation marks, such as parentheses, square brackets, and braces. Signified by the Unicode designation "Pe" (punctuation, close). 
                </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.InitialQuotePunctuation">
      <summary>
                    Indicates that the character is an opening or initial quotation mark. Signified by the Unicode designation "Pi" (punctuation, initial quote). 
                </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.FinalQuotePunctuation">
      <summary>
                    Indicates that the character is a closing or final quotation mark. Signified by the Unicode designation "Pf" (punctuation, final quote). 
                </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.OtherPunctuation">
      <summary>
                    Indicates that the character is a punctuation that is not a connector punctuation, a dash punctuation, an open punctuation, a close punctuation, an initial quote punctuation, or a final quote punctuation. Signified by the Unicode designation "Po" (punctuation, other). 
                </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.MathSymbol">
      <summary>
                    Indicates that the character is a mathematical symbol, such as "+" or "= ". Signified by the Unicode designation "Sm" (symbol, math). 
                </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.CurrencySymbol">
      <summary>
                    Indicates that the character is a currency symbol. Signified by the Unicode designation "Sc" (symbol, currency). 
                </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.ModifierSymbol">
      <summary>
                    Indicates that the character is a modifier symbol, which indicates modifications of surrounding characters. For example, the fraction slash indicates that the number to the left is the numerator and the number to the right is the denominator. The indicator is signified by the Unicode designation "Sk" (symbol, modifier). 
                </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.OtherSymbol">
      <summary>
                    Indicates that the character is a symbol that is not a mathematical symbol, a currency symbol or a modifier symbol. Signified by the Unicode designation "So" (symbol, other).
                </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.OtherNotAssigned">
      <summary>
                    Indicates that the character is not assigned to any Unicode category. Signified by the Unicode designation "Cn" (other, not assigned).
                </summary>
    </member>
    <member name="T:System.IO.BinaryReader">
      <summary>
                    Reads primitive data types as binary values in a specific encoding.
                </summary>
    </member>
    <member name="M:System.IO.BinaryReader.#ctor(System.IO.Stream)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.IO.BinaryReader" /> class based on the supplied stream and using <see cref="T:System.Text.UTF8Encoding" />.
                </summary>
      <param name="input">
                    A stream. 
                </param>
      <exception cref="T:System.ArgumentException">
                    The stream does not support reading, the stream is null, or the stream is already closed. 
                </exception>
    </member>
    <member name="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.IO.BinaryReader" /> class based on the supplied stream and a specific character encoding.
                </summary>
      <param name="input">
                    The supplied stream. 
                </param>
      <param name="encoding">
                    The character encoding. 
                </param>
      <exception cref="T:System.ArgumentException">
                    The stream does not support reading, the stream is null, or the stream is already closed. 
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="encoding" /> is null. 
                </exception>
    </member>
    <member name="P:System.IO.BinaryReader.BaseStream">
      <summary>
                    Exposes access to the underlying stream of the <see cref="T:System.IO.BinaryReader" />.
                </summary>
      <returns>
                    The underlying stream associated with the BinaryReader.
                </returns>
    </member>
    <member name="M:System.IO.BinaryReader.Close">
      <summary>
                    Closes the current reader and the underlying stream.
                </summary>
    </member>
    <member name="M:System.IO.BinaryReader.Dispose(System.Boolean)">
      <summary>
                    Releases the unmanaged resources used by the <see cref="T:System.IO.BinaryReader" /> and optionally releases the managed resources.
                </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. 
                </param>
    </member>
    <member name="M:System.IO.BinaryReader.FillBuffer(System.Int32)">
      <summary>
                    Fills the internal buffer with the specified number of bytes read from the stream.
                </summary>
      <param name="numBytes">
                    The number of bytes to be read. 
                </param>
      <exception cref="T:System.IO.EndOfStreamException">
                    The end of the stream is reached before <paramref name="numBytes" /> could be read. 
                </exception>
      <exception cref="T:System.IO.IOException">
                    An I/O error occurs. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    Requested <paramref name="numBytes" /> is larger than the internal buffer size.
                </exception>
    </member>
    <member name="M:System.IO.BinaryReader.PeekChar">
      <summary>
                    Returns the next available character and does not advance the byte or character position.
                </summary>
      <returns>
                    The next available character, or -1 if no more characters are available or the stream does not support seeking.
                </returns>
      <exception cref="T:System.IO.IOException">
                    An I/O error occurs. 
                </exception>
    </member>
    <member name="M:System.IO.BinaryReader.Read">
      <summary>
                    Reads characters from the underlying stream and advances the current position of the stream in accordance with the Encoding used and the specific character being read from the stream.
                </summary>
      <returns>
                    The next character from the input stream, or -1 if no characters are currently available.
                </returns>
      <exception cref="T:System.IO.IOException">
                    An I/O error occurs. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    The stream is closed. 
                </exception>
    </member>
    <member name="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>
                    Reads <paramref name="count" /> bytes from the stream with <paramref name="index" /> as the starting point in the byte array.
                </summary>
      <returns>
                    The number of characters read into <paramref name="buffer" />. This might be less than the number of bytes requested if that many bytes are not available, or it might be zero if the end of the stream is reached.
                </returns>
      <param name="buffer">
                    The buffer to read data into. 
                </param>
      <param name="index">
                    The starting point in the buffer at which to begin reading into the buffer. 
                </param>
      <param name="count">
                    The number of characters to read. 
                </param>
      <exception cref="T:System.ArgumentException">
                    The buffer length minus <paramref name="index" /> is less than <paramref name="count" />. 
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is negative. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    The stream is closed. 
                </exception>
      <exception cref="T:System.IO.IOException">
                    An I/O error occurs. 
                </exception>
    </member>
    <member name="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>
                    Reads <paramref name="count" /> characters from the stream with <paramref name="index" /> as the starting point in the character array.
                </summary>
      <returns>
                    The total number of characters read into the buffer. This might be less than the number of characters requested if that many characters are not currently available, or it might be zero if the end of the stream is reached.
                </returns>
      <param name="buffer">
                    The buffer to read data into. 
                </param>
      <param name="index">
                    The starting point in the buffer at which to begin reading into the buffer. 
                </param>
      <param name="count">
                    The number of characters to read. 
                </param>
      <exception cref="T:System.ArgumentException">
                    The buffer length minus <paramref name="index" /> is less than <paramref name="count" />. 
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is negative. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    The stream is closed. 
                </exception>
      <exception cref="T:System.IO.IOException">
                    An I/O error occurs. 
                </exception>
    </member>
    <member name="M:System.IO.BinaryReader.Read7BitEncodedInt">
      <summary>
                    Reads in a 32-bit integer in compressed format.
                </summary>
      <returns>
                    A 32-bit integer in compressed format.
                </returns>
      <exception cref="T:System.IO.EndOfStreamException">
                    The end of the stream is reached. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    The stream is closed. 
                </exception>
      <exception cref="T:System.IO.IOException">
                    An I/O error occurs. 
                </exception>
      <exception cref="T:System.FormatException">
                    The stream is corrupted.
                </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadBoolean">
      <summary>
                    Reads a Boolean value from the current stream and advances the current position of the stream by one byte.
                </summary>
      <returns>true if the byte is nonzero; otherwise, false.
                </returns>
      <exception cref="T:System.IO.EndOfStreamException">
                    The end of the stream is reached. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    The stream is closed. 
                </exception>
      <exception cref="T:System.IO.IOException">
                    An I/O error occurs. 
                </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadByte">
      <summary>
                    Reads the next byte from the current stream and advances the current position of the stream by one byte.
                </summary>
      <returns>
                    The next byte read from the current stream.
                </returns>
      <exception cref="T:System.IO.EndOfStreamException">
                    The end of the stream is reached. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    The stream is closed. 
                </exception>
      <exception cref="T:System.IO.IOException">
                    An I/O error occurs. 
                </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
      <summary>
                    Reads <paramref name="count" /> bytes from the current stream into a byte array and advances the current position by <paramref name="count" /> bytes.
                </summary>
      <returns>
                    A byte array containing data read from the underlying stream. This might be less than the number of bytes requested if the end of the stream is reached.
                </returns>
      <param name="count">
                    The number of bytes to read. 
                </param>
      <exception cref="T:System.IO.IOException">
                    An I/O error occurs. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    The stream is closed. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is negative. 
                </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadChar">
      <summary>
                    Reads the next character from the current stream and advances the current position of the stream in accordance with the Encoding used and the specific character being read from the stream.
                </summary>
      <returns>
                    A character read from the current stream.
                </returns>
      <exception cref="T:System.IO.EndOfStreamException">
                    The end of the stream is reached. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    The stream is closed. 
                </exception>
      <exception cref="T:System.IO.IOException">
                    An I/O error occurs. 
                </exception>
      <exception cref="T:System.ArgumentException">
                    A surrogate character was read. 
                </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadChars(System.Int32)">
      <summary>
                    Reads <paramref name="count" /> characters from the current stream, returns the data in a character array, and advances the current position in accordance with the Encoding used and the specific character being read from the stream.
                </summary>
      <returns>
                    A character array containing data read from the underlying stream. This might be less than the number of characters requested if the end of the stream is reached.
                </returns>
      <param name="count">
                    The number of characters to read. 
                </param>
      <exception cref="T:System.ObjectDisposedException">
                    The stream is closed. 
                </exception>
      <exception cref="T:System.IO.IOException">
                    An I/O error occurs. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is negative. 
                </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadDouble">
      <summary>
                    Reads an 8-byte floating point value from the current stream and advances the current position of the stream by eight bytes.
                </summary>
      <returns>
                    An 8-byte floating point value read from the current stream.
                </returns>
      <exception cref="T:System.IO.EndOfStreamException">
                    The end of the stream is reached. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    The stream is closed. 
                </exception>
      <exception cref="T:System.IO.IOException">
                    An I/O error occurs. 
                </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadInt16">
      <summary>
                    Reads a 2-byte signed integer from the current stream and advances the current position of the stream by two bytes.
                </summary>
      <returns>
                    A 2-byte signed integer read from the current stream.
                </returns>
      <exception cref="T:System.IO.EndOfStreamException">
                    The end of the stream is reached. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    The stream is closed. 
                </exception>
      <exception cref="T:System.IO.IOException">
                    An I/O error occurs. 
                </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadInt32">
      <summary>
                    Reads a 4-byte signed integer from the current stream and advances the current position of the stream by four bytes.
                </summary>
      <returns>
                    A 4-byte signed integer read from the current stream.
                </returns>
      <exception cref="T:System.IO.EndOfStreamException">
                    The end of the stream is reached. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    The stream is closed. 
                </exception>
      <exception cref="T:System.IO.IOException">
                    An I/O error occurs. 
                </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadInt64">
      <summary>
                    Reads an 8-byte signed integer from the current stream and advances the current position of the stream by eight bytes.
                </summary>
      <returns>
                    An 8-byte signed integer read from the current stream.
                </returns>
      <exception cref="T:System.IO.EndOfStreamException">
                    The end of the stream is reached. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    The stream is closed. 
                </exception>
      <exception cref="T:System.IO.IOException">
                    An I/O error occurs. 
                </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadSByte">
      <summary>
                    Reads a signed byte from this stream and advances the current position of the stream by one byte.
                </summary>
      <returns>
                    A signed byte read from the current stream.
                </returns>
      <exception cref="T:System.IO.EndOfStreamException">
                    The end of the stream is reached. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    The stream is closed. 
                </exception>
      <exception cref="T:System.IO.IOException">
                    An I/O error occurs. 
                </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadSingle">
      <summary>
                    Reads a 4-byte floating point value from the current stream and advances the current position of the stream by four bytes.
                </summary>
      <returns>
                    A 4-byte floating point value read from the current stream.
                </returns>
      <exception cref="T:System.IO.EndOfStreamException">
                    The end of the stream is reached. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    The stream is closed. 
                </exception>
      <exception cref="T:System.IO.IOException">
                    An I/O error occurs. 
                </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadString">
      <summary>
                    Reads a string from the current stream. The string is prefixed with the length, encoded as an integer seven bits at a time.
                </summary>
      <returns>
                    The string being read.
                </returns>
      <exception cref="T:System.IO.EndOfStreamException">
                    The end of the stream is reached. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    The stream is closed. 
                </exception>
      <exception cref="T:System.IO.IOException">
                    An I/O error occurs. 
                </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadUInt16">
      <summary>
                    Reads a 2-byte unsigned integer from the current stream using little-endian encoding and advances the position of the stream by two bytes.
                </summary>
      <returns>
                    A 2-byte unsigned integer read from this stream.
                </returns>
      <exception cref="T:System.IO.EndOfStreamException">
                    The end of the stream is reached. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    The stream is closed. 
                </exception>
      <exception cref="T:System.IO.IOException">
                    An I/O error occurs. 
                </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadUInt32">
      <summary>
                    Reads a 4-byte unsigned integer from the current stream and advances the position of the stream by four bytes.
                </summary>
      <returns>
                    A 4-byte unsigned integer read from this stream.
                </returns>
      <exception cref="T:System.IO.EndOfStreamException">
                    The end of the stream is reached. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    The stream is closed. 
                </exception>
      <exception cref="T:System.IO.IOException">
                    An I/O error occurs. 
                </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadUInt64">
      <summary>
                    Reads an 8-byte unsigned integer from the current stream and advances the position of the stream by eight bytes.
                </summary>
      <returns>
                    An 8-byte unsigned integer read from this stream.
                </returns>
      <exception cref="T:System.IO.EndOfStreamException">
                    The end of the stream is reached. 
                </exception>
      <exception cref="T:System.IO.IOException">
                    An I/O error occurs. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    The stream is closed. 
                </exception>
    </member>
    <member name="M:System.IO.BinaryReader.System#IDisposable#Dispose">
      <summary>
                    Releases all resources used by the <see cref="T:System.IO.BinaryWriter" />.
                </summary>
    </member>
    <member name="T:System.IO.BinaryWriter">
      <summary>
                    Writes primitive types in binary to a stream and supports writing strings in a specific encoding.
                </summary>
    </member>
    <member name="M:System.IO.BinaryWriter.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.IO.BinaryWriter" /> class that writes to a stream.
                </summary>
    </member>
    <member name="M:System.IO.BinaryWriter.#ctor(System.IO.Stream)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.IO.BinaryWriter" /> class based on the supplied stream and using UTF-8 as the encoding for strings.
                </summary>
      <param name="output">
                    The output stream. 
                </param>
      <exception cref="T:System.ArgumentException">
                    The stream does not support writing, or the stream is already closed. 
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="output" /> is null. 
                </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.IO.BinaryWriter" /> class based on the supplied stream and a specific character encoding.
                </summary>
      <param name="output">
                    The supplied stream. 
                </param>
      <param name="encoding">
                    The character encoding. 
                </param>
      <exception cref="T:System.ArgumentException">
                    The stream does not support writing, or the stream is already closed. 
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="output" /> or <paramref name="encoding" /> is null. 
                </exception>
    </member>
    <member name="P:System.IO.BinaryWriter.BaseStream">
      <summary>
                    Gets the underlying stream of the <see cref="T:System.IO.BinaryWriter" />.
                </summary>
      <returns>
                    The underlying stream associated with the BinaryWriter.
                </returns>
    </member>
    <member name="M:System.IO.BinaryWriter.Close">
      <summary>
                    Closes the current <see cref="T:System.IO.BinaryWriter" /> and the underlying stream.
                </summary>
    </member>
    <member name="M:System.IO.BinaryWriter.Dispose(System.Boolean)">
      <summary>
                    Releases the unmanaged resources used by the <see cref="T:System.IO.BinaryWriter" /> and optionally releases the managed resources.
                </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. 
                </param>
    </member>
    <member name="M:System.IO.BinaryWriter.Flush">
      <summary>
                    Clears all buffers for the current writer and causes any buffered data to be written to the underlying device.
                </summary>
    </member>
    <member name="F:System.IO.BinaryWriter.Null">
      <summary>
                    Specifies a <see cref="T:System.IO.BinaryWriter" /> with no backing store.
                </summary>
    </member>
    <member name="F:System.IO.BinaryWriter.OutStream">
      <summary>
                    Holds the underlying stream.
                </summary>
    </member>
    <member name="M:System.IO.BinaryWriter.Seek(System.Int32,System.IO.SeekOrigin)">
      <summary>
                    Sets the position within the current stream.
                </summary>
      <returns>
                    The position with the current stream.
                </returns>
      <param name="offset">
                    A byte offset relative to <paramref name="origin" />. 
                </param>
      <param name="origin">
                    A field of <see cref="T:System.IO.SeekOrigin" /> indicating the reference point from which the new position is to be obtained. 
                </param>
      <exception cref="T:System.IO.IOException">
                    The file pointer was moved to an invalid location. 
                </exception>
      <exception cref="T:System.ArgumentException">
                    The <see cref="T:System.IO.SeekOrigin" /> value is invalid. 
                </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.System#IDisposable#Dispose">
      <summary>
                    Releases the unmanaged resources used by the <see cref="T:System.IO.BinaryWriter" /> and optionally releases the managed resources.
                </summary>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Boolean)">
      <summary>
                    Writes a one-byte Boolean value to the current stream, with 0 representing false and 1 representing true.
                </summary>
      <param name="value">
                    The Boolean value to write (0 or 1). 
                </param>
      <exception cref="T:System.IO.IOException">
                    An I/O error occurs. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    The stream is closed. 
                </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Byte)">
      <summary>
                    Writes an unsigned byte to the current stream and advances the stream position by one byte.
                </summary>
      <param name="value">
                    The unsigned byte to write. 
                </param>
      <exception cref="T:System.IO.IOException">
                    An I/O error occurs. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    The stream is closed. 
                </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Byte[])">
      <summary>
                    Writes a byte array to the underlying stream.
                </summary>
      <param name="buffer">
                    A byte array containing the data to write. 
                </param>
      <exception cref="T:System.IO.IOException">
                    An I/O error occurs. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    The stream is closed. 
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. 
                </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>
                    Writes a region of a byte array to the current stream.
                </summary>
      <param name="buffer">
                    A byte array containing the data to write. 
                </param>
      <param name="index">
                    The starting point in <paramref name="buffer" /> at which to begin writing. 
                </param>
      <param name="count">
                    The number of bytes to write. 
                </param>
      <exception cref="T:System.ArgumentException">
                    The buffer length minus <paramref name="index" /> is less than <paramref name="count" />. 
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is negative. 
                </exception>
      <exception cref="T:System.IO.IOException">
                    An I/O error occurs. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    The stream is closed. 
                </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Char)">
      <summary>
                    Writes a Unicode character to the current stream and advances the current position of the stream in accordance with the Encoding used and the specific characters being written to the stream.
                </summary>
      <param name="ch">
                    The non-surrogate, Unicode character to write. 
                </param>
      <exception cref="T:System.IO.IOException">
                    An I/O error occurs. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    The stream is closed. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ch" /> is a single surrogate character.
                </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Char[])">
      <summary>
                    Writes a character array to the current stream and advances the current position of the stream in accordance with the Encoding used and the specific characters being written to the stream.
                </summary>
      <param name="chars">
                    A character array containing the data to write. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is null. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    The stream is closed. 
                </exception>
      <exception cref="T:System.IO.IOException">
                    An I/O error occurs. 
                </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>
                    Writes a section of a character array to the current stream, and advances the current position of the stream in accordance with the Encoding used and perhaps the specific characters being written to the stream.
                </summary>
      <param name="chars">
                    A character array containing the data to write. 
                </param>
      <param name="index">
                    The starting point in <paramref name="buffer" /> from which to begin writing. 
                </param>
      <param name="count">
                    The number of characters to write. 
                </param>
      <exception cref="T:System.ArgumentException">
                    The buffer length minus <paramref name="index" /> is less than <paramref name="count" />. 
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is negative. 
                </exception>
      <exception cref="T:System.IO.IOException">
                    An I/O error occurs. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    The stream is closed. 
                </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Double)">
      <summary>
                    Writes an eight-byte floating-point value to the current stream and advances the stream position by eight bytes.
                </summary>
      <param name="value">
                    The eight-byte floating-point value to write. 
                </param>
      <exception cref="T:System.IO.IOException">
                    An I/O error occurs. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    The stream is closed. 
                </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Int16)">
      <summary>
                    Writes a two-byte signed integer to the current stream and advances the stream position by two bytes.
                </summary>
      <param name="value">
                    The two-byte signed integer to write. 
                </param>
      <exception cref="T:System.IO.IOException">
                    An I/O error occurs. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    The stream is closed. 
                </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Int32)">
      <summary>
                    Writes a four-byte signed integer to the current stream and advances the stream position by four bytes.
                </summary>
      <param name="value">
                    The four-byte signed integer to write. 
                </param>
      <exception cref="T:System.IO.IOException">
                    An I/O error occurs. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    The stream is closed. 
                </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Int64)">
      <summary>
                    Writes an eight-byte signed integer to the current stream and advances the stream position by eight bytes.
                </summary>
      <param name="value">
                    The eight-byte signed integer to write. 
                </param>
      <exception cref="T:System.IO.IOException">
                    An I/O error occurs. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    The stream is closed. 
                </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.SByte)">
      <summary>
                    Writes a signed byte to the current stream and advances the stream position by one byte.
                </summary>
      <param name="value">
                    The signed byte to write. 
                </param>
      <exception cref="T:System.IO.IOException">
                    An I/O error occurs. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    The stream is closed. 
                </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Single)">
      <summary>
                    Writes a four-byte floating-point value to the current stream and advances the stream position by four bytes.
                </summary>
      <param name="value">
                    The four-byte floating-point value to write. 
                </param>
      <exception cref="T:System.IO.IOException">
                    An I/O error occurs. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    The stream is closed. 
                </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.String)">
      <summary>
                    Writes a length-prefixed string to this stream in the current encoding of the <see cref="T:System.IO.BinaryWriter" />, and advances the current position of the stream in accordance with the encoding used and the specific characters being written to the stream.
                </summary>
      <param name="value">
                    The value to write. 
                </param>
      <exception cref="T:System.IO.IOException">
                    An I/O error occurs. 
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    The stream is closed. 
                </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.UInt16)">
      <summary>
                    Writes a two-byte unsigned integer to the current stream and advances the stream position by two bytes.
                </summary>
      <param name="value">
                    The two-byte unsigned integer to write. 
                </param>
      <exception cref="T:System.IO.IOException">
                    An I/O error occurs. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    The stream is closed. 
                </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.UInt32)">
      <summary>
                    Writes a four-byte unsigned integer to the current stream and advances the stream position by four bytes.
                </summary>
      <param name="value">
                    The four-byte unsigned integer to write. 
                </param>
      <exception cref="T:System.IO.IOException">
                    An I/O error occurs. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    The stream is closed. 
                </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.UInt64)">
      <summary>
                    Writes an eight-byte unsigned integer to the current stream and advances the stream position by eight bytes.
                </summary>
      <param name="value">
                    The eight-byte unsigned integer to write. 
                </param>
      <exception cref="T:System.IO.IOException">
                    An I/O error occurs. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    The stream is closed. 
                </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write7BitEncodedInt(System.Int32)">
      <summary>
                    Writes a 32-bit integer in a compressed format.
                </summary>
      <param name="value">
                    The 32-bit integer to be written. 
                </param>
      <exception cref="T:System.IO.EndOfStreamException">
                    The end of the stream is reached. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    The stream is closed. 
                </exception>
      <exception cref="T:System.IO.IOException">
                    The stream is closed. 
                </exception>
    </member>
    <member name="T:System.IO.Directory">
      <summary>
                    Exposes static methods for creating, moving, and enumerating through directories and subdirectories. This class cannot be inherited.
                </summary>
    </member>
    <member name="M:System.IO.Directory.CreateDirectory(System.String)">
      <summary>[SECURITY CRITICAL] 
                    Creates all directories and subdirectories as specified by <paramref name="path" />.
                </summary>
      <returns>
                    A <see cref="T:System.IO.DirectoryInfo" /> as specified by <paramref name="path" />.
                </returns>
      <param name="path">
                    The directory path to create. 
                </param>
    </member>
    <member name="M:System.IO.Directory.Delete(System.String)">
      <summary>[SECURITY CRITICAL] 
                    Deletes an empty directory from a specified path.
                </summary>
      <param name="path">
                    The name of the empty directory to remove. This directory must be writable or empty. 
                </param>
    </member>
    <member name="M:System.IO.Directory.Delete(System.String,System.Boolean)">
      <summary>[SECURITY CRITICAL] 
                    Deletes the specified directory and, if indicated, any subdirectories in the directory.
                </summary>
      <param name="path">
                    The name of the directory to remove. 
                </param>
      <param name="recursive">true to remove directories, subdirectories, and files in <paramref name="path" />; otherwise, false. 
                </param>
    </member>
    <member name="M:System.IO.Directory.Exists(System.String)">
      <summary>[SECURITY CRITICAL] 
                    Determines whether the given path refers to an existing directory on disk.
                </summary>
      <returns>true if <paramref name="path" /> refers to an existing directory; otherwise, false.
                </returns>
      <param name="path">
                    The path to test. 
                </param>
    </member>
    <member name="M:System.IO.Directory.GetCreationTime(System.String)">
      <summary>[SECURITY CRITICAL] 
                    Gets the creation date and time of a directory.
                </summary>
      <returns>
                    A <see cref="T:System.DateTime" /> structure set to the creation date and time for the specified directory. This value is expressed in local time.
                </returns>
      <param name="path">
                    The path of the directory. 
                </param>
    </member>
    <member name="M:System.IO.Directory.GetCurrentDirectory">
      <summary>[SECURITY CRITICAL] 
                    Gets the current working directory of the application.
                </summary>
      <returns>
                    A string containing the path of the current working directory.
                </returns>
    </member>
    <member name="M:System.IO.Directory.GetDirectories(System.String)">
      <summary>[SECURITY CRITICAL] 
                    Gets the names of subdirectories in the specified directory.
                </summary>
      <returns>
                    An array of type String containing the names of subdirectories in <paramref name="path" />.
                </returns>
      <param name="path">
                    The path for which an array of subdirectory names is returned. 
                </param>
    </member>
    <member name="M:System.IO.Directory.GetDirectories(System.String,System.String)">
      <summary>[SECURITY CRITICAL] 
                    Gets an array of directories matching the specified search pattern from the current directory.
                </summary>
      <returns>
                    A String array of directories matching the search pattern.
                </returns>
      <param name="path">
                    The path to search. 
                </param>
      <param name="searchPattern">
                    The search string to match against the names of files in <paramref name="path" />. The parameter cannot end in two periods ("..") or contain two periods ("..") followed by <see cref="F:System.IO.Path.DirectorySeparatorChar" /> or <see cref="F:System.IO.Path.AltDirectorySeparatorChar" />. 
                </param>
    </member>
    <member name="M:System.IO.Directory.GetDirectoryRoot(System.String)">
      <summary>[SECURITY CRITICAL] 
                    Returns the volume information, root information, or both for the specified path.
                </summary>
      <returns>
                    A string containing the volume information, root information, or both for the specified path.
                </returns>
      <param name="path">
                    The path of a file or directory. 
                </param>
    </member>
    <member name="M:System.IO.Directory.GetFiles(System.String)">
      <summary>[SECURITY CRITICAL] 
                    Returns the names of files in the specified directory.
                </summary>
      <returns>
                    A String array of file names in the specified directory.
                </returns>
      <param name="path">
                    The directory from which to retrieve the files. 
                </param>
    </member>
    <member name="M:System.IO.Directory.GetFiles(System.String,System.String)">
      <summary>[SECURITY CRITICAL] 
                    Returns the names of files in the specified directory that match the specified search pattern.
                </summary>
      <returns>
                    A String array containing the names of files in the specified directory that match the specified search pattern.
                </returns>
      <param name="path">
                    The directory to search. 
                </param>
      <param name="searchPattern">
                    The search string to match against the names of files in <paramref name="path" />. The parameter cannot end in two periods ("..") or contain two periods ("..") followed by <see cref="F:System.IO.Path.DirectorySeparatorChar" /> or <see cref="F:System.IO.Path.AltDirectorySeparatorChar" />, nor can it contain any of the characters. 
                </param>
    </member>
    <member name="M:System.IO.Directory.GetFileSystemEntries(System.String)">
      <summary>[SECURITY CRITICAL] 
                    Returns the names of all files and subdirectories in the specified directory.
                </summary>
      <returns>
                    A String array containing the names of file system entries in the specified directory.
                </returns>
      <param name="path">
                    The directory for which file and subdirectory names are returned. 
                </param>
    </member>
    <member name="M:System.IO.Directory.GetFileSystemEntries(System.String,System.String)">
      <summary>[SECURITY CRITICAL] 
                    Returns an array of file system entries matching the specified search criteria.
                </summary>
      <returns>
                    A String array of file system entries matching the search criteria.
                </returns>
      <param name="path">
                    The path to be searched. 
                </param>
      <param name="searchPattern">
                    The search string to match against the names of files in <paramref name="path" />. The <paramref name="searchPattern" /> parameter cannot end in two periods ("..") or contain two periods ("..") followed by <see cref="F:System.IO.Path.DirectorySeparatorChar" /> or <see cref="F:System.IO.Path.AltDirectorySeparatorChar" />. 
                </param>
    </member>
    <member name="M:System.IO.Directory.GetLastAccessTime(System.String)">
      <summary>[SECURITY CRITICAL] 
                    Returns the date and time the specified file or directory was last accessed.
                </summary>
      <returns>
                    A <see cref="T:System.DateTime" /> structure set to the date and time the specified file or directory was last accessed. This value is expressed in local time.
                </returns>
      <param name="path">
                    The file or directory for which to obtain access date and time information. 
                </param>
    </member>
    <member name="M:System.IO.Directory.GetLastWriteTime(System.String)">
      <summary>[SECURITY CRITICAL] 
                    Returns the date and time the specified file or directory was last written to.
                </summary>
      <returns>
                    A <see cref="T:System.DateTime" /> structure set to the date and time the specified file or directory was last written to. This value is expressed in local time.
                </returns>
      <param name="path">
                    The file or directory for which to obtain modification date and time information. 
                </param>
    </member>
    <member name="M:System.IO.Directory.Move(System.String,System.String)">
      <summary>[SECURITY CRITICAL] 
                    Moves a file or a directory and its contents to a new location.
                </summary>
      <param name="sourceDirName">
                    The path of the file or directory to move. 
                </param>
      <param name="destDirName">
                    The path to the new location for <paramref name="sourceDirName" />. If <paramref name="sourceDirName" /> is a file, then <paramref name="destDirName" /> must also be a file name.
                </param>
    </member>
    <member name="M:System.IO.Directory.SetCurrentDirectory(System.String)">
      <summary>[SECURITY CRITICAL] 
                    Sets the application's current working directory to the specified directory.
                </summary>
      <param name="path">
                    The path to which the current working directory is set. 
                </param>
    </member>
    <member name="T:System.IO.DirectoryInfo">
      <summary>
                    Exposes instance methods for creating, moving, and enumerating through directories and subdirectories. This class cannot be inherited.
                </summary>
    </member>
    <member name="M:System.IO.DirectoryInfo.#ctor(System.String)">
      <summary>[SECURITY CRITICAL] 
                    This class cannot be used for Silverlight-based applications. For information about storing data, see Isolated Storage.
                </summary>
      <param name="path">
                    A string specifying the path on which to create the DirectoryInfo. 
                </param>
    </member>
    <member name="M:System.IO.DirectoryInfo.Create">
      <summary>[SECURITY CRITICAL] 
                    Creates a directory.
                </summary>
    </member>
    <member name="M:System.IO.DirectoryInfo.CreateSubdirectory(System.String)">
      <summary>[SECURITY CRITICAL] 
                    Creates a subdirectory or subdirectories on the specified path. The specified path can be relative to this instance of the <see cref="T:System.IO.DirectoryInfo" /> class.
                </summary>
      <returns>
                    The last directory specified in <paramref name="path" />.
                </returns>
      <param name="path">
                    The specified path. This cannot be a different disk volume or Universal Naming Convention (UNC) name. 
                </param>
    </member>
    <member name="M:System.IO.DirectoryInfo.Delete">
      <summary>[SECURITY CRITICAL] 
                    Deletes this <see cref="T:System.IO.DirectoryInfo" /> if it is empty.
                </summary>
    </member>
    <member name="M:System.IO.DirectoryInfo.Delete(System.Boolean)">
      <summary>[SECURITY CRITICAL] 
                    Deletes this instance of a <see cref="T:System.IO.DirectoryInfo" />, specifying whether to delete subdirectories and files.
                </summary>
      <param name="recursive">true to delete this directory, its subdirectories, and all files; otherwise, false. 
                </param>
    </member>
    <member name="P:System.IO.DirectoryInfo.Exists">
      <summary>
                    Gets a value indicating whether the directory exists.
                </summary>
      <returns>true if the directory exists; otherwise, false.
                </returns>
    </member>
    <member name="M:System.IO.DirectoryInfo.GetDirectories">
      <summary>[SECURITY CRITICAL] 
                    Returns the subdirectories of the current directory.
                </summary>
      <returns>
                    An array of <see cref="T:System.IO.DirectoryInfo" /> objects.
                </returns>
    </member>
    <member name="M:System.IO.DirectoryInfo.GetDirectories(System.String)">
      <summary>[SECURITY CRITICAL] 
                    Returns an array of directories in the current <see cref="T:System.IO.DirectoryInfo" /> matching the given search criteria.
                </summary>
      <returns>
                    An array of type DirectoryInfo matching <paramref name="searchPattern" />.
                </returns>
      <param name="searchPattern">
                    The search string, such as "System*", used to search for all directories beginning with the word "System". 
                </param>
    </member>
    <member name="M:System.IO.DirectoryInfo.GetFiles">
      <summary>[SECURITY CRITICAL] 
                    Returns a file list from the current directory.
                </summary>
      <returns>
                    An array of type <see cref="T:System.IO.FileInfo" />.
                </returns>
    </member>
    <member name="M:System.IO.DirectoryInfo.GetFiles(System.String)">
      <summary>[SECURITY CRITICAL] 
                    Returns a file list from the current directory matching the given <paramref name="searchPattern" />.
                </summary>
      <returns>
                    An array of type <see cref="T:System.IO.FileInfo" />.
                </returns>
      <param name="searchPattern">
                    The search string, such as "*.txt". 
                </param>
    </member>
    <member name="M:System.IO.DirectoryInfo.GetFileSystemInfos">
      <summary>[SECURITY CRITICAL] 
                    Returns an array of strongly typed <see cref="T:System.IO.FileSystemInfo" /> entries representing all the files and subdirectories in a directory.
                </summary>
      <returns>
                    An array of strongly typed <see cref="T:System.IO.FileSystemInfo" /> entries.
                </returns>
    </member>
    <member name="M:System.IO.DirectoryInfo.GetFileSystemInfos(System.String)">
      <summary>[SECURITY CRITICAL] 
                    Retrieves an array of strongly typed <see cref="T:System.IO.FileSystemInfo" /> objects representing the files and subdirectories matching the specified search criteria.
                </summary>
      <returns>
                    An array of strongly typed FileSystemInfo objects matching the search criteria.
                </returns>
      <param name="searchPattern">
                    The search string, such as "System*", used to search for all directories beginning with the word "System". 
                </param>
    </member>
    <member name="M:System.IO.DirectoryInfo.MoveTo(System.String)">
      <summary>[SECURITY CRITICAL] 
                    Moves a <see cref="T:System.IO.DirectoryInfo" /> instance and its contents to a new path.
                </summary>
      <param name="destDirName">
                    The name and path to which to move this directory. The destination cannot be another disk volume or a directory with the identical name. It can be an existing directory to which you want to add this directory as a subdirectory. 
                </param>
    </member>
    <member name="P:System.IO.DirectoryInfo.Name">
      <summary>
                    Gets the name of this <see cref="T:System.IO.DirectoryInfo" /> instance.
                </summary>
      <returns>
                    The directory name.
                </returns>
    </member>
    <member name="P:System.IO.DirectoryInfo.Parent">
      <summary>[SECURITY CRITICAL] 
                    Gets the parent directory of a specified subdirectory.
                </summary>
      <returns>
                    The parent directory, or null if the path is null or if the file path denotes a root (such as "\", "C:", or * "\\server\share").
                </returns>
    </member>
    <member name="P:System.IO.DirectoryInfo.Root">
      <summary>[SECURITY CRITICAL] 
                    Gets the root portion of a path.
                </summary>
      <returns>
                    A <see cref="T:System.IO.DirectoryInfo" /> object representing the root of a path.
                </returns>
    </member>
    <member name="M:System.IO.DirectoryInfo.ToString">
      <summary>
                    Returns the original path that was passed by the user.
                </summary>
      <returns>
                    Returns the original path that was passed by the user.
                </returns>
    </member>
    <member name="T:System.IO.DirectoryNotFoundException">
      <summary>
                    The exception that is thrown when part of a file or directory cannot be found.
                </summary>
    </member>
    <member name="M:System.IO.DirectoryNotFoundException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.IO.DirectoryNotFoundException" /> class.
                </summary>
    </member>
    <member name="M:System.IO.DirectoryNotFoundException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.IO.DirectoryNotFoundException" /> class with its message string set to <paramref name="message" />.
                </summary>
      <param name="message">
                    A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture. 
                </param>
    </member>
    <member name="M:System.IO.DirectoryNotFoundException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.IO.DirectoryNotFoundException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
                </summary>
      <param name="message">
                    The error message that explains the reason for the exception. 
                </param>
      <param name="innerException">
                    The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. 
                </param>
    </member>
    <member name="T:System.IO.EndOfStreamException">
      <summary>
                    The exception that is thrown when reading is attempted past the end of a stream.
                </summary>
    </member>
    <member name="M:System.IO.EndOfStreamException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.IO.EndOfStreamException" /> class with its message string set to a system-supplied message.
                </summary>
    </member>
    <member name="M:System.IO.EndOfStreamException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.IO.EndOfStreamException" /> class with its message string set to <paramref name="message" /> and its HRESULT set to COR_E_ENDOFSTREAM.
                </summary>
      <param name="message">
                    A string that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture. 
                </param>
    </member>
    <member name="M:System.IO.EndOfStreamException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.IO.EndOfStreamException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
                </summary>
      <param name="message">
                    A string that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture. 
                </param>
      <param name="innerException">
                    The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. 
                </param>
    </member>
    <member name="T:System.IO.File">
      <summary>
                    Provides static methods for the creation, copying, deletion, moving, and opening of files, and aids in the creation of <see cref="T:System.IO.FileStream" /> objects.
                </summary>
    </member>
    <member name="M:System.IO.File.AppendText(System.String)">
      <summary>[SECURITY CRITICAL] 
                    Creates a <see cref="T:System.IO.StreamWriter" /> that appends UTF-8 encoded text to an existing file.
                </summary>
      <returns>
                    A StreamWriter that appends UTF-8 encoded text to an existing file.
                </returns>
      <param name="path">
                    The path to the file to append to. 
                </param>
    </member>
    <member name="M:System.IO.File.Copy(System.String,System.String)">
      <summary>[SECURITY CRITICAL] 
                    Copies an existing file to a new file. Overwriting a file of the same name is not allowed.
                </summary>
      <param name="sourceFileName">
                    The file to copy. 
                </param>
      <param name="destFileName">
                    The name of the destination file. This cannot be a directory or an existing file. 
                </param>
    </member>
    <member name="M:System.IO.File.Copy(System.String,System.String,System.Boolean)">
      <summary>[SECURITY CRITICAL] 
                    Copies an existing file to a new file. Overwriting a file of the same name is allowed.
                </summary>
      <param name="sourceFileName">
                    The file to copy. 
                </param>
      <param name="destFileName">
                    The name of the destination file. This cannot be a directory. 
                </param>
      <param name="overwrite">true if the destination file can be overwritten; otherwise, false. 
                </param>
    </member>
    <member name="M:System.IO.File.Create(System.String)">
      <summary>[SECURITY CRITICAL] 
                    Creates or overwrites a file in the specified path.
                </summary>
      <returns>
                    A <see cref="T:System.IO.FileStream" /> that provides read/write access to the file specified in <paramref name="path" />.
                </returns>
      <param name="path">
                    The path and name of the file to create. 
                </param>
    </member>
    <member name="M:System.IO.File.Create(System.String,System.Int32)">
      <summary>[SECURITY CRITICAL] 
                    Creates or overwrites the specified file.
                </summary>
      <returns>
                    A <see cref="T:System.IO.FileStream" /> with the specified buffer size that provides read/write access to the file specified in <paramref name="path" />.
                </returns>
      <param name="path">
                    The name of the file. 
                </param>
      <param name="bufferSize">
                    The number of bytes buffered for reads and writes to the file. 
                </param>
    </member>
    <member name="M:System.IO.File.CreateText(System.String)">
      <summary>[SECURITY CRITICAL] 
                    Creates or opens a file for writing UTF-8 encoded text.
                </summary>
      <returns>
                    A <see cref="T:System.IO.StreamWriter" /> that writes to the specified file using UTF-8 encoding.
                </returns>
      <param name="path">
                    The file to be opened for writing. 
                </param>
    </member>
    <member name="M:System.IO.File.Delete(System.String)">
      <summary>[SECURITY CRITICAL] 
                    Deletes the specified file. An exception is not thrown if the specified file does not exist.
                </summary>
      <param name="path">
                    The name of the file to be deleted. 
                </param>
    </member>
    <member name="M:System.IO.File.Exists(System.String)">
      <summary>[SECURITY CRITICAL] 
                    Determines whether the specified file exists.
                </summary>
      <returns>true if the caller has the required permissions and <paramref name="path" /> contains the name of an existing file; otherwise, false. This method also returns false if <paramref name="path" /> is null, an invalid path, or a zero-length string. If the caller does not have sufficient permissions to read the specified file, no exception is thrown and the method returns false regardless of the existence of <paramref name="path" />.
                </returns>
      <param name="path">
                    The file to check. 
                </param>
    </member>
    <member name="M:System.IO.File.GetCreationTime(System.String)">
      <summary>[SECURITY CRITICAL] 
                    Returns the creation date and time of the specified file or directory.
                </summary>
      <returns>
                    A <see cref="T:System.DateTime" /> structure set to the creation date and time for the specified file or directory. This value is expressed in local time.
                </returns>
      <param name="path">
                    The file or directory for which to obtain creation date and time information. 
                </param>
    </member>
    <member name="M:System.IO.File.GetLastAccessTime(System.String)">
      <summary>[SECURITY CRITICAL] 
                    Returns the date and time the specified file or directory was last accessed.
                </summary>
      <returns>
                    A <see cref="T:System.DateTime" /> structure set to the date and time that the specified file or directory was last accessed. This value is expressed in local time.
                </returns>
      <param name="path">
                    The file or directory for which to obtain access date and time information. 
                </param>
    </member>
    <member name="M:System.IO.File.GetLastWriteTime(System.String)">
      <summary>[SECURITY CRITICAL] 
                    Returns the date and time the specified file or directory was last written to.
                </summary>
      <returns>
                    A <see cref="T:System.DateTime" /> structure set to the date and time that the specified file or directory was last written to. This value is expressed in local time.
                </returns>
      <param name="path">
                    The file or directory for which to obtain write date and time information. 
                </param>
    </member>
    <member name="M:System.IO.File.Move(System.String,System.String)">
      <summary>[SECURITY CRITICAL] 
                    Moves a specified file to a new location, providing the option to specify a new file name.
                </summary>
      <param name="sourceFileName">
                    The name of the file to move. 
                </param>
      <param name="destFileName">
                    The new path for the file. 
                </param>
    </member>
    <member name="M:System.IO.File.Open(System.String,System.IO.FileMode)">
      <summary>[SECURITY CRITICAL] 
                    Opens a <see cref="T:System.IO.FileStream" /> on the specified path with read/write access.
                </summary>
      <returns>
                    A <see cref="T:System.IO.FileStream" /> opened in the specified mode and path, with read/write access and not shared.
                </returns>
      <param name="path">
                    The file to open. 
                </param>
      <param name="mode">
                    A <see cref="T:System.IO.FileMode" /> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten. 
                </param>
    </member>
    <member name="M:System.IO.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess)">
      <summary>[SECURITY CRITICAL] 
                    Opens a <see cref="T:System.IO.FileStream" /> on the specified path, with the specified mode and access.
                </summary>
      <returns>
                    An unshared <see cref="T:System.IO.FileStream" /> that provides access to the specified file, with the specified mode and access.
                </returns>
      <param name="path">
                    The file to open. 
                </param>
      <param name="mode">
                    A <see cref="T:System.IO.FileMode" /> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten. 
                </param>
      <param name="access">
                    A <see cref="T:System.IO.FileAccess" /> value that specifies the operations that can be performed on the file. 
                </param>
    </member>
    <member name="M:System.IO.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
      <summary>[SECURITY CRITICAL] 
                    Opens a <see cref="T:System.IO.FileStream" /> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.
                </summary>
      <returns>
                    A <see cref="T:System.IO.FileStream" /> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.
                </returns>
      <param name="path">
                    The file to open. 
                </param>
      <param name="mode">
                    A <see cref="T:System.IO.FileMode" /> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten. 
                </param>
      <param name="access">
                    A <see cref="T:System.IO.FileAccess" /> value that specifies the operations that can be performed on the file. 
                </param>
      <param name="share">
                    A <see cref="T:System.IO.FileShare" /> value specifying the type of access other threads have to the file. 
                </param>
    </member>
    <member name="M:System.IO.File.OpenRead(System.String)">
      <summary>[SECURITY CRITICAL] 
                    Opens an existing file for reading.
                </summary>
      <returns>
                    A read-only <see cref="T:System.IO.FileStream" /> on the specified path.
                </returns>
      <param name="path">
                    The file to be opened for reading. 
                </param>
    </member>
    <member name="M:System.IO.File.OpenText(System.String)">
      <summary>[SECURITY CRITICAL] 
                    Opens an existing UTF-8 encoded text file for reading.
                </summary>
      <returns>
                    A <see cref="T:System.IO.StreamReader" /> on the specified path.
                </returns>
      <param name="path">
                    The file to be opened for reading. 
                </param>
    </member>
    <member name="M:System.IO.File.OpenWrite(System.String)">
      <summary>[SECURITY CRITICAL] 
                    Opens an existing file for writing.
                </summary>
      <returns>
                    An unshared <see cref="T:System.IO.FileStream" /> object on the specified path with <see cref="F:System.IO.FileAccess.Write" /> access.
                </returns>
      <param name="path">
                    The file to be opened for writing. 
                </param>
    </member>
    <member name="M:System.IO.File.SetAttributes(System.String,System.IO.FileAttributes)">
      <summary>[SECURITY CRITICAL] 
                    Sets the specified <see cref="T:System.IO.FileAttributes" /> of the file on the specified path.
                </summary>
      <param name="path">
                    The path to the file. 
                </param>
      <param name="fileAttributes">
                    The desired <see cref="T:System.IO.FileAttributes" />, such as Hidden, ReadOnly, Normal, and Archive. 
                </param>
    </member>
    <member name="T:System.IO.FileAccess">
      <summary>
                    Defines constants for read, write, or read/write access to a file.
                </summary>
    </member>
    <member name="F:System.IO.FileAccess.Read">
      <summary>
                    Read access to the file. Data can be read from the file. Combine with Write for read/write access.
                </summary>
    </member>
    <member name="F:System.IO.FileAccess.Write">
      <summary>
                    Write access to the file. Data can be written to the file. Combine with Read for read/write access.
                </summary>
    </member>
    <member name="F:System.IO.FileAccess.ReadWrite">
      <summary>
                    Read and write access to the file. Data can be written to and read from the file.
                </summary>
    </member>
    <member name="T:System.IO.FileAttributes">
      <summary>
                    Provides attributes for files and directories.
                </summary>
    </member>
    <member name="F:System.IO.FileAttributes.ReadOnly">
      <summary>
                    The file is read-only.
                </summary>
    </member>
    <member name="F:System.IO.FileAttributes.Hidden">
      <summary>
                    The file is hidden, and thus is not included in an ordinary directory listing.
                </summary>
    </member>
    <member name="F:System.IO.FileAttributes.System">
      <summary>
                    The file is a system file. The file is part of the operating system or is used exclusively by the operating system.
                </summary>
    </member>
    <member name="F:System.IO.FileAttributes.Directory">
      <summary>
                    The file is a directory.
                </summary>
    </member>
    <member name="F:System.IO.FileAttributes.Archive">
      <summary>
                    The file's archive status. Applications use this attribute to mark files for backup or removal.
                </summary>
    </member>
    <member name="F:System.IO.FileAttributes.Device">
      <summary>
                    Reserved for future use.
                </summary>
    </member>
    <member name="F:System.IO.FileAttributes.Normal">
      <summary>
                    The file is normal and has no other attributes set. This attribute is valid only if used alone.
                </summary>
    </member>
    <member name="F:System.IO.FileAttributes.Temporary">
      <summary>
                    The file is temporary. File systems attempt to keep all of the data in memory for quicker access rather than flushing the data back to mass storage. A temporary file should be deleted by the application as soon as it is no longer needed.
                </summary>
    </member>
    <member name="F:System.IO.FileAttributes.SparseFile">
      <summary>
                    The file is a sparse file. Sparse files are typically large files whose data are mostly zeros.
                </summary>
    </member>
    <member name="F:System.IO.FileAttributes.ReparsePoint">
      <summary>
                    The file contains a reparse point, which is a block of user-defined data associated with a file or a directory.
                </summary>
    </member>
    <member name="F:System.IO.FileAttributes.Compressed">
      <summary>
                    The file is compressed.
                </summary>
    </member>
    <member name="F:System.IO.FileAttributes.Offline">
      <summary>
                    The file is offline. The data of the file is not immediately available.
                </summary>
    </member>
    <member name="F:System.IO.FileAttributes.NotContentIndexed">
      <summary>
                    The file will not be indexed by the operating system's content indexing service.
                </summary>
    </member>
    <member name="F:System.IO.FileAttributes.Encrypted">
      <summary>
                    The file or directory is encrypted. For a file, this means that all data in the file is encrypted. For a directory, this means that encryption is the default for newly created files and directories.
                </summary>
    </member>
    <member name="T:System.IO.FileInfo">
      <summary>
                    Provides instance methods for the creation, copying, deletion, moving, and opening of files, and aids in the creation of <see cref="T:System.IO.FileStream" /> objects. This class cannot be inherited.
                </summary>
    </member>
    <member name="M:System.IO.FileInfo.#ctor(System.String)">
      <summary>[SECURITY CRITICAL] 
                    Initializes a new instance of the <see cref="T:System.IO.FileInfo" /> class, which acts as a wrapper for a file path.
                </summary>
      <param name="fileName">
                    The fully qualified name of the new file, or the relative file name. 
                </param>
    </member>
    <member name="M:System.IO.FileInfo.AppendText">
      <summary>[SECURITY CRITICAL] 
                    Creates a <see cref="T:System.IO.StreamWriter" /> that appends text to the file represented by this instance of the <see cref="T:System.IO.FileInfo" />.
                </summary>
      <returns>
                    A new StreamWriter.
                </returns>
    </member>
    <member name="M:System.IO.FileInfo.CopyTo(System.String)">
      <summary>[SECURITY CRITICAL] 
                    Copies an existing file to a new file, disallowing the overwriting of an existing file.
                </summary>
      <returns>
                    A new file with a fully qualified path.
                </returns>
      <param name="destFileName">
                    The name of the new file to copy to. 
                </param>
    </member>
    <member name="M:System.IO.FileInfo.CopyTo(System.String,System.Boolean)">
      <summary>[SECURITY CRITICAL] 
                    Copies an existing file to a new file, allowing the overwriting of an existing file.
                </summary>
      <returns>
                    A new file, or an overwrite of an existing file if <paramref name="overwrite" /> is true. If the file exists and <paramref name="overwrite" /> is false, an <see cref="T:System.IO.IOException" /> is thrown.
                </returns>
      <param name="destFileName">
                    The name of the new file to copy to. 
                </param>
      <param name="overwrite">true to allow an existing file to be overwritten; otherwise, false. 
                </param>
    </member>
    <member name="M:System.IO.FileInfo.Create">
      <summary>[SECURITY CRITICAL] 
                    Creates a file.
                </summary>
      <returns>
                    A new file.
                </returns>
    </member>
    <member name="M:System.IO.FileInfo.CreateText">
      <summary>[SECURITY CRITICAL] 
                    Creates a <see cref="T:System.IO.StreamWriter" /> that writes a new text file.
                </summary>
      <returns>
                    A new StreamWriter.
                </returns>
    </member>
    <member name="M:System.IO.FileInfo.Delete">
      <summary>[SECURITY CRITICAL] 
                    Permanently deletes a file.
                </summary>
    </member>
    <member name="P:System.IO.FileInfo.Directory">
      <summary>[SECURITY CRITICAL] 
                    Gets an instance of the parent directory.
                </summary>
      <returns>
                    A <see cref="T:System.IO.DirectoryInfo" /> object representing the parent directory of this file.
                </returns>
    </member>
    <member name="P:System.IO.FileInfo.DirectoryName">
      <summary>[SECURITY CRITICAL] 
                    Gets a string representing the directory's full path.
                </summary>
      <returns>
                    A string representing the directory's full path.
                </returns>
    </member>
    <member name="P:System.IO.FileInfo.Exists">
      <summary>
                    Gets a value indicating whether a file exists.
                </summary>
      <returns>true if the file exists; false if the file does not exist or if the file is a directory.
                </returns>
    </member>
    <member name="P:System.IO.FileInfo.Length">
      <summary>
                    Gets the size, in bytes, of the current file.
                </summary>
      <returns>
                    The size of the current file in bytes.
                </returns>
      <exception cref="T:System.IO.IOException">
        <see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot update the state of the file or directory. 
                </exception>
      <exception cref="T:System.IO.FileNotFoundException">
                    The file does not exist.
                
                    -or- 
                
                    The Length property is called for a directory. 
                </exception>
    </member>
    <member name="M:System.IO.FileInfo.MoveTo(System.String)">
      <summary>[SECURITY CRITICAL] 
                    Moves a specified file to a new location, providing the option to specify a new file name.
                </summary>
      <param name="destFileName">
                    The path to move the file to, which can specify a different file name. 
                </param>
    </member>
    <member name="P:System.IO.FileInfo.Name">
      <summary>
                    Gets the name of the file.
                </summary>
      <returns>
                    The name of the file.
                </returns>
    </member>
    <member name="M:System.IO.FileInfo.Open(System.IO.FileMode)">
      <summary>[SECURITY CRITICAL] 
                    Opens a file in the specified mode.
                </summary>
      <returns>
                    A file opened in the specified mode, with read/write access and unshared.
                </returns>
      <param name="mode">
                    A <see cref="T:System.IO.FileMode" /> constant specifying the mode (for example, Open or Append) in which to open the file. 
                </param>
    </member>
    <member name="M:System.IO.FileInfo.Open(System.IO.FileMode,System.IO.FileAccess)">
      <summary>[SECURITY CRITICAL] 
                    Opens a file in the specified mode with read, write, or read/write access.
                </summary>
      <returns>
                    A <see cref="T:System.IO.FileStream" /> object opened in the specified mode and access, and unshared.
                </returns>
      <param name="mode">
                    A <see cref="T:System.IO.FileMode" /> constant specifying the mode (for example, Open or Append) in which to open the file. 
                </param>
      <param name="access">
                    A <see cref="T:System.IO.FileAccess" /> constant specifying whether to open the file with Read, Write, or ReadWrite file access. 
                </param>
    </member>
    <member name="M:System.IO.FileInfo.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
      <summary>[SECURITY CRITICAL] 
                    Opens a file in the specified mode with read, write, or read/write access and the specified sharing option.
                </summary>
      <returns>
                    A <see cref="T:System.IO.FileStream" /> object opened with the specified mode, access, and sharing options.
                </returns>
      <param name="mode">
                    A <see cref="T:System.IO.FileMode" /> constant specifying the mode (for example, Open or Append) in which to open the file. 
                </param>
      <param name="access">
                    A <see cref="T:System.IO.FileAccess" /> constant specifying whether to open the file with Read, Write, or ReadWrite file access. 
                </param>
      <param name="share">
                    A <see cref="T:System.IO.FileShare" /> constant specifying the type of access other FileStream objects have to this file. 
                </param>
    </member>
    <member name="M:System.IO.FileInfo.OpenRead">
      <summary>
                    Creates a read-only <see cref="T:System.IO.FileStream" />.
                </summary>
      <returns>
                    A new read-only <see cref="T:System.IO.FileStream" /> object.
                </returns>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path" /> is read-only or is a directory. 
                </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
                    The specified path is invalid, such as being on an unmapped drive. 
                </exception>
      <exception cref="T:System.IO.IOException">
                    The file is already open. 
                </exception>
    </member>
    <member name="M:System.IO.FileInfo.OpenText">
      <summary>
                    Creates a <see cref="T:System.IO.StreamReader" /> with UTF8 encoding that reads from an existing text file.
                </summary>
      <returns>
                    A new StreamReader with UTF8 encoding.
                </returns>
      <exception cref="T:System.Security.SecurityException">
                    The caller does not have the required permission. 
                </exception>
      <exception cref="T:System.IO.FileNotFoundException">
                    The file is not found. 
                </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path" /> is read-only or is a directory. 
                </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
                    The specified path is invalid, such as being on an unmapped drive. 
                </exception>
    </member>
    <member name="M:System.IO.FileInfo.OpenWrite">
      <summary>[SECURITY CRITICAL] 
                    Creates a write-only <see cref="T:System.IO.FileStream" />.
                </summary>
      <returns>
                    A new write-only unshared <see cref="T:System.IO.FileStream" /> object.
                </returns>
    </member>
    <member name="M:System.IO.FileInfo.ToString">
      <summary>
                    Returns the path as a string.
                </summary>
      <returns>
                    A string representing the path.
                </returns>
    </member>
    <member name="T:System.IO.FileLoadException">
      <summary>
                    The exception that is thrown when a managed assembly is found but cannot be loaded.
                </summary>
    </member>
    <member name="P:System.IO.FileLoadException.Message">
      <summary>
                    Gets the error message and the name of the file that caused this exception.
                </summary>
      <returns>
                    A string containing the error message and the name of the file that caused this exception.
                </returns>
    </member>
    <member name="M:System.IO.FileLoadException.ToString">
      <summary>
                    Returns the fully qualified name of the current exception, and possibly the error message, the name of the inner exception, and the stack trace.
                </summary>
      <returns>
                    A string containing the fully qualified name of this exception, and possibly the error message, the name of the inner exception, and the stack trace, depending on which <see cref="T:System.IO.FileLoadException" /> constructor is used.
                </returns>
    </member>
    <member name="T:System.IO.FileMode">
      <summary>
                    Specifies how the operating system should open a file.
                </summary>
    </member>
    <member name="F:System.IO.FileMode.CreateNew">
      <summary>
                    Specifies that the operating system should create a new file. 
                </summary>
    </member>
    <member name="F:System.IO.FileMode.Create">
      <summary>
                    Specifies that the operating system should create a new file. If the file already exists, it will be overwritten. <see cref="F:System.IO.FileMode.Create" /> is equivalent to requesting that if the file does not exist, use <see cref="F:System.IO.FileMode.CreateNew" />; otherwise, use <see cref="F:System.IO.FileMode.Truncate" />.
                </summary>
    </member>
    <member name="F:System.IO.FileMode.Open">
      <summary>
                    Specifies that the operating system should open an existing file. The ability to open the file is dependent on the value specified by <see cref="T:System.IO.FileAccess" />. A <see cref="T:System.IO.FileNotFoundException" /> is thrown if the file does not exist.
                </summary>
    </member>
    <member name="F:System.IO.FileMode.OpenOrCreate">
      <summary>
                    Specifies that the operating system should open a file if it exists; otherwise, a new file should be created. 
                </summary>
    </member>
    <member name="F:System.IO.FileMode.Truncate">
      <summary>
                    Specifies that the operating system should open an existing file. Once opened, the file should be truncated so that its size is zero bytes. 
                </summary>
    </member>
    <member name="F:System.IO.FileMode.Append">
      <summary>
                    Opens the file if it exists and seeks to the end of the file, or creates a new file. <see cref="F:System.IO.FileMode.Append" /> can only be used in conjunction with <see cref="F:System.IO.FileMode.Append" />. Attempting to seek to a position before the end of the file will throw an <see cref="T:System.IO.IOException" /> and any attempt to read fails and throws an <see cref="T:System.NotSupportedException" />.
                </summary>
    </member>
    <member name="T:System.IO.FileNotFoundException">
      <summary>
                    The exception that is thrown when an attempt to access a file that does not exist fails.
                </summary>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.IO.FileNotFoundException" /> class with its message string set to a system-supplied message.
                </summary>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.IO.FileNotFoundException" /> class with its message string set to <paramref name="message" />.
                </summary>
      <param name="message">
                    A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture. 
                </param>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.IO.FileNotFoundException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
                </summary>
      <param name="message">
                    A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture. 
                </param>
      <param name="innerException">
                    The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. 
                </param>
    </member>
    <member name="P:System.IO.FileNotFoundException.Message"></member>
    <member name="M:System.IO.FileNotFoundException.ToString">
      <summary>
                    Returns the fully qualified name of this exception and possibly the error message, the name of the inner exception, and the stack trace.
                </summary>
      <returns>
                    A string containing the fully qualified name of this exception and possibly the error message, the name of the inner exception, and the stack trace.
                </returns>
    </member>
    <member name="T:System.IO.FileShare">
      <summary>
                    Contains constants for controlling the kind of access other <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> objects can have to the same file.
                </summary>
    </member>
    <member name="F:System.IO.FileShare.None">
      <summary>
                    Declines sharing of the current file. Any request to open the file (by this process or another process) will fail until the file is closed.
                </summary>
    </member>
    <member name="F:System.IO.FileShare.Read">
      <summary>
                    Allows subsequent opening of the file for reading. If this flag is not specified, any request to open the file for reading (by this process or another process) will fail until the file is closed. 
                </summary>
    </member>
    <member name="F:System.IO.FileShare.Write">
      <summary>
                    Allows subsequent opening of the file for writing. If this flag is not specified, any request to open the file for writing (by this process or another process) will fail until the file is closed. 
                </summary>
    </member>
    <member name="F:System.IO.FileShare.ReadWrite">
      <summary>
                    Allows subsequent opening of the file for reading or writing. If this flag is not specified, any request to open the file for reading or writing (by this process or another process) will fail until the file is closed. 
                </summary>
    </member>
    <member name="F:System.IO.FileShare.Delete">
      <summary>
                    Allows subsequent deleting of a file.
                </summary>
    </member>
    <member name="F:System.IO.FileShare.Inheritable">
      <summary>
                    Makes the file handle inheritable by child processes. 
                </summary>
    </member>
    <member name="T:System.IO.FileStream">
      <summary>
                    Exposes a <see cref="T:System.IO.Stream" /> around a file, supporting both synchronous and asynchronous read and write operations.
                </summary>
    </member>
    <member name="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode)">
      <summary>[SECURITY CRITICAL] 
                    Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class with the specified path and creation mode.
                </summary>
      <param name="path">
                    A relative or absolute path for the file that the current FileStream object will encapsulate. 
                </param>
      <param name="mode">
                    A <see cref="T:System.IO.FileMode" /> constant that determines how to open or create the file. 
                </param>
    </member>
    <member name="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
      <summary>[SECURITY CRITICAL] 
                    Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class with the specified path, creation mode, and read/write permission.
                </summary>
      <param name="path">
                    A relative or absolute path for the file that the current FileStream object will encapsulate. 
                </param>
      <param name="mode">
                    A <see cref="T:System.IO.FileMode" /> constant that determines how to open or create the file. 
                </param>
      <param name="access">
                    A <see cref="T:System.IO.FileAccess" /> constant that determines how the file can be accessed by the FileStream object. This gets the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the FileStream object. <see cref="P:System.IO.FileStream.CanSeek" /> is true if <paramref name="path" /> specifies a disk file. 
                </param>
    </member>
    <member name="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
      <summary>[SECURITY CRITICAL] 
                    Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class with the specified path, creation mode, read/write permission, and sharing permission.
                </summary>
      <param name="path">
                    A relative or absolute path for the file that the current FileStream object will encapsulate. 
                </param>
      <param name="mode">
                    A <see cref="T:System.IO.FileMode" /> constant that determines how to open or create the file. 
                </param>
      <param name="access">
                    A <see cref="T:System.IO.FileAccess" /> constant that determines how the file can be accessed by the FileStream object. This gets the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the FileStream object. <see cref="P:System.IO.FileStream.CanSeek" /> is true if <paramref name="path" /> specifies a disk file. 
                </param>
      <param name="share">
                    A <see cref="T:System.IO.FileShare" /> constant that determines how the file will be shared by processes. 
                </param>
    </member>
    <member name="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
      <summary>[SECURITY CRITICAL] 
                    Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class with the specified path, creation mode, read/write and sharing permission, and buffer size.
                </summary>
      <param name="path">
                    A relative or absolute path for the file that the current FileStream object will encapsulate. 
                </param>
      <param name="mode">
                    A <see cref="T:System.IO.FileMode" /> constant that determines how to open or create the file. 
                </param>
      <param name="access">
                    A <see cref="T:System.IO.FileAccess" /> constant that determines how the file can be accessed by the FileStream object. This gets the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the FileStream object. <see cref="P:System.IO.FileStream.CanSeek" /> is true if <paramref name="path" /> specifies a disk file. 
                </param>
      <param name="share">
                    A <see cref="T:System.IO.FileShare" /> constant that determines how the file will be shared by processes. 
                </param>
      <param name="bufferSize">
                    A positive <see cref="T:System.Int32" /> value greater than 0 indicating the buffer size. For <paramref name="bufferSize" /> values between one and eight, the actual buffer size is set to eight bytes. 
                </param>
    </member>
    <member name="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>
                    Begins an asynchronous read.
                </summary>
      <returns>
                    An <see cref="T:System.IAsyncResult" /> that references the asynchronous read.
                </returns>
      <param name="array">
                    The buffer to read data into. 
                </param>
      <param name="offset">
                    The byte offset in <paramref name="array" /> at which to begin reading. 
                </param>
      <param name="numBytes">
                    The maximum number of bytes to read. 
                </param>
      <param name="userCallback">
                    The method to be called when the asynchronous read operation is completed. 
                </param>
      <param name="stateObject">
                    A user-provided object that distinguishes this particular asynchronous read request from other requests. 
                </param>
      <exception cref="T:System.ArgumentException">
                    The array length minus <paramref name="offset" /> is less than <paramref name="numBytes" />. 
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="numBytes" /> is negative. 
                </exception>
      <exception cref="T:System.IO.IOException">
                    An asynchronous read was attempted past the end of the file. 
                </exception>
    </member>
    <member name="M:System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>
                    Begins an asynchronous write.
                </summary>
      <returns>
                    An <see cref="T:System.IAsyncResult" /> that references the asynchronous write.
                </returns>
      <param name="array">
                    The buffer containing data to write to the current stream.
                </param>
      <param name="offset">
                    The zero-based byte offset in <paramref name="array" /> at which to begin copying bytes to the current stream.
                </param>
      <param name="numBytes">
                    The maximum number of bytes to write. 
                </param>
      <param name="userCallback">
                    The method to be called when the asynchronous write operation is completed. 
                </param>
      <param name="stateObject">
                    A user-provided object that distinguishes this particular asynchronous write request from other requests. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> length minus <paramref name="offset" /> is less than <paramref name="numBytes" />. 
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="numBytes" /> is negative. 
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The stream does not support writing. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    The stream is closed. 
                </exception>
      <exception cref="T:System.IO.IOException">
                    An I/O error occurs. 
                </exception>
    </member>
    <member name="P:System.IO.FileStream.CanRead">
      <summary>
                    Gets a value indicating whether the current stream supports reading.
                </summary>
      <returns>true if the stream supports reading; false if the stream is closed or was opened with write-only access.
                </returns>
    </member>
    <member name="P:System.IO.FileStream.CanSeek">
      <summary>
                    Gets a value indicating whether the current stream supports seeking.
                </summary>
      <returns>true if the stream supports seeking; false if the stream is closed or if the FileStream was constructed from an operating-system handle such as a pipe or output to the console.
                </returns>
    </member>
    <member name="P:System.IO.FileStream.CanWrite">
      <summary>
                    Gets a value indicating whether the current stream supports writing.
                </summary>
      <returns>true if the stream supports writing; false if the stream is closed or was opened with read-only access. 
                </returns>
    </member>
    <member name="M:System.IO.FileStream.Dispose(System.Boolean)">
      <summary>
                    Releases the unmanaged resources used by the <see cref="T:System.IO.FileStream" /> and optionally releases the managed resources.
                </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. 
                </param>
    </member>
    <member name="M:System.IO.FileStream.EndRead(System.IAsyncResult)">
      <summary>
                    Waits for the pending asynchronous read to complete.
                </summary>
      <returns>
                    The number of bytes read from the stream, between 0 and the number of bytes you requested. Streams only return 0 at the end of the stream, otherwise, they should block until at least 1 byte is available.
                </returns>
      <param name="asyncResult">
                    The reference to the pending asynchronous request to wait for. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
                    This <see cref="T:System.IAsyncResult" /> object was not created by calling <see cref="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> on this class. 
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.IO.FileStream.EndRead(System.IAsyncResult)" /> is called multiple times. 
                </exception>
      <exception cref="T:System.IO.IOException">
                    The stream is closed or an internal error has occurred.
                </exception>
    </member>
    <member name="M:System.IO.FileStream.EndWrite(System.IAsyncResult)">
      <summary>
                    Ends an asynchronous write, blocking until the I/O operation has completed.
                </summary>
      <param name="asyncResult">
                    The pending asynchronous I/O request. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
                    This <see cref="T:System.IAsyncResult" /> object was not created by calling <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> on this class. 
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.IO.FileStream.EndWrite(System.IAsyncResult)" /> is called multiple times. 
                </exception>
      <exception cref="T:System.IO.IOException">
                    The stream is closed or an internal error has occurred.
                </exception>
    </member>
    <member name="M:System.IO.FileStream.Finalize">
      <summary>
                    Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the FileStream.
                </summary>
    </member>
    <member name="M:System.IO.FileStream.Flush">
      <summary>
                    Clears all buffers for this stream and causes any buffered data to be written to the file system.
                </summary>
      <exception cref="T:System.IO.IOException">
                    An I/O error occurs. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    The stream is closed. 
                </exception>
    </member>
    <member name="P:System.IO.FileStream.Length">
      <summary>
                    Gets the length in bytes of the stream.
                </summary>
      <returns>
                    A long value representing the length of the stream in bytes.
                </returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.IO.FileStream.CanSeek" /> for this stream is false. 
                </exception>
      <exception cref="T:System.IO.IOException">
                    An I/O error occurs, such as the file being closed. 
                </exception>
    </member>
    <member name="P:System.IO.FileStream.Name">
      <summary>[SECURITY CRITICAL] 
                    Gets the name of the FileStream that was passed to the constructor.
                </summary>
      <returns>
                    A string that is the name of the FileStream.
                </returns>
    </member>
    <member name="P:System.IO.FileStream.Position">
      <summary>
                    Gets or sets the current position of this stream.
                </summary>
      <returns>
                    The current position  of this stream.
                </returns>
    </member>
    <member name="M:System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>
                    Reads a block of bytes from the stream and writes the data in a given buffer.
                </summary>
      <returns>
                    The total number of bytes read into the buffer. This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached.
                </returns>
      <param name="array">
                    When this method returns, contains the specified byte array with the values between <paramref name="offset" /> and (<paramref name="offset" /> + <paramref name="count" /> - <paramref name="1)" /> replaced by the bytes read from the current source. 
                </param>
      <param name="offset">
                    The byte offset in <paramref name="array" /> at which the read bytes will be placed. 
                </param>
      <param name="count">
                    The maximum number of bytes to read. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="count" /> is negative. 
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The stream does not support reading. 
                </exception>
      <exception cref="T:System.IO.IOException">
                    An I/O error occurs. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> and <paramref name="count" /> describe an invalid range in <paramref name="array" />. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    Methods were called after the stream was closed. 
                </exception>
    </member>
    <member name="M:System.IO.FileStream.ReadByte">
      <summary>
                    Reads a byte from the file and advances the read position one byte.
                </summary>
      <returns>
                    The byte, cast to an <see cref="T:System.Int32" />, or -1 if the end of the stream has been reached.
                </returns>
      <exception cref="T:System.NotSupportedException">
                    The current stream does not support reading. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    The current stream is closed. 
                </exception>
    </member>
    <member name="M:System.IO.FileStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>
                    Sets the current position of this stream to the given value.
                </summary>
      <returns>
                    The new position in the stream.
                </returns>
      <param name="offset">
                    The point relative to <paramref name="origin" /> from which to begin seeking. 
                </param>
      <param name="origin">
                    Specifies the beginning, the end, or the current position as a reference point for <paramref name="origin" />, using a value of type <see cref="T:System.IO.SeekOrigin" />. 
                </param>
      <exception cref="T:System.IO.IOException">
                    An I/O error occurs. 
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The stream does not support seeking, such as if the FileStream is constructed from a pipe or console output. 
                </exception>
      <exception cref="T:System.ArgumentException">
                    Attempted seeking before the beginning of the stream. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    Methods were called after the stream was closed. 
                </exception>
    </member>
    <member name="M:System.IO.FileStream.SetLength(System.Int64)">
      <summary>
                    Sets the length of this stream to the given value.
                </summary>
      <param name="value">
                    The new length of the stream. 
                </param>
      <exception cref="T:System.IO.IOException">
                    An I/O error has occurred. 
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The stream does not support both writing and seeking. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    Attempted to set the <paramref name="value" /> parameter to less than 0. 
                </exception>
    </member>
    <member name="M:System.IO.FileStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>
                    Writes a block of bytes to this stream using data from a buffer.
                </summary>
      <param name="array">
                    The buffer containing data to write to the stream.
                </param>
      <param name="offset">
                    The zero-based byte offset in <paramref name="array" /> at which to begin copying bytes to the current stream. 
                </param>
      <param name="count">
                    The number of bytes to be written to the current stream. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> and <paramref name="count" /> describe an invalid range in <paramref name="array" />. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="count" /> is negative. 
                </exception>
      <exception cref="T:System.IO.IOException">
                    An I/O error occurs. 
                
                    - or -
                
                    Another thread may have caused an unexpected change in the position of the operating system's file handle. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    The stream is closed. 
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The current stream instance does not support writing. 
                </exception>
    </member>
    <member name="M:System.IO.FileStream.WriteByte(System.Byte)">
      <summary>
                    Writes a byte to the current position in the file stream.
                </summary>
      <param name="value">
                    A byte to write to the stream. 
                </param>
      <exception cref="T:System.ObjectDisposedException">
                    The stream is closed. 
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The stream does not support writing. 
                </exception>
    </member>
    <member name="T:System.IO.FileSystemInfo">
      <summary>
                    Provides the base class for both <see cref="T:System.IO.FileInfo" /> and <see cref="T:System.IO.DirectoryInfo" /> objects.
                </summary>
    </member>
    <member name="M:System.IO.FileSystemInfo.#ctor">
      <summary>[SECURITY CRITICAL] 
                    Initializes a new instance of the <see cref="T:System.IO.FileSystemInfo" /> class.
                </summary>
    </member>
    <member name="P:System.IO.FileSystemInfo.Attributes">
      <summary>[SECURITY CRITICAL] 
                    Gets or sets the <see cref="T:System.IO.FileAttributes" /> of the current <see cref="T:System.IO.FileSystemInfo" />.
                </summary>
      <returns>
        <see cref="T:System.IO.FileAttributes" /> of the current <see cref="T:System.IO.FileSystemInfo" />.
                </returns>
    </member>
    <member name="P:System.IO.FileSystemInfo.CreationTime">
      <summary>[SECURITY CRITICAL] 
                    Gets or sets the creation time of the current <see cref="T:System.IO.FileSystemInfo" /> object.
                </summary>
      <returns>
                    The creation date and time of the current <see cref="T:System.IO.FileSystemInfo" /> object.
                </returns>
    </member>
    <member name="M:System.IO.FileSystemInfo.Delete">
      <summary>[SECURITY CRITICAL] 
                    Deletes a file or directory.
                </summary>
    </member>
    <member name="P:System.IO.FileSystemInfo.Exists">
      <summary>
                    Gets a value indicating whether the file or directory exists.
                </summary>
      <returns>true if the file or directory exists; otherwise, false.
                </returns>
    </member>
    <member name="P:System.IO.FileSystemInfo.Extension">
      <summary>
                    Gets the string representing the extension part of the file.
                </summary>
      <returns>
                    A string containing the <see cref="T:System.IO.FileSystemInfo" /> extension.
                </returns>
    </member>
    <member name="P:System.IO.FileSystemInfo.FullName">
      <summary>[SECURITY CRITICAL] 
                    Gets the full path of the directory or file.
                </summary>
      <returns>
                    A string containing the full path.
                </returns>
    </member>
    <member name="F:System.IO.FileSystemInfo.FullPath">
      <summary>
                    Represents the fully qualified path of the directory or file.
                </summary>
    </member>
    <member name="P:System.IO.FileSystemInfo.LastAccessTime">
      <summary>[SECURITY CRITICAL] 
                    Gets or sets the time the current file or directory was last accessed.
                </summary>
      <returns>
                    The time that the current file or directory was last accessed.
                </returns>
    </member>
    <member name="P:System.IO.FileSystemInfo.LastWriteTime">
      <summary>[SECURITY CRITICAL] 
                    Gets or sets the time when the current file or directory was last written to.
                </summary>
      <returns>
                    The time the current file was last written.
                </returns>
    </member>
    <member name="P:System.IO.FileSystemInfo.Name">
      <summary>
                    For files, gets the name of the file. For directories, gets the name of the last directory in the hierarchy if a hierarchy exists. Otherwise, the Name property gets the name of the directory.
                </summary>
      <returns>
                    A string that is the name of the parent directory, the name of the last directory in the hierarchy, or the name of a file, including the file name extension.
                </returns>
    </member>
    <member name="F:System.IO.FileSystemInfo.OriginalPath">
      <summary>
                    The path originally specified by the user, whether relative or absolute.
                </summary>
    </member>
    <member name="M:System.IO.FileSystemInfo.Refresh">
      <summary>
                    Refreshes the state of the object.
                </summary>
      <exception cref="T:System.IO.IOException">
                    A device such as a disk drive is not ready. 
                </exception>
    </member>
    <member name="T:System.IO.IOException">
      <summary>
                    The exception that is thrown when an I/O error occurs.
                </summary>
    </member>
    <member name="M:System.IO.IOException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.IO.IOException" /> class with its message string set to the empty string (""), its HRESULT set to COR_E_IO, and its inner exception set to a null reference.
                </summary>
    </member>
    <member name="M:System.IO.IOException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.IO.IOException" /> class with its message string set to <paramref name="message" />, its HRESULT set to COR_E_IO, and its inner exception set to null.
                </summary>
      <param name="message">
                    A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture. 
                </param>
    </member>
    <member name="M:System.IO.IOException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.IO.IOException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
                </summary>
      <param name="message">
                    The error message that explains the reason for the exception. 
                </param>
      <param name="innerException">
                    The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. 
                </param>
    </member>
    <member name="T:System.IO.MemoryStream">
      <summary>
                    Creates a stream whose backing store is memory.
                </summary>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.IO.MemoryStream" /> class with an expandable capacity initialized to zero.
                </summary>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[])">
      <summary>
                    Initializes a new non-resizable instance of the <see cref="T:System.IO.MemoryStream" /> class based on the specified byte array.
                </summary>
      <param name="buffer">
                    The array of unsigned bytes from which to create the current stream. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. 
                </exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Boolean)">
      <summary>
                    Initializes a new non-resizable instance of the <see cref="T:System.IO.MemoryStream" /> class based on the specified byte array with the <see cref="P:System.IO.MemoryStream.CanWrite" /> property set as specified.
                </summary>
      <param name="buffer">
                    The array of unsigned bytes from which to create this stream. 
                </param>
      <param name="writable">
                    The setting of the <see cref="P:System.IO.MemoryStream.CanWrite" /> property, which determines whether the stream supports writing. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. 
                </exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32)">
      <summary>
                    Initializes a new non-resizable instance of the <see cref="T:System.IO.MemoryStream" /> class based on the specified region (index) of a byte array.
                </summary>
      <param name="buffer">
                    The array of unsigned bytes from which to create this stream. 
                </param>
      <param name="index">
                    The index into <paramref name="buffer" /> at which the stream begins. 
                </param>
      <param name="count">
                    The length of the stream in bytes. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero. 
                </exception>
      <exception cref="T:System.ArgumentException">
                    The sum of <paramref name="index" /> and <paramref name="count" /> is greater than the length of <paramref name="buffer" />. 
                </exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)">
      <summary>
                    Initializes a new non-resizable instance of the <see cref="T:System.IO.MemoryStream" /> class based on the specified region of a byte array, with the <see cref="P:System.IO.MemoryStream.CanWrite" /> property set as specified.
                </summary>
      <param name="buffer">
                    The array of unsigned bytes from which to create this stream. 
                </param>
      <param name="index">
                    The index in <paramref name="buffer" /> at which the stream begins. 
                </param>
      <param name="count">
                    The length of the stream in bytes. 
                </param>
      <param name="writable">
                    The setting of the <see cref="P:System.IO.MemoryStream.CanWrite" /> property, which determines whether the stream supports writing. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> are negative. 
                </exception>
      <exception cref="T:System.ArgumentException">
                    The sum of <paramref name="index" /> and <paramref name="count" /> is greater than the length of <paramref name="buffer" />. 
                </exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Boolean)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.IO.MemoryStream" /> class based on the specified region of a byte array, with the <see cref="P:System.IO.MemoryStream.CanWrite" /> property set as specified, and the ability to call <see cref="M:System.IO.MemoryStream.GetBuffer" /> set as specified.
                </summary>
      <param name="buffer">
                    The array of unsigned bytes from which to create this stream. 
                </param>
      <param name="index">
                    The index into <paramref name="buffer" /> at which the stream begins. 
                </param>
      <param name="count">
                    The length of the stream in bytes. 
                </param>
      <param name="writable">
                    The setting of the <see cref="P:System.IO.MemoryStream.CanWrite" /> property, which determines whether the stream supports writing. 
                </param>
      <param name="publiclyVisible">true to enable <see cref="M:System.IO.MemoryStream.GetBuffer" />, which returns the unsigned byte array from which the stream was created; otherwise, false. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is negative. 
                </exception>
      <exception cref="T:System.ArgumentException">
                    The buffer length minus <paramref name="index" /> is less than <paramref name="count" />. 
                </exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Int32)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.IO.MemoryStream" /> class with an expandable capacity initialized as specified.
                </summary>
      <param name="capacity">
                    The initial size of the internal array in bytes. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is negative. 
                </exception>
    </member>
    <member name="P:System.IO.MemoryStream.CanRead">
      <summary>
                    Gets a value indicating whether the current stream supports reading.
                </summary>
      <returns>true if the stream is open.
                </returns>
    </member>
    <member name="P:System.IO.MemoryStream.CanSeek">
      <summary>
                    Gets a value indicating whether the current stream supports seeking.
                </summary>
      <returns>true if the stream is open.
                </returns>
    </member>
    <member name="P:System.IO.MemoryStream.CanWrite">
      <summary>
                    Gets a value indicating whether the current stream supports writing.
                </summary>
      <returns>true if the stream supports writing; otherwise, false.
                </returns>
    </member>
    <member name="P:System.IO.MemoryStream.Capacity">
      <summary>
                    Gets or sets the number of bytes allocated for this stream.
                </summary>
      <returns>
                    The length of the usable portion of the buffer for the stream.
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    A capacity is set that is negative or less than the current length of the stream. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    The current stream is closed. 
                </exception>
      <exception cref="T:System.NotSupportedException">set is invoked on a stream whose capacity cannot be modified. 
                </exception>
    </member>
    <member name="M:System.IO.MemoryStream.Dispose(System.Boolean)">
      <summary>
                    Releases the unmanaged resources used by the <see cref="T:System.IO.MemoryStream" /> class and optionally releases the managed resources.
                </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.
                </param>
    </member>
    <member name="M:System.IO.MemoryStream.Flush">
      <summary>
                    Overrides <see cref="M:System.IO.Stream.Flush" /> so that no action is performed.
                </summary>
    </member>
    <member name="M:System.IO.MemoryStream.GetBuffer">
      <summary>
                    Returns the array of unsigned bytes from which this stream was created.
                </summary>
      <returns>
                    The byte array from which this stream was created, or the underlying array if a byte array was not provided to the <see cref="T:System.IO.MemoryStream" /> constructor during construction of the current instance.
                </returns>
      <exception cref="T:System.UnauthorizedAccessException">
                    The MemoryStream instance was not created with a publicly visible buffer. 
                </exception>
    </member>
    <member name="P:System.IO.MemoryStream.Length">
      <summary>
                    Gets the length of the stream in bytes.
                </summary>
      <returns>
                    The length of the stream in bytes.
                </returns>
      <exception cref="T:System.ObjectDisposedException">
                    The stream is closed. 
                </exception>
    </member>
    <member name="P:System.IO.MemoryStream.Position">
      <summary>
                    Gets or sets the current position within the stream.
                </summary>
      <returns>
                    The current position within the stream.
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The position is set to a negative value or a value greater than <see cref="F:System.Int32.MaxValue" />. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    The stream is closed. 
                </exception>
    </member>
    <member name="M:System.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>
                    Reads a block of bytes from the current stream and writes the data to <paramref name="buffer" />.
                </summary>
      <returns>
                    The total number of bytes written into the buffer. This can be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached before any bytes are read.
                </returns>
      <param name="buffer">
                    When this method returns, contains the specified byte array with the values between <paramref name="offset" /> and (<paramref name="offset" /> + <paramref name="count" /> - 1) replaced by the characters read from the current stream. 
                </param>
      <param name="offset">
                    The byte offset in <paramref name="buffer" /> at which to begin reading. 
                </param>
      <param name="count">
                    The maximum number of bytes to read. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="count" /> is negative. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> subtracted from the buffer length is less than <paramref name="count" />. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    The current stream instance is closed. 
                </exception>
    </member>
    <member name="M:System.IO.MemoryStream.ReadByte">
      <summary>
                    Reads a byte from the current stream.
                </summary>
      <returns>
                    The byte cast to a <see cref="T:System.Int32" />, or -1 if the end of the stream has been reached.
                </returns>
      <exception cref="T:System.ObjectDisposedException">
                    The current stream instance is closed. 
                </exception>
    </member>
    <member name="M:System.IO.MemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>
                    Sets the position within the current stream to the specified value.
                </summary>
      <returns>
                    The new position within the stream, calculated by combining the initial reference point and the offset.
                </returns>
      <param name="offset">
                    The new position within the stream. This is relative to the <paramref name="loc" /> parameter, and can be positive or negative. 
                </param>
      <param name="loc">
                    A value of type <see cref="T:System.IO.SeekOrigin" />, which acts as the seek reference point. 
                </param>
      <exception cref="T:System.IO.IOException">
                    Seeking is attempted before the beginning of the stream. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is greater than <see cref="F:System.Int32.MaxValue" />. 
                </exception>
      <exception cref="T:System.ArgumentException">
                    There is an invalid SeekOrigin. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    The current stream instance is closed. 
                </exception>
    </member>
    <member name="M:System.IO.MemoryStream.SetLength(System.Int64)">
      <summary>
                    Sets the length of the current stream to the specified value.
                </summary>
      <param name="value">
                    The value at which to set the length. 
                </param>
      <exception cref="T:System.NotSupportedException">
                    The current stream is not resizable and <paramref name="value" /> is larger than the current capacity.
                
                    -or- 
                
                    The current stream does not support writing. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative or is greater than the maximum length of the <see cref="T:System.IO.MemoryStream" />, where the maximum length is(<see cref="F:System.Int32.MaxValue" /> - origin), and origin is the index into the underlying buffer at which the stream starts. 
                </exception>
    </member>
    <member name="M:System.IO.MemoryStream.ToArray">
      <summary>
                    Writes the stream contents to a byte array, regardless of the <see cref="P:System.IO.MemoryStream.Position" /> property.
                </summary>
      <returns>
                    A new byte array.
                </returns>
    </member>
    <member name="M:System.IO.MemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>
                    Writes a block of bytes to the current stream using data read from buffer.
                </summary>
      <param name="buffer">
                    The buffer to write data from. 
                </param>
      <param name="offset">
                    The byte offset in <paramref name="buffer" /> at which to begin writing from. 
                </param>
      <param name="count">
                    The maximum number of bytes to write. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. 
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The stream does not support writing. For additional information see <see cref="P:System.IO.Stream.CanWrite" />.
                
                    -or- 
                
                    The current position is closer than <paramref name="count" /> bytes to the end of the stream, and the capacity cannot be modified. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> subtracted from the buffer length is less than <paramref name="count" />. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="count" /> are negative. 
                </exception>
      <exception cref="T:System.IO.IOException">
                    An I/O error occurs. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    The current stream instance is closed. 
                </exception>
    </member>
    <member name="M:System.IO.MemoryStream.WriteByte(System.Byte)">
      <summary>
                    Writes a byte to the current stream at the current position.
                </summary>
      <param name="value">
                    The byte to write. 
                </param>
      <exception cref="T:System.NotSupportedException">
                    The stream does not support writing. For additional information see <see cref="P:System.IO.Stream.CanWrite" />.
                
                    -or- 
                
                    The current position is at the end of the stream, and the capacity cannot be modified. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    The current stream is closed. 
                </exception>
    </member>
    <member name="M:System.IO.MemoryStream.WriteTo(System.IO.Stream)">
      <summary>
                    Writes the entire contents of this memory stream to another stream.
                </summary>
      <param name="stream">
                    The stream to write this memory stream to. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    The current or target stream is closed. 
                </exception>
    </member>
    <member name="T:System.IO.Path">
      <summary>
                    Performs operations on <see cref="T:System.String" /> instances that contain file or directory path information. These operations are performed in a cross-platform manner.
                </summary>
    </member>
    <member name="F:System.IO.Path.AltDirectorySeparatorChar">
      <summary>
                    Provides a platform-specific alternate character used to separate directory levels in a path string that reflects a hierarchical file system organization.
                </summary>
    </member>
    <member name="M:System.IO.Path.ChangeExtension(System.String,System.String)">
      <summary>
                    Changes the extension of a path string.
                </summary>
      <returns>
                    A string containing the modified path information.
                
                    On Windows-based desktop platforms, if <paramref name="path" /> is null or an empty string (""), the path information is returned unmodified. If <paramref name="extension" /> is null, the returned string contains the specified path with its extension removed. If <paramref name="path" /> has no extension, and <paramref name="extension" /> is not null, the returned path string contains <paramref name="extension" /> appended to the end of <paramref name="path" />.
                </returns>
      <param name="path">
                    The path information to modify. The path cannot contain any of the characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />. 
                </param>
      <param name="extension">
                    The new extension (with a leading period). Specify null to remove an existing extension from <paramref name="path" />. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.
                </exception>
    </member>
    <member name="M:System.IO.Path.Combine(System.String,System.String)">
      <summary>
                    Combines two path strings.
                </summary>
      <returns>
                    A string containing the combined paths. If one of the specified paths is a zero-length string, this method returns the other path. If <paramref name="path2" /> contains an absolute path, this method returns <paramref name="path2" />.
                </returns>
      <param name="path1">
                    The first path. 
                </param>
      <param name="path2">
                    The second path. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path1" /> or <paramref name="path2" /> contain one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />. 
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path1" /> or <paramref name="path2" /> is null. 
                </exception>
    </member>
    <member name="F:System.IO.Path.DirectorySeparatorChar">
      <summary>
                    Provides a platform-specific character used to separate directory levels in a path string that reflects a hierarchical file system organization.
                </summary>
    </member>
    <member name="M:System.IO.Path.GetDirectoryName(System.String)">
      <summary>
                    Returns the directory information for the specified path string.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> containing directory information for <paramref name="path" />, or null if <paramref name="path" /> denotes a root directory, is the empty string (""), or is null. Returns <see cref="F:System.String.Empty" /> if <paramref name="path" /> does not contain directory information.
                </returns>
      <param name="path">
                    The path of a file or directory. 
                </param>
      <exception cref="T:System.ArgumentException">
                    The <paramref name="path" /> parameter contains invalid characters, is empty, or contains only white spaces. 
                </exception>
      <exception cref="T:System.IO.PathTooLongException">
                    The <paramref name="path" /> parameter is longer than the system-defined maximum length.
                </exception>
    </member>
    <member name="M:System.IO.Path.GetExtension(System.String)">
      <summary>
                    Returns the extension of the specified path string.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> containing the extension of the specified path (including the "."), null, or <see cref="F:System.String.Empty" />. If <paramref name="path" /> is null, GetExtension returns null. If <paramref name="path" /> does not have extension information, GetExtension returns Empty.
                </returns>
      <param name="path">
                    The path string from which to get the extension. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.  
                </exception>
    </member>
    <member name="M:System.IO.Path.GetFileName(System.String)">
      <summary>
                    Returns the file name and extension of the specified path string.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> consisting of the characters after the last directory character in <paramref name="path" />. If the last character of <paramref name="path" /> is a directory or volume separator character, this method returns <see cref="F:System.String.Empty" />. If <paramref name="path" /> is null, this method returns null.
                </returns>
      <param name="path">
                    The path string from which to obtain the file name and extension. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />. 
                </exception>
    </member>
    <member name="M:System.IO.Path.GetFileNameWithoutExtension(System.String)">
      <summary>
                    Returns the file name of the specified path string without the extension.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> containing the string returned by <see cref="M:System.IO.Path.GetFileName(System.String)" />, minus the last period (.) and all characters following it.
                </returns>
      <param name="path">
                    The path of the file. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.
                </exception>
    </member>
    <member name="M:System.IO.Path.GetFullPath(System.String)">
      <summary>[SECURITY CRITICAL] 
                    Returns the absolute path for the specified path string.
                </summary>
      <returns>
                    A string containing the fully qualified location of <paramref name="path" />, such as "rootdir\MyFile.txt".
                </returns>
      <param name="path">
                    The file or directory for which to obtain absolute path information. 
                </param>
    </member>
    <member name="M:System.IO.Path.GetInvalidPathChars">
      <summary>
                    Gets an array containing the characters that are not allowed in path names.
                </summary>
      <returns>
                    An array containing the characters that are not allowed in path names.
                </returns>
    </member>
    <member name="M:System.IO.Path.GetPathRoot(System.String)">
      <summary>
                    Gets the root directory information of the specified path.
                </summary>
      <returns>
                    A string containing the root directory of <paramref name="path" />, such as "rootdir", or null if <paramref name="path" /> is null, or an empty string if <paramref name="path" /> does not contain root directory information.
                </returns>
      <param name="path">
                    The path from which to obtain root directory information. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.
                
                    -or- 
                <see cref="F:System.String.Empty" /> was passed to <paramref name="path" />. 
                </exception>
    </member>
    <member name="M:System.IO.Path.GetTempFileName">
      <summary>[SECURITY CRITICAL] 
                    Creates a uniquely named, zero-byte temporary file on disk and returns the full path of that file.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> containing the full path of the temporary file.
                </returns>
    </member>
    <member name="M:System.IO.Path.GetTempPath">
      <summary>[SECURITY CRITICAL] 
                    Returns the path of the current system's temporary folder.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> containing the path information of a temporary directory.
                </returns>
    </member>
    <member name="M:System.IO.Path.HasExtension(System.String)">
      <summary>
                    Determines whether a path includes a file name extension.
                </summary>
      <returns>true if the characters that follow the last directory separator (\\ or /) or volume separator (:) in the path include a period (.) followed by one or more characters; otherwise, false.
                </returns>
      <param name="path">
                    The path to search for an extension. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />. 
                </exception>
    </member>
    <member name="M:System.IO.Path.IsPathRooted(System.String)">
      <summary>
                    Gets a value indicating whether the specified path string contains absolute or relative path information.
                </summary>
      <returns>true if <paramref name="path" /> contains an absolute path; otherwise, false.
                </returns>
      <param name="path">
                    The path to test. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />. 
                </exception>
    </member>
    <member name="F:System.IO.Path.PathSeparator">
      <summary>
                    A platform-specific separator character used to separate path strings in environment variables.
                </summary>
    </member>
    <member name="F:System.IO.Path.VolumeSeparatorChar">
      <summary>
                    Provides a platform-specific volume separator character.
                </summary>
    </member>
    <member name="T:System.IO.PathTooLongException">
      <summary>
                    The exception that is thrown when a pathname or filename is longer than the system-defined maximum length.
                </summary>
    </member>
    <member name="M:System.IO.PathTooLongException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.IO.PathTooLongException" /> class.
                </summary>
    </member>
    <member name="M:System.IO.PathTooLongException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.IO.PathTooLongException" /> class with its message string set to <paramref name="message" /> and its HRESULT set to COR_E_PATHTOOLONG.
                </summary>
      <param name="message">
                    A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture. 
                </param>
    </member>
    <member name="M:System.IO.PathTooLongException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.IO.PathTooLongException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
                </summary>
      <param name="message">
                    A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture. 
                </param>
      <param name="innerException">
                    The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. 
                </param>
    </member>
    <member name="T:System.IO.SeekOrigin">
      <summary>
                    Provides the fields that represent reference points in streams for seeking.
                </summary>
    </member>
    <member name="F:System.IO.SeekOrigin.Begin">
      <summary>
                    Specifies the beginning of a stream.
                </summary>
    </member>
    <member name="F:System.IO.SeekOrigin.Current">
      <summary>
                    Specifies the current position within a stream.
                </summary>
    </member>
    <member name="F:System.IO.SeekOrigin.End">
      <summary>
                    Specifies the end of a stream.
                </summary>
    </member>
    <member name="T:System.IO.Stream">
      <summary>
                    Provides a generic view of a sequence of bytes.
                </summary>
    </member>
    <member name="M:System.IO.Stream.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.IO.Stream" /> class. 
                </summary>
    </member>
    <member name="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>
                    Begins an asynchronous read operation.
                </summary>
      <returns>
                    An <see cref="T:System.IAsyncResult" /> that represents the asynchronous read, which could still be pending.
                </returns>
      <param name="buffer">
                    The buffer to read the data into. 
                </param>
      <param name="offset">
                    The byte offset in <paramref name="buffer" /> at which to begin writing data read from the stream. 
                </param>
      <param name="count">
                    The maximum number of bytes to read. 
                </param>
      <param name="callback">
                    An optional asynchronous callback, to be called when the read is complete. 
                </param>
      <param name="state">
                    A user-provided object that distinguishes this particular asynchronous read request from other requests. 
                </param>
      <exception cref="T:System.IO.IOException">
                    Attempted an asynchronous read past the end of the stream, or a disk error occurs. 
                </exception>
      <exception cref="T:System.ArgumentException">
                    One or more of the arguments is invalid. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    Methods were called after the stream was closed. 
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The current Stream implementation does not support the read operation. 
                </exception>
    </member>
    <member name="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>
                    Begins an asynchronous write operation.
                </summary>
      <returns>
                    An IAsyncResult that represents the asynchronous write, which could still be pending.
                </returns>
      <param name="buffer">
                    The buffer to write data from. 
                </param>
      <param name="offset">
                    The byte offset in <paramref name="buffer" /> from which to begin writing. 
                </param>
      <param name="count">
                    The maximum number of bytes to write. 
                </param>
      <param name="callback">
                    An optional asynchronous callback, to be called when the write is complete. 
                </param>
      <param name="state">
                    A user-provided object that distinguishes this particular asynchronous write request from other requests. 
                </param>
      <exception cref="T:System.IO.IOException">
                    Attempted an asynchronous write past the end of the stream, or a disk error occurs. 
                </exception>
      <exception cref="T:System.ArgumentException">
                    One or more of the arguments is invalid. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    Methods were called after the stream was closed. 
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The current Stream implementation does not support the write operation. 
                </exception>
    </member>
    <member name="P:System.IO.Stream.CanRead">
      <summary>
                    When overridden in a derived class, gets a value indicating whether the current stream supports reading.
                </summary>
      <returns>true if the stream supports reading; otherwise, false.
                </returns>
    </member>
    <member name="P:System.IO.Stream.CanSeek">
      <summary>
                    When overridden in a derived class, gets a value indicating whether the current stream supports seeking.
                </summary>
      <returns>true if the stream supports seeking; otherwise, false.
                </returns>
    </member>
    <member name="P:System.IO.Stream.CanTimeout">
      <summary>
                    Gets a value that determines whether the current stream can time out.
                </summary>
      <returns>
                    A value that determines whether the current stream can time out.
                </returns>
    </member>
    <member name="P:System.IO.Stream.CanWrite">
      <summary>
                    When overridden in a derived class, gets a value indicating whether the current stream supports writing.
                </summary>
      <returns>true if the stream supports writing; otherwise, false.
                </returns>
    </member>
    <member name="M:System.IO.Stream.Close">
      <summary>
                    Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream.
                </summary>
    </member>
    <member name="M:System.IO.Stream.Dispose">
      <summary>
                    Releases all resources used by the <see cref="T:System.IO.Stream" />.
                </summary>
    </member>
    <member name="M:System.IO.Stream.Dispose(System.Boolean)">
      <summary>
                    Releases the unmanaged resources used by the <see cref="T:System.IO.Stream" /> and optionally releases the managed resources.
                </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.
                </param>
    </member>
    <member name="M:System.IO.Stream.EndRead(System.IAsyncResult)">
      <summary>
                    Waits for the pending asynchronous read to complete.
                </summary>
      <returns>
                    The number of bytes read from the stream, between zero (0) and the number of bytes you requested. Streams return zero (0) only at the end of the stream, otherwise, they should block until at least one byte is available.
                </returns>
      <param name="asyncResult">
                    The reference to the pending asynchronous request to finish. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> did not originate from a <see cref="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> method on the current stream. 
                </exception>
      <exception cref="T:System.IO.IOException">
                    The stream is closed or an internal error has occurred.
                </exception>
    </member>
    <member name="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
      <summary>
                    Ends an asynchronous write operation.
                </summary>
      <param name="asyncResult">
                    A reference to the outstanding asynchronous I/O request. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> did not originate from a <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> method on the current stream. 
                </exception>
      <exception cref="T:System.IO.IOException">
                    The stream is closed or an internal error has occurred.
                </exception>
    </member>
    <member name="M:System.IO.Stream.Flush">
      <summary>
                    When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.
                </summary>
      <exception cref="T:System.IO.IOException">
                    An I/O error occurs. 
                </exception>
    </member>
    <member name="P:System.IO.Stream.Length">
      <summary>
                    When overridden in a derived class, gets the length in bytes of the stream.
                </summary>
      <returns>
                    A long value representing the length of the stream in bytes.
                </returns>
      <exception cref="T:System.NotSupportedException">
                    A class derived from Stream does not support seeking. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    Methods were called after the stream was closed. 
                </exception>
    </member>
    <member name="F:System.IO.Stream.Null">
      <summary>
                    A Stream with no backing store.
                </summary>
    </member>
    <member name="P:System.IO.Stream.Position">
      <summary>
                    When overridden in a derived class, gets or sets the position within the current stream.
                </summary>
      <returns>
                    The current position within the stream.
                </returns>
      <exception cref="T:System.IO.IOException">
                    An I/O error occurs. 
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The stream does not support seeking. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    Methods were called after the stream was closed. 
                </exception>
    </member>
    <member name="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>
                    When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
                </summary>
      <returns>
                    The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
                </returns>
      <param name="buffer">
                    An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset" /> and (<paramref name="offset" /> + <paramref name="count" /> - 1) replaced by the bytes read from the current source. 
                </param>
      <param name="offset">
                    The zero-based byte offset in <paramref name="buffer" /> at which to begin storing the data read from the current stream. 
                </param>
      <param name="count">
                    The maximum number of bytes to be read from the current stream. 
                </param>
      <exception cref="T:System.ArgumentException">
                    The sum of <paramref name="offset" /> and <paramref name="count" /> is larger than the buffer length. 
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="count" /> is negative. 
                </exception>
      <exception cref="T:System.IO.IOException">
                    An I/O error occurs. 
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The stream does not support reading. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    Methods were called after the stream was closed. 
                </exception>
    </member>
    <member name="M:System.IO.Stream.ReadByte">
      <summary>
                    Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.
                </summary>
      <returns>
                    The unsigned byte cast to an Int32, or -1 if at the end of the stream.
                </returns>
      <exception cref="T:System.NotSupportedException">
                    The stream does not support reading. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    Methods were called after the stream was closed. 
                </exception>
    </member>
    <member name="P:System.IO.Stream.ReadTimeout">
      <summary>
                    Gets or sets a value, in miliseconds, that determines how long the stream will attempt to read before timing out. 
                </summary>
      <returns>
                    A value, in miliseconds, that determines how long the stream will attempt to read before timing out.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="P:System.IO.Stream.ReadTimeout" /> method always throws an <see cref="T:System.InvalidOperationException" />. 
                </exception>
    </member>
    <member name="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>
                    When overridden in a derived class, sets the position within the current stream.
                </summary>
      <returns>
                    The new position within the current stream.
                </returns>
      <param name="offset">
                    A byte offset relative to the <paramref name="origin" /> parameter. 
                </param>
      <param name="origin">
                    A value of type <see cref="T:System.IO.SeekOrigin" /> indicating the reference point used to obtain the new position. 
                </param>
      <exception cref="T:System.IO.IOException">
                    An I/O error occurs. 
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The stream does not support seeking, such as if the stream is constructed from a pipe or console output. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    Methods were called after the stream was closed. 
                </exception>
    </member>
    <member name="M:System.IO.Stream.SetLength(System.Int64)">
      <summary>
                    When overridden in a derived class, sets the length of the current stream.
                </summary>
      <param name="value">
                    The desired length of the current stream in bytes. 
                </param>
      <exception cref="T:System.IO.IOException">
                    An I/O error occurs. 
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    Methods were called after the stream was closed. 
                </exception>
    </member>
    <member name="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>
                    When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
                </summary>
      <param name="buffer">
                    An array of bytes. This method copies <paramref name="count" /> bytes from <paramref name="buffer" /> to the current stream. 
                </param>
      <param name="offset">
                    The zero-based byte offset in <paramref name="buffer" /> at which to begin copying bytes to the current stream. 
                </param>
      <param name="count">
                    The number of bytes to be written to the current stream. 
                </param>
      <exception cref="T:System.ArgumentException">
                    The sum of <paramref name="offset" /> and <paramref name="count" /> is greater than the buffer length. 
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="count" /> is negative. 
                </exception>
      <exception cref="T:System.IO.IOException">
                    An I/O error occurs. 
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The stream does not support writing. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    Methods were called after the stream was closed. 
                </exception>
    </member>
    <member name="M:System.IO.Stream.WriteByte(System.Byte)">
      <summary>
                    Writes a byte to the current position in the stream and advances the position within the stream by one byte.
                </summary>
      <param name="value">
                    The byte to write to the stream. 
                </param>
      <exception cref="T:System.IO.IOException">
                    An I/O error occurs. 
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The stream does not support writing, or the stream is already closed. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    Methods were called after the stream was closed. 
                </exception>
    </member>
    <member name="P:System.IO.Stream.WriteTimeout">
      <summary>
                    Gets or sets a value, in miliseconds, that determines how long the stream will attempt to write before timing out. 
                </summary>
      <returns>
                    A value, in miliseconds, that determines how long the stream will attempt to write before timing out.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="P:System.IO.Stream.WriteTimeout" /> method always throws an <see cref="T:System.InvalidOperationException" />. 
                </exception>
    </member>
    <member name="T:System.IO.StreamReader">
      <summary>
                    Implements a <see cref="T:System.IO.TextReader" /> that reads characters from a byte stream in a particular encoding.
                </summary>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.IO.StreamReader" /> class for the specified stream.
                </summary>
      <param name="stream">
                    The stream to be read. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> does not support reading. 
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null. 
                </exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Boolean)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.IO.StreamReader" /> class for the specified stream, with the specified byte order mark detection option.
                </summary>
      <param name="stream">
                    The stream to be read. 
                </param>
      <param name="detectEncodingFromByteOrderMarks">
                    Indicates whether to look for byte order marks at the beginning of the file. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> does not support reading. 
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null. 
                </exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.IO.StreamReader" /> class for the specified stream, with the specified character encoding.
                </summary>
      <param name="stream">
                    The stream to be read. 
                </param>
      <param name="encoding">
                    The character encoding to use. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> does not support reading. 
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> or <paramref name="encoding" /> is null. 
                </exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.IO.StreamReader" /> class for the specified stream, with the specified character encoding and byte order mark detection option.
                </summary>
      <param name="stream">
                    The stream to be read. 
                </param>
      <param name="encoding">
                    The character encoding to use. 
                </param>
      <param name="detectEncodingFromByteOrderMarks">
                    Indicates whether to look for byte order marks at the beginning of the file. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> does not support reading. 
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> or <paramref name="encoding" /> is null. 
                </exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.IO.StreamReader" /> class for the specified stream, with the specified character encoding, byte order mark detection option, and buffer size.
                </summary>
      <param name="stream">
                    The stream to be read. 
                </param>
      <param name="encoding">
                    The character encoding to use. 
                </param>
      <param name="detectEncodingFromByteOrderMarks">
                    Indicates whether to look for byte order marks at the beginning of the file. 
                </param>
      <param name="bufferSize">
                    The minimum buffer size. 
                </param>
      <exception cref="T:System.ArgumentException">
                    The stream does not support reading. 
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> or <paramref name="encoding" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> is less than or equal to zero. 
                </exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String)">
      <summary>[SECURITY CRITICAL] 
                    Initializes a new instance of the <see cref="T:System.IO.StreamReader" /> class for the specified file name.
                </summary>
      <param name="path">
                    The complete file path to be read. 
                </param>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String,System.Boolean)">
      <summary>[SECURITY CRITICAL] 
                    Initializes a new instance of the <see cref="T:System.IO.StreamReader" /> class for the specified file name, with the specified byte order mark detection option.
                </summary>
      <param name="path">
                    The complete file path to be read. 
                </param>
      <param name="detectEncodingFromByteOrderMarks">
                    Indicates whether to look for byte order marks at the beginning of the file. 
                </param>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String,System.Text.Encoding)">
      <summary>[SECURITY CRITICAL] 
                    Initializes a new instance of the <see cref="T:System.IO.StreamReader" /> class for the specified file name, with the specified character encoding.
                </summary>
      <param name="path">
                    The complete file path to be read. 
                </param>
      <param name="encoding">
                    The character encoding to use. 
                </param>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String,System.Text.Encoding,System.Boolean)">
      <summary>[SECURITY CRITICAL] 
                    Initializes a new instance of the <see cref="T:System.IO.StreamReader" /> class for the specified file name, with the specified character encoding and byte order mark detection option.
                </summary>
      <param name="path">
                    The complete file path to be read. 
                </param>
      <param name="encoding">
                    The character encoding to use. 
                </param>
      <param name="detectEncodingFromByteOrderMarks">
                    Indicates whether to look for byte order marks at the beginning of the file. 
                </param>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String,System.Text.Encoding,System.Boolean,System.Int32)">
      <summary>[SECURITY CRITICAL] 
                    Initializes a new instance of the <see cref="T:System.IO.StreamReader" /> class for the specified file name, with the specified character encoding, byte order mark detection option, and buffer size.
                </summary>
      <param name="path">
                    The complete file path to be read. 
                </param>
      <param name="encoding">
                    The character encoding to use. 
                </param>
      <param name="detectEncodingFromByteOrderMarks">
                    Indicates whether to look for byte order marks at the beginning of the file. 
                </param>
      <param name="bufferSize">
                    The minimum buffer size, in number of 16-bit characters. 
                </param>
    </member>
    <member name="P:System.IO.StreamReader.BaseStream">
      <summary>
                    Returns the underlying stream.
                </summary>
      <returns>
                    The underlying stream.
                </returns>
    </member>
    <member name="M:System.IO.StreamReader.Close">
      <summary>
                    Closes the <see cref="T:System.IO.StreamReader" /> object and the underlying stream, and releases any system resources associated with the reader.
                </summary>
    </member>
    <member name="P:System.IO.StreamReader.CurrentEncoding">
      <summary>
                    Gets the current character encoding that the current <see cref="T:System.IO.StreamReader" /> object is using.
                </summary>
      <returns>
                    The current character encoding used by the current reader. The value can be different after the first call to any <see cref="Overload:System.IO.StreamReader.Read" /> method of <see cref="T:System.IO.StreamReader" />, since encoding autodetection is not done until the first call to a <see cref="Overload:System.IO.StreamReader.Read" /> method.
                </returns>
    </member>
    <member name="M:System.IO.StreamReader.DiscardBufferedData">
      <summary>
                    Allows a <see cref="T:System.IO.StreamReader" /> object to discard its current data.
                </summary>
    </member>
    <member name="M:System.IO.StreamReader.Dispose(System.Boolean)">
      <summary>
                    Closes the underlying stream, releases the unmanaged resources used by the <see cref="T:System.IO.StreamReader" />, and optionally releases the managed resources.
                </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. 
                </param>
    </member>
    <member name="P:System.IO.StreamReader.EndOfStream">
      <summary>
                    Gets a value that indicates whether the current stream position is at the end of the stream.
                </summary>
      <returns>true if the current stream position is at the end of the stream; otherwise false.
                </returns>
      <exception cref="T:System.ObjectDisposedException">
                    The underlying stream has been disposed.
                </exception>
    </member>
    <member name="F:System.IO.StreamReader.Null">
      <summary>
                    A <see cref="T:System.IO.StreamReader" /> object around an empty stream.
                </summary>
    </member>
    <member name="M:System.IO.StreamReader.Peek">
      <summary>
                    Returns the next available character but does not consume it.
                </summary>
      <returns>
                    An integer representing the next character to be read, or -1 if no more characters are available or the stream does not support seeking.
                </returns>
      <exception cref="T:System.IO.IOException">
                    An I/O error occurs. 
                </exception>
    </member>
    <member name="M:System.IO.StreamReader.Read">
      <summary>
                    Reads the next character from the input stream and advances the character position by one character.
                </summary>
      <returns>
                    The next character from the input stream represented as an <see cref="T:System.Int32" /> object, or -1 if no more characters are available.
                </returns>
      <exception cref="T:System.IO.IOException">
                    An I/O error occurs. 
                </exception>
    </member>
    <member name="M:System.IO.StreamReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>
                    Reads a maximum of <paramref name="count" /> characters from the current stream into <paramref name="buffer" />, beginning at <paramref name="index" />.
                </summary>
      <returns>
                    The number of characters that have been read, or 0 if at the end of the stream and no data was read. The number will be less than or equal to the <paramref name="count" /> parameter, depending on whether the data is available within the stream.
                </returns>
      <param name="buffer">
                    When this method returns, contains the specified character array with the values between <paramref name="index" /> and (<paramref name="index " />+ <paramref name="count" /> - 1) replaced by the characters read from the current source. 
                </param>
      <param name="index">
                    The index of <paramref name="buffer" /> at which to begin writing. 
                </param>
      <param name="count">
                    The maximum number of characters to read. 
                </param>
      <exception cref="T:System.ArgumentException">
                    The buffer length minus <paramref name="index" /> is less than <paramref name="count" />. 
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is negative. 
                </exception>
      <exception cref="T:System.IO.IOException">
                    An I/O error occurs, such as the stream is closed. 
                </exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadLine">
      <summary>
                    Reads a line of characters from the current stream and returns the data as a string.
                </summary>
      <returns>
                    The next line from the input stream, or null if the end of the input stream is reached.
                </returns>
      <exception cref="T:System.OutOfMemoryException">
                    There is insufficient memory to allocate a buffer for the returned string. 
                </exception>
      <exception cref="T:System.IO.IOException">
                    An I/O error occurs. 
                </exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadToEnd">
      <summary>
                    Reads the stream from the current position to the end of the stream.
                </summary>
      <returns>
                    The rest of the stream as a string, from the current position to the end. If the current position is at the end of the stream, returns the empty string("").
                </returns>
      <exception cref="T:System.OutOfMemoryException">
                    There is insufficient memory to allocate a buffer for the returned string. 
                </exception>
      <exception cref="T:System.IO.IOException">
                    An I/O error occurs. 
                </exception>
    </member>
    <member name="T:System.IO.StreamWriter">
      <summary>
                    Implements a <see cref="T:System.IO.TextWriter" /> for writing characters to a stream in a particular encoding.
                </summary>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.IO.Stream)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.IO.StreamWriter" /> class for the specified stream, using UTF-8 encoding and the default buffer size.
                </summary>
      <param name="stream">
                    The stream to write to. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> is not writable. 
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null. 
                </exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.IO.StreamWriter" /> class for the specified stream, using the specified encoding and the default buffer size.
                </summary>
      <param name="stream">
                    The stream to write to. 
                </param>
      <param name="encoding">
                    The character encoding to use. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> or <paramref name="encoding" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> is not writable. 
                </exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.IO.StreamWriter" /> class for the specified stream, using the specified encoding and buffer size.
                </summary>
      <param name="stream">
                    The stream to write to. 
                </param>
      <param name="encoding">
                    The character encoding to use. 
                </param>
      <param name="bufferSize">
                    Sets the buffer size. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> or <paramref name="encoding" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> is negative. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> is not writable. 
                </exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.String)">
      <summary>[SECURITY CRITICAL] 
                    Initializes a new instance of the <see cref="T:System.IO.StreamWriter" /> class for the specified file on the specified path, using the default encoding and buffer size.
                </summary>
      <param name="path">
                    The complete file path to write to. <paramref name="path" /> can be a file name. 
                </param>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.String,System.Boolean)">
      <summary>[SECURITY CRITICAL] 
                    Initializes a new instance of the <see cref="T:System.IO.StreamWriter" /> class for the specified file on the specified path, using the default encoding and buffer size. If the file exists, it can be either overwritten or appended to. If the file does not exist, this constructor creates a new file.
                </summary>
      <param name="path">
                    The complete file path to write to. 
                </param>
      <param name="append">
                    Determines whether data is to be appended to the file. If the file exists and <paramref name="append" /> is false, the file is overwritten. If the file exists and <paramref name="append" /> is true, the data is appended to the file. Otherwise, a new file is created. 
                </param>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.String,System.Boolean,System.Text.Encoding)">
      <summary>[SECURITY CRITICAL] 
                    Initializes a new instance of the <see cref="T:System.IO.StreamWriter" /> class for the specified file on the specified path, using the specified encoding and default buffer size. If the file exists, it can be either overwritten or appended to. If the file does not exist, this constructor creates a new file.
                </summary>
      <param name="path">
                    The complete file path to write to. 
                </param>
      <param name="append">
                    Determines whether data is to be appended to the file. If th